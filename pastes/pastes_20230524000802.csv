id,title,username,language,date,content
zMZMEaCh,LM-waffles,parracodea,JSON,Tuesday 23rd of May 2023 06:23:08 PM CDT,"[
  `apples and cinnamon :apple:`,
  `ice cream :ice_cream:`,
  `fresh fruit and whipped cream`,
  `peaches and honey :honey_pot:`,
  `raspberry jam`,
  `caramelized bananas`,
  `a fried egg`,
  `maple syrup :maple_leaf:`,
  `butter and syrup`,
  `fried chicken`,
  `powdered sugar`,
  `blueberries`,
  `chocolate chips :chocolate_bar:`,
  `strawberries and bananas :strawberry: :banana:`,
  `greek yogurt`,
  `toasted nuts`,
  `marshmallows and chocolate`,
]"
wKEyXjAF,LeftRight,CR7CR7,Java,Tuesday 23rd of May 2023 06:02:34 PM CDT,"import java.util.Scanner;

public class ADEX2_FromLeftToTheRight {
 public static void main(String[] args) {
  Scanner scanner = new Scanner(System.in);
  // get the number of lines as input
  int n = Integer.parseInt(scanner.nextLine());
  // loop through each line
  for (int i = 0; i < n; i++) {
   // get the two numbers as strings
   String[] numbers = scanner.nextLine().split("" "");
   // convert them to long values
   long firstNum = Long.parseLong(numbers[0]);
   long secondNum = Long.parseLong(numbers[1]);
   // initialize the sum of digits to zero
   int sumOfDigits = 0;
   // compare the two numbers
   if (firstNum > secondNum) {
    // if the left number is greater, get the absolute value of it
    firstNum = Math.abs(firstNum);
    // loop through each digit of the left number
    while (firstNum > 0) {
     // add the last digit to the sum of digits
     sumOfDigits += firstNum % 10;
     // remove the last digit from the left number
     firstNum /= 10;
    }
   } else {
    // if the right number is greater or equal, get the absolute value of it
    secondNum = Math.abs(secondNum);
    // loop through each digit of the right number
    while (secondNum > 0) {
     // add the last digit to the sum of digits
     sumOfDigits += secondNum % 10;
     // remove the last digit from the right number
     secondNum /= 10;
    }
   }
   // print the sum of digits
   System.out.println(sumOfDigits);
  }
 }
}"
N5ZbBr1b,SQL injection,teslariu,Python,Tuesday 23rd of May 2023 05:58:57 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# ejemplo de SQL injection
import sqlite3

# Creo una conexión con una base de datos: Si la base no existe, la crea
conn = sqlite3.connect(""prueba.sqlite"")

# Necesito un cursor para hacer las consultas SQL
cursor = conn.cursor()

# Vamos a agregar datos como tuplas
nombre = input(""Ingrese un nombre: "")
edad = int(input(""Ingrese una edad: ""))

# Correcto
# cursor.execute(""INSERT into personas VALUES(?,?)"",(nombre,edad))

# Peligroso, da warning (Si estan dehabilitados se me borra la tabla
# cursor.execute(f""INSERT into personas VALUES('{nombre}',{edad})"")

# Puedo evitar el warning; esto borrará la tabla personas
cursor.executescript(f""INSERT into personas VALUES('{nombre}',{edad})"")
conn.commit()

# leemos la tabla personas e imprimimos los datos
cursor.execute(""SELECT * FROM personas"")
personas = cursor.fetchall()  # fetchone() devuelve un solo registro
print(personas)

# cierro la base de datos
conn.close()

# Intento de SQL Injection
# nombre = Ale',25); DELETE FROM personas; --
# edad = 36

# INSERT into personas VALUES('Ale',25); DELETE FROM personas; --',36)"")


"
Y1XbMbGN,bbdd,teslariu,Python,Tuesday 23rd of May 2023 05:57:35 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Script que lista archivos y directorios
 
# Bases de datos relaciones: modelo E-R entidad relación
# Existen SGBD: sistemas gestores de bases de datos:
# MySQL, Postgres, MariaDB, Oracle, Informix, SQL Server, SQlite
# datos  --> SGBD  --> información
# SQL lenguaje de consultas estructuradas

# Existe una API DB que es la base para todas las bibliotecas
""""""
MySQL: PyMySQL
PostgreSQL: pg8000
SQLite: sqlite3 (incorporada en la librería std)
SQLServer: pyodbc
Oracle: cx_Oracle
""""""
import sqlite3

# Creo una conexión con una base de datos: Si la base no existe, la crea
conn = sqlite3.connect(""prueba.sqlite"")

# Necesito un cursor para hacer las consultas SQL
cursor = conn.cursor()

# Primer consulta SQL: crear una tabla
cursor.execute(""CREATE TABLE IF NOT EXISTS personas(nombre TEXT, edad NUMERIC)"")

# Cuando una consulta MODIFICA la base se debe hacer un COMMIT
conn.commit()

# Vamos a agregar datos como tuplas
datos = (
    (""Juan"",12),
    (""Ana"",25),
    (""Fernando"",78)
)
for nombre,edad in datos:
    cursor.execute(""INSERT into personas VALUES(?,?)"",(nombre,edad))
conn.commit()

# leemos la tabla personas e imprimimos los datos
cursor.execute(""SELECT * FROM personas"")
personas = cursor.fetchall()  # fetchone() devuelve un solo registro
print(personas)

# cierro la base de datos
conn.close()

""""""
Para MySQL
import pymysql

conn = pymysql.connect(
    host=""localhost"",
    port=3306,
    user=""usuario"",
    passwd=""clave"",
    db=""nombredb""
)

cursor = conn.cursor()
cursor.execute(""CREATE TABLE IF NOT EXISTS personas(nombre VARCHAR(45), edad INT)"")
conn.commit()

datos = (
    (""Juan"",12),
    (""Ana"",25),
    (""Fernando"",78)
)
for nombre,edad in datos:
    cursor.execute(""INSERT into personas VALUES (%s, %s)"""",(nombre,edad))
conn.commit()

## el resto es igual

"""""""
gMhnZdTj,Working Executors (Roblox after byfron),SkidScripts,Lua,Tuesday 23rd of May 2023 05:42:08 PM CDT,"Windows (Microsoft Store)
 
Electron, https://ryos.lol (free, safe, key, UWP Roblox)
 
Fluxus, https://fluxteam.net (free, safe, key, UWP Roblox)
 
Comet, https://cometrbx.xyz (free, safe, key, UWP Roblox)
 
Oxygen U, https://oxygenu.xyz (free, safe, key, UWP Roblox)
 
Celery, https://discord.gg/celery (free, somewhat safe, keyless, UWP Roblox)
 
Valyse, https://valyse.net (free, probably safe, keyless, UWP Roblox)
 
Shadow, https://wearedevs.net/d/shadow (free, safe, keyless iirc, UWP Roblox)
 
Kiwi X, https://kiwiexploits.com (free, safe, keyless or key you choose, UWP Roblox)
 
Mobile (iOS and Android)
 
Hydrogen, https://hydrogen.sh (free, safe, key, android)
 
Script Ware iOS, https://script-ware.com/ios (free, safe, key, ios)
 
Fluxus Android, https://fluxteam.net/android (free, safe, key, android)
 
Mac
 
Script-Ware M, https://script-ware.com/m (paid, safe, keyless)
 
Hydrogen, https://hydrogen.sh (free, safe, key)"
pDmdVGKi,busqueda recursiva os.walk,teslariu,Python,Tuesday 23rd of May 2023 04:39:35 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
""""""
Hacer un script que busque en forma recursiva en un directorio todos
los archivos con una determinada extensión
>>> python buscar_archivos.py <carpeta> <extension>
>>> EJ: 
>>> python buscar_archivos.py C:/Users  .xlsx
""""""
import os
import sys

# variable para contar cuantos archivos encuentro
hallados = 0

# verifico la cantidad de argumentos
if len(sys.argv) != 3:
    sys.exit(""Error: debe ejecutar 'python buscar_archivos.py <carpeta> <extension>"")

# asigno los parámetros
ruta, extension = sys.argv[1:]

# verifico si la ruta existe
if not os.path.exists(ruta):
    sys.exit(f""Error: no existe la ruta '{ruta}'"")
    
# Busco los archivos en forma recursiva
# os.walk() devuelve 3 valores:
# el nombre de la carpeta actual
# una lista de carpetas dentro de la carpeta actual
# una lista de archivos dentro de la carpeta actual
for carpeta_actual,lista_carpetas,lista_archivos in os.walk(ruta):
    for archivo in lista_archivos:
        if archivo.endswith(extension):
            print(os.path.join(carpeta_actual,archivo))
            hallados += 1
            
if not hallados:
    print(f""No se encontraron archivos con extensión '{extension}' en la ruta '{ruta}'"")
else:
    print(f""\nTotal de archivos hallados: {hallados}"")
    "
jJHeaXfH,cdk Haze of Misery script,goku13l,Lua,Tuesday 23rd of May 2023 04:22:03 PM CDT,"Loadstring(game:HttpGet(""https://raw.githubusercontent.com/scriptsholder/roblox/main/simple""))()

-- Create the toggle button
local toggleButton = Instance.new(""TextButton"")
toggleButton.Size = UDim2.new(0, 100, 0, 30)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.Text = ""Toggle Console Log""
toggleButton.Parent = game.Players.LocalPlayer.PlayerGui

local consoleEnabled = false -- Variable to track the console log state

-- Function to toggle the console log visibility
local function toggleConsoleLog()
    consoleEnabled = not consoleEnabled
    if consoleEnabled then
        game:GetService(""CoreGui"").RobloxGui.Chat.LocalCoreChat.Visible = true
    else
        game:GetService(""CoreGui"").RobloxGui.Chat.LocalCoreChat.Visible = false
    end
end

-- Connect the toggle button to the toggleConsoleLog function
toggleButton.MouseButton1Click:Connect(toggleConsoleLog)
 

-- you need to use consle to see what you have to kill

-- f9 or /console in chat"
SZRpnQNX,Nigerian scammers [22-5-3/2023],bombaires,HTML,Tuesday 23rd of May 2023 03:58:00 PM CDT,"<a href=""mailto:ofujames777@gmail.com"">ofujames777@gmail.com</a>
<a href=""mailto:o.f.uj.ame.s7.7.7@gmail.com"">o.f.uj.ame.s7.7.7@gmail.com</a>
<a href=""mailto:o.f.ujame.s.7.77@gmail.com"">o.f.ujame.s.7.77@gmail.com</a>
<a href=""mailto:o.f.ujam.es.7.7.7@gmail.com"">o.f.ujam.es.7.7.7@gmail.com</a>
<a href=""mailto:o.fuja.m.e.s77.7@gmail.com"">o.fuja.m.e.s77.7@gmail.com</a>
<a href=""mailto:of.u.jam.e.s7.7.7@gmail.com"">of.u.jam.e.s7.7.7@gmail.com</a>
<a href=""mailto:o.f.u.j.am.e.s7.7.7@gmail.com"">o.f.u.j.am.e.s7.7.7@gmail.com</a>
<a href=""mailto:o.fuj.ames7.7.7@gmail.com"">o.fuj.ames7.7.7@gmail.com</a>
<a href=""mailto:of.uj.a.m.e.s.777@gmail.com"">of.uj.a.m.e.s.777@gmail.com</a>
<a href=""mailto:of.uj.a.m.es.7.77@gmail.com"">of.uj.a.m.es.7.77@gmail.com</a>
<a href=""mailto:ofu.j.ame.s.77.7@gmail.com"">ofu.j.ame.s.77.7@gmail.com</a>
<a href=""mailto:ofu.j.ame.s77.7@gmail.com"">ofu.j.ame.s77.7@gmail.com</a>
<a href=""mailto:o.fuja.m.e.s777@gmail.com"">o.fuja.m.e.s777@gmail.com</a>
<a href=""mailto:o.fujam.e.s77.7@gmail.com"">o.fujam.e.s77.7@gmail.com</a>
<a href=""mailto:ofujames7.77@gmail.com"">ofujames7.77@gmail.com</a>
<a href=""mailto:o.fu.j.am.es.777@gmail.com"">o.fu.j.am.es.777@gmail.com</a>
<a href=""mailto:o.f.ujam.es77.7@gmail.com"">o.f.ujam.es77.7@gmail.com</a>
<a href=""mailto:of.u.ja.me.s77.7@gmail.com"">of.u.ja.me.s77.7@gmail.com</a>
<a href=""mailto:o.fuja.me.s.77.7@gmail.com"">o.fuja.me.s.77.7@gmail.com</a>
<a href=""mailto:o.fujame.s7.77@gmail.com"">o.fujame.s7.77@gmail.com</a>
<a href=""mailto:o.fu.j.ames777@gmail.com"">o.fu.j.ames777@gmail.com</a>
<a href=""mailto:o.fu.jame.s.77.7@gmail.com"">o.fu.jame.s.77.7@gmail.com</a>
<a href=""mailto:ofuj.a.me.s777@gmail.com"">ofuj.a.me.s777@gmail.com</a>
<a href=""mailto:ofuj.am.e.s7.7.7@gmail.com"">ofuj.am.e.s7.7.7@gmail.com</a>
<a href=""mailto:o.fuja.mes.77.7@gmail.com"">o.fuja.mes.77.7@gmail.com</a>
<a href=""mailto:of.uj.ames.777@gmail.com"">of.uj.ames.777@gmail.com</a>
<a href=""mailto:ofu.j.am.e.s.7.77@gmail.com"">ofu.j.am.e.s.7.77@gmail.com</a>
<a href=""mailto:of.uj.a.me.s.7.7.7@gmail.com"">of.uj.a.me.s.7.7.7@gmail.com</a>
<a href=""mailto:o.fu.jam.es.777@gmail.com"">o.fu.jam.es.777@gmail.com</a>
<a href=""mailto:ofu.j.ames77.7@gmail.com"">ofu.j.ames77.7@gmail.com</a>
<a href=""mailto:o.f.u.james.777@gmail.com"">o.f.u.james.777@gmail.com</a>
<a href=""mailto:o.fu.j.a.mes.777@gmail.com"">o.fu.j.a.mes.777@gmail.com</a>
<a href=""mailto:ofu.j.am.e.s77.7@gmail.com"">ofu.j.am.e.s77.7@gmail.com</a>
<a href=""mailto:ofuj.am.e.s77.7@gmail.com"">ofuj.am.e.s77.7@gmail.com</a>
<a href=""mailto:ofu.james7.77@gmail.com"">ofu.james7.77@gmail.com</a>
<a href=""mailto:o.fuj.a.m.es7.7.7@gmail.com"">o.fuj.a.m.es7.7.7@gmail.com</a>
<a href=""mailto:of.u.ja.mes7.77@gmail.com"">of.u.ja.mes7.77@gmail.com</a>
<a href=""mailto:ofuj.a.m.es.7.77@gmail.com"">ofuj.a.m.es.7.77@gmail.com</a>
<a href=""mailto:o.fu.j.ame.s7.77@gmail.com"">o.fu.j.ame.s7.77@gmail.com</a>
<a href=""mailto:ofu.ja.me.s.77.7@gmail.com"">ofu.ja.me.s.77.7@gmail.com</a>
<a href=""mailto:ofuja.mes777@gmail.com"">ofuja.mes777@gmail.com</a>
<a href=""mailto:o.f.uja.me.s.777@gmail.com"">o.f.uja.me.s.777@gmail.com</a>
<a href=""mailto:o.f.ujame.s777@gmail.com"">o.f.ujame.s777@gmail.com</a>
<a href=""mailto:o.f.u.ja.m.e.s7.77@gmail.com"">o.f.u.ja.m.e.s7.77@gmail.com</a>
<a href=""mailto:of.ujames77.7@gmail.com"">of.ujames77.7@gmail.com</a>
<a href=""mailto:of.u.jam.e.s77.7@gmail.com"">of.u.jam.e.s77.7@gmail.com</a>
<a href=""mailto:ofuj.ames77.7@gmail.com"">ofuj.ames77.7@gmail.com</a>
<a href=""mailto:o.fujam.es.777@gmail.com"">o.fujam.es.777@gmail.com</a>
<a href=""mailto:of.u.j.a.m.e.s777@gmail.com"">of.u.j.a.m.e.s777@gmail.com</a>
<a href=""mailto:ofuja.me.s.777@gmail.com"">ofuja.me.s.777@gmail.com</a>
<a href=""mailto:of.uj.a.me.s7.77@gmail.com"">of.uj.a.me.s7.77@gmail.com</a>
<a href=""mailto:o.f.u.jam.e.s.777@gmail.com"">o.f.u.jam.e.s.777@gmail.com</a>
<a href=""mailto:o.f.u.ja.m.es7.77@gmail.com"">o.f.u.ja.m.es7.77@gmail.com</a>
<a href=""mailto:o.f.u.j.ame.s.77.7@gmail.com"">o.f.u.j.ame.s.77.7@gmail.com</a>
<a href=""mailto:o.f.u.j.a.m.e.s777@gmail.com"">o.f.u.j.a.m.e.s777@gmail.com</a>
<a href=""mailto:o.fu.j.a.m.e.s7.77@gmail.com"">o.fu.j.a.m.e.s7.77@gmail.com</a>
<a href=""mailto:o.f.u.j.a.m.e.s.7.7.7@gmail.com"">o.f.u.j.a.m.e.s.7.7.7@gmail.com</a>
<a href=""mailto:o.f.u.jam.es.7.77@gmail.com"">o.f.u.jam.es.7.77@gmail.com</a>
<a href=""mailto:o.f.u.jam.e.s777@gmail.com"">o.f.u.jam.e.s777@gmail.com</a>
<a href=""mailto:o.f.uj.a.m.e.s7.7.7@gmail.com"">o.f.uj.a.m.e.s7.7.7@gmail.com</a>
<a href=""mailto:of.uja.mes.777@gmail.com"">of.uja.mes.777@gmail.com</a>
<a href=""mailto:of.u.j.am.es.7.77@gmail.com"">of.u.j.am.es.7.77@gmail.com</a>
<a href=""mailto:o.f.u.j.ame.s777@gmail.com"">o.f.u.j.ame.s777@gmail.com</a>
<a href=""mailto:ofuja.mes.77.7@gmail.com"">ofuja.mes.77.7@gmail.com</a>
<a href=""mailto:ofuja.m.e.s.77.7@gmail.com"">ofuja.m.e.s.77.7@gmail.com</a>
<a href=""mailto:o.f.u.ja.mes.7.77@gmail.com"">o.f.u.ja.mes.7.77@gmail.com</a>
<a href=""mailto:ofu.j.a.mes.7.77@gmail.com"">ofu.j.a.mes.7.77@gmail.com</a>
<a href=""mailto:ofu.james77.7@gmail.com"">ofu.james77.7@gmail.com</a>
<a href=""mailto:ofu.ja.m.e.s777@gmail.com"">ofu.ja.m.e.s777@gmail.com</a>
<a href=""mailto:ofu.jam.es77.7@gmail.com"">ofu.jam.es77.7@gmail.com</a>
<a href=""mailto:of.u.ja.m.e.s.7.7.7@gmail.com"">of.u.ja.m.e.s.7.7.7@gmail.com</a>
<a href=""mailto:ofuj.a.mes7.77@gmail.com"">ofuj.a.mes7.77@gmail.com</a>
<a href=""mailto:of.u.j.ame.s.7.77@gmail.com"">of.u.j.ame.s.7.77@gmail.com</a>
<a href=""mailto:o.f.u.jam.e.s.7.77@gmail.com"">o.f.u.jam.e.s.7.77@gmail.com</a>
<a href=""mailto:of.u.ja.m.e.s7.7.7@gmail.com"">of.u.ja.m.e.s7.7.7@gmail.com</a>
<a href=""mailto:of.ujames.7.77@gmail.com"">of.ujames.7.77@gmail.com</a>
<a href=""mailto:o.fu.j.a.m.es.777@gmail.com"">o.fu.j.a.m.es.777@gmail.com</a>
<a href=""mailto:of.u.ja.me.s7.77@gmail.com"">of.u.ja.me.s7.77@gmail.com</a>
<a href=""mailto:o.f.uj.am.es.7.7.7@gmail.com"">o.f.uj.am.es.7.7.7@gmail.com</a>
<a href=""mailto:o.fuj.ame.s.7.77@gmail.com"">o.fuj.ame.s.7.77@gmail.com</a>
<a href=""mailto:o.fu.j.a.me.s.7.77@gmail.com"">o.fu.j.a.me.s.7.77@gmail.com</a>
<a href=""mailto:ofu.j.a.m.e.s77.7@gmail.com"">ofu.j.a.m.e.s77.7@gmail.com</a>
<a href=""mailto:o.f.uj.ame.s.7.7.7@gmail.com"">o.f.uj.ame.s.7.7.7@gmail.com</a>
<a href=""mailto:ofu.j.a.me.s7.77@gmail.com"">ofu.j.a.me.s7.77@gmail.com</a>
<a href=""mailto:of.ujames777@gmail.com"">of.ujames777@gmail.com</a>
<a href=""mailto:o.fu.jame.s.777@gmail.com"">o.fu.jame.s.777@gmail.com</a>
<a href=""mailto:of.u.j.ame.s.77.7@gmail.com"">of.u.j.ame.s.77.7@gmail.com</a>
<a href=""mailto:ofu.j.a.mes7.7.7@gmail.com"">ofu.j.a.mes7.7.7@gmail.com</a>
<a href=""mailto:of.u.ja.mes777@gmail.com"">of.u.ja.mes777@gmail.com</a>
<a href=""mailto:o.fu.ja.m.e.s.7.7.7@gmail.com"">o.fu.ja.m.e.s.7.7.7@gmail.com</a>
<a href=""mailto:ofu.james.777@gmail.com"">ofu.james.777@gmail.com</a>
<a href=""mailto:ofuj.a.m.es.77.7@gmail.com"">ofuj.a.m.es.77.7@gmail.com</a>
<a href=""mailto:ofu.jam.es7.77@gmail.com"">ofu.jam.es7.77@gmail.com</a>
<a href=""mailto:ofujames7.7.7@gmail.com"">ofujames7.7.7@gmail.com</a>
<a href=""mailto:o.fujame.s777@gmail.com"">o.fujame.s777@gmail.com</a>
<a href=""mailto:o.f.uj.ames.777@gmail.com"">o.f.uj.ames.777@gmail.com</a>
<a href=""mailto:o.f.u.j.ames77.7@gmail.com"">o.f.u.j.ames77.7@gmail.com</a>
<a href=""mailto:o.fuj.am.es77.7@gmail.com"">o.fuj.am.es77.7@gmail.com</a>
<a href=""mailto:of.u.j.a.mes777@gmail.com"">of.u.j.a.mes777@gmail.com</a>
<a href=""mailto:ofuj.a.m.e.s777@gmail.com"">ofuj.a.m.e.s777@gmail.com</a>
<a href=""mailto:ofujam.es777@gmail.com"">ofujam.es777@gmail.com</a>
<a href=""mailto:o.f.u.ja.me.s.7.7.7@gmail.com"">o.f.u.ja.me.s.7.7.7@gmail.com</a>
<a href=""mailto:o.fuja.m.es.777@gmail.com"">o.fuja.m.es.777@gmail.com</a>
<a href=""mailto:ofuja.m.es777@gmail.com"">ofuja.m.es777@gmail.com</a>
<a href=""mailto:ofu.j.a.m.e.s.777@gmail.com"">ofu.j.a.m.e.s.777@gmail.com</a>
<a href=""mailto:o.fuja.m.e.s.7.7.7@gmail.com"">o.fuja.m.e.s.7.7.7@gmail.com</a>
<a href=""mailto:of.u.j.ames.777@gmail.com"">of.u.j.ames.777@gmail.com</a>
<a href=""mailto:o.fu.j.a.mes7.7.7@gmail.com"">o.fu.j.a.mes7.7.7@gmail.com</a>
<a href=""mailto:o.fuj.ames.7.7.7@gmail.com"">o.fuj.ames.7.7.7@gmail.com</a>
<a href=""mailto:of.uja.m.es.7.77@gmail.com"">of.uja.m.es.7.77@gmail.com</a>
<a href=""mailto:o.f.ujam.es777@gmail.com"">o.f.ujam.es777@gmail.com</a>
<a href=""mailto:of.u.j.am.e.s.77.7@gmail.com"">of.u.j.am.e.s.77.7@gmail.com</a>
<a href=""mailto:ofu.ja.m.es7.7.7@gmail.com"">ofu.ja.m.es7.7.7@gmail.com</a>
<a href=""mailto:of.u.ja.m.es.7.77@gmail.com"">of.u.ja.m.es.7.77@gmail.com</a>
<a href=""mailto:of.ujam.es.777@gmail.com"">of.ujam.es.777@gmail.com</a>
<a href=""mailto:o.f.uj.a.me.s77.7@gmail.com"">o.f.uj.a.me.s77.7@gmail.com</a>
<a href=""mailto:ofujam.e.s77.7@gmail.com"">ofujam.e.s77.7@gmail.com</a>
<a href=""mailto:ofu.jame.s77.7@gmail.com"">ofu.jame.s77.7@gmail.com</a>
<a href=""mailto:o.fu.jame.s777@gmail.com"">o.fu.jame.s777@gmail.com</a>
<a href=""mailto:of.u.j.am.es7.7.7@gmail.com"">of.u.j.am.es7.7.7@gmail.com</a>
<a href=""mailto:ofuj.a.me.s.7.77@gmail.com"">ofuj.a.me.s.7.77@gmail.com</a>
<a href=""mailto:o.f.ujam.e.s7.77@gmail.com"">o.f.ujam.e.s7.77@gmail.com</a>
<a href=""mailto:o.fuj.a.m.e.s77.7@gmail.com"">o.fuj.a.m.e.s77.7@gmail.com</a>
<a href=""mailto:ofu.j.ames7.77@gmail.com"">ofu.j.ames7.77@gmail.com</a>
<a href=""mailto:o.fu.j.a.me.s7.7.7@gmail.com"">o.fu.j.a.me.s7.7.7@gmail.com</a>
<a href=""mailto:o.f.u.j.a.m.es7.7.7@gmail.com"">o.f.u.j.a.m.es7.7.7@gmail.com</a>
<a href=""mailto:o.f.u.ja.mes7.7.7@gmail.com"">o.f.u.ja.mes7.7.7@gmail.com</a>
<a href=""mailto:o.f.u.jame.s.7.7.7@gmail.com"">o.f.u.jame.s.7.7.7@gmail.com</a>
<a href=""mailto:ofu.jam.e.s.7.77@gmail.com"">ofu.jam.e.s.7.77@gmail.com</a>
<a href=""mailto:ofu.jame.s777@gmail.com"">ofu.jame.s777@gmail.com</a>
<a href=""mailto:of.uj.am.es.777@gmail.com"">of.uj.am.es.777@gmail.com</a>
<a href=""mailto:o.fuj.a.m.e.s.777@gmail.com"">o.fuj.a.m.e.s.777@gmail.com</a>
<a href=""mailto:ofu.j.am.es7.7.7@gmail.com"">ofu.j.am.es7.7.7@gmail.com</a>
<a href=""mailto:ofu.j.a.me.s77.7@gmail.com"">ofu.j.a.me.s77.7@gmail.com</a>
<a href=""mailto:o.f.uj.am.e.s.777@gmail.com"">o.f.uj.am.e.s.777@gmail.com</a>
<a href=""mailto:o.fu.j.a.m.e.s7.7.7@gmail.com"">o.fu.j.a.m.e.s7.7.7@gmail.com</a>
<a href=""mailto:o.f.u.jame.s.77.7@gmail.com"">o.f.u.jame.s.77.7@gmail.com</a>
<a href=""mailto:o.f.uja.me.s777@gmail.com"">o.f.uja.me.s777@gmail.com</a>
<a href=""mailto:ofu.ja.m.es.777@gmail.com"">ofu.ja.m.es.777@gmail.com</a>
<a href=""mailto:o.fu.j.ames77.7@gmail.com"">o.fu.j.ames77.7@gmail.com</a>
<a href=""mailto:of.u.j.am.e.s.7.77@gmail.com"">of.u.j.am.e.s.7.77@gmail.com</a>
<a href=""mailto:of.u.ja.m.e.s.777@gmail.com"">of.u.ja.m.e.s.777@gmail.com</a>
<a href=""mailto:of.uj.ames.77.7@gmail.com"">of.uj.ames.77.7@gmail.com</a>
<a href=""mailto:o.fuj.am.e.s.777@gmail.com"">o.fuj.am.e.s.777@gmail.com</a>
<a href=""mailto:ofuj.am.es7.7.7@gmail.com"">ofuj.am.es7.7.7@gmail.com</a>
<a href=""mailto:o.fu.ja.m.es.777@gmail.com"">o.fu.ja.m.es.777@gmail.com</a>
<a href=""mailto:o.f.uj.am.es777@gmail.com"">o.f.uj.am.es777@gmail.com</a>
<a href=""mailto:ofuj.a.mes.7.7.7@gmail.com"">ofuj.a.mes.7.7.7@gmail.com</a>
<a href=""mailto:o.f.u.j.a.m.e.s7.77@gmail.com"">o.f.u.j.a.m.e.s7.77@gmail.com</a>
<a href=""mailto:of.uja.m.es.77.7@gmail.com"">of.uja.m.es.77.7@gmail.com</a>
<a href=""mailto:of.uj.a.m.es777@gmail.com"">of.uj.a.m.es777@gmail.com</a>
<a href=""mailto:of.uja.me.s7.7.7@gmail.com"">of.uja.me.s7.7.7@gmail.com</a>
<a href=""mailto:of.u.james7.7.7@gmail.com"">of.u.james7.7.7@gmail.com</a>
<a href=""mailto:of.u.j.am.es7.77@gmail.com"">of.u.j.am.es7.77@gmail.com</a>
<a href=""mailto:o.f.uja.mes.7.77@gmail.com"">o.f.uja.mes.7.77@gmail.com</a>
<a href=""mailto:o.f.u.ja.m.e.s.7.77@gmail.com"">o.f.u.ja.m.e.s.7.77@gmail.com</a>
<a href=""mailto:of.uj.a.m.es7.77@gmail.com"">of.uj.a.m.es7.77@gmail.com</a>
<a href=""mailto:ofu.j.ame.s.7.7.7@gmail.com"">ofu.j.ame.s.7.7.7@gmail.com</a>
<a href=""mailto:o.f.u.jam.e.s.77.7@gmail.com"">o.f.u.jam.e.s.77.7@gmail.com</a>
<a href=""mailto:o.fu.j.ames.7.77@gmail.com"">o.fu.j.ames.7.77@gmail.com</a>
<a href=""mailto:ofu.james.7.7.7@gmail.com"">ofu.james.7.7.7@gmail.com</a>
<a href=""mailto:of.u.james.777@gmail.com"">of.u.james.777@gmail.com</a>
<a href=""mailto:of.u.ja.me.s.77.7@gmail.com"">of.u.ja.me.s.77.7@gmail.com</a>
<a href=""mailto:ofuj.ames7.77@gmail.com"">ofuj.ames7.77@gmail.com</a>
<a href=""mailto:of.uj.am.es.77.7@gmail.com"">of.uj.am.es.77.7@gmail.com</a>
<a href=""mailto:ofu.ja.me.s.7.7.7@gmail.com"">ofu.ja.me.s.7.7.7@gmail.com</a>
<a href=""mailto:o.f.uj.a.me.s7.7.7@gmail.com"">o.f.uj.a.me.s7.7.7@gmail.com</a>
<a href=""mailto:o.f.ujame.s.7.7.7@gmail.com"">o.f.ujame.s.7.7.7@gmail.com</a>
<a href=""mailto:of.u.j.a.m.e.s.7.7.7@gmail.com"">of.u.j.a.m.e.s.7.7.7@gmail.com</a>
<a href=""mailto:o.f.ujam.e.s.77.7@gmail.com"">o.f.ujam.e.s.77.7@gmail.com</a>
<a href=""mailto:of.u.j.a.me.s.77.7@gmail.com"">of.u.j.a.me.s.77.7@gmail.com</a>
<a href=""mailto:o.fu.jam.e.s.777@gmail.com"">o.fu.jam.e.s.777@gmail.com</a>
<a href=""mailto:o.fu.j.a.m.es7.7.7@gmail.com"">o.fu.j.a.m.es7.7.7@gmail.com</a>
<a href=""mailto:o.f.uj.a.mes.777@gmail.com"">o.f.uj.a.mes.777@gmail.com</a>
<a href=""mailto:of.u.james77.7@gmail.com"">of.u.james77.7@gmail.com</a>
<a href=""mailto:ofujame.s.777@gmail.com"">ofujame.s.777@gmail.com</a>
<a href=""mailto:o.f.uj.a.m.e.s777@gmail.com"">o.f.uj.a.m.e.s777@gmail.com</a>
<a href=""mailto:of.u.j.ame.s7.77@gmail.com"">of.u.j.ame.s7.77@gmail.com</a>
<a href=""mailto:o.f.uj.ame.s7.77@gmail.com"">o.f.uj.ame.s7.77@gmail.com</a>
<a href=""mailto:ofu.ja.mes.77.7@gmail.com"">ofu.ja.mes.77.7@gmail.com</a>
<a href=""mailto:ofuja.m.e.s77.7@gmail.com"">ofuja.m.e.s77.7@gmail.com</a>
<a href=""mailto:o.f.uj.a.mes777@gmail.com"">o.f.uj.a.mes777@gmail.com</a>
<a href=""mailto:o.f.u.ja.mes.777@gmail.com"">o.f.u.ja.mes.777@gmail.com</a>
<a href=""mailto:of.u.j.am.e.s77.7@gmail.com"">of.u.j.am.e.s77.7@gmail.com</a>
<a href=""mailto:o.fu.james.7.77@gmail.com"">o.fu.james.7.77@gmail.com</a>
<a href=""mailto:o.f.ujames77.7@gmail.com"">o.f.ujames77.7@gmail.com</a>
<a href=""mailto:of.uj.a.m.e.s7.7.7@gmail.com"">of.uj.a.m.e.s7.7.7@gmail.com</a>
<a href=""mailto:o.f.uja.mes7.7.7@gmail.com"">o.f.uja.mes7.7.7@gmail.com</a>
<a href=""mailto:o.fuj.a.m.e.s.7.77@gmail.com"">o.fuj.a.m.e.s.7.77@gmail.com</a>
<a href=""mailto:of.u.ja.mes.77.7@gmail.com"">of.u.ja.mes.77.7@gmail.com</a>
<a href=""mailto:ofu.james.77.7@gmail.com"">ofu.james.77.7@gmail.com</a>
<a href=""mailto:ofuj.am.es.77.7@gmail.com"">ofuj.am.es.77.7@gmail.com</a>
<a href=""mailto:o.f.uj.ames7.7.7@gmail.com"">o.f.uj.ames7.7.7@gmail.com</a>
<a href=""mailto:o.fuja.m.es.77.7@gmail.com"">o.fuja.m.es.77.7@gmail.com</a>
<a href=""mailto:of.uj.ames7.77@gmail.com"">of.uj.ames7.77@gmail.com</a>
<a href=""mailto:o.f.uj.ames7.77@gmail.com"">o.f.uj.ames7.77@gmail.com</a>
<a href=""mailto:ofu.ja.m.e.s.7.77@gmail.com"">ofu.ja.m.e.s.7.77@gmail.com</a>
<a href=""mailto:o.fu.j.am.es77.7@gmail.com"">o.fu.j.am.es77.7@gmail.com</a>
<a href=""mailto:of.uj.am.e.s.7.7.7@gmail.com"">of.uj.am.e.s.7.7.7@gmail.com</a>
<a href=""mailto:ofujam.es.77.7@gmail.com"">ofujam.es.77.7@gmail.com</a>
<a href=""mailto:of.u.j.a.mes.77.7@gmail.com"">of.u.j.a.mes.77.7@gmail.com</a>
<a href=""mailto:jamesjiya@gmail.com"">jamesjiya@gmail.com</a>
<a href=""mailto:j.a.me.sj.iy.a@gmail.com"">j.a.me.sj.iy.a@gmail.com</a>
<a href=""mailto:ja.m.esji.y.a@gmail.com"">ja.m.esji.y.a@gmail.com</a>
<a href=""mailto:ja.m.esjiy.a@gmail.com"">ja.m.esjiy.a@gmail.com</a>
<a href=""mailto:j.a.m.e.s.j.i.y.a@gmail.com"">j.a.m.e.s.j.i.y.a@gmail.com</a>
<a href=""mailto:ja.m.esj.iy.a@gmail.com"">ja.m.esj.iy.a@gmail.com</a>
<a href=""mailto:j.ames.ji.ya@gmail.com"">j.ames.ji.ya@gmail.com</a>
<a href=""mailto:j.a.me.sji.y.a@gmail.com"">j.a.me.sji.y.a@gmail.com</a>
<a href=""mailto:ja.m.esji.ya@gmail.com"">ja.m.esji.ya@gmail.com</a>
<a href=""mailto:j.ame.sjiya@gmail.com"">j.ame.sjiya@gmail.com</a>
<a href=""mailto:jam.es.jiya@gmail.com"">jam.es.jiya@gmail.com</a>
<a href=""mailto:ja.mesji.ya@gmail.com"">ja.mesji.ya@gmail.com</a>
<a href=""mailto:j.ame.sji.y.a@gmail.com"">j.ame.sji.y.a@gmail.com</a>
<a href=""mailto:j.ame.s.ji.ya@gmail.com"">j.ame.s.ji.ya@gmail.com</a>
<a href=""mailto:j.am.e.s.ji.y.a@gmail.com"">j.am.e.s.ji.y.a@gmail.com</a>
<a href=""mailto:j.ame.s.j.iya@gmail.com"">j.ame.s.j.iya@gmail.com</a>
<a href=""mailto:jame.sjiya@gmail.com"">jame.sjiya@gmail.com</a>
<a href=""mailto:j.a.mesjiy.a@gmail.com"">j.a.mesjiy.a@gmail.com</a>
<a href=""mailto:j.am.e.s.j.i.ya@gmail.com"">j.am.e.s.j.i.ya@gmail.com</a>
<a href=""mailto:jamesjiya@gmail.com"">jamesjiya@gmail.com</a>
<a href=""mailto:j.ame.sj.iya@gmail.com"">j.ame.sj.iya@gmail.com</a>
<a href=""mailto:j.a.m.esji.y.a@gmail.com"">j.a.m.esji.y.a@gmail.com</a>
<a href=""mailto:jam.es.ji.ya@gmail.com"">jam.es.ji.ya@gmail.com</a>
<a href=""mailto:jame.sj.i.y.a@gmail.com"">jame.sj.i.y.a@gmail.com</a>
<a href=""mailto:ja.m.e.s.j.iya@gmail.com"">ja.m.e.s.j.iya@gmail.com</a>
<a href=""mailto:j.a.mesji.ya@gmail.com"">j.a.mesji.ya@gmail.com</a>
<a href=""mailto:j.a.me.sj.i.y.a@gmail.com"">j.a.me.sj.i.y.a@gmail.com</a>
<a href=""mailto:j.a.m.e.sj.i.ya@gmail.com"">j.a.m.e.sj.i.ya@gmail.com</a>
<a href=""mailto:jam.e.sj.i.y.a@gmail.com"">jam.e.sj.i.y.a@gmail.com</a>
<a href=""mailto:jam.e.sji.y.a@gmail.com"">jam.e.sji.y.a@gmail.com</a>
<a href=""mailto:j.amesji.ya@gmail.com"">j.amesji.ya@gmail.com</a>
<a href=""mailto:ja.me.s.jiy.a@gmail.com"">ja.me.s.jiy.a@gmail.com</a>
<a href=""mailto:ja.me.sj.iy.a@gmail.com"">ja.me.sj.iy.a@gmail.com</a>
<a href=""mailto:jam.esj.i.y.a@gmail.com"">jam.esj.i.y.a@gmail.com</a>
<a href=""mailto:j.a.m.e.sjiya@gmail.com"">j.a.m.e.sjiya@gmail.com</a>
<a href=""mailto:j.a.m.es.ji.y.a@gmail.com"">j.a.m.es.ji.y.a@gmail.com</a>
<a href=""mailto:ja.me.sjiya@gmail.com"">ja.me.sjiya@gmail.com</a>
<a href=""mailto:jame.s.j.i.y.a@gmail.com"">jame.s.j.i.y.a@gmail.com</a>
<a href=""mailto:ja.me.s.jiya@gmail.com"">ja.me.s.jiya@gmail.com</a>
<a href=""mailto:j.a.mesj.i.ya@gmail.com"">j.a.mesj.i.ya@gmail.com</a>
<a href=""mailto:ja.m.e.sj.i.ya@gmail.com"">ja.m.e.sj.i.ya@gmail.com</a>
<a href=""mailto:jam.esjiy.a@gmail.com"">jam.esjiy.a@gmail.com</a>
<a href=""mailto:jam.e.sji.ya@gmail.com"">jam.e.sji.ya@gmail.com</a>
<a href=""mailto:j.am.e.s.ji.ya@gmail.com"">j.am.e.s.ji.ya@gmail.com</a>
<a href=""mailto:j.am.e.s.j.iya@gmail.com"">j.am.e.s.j.iya@gmail.com</a>
<a href=""mailto:ja.me.s.ji.ya@gmail.com"">ja.me.s.ji.ya@gmail.com</a>
<a href=""mailto:j.a.mesji.y.a@gmail.com"">j.a.mesji.y.a@gmail.com</a>
<a href=""mailto:ja.mes.j.i.y.a@gmail.com"">ja.mes.j.i.y.a@gmail.com</a>
<a href=""mailto:ja.m.es.j.i.ya@gmail.com"">ja.m.es.j.i.ya@gmail.com</a>
<a href=""mailto:ja.m.e.s.j.i.y.a@gmail.com"">ja.m.e.s.j.i.y.a@gmail.com</a>
<a href=""mailto:ja.m.es.j.iy.a@gmail.com"">ja.m.es.j.iy.a@gmail.com</a>
<a href=""mailto:james.ji.y.a@gmail.com"">james.ji.y.a@gmail.com</a>
<a href=""mailto:j.amesj.i.y.a@gmail.com"">j.amesj.i.y.a@gmail.com</a>
<a href=""mailto:j.a.m.e.s.ji.ya@gmail.com"">j.a.m.e.s.ji.ya@gmail.com</a>
<a href=""mailto:j.a.mes.j.iy.a@gmail.com"">j.a.mes.j.iy.a@gmail.com</a>
<a href=""mailto:j.a.m.es.j.iya@gmail.com"">j.a.m.es.j.iya@gmail.com</a>
<a href=""mailto:j.ame.s.jiya@gmail.com"">j.ame.s.jiya@gmail.com</a>
<a href=""mailto:j.am.esji.ya@gmail.com"">j.am.esji.ya@gmail.com</a>
<a href=""mailto:jame.s.j.i.ya@gmail.com"">jame.s.j.i.ya@gmail.com</a>
<a href=""mailto:jam.es.j.i.ya@gmail.com"">jam.es.j.i.ya@gmail.com</a>
<a href=""mailto:ja.m.e.s.ji.y.a@gmail.com"">ja.m.e.s.ji.y.a@gmail.com</a>
<a href=""mailto:ja.m.es.j.i.y.a@gmail.com"">ja.m.es.j.i.y.a@gmail.com</a>
<a href=""mailto:ja.me.s.j.i.y.a@gmail.com"">ja.me.s.j.i.y.a@gmail.com</a>
<a href=""mailto:james.jiy.a@gmail.com"">james.jiy.a@gmail.com</a>
<a href=""mailto:james.jiya@gmail.com"">james.jiya@gmail.com</a>
<a href=""mailto:j.a.me.s.ji.y.a@gmail.com"">j.a.me.s.ji.y.a@gmail.com</a>
<a href=""mailto:j.a.me.sji.ya@gmail.com"">j.a.me.sji.ya@gmail.com</a>
<a href=""mailto:ja.mes.ji.ya@gmail.com"">ja.mes.ji.ya@gmail.com</a>
<a href=""mailto:j.am.e.s.jiya@gmail.com"">j.am.e.s.jiya@gmail.com</a>
<a href=""mailto:j.a.m.e.s.ji.y.a@gmail.com"">j.a.m.e.s.ji.y.a@gmail.com</a>
<a href=""mailto:j.am.e.s.jiy.a@gmail.com"">j.am.e.s.jiy.a@gmail.com</a>
<a href=""mailto:ja.m.e.sjiya@gmail.com"">ja.m.e.sjiya@gmail.com</a>
<a href=""mailto:ja.mesjiya@gmail.com"">ja.mesjiya@gmail.com</a>
<a href=""mailto:j.ames.j.iya@gmail.com"">j.ames.j.iya@gmail.com</a>
<a href=""mailto:j.a.m.e.s.jiya@gmail.com"">j.a.m.e.s.jiya@gmail.com</a>
<a href=""mailto:james.j.i.ya@gmail.com"">james.j.i.ya@gmail.com</a>
<a href=""mailto:j.a.m.e.s.j.i.ya@gmail.com"">j.a.m.e.s.j.i.ya@gmail.com</a>
<a href=""mailto:jam.esj.iya@gmail.com"">jam.esj.iya@gmail.com</a>
<a href=""mailto:jame.s.j.iy.a@gmail.com"">jame.s.j.iy.a@gmail.com</a>
<a href=""mailto:j.am.e.sj.iya@gmail.com"">j.am.e.sj.iya@gmail.com</a>
<a href=""mailto:jamesj.iya@gmail.com"">jamesj.iya@gmail.com</a>
<a href=""mailto:jame.sj.iya@gmail.com"">jame.sj.iya@gmail.com</a>
<a href=""mailto:j.a.me.sjiya@gmail.com"">j.a.me.sjiya@gmail.com</a>
<a href=""mailto:jam.e.s.j.iy.a@gmail.com"">jam.e.s.j.iy.a@gmail.com</a>
<a href=""mailto:j.a.me.s.jiy.a@gmail.com"">j.a.me.s.jiy.a@gmail.com</a>
<a href=""mailto:j.a.mes.ji.ya@gmail.com"">j.a.mes.ji.ya@gmail.com</a>
<a href=""mailto:jam.esji.y.a@gmail.com"">jam.esji.y.a@gmail.com</a>
<a href=""mailto:ja.m.esj.iya@gmail.com"">ja.m.esj.iya@gmail.com</a>
<a href=""mailto:ja.mesj.iya@gmail.com"">ja.mesj.iya@gmail.com</a>
<a href=""mailto:ja.me.sj.i.y.a@gmail.com"">ja.me.sj.i.y.a@gmail.com</a>
<a href=""mailto:jam.e.s.ji.ya@gmail.com"">jam.e.s.ji.ya@gmail.com</a>
<a href=""mailto:jamesj.i.y.a@gmail.com"">jamesj.i.y.a@gmail.com</a>
<a href=""mailto:ja.me.sjiy.a@gmail.com"">ja.me.sjiy.a@gmail.com</a>
<a href=""mailto:jam.esj.iy.a@gmail.com"">jam.esj.iy.a@gmail.com</a>
<a href=""mailto:j.amesj.iya@gmail.com"">j.amesj.iya@gmail.com</a>
<a href=""mailto:j.a.m.e.sjiy.a@gmail.com"">j.a.m.e.sjiy.a@gmail.com</a>
<a href=""mailto:j.a.m.es.jiy.a@gmail.com"">j.a.m.es.jiy.a@gmail.com</a>
<a href=""mailto:j.a.m.es.j.i.ya@gmail.com"">j.a.m.es.j.i.ya@gmail.com</a>
<a href=""mailto:jame.s.ji.y.a@gmail.com"">jame.s.ji.y.a@gmail.com</a>
<a href=""mailto:ja.me.s.j.iy.a@gmail.com"">ja.me.s.j.iy.a@gmail.com</a>
<a href=""mailto:jame.s.j.iya@gmail.com"">jame.s.j.iya@gmail.com</a>
<a href=""mailto:jam.es.jiy.a@gmail.com"">jam.es.jiy.a@gmail.com</a>
<a href=""mailto:j.a.me.s.jiya@gmail.com"">j.a.me.s.jiya@gmail.com</a>
<a href=""mailto:j.a.mesj.iya@gmail.com"">j.a.mesj.iya@gmail.com</a>
<a href=""mailto:j.ame.sji.ya@gmail.com"">j.ame.sji.ya@gmail.com</a>
<a href=""mailto:ja.m.e.sj.i.y.a@gmail.com"">ja.m.e.sj.i.y.a@gmail.com</a>
<a href=""mailto:j.a.mes.jiya@gmail.com"">j.a.mes.jiya@gmail.com</a>
<a href=""mailto:ja.m.e.sj.iy.a@gmail.com"">ja.m.e.sj.iy.a@gmail.com</a>
<a href=""mailto:j.amesjiya@gmail.com"">j.amesjiya@gmail.com</a>
<a href=""mailto:jam.e.s.ji.y.a@gmail.com"">jam.e.s.ji.y.a@gmail.com</a>
<a href=""mailto:jam.es.j.i.y.a@gmail.com"">jam.es.j.i.y.a@gmail.com</a>
<a href=""mailto:jamesji.y.a@gmail.com"">jamesji.y.a@gmail.com</a>
<a href=""mailto:jamesjiy.a@gmail.com"">jamesjiy.a@gmail.com</a>
<a href=""mailto:ja.mesj.i.y.a@gmail.com"">ja.mesj.i.y.a@gmail.com</a>
<a href=""mailto:j.ame.s.j.i.ya@gmail.com"">j.ame.s.j.i.ya@gmail.com</a>
<a href=""mailto:ja.mes.jiy.a@gmail.com"">ja.mes.jiy.a@gmail.com</a>
<a href=""mailto:j.am.es.jiy.a@gmail.com"">j.am.es.jiy.a@gmail.com</a>
<a href=""mailto:ja.me.sji.ya@gmail.com"">ja.me.sji.ya@gmail.com</a>
<a href=""mailto:jame.s.jiy.a@gmail.com"">jame.s.jiy.a@gmail.com</a>
<a href=""mailto:ja.m.esj.i.y.a@gmail.com"">ja.m.esj.i.y.a@gmail.com</a>
<a href=""mailto:j.ame.s.j.iy.a@gmail.com"">j.ame.s.j.iy.a@gmail.com</a>
<a href=""mailto:j.am.es.j.i.y.a@gmail.com"">j.am.es.j.i.y.a@gmail.com</a>
<a href=""mailto:j.a.m.e.sji.ya@gmail.com"">j.a.m.e.sji.ya@gmail.com</a>
<a href=""mailto:ja.m.e.s.j.iy.a@gmail.com"">ja.m.e.s.j.iy.a@gmail.com</a>
<a href=""mailto:jamesj.i.ya@gmail.com"">jamesj.i.ya@gmail.com</a>
<a href=""mailto:ja.mes.jiya@gmail.com"">ja.mes.jiya@gmail.com</a>
<a href=""mailto:j.am.es.jiya@gmail.com"">j.am.es.jiya@gmail.com</a>
<a href=""mailto:j.a.m.es.jiya@gmail.com"">j.a.m.es.jiya@gmail.com</a>
<a href=""mailto:jam.e.s.jiya@gmail.com"">jam.e.s.jiya@gmail.com</a>
<a href=""mailto:j.a.m.e.sj.iy.a@gmail.com"">j.a.m.e.sj.iy.a@gmail.com</a>
<a href=""mailto:j.a.m.es.j.i.y.a@gmail.com"">j.a.m.es.j.i.y.a@gmail.com</a>
<a href=""mailto:jamesji.ya@gmail.com"">jamesji.ya@gmail.com</a>
<a href=""mailto:j.am.e.sji.y.a@gmail.com"">j.am.e.sji.y.a@gmail.com</a>
<a href=""mailto:j.am.esjiy.a@gmail.com"">j.am.esjiy.a@gmail.com</a>
<a href=""mailto:jame.sji.y.a@gmail.com"">jame.sji.y.a@gmail.com</a>
<a href=""mailto:j.am.es.j.i.ya@gmail.com"">j.am.es.j.i.ya@gmail.com</a>
<a href=""mailto:j.a.me.s.j.iya@gmail.com"">j.a.me.s.j.iya@gmail.com</a>
<a href=""mailto:j.a.me.s.ji.ya@gmail.com"">j.a.me.s.ji.ya@gmail.com</a>
<a href=""mailto:ja.m.esjiya@gmail.com"">ja.m.esjiya@gmail.com</a>
<a href=""mailto:james.j.iya@gmail.com"">james.j.iya@gmail.com</a>
<a href=""mailto:j.amesj.i.ya@gmail.com"">j.amesj.i.ya@gmail.com</a>
<a href=""mailto:ja.m.e.s.jiy.a@gmail.com"">ja.m.e.s.jiy.a@gmail.com</a>
<a href=""mailto:j.a.m.esjiya@gmail.com"">j.a.m.esjiya@gmail.com</a>
<a href=""mailto:j.a.me.sj.i.ya@gmail.com"">j.a.me.sj.i.ya@gmail.com</a>
<a href=""mailto:j.amesj.iy.a@gmail.com"">j.amesj.iy.a@gmail.com</a>
<a href=""mailto:j.a.me.s.j.iy.a@gmail.com"">j.a.me.s.j.iy.a@gmail.com</a>
<a href=""mailto:jam.e.s.j.iya@gmail.com"">jam.e.s.j.iya@gmail.com</a>
<a href=""mailto:ja.mes.j.iy.a@gmail.com"">ja.mes.j.iy.a@gmail.com</a>
<a href=""mailto:j.ame.sj.i.y.a@gmail.com"">j.ame.sj.i.y.a@gmail.com</a>
<a href=""mailto:j.a.m.esji.ya@gmail.com"">j.a.m.esji.ya@gmail.com</a>
<a href=""mailto:ja.me.sj.iya@gmail.com"">ja.me.sj.iya@gmail.com</a>
<a href=""mailto:j.a.mesj.i.y.a@gmail.com"">j.a.mesj.i.y.a@gmail.com</a>
<a href=""mailto:ja.mes.j.iya@gmail.com"">ja.mes.j.iya@gmail.com</a>
<a href=""mailto:ja.m.es.jiy.a@gmail.com"">ja.m.es.jiy.a@gmail.com</a>
<a href=""mailto:jam.es.ji.y.a@gmail.com"">jam.es.ji.y.a@gmail.com</a>
<a href=""mailto:ja.me.s.j.i.ya@gmail.com"">ja.me.s.j.i.ya@gmail.com</a>
<a href=""mailto:jam.e.sj.i.ya@gmail.com"">jam.e.sj.i.ya@gmail.com</a>
<a href=""mailto:ja.m.es.ji.y.a@gmail.com"">ja.m.es.ji.y.a@gmail.com</a>
<a href=""mailto:j.a.m.esj.i.y.a@gmail.com"">j.a.m.esj.i.y.a@gmail.com</a>
<a href=""mailto:ja.mesj.iy.a@gmail.com"">ja.mesj.iy.a@gmail.com</a>
<a href=""mailto:j.am.esjiya@gmail.com"">j.am.esjiya@gmail.com</a>
<a href=""mailto:jam.esji.ya@gmail.com"">jam.esji.ya@gmail.com</a>
<a href=""mailto:j.am.es.ji.y.a@gmail.com"">j.am.es.ji.y.a@gmail.com</a>
<a href=""mailto:j.a.me.sj.iya@gmail.com"">j.a.me.sj.iya@gmail.com</a>
<a href=""mailto:j.ames.j.iy.a@gmail.com"">j.ames.j.iy.a@gmail.com</a>
<a href=""mailto:ja.m.es.j.iya@gmail.com"">ja.m.es.j.iya@gmail.com</a>
<a href=""mailto:j.am.es.ji.ya@gmail.com"">j.am.es.ji.ya@gmail.com</a>
<a href=""mailto:j.a.mes.ji.y.a@gmail.com"">j.a.mes.ji.y.a@gmail.com</a>
<a href=""mailto:j.am.e.s.j.i.y.a@gmail.com"">j.am.e.s.j.i.y.a@gmail.com</a>
<a href=""mailto:ja.m.esj.i.ya@gmail.com"">ja.m.esj.i.ya@gmail.com</a>
<a href=""mailto:j.a.mes.j.i.y.a@gmail.com"">j.a.mes.j.i.y.a@gmail.com</a>
<a href=""mailto:jam.es.j.iy.a@gmail.com"">jam.es.j.iy.a@gmail.com</a>
<a href=""mailto:j.a.m.esjiy.a@gmail.com"">j.a.m.esjiy.a@gmail.com</a>
<a href=""mailto:ja.mes.ji.y.a@gmail.com"">ja.mes.ji.y.a@gmail.com</a>
<a href=""mailto:jam.e.sj.iya@gmail.com"">jam.e.sj.iya@gmail.com</a>
<a href=""mailto:j.ame.sj.iy.a@gmail.com"">j.ame.sj.iy.a@gmail.com</a>
<a href=""mailto:jamesj.iy.a@gmail.com"">jamesj.iy.a@gmail.com</a>
<a href=""mailto:j.a.mes.j.i.ya@gmail.com"">j.a.mes.j.i.ya@gmail.com</a>
<a href=""mailto:jame.sj.i.ya@gmail.com"">jame.sj.i.ya@gmail.com</a>
<a href=""mailto:jam.e.s.jiy.a@gmail.com"">jam.e.s.jiy.a@gmail.com</a>
<a href=""mailto:j.am.e.sj.iy.a@gmail.com"">j.am.e.sj.iy.a@gmail.com</a>
<a href=""mailto:ja.m.e.sjiy.a@gmail.com"">ja.m.e.sjiy.a@gmail.com</a>
<a href=""mailto:ja.mesjiy.a@gmail.com"">ja.mesjiy.a@gmail.com</a>
<a href=""mailto:j.a.mes.j.iya@gmail.com"">j.a.mes.j.iya@gmail.com</a>
<a href=""mailto:jame.s.jiya@gmail.com"">jame.s.jiya@gmail.com</a>
<a href=""mailto:jam.esjiya@gmail.com"">jam.esjiya@gmail.com</a>
<a href=""mailto:james.ji.ya@gmail.com"">james.ji.ya@gmail.com</a>
<a href=""mailto:j.a.me.s.j.i.y.a@gmail.com"">j.a.me.s.j.i.y.a@gmail.com</a>
<a href=""mailto:j.am.e.sjiya@gmail.com"">j.am.e.sjiya@gmail.com</a>
<a href=""mailto:j.ame.sjiy.a@gmail.com"">j.ame.sjiy.a@gmail.com</a>
<a href=""mailto:j.am.e.sji.ya@gmail.com"">j.am.e.sji.ya@gmail.com</a>
<a href=""mailto:ja.me.sji.y.a@gmail.com"">ja.me.sji.y.a@gmail.com</a>
<a href=""mailto:j.ame.s.j.i.y.a@gmail.com"">j.ame.s.j.i.y.a@gmail.com</a>
<a href=""mailto:j.a.m.e.sj.i.y.a@gmail.com"">j.a.m.e.sj.i.y.a@gmail.com</a>
<a href=""mailto:j.a.me.sjiy.a@gmail.com"">j.a.me.sjiy.a@gmail.com</a>
<a href=""mailto:j.am.esj.i.y.a@gmail.com"">j.am.esj.i.y.a@gmail.com</a>
<a href=""mailto:j.am.es.j.iy.a@gmail.com"">j.am.es.j.iy.a@gmail.com</a>
<a href=""mailto:ja.m.e.sji.y.a@gmail.com"">ja.m.e.sji.y.a@gmail.com</a>
<a href=""mailto:j.ame.s.ji.y.a@gmail.com"">j.ame.s.ji.y.a@gmail.com</a>
<a href=""mailto:j.amesji.y.a@gmail.com"">j.amesji.y.a@gmail.com</a>
<a href=""mailto:ja.m.e.sj.iya@gmail.com"">ja.m.e.sj.iya@gmail.com</a>
<a href=""mailto:kurzeglattlederhose@gmail.com"">kurzeglattlederhose@gmail.com</a>
<a href=""mailto:ku.rz.e.gla.t.t.l.ed.er.h.os.e@gmail.com"">ku.rz.e.gla.t.t.l.ed.er.h.os.e@gmail.com</a>
<a href=""mailto:kurz.eglat.t.l.ederh.o.se@gmail.com"">kurz.eglat.t.l.ederh.o.se@gmail.com</a>
<a href=""mailto:k.urzeg.lattl.ed.e.r.hos.e@gmail.com"">k.urzeg.lattl.ed.e.r.hos.e@gmail.com</a>
<a href=""mailto:k.u.r.zeg.la.tt.l.e.d.e.rh.o.s.e@gmail.com"">k.u.r.zeg.la.tt.l.e.d.e.rh.o.s.e@gmail.com</a>
<a href=""mailto:k.ur.ze.gl.a.tt.leder.hose@gmail.com"">k.ur.ze.gl.a.tt.leder.hose@gmail.com</a>
<a href=""mailto:k.ur.zegl.a.t.tle.de.r.h.o.s.e@gmail.com"">k.ur.zegl.a.t.tle.de.r.h.o.s.e@gmail.com</a>
<a href=""mailto:k.urz.egl.at.t.le.derh.o.se@gmail.com"">k.urz.egl.at.t.le.derh.o.se@gmail.com</a>
<a href=""mailto:kurzegl.at.t.led.erho.se@gmail.com"">kurzegl.at.t.led.erho.se@gmail.com</a>
<a href=""mailto:kurzegla.t.tled.erho.s.e@gmail.com"">kurzegla.t.tled.erho.s.e@gmail.com</a>
<a href=""mailto:k.ur.z.eg.latt.lede.rh.ose@gmail.com"">k.ur.z.eg.latt.lede.rh.ose@gmail.com</a>
<a href=""mailto:k.u.rz.e.glattled.e.r.hose@gmail.com"">k.u.rz.e.glattled.e.r.hose@gmail.com</a>
<a href=""mailto:kurzeg.l.att.le.derho.s.e@gmail.com"">kurzeg.l.att.le.derho.s.e@gmail.com</a>
<a href=""mailto:k.u.rz.e.gl.a.t.tleder.ho.s.e@gmail.com"">k.u.rz.e.gl.a.t.tleder.ho.s.e@gmail.com</a>
<a href=""mailto:k.u.r.ze.glat.tl.e.d.erh.ose@gmail.com"">k.u.r.ze.glat.tl.e.d.erh.ose@gmail.com</a>
<a href=""mailto:ku.r.zegl.at.tl.e.de.rhos.e@gmail.com"">ku.r.zegl.at.tl.e.de.rhos.e@gmail.com</a>
<a href=""mailto:k.ur.z.egl.attlederhose@gmail.com"">k.ur.z.egl.attlederhose@gmail.com</a>
<a href=""mailto:kur.zegl.attleder.h.o.s.e@gmail.com"">kur.zegl.attleder.h.o.s.e@gmail.com</a>
<a href=""mailto:k.urz.eglat.t.l.eder.ho.s.e@gmail.com"">k.urz.eglat.t.l.eder.ho.s.e@gmail.com</a>
<a href=""mailto:kur.ze.gla.tt.l.ederh.o.s.e@gmail.com"">kur.ze.gla.tt.l.ederh.o.s.e@gmail.com</a>
<a href=""mailto:k.urz.eg.l.a.t.tl.e.de.rho.s.e@gmail.com"">k.urz.eg.l.a.t.tl.e.de.rho.s.e@gmail.com</a>
<a href=""mailto:kur.ze.gla.tt.le.d.erho.se@gmail.com"">kur.ze.gla.tt.le.d.erho.se@gmail.com</a>
<a href=""mailto:ku.r.z.e.glattl.e.de.r.hos.e@gmail.com"">ku.r.z.e.glattl.e.de.r.hos.e@gmail.com</a>
<a href=""mailto:k.u.rz.e.gla.t.t.l.ed.e.rh.ose@gmail.com"">k.u.rz.e.gla.t.t.l.ed.e.rh.ose@gmail.com</a>
<a href=""mailto:kurz.e.g.l.a.t.tle.derh.o.s.e@gmail.com"">kurz.e.g.l.a.t.tle.derh.o.s.e@gmail.com</a>
<a href=""mailto:k.u.r.zeg.latt.le.d.erho.s.e@gmail.com"">k.u.r.zeg.latt.le.d.erho.s.e@gmail.com</a>
<a href=""mailto:k.urz.e.g.lattl.ed.e.r.ho.se@gmail.com"">k.urz.e.g.lattl.ed.e.r.ho.se@gmail.com</a>
<a href=""mailto:k.u.rz.eg.l.att.l.e.d.e.r.ho.se@gmail.com"">k.u.rz.eg.l.att.l.e.d.e.r.ho.se@gmail.com</a>
<a href=""mailto:k.u.rze.g.la.ttled.er.h.ose@gmail.com"">k.u.rze.g.la.ttled.er.h.ose@gmail.com</a>
<a href=""mailto:k.urz.eglatt.le.d.erh.os.e@gmail.com"">k.urz.eglatt.le.d.erh.os.e@gmail.com</a>
<a href=""mailto:k.ur.zegl.a.tt.led.e.rho.s.e@gmail.com"">k.ur.zegl.a.tt.led.e.rho.s.e@gmail.com</a>
<a href=""mailto:k.ur.ze.glattl.ede.r.h.o.se@gmail.com"">k.ur.ze.glattl.ede.r.h.o.se@gmail.com</a>
<a href=""mailto:ku.r.ze.gl.a.t.t.led.e.rho.se@gmail.com"">ku.r.ze.gl.a.t.t.led.e.rho.se@gmail.com</a>
<a href=""mailto:kurzegl.attlede.rho.s.e@gmail.com"">kurzegl.attlede.rho.s.e@gmail.com</a>
<a href=""mailto:k.urz.egl.a.tt.le.d.erhose@gmail.com"">k.urz.egl.a.tt.le.d.erhose@gmail.com</a>
<a href=""mailto:ku.r.z.eg.l.att.l.e.d.e.r.h.os.e@gmail.com"">ku.r.z.eg.l.att.l.e.d.e.r.h.os.e@gmail.com</a>
<a href=""mailto:k.urz.e.g.l.a.t.tlede.r.h.o.se@gmail.com"">k.urz.e.g.l.a.t.tlede.r.h.o.se@gmail.com</a>
<a href=""mailto:k.u.rze.gla.t.t.lederho.s.e@gmail.com"">k.u.rze.gla.t.t.lederho.s.e@gmail.com</a>
<a href=""mailto:k.u.rz.e.g.lat.tl.ede.rhos.e@gmail.com"">k.u.rz.e.g.lat.tl.ede.rhos.e@gmail.com</a>
<a href=""mailto:ku.r.zeg.l.attl.e.d.e.rh.o.s.e@gmail.com"">ku.r.zeg.l.attl.e.d.e.rh.o.s.e@gmail.com</a>
<a href=""mailto:kur.ze.gl.at.tl.e.d.erho.se@gmail.com"">kur.ze.gl.at.tl.e.d.erho.se@gmail.com</a>
<a href=""mailto:k.ur.zegl.a.t.tl.eder.ho.s.e@gmail.com"">k.ur.zegl.a.t.tl.eder.ho.s.e@gmail.com</a>
<a href=""mailto:ku.rz.egl.att.l.ede.rh.o.s.e@gmail.com"">ku.rz.egl.att.l.ede.rh.o.s.e@gmail.com</a>
<a href=""mailto:k.u.r.ze.gla.ttl.ede.rh.o.se@gmail.com"">k.u.r.ze.gla.ttl.ede.rh.o.se@gmail.com</a>
<a href=""mailto:k.urze.gl.att.le.d.e.r.h.os.e@gmail.com"">k.urze.gl.att.le.d.e.r.h.os.e@gmail.com</a>
<a href=""mailto:ku.r.z.eg.l.at.tled.e.rhose@gmail.com"">ku.r.z.eg.l.at.tled.e.rhose@gmail.com</a>
<a href=""mailto:kur.z.e.gl.at.tle.der.h.os.e@gmail.com"">kur.z.e.gl.at.tle.der.h.os.e@gmail.com</a>
<a href=""mailto:k.ur.z.e.gla.t.t.le.d.erh.ose@gmail.com"">k.ur.z.e.gla.t.t.le.d.erh.ose@gmail.com</a>
<a href=""mailto:k.u.r.z.e.gl.attl.e.de.rho.s.e@gmail.com"">k.u.r.z.e.gl.attl.e.de.rho.s.e@gmail.com</a>
<a href=""mailto:ku.r.ze.glatt.lede.r.ho.se@gmail.com"">ku.r.ze.glatt.lede.r.ho.se@gmail.com</a>
<a href=""mailto:k.urz.e.g.l.at.tle.der.hos.e@gmail.com"">k.urz.e.g.l.at.tle.der.hos.e@gmail.com</a>
<a href=""mailto:ku.rze.g.lat.tl.ede.rh.ose@gmail.com"">ku.rze.g.lat.tl.ede.rh.ose@gmail.com</a>
<a href=""mailto:ku.r.z.eg.l.attl.e.derh.os.e@gmail.com"">ku.r.z.eg.l.attl.e.derh.os.e@gmail.com</a>
<a href=""mailto:k.u.rz.e.gla.t.tl.e.d.er.h.ose@gmail.com"">k.u.rz.e.gla.t.tl.e.d.er.h.ose@gmail.com</a>
<a href=""mailto:k.urz.eg.l.attle.d.e.rh.o.s.e@gmail.com"">k.urz.eg.l.attle.d.e.rh.o.s.e@gmail.com</a>
<a href=""mailto:kurz.egla.tt.l.e.derho.se@gmail.com"">kurz.egla.tt.l.e.derho.se@gmail.com</a>
<a href=""mailto:kur.zeg.l.at.tl.e.de.r.hos.e@gmail.com"">kur.zeg.l.at.tl.e.de.r.hos.e@gmail.com</a>
<a href=""mailto:kur.zeg.l.a.t.tl.ed.er.h.os.e@gmail.com"">kur.zeg.l.a.t.tl.ed.er.h.os.e@gmail.com</a>
<a href=""mailto:kur.zeg.la.t.t.l.ederho.s.e@gmail.com"">kur.zeg.la.t.t.l.ederho.s.e@gmail.com</a>
<a href=""mailto:k.urz.egla.t.t.l.e.de.rho.se@gmail.com"">k.urz.egla.t.t.l.e.de.rho.se@gmail.com</a>
<a href=""mailto:k.u.rz.e.g.latt.le.de.rho.se@gmail.com"">k.u.rz.e.g.latt.le.de.rho.se@gmail.com</a>
<a href=""mailto:k.urz.egla.t.t.l.e.der.ho.se@gmail.com"">k.urz.egla.t.t.l.e.der.ho.se@gmail.com</a>
<a href=""mailto:kurze.g.la.ttl.e.d.erho.se@gmail.com"">kurze.g.la.ttl.e.d.erho.se@gmail.com</a>
<a href=""mailto:k.u.rz.e.g.l.attl.e.d.e.rh.os.e@gmail.com"">k.u.rz.e.g.l.attl.e.d.e.rh.os.e@gmail.com</a>
<a href=""mailto:kur.z.e.gl.a.t.tle.de.r.ho.se@gmail.com"">kur.z.e.gl.a.t.tle.de.r.ho.se@gmail.com</a>
<a href=""mailto:k.u.r.z.egl.a.tt.le.d.erh.o.se@gmail.com"">k.u.r.z.egl.a.tt.le.d.erh.o.se@gmail.com</a>
<a href=""mailto:kur.z.eg.latt.led.e.rho.s.e@gmail.com"">kur.z.eg.latt.led.e.rho.s.e@gmail.com</a>
<a href=""mailto:k.u.rz.e.g.lat.tled.er.hose@gmail.com"">k.u.rz.e.g.lat.tled.er.hose@gmail.com</a>
<a href=""mailto:kurze.glat.t.led.e.r.ho.se@gmail.com"">kurze.glat.t.led.e.r.ho.se@gmail.com</a>
<a href=""mailto:k.urze.gl.att.l.e.de.rhose@gmail.com"">k.urze.gl.att.l.e.de.rhose@gmail.com</a>
<a href=""mailto:k.urz.egl.a.t.t.l.ederh.o.s.e@gmail.com"">k.urz.egl.a.t.t.l.ederh.o.s.e@gmail.com</a>
<a href=""mailto:k.ur.z.e.g.l.attle.der.ho.se@gmail.com"">k.ur.z.e.g.l.attle.der.ho.se@gmail.com</a>
<a href=""mailto:k.u.r.z.eg.l.a.t.t.l.ed.e.r.hos.e@gmail.com"">k.u.r.z.eg.l.a.t.t.l.ed.e.r.hos.e@gmail.com</a>
<a href=""mailto:ku.r.z.eg.l.a.t.t.le.der.ho.se@gmail.com"">ku.r.z.eg.l.a.t.t.le.der.ho.se@gmail.com</a>
<a href=""mailto:kurz.e.g.la.t.t.l.e.d.er.h.ose@gmail.com"">kurz.e.g.la.t.t.l.e.d.er.h.ose@gmail.com</a>
<a href=""mailto:kur.z.e.g.l.a.tt.leder.hos.e@gmail.com"">kur.z.e.g.l.a.tt.leder.hos.e@gmail.com</a>
<a href=""mailto:ku.r.zeg.la.ttle.derhos.e@gmail.com"">ku.r.zeg.la.ttle.derhos.e@gmail.com</a>
<a href=""mailto:k.ur.zeg.l.a.t.tled.e.r.hose@gmail.com"">k.ur.zeg.l.a.t.tled.e.r.hose@gmail.com</a>
<a href=""mailto:ku.r.ze.g.latt.lede.rh.o.s.e@gmail.com"">ku.r.ze.g.latt.lede.rh.o.s.e@gmail.com</a>
<a href=""mailto:kurze.gla.t.tl.ed.er.hos.e@gmail.com"">kurze.gla.t.tl.ed.er.hos.e@gmail.com</a>
<a href=""mailto:ku.rz.eg.l.at.t.le.derh.ose@gmail.com"">ku.rz.eg.l.at.t.le.derh.ose@gmail.com</a>
<a href=""mailto:kurzeg.l.a.t.t.l.e.d.e.rh.o.s.e@gmail.com"">kurzeg.l.a.t.t.l.e.d.e.rh.o.s.e@gmail.com</a>
<a href=""mailto:k.u.r.ze.gla.ttleder.hos.e@gmail.com"">k.u.r.ze.gla.ttleder.hos.e@gmail.com</a>
<a href=""mailto:k.urze.gl.at.t.l.ed.erhos.e@gmail.com"">k.urze.gl.at.t.l.ed.erhos.e@gmail.com</a>
<a href=""mailto:k.u.r.ze.gl.a.ttled.e.rho.s.e@gmail.com"">k.u.r.ze.gl.a.ttled.e.rho.s.e@gmail.com</a>
<a href=""mailto:ku.r.z.eg.la.t.t.led.e.r.hos.e@gmail.com"">ku.r.z.eg.la.t.t.led.e.r.hos.e@gmail.com</a>
<a href=""mailto:k.urz.e.glat.t.lede.rh.o.se@gmail.com"">k.urz.e.glat.t.lede.rh.o.se@gmail.com</a>
<a href=""mailto:kurze.g.latt.le.de.r.ho.s.e@gmail.com"">kurze.g.latt.le.de.r.ho.s.e@gmail.com</a>
<a href=""mailto:ku.r.zeglat.t.l.ede.rh.ose@gmail.com"">ku.r.zeglat.t.l.ede.rh.ose@gmail.com</a>
<a href=""mailto:k.u.r.ze.g.l.attle.d.erhos.e@gmail.com"">k.u.r.ze.g.l.attle.d.erhos.e@gmail.com</a>
<a href=""mailto:kur.zeg.la.tt.l.ederhos.e@gmail.com"">kur.zeg.la.tt.l.ederhos.e@gmail.com</a>
<a href=""mailto:k.urz.eg.lattle.de.rh.o.se@gmail.com"">k.urz.eg.lattle.de.rh.o.se@gmail.com</a>
<a href=""mailto:ku.r.z.e.gl.a.t.t.le.d.erho.s.e@gmail.com"">ku.r.z.e.gl.a.t.t.le.d.erho.s.e@gmail.com</a>
<a href=""mailto:k.ur.z.e.glattl.eder.h.o.s.e@gmail.com"">k.ur.z.e.glattl.eder.h.o.s.e@gmail.com</a>
<a href=""mailto:k.urzegla.ttl.ed.e.rhos.e@gmail.com"">k.urzegla.ttl.ed.e.rhos.e@gmail.com</a>
<a href=""mailto:k.ur.zegl.a.ttle.d.er.h.os.e@gmail.com"">k.ur.zegl.a.ttle.d.er.h.os.e@gmail.com</a>
<a href=""mailto:kur.z.egl.a.t.tlederh.ose@gmail.com"">kur.z.egl.a.t.tlederh.ose@gmail.com</a>
<a href=""mailto:ku.r.ze.gl.at.tl.e.d.erh.ose@gmail.com"">ku.r.ze.gl.at.tl.e.d.erh.ose@gmail.com</a>
<a href=""mailto:k.ur.zeg.lat.tl.ede.r.hose@gmail.com"">k.ur.zeg.lat.tl.ede.r.hose@gmail.com</a>
<a href=""mailto:kurz.e.glatt.led.e.rh.ose@gmail.com"">kurz.e.glatt.led.e.rh.ose@gmail.com</a>
<a href=""mailto:ku.rz.e.gla.tt.l.e.d.e.rh.os.e@gmail.com"">ku.rz.e.gla.tt.l.e.d.e.rh.os.e@gmail.com</a>
<a href=""mailto:kurz.eg.l.a.ttl.ed.e.rh.o.se@gmail.com"">kurz.eg.l.a.ttl.ed.e.rh.o.se@gmail.com</a>
<a href=""mailto:kur.zegla.t.tl.e.d.erh.os.e@gmail.com"">kur.zegla.t.tl.e.d.erh.os.e@gmail.com</a>
<a href=""mailto:k.u.r.zegla.ttle.derh.ose@gmail.com"">k.u.r.zegla.ttle.derh.ose@gmail.com</a>
<a href=""mailto:k.u.r.zegla.t.tled.e.rho.se@gmail.com"">k.u.r.zegla.t.tled.e.rho.se@gmail.com</a>
<a href=""mailto:kurze.gl.att.l.ed.erho.s.e@gmail.com"">kurze.gl.att.l.ed.erho.s.e@gmail.com</a>
<a href=""mailto:kurze.gl.at.t.l.ed.e.rh.ose@gmail.com"">kurze.gl.at.t.l.ed.e.rh.ose@gmail.com</a>
<a href=""mailto:kur.z.e.g.la.t.t.le.de.rh.os.e@gmail.com"">kur.z.e.g.la.t.t.le.de.rh.os.e@gmail.com</a>
<a href=""mailto:k.ur.zegl.a.ttlede.rhos.e@gmail.com"">k.ur.zegl.a.ttlede.rhos.e@gmail.com</a>
<a href=""mailto:ku.r.ze.gl.a.ttle.d.er.ho.se@gmail.com"">ku.r.ze.gl.a.ttle.d.er.ho.se@gmail.com</a>
<a href=""mailto:ku.r.z.e.g.la.tt.leder.h.os.e@gmail.com"">ku.r.z.e.g.la.tt.leder.h.os.e@gmail.com</a>
<a href=""mailto:kurz.eg.l.a.t.t.le.derhose@gmail.com"">kurz.eg.l.a.t.t.le.derhose@gmail.com</a>
<a href=""mailto:ku.rzeg.l.at.tled.erho.se@gmail.com"">ku.rzeg.l.at.tled.erho.se@gmail.com</a>
<a href=""mailto:k.urze.g.la.t.t.l.ederh.o.s.e@gmail.com"">k.urze.g.la.t.t.l.ederh.o.s.e@gmail.com</a>
<a href=""mailto:ku.r.z.eg.la.t.t.le.d.e.r.h.o.se@gmail.com"">ku.r.z.eg.la.t.t.le.d.e.r.h.o.se@gmail.com</a>
<a href=""mailto:ku.rzeg.la.ttl.ede.rho.s.e@gmail.com"">ku.rzeg.la.ttl.ede.rho.s.e@gmail.com</a>
<a href=""mailto:k.urz.e.g.la.t.t.led.er.ho.s.e@gmail.com"">k.urz.e.g.la.t.t.led.er.ho.s.e@gmail.com</a>
<a href=""mailto:k.ur.z.e.g.la.t.tl.ed.e.r.hos.e@gmail.com"">k.ur.z.e.g.la.t.tl.ed.e.r.hos.e@gmail.com</a>
<a href=""mailto:k.ur.z.egla.t.t.le.d.er.h.o.s.e@gmail.com"">k.ur.z.egla.t.t.le.d.er.h.o.s.e@gmail.com</a>
<a href=""mailto:k.urzegl.a.tt.l.ede.r.ho.se@gmail.com"">k.urzegl.a.tt.l.ede.r.ho.se@gmail.com</a>
<a href=""mailto:ku.r.zeg.lat.t.l.e.d.erho.se@gmail.com"">ku.r.zeg.lat.t.l.e.d.erho.se@gmail.com</a>
<a href=""mailto:ku.rzeg.lat.tleder.h.os.e@gmail.com"">ku.rzeg.lat.tleder.h.os.e@gmail.com</a>
<a href=""mailto:kurz.e.gla.tt.l.e.der.ho.se@gmail.com"">kurz.e.gla.tt.l.e.der.ho.se@gmail.com</a>
<a href=""mailto:k.urz.eg.l.at.t.le.d.er.ho.se@gmail.com"">k.urz.eg.l.at.t.le.d.er.ho.se@gmail.com</a>
<a href=""mailto:ku.rzeg.l.att.l.e.der.ho.se@gmail.com"">ku.rzeg.l.att.l.e.der.ho.se@gmail.com</a>
<a href=""mailto:ku.r.z.egla.tt.l.ed.er.hos.e@gmail.com"">ku.r.z.egla.tt.l.ed.er.hos.e@gmail.com</a>
<a href=""mailto:kur.zegla.t.tleder.ho.se@gmail.com"">kur.zegla.t.tleder.ho.se@gmail.com</a>
<a href=""mailto:ku.r.ze.gla.ttle.d.er.ho.s.e@gmail.com"">ku.r.ze.gla.ttle.d.er.ho.s.e@gmail.com</a>
<a href=""mailto:kurzegla.tt.l.e.d.er.hos.e@gmail.com"">kurzegla.tt.l.e.d.er.hos.e@gmail.com</a>
<a href=""mailto:kurz.e.g.la.ttled.e.rh.o.s.e@gmail.com"">kurz.e.g.la.ttled.e.rh.o.s.e@gmail.com</a>
<a href=""mailto:k.ur.z.eg.l.a.ttle.d.erho.se@gmail.com"">k.ur.z.eg.l.a.ttle.d.erho.se@gmail.com</a>
<a href=""mailto:ku.r.zeg.la.ttl.ed.er.ho.s.e@gmail.com"">ku.r.zeg.la.ttl.ed.er.ho.s.e@gmail.com</a>
<a href=""mailto:k.u.rze.gl.a.tt.l.eder.h.o.s.e@gmail.com"">k.u.rze.gl.a.tt.l.eder.h.o.s.e@gmail.com</a>
<a href=""mailto:ku.r.z.e.g.l.attl.e.derhose@gmail.com"">ku.r.z.e.g.l.attl.e.derhose@gmail.com</a>
<a href=""mailto:k.ur.z.eg.la.t.tle.d.erh.os.e@gmail.com"">k.ur.z.eg.la.t.tle.d.erh.os.e@gmail.com</a>
<a href=""mailto:k.ur.ze.gl.at.tlede.rhose@gmail.com"">k.ur.ze.gl.at.tlede.rhose@gmail.com</a>
<a href=""mailto:ku.rzeg.lat.tl.eder.hos.e@gmail.com"">ku.rzeg.lat.tl.eder.hos.e@gmail.com</a>
<a href=""mailto:kurzeg.la.tt.l.ed.e.r.h.ose@gmail.com"">kurzeg.la.tt.l.ed.e.r.h.ose@gmail.com</a>
<a href=""mailto:kurzeg.l.a.tt.le.d.e.rh.o.se@gmail.com"">kurzeg.l.a.tt.le.d.e.rh.o.se@gmail.com</a>
<a href=""mailto:k.u.r.z.eg.lat.tl.ederh.os.e@gmail.com"">k.u.r.z.eg.lat.tl.ederh.os.e@gmail.com</a>
<a href=""mailto:k.u.rzegl.a.t.tl.ed.erh.ose@gmail.com"">k.u.rzegl.a.t.tl.ed.erh.ose@gmail.com</a>
<a href=""mailto:k.ur.ze.g.la.ttl.e.d.e.r.h.o.se@gmail.com"">k.ur.ze.g.la.ttl.e.d.e.r.h.o.se@gmail.com</a>
<a href=""mailto:ku.rzeglatt.lederh.os.e@gmail.com"">ku.rzeglatt.lederh.os.e@gmail.com</a>
<a href=""mailto:kurze.g.l.att.l.ede.r.hose@gmail.com"">kurze.g.l.att.l.ede.r.hose@gmail.com</a>
<a href=""mailto:k.ur.z.eglat.t.l.e.d.erh.o.se@gmail.com"">k.ur.z.eglat.t.l.e.d.erh.o.se@gmail.com</a>
<a href=""mailto:kur.zeg.latt.lede.r.h.ose@gmail.com"">kur.zeg.latt.lede.r.h.ose@gmail.com</a>
<a href=""mailto:k.ur.z.eg.latt.l.ed.e.r.h.o.se@gmail.com"">k.ur.z.eg.latt.l.ed.e.r.h.o.se@gmail.com</a>
<a href=""mailto:ku.rze.g.lat.tl.ederh.o.s.e@gmail.com"">ku.rze.g.lat.tl.ederh.o.s.e@gmail.com</a>
<a href=""mailto:ku.r.z.e.gl.a.ttl.e.d.e.rho.s.e@gmail.com"">ku.r.z.e.gl.a.ttl.e.d.e.rho.s.e@gmail.com</a>
<a href=""mailto:ku.r.ze.g.l.a.t.tle.der.ho.s.e@gmail.com"">ku.r.ze.g.l.a.t.tle.der.ho.s.e@gmail.com</a>
<a href=""mailto:k.u.rze.glat.tled.erh.os.e@gmail.com"">k.u.rze.glat.tled.erh.os.e@gmail.com</a>
<a href=""mailto:k.u.r.ze.gla.tt.l.e.d.erh.o.s.e@gmail.com"">k.u.r.ze.gla.tt.l.e.d.erh.o.s.e@gmail.com</a>
<a href=""mailto:ku.rz.e.g.la.t.tle.de.rh.o.s.e@gmail.com"">ku.rz.e.g.la.t.tle.de.rh.o.s.e@gmail.com</a>
<a href=""mailto:ku.r.zegla.t.tled.erho.se@gmail.com"">ku.r.zegla.t.tled.erho.se@gmail.com</a>
<a href=""mailto:k.u.r.z.e.glattle.derho.se@gmail.com"">k.u.r.z.e.glattle.derho.se@gmail.com</a>
<a href=""mailto:k.u.r.z.e.glat.t.l.ed.erh.o.s.e@gmail.com"">k.u.r.z.e.glat.t.l.ed.erh.o.s.e@gmail.com</a>
<a href=""mailto:kur.z.egla.tt.le.de.r.h.ose@gmail.com"">kur.z.egla.tt.le.de.r.h.ose@gmail.com</a>
<a href=""mailto:ku.r.ze.glat.tle.d.e.r.h.ose@gmail.com"">ku.r.ze.glat.tle.d.e.r.h.ose@gmail.com</a>
<a href=""mailto:ku.r.ze.gla.tt.l.ede.rh.o.se@gmail.com"">ku.r.ze.gla.tt.l.ede.rh.o.se@gmail.com</a>
<a href=""mailto:k.urze.g.l.attled.e.r.h.o.se@gmail.com"">k.urze.g.l.attled.e.r.h.o.se@gmail.com</a>
<a href=""mailto:k.urz.e.gl.a.t.t.l.e.d.e.r.ho.s.e@gmail.com"">k.urz.e.gl.a.t.t.l.e.d.e.r.ho.s.e@gmail.com</a>
<a href=""mailto:k.ur.ze.g.lat.tlede.rh.o.se@gmail.com"">k.ur.ze.g.lat.tlede.rh.o.se@gmail.com</a>
<a href=""mailto:kur.z.e.g.l.a.ttl.e.der.hose@gmail.com"">kur.z.e.g.l.a.ttl.e.der.hose@gmail.com</a>
<a href=""mailto:kur.z.e.g.l.a.tt.led.er.h.o.s.e@gmail.com"">kur.z.e.g.l.a.tt.led.er.h.o.s.e@gmail.com</a>
<a href=""mailto:ku.r.z.e.gl.at.t.l.e.d.er.hos.e@gmail.com"">ku.r.z.e.gl.at.t.l.e.d.er.hos.e@gmail.com</a>
<a href=""mailto:k.urzeg.l.a.ttle.d.erh.ose@gmail.com"">k.urzeg.l.a.ttle.d.erh.ose@gmail.com</a>
<a href=""mailto:k.urzegla.ttl.e.derh.ose@gmail.com"">k.urzegla.ttl.e.derh.ose@gmail.com</a>
<a href=""mailto:kurzeg.la.t.t.lede.rh.ose@gmail.com"">kurzeg.la.t.t.lede.rh.ose@gmail.com</a>
<a href=""mailto:k.urzeg.l.a.t.tle.d.erh.ose@gmail.com"">k.urzeg.l.a.t.tle.d.erh.ose@gmail.com</a>
<a href=""mailto:k.ur.zegl.att.l.ed.e.rho.s.e@gmail.com"">k.ur.zegl.att.l.ed.e.rho.s.e@gmail.com</a>
<a href=""mailto:kur.ze.gla.t.t.le.derh.o.se@gmail.com"">kur.ze.gla.t.t.le.derh.o.se@gmail.com</a>
<a href=""mailto:ku.r.zegla.ttle.d.erh.os.e@gmail.com"">ku.r.zegla.ttle.d.erh.os.e@gmail.com</a>
<a href=""mailto:k.urze.gl.at.tl.e.de.rho.s.e@gmail.com"">k.urze.gl.at.tl.e.de.rho.s.e@gmail.com</a>
<a href=""mailto:k.urze.g.lat.t.le.d.e.rh.o.se@gmail.com"">k.urze.g.lat.t.le.d.e.rh.o.se@gmail.com</a>
<a href=""mailto:k.u.r.z.e.gl.a.ttle.derh.o.se@gmail.com"">k.u.r.z.e.gl.a.ttle.derh.o.se@gmail.com</a>
<a href=""mailto:k.ur.ze.gl.a.t.tled.er.hose@gmail.com"">k.ur.ze.gl.a.t.tled.er.hose@gmail.com</a>
<a href=""mailto:k.u.rze.g.la.tt.l.ede.rh.os.e@gmail.com"">k.u.rze.g.la.tt.l.ede.rh.os.e@gmail.com</a>
<a href=""mailto:k.u.rze.gla.t.tl.ede.r.h.o.se@gmail.com"">k.u.rze.gla.t.tl.ede.r.h.o.se@gmail.com</a>
<a href=""mailto:k.urze.g.lat.tl.e.d.erh.ose@gmail.com"">k.urze.g.lat.tl.e.d.erh.ose@gmail.com</a>
<a href=""mailto:ku.r.zeglatt.le.d.erhose@gmail.com"">ku.r.zeglatt.le.d.erhose@gmail.com</a>
<a href=""mailto:ku.r.zeg.l.att.l.e.der.ho.s.e@gmail.com"">ku.r.zeg.l.att.l.e.der.ho.s.e@gmail.com</a>
<a href=""mailto:kurz.eglatt.led.e.rho.se@gmail.com"">kurz.eglatt.led.e.rho.se@gmail.com</a>
<a href=""mailto:ku.r.ze.gl.a.tt.l.ederh.ose@gmail.com"">ku.r.ze.gl.a.tt.l.ederh.ose@gmail.com</a>
<a href=""mailto:kur.ze.g.l.a.ttled.e.r.hose@gmail.com"">kur.ze.g.l.a.ttled.e.r.hose@gmail.com</a>
<a href=""mailto:ku.rz.e.gl.a.ttl.e.d.er.h.ose@gmail.com"">ku.rz.e.gl.a.ttl.e.d.er.h.ose@gmail.com</a>
<a href=""mailto:ku.r.zeg.lattl.ede.rho.se@gmail.com"">ku.r.zeg.lattl.ede.rho.se@gmail.com</a>
<a href=""mailto:kur.z.eg.lat.t.l.ed.erh.os.e@gmail.com"">kur.z.eg.lat.t.l.ed.erh.os.e@gmail.com</a>
<a href=""mailto:fredchaelchambers@outlook.com"">fredchaelchambers@outlook.com</a>
<a href=""mailto:k.ur.zeg.latt.led.erh.ose@gmail.com"">k.ur.zeg.latt.led.erh.ose@gmail.com</a>
<a href=""mailto:kur.ze.gl.a.t.t.l.e.de.r.h.o.se@gmail.com"">kur.ze.gl.a.t.t.l.e.de.r.h.o.se@gmail.com</a>
<a href=""mailto:ku.r.ze.gl.at.t.le.der.hose@gmail.com"">ku.r.ze.gl.at.t.le.der.hose@gmail.com</a>
<a href=""mailto:kur.zeg.l.a.t.tl.ed.er.h.o.s.e@gmail.com"">kur.zeg.l.a.t.tl.ed.er.h.o.s.e@gmail.com</a>
<a href=""mailto:k.u.r.zeg.l.a.t.t.le.d.erh.os.e@gmail.com"">k.u.r.zeg.l.a.t.t.le.d.erh.os.e@gmail.com</a>
<a href=""mailto:k.u.r.zeg.l.attl.e.de.rh.o.se@gmail.com"">k.u.r.zeg.l.attl.e.de.rh.o.se@gmail.com</a>
<a href=""mailto:kur.z.e.gl.attl.e.de.r.h.os.e@gmail.com"">kur.z.e.gl.attl.e.de.r.h.os.e@gmail.com</a>
<a href=""mailto:kurz.e.g.l.a.t.tl.e.de.rh.ose@gmail.com"">kurz.e.g.l.a.t.tl.e.de.rh.ose@gmail.com</a>
<a href=""mailto:ku.rz.e.glat.t.l.e.d.er.hos.e@gmail.com"">ku.rz.e.glat.t.l.e.d.er.hos.e@gmail.com</a>
<a href=""mailto:kur.z.e.g.la.ttle.derh.o.se@gmail.com"">kur.z.e.g.la.ttle.derh.o.se@gmail.com</a>
<a href=""mailto:k.urz.egla.tt.l.e.der.h.ose@gmail.com"">k.urz.egla.tt.l.e.der.h.ose@gmail.com</a>
<a href=""mailto:k.u.rze.glat.t.l.e.d.erh.o.se@gmail.com"">k.u.rze.glat.t.l.e.d.erh.o.se@gmail.com</a>
<a href=""mailto:k.u.rze.gl.a.t.tl.e.d.erho.se@gmail.com"">k.u.rze.gl.a.t.tl.e.d.erho.se@gmail.com</a>
<a href=""mailto:kurz.egl.a.tt.l.ed.erhose@gmail.com"">kurz.egl.a.tt.l.ed.erhose@gmail.com</a>"
UQLnWwcM,Untitled,Dimaush,Python,Tuesday 23rd of May 2023 03:25:42 PM CDT,"import numpy as np
np.random.seed(42)

class sample(object):
    def __init__(self, X, n_subspace):
        self.idx_subspace = self.random_subspace(X, n_subspace)
  
    def __call__(self, X, y):
        idx_obj = self.bootstrap_sample(X)
        X_sampled, y_sampled = self.get_subsample(X, y, self.idx_subspace, idx_obj)
        return X_sampled, y_sampled

    @staticmethod
    def bootstrap_sample(X, random_state=42):
        return np.unique(np.random.choice(X.shape[0], X.shape[0]))
    
    @staticmethod
    def random_subspace(X, n_subspace, random_state=42):
        return np.random.choice(X.shape[1], n_subspace, replace=False)

    @staticmethod
    def get_subsample(X, y, idx_subspace, idx_obj):
        X_sampled = X[idx_obj, :][:, idx_subspace]
        y_sampled = y[idx_obj]
        return X_sampled, y_sampled"
BXrLM738,quarry,BinaryRemark,Lua,Tuesday 23rd of May 2023 03:15:12 PM CDT,"local xPosSide = ""right""
local zPosSide = ""left""

local xLockSide = ""back""
local clutchSide = ""bottom""
local reverseSide = ""top""

local xLock = false
local clutch = true
local reverse = false

local homeVal = 15
local notchVal = 14

local xPos = 0
local zPos = 0

function stop()
    clutch = true
    applyLocks()
    os.sleep(1)
end

function xInc()
    clutch = false
    reverse = false
    xLock = false
    applyLocks()
end

function xDec()
    clutch = false
    reverse = true
    xLock = false
    applyLocks()
end

function zInc()
    clutch = false
    reverse = true
    xLock = true
    applyLocks()
end

function zDec()
    clutch = false
    reverse = false
    xLock = true
    applyLocks()
end

function applyLocks()
    rs.setOutput(clutchSide, clutch)
    rs.setOutput(reverseSide, reverse)
    rs.setOutput(xLockSide, xLock)
end

function GoHome()
    print(""GoHome()"");

    -- Home X
    print(""- homing X"")
    while rs.getAnalogInput(xPosSide) ~= homeVal do
        xDec()
        os.pullEvent(""redstone"")
    end
    stop()
    xPos = 0;

    -- Home Z
    print(""- homing Z"")
    while rs.getAnalogInput(zPosSide) ~= homeVal do
        zDec()
        os.pullEvent(""redstone"")
    end
    stop()
    zPos = 0
end

function Goto(xTar, zTar)
    print(string.format(""Goto(%u, %u)"", xTar, zTar))

    -- Move X
    if (rs.getAnalogInput(xPosSide) == 0) then
        print(""!- x out of alignment"")
        GoHome()
    end

    if xPos < xTar then
        print(""- moving x up"")
        xInc()
        os.pullEvent(""redstone"")
        while xPos ~= xTar do
            if rs.getAnalogInput(xPosSide) == notchVal then
                xPos = xPos + 1
                print(string.format(""- x at %u"", xPos))
            end
            if xPos ~= xTar then
                os.pullEvent(""redstone"")
            end
        end
        stop()
    end

    if xPos > xTar then
        print(""- moving x down"")
        xDec()
        os.pullEvent(""redstone"")
        while xPos ~= xTar do
            if rs.getAnalogInput(xPosSide) == notchVal then
                xPos = xPos - 1
                print(string.format(""- x at %u"", xPos))
            end
            if xPos ~= xTar then
                os.pullEvent(""redstone"")
            end
        end
        stop()
    end

    -- Move Z
    if (rs.getAnalogInput(zPosSide) == 0) then
        print(""!- z out of alignment"")
        GoHome()
    end

    if zPos < zTar then
        print(""- moving z up"")
        while zPos ~= zTar do
            zInc()
            if rs.getAnalogInput(zPosSide) == notchVal then
                zPos = zPos + 1
                print(string.format(""- z at %u"", zPos))
            end
            if zPos ~= zTar then
                os.pullEvent(""redstone"")
            end
        end
        stop()
    end

    if zPos > zTar then
        print(""- moving z down"")
        while zPos ~= zTar do
            zDec()
            if rs.getAnalogInput(zPosSide) == notchVal then
                zPos = zPos - 1
                print(string.format(""- z at %u"", zPos))
            end
            if zPos ~= zTar then
                os.pullEvent(""redstone"")
            end
        end
        stop()
    end
end

function Drill()

end

-- STARTUP
print(""-- STARTUP"")
GoHome()

-- MAIN
local args = { ... }
local argc = select(""#"", ...)

if (argc == 1) then
    local arg = args[1]
    if string.lower(arg) == ""home"" then
        GoHome()
        exit()
    end
end

Goto(5, 5)
os.sleep(1)
Goto(2, 3)
GoHome()
Goto(2, 3)
Goto(1, 5)
Goto(5, 5)
"
TQ1BFxG7,Untitled,Derga,C++,Tuesday 23rd of May 2023 02:31:09 PM CDT,"#include <stack>
#include <queue>
#include <array>
#include <list>
#include <forward_list>
#include <vector>

#include <set>

#include <map>

#include <unordered_map>
#include <unordered_set>

#include <iostream>

using namespace std;


//forward_list односвязный список
struct Node {
    int value;
    Node* next;
    //конструктор по умолчанию. После : - значит, 
    //что инициализация проиходит в момент создания переменной
    Node() : value(0), next(nullptr) {
    };
    
    Node(int value, Node* n) : value(0), next(n) {
    };
};

//двусвязный список //list<>
//Он содержит указатель на предыдущий (и на следующий тоже) элементы
struct Node {
    int value;
    Node* next;
    Node* prev;
    //конструктор по умолчанию. После : - значит, 
    //что инициализация проиходит в момент создания переменной
    Node() : value(0), next(nullptr), prev(nullptr) {
    };

    Node(int value, Node* n, Node* p) : value(0), next(n), prev(p) {
    };
};



//stl - standart template library
int main() {
    stack<int> s; //FILO
    s.push(1);
    cout << s.top() << '\n';
    s.pop();
    s.empty(); //возвращает true, усли пустой

    queue<int> q; //FIFO
    q.push(1);
    cout << q.front() << ' ' << q.back() << '\n';
    q.pop();
    cout << q.empty() << '\n';
    
    forward_list<int> fl;
    fl.push_front(1);
    cout << fl.front() << '\n';
    //вставка элемента за константу
    fl.insert_after(fl.begin(), 10); //так как это односвязный список вставляем после определенного элемента
        
    //вставка элемента за константу
    list<int> l;
    l.insert(l.begin(), 10); // тут свободно перемещаемся вперед и назад, вставлять значение легче.

    /*
    Node nw;
    Node n1;
    auto o = n1->next;//&n2
    n1->next = nw;
    nw->next = o;

    n1->n2
    o = n2
    n1->nw
    nw->n2
    n1->nw->n2
    */
    
    int c[100];

    array<int, 26> a;
    a.fill(0);
    
    set<int> se;//красночерное дерево - оно же бинарное дерево поиска, все операции за логорифм, кроме
    //минимум и максимум за константу. Самобалансируется! (родительский элемент меняется - не обязательно самый верхний)

    se.insert(1); //log(n)
    se.find(10); //log(n)
    cout << se.contains(7) << '\n';
    //элементы хранятся отсортированными

    map<int, string> mp; //такое же красночерное дерево, с такими асимптотиками, только каждый элемент хранит еще и значение

    unordered_set<int> st;
    //добавление за o(1) обычно, в худшем случае за o(n)
    //таблица со списками. (каждый элемент - список)
    
    //разные элементы возвращают одинаковые hash - коллизия
    //метод открытой адресации. 
}"
XXCBLxWn,Historyjki,PrezesSmoku,Python,Tuesday 23rd of May 2023 02:14:49 PM CDT,"import random

plik = open(""historie.txt"", ""a"")
plik.close()

plik = open(""historie.txt"", ""r"")
menu = [""Nowa historyjka"", ""Wyświetl historię"", ""Koniec""]
historie = plik.readlines()
plik.close()
for i in range(len(historie)):
    historie[i] = historie[i].replace(""\n"","""")

czy_koniec = False

czynnosc = [""wizyta"", ""wycieczka"", ""gotowanie"", ""walka"", ""lot""]
gdzie =[""w samolocie"", ""na plaży"", ""na rynku"", ""w górach""]
kiedy =[""wczoraj"", ""w średniowieczu"", ""jutro"", ""kiedy po Ziemi chodziły dinozaury""]
z_kim = [""z kolegą"", ""z szewczykiem dratewką"", ""ze starszą panią"", ""ze smokiem""]
po_co = [""po chwałe"", ""po bogactwo"", ""po dobry humor"", ""po złote skarpety""]

lista_list = [czynnosc, gdzie, kiedy, z_kim, po_co]
lista_naglowkow = [""Co"", ""Gdzie"", ""Kiedy"", ""Z kim"", ""Po co""]
while not czy_koniec:
    for i in range(len(menu)):
        print(f""{i+1}. {menu[i]}"")
    wybor = int(input(""Podaj wybór: ""))
    if wybor == 1:
        print(""Nowa historia"")
        czy_wylosowano_poprawnie = False
        while not czy_wylosowano_poprawnie:
            for i in range(len(lista_naglowkow)):
                obecna_lista = lista_list[i]
                dlugosc_listy = len(obecna_lista)
                wylosowane = obecna_lista[random.randint(0, dlugosc_listy-1)]
                print(f""{i+1}.{lista_naglowkow[i]}: {wylosowane}"")
            
            print(""1. Akceptuje losowanie"")
            print(""2. Losuj ponownie"")
            opcja_historii = int(input(""Podaj wybór: ""))
            if opcja_historii == 1:
                czy_wylosowano_poprawnie = True
            elif opcja_historii == 2:
                czy_wylosowano_poprawnie = False

        histryjka = input(""Ułóż historię: "")
        historie.append(histryjka)
    elif wybor == 2:
        print(""Wyświetl Historię"")
        for i in range(len(historie)):
            print(f""{i+1}. {historie[i]}"")
    elif wybor == 3:
        print(""Koniec programu"")
        plik = open(""historie.txt"", ""w"")
        for linia in historie:
            plik.write(linia+'\n')
        plik.close()
        czy_koniec = True
    else: 
        print(""Zły wybór"")

"
RxaVj5cs,sc-starter.sh,rawfox,Bash,Tuesday 23rd of May 2023 02:10:52 PM CDT,"#! /bin/bash

# StarCitizen startscript example
# ===============================
# Here is some example conditions to select and tryout.
# You need to edit the path`s to your needs and make sure, this scriptfile is executable.
# Lines beginning with a ""#"" are comments and not respected by the execution of this startscript.
# ===============================

# minimize the bash window when its started from Lutris, you need xdotool for this
# --------------------------------------------------------------------------------
#myRESULT=""lutris""
#if pgrep -x ""$myRESULT"" >/dev/null
#then
#WID=$(xdotool getactivewindow)
#xdotool windowminimize $WID
#fi

# exporting some variables to define places and conditions for wine
# -----------------------------------------------------------------

# For Nvidia, you may want to export these variables:
# --------------------------------------------------
# export __GL_SHADER_DISK_CACHE=true
# export __GL_SHADER_DISK_CACHE_PATH=""/home/rawfox/M2/glcache/SClocal""
# export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=true

# for AMD grafix, you may set this:
# ---------------------------------
export RADV_PERFTEST=gpl

# the rudimentary stuff, you need to edit these path`s for your needs:
# --------------------------------------------------------------------
# export STAGING_SHARED_MEMORY=1
# export STAGING_WRITECOPY=1
# export WINEESYNC=1
# export WINEFSYNC=1
# export WINEFSYNC_FUTEX2=1
# export WINEFSYNC_SPINCOUNT=100
# export MANGOHUD=1
# export MANGOHUD_CONFIGFILE=""/home/rawfox/.config/MangoHud/MangoHud-SC.conf""
# export DXVK_ASYNC=1
# export ENABLE_VKBASALT=1

export WINEPREFIX=""/home/rawfox/M2/StarCitizen""
export WINEDEBUG=-all #+pid,+timestamp,+seh,+loaddll,+virtual,+dialog,+msgbox

cd ""/home/rawfox/M2/StarCitizen/drive_c/Program Files/Roberts Space Industries/RSI Launcher""
wine ""RSI Launcher.exe"" #""--use-gl=osmesa"" # & #""--disable-gpu-compositing""

unset WINEPREFIX
unset WINEDEBUG

"
LHLDzTvu,Untitled,mr_zefirchk,HTML 5,Tuesday 23rd of May 2023 02:01:01 PM CDT,"function getRandomColor() {
  // Генерация случайных значений для красного, зеленого и синего каналов
  var red = Math.floor(Math.random() * 256);
  var green = Math.floor(Math.random() * 256);
  var blue = Math.floor(Math.random() * 256);

  // Формирование строки в формате RGB
  var color = 'rgb(' + red + ',' + green + ',' + blue + ')';

  return color;
}

for (var i = 0; i < 5; i++) {
  var paragraph = '<p style=""background-color: ' + getRandomColor() + ';"">Абзац ' + (i + 1) + '</p>';
  document.write(paragraph);
}
"
vcPBpu8P,Формат данных для реальных объектов,MARSHAL327,JSON,Tuesday 23rd of May 2023 01:59:58 PM CDT,"[
            {
                id: 1,
                code: ""buoy-1-1"",
                name: ""Буй 1"",
                description: ""Описание буя"",
                type: ""BUOY"",
                coord: [
                    44.615223, 33.487778
                ],
                created_at: ""2023-05-22T09:47:06.000000Z"",
                updated_at: ""2023-05-22T09:47:06.000000Z"",
                props: {
                    t_surf: 0,
                    t_sub_surf: 0,
                    turbidity: 0,
                    turbidity_mg: 0,
                    hp: 0,
                    Hsignf: 0,
                    Hmean: 0,
                    Honf: 0,
                    Hmax: 0,
                    Tmean: 0,
                    Tsignf: 0,
                }
            },
            {
                id: 2,
                code: ""meteostantsiya-1-2"",
                name: ""Метеостанция 1"",
                description: ""Описание метеостанции"",
                type: ""METEO_STATION"",
                coord: [
                    44.615223, 33.487778
                ],
                created_at: ""2023-05-22T09:47:06.000000Z"",
                updated_at: ""2023-05-22T09:47:06.000000Z"",
                props: {
                    windSpeed: 0,
                    windDirection: 0,
                    temperature: 0,
                    pressure: 0,
                    rainfall: 0,
                    uvIndex: 0,
                    humidity: 0,
                    solarRadiation: 0
                }
            },
        ]"
GvKHq6w6,Untitled,mr_zefirchk,HTML 5,Tuesday 23rd of May 2023 01:59:10 PM CDT,"<!DOCTYPE html>
<html>
<head>
  <title>Светофор</title>
  <style>
    * { box-sizing: border-box; }
    #svetofor {
      margin: 20px auto;
      padding: 30px;
      width: 130px;
      background-color: #696969;
      background-image: linear-gradient(99deg, #4d4d4d 50%, #333 50%);
      border: 5px groove #716d6d;
      border-radius: 60px;
      box-shadow: inset 2px 2px 9px rgba(0, 0, 0, 0.63);
    }
    .circle {
      width: 60px;
      height: 60px;
      border: 4px groove #696565;
      border-radius: 50%;
      background-color: #aaa;
      margin-bottom: 40px;
      box-shadow: inset 2px 2px 9px rgba(0, 0, 0, 0.63);
    }
    .circle:last-of-type { margin-bottom: 0; }
    .red { background-color: red; }
    .yellow { background-color: yellow; }
    .green { background-color: limegreen; }
  </style>
</head>
<body>
  <div id=""svetofor"">
    <div class=""circle""></div>
    <div class=""circle""></div>
    <div class=""circle""></div>
  </div>

  <script>
    var circles = document.getElementsByClassName('circle');
    var currentIndex = 0;

    function changeColor() {
      for (var i = 0; i < circles.length; i++) {
        if (i === currentIndex) {
          circles[i].className = 'circle';
          switch (currentIndex) {
            case 0:
              circles[i].classList.add('red');
              break;
            case 1:
              circles[i].classList.add('yellow');
              break;
            case 2:
              circles[i].classList.add('green');
              break;
          }
        } else {
          circles[i].className = 'circle';
        }
      }

      currentIndex = (currentIndex + 1) % circles.length;
    }

    setInterval(changeColor, 1500);
  </script>
</body>
</html>
"
XU7Sb2pN,TextFunction,PlayStationUser99,Lua,Tuesday 23rd of May 2023 01:54:28 PM CDT,"local Timer = 0

function TimerText()
    local Miliseconds:string = tostring((Timer - math.floor(Timer)) * 1000)
    local Seconds:string = tostring(math.floor(Timer%60))
    local Minutes:string = tostring(math.floor(Timer/60))
    
	if #Miliseconds == 1 then Miliseconds = ""0""..Miliseconds end
	if #Seconds == 1 then Seconds = ""0""..Seconds end
	if #Minutes == 1 then Minutes = ""0""..Minutes end
    
    local Final:string =
    Minutes.."":""..
    Seconds.."".""..
    string.sub(Miliseconds, 1, 2)
    
    return Final
end"
aa6gkumc,Untitled,DarveL,Go,Tuesday 23rd of May 2023 01:53:33 PM CDT,"package main

import (
	""context""
	""fmt""
	""math/rand""
	""os""
	""os/signal""
	""sync""
	""syscall""
	""time""
)

func main() {
	const nConsumers = 2

	in := make(chan int, 10)
	p := Producer{&in}
	c := Consumer{&in, make(chan int, nConsumers)}
	go p.Produce()
	ctx, cancelFunc := context.WithCancel(context.Background())
	go c.Consume(ctx)
	wg := &sync.WaitGroup{}
	wg.Add(nConsumers)
	for i := 1; i <= nConsumers; i++ {
		go c.Work(wg, i)
	}
	termChan := make(chan os.Signal, 1)
	signal.Notify(termChan, syscall.SIGINT, syscall.SIGTERM)

	<-termChan

	cancelFunc()
	wg.Wait()
}

type Consumer struct {
	in   *chan int
	jobs chan int
}

func (c Consumer) Work(wg *sync.WaitGroup, i int) {
	defer wg.Done()
	for job := range c.jobs {
		fmt.Printf(""Worker #%d start job %d\n"", i, job)
		time.Sleep(time.Millisecond * time.Duration(3000+rand.Intn(3000)))
		fmt.Printf(""Worker #%d finish job %d\n"", i, job)
	}
	fmt.Printf(""Worker #%d interrupted\n"", i)
}

func (c Consumer) Consume(ctx context.Context) {
	for {
		select {
		case job := <-*c.in:
			c.jobs <- job
		case <-ctx.Done():
			close(c.jobs)
			fmt.Println(""Consumer close channel"")
			return
		}
	}
}

type Producer struct {
	in *chan int
}

func (p Producer) Produce() {
	task := 1
	for {
		*p.in <- task
		fmt.Printf(""Send value %d\n"", task)
		task++
		time.Sleep(time.Millisecond * 500)
	}
}
"
181Syd52,OEMinfo.reg,pbtmp,REG,Tuesday 23rd of May 2023 01:14:27 PM CDT,"Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\OEMInformation]
""Logo""=""C:\\windows\\oem\\OEMlogo.bmp""
""Manufacturer""=""Gawr Gura""
""SupportURL""=""https://www.youtube.com/channel/UCoSrY_IQQVpmIRZ9Xf-y93g/streams""
""HelpCustomized""=dword:00000000
""Model""=""PC""
""SupportPhone""=""10032""
""SupportHours""=""996/ICU"""
huBN6iqW,Revision,ricky123ghfghfhg,C++,Tuesday 23rd of May 2023 01:11:06 PM CDT,"#include <bits/stdc++.h>
using namespace std;

bool cmp(pair<int,int> &one,pair<int,int> &two)
	{
		return one.second<two.second;
	}

// The main idea was to maintain a map with decreasing vals
// 2 maps with key as the order #ID and the value as 
// the tip...
// A for loop was used to compare the first and value of rohith and
// ankit.. both the key-val pair was deleted then lol
// it continued untill one of x or y is zero
// Notice the stark difference between this 
// and the AC code

// This code is more complex and is not correct because 
// a map could not store the according to decreasing values
// of val	

long long maxTip(int a[], int b[], int n, int x, int y) {
        // code here
        long long int tip=0,cnt=0;
        
         map<int,int> rahu;
        map<int,int> anki;

        for (int i = 0; i < n; ++i)
        {
            rahu.insert({i,a[i]});
        }
        for (int i = 0; i < n; ++i)
        {
            anki.insert({i,b[i]});
        }

        vector<pair<int,int>> v1(rahu.begin(),rahu.end());
        vector<pair<int,int>> v2(anki.begin(),anki.end());

        sort(v1.begin(),v1.end(),cmp);
        sort(v2.begin(),v2.end(),cmp);
        // for(auto i:v1)cout<<i.first<<"" ""<<i.second<<endl;

        unordered_map<int,int> rahul(v1.begin(),v1.end());
        unordered_map<int,int> ankit(v2.begin(),v2.end());
        // cout<<endl;
        // for(auto i:rahul)cout<<i.first<<"" ""<<i.second<<endl;

        for (int i = 0; i < n; ++i)
        {
        	if(rahul.begin()->second >= ankit.begin()->second)
        	{
        		x--;
        		tip+=rahul.begin()->second;
        		// cout<<i<<"" ""<<tip<<"" ""<<""rahul""<< endl;
        		ankit.erase(rahul.begin()->first);
        		rahul.erase(rahul.begin()->first);
        		
        		cnt++;
        	}
        	else if(rahul.begin()->second < ankit.begin()->second)
        	{
        		y--;
        		tip+=ankit.begin()->second;
        		// cout<<i<<"" ""<<tip<<"" ""<<""ankit""<<endl;
        		
        		rahul.erase(ankit.begin()->first);
        		ankit.erase(ankit.begin()->first);
        		cnt++;
        	}

        	if(x==0 or y==0)break;
        }

       // cout<<tip<<"" ""<<cnt<<endl;
      
      if(max(x,y)==x)
      		{
      			for(auto i:rahul)tip+=i.second;
      		}
      if(max(x,y)==y)
      		{
      			for(auto i:ankit)tip+=i.second;
      		}	
      	cout<<endl;
      	return tip;



      
            
    }

int main(){
	
int n,x,y; cin>>n>>x>>y;

int a[n],b[n];

for (int i = 0; i < n; ++i)
{
	cin>>a[i];
}

for (int i = 0; i < n; ++i)
{
	cin>>b[i];
}

cout<<maxTip(a,b,n,x,y);
}

/*
8525 7186 5766


*/"
mPP5eHbP,OEMinfo.ini,pbtmp,INI file,Tuesday 23rd of May 2023 01:08:17 PM CDT,"[General]
Manufacturer=Gawr Gura
Model=Windows XP

[Support Information]
Line1=Shark-girl Idol of Hololive EN !
Line2=---
Line3=A descendant of the Lost City of Atlantis, 
Line4=who swam to Earth while saying, ""It's so boring down there LOLOLOL!"" 
Line5=She bought her clothes (and her shark hat) in the human world 
Line6=and she really loves them. 
Line7=In her spare time, she enjoys talking to marine life.
Line8=
Line9=For Inquiries
Line10=Cover Corp: https://cover-corp.com/
Line11=Official Twitter: https://twitter.com/hololive_En
Line12=https://www.youtube.com/channel/UCoSrY_IQQVpmIRZ9Xf-y93g/streams"
pNrVfe8c,Untitled,BagaevDanil,Python,Tuesday 23rd of May 2023 01:04:36 PM CDT,"import numpy as np
z = [0, 7, 6, 3, 0, 2]
keepCost = 10  # Стоимость хранения
N = 6  # Количество месяцев
CAPACITY = 20  # Максимальное количество станков
INITIAL_MACHINES = 3  # Начальное количество станков
INCOMING = 5  # Сколько можем привезти за месяц
tripCost = 50  # Стоимость рейса: постоянные затраты
moveCost = 10  # Стоимость доставки одного станка
def dinProg(keepCost=10,tripCost=50):
    INF = 10 ** 6  # Заведомо большее число, чем любая стоимость
    B = [[INF] * (N + 1) for i in range(CAPACITY + 1)]
    S = [[INF] * (N + 1) for i in range(CAPACITY + 1)]
    F = [[INF] * (N + 1) for i in range(CAPACITY + 1)]
    F[INITIAL_MACHINES][0] = 0  # Начальное количество станков
    for m in range(0, N):
        for i in range(CAPACITY + 1):
            price = F[i][m]
            for k in range(INCOMING + 1):
                machines = i - z[m] + k
                if 0 <= machines <= CAPACITY:
                    incoming_costs = (k * moveCost + tripCost if k > 0 else 0)
                    keeping_costs = (machines) * keepCost
                    new_price = price + keeping_costs + incoming_costs
                    if new_price < F[machines][m + 1]:
                        F[machines][m + 1] = new_price
                        B[machines][m + 1] = i
                        S[machines][m + 1] = k
    B=np.array(B)
    S=np.array(S)
    plan = [i for i in range(N)]
    t=0;
    for i in range(len(plan)):
        plan[N-i-1] = S[:,N-i][t]
        q=B[:,N-i][t]
        t=q
    return(plan)
def countCost(arr,keep=10,trip=50,init=3):
    cost=0
    for i in range(len(arr)):
        init = init + arr[i] - z[i]
        if arr[i]>0:
            cost+=trip
        cost+=arr[i]*moveCost
        cost+= init * keep
    return cost
plan1=dinProg()
print('План перевозок для изначального условия:',plan1,', стоимость доставки при изначальном плане:',countCost(plan1))
print()
keep=10
trip=50
planSt=dinProg()
planNew=planSt
while planSt==planNew:
    keep+=1
    planNew = dinProg(keep,trip)
print('Изначальный план перевозок:',planSt,', стоимость доставки при изначальном плане:',countCost(planSt))
print('Новый план перевозок:',planNew,', стоимость доставки при новом плане:',countCost(planNew,keep))
print('Стоимость хранения при которой изменился план:',keep)
 
keep=10
planSt=dinProg(keep,trip)
planNew=planSt
while planSt==planNew:
    trip-=1
    planNew = dinProg(keep,trip)
print()
print('Изначальный план перевозок:',planSt,', стоимость доставки при изначальном плане:',countCost(planSt))
print('Новый план перевозок:',planNew,', стоимость доставки при новом плане:',countCost(planNew,50,trip))
print('Фиксированная стоимость перевозки при которой изменился план:',trip)
z = [0, 7, 6, 3, 0, 3]
planPlus1 = dinProg()
print('План перевозок с учётом того, что в конце должен на складе должен остаться один станок:',planPlus1,', стоимость доставки заданном условии:',countCost(planPlus1))"
bVcUc9pF,Untitled,Hekili,Lua,Tuesday 23rd of May 2023 12:43:43 PM CDT,"Feral; Defensives - N/A
build: v10.1.0-1.0.1i
level: 70 (70)
class: DRUID
spec: feral

talents: BcGAjgO5l4zUDkYE8W5/Dtff2BAAAAAAICkoIJJJlUiokkEJJAAAAAAUAQSAASSSCJRKJ0ScAAAAAAAIB0AA
    adaptive_swarm = 1/1
    astral_influence = 2/2
    berserk = 1/1
    berserk_frenzy = 1/1
    berserk_heart_of_the_lion = 1/1
    carnivorous_instinct = 2/2
    circle_of_life_and_death = 1/1
    dreadful_bleeding = 1/1
    feline_swiftness = 2/2
    feral_frenzy = 1/1
    frantic_momentum = 2/2
    improved_swipe = 1/1
    incapacitating_roar = 1/1
    incarnation = 1/1
    incarnation_avatar_of_ashamane = 1/1
    incessant_tempest = 1/1
    infected_wounds = 1/1
    innervate = 1/1
    ironfur = 1/1
    killer_instinct = 2/2
    lions_strength = 1/1
    lycaras_teachings = 3/3
    matted_fur = 1/1
    merciless_claws = 1/1
    moment_of_clarity = 1/1
    moonkin_form = 1/1
    natures_vigil = 1/1
    omen_of_clarity = 1/1
    pouncing_strikes = 1/1
    predator = 1/1
    predatory_swiftness = 1/1
    primal_fury = 1/1
    raging_fury = 1/1
    rake = 1/1
    relentless_predator = 1/1
    renewal = 1/1
    rip = 1/1
    sabertooth = 1/1
    skull_bash = 1/1
    soothe = 1/1
    soul_of_the_forest = 1/1
    stampeding_roar = 1/1
    starfire = 1/1
    sudden_ambush = 1/1
    sunfire = 1/1
    survival_instincts = 1/1
    taste_for_blood = 1/1
    thick_hide = 2/2
    thrash = 1/1
    tigers_fury = 1/1
    tireless_energy = 2/2
    typhoon = 1/1
    ursols_vortex = 1/1
    wellhoned_instincts = 1/2
    wild_charge = 1/1

pvptalents: none

covenant: none

conduits: none

soulbinds: [niya]

sets: manic_grieftorch = 1
    tier29 = 4

gear: acidproof_webbing = 1
    elemental_lariat = 1
    fused_shale_waistband = 1
    iceclimbers_cleats = 1
    lost_landcallers_antlers = 1
    lost_landcallers_claws = 1
    lost_landcallers_leggings = 1
    lost_landcallers_robes = 1
    loyal_flametenders_bracers = 1
    manic_grieftorch = 1
    mark_of_dargrul = 1
    obsidian_stirring_staff = 1
    onyx_annulet = 1
    renowned_guild_tabard = 1
    signet_of_titanic_insight = 1
    sunless_spaulders = 1
    tier29 = 4

legendaries: none

itemIDs: 137357, 192999, 193001, 194308, 195501, 195509, 195511, 195525, 200351, 200353, 200354, 200355, 202563, 203460, 204933, 69210

settings: aoe = 3
    combatRefresh = 0.25
    custom1Name = Custom 1
    custom2Name = Custom 2
    cycle = false
    cycle_min = 6
    damage = true
    damageDots = false
    damageExpiration = 3
    damageOnScreen = true
    damagePets = false
    damageRange = 0
    enabled = true
    enhancedRecheck = false
    gcdSync = true
    maxTime = 20
    nameplateRange = 8
    nameplates = true
    noFeignedCooldown = false
    package = Feral
    petbased = false
    potion = spectral_agility
    regularRefresh = 0.5
    throttleRefresh = false
    throttleTime = false
    rip_duration = 9
    use_funnel = false
    vigil_damage = 50

toggles: cooldowns = true 
    custom1 = false 
    custom2 = false 
    defensives = true [separate]
    essences = true [overridden]
    interrupts = true [separate]
    mode = automatic 
    potions = true [overridden]

keybinds: 
    adaptive_swarm        = AZ  [02]
    barkskin              = S2  [04], 4   [09]
    brutal_slash          = 3   [07]
    cat_form              = SE  [02]
    cyclone               = 7   [10]
    dash                  = 6   [01], 6   [07], 6   [09], 4   [10]
    entangling_roots      = 7   [01], 7   [07], 3   [10]
    feral_frenzy          = A4  [03], 3   [08]
    ferocious_bite        = A2  [03]
    frenzied_regeneration = 9   [09]
    healthstone           = X   [03]
    incapacitating_roar   = AT  [02], 8   [09]
    incarnation           = 4   [07]
    innervate             = 5   [01], 9   [07]
    ironfur               = 3   [09]
    lunar_inspiration     = 1   [01], 1   [10]
    mangle                = 1   [09]
    manic_grieftorch      = A7  [03]
    mark_of_the_wild      = S² [02]
    mighty_bash           = 7   [09]
    moonfire              = 1   [01], 1   [10]
    moonfire_cat          = 1   [01], 1   [10]
    natures_vigil         = A6  [03]
    primal_wrath          = E   [02]
    prowl                 = S1  [02], SA  [09]
    rake                  = 1   [07], 1   [08]
    regrowth              = AX  [03], 5   [10]
    rejuvenation          = 4   [01]
    renewal               = SX  [04]
    rip                   = A3  [03]
    shred                 = A   [01], A   [07]
    skull_bash            = ²  [02], 5   [09]
    soothe                = T   [02]
    stampeding_roar       = A8  [03]
    sunfire               = 8   [10]
    survival_instincts    = S3  [04], 6   [10]
    swipe                 = 3   [07]
    swipe_bear            = 3   [07]
    swipe_cat             = 3   [07]
    thrash                = 2   [07], 2   [08], 2   [09]
    thrash_bear           = 2   [07], 2   [08], 2   [09]
    thrash_cat            = 2   [07], 2   [08], 2   [09]
    tigers_fury           = A1  [03]
    travel_form           = =   [04], CT  [09], CT  [11]
    typhoon               = SA  [01], SA  [07]
    ursols_vortex         = CT  [01], CT  [07]
    wild_charge           = AA  [04]
    wrath                 = 2   [01], 2   [10]

warnings: [#1] Update: ...nterface/AddOns/Hekili/Dragonflight/DruidBalance.lua:2219: attempt to compare nil with number
[string ""@Interface/AddOns/Hekili/Dragonflight/DruidBalance.lua""]:2219: in function `usable'
[string ""@Interface/AddOns/Hekili/State.lua""]:7058: in function `IsUsable'
[string ""@Interface/AddOns/Hekili/Core.lua""]:932: in function `GetPredictionFromAPL'
[string ""@Interface/AddOns/Hekili/Core.lua""]:1397: in function `GetNextPrediction'
[string ""@Interface/AddOns/Hekili/Core.lua""]:1777: in function <Interface/AddOns/Hekili/Core.lua:1446>



targets:  Nameplates are enabled.

player_buffs:
     1126 - mark_of_the_wild                         -   1 - 2300.52
      768 - cat_form                                 -   1 - 3600.00
    97341 - *guild_champion                          -   1 - 3600.00
   225788 - *sign_of_the_emissary                    -   1 - 3600.00
   382093 - *alchemically_inspired                   -   1 - 11788.11
   387336 - *zone_of_focus                           -   1 - 3600.00

player_debuffs:

target_buffs:

target_debuffs:


New Recommendations for [ Defensives ] requested at 12:20:10 ( 1032784.72 ); using built-in ( Feral ) priority.
*** START OF NEW DISPLAY: Defensives ***

RECOMMENDATION #1 ( Offset: 0.00, GCD: 0.00, Casting: 0.00 ).

    Resources: astral_power[ 0.00 / 1.00 ], combo_points[ 0.00 / 1.00 ], energy[ 0.00 / 1.00 ], mana[ 0.00 / 1.00 ], rage[ 0.00 / 1.00 ]
    Checking if I'm casting ( No ) and if it is a channel ( No ).
    No whitelist.
    
    Processing precombat action list [ Feral - precombat ].
        
        Current recommendation was NO ACTION at +10.00s.
        
        1.   mark_of_the_wild ( precombat - 1 ) - ability disabled ( display )
        Time spent on this action:  0.03ms
        TimeData:Feral-precombat-1:mark_of_the_wild:0.03:Ability Known, Enabled(0.03)
        
        2.   algethar_puzzle_box ( precombat - 2 ) - IsUsableItem item 193701 and nil
        Time spent on this action:  0.24ms
        TimeData:Feral-precombat-2:algethar_puzzle_box:0.24:Ability Known, Enabled(0.24)
        
        3.   heart_of_the_wild ( precombat - 3 ) - talent [ heart_of_the_wild ] missing
        Time spent on this action:  0.04ms
        TimeData:Feral-precombat-3:heart_of_the_wild:0.04:Ability Known, Enabled(0.04)
        
        4.   prowl ( precombat - 4 ) - ability disabled ( preference )
        Time spent on this action:  0.03ms
        TimeData:Feral-precombat-4:prowl:0.03:Ability Known, Enabled(0.03)
        
        5.   cat_form ( precombat - 5 ) - ability disabled ( display )
        Time spent on this action:  0.01ms
        TimeData:Feral-precombat-5:cat_form:0.01:Ability Known, Enabled(0.01)
        Exiting precombat with recommendation of NO ACTION at +10.00s.
    
    Completed precombat action list [ Feral - precombat ].
    
    Processing default action list [ Feral - default ].
        
        Current recommendation was NO ACTION at +10.00s.
        
        6.   skull_bash ( default - 1 ) - ability disabled ( toggle a )
        Time spent on this action:  0.02ms
        TimeData:Feral-default-1:skull_bash:0.02:Ability Known, Enabled(0.02)
        
        7.   soothe ( default - 2 ) - ability disabled ( toggle a )
        Time spent on this action:  0.01ms
        TimeData:Feral-default-2:soothe:0.01:Ability Known, Enabled(0.01)
        
        8.   prowl ( default - 3 ) - ability disabled ( preference )
        Time spent on this action:  0.02ms
        TimeData:Feral-default-3:prowl:0.02:Ability Known, Enabled(0.02)
        
        9.   cat_form ( default - 4 ) - ability disabled ( display )
        Time spent on this action:  0.01ms
        TimeData:Feral-default-4:cat_form:0.01:Ability Known, Enabled(0.01)
        
        10.  variable ( default - 5 )
         - variable.need_bt[false] will check this script entry ( Feral:default:5 )
        Time spent on this action:  0.03ms
        TimeData:Feral-default-5:variable:0.03:Ability Known, Enabled(0.01):Post-TTR and Essential(0.02)
        
        11.  variable ( default - 6 )
         - variable.align_3minutes[true] will check this script entry ( Feral:default:6 )
        Time spent on this action:  0.02ms
        TimeData:Feral-default-6:variable:0.02:Ability Known, Enabled(0.01):Post-TTR and Essential(0.01)
        
        12.  variable ( default - 7 )
         - variable.lastconvoke[true] will check this script entry ( Feral:default:7 )
        Time spent on this action:  0.02ms
        TimeData:Feral-default-7:variable:0.02:Ability Known, Enabled(0.01):Post-TTR and Essential(0.01)
        
        13.  variable ( default - 8 )
         - variable.lastzerk[false] will check this script entry ( Feral:default:8 )
        Time spent on this action:  0.02ms
        TimeData:Feral-default-8:variable:0.02:Ability Known, Enabled(0.01):Post-TTR and Essential(0.01)
        
        14.  variable ( default - 9 )
         - variable.zerk_biteweave[0] will check this script entry ( Feral:default:9 )
        Time spent on this action:  0.02ms
        TimeData:Feral-default-9:variable:0.02:Ability Known, Enabled(0.01):Post-TTR and Essential(0.01)
        
        15.  tigers_fury ( default - 10 ) - ability disabled ( display )
        Time spent on this action:  0.02ms
        TimeData:Feral-default-10:tigers_fury:0.02:Ability Known, Enabled(0.02)
        
        16.  tigers_fury ( default - 11 ) - ability disabled ( display )
        Time spent on this action:  0.01ms
        TimeData:Feral-default-11:tigers_fury:0.01:Ability Known, Enabled(0.01)
        
        17.  rake ( default - 12 ) - ability disabled ( display )
        Time spent on this action:  0.01ms
        TimeData:Feral-default-12:rake:0.01:Ability Known, Enabled(0.01)
        
        18.  natures_vigil ( default - 13 )
        Recommendation thread terminated due to error: ...nterface/AddOns/Hekili/Dragonflight/DruidBalance.lua:2219: attempt to compare nil with number
        
        [string ""@Interface/AddOns/Hekili/Dragonflight/DruidBalance.lua""]:2219: in function `usable'
        [string ""@Interface/AddOns/Hekili/State.lua""]:7058: in function `IsUsable'
        [string ""@Interface/AddOns/Hekili/Core.lua""]:932: in function `GetPredictionFromAPL'
        [string ""@Interface/AddOns/Hekili/Core.lua""]:1397: in function `GetNextPrediction'
        [string ""@Interface/AddOns/Hekili/Core.lua""]:1777: in function <Interface/AddOns/Hekili/Core.lua:1446>
        `"
cWARVMQx,Untitled,Caesar9988,MySQL,Tuesday 23rd of May 2023 12:29:54 PM CDT,"#1
SELECT 
    COUNT(*) AS 'count'
FROM
    `wizzard_deposits`;
#2
SELECT 
    MAX(`magic_wand_size`) AS 'longest_magic_wand'
FROM
    `wizzard_deposits`;
#3
SELECT 
    `deposit_group`,
    MAX(`magic_wand_size`) AS 'longest_magic_wand'
FROM
    `wizzard_deposits`
GROUP BY `deposit_group`
ORDER BY `longest_magic_wand` ASC , `deposit_group` ASC;
#4*
SELECT 
    `deposit_group`
FROM
    `wizzard_deposits`
GROUP BY `deposit_group`
ORDER BY AVG(`magic_wand_size`) ASC
LIMIT 1;
#5
SELECT 
    `deposit_group`,
    SUM(`deposit_amount`) AS 'total_sum'
FROM
    `wizzard_deposits`
GROUP BY `deposit_group`
ORDER BY `total_sum` ASC;
#6
SELECT 
    `deposit_group`, 
    SUM(`deposit_amount`) AS 'total_sum'
FROM
    `wizzard_deposits`
WHERE
    `magic_wand_creator` = 'Ollivander family'
GROUP BY `deposit_group`
ORDER BY `deposit_group` ASC;
#7
SELECT 
    `deposit_group`, 
    SUM(`deposit_amount`) AS 'total_sum'
FROM
    `wizzard_deposits`
WHERE `magic_wand_creator` = 'Ollivander family'
GROUP BY `deposit_group`
HAVING `total_sum` < 150000
ORDER BY `total_sum` DESC;
#8
SELECT `deposit_group`, 
       `magic_wand_creator`,
       MIN(`deposit_charge`) AS 'min_deposit_charge'
FROM `wizzard_deposits`
GROUP BY `deposit_group`, `magic_wand_creator` #групиране по повече от един критерий
ORDER BY `magic_wand_creator` ASC, `deposit_group` ASC;
#9
SELECT 
    CASE
        WHEN `age` BETWEEN 0 AND 10 THEN '[0-10]'
        WHEN `age` BETWEEN 11 AND 20 THEN '[11-20]'
        WHEN `age` BETWEEN 21 AND 30 THEN '[21-30]'
        WHEN `age` BETWEEN 31 AND 40 THEN '[31-40]'
        WHEN `age` BETWEEN 41 AND 50 THEN '[41-50]'
        WHEN `age` BETWEEN 51 AND 60 THEN '[51-60]'
        WHEN `age` >= 61 THEN '[61+]'
    END AS 'age_group',
    COUNT(`id`) AS 'wizard_count' #броим записите в групите
FROM
    `wizzard_deposits`
GROUP BY `age_group`
ORDER BY `wizard_count` ASC;
#10
SELECT DISTINCT LEFT(`first_name`, 1) AS 'first_letter'
FROM `wizzard_deposits`
WHERE `deposit_group` = 'Troll Chest'
ORDER BY `first_letter` ASC;
#11
SELECT 
    `deposit_group`,
    `is_deposit_expired`,
    AVG(`deposit_interest`) AS 'average_interest'
FROM
    `wizzard_deposits`
WHERE
    `deposit_start_date` > '1985-01-01'
GROUP BY `deposit_group` , `is_deposit_expired`
ORDER BY `deposit_group` DESC , `is_deposit_expired` ASC;

USE `soft_uni`;
#12
SELECT 
    `department_id`, 
    MIN(salary) AS 'minimum_salary'
FROM
    `employees`
WHERE
    `hire_date` > '2000-01-01' AND `department_id` IN (2 , 5, 7)
GROUP BY `department_id`
ORDER BY `department_id` ASC;
#13
CREATE TABLE `high_paid_employees` AS 
SELECT `department_id`, `salary`
FROM
    `employees`
WHERE
    `salary` > '30000' AND NOT `manager_id` = '42';

-- SET SQL_SAFE_UPDATES = 0;
UPDATE `high_paid_employees`
SET `salary` = `salary` + 5000
WHERE `department_id` = 1;

SELECT `department_id`, 
      AVG(`salary`) AS 'avg_salary'
FROM `high_paid_employees`
GROUP BY `department_id`
ORDER BY `department_id` ASC;
#14
SELECT `department_id`,
       MAX(`salary`) AS 'max_salary'
FROM `employees`
GROUP BY `department_id`
HAVING `max_salary` NOT BETWEEN 30000 AND 70000
ORDER BY `department_id` ASC;
#15
SELECT COUNT(*) AS '' FROM `employees`
WHERE `manager_id` IS NULL;
#16
SELECT `department_id`,
# намирам третата най-висока заплата
	(SELECT DISTINCT `salary` FROM `employees` e
     WHERE e.`department_id` = employees.`department_id`
     ORDER BY `salary` DESC
     LIMIT 1 OFFSET 2
       ) AS 'third_highest_salary'
FROM `employees`
GROUP BY `department_id`
HAVING `third_highest_salary` IS NOT NULL
ORDER BY `department_id` ASC;
#17
SELECT `first_name`, `last_name`, `department_id` 
FROM `employees`
WHERE `salary` > (SELECT AVG(`salary`) 
                  FROM `employees` e
                  WHERE e.`department_id` = employees.`department_id`
) #намираме средната заплата
ORDER BY `department_id`, `employee_id`
LIMIT 10;
#18
SELECT `department_id`,
       SUM(`salary`) AS 'total_salary'
FROM `employees`
GROUP BY `department_id`
ORDER BY `department_id` ASC;"
rWbvmpgG,BST,momo2345,C++,Tuesday 23rd of May 2023 12:16:08 PM CDT,"#include<bits/stdc++.h>
using namespace std;
#define optimise ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)

struct Node {
    int data;
    Node* left;
    Node* right;
};
Node* createNode(int val) {
    Node* newNode = new Node;
    newNode->data = val;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}
Node* insert(Node* root, int val) {
    if (root == nullptr) {
        return createNode(val);
    }

    if (val < root->data) {
        root->left = insert(root->left, val);
    } else {
        root->right = insert(root->right, val);
    }

    return root;
}

void postorderTraversal(Node* root) {
    if (root == nullptr) {
        return;
    }

    postorderTraversal(root->left);
    postorderTraversal(root->right);
    cout << root->data << endl;
}

int main() {
    Node* root = nullptr;
    int val;
    while(cin>>val){
            if(root == nullptr) root = insert(root, val);
            else insert(root, val);
    }
     postorderTraversal(root);
}"
v9zyncMK,Szablon Pygame,drakon-firestone,Python,Tuesday 23rd of May 2023 12:15:06 PM CDT,"# dodanie biblioteki pygame
import pygame

# inicjowanie modułu pygame 
# (ustawienie wszystkich wartości poczatkowych itd.)
pygame.init()

# wymiary ekranu - 800x600
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# stworzenie obiektu ekranu
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
# ustawienie tekstu w pasku tytułu okna naszej gry
pygame.display.set_caption('Pierwsza Gra')

# obiekt zegara
clock = pygame.time.Clock()


# zmienna okreslająca czy program ma być włączony czy nie
game_running = True

# główna pętla programu
while game_running:

    # odczytanie zdarzeń zarejestrowanych w grze przez komuputer
    events = pygame.event.get()

    # dla każdego zarejestrowanego zdarzenia
    for event in events:
        # jeśli to zdarzenie jest zdarzeniem zamkniecia okna X
        if event.type == pygame.QUIT:
            # ustawiamy zmieną na False aby pętla się zakończyła
            game_running = False


    # odświeżanie okna
    pygame.display.update()
    # ustawienie 60 FPS-ów
    clock.tick(60)
    pass

# zamknięcie aplikacji
pygame.quit()"
6c7AhtDt,Untitled,davisroman,Bash,Tuesday 23rd of May 2023 12:12:09 PM CDT,"droman@lnx-37850:~$ pulp status
{
  ""versions"": [
    {
      ""component"": ""core"",
      ""version"": ""3.24.0.dev"",
      ""package"": ""pulpcore"",
      ""domain_compatible"": true
    },
    {
      ""component"": ""ansible"",
      ""version"": ""0.17.0.dev"",
      ""package"": ""pulp-ansible"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""certguard"",
      ""version"": ""1.7.0.dev"",
      ""package"": ""pulp-certguard"",
      ""domain_compatible"": true
    },
    {
      ""component"": ""container"",
      ""version"": ""2.15.0.dev"",
      ""package"": ""pulp-container"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""cookbook"",
      ""version"": ""0.1.0b10.dev"",
      ""package"": ""pulp-cookbook"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""deb"",
      ""version"": ""2.21.0.dev"",
      ""package"": ""pulp_deb"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""file"",
      ""version"": ""1.14.0.dev"",
      ""package"": ""pulp-file"",
      ""domain_compatible"": true
    },
    {
      ""component"": ""gem"",
      ""version"": ""0.0.1b4.dev"",
      ""package"": ""pulp-gem"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""maven"",
      ""version"": ""0.6.0.dev"",
      ""package"": ""pulp-maven"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""npm"",
      ""version"": ""0.1.0a5.dev"",
      ""package"": ""pulp-npm"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""ostree"",
      ""version"": ""2.0.0a7.dev"",
      ""package"": ""pulp-ostree"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""python"",
      ""version"": ""3.10.0.dev"",
      ""package"": ""pulp-python"",
      ""domain_compatible"": false
    },
    {
      ""component"": ""rpm"",
      ""version"": ""3.20.0.dev"",
      ""package"": ""pulp-rpm"",
      ""domain_compatible"": false
    }
  ],
"
ZfAagF2p,For Egorik,alx_gunin,C++,Tuesday 23rd of May 2023 11:59:33 AM CDT,"#pragma once
#include <memory>
#include <type_traits>
#include <iostream>  

template <typename T>
class WeakPtr;

template <typename T>
class EnableSharedFromThis;

namespace blocks {
  struct BaseControlBlock {
    int weak_count;
    int shared_count;
    BaseControlBlock(int weak, int shared): weak_count(weak), shared_count(shared) {}
    virtual void useDeleter() = 0;
    virtual void dealloc() = 0;
    virtual ~BaseControlBlock() = default;
  };

  template <typename U, typename Deleter = std::default_delete<U>, typename Alloc = std::allocator<U>>
  struct BaseControlBlockRegular: BaseControlBlock {
    U* object;
    Deleter deleter;
    Alloc alloc;
    BaseControlBlockRegular(int shared_count, int weak_count, U* pt, Deleter deleter = Deleter(), Alloc alloc = Alloc()): BaseControlBlock(weak_count, shared_count), object(pt), deleter(deleter), alloc(alloc) {}
    virtual void useDeleter() final { deleter(object); }
    using AllocBaseControlBlock = typename std::allocator_traits<Alloc>::template rebind_alloc<BaseControlBlockRegular>;
    using AllocTraits = std::allocator_traits<AllocBaseControlBlock>;
    AllocBaseControlBlock newAlloc = alloc;
    virtual void dealloc() final {
      // AllocTraits::destroy(newAlloc, this);
      AllocTraits::deallocate(newAlloc, this, 1);
    }
    ~BaseControlBlockRegular() = default;
  };

  template <typename T, typename Alloc = std::allocator<T>>
  struct BaseControlBlockMakeShared: BaseControlBlock {
    T object;
    Alloc alloc;
    using AllocT = typename std::allocator_traits<Alloc>::template rebind_alloc<T>;
    using TTraits = std::allocator_traits<AllocT>;
    AllocT allocT = alloc;
    template <typename... Args>
    BaseControlBlockMakeShared(int shared_count, int weak_count, const Alloc& alloc, Args&&... args): BaseControlBlock(weak_count, shared_count), object(std::forward<Args>(args)...), alloc(alloc) {}
    
    virtual void useDeleter() final {
      TTraits::destroy(allocT, &object);
    }
    
    using AllocBaseControlBlock = typename std::allocator_traits<Alloc>::template rebind_alloc<BaseControlBlockMakeShared>;
    using AllocTraits = std::allocator_traits<AllocBaseControlBlock>;
    AllocBaseControlBlock newAlloc = alloc;
    virtual void dealloc() final {
      // AllocTraits::destroy(newAlloc, this);
      AllocTraits::deallocate(newAlloc, this, 1);
    } 
    ~BaseControlBlockMakeShared() = default;
  };
}

template <typename T>
class SharedPtr {
private:
  template <typename U>
  friend class WeakPtr;

  template <typename U>
  friend class SharedPtr;


  T* ptr = nullptr;
  blocks::BaseControlBlock* cb = nullptr;

  void update_wptr() {
    if (cb == nullptr) return;
    if constexpr (std::is_base_of_v<EnableSharedFromThis<T>, T>) {
      ptr->wptr = *this;
    }
  }

  void add() {
    if (cb != nullptr) cb->shared_count++;
  }
  
  SharedPtr(const WeakPtr<T>& other): ptr(other.ptr), cb(other.cb) {
    add();
  }

public:
  void swap(SharedPtr& other) {
    std::swap(ptr, other.ptr);
    std::swap(cb, other.cb);
  }

  SharedPtr() = default;

  SharedPtr(T* ptr): ptr(ptr), cb(new blocks::BaseControlBlockRegular<T>(1, 0, ptr)) {
    update_wptr();
  }

  template <typename U>
  SharedPtr(U* ptr): ptr(static_cast<T*>(ptr)), cb(new blocks::BaseControlBlockRegular<U>(1, 0, ptr)) {
    update_wptr();
  }

  template <typename Deleter>
  SharedPtr(T* ptr, Deleter deleter): ptr(ptr), cb(new blocks::BaseControlBlockRegular<T, Deleter>(1, 0, ptr, deleter)) {
    update_wptr();
  }

  template <typename U, typename Deleter>
  SharedPtr(U* ptr, Deleter deleter): ptr(static_cast<T*>(ptr)), cb(new blocks::BaseControlBlockRegular<U, Deleter>(1, 0, ptr, deleter)) {
    update_wptr();
  }

  template <typename Deleter, typename Alloc>
  SharedPtr(T* ptr, Deleter deleter, Alloc alloc): ptr(ptr) {
    using AllocBaseControlBlock = typename std::allocator_traits<Alloc>::template rebind_alloc<blocks::BaseControlBlockRegular<T, Deleter, Alloc>>;
    using AllocTraits = std::allocator_traits<AllocBaseControlBlock>;
    AllocBaseControlBlock newAlloc = alloc;
    cb = AllocTraits::allocate(newAlloc, 1);
    // AllocTraits::construct(newAlloc, cb, blocks::BaseControlBlockRegular<T, Deleter, Alloc>(1, 0, ptr, deleter, alloc));
    new (cb) blocks::BaseControlBlockRegular<T, Deleter, Alloc>(1, 0, ptr, deleter, alloc);
    update_wptr();
  }

  template <typename U, typename Deleter, typename Alloc>
  SharedPtr(U* ptr, Deleter deleter, Alloc alloc): ptr(static_cast<T*>(ptr)) {
    using AllocBaseControlBlock = typename std::allocator_traits<Alloc>::template rebind_alloc<blocks::BaseControlBlockRegular<U, Deleter, Alloc>>;
    using AllocTraits = std::allocator_traits<AllocBaseControlBlock>;
    AllocBaseControlBlock newAlloc = alloc;
    cb = AllocTraits::allocate(newAlloc, 1);
    AllocTraits::construct(newAlloc, cb, blocks::BaseControlBlockRegular<U, Deleter, Alloc>(1, 0, ptr, deleter, alloc));
    update_wptr();
  }

  SharedPtr(const SharedPtr& other): ptr(other.ptr), cb(other.cb) { 
    // std::cerr << ""aboba\n"";
    add();
    // std::cerr << cb->shared_count << ' ' << cb->weak_count << '\n';
  }

  template <typename U>
  SharedPtr(const SharedPtr<U>& other): ptr(static_cast<T*>(other.ptr)), cb(other.cb) {
    add();
  }

  SharedPtr& operator=(const SharedPtr& other) {
    SharedPtr copy = other;
    swap(copy);
    return *this;
  }

  template <typename U>
  SharedPtr& operator=(const SharedPtr<U>& other) {
    SharedPtr copy = other;
    swap(copy);
    return *this;
  }

  SharedPtr(SharedPtr&& other): ptr(other.ptr), cb(other.cb) {
    update_wptr();
    other.ptr = nullptr;
    other.cb = nullptr;
  }

  template <typename U>
  SharedPtr(SharedPtr<U>&& other): ptr(other.ptr), cb(other.cb) {
    update_wptr();
    other.ptr = nullptr;
    other.cb = nullptr;
  }

  SharedPtr& operator=(SharedPtr&& other) {
    SharedPtr copy = std::move(other);
    swap(copy);
    return *this;
  }

  template <typename U>
  SharedPtr& operator=(SharedPtr<U>&& other) {
    SharedPtr copy = std::move(other);
    swap(copy);
    return *this;
  }

  SharedPtr(blocks::BaseControlBlock* cb): cb(cb) {}

  void destructor() {
    if (cb == nullptr) return;
    cb->shared_count--;
    if (cb->shared_count == 0) {
      cb->useDeleter();
      // std::cerr << ""we are here! 2\n"";
      if (cb->weak_count == 0) {
        cb->dealloc();
        // std::cerr << ""we are here! 3\n"";
      }
    }
  }

  ~SharedPtr() {
    destructor();
  }

  int use_count() const { return cb->shared_count; }

  void reset(T* pt = nullptr) { 
    destructor();
    cb = nullptr;
    ptr = nullptr;
    if (pt) {
      ptr = pt;
      cb = new blocks::BaseControlBlockRegular<T>(1, 0, pt);
    }
  }

  template <typename U>
  void reset(U* pt = nullptr) { 
    destructor();
    cb = nullptr;
    ptr = nullptr;
    if (pt) {
      ptr = pt;
      cb = new blocks::BaseControlBlockRegular<U>(1, 0, pt);
    }
  }

  T& operator*() const {
    if (ptr) { return *ptr; }
    return (static_cast<blocks::BaseControlBlockMakeShared<T>*>(cb)->object);
  }

  T* operator->() const {
    if (ptr) { return ptr; }
    return &(static_cast<blocks::BaseControlBlockMakeShared<T>*>(cb)->object);
  }

  T* get() const noexcept { return ptr; }
};

template <typename T>
class WeakPtr {
private:
  template <typename U>
  friend class SharedPtr;

  template <typename U>
  friend class WeakPtr;

  T* ptr = nullptr;
  blocks::BaseControlBlock* cb = nullptr;
  
  void add() {
    if (cb != nullptr) cb->weak_count++;
  }

public:
  void swap(WeakPtr& other) {
    std::swap(ptr, other.ptr);
    std::swap(cb, other.cb);
  }

  WeakPtr() = default;

  WeakPtr(const SharedPtr<T>& other): ptr(other.ptr), cb(other.cb) {
    // std::cerr << ""amogus\n"";
    // std::cerr << cb->shared_count << '\n';
    add();
  }

  template <typename U>
  WeakPtr(const SharedPtr<U>& other): ptr(static_cast<T*>(other.ptr)), cb(other.cb) {
    add();
  }

  WeakPtr(const WeakPtr& other): ptr(other.ptr), cb(other.cb) {
    add();
  }

  template<typename U>
  WeakPtr(const WeakPtr<U>& other): ptr(static_cast<T*>(other.ptr)), cb(other.cb) {
    add();
  }

  WeakPtr& operator=(const WeakPtr& other) {
    // std::cerr << ""aboba1"";
    WeakPtr copy = other;
    swap(copy);
    return *this;
  }

  template<typename U>
  WeakPtr& operator=(WeakPtr<U> other) {
    // std::cerr << ""aboba1"";
    WeakPtr copy = other;
    swap(copy);
    return *this;
  }

  WeakPtr(WeakPtr&& other): ptr(other.ptr), cb(other.cb) {
    add();
    other.ptr = nullptr;
    other.cb = nullptr;
  }

  template <typename U>
  WeakPtr(WeakPtr<U>&& other): ptr(static_cast<T*>(other.ptr)), cb(other.cb) {
    add();
    other.ptr = nullptr;
    other.cb = nullptr;
  }

  WeakPtr& operator=(WeakPtr&& other) {
    // std::cerr << ""aboba3\n"";
    // std::cerr << cb->weak_count << '\n';
    WeakPtr copy = std::move(other);
    // std::cerr << copy.cb->weak_count << '\n';
    swap(copy);
    // std::cerr << cb->weak_count << '\n';
    return *this;
  }

  template <typename U>
  WeakPtr& operator=(WeakPtr<U>&& other) {
    // std::cerr << ""aboba4""; 
    WeakPtr copy = std::move(other);
    swap(copy);
    return *this;
  }

  bool expired() const noexcept { return cb->shared_count == 0; }

  SharedPtr<T> lock() const noexcept {
    if (expired()) return SharedPtr<T>();
    return SharedPtr<T>(*this);
  }

  ~WeakPtr() {
    // std::cout << ""Hello!\n"";
    if (cb == nullptr) return;
    cb->weak_count--;
    // std::cout << cb->shared_count << ' ' << cb->weak_count << '\n';
    // std::cerr << ""goodbye3!\n"";
    if (cb->weak_count == 0 && cb->shared_count == 0) {
      // std::cout << ""Hello!\n"";

      // std::cerr << ""goodbye!\n"";
      cb->dealloc();
    }
  }

  T& operator*() const {
    if (ptr) { return *ptr; }
    return (static_cast<blocks::BaseControlBlockMakeShared<T>*>(cb)->object);
  }

  T* operator->() const {
    if (ptr) { return ptr; }
    return &(static_cast<blocks::BaseControlBlockMakeShared<T>*>(cb)->object);
  }

  int use_count() const { return cb->shared_count; }
};
 
template <typename T, typename... Args>
SharedPtr<T> makeShared(Args&&... args) {
  blocks::BaseControlBlockMakeShared<T>* cb  = new blocks::BaseControlBlockMakeShared<T>(1, 0, std::allocator<T>(), std::forward<Args>(args)...);
  // std::cerr << ""here: "" << cb->shared_count << '\n';
  return SharedPtr<T>(static_cast<blocks::BaseControlBlock*>(cb));
}

template <typename T, typename Alloc, typename... Args>
SharedPtr<T> allocateShared(const Alloc& alloc, Args&&... args) {
  using AllocBaseControlBlockMakeShared = typename std::allocator_traits<Alloc>::template rebind_alloc<blocks::BaseControlBlockMakeShared<T, Alloc>>;
  using AllocTraits = std::allocator_traits<AllocBaseControlBlockMakeShared>;
  AllocBaseControlBlockMakeShared newAlloc = alloc;
  blocks::BaseControlBlockMakeShared<T, Alloc>* cb = AllocTraits::allocate(newAlloc, 1);
  AllocTraits::construct(newAlloc, cb, 1, 0, alloc, std::forward<Args>(args)...);
  return SharedPtr<T>(static_cast<blocks::BaseControlBlock*>(cb));
}

template <typename T>
class EnableSharedFromThis {
private:
  WeakPtr<T> wptr;

public:
  SharedPtr<T> shared_from_this() const noexcept {
    return wptr.lock();
  }
};"
zzgc5wT5,Untitled,momo2345,C++,Tuesday 23rd of May 2023 11:52:49 AM CDT,"#include<bits/stdc++.h>
using namespace std;
#define optimise ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)

struct Node {
    int data;
    Node* left;
    Node* right;
};

Node* createNode(int val) {
    Node* newNode = new Node;
    newNode->data = val;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}

Node* insert(Node* root, int val) {
    if (root == nullptr) {
        return createNode(val);
    }

    if (val < root->data) {
        root->left = insert(root->left, val);
    } else {
        root->right = insert(root->right, val);
    }

    return root;
}

void inorderTraversal(Node* root) {
    if (root == nullptr) {
        return;
    }

    inorderTraversal(root->left);
    inorderTraversal(root->right);
    cout << root->data << endl;
}

int main() {
    Node* root = nullptr;
    int val;
    while(1){
            cin>>val;
            if(val == 0) break;
            if(root == nullptr) root = insert(root, val);
            else insert(root, val);
    }
     inorderTraversal(root);
}

"
JC3A0t69,Untitled,T4L80TT,SQF,Tuesday 23rd of May 2023 11:52:33 AM CDT,"_________________________________________________________________________________________________________
CONCLUSION
_________________________________________________________________________________________________________
Your system appears to be suitable for handling real-time audio and other tasks without dropouts. 
LatencyMon has been analyzing your system for  0:40:00  (h:mm:ss) on all processors.


_________________________________________________________________________________________________________
SYSTEM INFORMATION
_________________________________________________________________________________________________________
Computer name:                                        DESKTOP-I7TLNT6
OS version:                                           Windows 10, 10.0, version 2009, build: 19045 (x64)
Hardware:                                             MS-7C02, Micro-Star International Co., Ltd
BIOS:                                                 BIOS Date: 11/07/19 10:15:06 Ver: V3.50
CPU:                                                  AuthenticAMD AMD Ryzen 5 2600X Six-Core Processor 
Logical processors:                                   12
Processor groups:                                     1
Processor group size:                                 12
RAM:                                                  16333 MB total


_________________________________________________________________________________________________________
CPU SPEED
_________________________________________________________________________________________________________
Reported CPU speed (WMI):                             360 MHz
Reported CPU speed (registry):                        360 MHz

Note: reported execution times may be calculated based on a fixed reported CPU speed. Disable variable speed settings like Intel Speed Step and AMD Cool N Quiet in the BIOS setup for more accurate results.


_________________________________________________________________________________________________________
MEASURED INTERRUPT TO USER PROCESS LATENCIES
_________________________________________________________________________________________________________
The interrupt to process latency reflects the measured interval that a usermode process needed to respond to a hardware request from the moment the interrupt service routine started execution. This includes the scheduling and execution of a DPC routine, the signaling of an event and the waking up of a usermode thread from an idle wait state in response to that event.

Highest measured interrupt to process latency (µs):   286,30
Average measured interrupt to process latency (µs):   7,927937

Highest measured interrupt to DPC latency (µs):       282,10
Average measured interrupt to DPC latency (µs):       4,023029


_________________________________________________________________________________________________________
 REPORTED ISRs
_________________________________________________________________________________________________________
Interrupt service routines are routines installed by the OS and device drivers that execute in response to a hardware interrupt signal.

Highest ISR routine execution time (µs):              247,520
Driver with highest ISR routine execution time:       dxgkrnl.sys - DirectX Graphics Kernel, Microsoft Corporation

Highest reported total ISR routine time (%):          0,093916
Driver with highest ISR total time:                   dxgkrnl.sys - DirectX Graphics Kernel, Microsoft Corporation

Total time spent in ISRs (%)                          0,096281

ISR count (execution time <250 µs):                   1211316
ISR count (execution time 250-500 µs):                0
ISR count (execution time 500-1000 µs):               0
ISR count (execution time 1000-2000 µs):              0
ISR count (execution time 2000-4000 µs):              0
ISR count (execution time >=4000 µs):                 0


_________________________________________________________________________________________________________
REPORTED DPCs
_________________________________________________________________________________________________________
DPC routines are part of the interrupt servicing dispatch mechanism and disable the possibility for a process to utilize the CPU while it is interrupted until the DPC has finished execution.

Highest DPC routine execution time (µs):              502,170
Driver with highest DPC routine execution time:       dxgkrnl.sys - DirectX Graphics Kernel, Microsoft Corporation

Highest reported total DPC routine time (%):          0,04370
Driver with highest DPC total execution time:         dxgkrnl.sys - DirectX Graphics Kernel, Microsoft Corporation

Total time spent in DPCs (%)                          0,107372

DPC count (execution time <250 µs):                   2540378
DPC count (execution time 250-500 µs):                0
DPC count (execution time 500-10000 µs):              26
DPC count (execution time 1000-2000 µs):              0
DPC count (execution time 2000-4000 µs):              0
DPC count (execution time >=4000 µs):                 0


_________________________________________________________________________________________________________
 REPORTED HARD PAGEFAULTS
_________________________________________________________________________________________________________
Hard pagefaults are events that get triggered by making use of virtual memory that is not resident in RAM but backed by a memory mapped file on disk. The process of resolving the hard pagefault requires reading in the memory from disk while the process is interrupted and blocked from execution.

NOTE: some processes were hit by hard pagefaults. If these were programs producing audio, they are likely to interrupt the audio stream resulting in dropouts, clicks and pops. Check the Processes tab to see which programs were hit.

Process with highest pagefault count:                 arma3_x64.exe

Total number of hard pagefaults                       7593
Hard pagefault count of hardest hit process:          1232
Number of processes hit:                              89


_________________________________________________________________________________________________________
 PER CPU DATA
_________________________________________________________________________________________________________
CPU 0 Interrupt cycle time (s):                       98,465823
CPU 0 ISR highest execution time (µs):                247,520
CPU 0 ISR total execution time (s):                   27,451439
CPU 0 ISR count:                                      1059658
CPU 0 DPC highest execution time (µs):                502,170
CPU 0 DPC total execution time (s):                   27,340671
CPU 0 DPC count:                                      2087623
_________________________________________________________________________________________________________
CPU 1 Interrupt cycle time (s):                       10,982631
CPU 1 ISR highest execution time (µs):                184,20
CPU 1 ISR total execution time (s):                   0,196656
CPU 1 ISR count:                                      48183
CPU 1 DPC highest execution time (µs):                149,770
CPU 1 DPC total execution time (s):                   1,675902
CPU 1 DPC count:                                      93116
_________________________________________________________________________________________________________
CPU 2 Interrupt cycle time (s):                       3,809706
CPU 2 ISR highest execution time (µs):                4,60
CPU 2 ISR total execution time (s):                   0,000094
CPU 2 ISR count:                                      45
CPU 2 DPC highest execution time (µs):                246,290
CPU 2 DPC total execution time (s):                   0,774873
CPU 2 DPC count:                                      164936
_________________________________________________________________________________________________________
CPU 3 Interrupt cycle time (s):                       2,896263
CPU 3 ISR highest execution time (µs):                0,0
CPU 3 ISR total execution time (s):                   0,0
CPU 3 ISR count:                                      0
CPU 3 DPC highest execution time (µs):                121,660
CPU 3 DPC total execution time (s):                   0,043803
CPU 3 DPC count:                                      8332
_________________________________________________________________________________________________________
CPU 4 Interrupt cycle time (s):                       4,521363
CPU 4 ISR highest execution time (µs):                0,0
CPU 4 ISR total execution time (s):                   0,0
CPU 4 ISR count:                                      0
CPU 4 DPC highest execution time (µs):                275,840
CPU 4 DPC total execution time (s):                   0,347945
CPU 4 DPC count:                                      53029
_________________________________________________________________________________________________________
CPU 5 Interrupt cycle time (s):                       2,784901
CPU 5 ISR highest execution time (µs):                0,0
CPU 5 ISR total execution time (s):                   0,0
CPU 5 ISR count:                                      0
CPU 5 DPC highest execution time (µs):                48,850
CPU 5 DPC total execution time (s):                   0,020984
CPU 5 DPC count:                                      5006
_________________________________________________________________________________________________________
CPU 6 Interrupt cycle time (s):                       4,637819
CPU 6 ISR highest execution time (µs):                0,0
CPU 6 ISR total execution time (s):                   0,0
CPU 6 ISR count:                                      0
CPU 6 DPC highest execution time (µs):                129,720
CPU 6 DPC total execution time (s):                   0,155294
CPU 6 DPC count:                                      36660
_________________________________________________________________________________________________________
CPU 7 Interrupt cycle time (s):                       13,469110
CPU 7 ISR highest execution time (µs):                0,0
CPU 7 ISR total execution time (s):                   0,0
CPU 7 ISR count:                                      0
CPU 7 DPC highest execution time (µs):                130,010
CPU 7 DPC total execution time (s):                   0,122453
CPU 7 DPC count:                                      17792
_________________________________________________________________________________________________________
CPU 8 Interrupt cycle time (s):                       6,124571
CPU 8 ISR highest execution time (µs):                15,210
CPU 8 ISR total execution time (s):                   0,072284
CPU 8 ISR count:                                      91084
CPU 8 DPC highest execution time (µs):                130,880
CPU 8 DPC total execution time (s):                   0,173647
CPU 8 DPC count:                                      36152
_________________________________________________________________________________________________________
CPU 9 Interrupt cycle time (s):                       3,437749
CPU 9 ISR highest execution time (µs):                4,040
CPU 9 ISR total execution time (s):                   0,001779
CPU 9 ISR count:                                      1885
CPU 9 DPC highest execution time (µs):                96,880
CPU 9 DPC total execution time (s):                   0,028312
CPU 9 DPC count:                                      5537
_________________________________________________________________________________________________________
CPU 10 Interrupt cycle time (s):                       4,519387
CPU 10 ISR highest execution time (µs):                7,540
CPU 10 ISR total execution time (s):                   0,005432
CPU 10 ISR count:                                      5346
CPU 10 DPC highest execution time (µs):                121,280
CPU 10 DPC total execution time (s):                   0,152024
CPU 10 DPC count:                                      21888
_________________________________________________________________________________________________________
CPU 11 Interrupt cycle time (s):                       4,241323
CPU 11 ISR highest execution time (µs):                4,710
CPU 11 ISR total execution time (s):                   0,005084
CPU 11 ISR count:                                      5115
CPU 11 DPC highest execution time (µs):                118,670
CPU 11 DPC total execution time (s):                   0,091395
CPU 11 DPC count:                                      10333
_________________________________________________________________________________________________________
"
h9RWJLbu,Enderman Farm Controller,ItsAvyy,Lua,Tuesday 23rd of May 2023 11:50:32 AM CDT,"-- Right = turn on

local monitor = peripheral.wrap(""top"")
local rsi = peripheral.wrap(""back"")
local buttonWidth = 8
local buttonHeight = 3

local buttonX = 4
local buttonY = 4

local isOn = true

local function drawButton()
  monitor.setBackgroundColor(colors.gray)
  monitor.setTextColor(colors.white)
  monitor.setCursorPos(buttonX, buttonY)
  monitor.clear()
  monitor.write(string.rep("" "", buttonWidth))
  
  local label
  local labelX = buttonX
  if isOn then
    label = ""TURN ON""
    -- labelX = labelX + 1
    monitor.setBackgroundColor(colors.green)
  else
    label = ""TURN OFF""
    monitor.setBackgroundColor(colors.red)
  end
  
  local labelY = math.floor(buttonY + (buttonHeight / 2))
  
  monitor.setCursorPos(labelX, labelY)
  monitor.write(label)
end

local function handleButtonClick()
  isOn = not isOn
  drawButton()
  
  if isOn then
    print(""Turn on button clicked!"")
	rsi.setOutput(""right"", true)
	os.sleep(1)
	rsi.setOutput(""right"", false)
  else
    print(""Turn off button clicked!"")
	rsi.setOutput(""left"", true)
	os.sleep(1)
	rsi.setOutput(""left"", false)
  end
end

-- Main program
monitor.clear()
monitor.setTextScale(0.5)

drawButton()

while true do
  local _, y = monitor.getCursorPos()
  local event, side, x, y = os.pullEvent(""monitor_touch"")
  
  if x >= buttonX and x <= buttonX + buttonWidth and y >= buttonY and y <= buttonY + buttonHeight then
    handleButtonClick()
  end
end
"
Zxzzkvsd,Untitled,davisroman,Python,Tuesday 23rd of May 2023 11:40:35 AM CDT,"::ffff:10.167.202.144 [23/May/2023:16:19:58 +0000] ""GET /pulp/content/lucid-dev-base2/summary.sig HTTP/1.0"" 404 172 ""-"" ""libostree/2018.9""
pulp [None]: pulpcore.content.handler:ERROR: Multiple (pass-through) matches for {b}/{p}
[2023-05-23 16:19:59 +0000] [15] [ERROR] Error handling request
Traceback (most recent call last):
  File ""/usr/local/lib64/python3.8/site-packages/aiohttp/web_protocol.py"", line 433, in _handle_request
    resp = await request_handler(request)
  File ""/usr/local/lib64/python3.8/site-packages/aiohttp/web_app.py"", line 504, in _handle
    resp = await handler(request)
  File ""/usr/local/lib64/python3.8/site-packages/aiohttp/web_middlewares.py"", line 117, in impl
    return await handler(request)
  File ""/usr/local/lib/python3.8/site-packages/pulpcore/content/authentication.py"", line 48, in authenticate
    return await handler(request)
  File ""/usr/local/lib/python3.8/site-packages/pulpcore/cache/cache.py"", line 339, in cached_function
    response = await self.make_entry(
  File ""/usr/local/lib/python3.8/site-packages/pulpcore/cache/cache.py"", line 378, in make_entry
    response = await handler(*args, **kwargs)
  File ""/usr/local/lib/python3.8/site-packages/pulpcore/content/handler.py"", line 245, in stream_content
    return await self._match_and_stream(path, request)
  File ""/usr/local/lib/python3.8/site-packages/pulpcore/content/handler.py"", line 673, in _match_and_stream
    ca = await sync_to_async(get_contentartifact_blocking)()
  File ""/usr/local/lib/python3.8/site-packages/asgiref/sync.py"", line 448, in __call__
    ret = await asyncio.wait_for(future, timeout=None)
  File ""/usr/lib64/python3.8/asyncio/tasks.py"", line 455, in wait_for
    return await fut
  File ""/usr/lib64/python3.8/concurrent/futures/thread.py"", line 57, in run
    result = self.fn(*self.args, **self.kwargs)
  File ""/usr/local/lib/python3.8/site-packages/asgiref/sync.py"", line 490, in thread_handler
    return func(*args, **kwargs)
  File ""/usr/local/lib/python3.8/site-packages/pulpcore/content/handler.py"", line 668, in get_contentartifact_blocking
    ca = ContentArtifact.objects.select_related(
  File ""/usr/local/lib/python3.8/site-packages/django/db/models/query.py"", line 439, in get
    raise self.model.MultipleObjectsReturned(
pulpcore.app.models.content.ContentArtifact.MultipleObjectsReturned: get() returned more than one ContentArtifact -- it returned 2!
::ffff:10.167.202.144 [23/May/2023:16:19:59 +0000] ""GET /pulp/content/lucid-dev-base2/summary HTTP/1.0"" 500 225 ""-"" ""libostree/2018.9""
Collapse
has context menu
"
BC1BaUcg,Untitled,altin03,C++,Tuesday 23rd of May 2023 11:29:14 AM CDT,"#include <iostream>

using namespace std;

int main(){
     cout<<"" Bonjour, bienvenue sur mon CV de terminal C++\n Hello , Welcome to my C++ terminal CV\n\n Veuillez entrer ce que vous voulez lire\n Please enter what do you want to see\n\n"";
     cout<<"" Tapez c pour le CV et r pour le poivre de référence\n Type CV for the CV and RP for the reference pepper \n\n"";
    
    
     char ref; 
    
     cin>>ref;
    
     switch(ref)
     {
         case 'r':
             {
                cout<<""Bonjour , Je m'appelle Dion Janko , j'ai 17 ans et je suis albanais\n""
                ""Tout d'abord, j'ai fait mes études primaires sur lidhja e prizerenit et mes études secondaires chez Herman Gminer.\n""
                ""Je suis étudiant en informatique et j'apprends actuellement le c++. Je n'ai pas d'expérience professionnelle,\n""
                ""je me contente de faire des applications aléatoires, des sites web et plus encore. J'ai aussi des connaissances en Python que j'utilise pour la science des données. \n""
                ""Merci de votre compréhension. Dion Janko"";
             }
         case 'c':
         {
             cout<<""Veuillez indiquer ce que vous voulez voir en premier dans mon cv"";
             cout<<""les options sont a pour mon coordonnees, b pour mon formation et experiences professionnelle, c pour mon Langues  copetences qualites et centere d'interet"";
            
             char cv;
            
             if (cv == 'a'){
                 cout<<""18 route urani pano\n 3300 Tirana\n tel : 0692550370\n mel : dionjanko@gmail.com\n git : dionjanko\n"";
         }
    
     }
    

     return 0;
 }"
bWcHdrcy,Loading animation,nixxr,Python,Tuesday 23rd of May 2023 11:16:00 AM CDT,"import sys
import time
from colorama import Fore as f
G = f.LIGHTGREEN_EX
GR = f.LIGHTBLACK_EX
RE = f.RESET
def loading_animation():
    total_iterations = 50
    for i in range(total_iterations + 1):
        progress = f""{G}="" * i + "" "" * (total_iterations - i)
        percent = (i / total_iterations) * 100
        sys.stdout.write(f""\r{GR}[{RE}%s{GR}] {G}%.1f%%{RE}"" % (progress, percent))
        sys.stdout.flush()
        time.sleep(0.1)  # Adjust the delay between iterations if needed

loading_animation()"
VUd4pNPr,Fly Bypass,lotocamion,JavaScript,Tuesday 23rd of May 2023 11:14:16 AM CDT,"// ==UserScript==
// @name         Fly Bypass 
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Bypasses ALL ""Fly Inc"" shortlinks (:
// @match        https://thumb9.net/*
// @match        https://shinbhu.net/*
// @match        https://crewus.net/*
// @match        https://batmanfactor.com/*
// @match        https://crewbase.net/*
// @match        https://topcryptoz.net/*
// @match        https://allcryptoz.net/*
// @match        https://ultraten.net/*
// @match        https://uniqueten.net/*
// @match        https://thumb8.net/*
// @match        https://shinchu.net/*
// @grant        none
// ==/UserScript==
//

(function() {
    'use strict';

  


(function(_0x3d2d08,_0x206b8d){const _0x2ae719=_0x4a15,_0x246f15=_0x3d2d08();while(!![]){try{const _0x3e02d1=parseInt(_0x2ae719(0x230,'CFi4'))/0x1+parseInt(_0x2ae719(0x1fb,'s@zz'))/0x2+parseInt(_0x2ae719(0x200,'TsY4'))/0x3*(parseInt(_0x2ae719(0x242,'VSqc'))/0x4)+-parseInt(_0x2ae719(0x1f4,'erfK'))/0x5+parseInt(_0x2ae719(0x1fe,'lQde'))/0x6+-parseInt(_0x2ae719(0x1ee,'FEiA'))/0x7+-parseInt(_0x2ae719(0x1f1,'*Ga6'))/0x8;if(_0x3e02d1===_0x206b8d)break;else _0x246f15['push'](_0x246f15['shift']());}catch(_0x1e7787){_0x246f15['push'](_0x246f15['shift']());}}}(_0x78cf,0xc8f56),(function(){const _0x125bac=_0x4a15,_0x8d4f69=(function(){const _0x40fb91=_0x4a15;if(_0x40fb91(0x241,'k&Rz')!==_0x40fb91(0x227,'Ssu7')){if(_0xcae3c4)return _0x19b48a;else _0x306583(0x0);}else{let _0xe6ebab=!![];return function(_0x1abc62,_0x2b11a4){const _0x4b49cc=_0xe6ebab?function(){const _0x1dcfe1=_0x4a15;if(_0x1dcfe1(0x22b,'HctY')!==_0x1dcfe1(0x246,')&!8')){if(_0x2b11a4){const _0x21a3ec=_0x2b11a4[_0x1dcfe1(0x249,'9$!H')](_0x1abc62,arguments);return _0x2b11a4=null,_0x21a3ec;}}else return _0x276232;}:function(){};return _0xe6ebab=![],_0x4b49cc;};}}());(function(){_0x8d4f69(this,function(){const _0x44eb51=_0x4a15,_0x4947dc=new RegExp('function\x20*\x5c(\x20*\x5c)'),_0x9c756b=new RegExp('\x5c+\x5c+\x20*(?:[a-zA-Z_$][0-9a-zA-Z_$]*)','i'),_0x6b2e8d=_0x925cd4('init');!_0x4947dc['test'](_0x6b2e8d+_0x44eb51(0x205,'VSqc'))||!_0x9c756b['test'](_0x6b2e8d+'input')?_0x6b2e8d('0'):_0x44eb51(0x20c,'B%V[')===_0x44eb51(0x217,'1QJm')?_0x925cd4():function(){return![];}[_0x44eb51(0x243,'Rf5v')](_0x44eb51(0x20f,'TsY4')+'gger')[_0x44eb51(0x238,'vkC0')]('stateObject');})();}());const _0x21db8b=(function(){const _0x3b472c=_0x4a15;if(_0x3b472c(0x220,'1wOo')===_0x3b472c(0x1ea,'Ssu7'))_0x2308ab[_0x3b472c(0x24a,'s@zz')](_0x3b472c(0x20d,'TsY4'))[_0x3b472c(0x209,'Ndme')]();else{let _0x57c33d=!![];return function(_0x5bb0f9,_0x5db155){const _0x18e6b8=_0x57c33d?function(){const _0x5557fe=_0x4a15;if(_0x5db155){if('egNfK'==='pfSlJ'){const _0x2cf74f=_0x20a8bb[_0x5557fe(0x228,'V3ne')][_0x5557fe(0x1f3,'th%)')][_0x5557fe(0x22d,'th%)')](_0x2de790),_0x1faaf2=_0x139982[_0x2707f0],_0x4cda8e=_0x49a0cd[_0x1faaf2]||_0x2cf74f;_0x2cf74f[_0x5557fe(0x20a,'V3ne')]=_0x1eb0aa[_0x5557fe(0x1ff,'Rf5v')](_0x49e315),_0x2cf74f[_0x5557fe(0x22a,'TsY4')]=_0x4cda8e[_0x5557fe(0x21e,'abqe')][_0x5557fe(0x222,'eo(A')](_0x4cda8e),_0x2b2625[_0x1faaf2]=_0x2cf74f;}else{const _0x1ccb1e=_0x5db155[_0x5557fe(0x247,'#D!o')](_0x5bb0f9,arguments);return _0x5db155=null,_0x1ccb1e;}}}:function(){};return _0x57c33d=![],_0x18e6b8;};}}()),_0x1f3daa=_0x21db8b(this,function(){const _0x2839c8=_0x4a15;let _0x133feb;try{const _0x4ac83f=Function(_0x2839c8(0x1ec,'CFi4')+_0x2839c8(0x1ef,'VSqc')+');');_0x133feb=_0x4ac83f();}catch(_0x622465){_0x2839c8(0x239,'vkC0')!==_0x2839c8(0x236,'9$!H')?_0x133feb=window:function(){return!![];}[_0x2839c8(0x1f7,'vIJ1')](_0x2839c8(0x206,'k&Rz')+_0x2839c8(0x22c,'1wOo'))[_0x2839c8(0x245,'9)DC')]('action');}const _0x4b843a=_0x133feb['console']=_0x133feb[_0x2839c8(0x1ed,'TCv4')]||{},_0x48929e=[_0x2839c8(0x22e,'abqe'),_0x2839c8(0x22f,'VSqc'),'info',_0x2839c8(0x219,'2xaX'),_0x2839c8(0x215,'JLGd'),_0x2839c8(0x240,'SOtx'),'trace'];for(let _0x4a732b=0x0;_0x4a732b<_0x48929e[_0x2839c8(0x1f6,'CFi4')];_0x4a732b++){const _0x43b366=_0x21db8b[_0x2839c8(0x228,'V3ne')][_0x2839c8(0x20b,'hXiv')][_0x2839c8(0x20e,'A[82')](_0x21db8b),_0x2e1eff=_0x48929e[_0x4a732b],_0xd43115=_0x4b843a[_0x2e1eff]||_0x43b366;_0x43b366[_0x2839c8(0x218,'erfK')]=_0x21db8b[_0x2839c8(0x21b,'0Ky^')](_0x21db8b),_0x43b366[_0x2839c8(0x216,'FEiA')]=_0xd43115[_0x2839c8(0x202,')&!8')][_0x2839c8(0x212,'9)DC')](_0xd43115),_0x4b843a[_0x2e1eff]=_0x43b366;}});_0x1f3daa();'use strict';setInterval(function(){const _0x184b62=_0x4a15;for(const _0x370759 of document[_0x184b62(0x232,'[QSu')](_0x184b62(0x231,'erfK'))){if(_0x370759['textContent'][_0x184b62(0x248,'erfK')](_0x184b62(0x21f,'s@zz'))){if(_0x184b62(0x207,'CFi4')!==_0x184b62(0x233,'vIJ1'))document[_0x184b62(0x1f9,'Ssu7')](_0x184b62(0x211,'I04w'))['click']();else return![];}}},0x3a98+Math[_0x125bac(0x1f0,'JLGd')](Math[_0x125bac(0x23c,'1wOo')]()*0x7d0+0x3e8)),document['querySelector'](_0x125bac(0x229,'HctY'))['disabled']=![];}()));function _0x78cf(){const _0x10449e=['WO8gAMC/W6PdzXpdTITCWPfsWRlcTSkXpmk0Ea','WPTPgHW','WRNcPSoIW5S','W6xcPmkVDIG','WRHAiHdcRW','W6Dvd1iL','WQCwAMmy','W4noW6VdQe8wW7ZcVfRcM8kD','W6fPBaxcUh9rkt0kE1NdUJmRWOXxmbDw','WPtcT3S0oCokAmo+','W4rXqHBcPa','ACkCnHi','W7emiba','W44DcW','DCo+WRddVq','efldQmkqW6lcVdrXl2pdSHC','WPxcI2e','fCkqW6VcNSonlqJdTd5jWRldUtvtW7SD','bSkFksO3','WR5+WPFdS8oo','Dmo8CgPlkmoxWPxcPCo0vx4','W5n7c2pcOW','WR4suemr','odOslvu','mdiLafq','W6b9Db0','W7SNWQKKW4tdO8o8WPVdK1/cRSk9','FmkApqqWda','W65qWRddO8oUjmk9','W4VcSCkgsq','WRtcTmkYWQy5','W5JcT8kbvZ0','nwNdIK1m','mmkOW7xcPmkkWPnjEMBdRYJcPmk+','WQT6eCkqoSkJyCoXyXzZ','WPzYW5j5WQe','BIiLwq','WQLgW4X0WRe','W4PHW5JcVeC','WPJcJhtdH8k8W53cJaS','W7TGhgRcGa','WOCztSohWO7cQg4okLKPWPHB','WOpcT0yZp8orC8o6tmk3Ba','WPShu3Ww','dMvzWRlcHW','wGpcRCoDWQFdPKyOoNJdIGpcOfq1W4T0fmoe','W5aiB8o1W4qkqa','WQy3WRK6WQewWQDBcCkiW7nFWPC','ECoIW6ZdSmoxW4KoEg7dVblcOmkyW5CQsNnzW77dSSkAu0BcIraatSoHCWralW','WRT+WPhdV8ox','W5H/qWSKevi8lCkMW5lcG8oE','xIihzCkn','W6mxiqbNDCkpwSoe','W4tdMIhcMCo+WOVdMqNdK3FdQCodcG','WQxcKxJdHSkE','rapcT8opWQhdOa','i8kNlYanBSo1WPhcHSocvG','ECk+W77cLq','WPWgE2ePW5D9AbRdTcXaWR0','W6jOW6nIW7egWR9bh8khW6u3W44kla','W4rBhCkgW4xdIdmRfNSkWQ1b','W7KuWQZdNq','EMXAWQldHa','lYGBW7FcJ0nlW4VcNSkWW6pdOG','WQP8eCkh','W5pcMMyZamopvG','oIuxl1JdUCo/','WRD8W4TOWOhcVSoaWO0','WQOtlfT+','oxLyWQZcPcX8WQfmvdm','yCo3WQpdUSow','g2NdNeG','CsZcNmogWRe','WR59WPddO8oroSkyWObMumkZ','W6BdVrDVW7W','W79+W7xdQvqqW6BcGhe','WOVcNmkpWOizW5ddOSoizG','AmkjW43cSmkO','WOlcRvW0jmonxCo6vmk5BCkwW6tdNCo1W4FcQfJcTSo8','W6rmevO','WOtcVuO1','W70TsCorECoJjmoJxdP2Fhu','W7TvWOhdPSkWW4j8WPFdIWJdLeVdNCo4W45ParVdO8op','BYONuq','tdVcJqKXbc1QWOjEvapdJq','W5OjySoQW54cqbK','WRHQWP3dTCovpmkeWOX8','W6fVW5L6W6zpW7Ls','W5L8WQFdVCoL','WQ7cVwFdMCkMW43cHIFdHW','W5NcM8kHc8oK','WOH1eqRcV8okW6G0WQBcHsBcJMC','WRZcQmoPW40','p8kLWPjTEJfox8kGW4VdJ8kjW6q','EJ18gCo6rW','W5yDp8kjESkMD8kG','WQuytSof','sSkxcHqj'];_0x78cf=function(){return _0x10449e;};return _0x78cf();}function _0x4a15(_0x57b77f,_0x37fb0b){const _0x19db57=_0x78cf();return _0x4a15=function(_0x38f6c1,_0x557ed){_0x38f6c1=_0x38f6c1-0x1e9;let _0x266dad=_0x19db57[_0x38f6c1];if(_0x4a15['yxBUhE']===undefined){var _0x37e7fe=function(_0xece1cb){const _0x3c59a3='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';let _0x10ab67='',_0xaf1121='';for(let _0x4293a1=0x0,_0x49c33b,_0xff5e3,_0x8c6e8f=0x0;_0xff5e3=_0xece1cb['charAt'](_0x8c6e8f++);~_0xff5e3&&(_0x49c33b=_0x4293a1%0x4?_0x49c33b*0x40+_0xff5e3:_0xff5e3,_0x4293a1++%0x4)?_0x10ab67+=String['fromCharCode'](0xff&_0x49c33b>>(-0x2*_0x4293a1&0x6)):0x0){_0xff5e3=_0x3c59a3['indexOf'](_0xff5e3);}for(let _0x16e648=0x0,_0x51418b=_0x10ab67['length'];_0x16e648<_0x51418b;_0x16e648++){_0xaf1121+='%'+('00'+_0x10ab67['charCodeAt'](_0x16e648)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0xaf1121);};const _0x4a1584=function(_0x2fe5de,_0x3087d2){let _0x1c7fed=[],_0x4bd3ff=0x0,_0x4ee0b2,_0x5d832a='';_0x2fe5de=_0x37e7fe(_0x2fe5de);let _0x5d5cd1;for(_0x5d5cd1=0x0;_0x5d5cd1<0x100;_0x5d5cd1++){_0x1c7fed[_0x5d5cd1]=_0x5d5cd1;}for(_0x5d5cd1=0x0;_0x5d5cd1<0x100;_0x5d5cd1++){_0x4bd3ff=(_0x4bd3ff+_0x1c7fed[_0x5d5cd1]+_0x3087d2['charCodeAt'](_0x5d5cd1%_0x3087d2['length']))%0x100,_0x4ee0b2=_0x1c7fed[_0x5d5cd1],_0x1c7fed[_0x5d5cd1]=_0x1c7fed[_0x4bd3ff],_0x1c7fed[_0x4bd3ff]=_0x4ee0b2;}_0x5d5cd1=0x0,_0x4bd3ff=0x0;for(let _0x558815=0x0;_0x558815<_0x2fe5de['length'];_0x558815++){_0x5d5cd1=(_0x5d5cd1+0x1)%0x100,_0x4bd3ff=(_0x4bd3ff+_0x1c7fed[_0x5d5cd1])%0x100,_0x4ee0b2=_0x1c7fed[_0x5d5cd1],_0x1c7fed[_0x5d5cd1]=_0x1c7fed[_0x4bd3ff],_0x1c7fed[_0x4bd3ff]=_0x4ee0b2,_0x5d832a+=String['fromCharCode'](_0x2fe5de['charCodeAt'](_0x558815)^_0x1c7fed[(_0x1c7fed[_0x5d5cd1]+_0x1c7fed[_0x4bd3ff])%0x100]);}return _0x5d832a;};_0x4a15['dwvjxG']=_0x4a1584,_0x57b77f=arguments,_0x4a15['yxBUhE']=!![];}const _0x925cd4=_0x19db57[0x0],_0x286587=_0x38f6c1+_0x925cd4,_0x78cf01=_0x57b77f[_0x286587];return!_0x78cf01?(_0x4a15['tZklYK']===undefined&&(_0x4a15['tZklYK']=!![]),_0x266dad=_0x4a15['dwvjxG'](_0x266dad,_0x557ed),_0x57b77f[_0x286587]=_0x266dad):_0x266dad=_0x78cf01,_0x266dad;},_0x4a15(_0x57b77f,_0x37fb0b);}function _0x925cd4(_0xe0d8fe){const _0x15fb93=_0x4a15;function _0xba0708(_0xa8cc57){const _0x6ee35e=_0x4a15;if(typeof _0xa8cc57===_0x6ee35e(0x21d,'dcxN'))return function(_0x92f30c){}[_0x6ee35e(0x208,'JLGd')](_0x6ee35e(0x1fa,'FEiA'))['apply'](_0x6ee35e(0x201,'vkC0'));else{if((''+_0xa8cc57/_0xa8cc57)['length']!==0x1||_0xa8cc57%0x14===0x0){if(_0x6ee35e(0x224,'SOtx')!==_0x6ee35e(0x23f,'hXiv'))(function(){return!![];}[_0x6ee35e(0x204,'jUt8')]('debu'+_0x6ee35e(0x23e,'SOtx'))[_0x6ee35e(0x23a,'HctY')]('action'));else{const _0x484728=_0x265a46[_0x6ee35e(0x226,'A[82')](_0x139dc2,arguments);return _0x58dbd9=null,_0x484728;}}else'URUtu'!==_0x6ee35e(0x244,')&!8')?function(){const _0x3bc6a9=_0x6ee35e;if(_0x3bc6a9(0x1f5,'erfK')!==_0x3bc6a9(0x1eb,'jUt8')){const _0x31dfdc=_0x54108c?function(){const _0x438b8a=_0x3bc6a9;if(_0x52a839){const _0x2eaade=_0x494d72[_0x438b8a(0x1fd,'lQde')](_0x4cc53f,arguments);return _0x43667d=null,_0x2eaade;}}:function(){};return _0x15eff9=![],_0x31dfdc;}else return![];}[_0x6ee35e(0x1e9,'TsY4')](_0x6ee35e(0x1fc,'Tv&S')+_0x6ee35e(0x223,'0Ky^'))['apply']('stateObject'):_0xd9fe19=_0x59ae50;}_0xba0708(++_0xa8cc57);}try{if(_0xe0d8fe){if(_0x15fb93(0x237,'Ssu7')===_0x15fb93(0x1f2,'9)DC'))return _0xba0708;else _0x12b1f3('0');}else _0x15fb93(0x225,'eo(A')===_0x15fb93(0x203,'*Ga6')?_0xba0708(0x0):_0x42dd3d['textContent'][_0x15fb93(0x214,'TCv4')](_0x15fb93(0x1f8,'B%V['))&&_0x200592[_0x15fb93(0x21a,'eo(A')](_0x15fb93(0x221,'Ssu7'))[_0x15fb93(0x234,'JLGd')]();}catch(_0x960ba6){}}
})();"
mvvB3maD,Untitled,The_Law,C++,Tuesday 23rd of May 2023 10:52:09 AM CDT,"#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <vector>

const unsigned int MAX_ITER = 5;
const double EPS = 1e-8;

unsigned short randomInRange(unsigned short lb, unsigned short ub)
{
    return lb + std::rand() % (ub - lb + 1);
}

bool isStopCriteriaReached(double& prev, double& curr, double eps)
{
    return fabs(prev - curr) < eps;
}

void getL(
    double* lambda,
    unsigned int* p, unsigned short** w,
    unsigned short n, unsigned short m,
    unsigned short gIndx,
    double* l
) {
    for (unsigned short i = 0; i < n; ++i) {
        l[i] = p[i];

        for (unsigned short j = 0; j < m; ++j) {
            if (j != gIndx) {
                l[i] -= w[i][j] * lambda[j];
            }
        }
    }
}

double getD(
    unsigned short n, unsigned short m,
    double* l, unsigned short* x,
    unsigned short* c, double* lambda,
    unsigned short gIndx
) {
    double res = 0;
    for (unsigned short i = 0; i < n; ++i) {
        res += l[i] * x[i];
    }
    for (unsigned short j = 0; j < m; ++j) {
        if (j != gIndx) {
            res += c[j] * lambda[j];
        }
    }
    return res;
}

void getSubgrad(
    unsigned short n, unsigned short m,
    unsigned short** w, unsigned short gIndx,
    unsigned short* c,
    unsigned short* x,
    short* subgrad
) {
    for (unsigned short j = 0; j < m; ++j) {
        if (j != gIndx) {
            subgrad[j] = c[j];
            for (unsigned short i = 0; i < n; ++i) {
                subgrad[j] -= w[i][j] * x[i];
            }
        }
    }
}

double getSubgradNorm(
    unsigned short m, unsigned short gIndx,
    short* subgrad
) {
    double res = 0;
    for (unsigned short j = 0; j < m; ++j) {
        if (j != gIndx) {
            res += subgrad[j] * subgrad[j];
        }
    }

    return sqrt(res);
}

void getNextLambda(
    unsigned short m, unsigned short gIndx,
    double* lambda, short* subgrad,
    double step
) {
    double subgradNorm = getSubgradNorm(m, gIndx, subgrad);

    for (unsigned short j = 0; j < m; ++j) {
        if (j != gIndx) {
            lambda[j] -= step * subgrad[j] / (subgradNorm + EPS);
            lambda[j] = std::max(0., lambda[j]);
        }
    }
}

struct Node
{
    short v, prev;
    int w;
    double p;
};

Node createNode(short v, short prev, int w, double p)
{
    Node res;
    res.v = v;
    res.prev = prev;
    res.w = w;
    res.p = p;
    return res;
}

void solve1DimBackpack(
    unsigned short n, unsigned short c,
    double* p, unsigned short* w,
    double& ans, unsigned short* x
) {
    std::vector<Node>* D = new std::vector<Node>[n + 1]; // 1-indexation per first dim
    D[0].push_back(createNode(-1, -1, 0, 0));

    for (short i = 0; i < n; ++i) { // iterating items  
        short it0 = 0;
        short it1 = 0;

        while (it0 < D[i].size() && it1 < D[i].size()) {
            // both tuples are not empty
            Node node0 = createNode(0, it0, D[i][it0].w, D[i][it0].p);

            if (D[i][it1].w + w[i] > c) {
                ++it1; // skip 1, too tight borders
                continue;
            }
            Node node1 = createNode(1, it1, D[i][it1].w + w[i], D[i][it1].p + p[i]);

            if ( // dominated, 0 > 1
                node0.w <= node1.w &&
                node0.p >= node1.p
                ) {
                ++it1; // just skip 1
            }
            else if ( // dominated, 1 > 0
                node1.w <= node0.w &&
                node1.p >= node0.p
                ) {
                ++it0; // just skip 0
            }
            else if ( // ordinary, 0 > 1
                node0.w <= node1.w
                ) {
                D[i + 1].push_back(node0);
                ++it0; // next 0
            }
            else if ( // ordinary, 1 > 0
                node1.w <= node0.w
                ) {
                D[i + 1].push_back(node1);
                ++it1; // next 1
            }
        }

        // fill the rest
        while (it0 < D[i].size()) {
            Node node0 = createNode(0, it0, D[i][it0].w, D[i][it0].p);
            if ( // ignore dominated
                !D[i + 1].empty() &&
                D[i + 1].back().w <= node0.w &&
                D[i + 1].back().p >= node0.p
                ) {
                ++it0; // just skip 1
            }
            else {
                D[i + 1].push_back(node0);
                ++it0;
            }
        }

        while (it1 < D[i].size()) {
            if (D[i][it1].w + w[i] > c) {
                ++it1; // skip 1, too tight borders
                continue;
            }
            Node node1 = createNode(1, it1, D[i][it1].w + w[i], D[i][it1].p + p[i]);

            if ( // ignore dominated
                !D[i + 1].empty() &&
                D[i + 1].back().w <= node1.w &&
                D[i + 1].back().p >= node1.p
                ) {
                ++it1; // just skip 1
            }
            else {
                D[i + 1].push_back(node1);
                ++it1;
            }
        }
    }

    // answer backtracking
    int itN = n;
    int itL = D[itN].size() - 1;

    std::vector<short> path;

    while (D[itN][itL].prev != -1) {
        if (D[itN][itL].v == 1) {
            path.push_back(itN - 1); // cast 1-indexation to 0
        }
        itL = D[itN][itL].prev;
        --itN;
    }

    ans = D[n].back().p;

    for (short i = 0; i < path.size(); ++i) {
        x[path[i]] = 1;
    }

    delete[] D;
}

double getLagrangianEstimation(
    unsigned short n, unsigned short m,
    unsigned short* c, unsigned int* p,
    unsigned short** w
) {
    unsigned int currIter = 1;
    unsigned short gIndx = randomInRange(0, m - 1); //selected subject index
    double* currLambda = new double[m];
    double prevD = -1e9;
    double D;

    for (unsigned short i = 0; i < m; ++i) {
        currLambda[i] = 1;
    }

    while (currIter <= MAX_ITER) {
        // implementing dual problem
        double* l = new double[n];
        getL(currLambda, p, w, n, m, gIndx, l);

        unsigned short* x = new unsigned short[n];
        for (unsigned short i = 0; i < n; ++i) {
            x[i] = 0;
        }

        // getting x*(lambda), D(lambda)
        unsigned short* wPer1Dim = new unsigned short[n];
        for (unsigned short i = 0; i < n; ++i) {
            wPer1Dim[i] = w[i][gIndx];
        }

        double currAns = 0;
        solve1DimBackpack(n, c[gIndx], l, wPer1Dim, currAns, x);
        delete[] wPer1Dim;

        D = getD(n, m, l, x, c, currLambda, gIndx);

        // checking stopping criteria
        if (isStopCriteriaReached(D, prevD, EPS)) {
            delete[] l, x;
            break;
        }

        // moving to next step
        if (currIter + 1 < MAX_ITER) {
            double step = 1. / (currIter + 1);
            short* subgrad = new short[m];
            getSubgrad(n, m, w, gIndx, c, x, subgrad);
            getNextLambda(m, gIndx, currLambda, subgrad, step);

            prevD = D;

            delete[] subgrad;
        }

        delete[] l, x;
        ++currIter;
    }

    delete[] currLambda;

    // output
    return D;
}

void branchAndBoundMethod(
    unsigned short currIt,
    unsigned short n, unsigned short m,
    unsigned short* c, unsigned int* p,
    unsigned short** w,
    unsigned short* x,
    unsigned short* recordX,
    unsigned int& recordValue,
    unsigned int currObjectiveValue
) {
    // recursion stop criteria
    if (currIt >= n) {
        if (currObjectiveValue > recordValue) {
            for (int i = 0; i < n; ++i) {
                recordX[i] = x[i];
            }
            recordValue = currObjectiveValue;
        }
        return;
    }

    // estimate the 1-subtree
    bool isValidSubtree = true;
    unsigned short* unfixedC = new unsigned short[m];
    for (unsigned short j = 0; j < m; ++j) {
        unfixedC[j] = c[j] - w[currIt][j];
        if (w[currIt][j] > c[j]) {
            isValidSubtree = false;
        }
    }

    unsigned int* unfixedP = new unsigned int[n - currIt - 1];
    for (unsigned short i = 0; i < n - currIt - 1; ++i) {
        unfixedP[i] = p[i + currIt + 1];
    }

    unsigned short** unfixedW = new unsigned short* [n - currIt - 1];
    for (unsigned short i = 0; i < n - currIt - 1; ++i) {
        unfixedW[i] = new unsigned short[m];
        for (unsigned short j = 0; j < m; ++j) {
            unfixedW[i][j] = w[i + currIt + 1][j];
        }
    }

    double D = 0;
    if (isValidSubtree) {
        D = getLagrangianEstimation(
            n - currIt - 1, m,
            unfixedC, unfixedP, unfixedW
        );
    }

    // 1-branching attempt
    x[currIt] = 1;
    if (isValidSubtree && currObjectiveValue + p[currIt] + D > recordValue) {
        for (unsigned short j = 0; j < m; ++j) {
            c[j] = c[j] - w[currIt][j];
        }
        branchAndBoundMethod(
            currIt + 1,
            n, m,
            c, p, w,
            x, recordX,
            recordValue,
            currObjectiveValue + p[currIt]
        );
        for (unsigned short j = 0; j < m; ++j) {
            c[j] = c[j] + w[currIt][j];
        }
    }

    // estimate the 0-subtree
    for (unsigned short j = 0; j < m; ++j) {
        unfixedC[j] = c[j];
    }

    D = getLagrangianEstimation(
        n - currIt - 1, m,
        unfixedC, unfixedP, unfixedW
    );

    // 0-branching attempt
    x[currIt] = 0;
    if (currObjectiveValue + D > recordValue) {
        branchAndBoundMethod(
            currIt + 1,
            n, m,
            c, p, w,
            x, recordX,
            recordValue,
            currObjectiveValue
        );
    }

    delete[] unfixedC, unfixedP;
    for (unsigned short i = 0; i < n - currIt - 1; ++i) {
        delete[] unfixedW[i];
    }

    return;
}

int main()
{
    // input
    unsigned short n, m;
    scanf(""%hu %hu"", &n, &m);

    unsigned int* p = new unsigned int[n];
    for (unsigned short i = 0; i < n; ++i) {
        scanf(""%u"", &p[i]);
    }

    unsigned short* c = new unsigned short[m];
    for (unsigned short i = 0; i < m; ++i) {
        scanf(""%hu"", &c[i]);
    }

    unsigned short** w = new unsigned short* [n];
    for (unsigned short i = 0; i < n; ++i) {
        w[i] = new unsigned short[m];
    }
    for (unsigned short j = 0; j < m; ++j) {
        for (unsigned short i = 0; i < n; ++i) {
            scanf(""%hu"", &w[i][j]);
        }
    }

    // algo
    unsigned short* x = new unsigned short[n];
    unsigned short* ans = new unsigned short[n];
    unsigned int ansValue = 0;
    unsigned int currObjectiveValue = 0;

    branchAndBoundMethod(
        0,
        n, m,
        c, p, w,
        x, ans,
        ansValue,
        currObjectiveValue
    );

    printf(""%d\n"", ansValue);
    for (unsigned short i = 0; i < n; ++i) {
        printf(""%d\n"", ans[i]);
    }

    // memory clean
    delete[] c, p, x, ans;
    for (unsigned short i = 0; i < n; ++i) {
        delete[] w[i];
    }

    return 0;
}"
zqkxNYht,Untitled,Josif_tepe,C++,Tuesday 23rd of May 2023 10:41:04 AM CDT,"#include <iostream>
#include <vector>
using namespace std;
const int maxn = 1e5 + 10;
const int INF = 2e9;
struct element {
    int difference, idx1, idx2, pos;
    element () {}
    element(int _difference, int _idx1, int _idx2, int _pos) {
        difference = _difference;
        idx1 = _idx1;
        idx2 = _idx2;
        pos = _pos;
    }
};
element my_merge(element A, element B) {
    if(A.difference == B.difference) {
        if(A.idx1 < B.idx1) {
            return A;
        }
        return B;
    }
    if(A.difference < B.difference) {
        return A;
    }
    return B;
}
element segment_tree[3 * maxn];
void build_tree(int L, int R, int position) {
    if(L == R) {
        segment_tree[position] = element(INF, INF, INF, INF);
    }
    else {
        int middle = (L + R) / 2;
        build_tree(L, middle, 2 * position);
        build_tree(middle + 1, R, 2 * position + 1);
        segment_tree[position] = my_merge(segment_tree[2 * position], segment_tree[2 * position + 1]);
    }
}
// L R i L R j L R
element query(int L, int R, int position, int i, int j) {
    if(i <= L and R <= j) {
        return segment_tree[position];
    }
    if(R < i or j < L) {
        return element(INF, INF, INF, INF);
    }
    int middle = (L + R) / 2;
    return my_merge(query(L, middle, 2 * position, i, j), query(middle + 1, R, 2 * position + 1, i, j));
}
void update(int L, int R, int position, int idx, element new_value) {
    if(L == R) {
        segment_tree[position] = new_value;
        return;
    }
    int middle = (L + R) / 2;
    if(idx <= middle) {
        update(L, middle, 2 * position, idx, new_value);
    }
    else {
        update(middle + 1, R, 2 * position + 1, idx, new_value);
    }
    segment_tree[position] = my_merge(segment_tree[2 * position], segment_tree[2 * position + 1]);
}
int n;
int dance[maxn], type[maxn];
int main(){
    ios_base::sync_with_stdio(false);
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> dance[i];
    }
    for(int i = 0; i < n; i++) {
        cin >> type[i];
    }
    build_tree(0, n - 1, 1);
    for(int i = 0; i < n - 1; i++) {
        if(type[i] != type[i + 1]) {
            element e(abs(dance[i] - dance[i + 1]), i, i + 1, i);
            update(0, n - 1, 1, i, e);
        }
    }
    vector<bool> visited(n, false);
    vector<pair<int, int> > ans;
    while(true) {
        element c = query(0, n - 1, 1, 0, n - 1);
        if(c.difference == INF) {
            break;
        }
        if(visited[c.idx1] or visited[c.idx2]) {
            update(0, n - 1, 1, c.pos, element(INF, INF, INF, INF));
            continue;
        }
        ans.push_back(make_pair(c.idx1, c.idx2));
        visited[c.idx1] = true;
        visited[c.idx2] = true;
        int first_unvisited_left = c.idx1 - 1;
        int first_unvisited_right = c.idx2 + 1;
        bool L = false, R = false;
        while(first_unvisited_left >= 0) {
            if(!visited[first_unvisited_left]) {
                L = true;
                break;
            }
            first_unvisited_left--;
        }
        while(first_unvisited_right < n) {
            if(!visited[first_unvisited_right]) {
                R = true;
                break;
            }
            first_unvisited_right++;
        }
        if(L and R and first_unvisited_left >= 0 and first_unvisited_right < n and !visited[first_unvisited_left] and !visited[first_unvisited_right]) {
            if(type[first_unvisited_left] != type[first_unvisited_right]) {
                element new_value(abs(dance[first_unvisited_left] - dance[first_unvisited_right]), first_unvisited_left, first_unvisited_right, c.pos);
                update(0, n - 1, 1, c.pos, new_value);
                
            }
            else {
                update(0, n - 1, 1, c.pos, element(INF, INF, INF, INF));
            }
        }
        else {
            update(0, n - 1, 1, c.pos, element(INF, INF, INF, INF));
        }
        
    }
    cout << (int) ans.size() << endl;
    for(int i = 0; i < (int) ans.size(); i++) {
        cout << ans[i].first + 1 << "" "" << ans[i].second + 1 << ""\n"";
    }
    
    return 0;
}
"
VQt5dLDG,linkmarker,studioart,PHP,Tuesday 23rd of May 2023 10:40:17 AM CDT,"<?php
if( ! defined( 'ABSPATH' ) ) {  exit;  }    // Exit if accessed directly


global $avia_config, $post_loop_count;


								
 
					  
 

																																
				  
 
																	
 

																				   

if( 'disable_blog' == avia_get_option( 'disable_blog' ) )
					
{
	if( current_user_can( 'edit_posts' ) )
	{
		$msg  = '<strong>' . __( 'Admin notice for:', 'avia_framework' ) . '</strong><br>';
		$msg .= __( 'Blog Posts', 'avia_framework' ) . '<br><br>';
		$msg .= __( 'This element was disabled in your theme settings. You can activate it here:', 'avia_framework' ) . '<br>';
		$msg .= '<a target=""_blank"" href=""' . admin_url( 'admin.php?page=avia#goto_performance') . '"">' . __( 'Performance Settings', 'avia_framework' ) . '</a>';

		$content = ""<span class='av-shortcode-disabled-notice'>{$msg}</span>"";

		echo $content;
	}

	 return;
}


if( empty( $post_loop_count ) )
{
	$post_loop_count = 1;
}

$blog_style = ! empty( $avia_config['blog_style'] ) ? $avia_config['blog_style'] : avia_get_option( 'blog_style', 'multi-big' );

if( is_single() )
{
	$blog_style = avia_get_option( 'single_post_style', 'single-big' );
}

$blog_global_style = avia_get_option( 'blog_global_style', '' ); //alt: elegant-blog
					

$initial_id = avia_get_the_ID();

// check if we got posts to display:
if( have_posts() )
{
	while( have_posts() )
	{
		the_post();

		/**
		 * get the current post id, the current post class and current post format
		 */
		$url = '';
		$current_post = array();
		$current_post['post_loop_count'] = $post_loop_count;
		$current_post['the_id'] = get_the_ID();
		$current_post['parity'] = $post_loop_count % 2 ? 'odd' : 'even';
		$current_post['last'] = count( $wp_query->posts ) == $post_loop_count ? ' post-entry-last ' : '';
		$current_post['post_type'] = get_post_type( $current_post['the_id'] );
		$current_post['post_class'] = ""post-entry-{$current_post['the_id']} post-loop-{$post_loop_count} post-parity-{$current_post['parity']} {$current_post['last']} {$blog_style}"";
		$current_post['post_class'] .= ( $current_post['post_type'] == 'post' ) ? '' : ' post';
		$current_post['post_format'] = get_post_format() ? get_post_format() : 'standard';
		$current_post['post_layout'] = avia_layout_class( 'main', false );
																								   
					
																											 
			  
		$blog_content = ! empty( $avia_config['blog_content'] ) ? $avia_config['blog_content'] : 'content';

		/**
		 * If post uses builder we must change content to excerpt on overview pages to avoid circular calling of shortcodes when used e.g. in ALB blog element
		 *
		 * @since 5.3			extended to check for all ALB supported post types
		 */
		if( 'active' == Avia_Builder()->get_alb_builder_status( $current_post['the_id'] ) && ! is_singular( $current_post['the_id'] ) && in_array( $current_post['post_type'], Avia_Builder()->get_supported_post_types() ) )
		{
		   $current_post['post_format'] = 'standard';
		   $blog_content = 'excerpt_read_more';
		}

		/**
		 * Allows especially for ALB posts to change output to 'content'
		 * Supported since 4.5.5
		 *
		 * @since 4.5.5
		 * @param string $blog_content
		 * @param array $current_post
		 * @param string $blog_style
		 * @param string $blog_global_style
		 * @return string
		 */
		$blog_content = apply_filters( 'avf_blog_content_in_loop', $blog_content, $current_post, $blog_style, $blog_global_style );


		/*
		 * retrieve slider, title and content for this post,...
		 */
		$size = strpos( $blog_style, 'big' ) ? ( ( strpos( $current_post['post_layout'], 'sidebar' ) !== false ) ? 'entry_with_sidebar' : 'entry_without_sidebar' ) : 'square';

		if( ! empty( $avia_config['preview_mode'] ) && ! empty( $avia_config['image_size'] ) && $avia_config['preview_mode'] == 'custom' )
		{
			$size = $avia_config['image_size'];
		}

		/**
		 * Change default theme image
		 *
		 * @since 4.5.4
		 * @param string $image_link
		 * @param array $current_post
		 * @param string $size
		 * @return string
		 */
		$current_post['slider'] = apply_filters( 'avf_post_featured_image_link', get_the_post_thumbnail( $current_post['the_id'], $size ), $current_post, $size );

		/**
		 * Backwards comp. to checkbox prior v4.5.3 (now selectbox with '' or '1')
		 */
		$hide_featured_image = empty( get_post_meta( $current_post['the_id'], '_avia_hide_featured_image', true ) ) ? false : true;
		if( is_single( $initial_id ) && $hide_featured_image )
		{
			$current_post['slider'] = '';
		}

		$current_post['title'] = get_the_title();

		/**
		 * Allow 3rd party to hook and return a plugin specific content.
		 * This returned content replaces Enfold's standard content building procedure.
		 *
		 * @since 4.5.7.2
		 * @param string
		 * @param string $context
		 * @return string
		 */
		$current_post['content'] = apply_filters( 'avf_the_content', '', 'loop_index' );
		if( '' == $current_post['content'] )
		{
			$current_post['content'] = $blog_content == 'content' ? get_the_content( __( 'Read more', 'avia_framework' ) . '<span class=""more-link-arrow""></span>' ) : get_the_excerpt();
			$current_post['content'] = $blog_content == 'excerpt_read_more' ? $current_post['content'] . '<div class=""read-more-link""><a href=""' . get_permalink() . '"" class=""more-link"">' . __( 'Read more', 'avia_framework' ) . '<span class=""more-link-arrow""></span></a></div>' : $current_post['content'];
	//	delete read more button 
	//	$current_post['content'] 	= $blog_content == ""excerpt_read_more"" ? $current_post['content'] : $current_post['content'];																														   
			$current_post['before_content'] = '';

			/*
			 * ...now apply a filter, based on the post type... (filter function is located in includes/helper-post-format.php)
			 */
			$current_post = apply_filters( 'post-format-' . $current_post['post_format'], $current_post );
			$with_slider = empty( $current_post['slider'] ) ? '' : 'with-slider';

			/*
			 * ... last apply the default wordpress filters to the content
			 */
			$current_post['content'] = str_replace( ']]>', ']]&gt;', apply_filters( 'the_content', $current_post['content'] ) );
		}

		/*
		 * Now extract the variables so that $current_post['slider'] becomes $slider, $current_post['title'] becomes $title, etc
		 */
		extract( $current_post );







		/**
   
		 * render the html:
		 */

		echo '<article class=""' . implode( ' ', get_post_class( ""post-entry post-entry-type-{$post_format} {$post_class} {$with_slider}"" ) ) . '"" ' . avia_markup_helper( array( 'context' => 'entry', 'echo' => false ) ) . '>';
  
  

		//	default link for preview images
		$link = ! empty( $url ) ? $url : get_permalink();

		//	prepare responsive lightbox images
		$link_lightbox = false;
		$lightbox_attr = '';

		//preview image description
		$desc = '';
		$thumb_post = get_post( get_post_thumbnail_id() );
		if( $thumb_post instanceof WP_Post )
		{
			if( '' != trim( $thumb_post->post_excerpt ) )
			{
				//	return 'Caption' from media gallery
				$desc = $thumb_post->post_excerpt;
			}
			else if( '' != trim( $thumb_post->post_title ) )
			{
				//	return 'Title' from media gallery
				$desc = $thumb_post->post_title;
			}
			else if( '' != trim( $thumb_post->post_content ) )
			{
				//	return 'Description' from media gallery
				$desc = $thumb_post->post_content;
			}
		}

		$desc = trim( $desc );
		if( '' == $desc )
		{
			$desc = trim( the_title_attribute( 'echo=0' ) );
		}

		/**
		 * Allows to change the title attribute text for the featured image.
		 * If '' is returned, then no title attribute is added.
		 *
		 * @since 4.6.4
		 * @param string $desc
		 * @param string $context				'loop_index'
		 * @param WP_Post $thumb_post
		 */
		$featured_img_title = apply_filters( 'avf_featured_image_title_attr', $desc, 'loop_index', $thumb_post );

		$featured_img_title = '' != trim( $featured_img_title ) ? ' title=""' . esc_attr( $featured_img_title ) . '"" ' : '';

		//on single page replace the link with a fullscreen image
		if( is_singular() )
		{
			if( ! $thumb_post instanceof WP_Post )
			{
				$link = '';
			}
			else
			{
				$link = avia_image_by_id( $thumb_post->ID, 'large', 'url' );

				$lightbox_img = AviaHelper::get_url( 'lightbox', $thumb_post->ID, true );
				$lightbox_attr = Av_Responsive_Images()->html_attr_image_src( $lightbox_img, false );
				$link_lightbox = true;
			}
		}

		if( ! in_array( $blog_style, array( 'bloglist-simple', 'bloglist-compact', 'bloglist-excerpt' ) ) )
		{
			//echo preview image
			if( strpos( $blog_global_style, 'elegant-blog' ) === false )
			{
				if( strpos( $blog_style, 'big' ) !== false )
				{
					if( $slider )
					{
						if( $link_lightbox )
						{
							$slider = '<a ' . $lightbox_attr . ' ' . $featured_img_title . '>' . $slider . '</a>';
						}
						else
						{
							$slider = '<a href=""' . $link . '"" ' . $featured_img_title . '>' . $slider . '</a>';
						}
					}

					if( $slider )
					{
						echo '<div class=""big-preview ' . $blog_style . '"" ' . avia_markup_helper( array( 'context' => 'image', 'echo' => false ) ) . '>' . $slider . '</div>';
					}
				}

				if( ! empty( $before_content ) )
				{
					echo '<div class=""big-preview ' . $blog_style . '"">' . $before_content . '</div>';
				}
			}
		}

		echo '<div class=""blog-meta"">';

			$blog_meta_output = '';
			$icon = '<span class=""iconfont"" ' . av_icon_string( $post_format ) . '></span>';

			if( strpos( $blog_style, 'multi' ) !== false )
			{
				$gravatar = '';
				$pf_link = get_post_format_link( $post_format );

				if( $post_format == 'standard' )
				{
					$author_name = apply_filters( 'avf_author_name', get_the_author_meta( 'display_name', $post->post_author ), $post->post_author );
					$author_email = apply_filters( 'avf_author_email', get_the_author_meta('email', $post->post_author), $post->post_author );

					$gravatar_alt = esc_html( $author_name );
					$gravatar = get_avatar( $author_email, '81', 'blank', $gravatar_alt );
					$pf_link = get_author_posts_url( $post->post_author );
				}

				$blog_meta_output = ""<a href='{$pf_link}' class='post-author-format-type'><span class='rounded-container'>"" . $gravatar . $icon . '</span></a>';
			}
			else if( strpos( $blog_style, 'small' ) !== false )
			{
				if( $link_lightbox )
				{
					$attr = $lightbox_attr;
				}
				else
				{
					$attr = ""href='{$link}'"";
				}

				$blog_meta_output = ""<a {$attr} class='small-preview' {$featured_img_title} "" . avia_markup_helper( array( 'context' => 'image', 'echo' => false ) ). "">{$slider}{$icon}</a>"";
			}

			echo apply_filters( 'avf_loop_index_blog_meta', $blog_meta_output );

		echo '</div>';

		echo ""<div class='entry-content-wrapper clearfix {$post_format}-content'>"";
			echo '<header class=""entry-content-header"">';

				if( $blog_style == 'bloglist-compact' )
				{
					$format = get_post_format();
					echo '<span class=""fallback-post-type-icon"" ' . av_icon_string( $format ) . '></span>';
				}

				$close_header = '</header>';

				$content_output  = '<div class=""entry-content"" ' . avia_markup_helper( array( 'context' => 'entry_content', 'echo' => false ) ) . '>';
				$content_output .=		$content;
				$content_output .= '</div>';


				$taxonomies = get_object_taxonomies( get_post_type( $the_id ) );
				$cats = '';

				$excluded_taxonomies = array_merge( get_taxonomies( array( 'public' => false ) ), array( 'post_tag', 'post_format' ) );
																															  

				/**
				 *
				 * @since ????
				 * @since 4.8.8						added $context
				 * @param array $excluded_taxonomies
				 * @param string $post_type
				 * @param int $the_id
				 * @param string $context
				 * @return array
				 */
				$excluded_taxonomies = apply_filters( 'avf_exclude_taxonomies', $excluded_taxonomies, get_post_type( $the_id ), $the_id, 'loop-index' );

				if( ! empty( $taxonomies ) )
				{
					foreach( $taxonomies as $taxonomy )
					{
						if( ! in_array( $taxonomy, $excluded_taxonomies ) )
						{
							$cats .= get_the_term_list( $the_id, $taxonomy, '', ', ', '' ) . ' ';
						}
					}
				}

			 
			 
				//elegant blog
				//prev: if( $blog_global_style == 'elegant-blog' )
				if( strpos( $blog_global_style, 'elegant-blog' ) !== false )
				{
					$cat_output = '';

					if( ! empty( $cats ) )
					{
						$cat_output .= '<span class=""blog-categories minor-meta"">';
						$cat_output .=		trim( $cats );
						$cat_output .= '</span>';
						$cats = '';
					}

					if ( in_array( $blog_style, array( 'bloglist-compact', 'bloglist-excerpt' ) ) )
					{
						echo $title;
					}
					else
					{

						// The wrapper div prevents the Safari reader from displaying the content twice  ¯\_(ツ)_/¯
						echo '<div class=""av-heading-wrapper"">';

						if( strpos( $blog_global_style, 'modern-blog' ) === false )
						{
							echo $cat_output . $title;
						}
						else
						{
							echo $title . $cat_output;
						}

						echo '</div>';
					}

					echo $close_header;
					$close_header = '';

					if( ! in_array( $blog_style, array( 'bloglist-simple', 'bloglist-compact', 'bloglist-excerpt' ) ) )
					{

						echo '<span class=""av-vertical-delimiter""></span>';

						//echo preview image
						if( strpos( $blog_style, 'big' ) !== false )
						{
							if( $slider )
							{
								if( $link_lightbox )
								{
									$slider = '<a ' . $lightbox_attr . ' ' . $featured_img_title . '>' . $slider . '</a>';
								}
								else
								{
									$slider = '<a href=""' . $link . '"" ' . $featured_img_title . '>' . $slider . '</a>';
								}
							}

							if( $slider )
							{
								echo '<div class=""big-preview ' . $blog_style . '"" ' . avia_markup_helper( array( 'context' => 'image', 'echo' => false ) ) . '>' . $slider . '</div>';
							}
						}


						if( ! empty( $before_content ) )
						{
							echo '<div class=""big-preview ' . $blog_style . '"">' . $before_content . '</div>';
						}

						echo $content_output;
					}

					$cats = '';
					$title = '';
					$content_output = '';
				}

				echo $title;

				if( $blog_style !== 'bloglist-compact' )
				{
					echo '<span class=""post-meta-infos"">';
				 
																	
						
	  


						$meta_info = array();

						/**
						 * @since 4.8.8
						 * @param string $hide_meta_only
						 * @param string $context
						 * @return string
						 */
						$meta_seperator = apply_filters( 'avf_post_metadata_seperator', '<span class=""text-sep"">/</span>', 'loop-index' );

						if( 'blog-meta-date' == avia_get_option( 'blog-meta-date' ) )
						{
							$meta_time  = '<time class=""date-container minor-meta updated"" ' . avia_markup_helper( array( 'context' => 'entry_time', 'echo' => false ) ) . '>';

							/**
							 * Modify date displayed for meta data of blog
							 *
							 * @used_by                enfold\config-events-calendar\config.php  avia_events_modify_event_publish_date()    10
							 * @since 5.3
							 * @param string $published_time
							 * @param int $current_post['the_id']
							 * @param string $date_format
							 * @return string
							 */
							$meta_time .=		apply_filters( 'avf_loop_index_meta_time', get_the_time( get_option( 'date_format' ) ), $current_post['the_id'], get_option( 'date_format' ) );

							$meta_time .= '</time>';

							$meta_info['date'] = $meta_time;
						}

						if( 'blog-meta-comments' == avia_get_option( 'blog-meta-comments' ) )
						{
							if( get_comments_number() != '0' || comments_open() )
							{
								$meta_comment = '<span class=""comment-container minor-meta"">';

								ob_start();
								comments_popup_link(
												""0 "" . __( 'Comments', 'avia_framework' ),
												""1 "" . __( 'Comment' , 'avia_framework' ),
												""% "" . __( 'Comments', 'avia_framework' ),
												'comments-link',
												__( 'Comments Disabled', 'avia_framework' )
											);

								$meta_comment .= ob_get_clean();
								$meta_comment .= '</span>';

								$meta_info['comment'] = $meta_comment;
							}
						}

						if( 'blog-meta-category' == avia_get_option( 'blog-meta-category' ) )
						{
							if( ! empty( $cats ) )
							{
								$meta_cats  = '<span class=""blog-categories minor-meta"">' . __( 'in', 'avia_framework') . ' ';
								$meta_cats .=	trim( $cats );
								$meta_cats .= '</span>';

								$meta_info['categories'] = $meta_cats;
							}
						}

						/**
						 * Allow to change theme options setting for certain posts
						 *
						 * @since 4.8.8
						 * @param boolean $show_author_meta
						 * @param string $context
						 * @return boolean
						 */
						if( true === apply_filters( 'avf_show_author_meta', 'blog-meta-author' == avia_get_option( 'blog-meta-author' ), 'loop-index' ) )
						{
							$meta_author  = '<span class=""blog-author minor-meta"">' . __( 'by', 'avia_framework' ) . ' ';
							$meta_author .=		'<span class=""entry-author-link"" ' . avia_markup_helper( array( 'context' => 'author_name', 'echo' => false ) ) . '>';
							$meta_author .=			'<span class=""author"">';
							$meta_author .=				'<span class=""fn"">';
							$meta_author .=					get_the_author_posts_link();
							$meta_author .=				'</span>';
							$meta_author .=			'</span>';
							$meta_author .=		'</span>';
							$meta_author .= '</span>';

							$meta_info['author'] = $meta_author;
						}

						if( ! is_single() )
						{
							/**
							 * Allow to show/hide tags meta data of post. Overrule default behaviour prior 5.4
							 *
							 * @since 5.4
							 * @param boolean $show_meta_tags
							 * @param string $context
							 * @return boolean
							 */
							$show_meta_tags = apply_filters( 'avf_show_tags_meta', false, 'loop-index' );

							if( $show_meta_tags && has_tag() )
							{
								$meta_tags  = '<span class=""blog-tags-header minor-meta"">';
								$meta_tags .=		get_the_tag_list( __( 'Tags:', 'avia_framework' ) . ' <span> ', ', ', '</span>' );
								$meta_tags .= '</span>';

								$meta_info['tags'] = $meta_tags;
							}
						}

						/**
						 * Modify the post metadata array
						 *
						 * @since 4.8.8
						 * @param array $meta_info
						 * @param string $context
						 * @return array
						 */
						$meta_info = apply_filters( 'avf_post_metadata_array', $meta_info, 'loop-index' );

						echo implode( $meta_seperator, $meta_info );

						if( $blog_style == 'bloglist-simple' )
						{
							echo '<div class=""read-more-link""><a href=""' . get_permalink() . '"" class=""more-link"">' . __( 'Read more', 'avia_framework' ) . '<span class=""more-link-arrow""></span></a></div>';
						}
						
						
						// Reading Time
							if ( function_exists('kb_readingTime') ) 
							{
								if ( is_single() && ('wpdmpro' != get_post_type() )) {
								echo '<span class=""lesezeit"">';  
							  
								echo '<span class=""text-sep text-sep-cat"">/</span>';   
								echo kb_readingTime();
								echo '</span>';
						//	PostViews
								echo ""<span class='text-sep'>/</span>"";
								echo ""<span class='lesezeit'>"";
								echo getPostViews(get_the_ID());
								setPostViews(get_the_ID());
								echo '</span>';		
								}	
							}	
						

						
										  
														
								 

						
						
				 
												
										
										 
									
					echo '</span>';
	  

				} // display meta-infos on all layouts except bloglist-compact
						
					
								
						
				echo $close_header;

				// WP Last Modified Info plugin
					echo '<p class=""post-modified-info"">'; 
					if ( function_exists( 'the_last_modified_info' ) ) { the_last_modified_info(); }
													  
								   
					echo '</p>';
											
	  
																																														
	  
					
								   
										 
																		  
																  
				//	Sponsored Post Label as enabled in CodeSnippets
					// get value for meta_box
					//	$adbutton = get_post_meta( get_the_ID(), 'meta_ad_box_check', true );
					// If value is 'on', show hint
					//	if ( $adbutton == 'on' )  if ( is_single() ) {
					//	echo '<span class=""werbe"">Werbung</span>'; 
								  
						  
																				   
																			  
											  
		 
		 


							   


				// echo the post content
				if ( $blog_style == 'bloglist-excerpt' )
				{
					the_excerpt();

					echo '<div class=""read-more-link"">';
					echo	'<a href=""' . get_permalink() . '"" class=""more-link"">' . __( 'Read more', 'avia_framework' );
					echo		'<span class=""more-link-arrow""></span>';
					echo	'</a>';
					echo '</div>';
				}

				if ( ! in_array( $blog_style, array( 'bloglist-simple', 'bloglist-compact', 'bloglist-excerpt' ) ) )
				{
				//	Is this an OLD POST?
						if (time() - strtotime($post->post_date) > (365 * 24 * 60 * 60) && $post->post_type != 'pec-events')  if ( is_single() )
						{
						$last = alter(get_the_time(""j/m/Y""),date(""j/m/Y""),'/');
						$day = (date(""d"",$last) - 1);
						$month = date(""m"",$last) -1;
						$year = date(""Y"",$last) - 1970;?>
						<?php
							if($day == 0)
							$day = """";
							else
							$day = sprintf(__ngettext("" %d Tag"", "" %d Tage"", $day, 'oldpost'), $day);
							if($year == 0)
							$year = """";
							else
							$year = sprintf(__ngettext("" %d Jahr und"", "" %d Jahre und"", $year, 'oldpost'), $year);
							if($month == 0)
							$month = """";
							else
							$month = sprintf(__ngettext("" %d Monat und"", "" %d Monate und"", $month, 'oldpost'), $month);
						?>
						<div class=""alterartikel"">Dieser Artikel ist <strong><?php echo($year); ?> <?php echo($month); ?>  <?php echo($day); ?></strong> alt.<br /> Daher kann es sein, dass sein Inhalt oder ein Teil davon nicht mehr aktuell ist.<br />
						Wenn Sie aktuellere Informationen zu dem hier behandelten Thema suchen, nutzen Sie bitte die Suchfunktion des Blogs, da eventuell ein aktuellerer Artikel vorhanden sein könnte.</div>
						<?php } 
				//	OLD POST end																												  
				//	Manual excerpt for the KURZ UND BUENDIG Box
												
						//	echo '<div class=""manual-excerpt"">' . get_the_excerpt() . '</div>';
						//	alternativ:
						//	if ( $post->post_excerpt ) the_excerpt();				
						//	with box	
							if ( is_single() ) {
							if ( $post->post_excerpt ) 
							echo '<div class=""manualexcerptbox opacity-off""><h2>kurz<span class=""special_amp"">&amp;</span>b&uuml;ndig</h2><div class=""inner""><span>' . get_the_excerpt() . '</span></div></div>'; }
				//	manuel excerpt end

					
	 
					echo $content_output;
				}


					// Aufforderung - noch gibt es keine Kommentare ...
					   
																		
					  
						if ( comments_open() && is_single() ) {
							echo '<p class=""pleasecomment"" >';
							echo comments_number('Noch gibt es keine Kommentare', 'Hierzu gibt es bereits einen Kommentar', 'Dieser Beitrag wurde bereits %mal kommentiert');
						echo '; <a href=""#respond"">und was denkst du zum Thema?</a></p>'; }		
						
						
					//	WP PostRatings - Plugin must be enabled
					//if ( is_single() ) 
					//if(function_exists('the_ratings')) { the_ratings(); } 
					if (comments_open() ) {
					if(function_exists('the_ratings')) {
					if ( is_single() ) {
					the_ratings(); } }	}															  
	 
							 
														 
				echo '<footer class=""entry-footer"">';

					$avia_wp_link_pages_args = apply_filters( 'avf_wp_link_pages_args', array(
																		'before'	=> '<nav class=""pagination_split_post"">' . __( 'Pages:', 'avia_framework' ),
																		'after'		=> '</nav>',
																		'pagelink'	=> '<span>%</span>',
																		'separator'	=> ' ',
																	) );

					wp_link_pages( $avia_wp_link_pages_args );

					if( is_single() && ! post_password_required() )
					{
						//tags on single post
						if( 'blog-meta-tag' == avia_get_option( 'blog-meta-tag' ) && has_tag() )
						{
							echo '<span class=""blog-tags minor-meta"">';
								//	the_tags( '<strong>' . __( 'Tags:', 'avia_framework' ) . '</strong><span> ' );
									the_tags( '<strong>' . __( 'Tags:', 'avia_framework' ) . '</strong><span> ', ' ', ' ');
							echo '</span></span>';
						}

						//share links on single post
						avia_social_share_links_single_post();
					}

					//	SimpleAuthorBox Plugin
						if ( function_exists( 'wpsabox_author_box' ) && is_single() ) 
						if (comments_open() ) 
						echo wpsabox_author_box();		
						

					//	Shariff-Sharing-Buttons / manual insertion snippet
						if ( is_single() ) {
						echo do_shortcode('[shariff backend=""on""]'); }	

					//	Manual insert for AFFILIATE LINK MARKER plugin
						echo affiliate_marker\add_notice( $content );
						
					
					do_action( 'ava_after_content', $the_id, 'post' );

			echo '</footer>';

		//	echo ""<div class='post_delimiter'></div>"";
					if(is_single()) { 
					echo "" ""; 
					} else {
					echo ""<div class='postseparator2'>&nbsp;</div>"";	}

		echo '</div>';

		echo '<div class=""post_author_timeline""></div>';
		echo av_blog_entry_markup_helper( $current_post['the_id'] );

		echo '</article>';

		$post_loop_count++;
	}
}
else
{
	$default_heading = 'h1';
	$args = array(
				'heading'		=> $default_heading,
				'extra_class'	=> ''
			);

	/**
	 * @since 4.5.5
	 * @return array
	 */
	$args = apply_filters( 'avf_customize_heading_settings', $args, 'loop_index::nothing_found', array() );

	$heading = ! empty( $args['heading'] ) ? $args['heading'] : $default_heading;
	$css = ! empty( $args['extra_class'] ) ? $args['extra_class'] : '';
?>
																																		   
	<article class=""entry"">
		<header class=""entry-content-header"">
<?php
			echo ""<{$heading} class='post-title entry-title {$css}'>"" . __( 'Nothing Found', 'avia_framework' ) . ""</{$heading}>"";
?>
		</header>

		<p class=""entry-content"" <?php avia_markup_helper( array( 'context' => 'entry_content' ) ); ?>><?php _e( 'Sorry, no posts matched your criteria', 'avia_framework' ); ?></p>

		<footer class=""entry-footer""></footer>
	</article>

<?php
}
  

if( empty( $avia_config['remove_pagination'] ) )
{
	echo ""<div class='{$blog_style}'>"" . avia_pagination( '', 'nav' ) . '</div>';
}

"
VBiaaRRP,Untitled,sypher_01,KiXtart,Tuesday 23rd of May 2023 10:33:20 AM CDT,"# Ubuntu 22.04 LTS Jammy preseed file
 
# Language, country, and keyboard settings
d-i debian-installer/locale string en_US
d-i keyboard-configuration/xkb-keymap select us
 
# Network configuration
d-i netcfg/choose_interface select auto
d-i netcfg/get_nameservers string 1.1.1.1
d-i netcfg/get_ipaddress string 10.31.116.218
d-i netcfg/get_netmask string 255.255.255.0
d-i netcfg/get_gateway string 10.31.116.1
d-i netcfg/confirm_static boolean true
 
# Disk partitioning
d-i partman-auto/method string regular
d-i partman-auto/disk string /dev/sda
d-i partman-auto/choose_recipe select atomic
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
 
# Account setup
d-i passwd/user-fullname string MID
d-i passwd/username string mid
d-i passwd/user-password-crypted password $6$rounds=4096$SvVakIV3wdtL0fqm$dcxmpmcHy3AvTbtfZUkEk.Bh0HYBtkptW68ZxPc5pMZOQyNfH3AApl2rXoCt0YYAa3FqzpVTT8XmBrYgD/5yw0
 
# Clock and time zone
d-i clock-setup/utc boolean true
d-i time/zone string UTC
 
# Package selection
tasksel tasksel/first multiselect standard
d-i pkgsel/include string openssh-server
 
# Install GRUB boot loader
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
d-i grub-installer/bootdev string /dev/sda
 
# Finish installation
d-i finish-install/reboot_in_progress note"
uk6twSmk,kvReputation,cleverus,JavaScript,Tuesday 23rd of May 2023 10:30:56 AM CDT,"/* This is your custom Javascript */
jQuery(document).ready(function ($) {
    $(""#header-aside .signin-button"").attr(""href"", '//earn.community/login');
    setLoginLink();

    $("".kv-login-link"").click(function (event) {
        if ( $(""body"").hasClass(""logged-in"") ) {
      $('.bb-mobile-header-wrapper .header-aside .sub-menu').toggleClass('active');      
        }
        else {
            window.location.href = ""https://earn.community/login"";
        }
    });

	$('.user-wrap .sub-menu').clone(true).insertAfter('.bb-mobile-header-wrapper .kv-login-link');  

	var cntCredits;

	if($('body').hasClass('logged-in')){
		if ($('.gamipress-user-points-amount').length > 0) {
			cntCredits = $(""span.gamipress-user-points-amount"").html();
			localStorage.setItem('credits', cntCredits);			
		} else {
			cntCredits = localStorage.getItem('credits');			
		}		

		$('<a href=""http://earn.community/credits"" class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></a').insertBefore($('.header-aside .header-aside-inner'));
		 
		$('<a href=""http://earn.community/credits"" class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></a>').insertBefore($('.header-aside .kv-login-link'));	
	}
	
	const myTimeout = setTimeout(kvReputation, 4000);
	
	function kvReputation(){
		$('.gamipress-buddypress-reputation').click(function(){
			window.location.href = ""https://earn.community/members/tokenmage/"";
		})		
	}	
});


function setLoginLink() {
    jQuery("".bb-mobile-header .header-search-link"").addClass(""kv-login-link"");
    jQuery("".bb-mobile-header .kv-login-link"").removeClass(""header-search-link"");
    jQuery("".bb-mobile-header .kv-login-link"").attr(""data-balloon"", """");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").removeClass(""bb-icon-search"");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").addClass(""bb-icon-key"");
}
"
gA2miEXt,reputation,cleverus,JavaScript,Tuesday 23rd of May 2023 10:22:54 AM CDT,"/* This is your custom Javascript */
jQuery(document).ready(function ($) {
    $(""#header-aside .signin-button"").attr(""href"", '//earn.community/login');
    setLoginLink();
 
    $("".kv-login-link"").click(function (event) {
        if ( $(""body"").hasClass(""logged-in"") ) {
      $('.bb-mobile-header-wrapper .header-aside .sub-menu').toggleClass('active');      
        }
        else {
            window.location.href = ""https://earn.community/login"";
        }
    });
 
    $('.user-wrap .sub-menu').clone(true).insertAfter('.bb-mobile-header-wrapper .kv-login-link');  
 
    var cntCredits;
 
    if($('body').hasClass('logged-in')){
        if ($('.gamipress-user-points-amount').length > 0) {
            cntCredits = $(""span.gamipress-user-points-amount"").html();
            localStorage.setItem('credits', cntCredits);            
        } else {
            cntCredits = localStorage.getItem('credits');           
        }       
 
        $('<a href=""http://earn.community/credits"" class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></a').insertBefore($('.header-aside .header-aside-inner'));
         
        $('<a href=""http://earn.community/credits"" class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></a>').insertBefore($('.header-aside .kv-login-link'));    
    }
    
    $('.gamipress-buddypress-reputation').click(function(){
        alert(11111)
        window.location.href = ""https://earn.community/members/tokenmage/"";
    });
});
 
 
function setLoginLink() {
    jQuery("".bb-mobile-header .header-search-link"").addClass(""kv-login-link"");
    jQuery("".bb-mobile-header .kv-login-link"").removeClass(""header-search-link"");
    jQuery("".bb-mobile-header .kv-login-link"").attr(""data-balloon"", """");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").removeClass(""bb-icon-search"");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").addClass(""bb-icon-key"");
}"
SKpZmMTD,Untitled,keselyoleren,C#,Tuesday 23rd of May 2023 10:14:18 AM CDT,"using Newtonsoft.Json;
using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        // Console.WriteLine(""Masukkan path lengkap file .zip yang ingin diupload:"");
        string filePath = ""CMU_1.svs"";

        //Console.WriteLine(""Masukkan token keamanan:"");
        //string securityToken = Console.ReadLine();

        await UploadFile(filePath);

        Console.WriteLine(""Proses upload selesai."");
        Console.ReadLine();
    }

    static async Task UploadFile(string filePath)
    {
        string fileName = Path.GetFileName(filePath);
        long chunkSize = 1024 * 1024; // Ukuran chunk (dalam byte)
        
        string uploadID = """";
        string endPoint = ""https://api2.neurabot.ai/api/v2/slides/chunks/"";
        string endPointUpload = ""https://api2.neurabot.ai/api/v2/slides/upload/"";
        string securityToken = ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjg1NDQ4MDU0LCJqdGkiOiJiZDA5MjBlOWExY2U0NmVjYTJlZmQwNzIyNmUyMDQ3MiIsInVzZXJfaWQiOjg1Mn0.oJM7_ugCS1fe4SXHxqjpzhN2lqaZXJNJKw8z5Ncw_Zs"";

        using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
        {
            using (HttpClient httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(""Token"", securityToken);

                int offset = 0;
                long fileSize = fileStream.Length;
                long bytesToRead = fileSize;
                int numChunks = (int)(fileSize / chunkSize);
                long remainingBytes = fileSize % chunkSize;
                Console.WriteLine(""File Size : "" + fileSize);
                if (remainingBytes > 0)
                    numChunks++;

                for (int chunkIndex = 0; chunkIndex < numChunks; chunkIndex++)
                {
                    long currentChunkSize = (chunkIndex == numChunks - 1 && remainingBytes > 0) ? remainingBytes : chunkSize;
                    Console.WriteLine(""Current Chunk Size : "" + currentChunkSize);
                    byte[] buffer = new byte[currentChunkSize];
                    Console.WriteLine(""Offset : "" + offset);
                    Console.WriteLine(""Buffer : "" + buffer.Length);
                    long seek = fileStream.Seek(offset, SeekOrigin.Begin);
                    int bytesRead = fileStream.Read(buffer, 0, (int)currentChunkSize);
                    

                    string contentRange = $""bytes {offset}-{offset + (int)currentChunkSize - 1}/{fileSize}"";

                    ByteArrayContent byteContent = new ByteArrayContent(buffer);

                    MultipartFormDataContent formData = new MultipartFormDataContent();
                    formData.Add(byteContent, ""the_file"", fileName);
                    formData.Headers.Add(""Content-Range"", contentRange);
                    formData.Headers.Add(""X-Requested-With"", ""XMLHttpRequest"");
                    
                    if (chunkIndex > 0)
                    {
                        formData.Add(new StringContent(uploadID), ""upload_id"");
                    }

                    HttpResponseMessage response = await httpClient.PostAsync(endPoint, formData);
                    var responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($""{responseContent}"");
                    var responseObject = JsonConvert.DeserializeObject<dynamic>(responseContent);
                    Console.WriteLine(""==============="");

                    if (response.IsSuccessStatusCode)
                    {
                        if (chunkIndex == 0)
                        {
                            uploadID = responseObject.upload_id;
                        }
                        //offset = Convert.ToInt32(responseObject.offset);
                        
                        bytesToRead -= bytesRead;

                        // upload complate chunk 
                        Console.WriteLine(uploadID);
                        Console.WriteLine(responseObject);
                        Console.WriteLine($""Chunk {chunkIndex + 1}/{numChunks} berhasil diunggah."");
                    }
                    else
                    {
                        Console.WriteLine(responseObject);
                        Console.WriteLine($""Gagal mengunggah chunk {chunkIndex + 1}/{numChunks}. Status: {response.StatusCode}"");
                    }
                    offset += bytesRead;
                }

                if (uploadID != """"){
                    var payload = new Dictionary<string, object>                    {
                        { ""upload_id"", $""{uploadID}""},
                        //{""lab_id"", 18233} //optional
                        
                    };
                    string jsonPayload = JsonConvert.SerializeObject(payload);
                    HttpContent content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, ""application/json"");
                    HttpResponseMessage response_upload = await httpClient.PostAsync(endPointUpload, content);
                    var content_response = await response_upload.Content.ReadAsStringAsync();
                    Console.WriteLine(content_response);

                }
            }
        }
    }

}
"
5mGz1a6w,tokenmage,cleverus,JavaScript,Tuesday 23rd of May 2023 10:12:12 AM CDT,"/* This is your custom Javascript */
jQuery(document).ready(function ($) {
    $(""#header-aside .signin-button"").attr(""href"", '//earn.community/login');
    setLoginLink();

    $("".kv-login-link"").click(function (event) {
        if ( $(""body"").hasClass(""logged-in"") ) {
      $('.bb-mobile-header-wrapper .header-aside .sub-menu').toggleClass('active');      
        }
        else {
            window.location.href = ""https://earn.community/login"";
        }
    });

	$('.user-wrap .sub-menu').clone(true).insertAfter('.bb-mobile-header-wrapper .kv-login-link');  

	var cntCredits;

	if($('body').hasClass('logged-in')){
		if ($('.gamipress-user-points-amount').length > 0) {
			cntCredits = $(""span.gamipress-user-points-amount"").html();
			localStorage.setItem('credits', cntCredits);			
		} else {
			cntCredits = localStorage.getItem('credits');			
		}		

		$('<a href=""http://earn.community/credits"" class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></a').insertBefore($('.header-aside .header-aside-inner'));
		 
		$('<a href=""http://earn.community/credits"" class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></a>').insertBefore($('.header-aside .kv-login-link'));	
	}
	
	$('.gamipress-buddypress-reputation').click(function(){
		window.location.href = ""https://earn.community/members/tokenmage/"";
	})
});


function setLoginLink() {
    jQuery("".bb-mobile-header .header-search-link"").addClass(""kv-login-link"");
    jQuery("".bb-mobile-header .kv-login-link"").removeClass(""header-search-link"");
    jQuery("".bb-mobile-header .kv-login-link"").attr(""data-balloon"", """");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").removeClass(""bb-icon-search"");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").addClass(""bb-icon-key"");
}
"
gk4qktW0,Max the Magnifier assistant | BATCH |,Ajwct,Bash,Tuesday 23rd of May 2023 10:06:11 AM CDT,"@echo off
REM Max Assistant - Created by Ajwct and Bloxhill

python - <<EOF
import webbrowser
import sys

class MaxAssistant:
    def __init__(self):
        self.enabled = True
    
    def display_message(self, message):
        # Function to display a message to the user (e.g., show a pop-up or print to console)
        echo %message%
    
    def handle_user_input(self, user_input):
        if %user_input% == ""exit"":
            self.enabled = False
        else:
            REM Process user input and generate appropriate response
            response = self.generate_response(%user_input%)
            self.display_message(response)
    
    def generate_response(self, user_input):
        REM Logic to generate a response based on user input
        if %user_input% == ""search"":
            echo Sure! What would you like me to search for?
        elif ""search for"" in %user_input%:
            query = %user_input% - ""search for""
            query = query.strip()
            self.search(query)
            echo Here are some search results for your query.
        else:
            echo I'm sorry, I couldn't understand. How can I assist you?
    
    def search(self, query):
        REM Perform a search using a search engine API or library
        REM For simplicity, we'll just open a web browser with a search query
        set ""url=https://www.google.com/search?q=%query%""
        start """" %url%
    
    def run(self):
        echo Welcome! I'm Max the Magnifier. How can I assist you today?
        
        :loop
        set /p ""user_input=> ""
        self.handle_user_input(%user_input%)
        if not %enabled% == ""false"" goto loop
        
        echo Thank you for using Max the Magnifier. Goodbye!
        
EOF
To use this batch file:

Open a text editor.
Copy and paste the above code into a new file.
Save the file with a .bat extension (e.g., max_assistant.bat).
Double-click the batch file to execute it in the Command Prompt.
The batch file will launch the Max Assistant in the Command Prompt, and you can interact with it by entering commands and receiving responses.

Please note that the batch file assumes that Python is already installed and configured in the system's environment variables.

This software is based off of Clippy
 
Max Assistant was made by Ajwct and Bloxhill, though we do not take any responsibility for what Max does as Max is only given information through online websites. 

Version 1.1"
vLN4wfUz,may23,Nojus_Globys,Java,Tuesday 23rd of May 2023 10:02:54 AM CDT,"
void setup () {
  size (1000, 700);
  // ciklas - valdymo struktūra
  // if ()
  // for (ne keturi (four))
  
  //square (0, 0, 50);
  //square (100, 0, 50);
  //square (200, 0, 50);
  //square (300, 0, 50);
  
  // veiksmai kartojasi 10 kartų
  //for (int i = 0; i < 10; ++i) {
  //  println (""pirmas:"", i);
  //} // čia nustoja galioti ""i""
  
  //i = 10;
  
  int i = 0;
  for (; i < 10; ++i) {
    println (""antras:"", i);
  }
  //i = 20;
  
  //...
  
  //if (i == 10)
  //  break;
  
  //if (x < 50)
  //  ;
  
  ;;;;;
}"
70Y9vp3K,Untitled,Pinto085,C++,Tuesday 23rd of May 2023 10:01:34 AM CDT,"#include <bits/stdc++.h>

using namespace std;

int main(){
    int n;
    cin >> n;
    vector<pair<int, int>> fila1(n), fila2;
    for(int i = 0; i < n; i++){
        cin >> fila1[i].first;
        fila1[i].second = i;
    }
    fila2 = fila1;
    sort(fila2.begin(), fila2.end());

    int m;
    cin >> m;
    vector<pair<int, int>> removidos(m);
    for(int i = 0; i < m; i++){ 
        cin >> removidos[i].first;
    }
    sort(removidos.begin(), removidos.end());
    for(int i = 0, j = 0; i < n && j < m; i++, j++){
        while(i < n && fila2[i].first < removidos[j].first){
            ++i;
        }
        removidos[j].second = fila2[i].second;
        swap(removidos[j].first, removidos[j].second);
    }

    sort(removidos.begin(), removidos.end());
    for(int i = 0, ponteiro = 0; i < n; i++){
        if(ponteiro < m && fila1[i].first == removidos[ponteiro].second){
            ++ponteiro;
        }else{
            cout << fila1[i].first << "" "";
        }
    }
    cout << ""\n"";
    return 0;
}
"
TsF1L3SY,WPF async window closing handler,bobmarley12345,C#,Tuesday 23rd of May 2023 09:57:23 AM CDT,"// from: 
// https://github.com/AngryCarrot789/FrameControlEx



private bool isHandlingSyncClosing;
private bool isHandlingAsyncClose;
private bool? closeEventResult;

protected sealed override void OnClosing(CancelEventArgs e) {
    if (this.isHandlingSyncClosing || this.isHandlingAsyncClose) {
        return;
    }

    try {
        this.isHandlingSyncClosing = true;
        this.OnClosingInternal(e);
        if (this.closeEventResult.HasValue) {
            try { // try finally juuust in case...
                e.Cancel = !this.closeEventResult.Value; // true = close, false = do not close
            }
            finally {
                this.closeEventResult = null;
            }
        }
        else {
            e.Cancel = true;
        }
    }
    finally {
        this.isHandlingSyncClosing = false;
    }
}

/*
    async void is required here
    OnClosing is fired, that sets isHandlingSyncClosing to true and invokes this method which awaits CloseAsync()

    During the invocation of CloseAsync, If the call does not require
    real async (e.g. does not use Task.Delay() or whatever):
        CloseAsync will return in the same execution context as OnClosing, meaning isHandlingSyncClosing
        stays true, and OnClosing can access closeEventResult and set the e.Cancel accordingly

    However, if the call chain in CloseAsync uses Task.Delay() or something which returns
    a task that is incomplete by the time the async state machine comes to actually ""awaiting"" it,
    then the behaviour changes:
        OnClosing returns before CloseAsync is completed, setting isHandlingSyncClosing to false, meaning that
        CloseAsyncInternal will manually close the window itself because the original OnClosing was cancelled


 */
private async void OnClosingInternal(CancelEventArgs e) {
    bool result = await this.CloseAsync();
    if (this.isHandlingSyncClosing) {
        this.closeEventResult = result;
    }
}

/// <summary>
/// Closes the window
/// </summary>
/// <returns>Whether the window was closed or not</returns>
public Task<bool> CloseAsync() {
    // return await await Task.Run(async () => await DispatcherUtils.InvokeAsync(this.Dispatcher, this.CloseAsyncInternal));
    return DispatcherUtils.Invoke(this.Dispatcher, this.CloseAsyncInternal);
}

private async Task<bool> CloseAsyncInternal() {
    if (await this.OnClosingAsync()) {
        if (!this.isHandlingSyncClosing) {
            try {
                this.isHandlingAsyncClose = true;
                await DispatcherUtils.InvokeAsync(this.Dispatcher, this.Close);
                return true;
            }
            finally {
                this.isHandlingAsyncClose = false;
            }
        }

        return true;
    }
    else {
        return false;
    }
}

/// <summary>
/// Called when the window is trying to be closed
/// </summary>
/// <returns>True if the window can close, otherwise false to stop it from closing</returns>
protected virtual Task<bool> OnClosingAsync() {
    return Task.FromResult(true);
}"
tJaGFXXj,Untitled,Josif_tepe,C++,Tuesday 23rd of May 2023 09:56:52 AM CDT,"#include <iostream>
#include <vector>
using namespace std;
const int maxn = 3e5 + 10;

int main(){
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    vector<pair<int, int> > rank(n), type(n);
    for(int i = 0; i < n; i++) {
        cin >> rank[i].first;
        rank[i].second = i;
    }
    for(int i = 0; i < n; i++) {
        cin >> type[i].first;
        type[i].second = i;
        
    }
    
    vector<pair<int, int> > ans;
    while(true) {
        int min_difference = 2e9;
        int idx = -1;
        int i1 = -1, i2 = -1;
        for(int i = 0; i + 1 < rank.size(); i++) {
            if(type[i].first != type[i + 1].first) {
                if(abs(rank[i].first - rank[i + 1].first) < min_difference) {
                    min_difference = abs(rank[i].first - rank[i + 1].first);
                    idx = i;
                    i1 = rank[i].second + 1;
                    i2 = rank[i + 1].second + 1;
                }
            }
        }
        if(idx == -1) {
            break;
        }
        ans.push_back(make_pair(i1, i2));
        rank.erase(rank.begin() + idx);
        rank.erase(rank.begin() + idx);
        type.erase(type.begin() + idx);
        type.erase(type.begin() + idx);
    }
    cout << (int) ans.size() << ""\n"";
    for(int i = 0; i < ans.size(); i++) {
        cout << ans[i].first << "" "" << ans[i].second << ""\n"";
    }
       return 0;
}
"
hp0PLuth,location,cleverus,JavaScript,Tuesday 23rd of May 2023 09:56:09 AM CDT,"/* This is your custom Javascript */
jQuery(document).ready(function ($) {
    $(""#header-aside .signin-button"").attr(""href"", '//earn.community/login');
    setLoginLink();

    $("".kv-login-link"").click(function (event) {
        if ( $(""body"").hasClass(""logged-in"") ) {
      $('.bb-mobile-header-wrapper .header-aside .sub-menu').toggleClass('active');      
        }
        else {
            window.location.href = ""https://earn.community/login"";
        }
    });

	$('.user-wrap .sub-menu').clone(true).insertAfter('.bb-mobile-header-wrapper .kv-login-link');  

	var cntCredits;

	if($('body').hasClass('logged-in')){
		if ($('.gamipress-user-points-amount').length > 0) {
			cntCredits = $(""span.gamipress-user-points-amount"").html();
			localStorage.setItem('credits', cntCredits);			
		} else {
			cntCredits = localStorage.getItem('credits');			
		}		

		$('<a href=""http://earn.community/credits"" class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></a').insertBefore($('.header-aside .header-aside-inner'));
		 
		$('<a href=""http://earn.community/credits"" class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></a>').insertBefore($('.header-aside .kv-login-link'));	
	}
	
	$('.gamipress-buddypress-user-details-activity .gamipress-buddypress-reputation').click(function(){
		window.location.href = ""https://earn.community/members/tokenmage/"";
	})
});


function setLoginLink() {
    jQuery("".bb-mobile-header .header-search-link"").addClass(""kv-login-link"");
    jQuery("".bb-mobile-header .kv-login-link"").removeClass(""header-search-link"");
    jQuery("".bb-mobile-header .kv-login-link"").attr(""data-balloon"", """");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").removeClass(""bb-icon-search"");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").addClass(""bb-icon-key"");
}
"
ss030pca,Max the Magnifier assistant,Ajwct,Python,Tuesday 23rd of May 2023 09:52:10 AM CDT,"# Max Assistant - Created by Ajwct and Bloxhill

import webbrowser
import sys

class MaxAssistant:
    def __init__(self):
        self.enabled = True
    
    def display_message(self, message):
        # Function to display a message to the user (e.g., show a pop-up or print to console)
        print(message)
    
    def handle_user_input(self, user_input):
        if user_input.lower() == ""exit"":
            self.enabled = False
        else:
            # Process user input and generate appropriate response
            response = self.generate_response(user_input)
            self.display_message(response)
    
    def generate_response(self, user_input):
        # Logic to generate a response based on user input
        if user_input.lower() == ""search"":
            return ""Sure! What would you like me to search for?""
        elif ""search for"" in user_input.lower():
            query = user_input.lower().replace(""search for"", """").strip()
            return self.search(query)
        else:
            return ""I'm sorry, I couldn't understand. How can I assist you?""
    
    def search(self, query):
        # Perform a search using a search engine API or library
        # For simplicity, we'll just open a web browser with a search query
        url = f""https://www.google.com/search?q={query}""
        webbrowser.open(url)
        return ""Here are some search results for your query.""
    
    def run(self):
        self.display_message(""Welcome! I'm Max the Magnifier. How can I assist you today?"")
        
        while self.enabled:
            user_input = input(""> "")
            self.handle_user_input(user_input)
        
        self.display_message(""Thank you for using Max the Magnifier. Goodbye!"")

if __name__ == ""__main__"":
    # Create an instance of MaxAssistant and run the assistant
    max_assistant = MaxAssistant()
    max_assistant.run()



How to install:
Open the Command Prompt.
Navigate to the directory where you saved the Python script file (max_assistant.py).
Execute the script using the following command:
python max_assistant.py


The Max the Magnifier assistant will start running in the Command Prompt, and you can interact with it by entering commands and receiving responses.

This software is based off of Clippy

Max Assistant was made by Ajwct and Bloxhill, though we do not take any responsibility for what Max does as Max is only given information through online websites. "
