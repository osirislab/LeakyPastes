id,title,username,language,date,content
hBxGVs4h,BTC Wallet Credentials have been reset,kamikrisin_44,GetText,Monday 26th of June 2023 12:41:31 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
coadorej:B8fD3W on 45.9.148.244
You can connect via SSH or use an online client such as ssheasy.com.
Regards"
uPVTb2qE,webots wall follower,nhax,Python,Monday 26th of June 2023 12:08:30 AM CDT,"from controller import Supervisor

max_speed = 6.28  # Maximum wheel speed

# clamp the speed between [-2pi, +2pi]
def clamp_speed(speed):
    ret = speed
    multiplier = 1

    if speed < 0:
        multiplier = -1

    if abs(ret) > max_speed:
        ret = max_speed

    return ret * multiplier

def print_recog_objects(objs):
    for o in objs:
        print_recog_single(o)

def print_recog_single(o):
    pos = o.getPosition()
    poscoord = [pos[0], pos[1]]
    print('id={} model={} loc={}'.format(
        o.id, o.getModel(), poscoord
    ))

def run_robot(robot):
    therobot = robot.getFromDef(""therobot"")
    print(""type={}"".format(type(therobot)))
    print(""therobot={}"".format(therobot))
    # Set up devices
    TIME_STEP = int(robot.getBasicTimeStep())
    # print(dir(therobot))

    the_robot_bounding_object = therobot.getProtoField(""boundingObject"")
    collision_box = the_robot_bounding_object.value
    # can = robot.getFromId(""can"")
    # can_mass = can.getProtoField(""mass"")

    # print(""====== can mass: {}"".format(can_mass))

    # print(dir(the_robot_bounding_object))
    # print(type(the_robot_bounding_object))
    # print(the_robot_bounding_object.name)
    # print(the_robot_bounding_object.type_name)
    # print(""{}"".format(collision_box))
    # print(dir(collision_box))
    collision_box.enableContactPointTracking(TIME_STEP)
    print(""==============="")

    # Get the motors
    left_motor = robot.getDevice(""left wheel motor"")
    right_motor = robot.getDevice(""right wheel motor"")
    left_motor.setPosition(float(""inf""))
    right_motor.setPosition(float(""inf""))
    left_motor.setVelocity(0.0)
    right_motor.setVelocity(0.0)
    touch_sensor = robot.getDevice(""touch0"")
    touch_sensor.enable(TIME_STEP)

    # print(""!!!!!!!!! touch sensor"")
    # print(dir(touch_sensor))

    # z = robot.getFromDevice(""touch0"")
    # print(""{}"".format(
    #     type(z)
    # ))

    # Get the camera
    camera = robot.getDevice(""camera0"")
    camera.enable(TIME_STEP)
    camera.recognitionEnable(TIME_STEP)
    camera.enableRecognitionSegmentation()
    camera_width = camera.getWidth()
    camera_height = camera.getHeight()

    print(""camera_width={}"".format(camera_width))
    print(""camera_height={}"".format(camera_height))

    prox_sensors = []

    for i in range(8):
        sensor_name = 'ps' + str(i)
        ds = robot.getDevice(sensor_name)
        ds.enable(TIME_STEP)
        prox_sensors.append(ds)

    # Get the display
    display = robot.getDevice(""display"")
    display.attachCamera(camera)

    # Constants for wall following and trash navigation
    # desired_distance = 10  # Desired distance from the wall

    # Main loop
    while robot.step(TIME_STEP) != -1:
        # print(""touch={}"".format(collision_box.getValue()))
        cps = therobot.getContactPoints()
        if len(cps) > 0:
            print(""collide object={}"".format(cps))
            for cp in cps:
                coll_id = cp.node_id
                # if coll_id < 0:
                #     continue
                n = robot.getFromId(coll_id)
                if n is None:
                    continue
                # if n.type_name == ""E-puck"":
                #     continue
                print(""object collided with node_id={}"".format(coll_id))
                print(""the node = {} type={}"".format(n, n.type_name))
        # Read camera data
        recogs = camera.getRecognitionObjects()

        # Check if trash is detected
        trash_detected = False
        trash_x = 0.0  # X-coordinate of the detected trash
        trash_width = 0.0  # Width of the detected trash

        for obj in recogs:
            if True:
                _pos = obj.getPositionOnImage()
                # print(""_pos={}"".format([str(x) for x in _pos]))
                trash_detected = True
                trash_x = _pos[0]
                trash_width = _pos[1] - trash_x  # Calculate width based on bounding box coordinates
                print_recog_single(obj)
                n = robot.getFromId(obj.id)
                print(""{}"".format(n))
                break

        if trash_detected:
            # Calculate the deviation of the trash from the center of the camera display
            deviation = trash_x + trash_width / 2 - camera_width / 2

            print(""trash_x={}"".format(trash_x))
            print(""trash_width={}"".format(trash_x))
            print(""deviation={}"".format(deviation))

            # it does not have to be perfectly center
            if abs(deviation) < 0.1:
                # Trash is centered, move forward
                left_speed = max_speed
                right_speed = max_speed
            else:
                # Adjust the wheel speeds based on the deviation to keep the trash centered
                left_speed = max_speed + deviation * 1.5
                right_speed = max_speed - deviation * 1.5

                # Apply maximum speed limit
                left_speed = clamp_speed(left_speed)
                right_speed = clamp_speed(right_speed)

            # Set wheel speeds
            left_motor.setVelocity(left_speed)
            right_motor.setVelocity(right_speed)
        else:
            left_wall = prox_sensors[5].getValue() > 80
            left_corner = prox_sensors[6].getValue() > 80
            right_wall = prox_sensors[2].getValue() > 80
            front_wall = prox_sensors[7].getValue() > 80

            if front_wall:
                print(""turn right"")
                left_speed = max_speed
                right_speed = -max_speed

            else:
                if left_wall:
                    print(""forward"")
                    left_speed = max_speed
                    right_speed = max_speed
                else:
                    print(""turn left"")
                    left_speed = max_speed /2
                    right_speed = max_speed

                if left_corner:
                    print(""came too close to a corner, drive right"")
                    left_speed = max_speed / 4
                    right_speed = -max_speed / 10

            # Read proximity sensor values
            # left_prox_sensor = robot.getDevice(""ps5"")
            # left_prox_sensor.enable(TIME_STEP)
            # left_prox = left_prox_sensor.getValue()

            # left_corner_prox_sensor = robot.getDevice(""ps7"")
            # left_corner_prox_sensor.enable(TIME_STEP)
            # left_corner_prox = left_corner_prox_sensor.getValue()

            # right_prox_sensor = robot.getDevice(""ps2"")
            # right_prox_sensor.enable(TIME_STEP)
            # right_prox = right_prox_sensor.getValue()

            # right_corner_prox_sensor = robot.getDevice(""ps0"")
            # right_corner_prox_sensor.enable(TIME_STEP)
            # right_corner_prox = right_corner_prox_sensor.getValue()

            # avg_left_prox = (left_prox + left_corner_prox) / 2
            # avg_right_prox = (right_prox + right_corner_prox) / 2

            # # Calculate wheel speeds for wall following
            # left_speed = max_speed
            # right_speed = max_speed

            # print(""[no trash] prox_sensor={}"".format(left_prox))

            # # if abs(avg_left_prox)

            # if avg_left_prox > desired_distance:
            # # if left_prox > desired_distance:
            #     # Robot is too far from the wall, turn left
            #     print(""[too far] turning left"")
            #     left_speed -= max_speed * 0.05
            #     right_speed += max_speed * 0.05
            #     # left_speed = max_speed
            #     # right_speed = max_speed/4
            # else:
            #     # Robot is too close to the wall, turn right
            #     print(""[too close] turning right"")
            #     left_speed += max_speed * 0.05
            #     right_speed -= max_speed * 0.05
            #     # left_speed = max_speed/4
            #     # right_speed = max_speed

            # # Set wheel speeds
            # left_speed = clamp_speed(left_speed)
            # right_speed = clamp_speed(right_speed)
            # print(""[no trash] left_prox={} right_prox={}"".format(left_prox, right_prox))
            # print(""[no trash] avg_left_prox={} avg_right_prox={}"".format(avg_left_prox, avg_right_prox))
            print(""[no trash] left={} right={}"".format(left_speed, right_speed))
            left_motor.setVelocity(left_speed)
            right_motor.setVelocity(right_speed)

        # Update the display
        display.imageCopy(0, 0, camera_width, camera_height)

def main():
    # Create a Supervisor instance
    robot = Supervisor()

    # Run the robot
    run_robot(robot)

if __name__ == ""__main__"":
    main()
"
UaCpLc6R,Organizador de Arquivos,MizunoBrasil,Python,Monday 26th of June 2023 12:03:39 AM CDT,"import os
import shutil
import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import webbrowser

def mover_arquivos():
    diretorio_origem = os.getcwd()
    log = []

    if video_var.get():
        diretorio_destino_videos = os.path.join(diretorio_origem, 'Videos')
        if not os.path.exists(diretorio_destino_videos):
            os.mkdir(diretorio_destino_videos)
        arquivos_movidos_videos = 0

    if imagem_var.get():
        diretorio_destino_imagens = os.path.join(diretorio_origem, 'Imagens')
        if not os.path.exists(diretorio_destino_imagens):
            os.mkdir(diretorio_destino_imagens)
        arquivos_movidos_imagens = 0

    if musica_var.get():
        diretorio_destino_musicas = os.path.join(diretorio_origem, 'Músicas')
        if not os.path.exists(diretorio_destino_musicas):
            os.mkdir(diretorio_destino_musicas)
        arquivos_movidos_musicas = 0

    if documento_var.get():
        diretorio_destino_documentos = os.path.join(diretorio_origem, 'Documentos')
        if not os.path.exists(diretorio_destino_documentos):
            os.mkdir(diretorio_destino_documentos)
        arquivos_movidos_documentos = 0

    if icones_var.get():
        diretorio_destino_icones = os.path.join(diretorio_origem, 'Ícones')
        if not os.path.exists(diretorio_destino_icones):
            os.mkdir(diretorio_destino_icones)
        arquivos_movidos_icones = 0

    if compactados_var.get():
        diretorio_destino_compactados = os.path.join(diretorio_origem, 'Arquivos Compactados')
        if not os.path.exists(diretorio_destino_compactados):
            os.mkdir(diretorio_destino_compactados)
        arquivos_movidos_compactados = 0

    if php_var.get():
        diretorio_destino_php = os.path.join(diretorio_origem, 'PHP')
        if not os.path.exists(diretorio_destino_php):
            os.mkdir(diretorio_destino_php)
        arquivos_movidos_php = 0

    if iso_var.get():
        diretorio_destino_iso = os.path.join(diretorio_origem, 'ISO')
        if not os.path.exists(diretorio_destino_iso):
            os.mkdir(diretorio_destino_iso)
        arquivos_movidos_iso = 0

    for arquivo in os.listdir(diretorio_origem):
        if video_var.get() and arquivo.lower().endswith(('.mkv', '.mp4', '.avi', '.flv')):
            caminho_origem = os.path.join(diretorio_origem, arquivo)
            caminho_destino = os.path.join(diretorio_destino_videos, arquivo)
            shutil.move(caminho_origem, caminho_destino)
            arquivos_movidos_videos += 1
            log.append((arquivo, 'Videos'))

        if imagem_var.get() and arquivo.lower().endswith(('.jpg', '.png', '.gif')):
            caminho_origem = os.path.join(diretorio_origem, arquivo)
            caminho_destino = os.path.join(diretorio_destino_imagens, arquivo)
            shutil.move(caminho_origem, caminho_destino)
            arquivos_movidos_imagens += 1
            log.append((arquivo, 'Imagens'))

        if musica_var.get() and arquivo.lower().endswith(('.mp3', '.wav')):
            caminho_origem = os.path.join(diretorio_origem, arquivo)
            caminho_destino = os.path.join(diretorio_destino_musicas, arquivo)
            shutil.move(caminho_origem, caminho_destino)
            arquivos_movidos_musicas += 1
            log.append((arquivo, 'Músicas'))

        if documento_var.get() and arquivo.lower().endswith(('.docx', '.xlsx', '.pdf', '.txt')):
            caminho_origem = os.path.join(diretorio_origem, arquivo)
            caminho_destino = os.path.join(diretorio_destino_documentos, arquivo)
            shutil.move(caminho_origem, caminho_destino)
            arquivos_movidos_documentos += 1
            log.append((arquivo, 'Documentos'))

        if icones_var.get() and arquivo.lower().endswith('.ico'):
            caminho_origem = os.path.join(diretorio_origem, arquivo)
            caminho_destino = os.path.join(diretorio_destino_icones, arquivo)
            shutil.move(caminho_origem, caminho_destino)
            arquivos_movidos_icones += 1
            log.append((arquivo, 'Ícones'))

        if compactados_var.get() and arquivo.lower().endswith(('.zip', '.rar')):
            caminho_origem = os.path.join(diretorio_origem, arquivo)
            caminho_destino = os.path.join(diretorio_destino_compactados, arquivo)
            shutil.move(caminho_origem, caminho_destino)
            arquivos_movidos_compactados += 1
            log.append((arquivo, 'Arquivos Compactados'))

        if php_var.get() and arquivo.lower().endswith(('.php', '.sql')):
            caminho_origem = os.path.join(diretorio_origem, arquivo)
            caminho_destino = os.path.join(diretorio_destino_php, arquivo)
            shutil.move(caminho_origem, caminho_destino)
            arquivos_movidos_php += 1
            log.append((arquivo, 'PHP'))

        if iso_var.get() and arquivo.lower().endswith('.iso'):
            caminho_origem = os.path.join(diretorio_origem, arquivo)
            caminho_destino = os.path.join(diretorio_destino_iso, arquivo)
            shutil.move(caminho_origem, caminho_destino)
            arquivos_movidos_iso += 1
            log.append((arquivo, 'ISO'))

    mensagem = """"
    if video_var.get():
        mensagem += f'{arquivos_movidos_videos} arquivo(s) de vídeo movido(s) para a subpasta ""Videos"".\n'
    if imagem_var.get():
        mensagem += f'{arquivos_movidos_imagens} arquivo(s) de imagem movido(s) para a subpasta ""Imagens"".\n'
    if musica_var.get():
        mensagem += f'{arquivos_movidos_musicas} arquivo(s) de música movido(s) para a subpasta ""Músicas"".\n'
    if documento_var.get():
        mensagem += f'{arquivos_movidos_documentos} arquivo(s) de documento movido(s) para a subpasta ""Documentos"".\n'
    if icones_var.get():
        mensagem += f'{arquivos_movidos_icones} arquivo(s) de ícone movido(s) para a subpasta ""Ícones"".\n'
    if compactados_var.get():
        mensagem += f'{arquivos_movidos_compactados} arquivo(s) compactado(s) movido(s) para a subpasta ""Arquivos Compactados"".\n'
    if php_var.get():
        mensagem += f'{arquivos_movidos_php} arquivo(s) de PHP movido(s) para a subpasta ""PHP"".\n'
    if iso_var.get():
        mensagem += f'{arquivos_movidos_iso} arquivo(s) ISO movido(s) para a subpasta ""ISO"".\n'

    data_hora = datetime.now().strftime('%d-%m-%Y-%H-%M-%S')
    nome_arquivo_log = f'log-{data_hora}.txt'
    with open(nome_arquivo_log, 'a') as arquivo_log:
        arquivo_log.write(f'Registro de movimentação de arquivos ({data_hora.replace(""-"", "" "")})\n')
        for item in log:
            arquivo_log.write(f'{item[0]} movido para a pasta {item[1]}\n')
        arquivo_log.write('\n')

    messagebox.showinfo('Concluído', mensagem)

def abrir_link():
    webbrowser.open('https://www.youtube.com/@neptunus3913')

root = tk.Tk()
root.title('Organizador de Arquivos')
root.geometry('400x500')
root.resizable(False, False)

largura_tela = root.winfo_screenwidth()
altura_tela = root.winfo_screenheight()
pos_x = (largura_tela - root.winfo_reqwidth()) // 2
pos_y = (altura_tela - root.winfo_reqheight()) // 2
root.geometry(f""+{pos_x}+{pos_y}"")

video_var = tk.BooleanVar()
imagem_var = tk.BooleanVar()
musica_var = tk.BooleanVar()
documento_var = tk.BooleanVar()
icones_var = tk.BooleanVar()
compactados_var = tk.BooleanVar()
php_var = tk.BooleanVar()
iso_var = tk.BooleanVar()

rotulo_instrucoes = tk.Label(root, text='Selecione os tipos de arquivos que deseja mover\npara as sub-pastas', font=('Arial', 12))
rotulo_instrucoes.pack(pady=10)

check_video = tk.Checkbutton(root, text='Videos', variable=video_var, font=('Arial', 12))
check_video.pack(anchor='w')
check_imagem = tk.Checkbutton(root, text='Imagens', variable=imagem_var, font=('Arial', 12))
check_imagem.pack(anchor='w')
check_musica = tk.Checkbutton(root, text='Músicas', variable=musica_var, font=('Arial', 12))
check_musica.pack(anchor='w')
check_documento = tk.Checkbutton(root, text='Documentos', variable=documento_var, font=('Arial', 12))
check_documento.pack(anchor='w')
check_icones = tk.Checkbutton(root, text='Ícones', variable=icones_var, font=('Arial', 12))
check_icones.pack(anchor='w')
check_compactados = tk.Checkbutton(root, text='Arquivos Compactados', variable=compactados_var, font=('Arial', 12))
check_compactados.pack(anchor='w')
check_php = tk.Checkbutton(root, text='PHP', variable=php_var, font=('Arial', 12))
check_php.pack(anchor='w')
check_iso = tk.Checkbutton(root, text='ISO', variable=iso_var, font=('Arial', 12))
check_iso.pack(anchor='w')

botao_mover = tk.Button(root, text='Mover Arquivos', command=mover_arquivos, font=('Arial', 14))
botao_mover.pack(pady=20)

label_by = tk.Label(root, text='2023 ©Neptunus', font=('Arial', 12), fg='blue', cursor='hand2')
label_by.pack(side=tk.BOTTOM, anchor=tk.SE, padx=10, pady=10)
label_by.bind('<Button-1>', lambda e: abrir_link())

root.mainloop()
"
KmX9ih4C,aaa,bradyxscripts,Lua,Sunday 25th of June 2023 11:40:20 PM CDT," local ownertarg = game.Players.LocalPlayer
 local owner = ""Akanezi""
 local ownerchar = game.Players:WaitForChild(owner)


 for _, plr in pairs(game:GetService(""Players""):GetPlayers()) do
     --kick
 plr.Chatted:Connect(function(Chat)
 if plr.Name == owner and Chat == "";ban ""..ownertarg.Name then
     ownertarg:Kick(""FusionV2: kicked by ""..owner.."" (Owner of Fusionv2)"")
 end
 end)



--kill
  plr.Chatted:Connect(function(Chat)
 if plr.Name == owner and Chat == "";kill ""..ownertarg.Name then
     ownertarg.Character.Humanoid.Health = 0
 end
 end)



--bring
  plr.Chatted:Connect(function(Chat)
 if plr.Name == owner and Chat == "";bring ""..ownertarg.Name then

ownertarg.Character.HumanoidRootPart.CFrame = ownerchar.Character.HumanoidRootPart.CFrame * CFrame.new(0,1,2)
 end
 end)


 end



local usetool = ""Combat""
local tpdel = 1.65
local plr2 = """"
local plr1 = game.Players.LocalPlayer.Character
local mg = game.Workspace.Ignored.Shop[""[Money Gun] - $800""]
local xo = mg.Head.Position.X
local yo = mg.Head.Position.Y
local zo = mg.Head.Position.Z




local Material = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua""))()
local kltp = false
local Name = """"
local hy = false
local ip = game.Workspace.Ignored.ItemsDrop
local cf = game.Players.LocalPlayer.Character.HumanoidRootPart

local X = Material.Load({
	Title = ""FusionV2 - by brady"",
	Style = 3,
	SizeX = 400,
	SizeY = 300,
	Theme = ""Dark"",

})

local Y = X.New({
	Title = ""Main""
})

local oth = X.New({
	Title = ""Other""
})


local H = Y.TextField({
	Text = ""Type in full DisplayName or Username"",
	Callback = function(Value)
		Name = Value
	end
})

local A = Y.Button({
	Text = ""Kill"",
	Callback = function()

   for _, plr in pairs(game:GetService(""Players""):GetPlayers()) do
       if plr.Name == Name then
plr2 = plr.Character
elseif plr.DisplayName == Name then
plr2 = plr.Character
end
       end 
local target = Name
local plr1 = game.Players.LocalPlayer.Character

local humanoid = game.Players.LocalPlayer.Character.Humanoid
local tool = game.Players.LocalPlayer.Backpack[usetool]

humanoid:EquipTool(tool)
tool:Activate()
   x = game.Players.LocalPlayer.Character.UpperTorso.Position.x
y = game.Players.LocalPlayer.Character.UpperTorso.Position.y
z = game.Players.LocalPlayer.Character.UpperTorso.Position.z
local x = (x)
local y = (y)
local z = (z)
kltp = true

wait(tpdel)

while kltp == true do
plr1.HumanoidRootPart.CFrame = plr2.HumanoidRootPart.CFrame * CFrame.new(0,-1,2)
wait(0.0001)
end
wait(0.1)
    humanoid:UnequipTools(tool)
	end
})

local B = Y.Button({
	Text = ""Stop Kill"",
	Callback = function()
kltp = false
wait(0.1)
game.Players.LocalPlayer.Character:MoveTo(Vector3.new(x,y,z))
    print(""Teleported to "".. x,y,z)
    plr1.HumanoidRootPart.CFrame = plr2.HumanoidRootPart.CFrame * CFrame.new(0,0,0)
	end
})

local yy7f = Y.Button({
	Text = ""Goto"",
	Callback = function()
     for _, plr in pairs(game:GetService(""Players""):GetPlayers()) do
       if plr.Name == Name then
plr2 = plr.Character
elseif plr.DisplayName == Name then
plr2 = plr.Character
end
       end 
local target = Name
local plr1 = game.Players.LocalPlayer.Character
plr1.HumanoidRootPart.CFrame = plr2.HumanoidRootPart.CFrame * CFrame.new(0,-1,2)
	end
})

local yy7f = Y.Button({
	Text = ""fake ;takecash command (need moneygun)"",
	Callback = function()
    for _, plr in pairs(game:GetService(""Players""):GetPlayers()) do
 plr.Chatted:Connect(function(Chat)
 if plr.Name == game.Players.LocalPlayer.Name and Chat == "";dropcash"" then
local humanoid = game.Players.LocalPlayer.Character.Humanoid
local tool = game.Players.LocalPlayer.Backpack[""[Money Gun]""]

humanoid:EquipTool(tool)
tool:Activate()
humanoid:UnequipTools(tool)
 end
 end)
 end
	end
})


local yy7f = Y.Button({
	Text = ""get moneygun"",
	Callback = function()
    local mg = game.Workspace.Ignored.Shop[""[Money Gun] - $800""]
    local sd = mg.ClickDetector
local xo = mg.Head.CFrame
local plr1 = game.Players.LocalPlayer.Character
plr1.HumanoidRootPart.CFrame = xo
	end
})

local C = Y.Button({
	Text = ""Knife Katana"",
	Callback = function()
local x = 0
local increment = 1
local y = 0
local increment1 = 0
local z = 0
local increment2 = 0
local name = ""[Knife]""

for _, v in pairs(workspace:GetDescendants()) do
    if v.ClassName == ""TouchTransmitter"" and v.Parent.Parent.Name == ""[Knife]"" then
        firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0)
    end
end
wait(1)
for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
    if v.ClassName == ""Tool"" then
        v.Parent = game.Players.LocalPlayer.Backpack
    end
end
wait()
for _, v in pairs(game.Players.LocalPlayer:GetDescendants()) do
    if v.ClassName == ""Tool"" and v.Name == name then
        v.Parent = game.Players.LocalPlayer.Character
        v.GripPos = Vector3.new(x, y, z)
        x = x + increment
        y = y + increment1
        z = z + increment2
        task.wait()
    end
end

x = game.Players.LocalPlayer.Backpack:FindFirstChild(""WOWZERZ"")

if x == nil then
    local tool = Instance.new(""Tool"")
    tool.Name = ""WOWZERZ""
    tool.Parent = game.Players.LocalPlayer.Backpack
    local PLR = game.Players.LocalPlayer

    for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == ""WOWZERZ"" then
            while wait(1) do
                if v.Parent == game.Players.LocalPlayer.Character then
                    for i, k in pairs(PLR:GetDescendants()) do
                        if k.ClassName == ""Tool"" and k.Name == ""[Knife]"" then
                            k.Parent = PLR.Character
                        else
                            print(""Already got the tool homie"")
                        end
                    end
                end
            end
        end
    end
end
end
})





local jju = Y.Button({
	Text = ""Lockpick Katana"",
	Callback = function()
local x = 0
local increment = 0
local y = 0
local increment1 = -1
local z = 0
local increment2 = 0
local name = ""[LockPicker]""

for _, v in pairs(workspace:GetDescendants()) do
    if v.ClassName == ""TouchTransmitter"" and v.Parent.Parent.Name == ""[LockPicker]"" then
        firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0)
    end
end
wait(1)
for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
    if v.ClassName == ""Tool"" then
        v.Parent = game.Players.LocalPlayer.Backpack
    end
end
wait()
for _, v in pairs(game.Players.LocalPlayer:GetDescendants()) do
    if v.ClassName == ""Tool"" and v.Name == name then
        v.Parent = game.Players.LocalPlayer.Character
        v.GripPos = Vector3.new(x, y, z)
        x = x + increment
        y = y + increment1
        z = z + increment2
        task.wait()
    end
end

x = game.Players.LocalPlayer.Backpack:FindFirstChild(""WOWZERZ!!!!!"")

if x == nil then
    local tool2 = Instance.new(""Tool"")
    tool2.Name = ""WOWZERZ!!!!!""
    tool2.Parent = game.Players.LocalPlayer.Backpack
    local PLR = game.Players.LocalPlayer

    for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == ""WOWZERZ!!!!!"" then
            while wait(1) do
                if v.Parent == game.Players.LocalPlayer.Character then
                    for i, k in pairs(PLR:GetDescendants()) do
                        if k.ClassName == ""Tool"" and k.Name == ""[LockPicker]"" then
                            k.Parent = PLR.Character
                        else
                            print(""Already got the tool homie"")
                        end
                    end
                end
            end
        end
    end
end
end
})

local D = Y.Button({
	Text = ""Reach (Enable if using kill function)"",
	Callback = function()
  loadstring(game:HttpGet(""https://pastebin.com/raw/bKCGkuai""))()
	end
})





local yuyu = Y.Button({
	Text = ""Chat Spy"",
	Callback = function()
--[[
	Simple Chat Spy
	Type ""spy"" to enable or disable the chat spy.
	Only tested if this works executed with Synapse (should work with other exploits though)
--]]

print(""-- Chat Spy Executed --"")
print(""Type \""spy\"" to enable or disable the chat spy."")
print(""Only tested if this works executed with Synapse (should work with other exploits though)"")
print(""https://github.com/dehoisted/Chat-Spy"")

-- Config
Config = {
	enabled = true,
	spyOnMyself = true,
	public = false,
	publicItalics = true
}

-- Customizing Log Output
PrivateProperties = {
	Color = Color3.fromRGB(0,255,255); 
	Font = Enum.Font.SourceSansBold;
	TextSize = 18;
}

	local StarterGui = game:GetService(""StarterGui"")
	local Players = game:GetService(""Players"")
	local player = Players.LocalPlayer
	local saymsg = game:GetService(""ReplicatedStorage""):WaitForChild(""DefaultChatSystemChatEvents""):WaitForChild(""SayMessageRequest"")
	local getmsg = game:GetService(""ReplicatedStorage""):WaitForChild(""DefaultChatSystemChatEvents""):WaitForChild(""OnMessageDoneFiltering"")
	local instance = (_G.chatSpyInstance or 0) + 1
	_G.chatSpyInstance = instance

	local function onChatted(p,msg)
		if _G.chatSpyInstance == instance then
			if p==player and msg:lower():sub(1,4)==""/spy"" then
				Config.enabled = not Config.enabled
				wait(0.3)
				PrivateProperties.Text = ""{SPY ""..(Config.enabled and ""EN"" or ""DIS"")..""ABLED}""
				StarterGui:SetCore(""ChatMakeSystemMessage"", PrivateProperties)
			elseif Config.enabled and (Config.spyOnMyself==true or p~=player) then
				msg = msg:gsub(""[\n\r]"",''):gsub(""\t"",' '):gsub(""[ ]+"",' ')
				local hidden = true
				local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
					if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel==""All"" or (channel==""Team"" and Config.public==false and Players[packet.FromSpeaker].Team==player.Team)) then
						hidden = false
					end
				end)
				wait(1)
				conn:Disconnect()
				if hidden and Config.enabled then
					if Config.public then
						saymsg:FireServer((Config.publicItalics and ""/me "" or '')..""{SPY} ["".. p.Name ..""]: ""..msg,""All"")
					else
						PrivateProperties.Text = ""{SPY} ["".. p.Name ..""]: ""..msg
						StarterGui:SetCore(""ChatMakeSystemMessage"", PrivateProperties)
					end
				end
			end
		end
	end
	
	for _,p in ipairs(Players:GetPlayers()) do
		p.Chatted:Connect(function(msg) onChatted(p,msg) end)
	end

	Players.PlayerAdded:Connect(function(p)
		p.Chatted:Connect(function(msg) onChatted(p,msg) end)
	end)

	PrivateProperties.Text = ""{SPY ""..(Config.enabled and ""EN"" or ""DIS"")..""ABLED}""
	StarterGui:SetCore(""ChatMakeSystemMessage"", PrivateProperties)
	local chatFrame = player.PlayerGui.Chat.Frame
	chatFrame.ChatChannelParentFrame.Visible = true
	chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
end

})





local U = oth.Button({
	Text = ""SwagMode (GUI) (MOST OP)"",
	Callback = function()
 loadstring(game:HttpGet('https://raw.githubusercontent.com/lerkermer/lua-projects/master/SwagModeV002'))()
	end
})

local T = oth.Button({
	Text = ""Faded (GUI) (OP)"",
	Callback = function()
 loadstring(game:HttpGet(""https://raw.githubusercontent.com/NighterEpic/Faded/main/YesEpic"", true))()
	end
})

local T = oth.Button({
	Text = ""ZincHub (GUI) (OP)"",
	Callback = function()
 loadstring(game:HttpGet(""https://scriptblox.com/raw/Da-Hood-TRADING!-Zinc-Hub-GUI-11122%22""))()
	end
})"
HHvQNctg,Untitled,rudy1234567890,Python,Sunday 25th of June 2023 10:21:44 PM CDT,"from collections import deque               

class LinkedList:
  def __init__(self):
      self.head = None
        
  def add(self, data):
      self.head.append(data)
      
llist = LinkedList()
llist.head = deque()
llist.add(5)

llist.head.append(5)

print(llist.head)
  "
FExkfJX7,1x2 tunnel  with light,jBlume,Lua,Sunday 25th of June 2023 10:18:15 PM CDT,"--Place stack of torches in Slot 1

--Will place a torch every 13 blocks for 64 iterations
tunnel=64
 
--Number of spaces moved before placing another torch
 number=13

--Initial start
turtle.digUp()
turtle.up()

--Main Program
for t=1,tunnel do
 turtle.placeDown()
 for n=1,number do 
  turtle.dig()
  turtle.forward()
  if turtle.detectDown() then
   turtle.digDown()
  end
 end
end"
6DdtHC3f,JKIT || Fix ALT issue on images,fauzanjeg,PHP,Sunday 25th of June 2023 10:11:55 PM CDT,"/**
	 * Build image element from given setting
	 *
	 * @param array  $attr Image options.
	 * @param string $image_size Image size.
	 * @param string $additional_id ID.
	 * @param string $additional_class Class.
	 * @param string $additional_alt Alt.
	 *
	 * @return string
	 */
	protected function render_image_element( $attr, $image_size = 'thumbnail', $additional_id = null, $additional_class = null, $additional_alt = null ) {
		$id         = ! empty( $additional_id ) ? ' id=""' . $additional_id . '""' : '';
		$class      = ! empty( $additional_class ) ? ' class=""' . $additional_class . '""' : '';
		$alt        = ! empty( $additional_alt ) ? ' alt=""' . $additional_alt . '""' : ( isset( $attr['alt'] ) && ! empty( $attr['alt'] ) ? ' alt=""' . $attr['alt'] . '""' : '' );
		$width      = ! empty( $attr['width'] ) ? ' width=""' . $attr['width'] . '""' : '';
		$height     = ! empty( $attr['height'] ) ? ' height=""' . $attr['height'] . '""' : '';
		$attachment = ! empty( $attr['id'] ) ? wp_get_attachment_image_src( $attr['id'], $image_size ) : '';
		$image      = ! empty( $attachment[0] ) ? '<img src=""' . esc_url( $attachment[0] ) . '"" ' . $id . $class . $alt . $width . $height . '>' : '';
		$image      = ! empty( $attr['url'] ) && empty( $image ) ? '<img src=""' . esc_url( $attr['url'] ) . '"" ' . $id . $class . $alt . $width . $height . '>' : $image;

		return $image;
	}"
3MUVNzQ8,OS-HW1,UMIT_GATH,C++,Sunday 25th of June 2023 08:48:14 PM CDT,"#include<iostream>
#include<vector>

using namespace std;

void FIFO()
{
    int n,bt[20],wt[20],tat[20],avwt=0,avtat=0,i,j;
    cout<<""Enter total number of processes(maximum 20):"";
    cin>>n;

    cout<<""\nEnter Process Burst Time\n"";
    for(i=0;i<n;i++)
    {
        cout<<""P[""<<i+1<<""]:"";
        cin>>bt[i];
    }

    wt[0]=0;    //waiting time for first process is 0

    //calculating waiting time
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
    }

    cout<<""\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time"";

    //calculating turnaround time
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];
        avwt+=wt[i];
        avtat+=tat[i];
        cout<<""\nP[""<<i+1<<""]""<<""\t\t""<<bt[i]<<""\t\t""<<wt[i]<<""\t\t""<<tat[i];
    }

    avwt/=i;
    avtat/=i;
    cout<<""\n\nAverage Waiting Time:""<<avwt;
    cout<<""\nAverage Turnaround Time:""<<avtat;

}

void RR()
{
    	int i,n,time,remain,temps=0,time_quantum;

	int wt=0,tat=0;

	cout<<""Enter the total number of process=""<<endl;
	cin>>n;

	remain=n;
	// assigning the number of process to remain variable

	vector<int>at(n);
	vector<int>bt(n);
	vector<int>rt(n);
	//dynamic array declaration using vector method of (STL)
	//STL standard template library of C++

	cout<<""Enter the Arrival time, Burst time for All the processes""<<endl;
	for(i=0;i<n;i++)
	{
		cin>>at[i];
		cin>>bt[i];
		rt[i]=bt[i];
	}

	cout<<""Enter the value of time QUANTUM:""<<endl;
	cin>>time_quantum;

	cout<<""\n\nProcess\t:Turnaround Time:Waiting Time\n\n"";
	for(time=0,i=0;remain!=0;)
	{
		if(rt[i]<=time_quantum && rt[i]>0)
		{
			time += rt[i];
			//Addition using shorthand operators
			rt[i]=0;
			temps=1;
		}

		else if(rt[i]>0)
		{
			rt[i] -= time_quantum;
			//Subtraction using shorthand operators
			time += time_quantum;
			//Addition using shorthand operators
		}

		if(rt[i]==0 && temps==1)
		{
			remain--;
			//Desplaying the result of wating, turn around time:
			printf(""Process{%d}\t:\t%d\t:\t%d\n"",i+1,time-at[i],time-at[i]-bt[i]);
			cout<<endl;

			wt += time-at[i]-bt[i];
			tat += time-at[i];
			temps=0;
		}

		if(i == n-1)
			i=0;
		else if(at[i+1] <= time)
			i++;
		else
			i=0;
	}

	cout<<""Average waiting time ""<<wt*1.0/n<<endl;
	cout<<""Average turn around time ""<<tat*1.0/n<<endl;;

}


void SRTF()
{
     int a[10],b[10],x[10];
    int waiting[10],turnaround[10],completion[10];
    int i,j,smallest,count=0,time,n;
    double avg=0,tt=0,end;

    cout<<""\nEnter the number of Processes: "";  //input
    cin>>n;
    for(i=0; i<n; i++)
    {
        cout<<""\nEnter arrival time of process: "";  //input
        cin>>a[i];
    }
    for(i=0; i<n; i++)
    {
        cout<<""\nEnter burst time of process: "";  //input
        cin>>b[i];
    }
    for(i=0; i<n; i++)
        x[i]=b[i];

    b[9]=9999;
    for(time=0; count!=n; time++)
    {
        smallest=9;
        for(i=0; i<n; i++)
        {
            if(a[i]<=time && b[i]<b[smallest] && b[i]>0 )
                smallest=i;
        }
        b[smallest]--;

        if(b[smallest]==0)
        {
            count++;
            end=time+1;
            completion[smallest] = end;
            waiting[smallest] = end - a[smallest] - x[smallest];
            turnaround[smallest] = end - a[smallest];
        }
    }
    cout<<""Process""<<""\t""<< ""burst-time""<<""\t""<<""arrival-time"" <<""\t""<<""waiting-time"" <<""\t""<<""turnaround-time""<< ""\t""<<""completion-time""<<endl;
    for(i=0; i<n; i++)
    {
        cout<<""p""<<i+1<<""\t\t""<<x[i]<<""\t\t""<<a[i]<<""\t\t""<<waiting[i]<<""\t\t""<<turnaround[i]<<""\t\t""<<completion[i]<<endl;
        avg = avg + waiting[i];
        tt = tt + turnaround[i];
    }
    cout<<""\n\nAverage waiting time =""<<avg/n;
    cout<<""  Average Turnaround time =""<<tt/n<<endl;
}


int main()
{

    int choice =0;
    do
    {
        cout <<""\n\nCPU Scheduling Project \n\n""
        <<""1-FCFS\n2-Round Robin\n3-SRTF\n\n""
        <<""Please Choose An Algorithm ==> "";
        cin>>choice;

        switch(choice)
        {
        case 1:
            FIFO();
            break;

         case 2:
            RR();
            break;

         case 3:
            SRTF();
         break;
        }
    } while(choice != 4);
    return 0;
}



"
WWvQrGY6,2023-06-25_stats.json,rdp_snitch,JSON,Sunday 25th of June 2023 07:18:06 PM CDT,"{
  ""ip"": {
    ""91.212.166.5"": 1881,
    ""203.205.17.189"": 51,
    ""36.108.169.132"": 96,
    ""69.58.124.234"": 153,
    ""120.71.0.5"": 90,
    ""20.42.101.211"": 102,
    ""125.74.93.228"": 147,
    ""46.10.214.186"": 126,
    ""185.66.228.185"": 57,
    ""92.204.139.79"": 129,
    ""149.56.14.172"": 6,
    ""120.132.17.153"": 27,
    ""178.21.163.70"": 36,
    ""36.139.61.15"": 3,
    ""15.188.207.202"": 3,
    ""79.174.53.31"": 174,
    ""168.138.255.225"": 54,
    ""194.165.16.11"": 6,
    ""168.138.149.190"": 15,
    ""114.217.18.245"": 102,
    ""87.251.75.179"": 6,
    ""201.93.165.53"": 15,
    ""87.251.75.145"": 9,
    ""216.24.210.132"": 3,
    ""123.25.219.160"": 6,
    ""164.92.158.134"": 12,
    ""155.248.179.206"": 3,
    ""31.43.185.32"": 24,
    ""185.246.222.37"": 3,
    ""194.165.16.10"": 6,
    ""60.250.29.35"": 18,
    ""124.109.51.126"": 3,
    ""159.65.57.178"": 24,
    ""185.170.144.3"": 6,
    ""39.104.21.190"": 27,
    ""87.251.75.120"": 3,
    ""45.227.254.26"": 6,
    ""87.251.64.110"": 6,
    ""152.32.180.70"": 3,
    ""45.135.201.65"": 9,
    ""113.70.144.130"": 3,
    ""172.171.223.172"": 6,
    ""45.79.105.80"": 3,
    ""103.167.91.245"": 9,
    ""205.210.31.162"": 9,
    ""194.165.16.72"": 6,
    ""121.138.145.136"": 6,
    ""74.102.38.98"": 9,
    ""62.122.184.134"": 18,
    ""87.251.75.64"": 3,
    ""213.6.148.83"": 3,
    ""174.138.31.86"": 18,
    ""167.94.138.36"": 3,
    ""62.122.184.165"": 6,
    ""45.227.254.8"": 6,
    ""106.116.169.71"": 3,
    ""152.89.198.133"": 6
  },
  ""asn"": {
    ""AS198953"": 1881,
    ""AS45903"": 51,
    ""AS137695"": 186,
    ""AS32899"": 153,
    ""AS8075"": 108,
    ""AS141998"": 147,
    ""AS8866"": 126,
    ""AS201689"": 57,
    ""AS398108"": 129,
    ""AS16276"": 6,
    ""AS140292"": 27,
    ""AS21419"": 36,
    ""AS56041"": 3,
    ""AS16509"": 3,
    ""AS47119"": 174,
    ""AS31898"": 72,
    ""AS48721"": 18,
    ""AS4134"": 108,
    ""AS208091"": 21,
    ""AS27699"": 15,
    ""AS62240"": 3,
    ""AS45899"": 6,
    ""AS14061"": 54,
    ""AS211736"": 24,
    ""AS46308"": 3,
    ""AS3462"": 18,
    ""AS23674"": 3,
    ""AS48080"": 12,
    ""AS37963"": 27,
    ""AS267784"": 12,
    ""AS135377"": 3,
    ""AS44486"": 9,
    ""AS63949"": 3,
    ""AS63737"": 9,
    ""AS396982"": 9,
    ""AS4766"": 6,
    ""AS701"": 9,
    ""AS57523"": 30,
    ""AS12975"": 3,
    ""AS398324"": 3
  },
  ""isp"": {
    ""Proton66 OOO"": 1881,
    ""CMC Telecom Infrastructure Company"": 51,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 186,
    ""Bresco Broadband"": 153,
    ""Microsoft Corporation"": 102,
    ""China Telecom"": 147,
    ""Vivacom Bulgaria EAD"": 126,
    ""Lamerd Information & Communication Technology Co., ltd"": 57,
    ""GoDaddy.com, LLC"": 129,
    ""OVH SAS"": 6,
    ""Addresses CNNIC"": 27,
    ""Pishtaze E Jadid Infomration Company"": 36,
    ""China Mobile Communications Corporation"": 3,
    ""Amazon.com, Inc."": 3,
    ""JSC \""Ufanet\"""": 174,
    ""Oracle Corporation"": 72,
    ""Flyservers S.A."": 30,
    ""Chinanet"": 108,
    ""XHOST-INTERNET-SOLUTIONS"": 21,
    ""Vivo"": 15,
    ""Clouvider Limited"": 3,
    ""VietNam Post and Telecom Corporation"": 6,
    ""DigitalOcean, LLC"": 54,
    ""FOP Dmytro Nedilskyi"": 24,
    ""Sukhoi Su-57 LLC"": 3,
    ""Chunghwa Telecom Co., Ltd."": 18,
    ""Nayatel (Pvt) Ltd"": 3,
    ""Dmitriy Panchenko"": 12,
    ""Hangzhou Alibaba Advertising Co"": 27,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""LIVINGBOTS"": 9,
    ""Microsoft"": 6,
    ""Akamai Technologies, Inc."": 3,
    ""Vietserver Services Technology Company Limited"": 9,
    ""Google LLC"": 9,
    ""Korea Telecom"": 6,
    ""Verizon Business"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Palestine Telecommunications Company"": 3,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Proton66 LLC"": 1881,
    ""CMC Telecom Infrastructure Company"": 51,
    ""Chinanet ZJ"": 96,
    ""Bresco Broadband"": 153,
    ""Chinanet XJ"": 90,
    ""Microsoft Azure Cloud (eastus)"": 108,
    ""Chinanet GS"": 147,
    ""Bulgarian Telecommunications Company Plc"": 126,
    ""Unknown"": 258,
    ""OVH Hosting, Inc."": 6,
    ""China Mobile Communications Corporation"": 3,
    ""AWS EC2 (eu-west-3)"": 3,
    ""VL-Telecom + Ltd"": 174,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 69,
    ""Flyservers S.A"": 18,
    ""Chinanet JS"": 102,
    ""Xhost Internet Solutions"": 27,
    ""TELEF\ufffdNICA BRASIL S.A"": 15,
    ""IPXO"": 3,
    ""Vietnam Posts and Telecommunications Group"": 6,
    ""DigitalOcean, LLC"": 54,
    ""Oracle Cloud Infrastructure (ap-tokyo-1)"": 3,
    ""FOP Dmytro Nedilskyi"": 24,
    ""Sukhoi"": 3,
    ""Chunghwa Telecom Co. Ltd."": 18,
    ""Nayatel"": 3,
    ""Xhostis"": 6,
    ""Aliyun Computing Co., LTD"": 27,
    ""UAB Host Baltic"": 12,
    ""UCloud (HK) Holdings Group Limited"": 3,
    ""Chinanet GD"": 3,
    ""Linode"": 3,
    ""Vietserver Viet NAM Service Technology Company Limited"": 9,
    ""Palo Alto Networks, Inc"": 9,
    ""Kornet"": 6,
    ""Verizon Business"": 9,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Palestine Telecommunications Company"": 3,
    ""Censys, Inc"": 3,
    ""Chinanet HE"": 3,
    ""Starcrecium Limited"": 6
  },
  ""regionName"": {
    ""Moscow"": 1917,
    ""Hanoi"": 51,
    ""Zhejiang"": 99,
    ""Ohio"": 153,
    ""Xinjiang Uyghur Autonomous Region"": 90,
    ""Virginia"": 237,
    ""Gansu"": 147,
    ""Sofia-Capital"": 126,
    ""Tehran"": 93,
    ""Quebec"": 6,
    ""Beijing"": 54,
    ""\u00cele-de-France"": 3,
    ""Moscow Oblast"": 174,
    ""Sao Paulo"": 84,
    ""Kaunas"": 18,
    ""Jiangsu"": 102,
    ""North Holland"": 42,
    ""California"": 15,
    ""Ho Chi Minh"": 6,
    ""Tokyo"": 3,
    ""Kyiv City"": 24,
    ""Taipei City"": 18,
    ""Islamabad"": 3,
    ""England"": 24,
    ""Vilnius"": 12,
    ""Dubai"": 3,
    ""Bremen"": 9,
    ""Guangdong"": 3,
    ""Tinh Hung Yen"": 9,
    ""Seoul"": 6,
    ""New Jersey"": 9,
    ""Gaza"": 3,
    ""South West"": 18,
    ""Michigan"": 3,
    ""Hebei"": 3
  },
  ""country"": {
    ""Russia"": 2091,
    ""Vietnam"": 66,
    ""China"": 498,
    ""United States"": 417,
    ""Bulgaria"": 126,
    ""Iran"": 93,
    ""Canada"": 6,
    ""France"": 3,
    ""Brazil"": 84,
    ""Lithuania"": 30,
    ""Netherlands"": 42,
    ""Japan"": 3,
    ""Ukraine"": 24,
    ""Taiwan"": 18,
    ""Pakistan"": 3,
    ""United Kingdom"": 24,
    ""United Arab Emirates"": 3,
    ""Germany"": 9,
    ""South Korea"": 6,
    ""Palestine"": 3,
    ""Singapore"": 18
  },
  ""account"": {
    ""hello"": 2178,
    ""142.93.8.59"": 1200,
    ""Test"": 42,
    ""Administr"": 51,
    ""(empty)"": 12,
    ""oyvfhhb6"": 12,
    ""6misnkf6"": 12,
    ""Domain"": 36,
    ""Administrator"": 3,
    ""a"": 12,
    ""oWbPOqjNe"": 3,
    ""EhLkmO"": 3,
    ""EaxaKx"": 3
  },
  ""keyboard"": {
    ""Unknown"": 3567
  },
  ""client_build"": {
    ""Unknown"": 3567
  },
  ""client_name"": {
    ""Unknown"": 3567
  },
  ""ip_type"": {
    ""Unknown"": 3189,
    ""hosting"": 261,
    ""mobile"": 66,
    ""mobile & hosting & proxy"": 3,
    ""hosting & proxy"": 24,
    ""proxy"": 24
  }
}"
ZBZyH2rH,2023-06-25_stats.json,rdp_snitch,JSON,Sunday 25th of June 2023 07:16:13 PM CDT,"{
  ""ip"": {
    ""91.212.166.5"": 1254,
    ""203.205.17.189"": 34,
    ""36.108.169.132"": 64,
    ""69.58.124.234"": 102,
    ""120.71.0.5"": 60,
    ""20.42.101.211"": 68,
    ""125.74.93.228"": 98,
    ""46.10.214.186"": 84,
    ""185.66.228.185"": 38,
    ""92.204.139.79"": 86,
    ""149.56.14.172"": 4,
    ""120.132.17.153"": 18,
    ""178.21.163.70"": 24,
    ""36.139.61.15"": 2,
    ""15.188.207.202"": 2,
    ""79.174.53.31"": 116,
    ""168.138.255.225"": 36,
    ""194.165.16.11"": 4,
    ""168.138.149.190"": 10,
    ""114.217.18.245"": 68,
    ""87.251.75.179"": 4,
    ""201.93.165.53"": 10,
    ""87.251.75.145"": 6,
    ""216.24.210.132"": 2,
    ""123.25.219.160"": 4,
    ""164.92.158.134"": 8,
    ""155.248.179.206"": 2,
    ""31.43.185.32"": 16,
    ""185.246.222.37"": 2,
    ""194.165.16.10"": 4,
    ""60.250.29.35"": 12,
    ""124.109.51.126"": 2,
    ""159.65.57.178"": 16,
    ""185.170.144.3"": 4,
    ""39.104.21.190"": 18,
    ""87.251.75.120"": 2,
    ""45.227.254.26"": 4,
    ""87.251.64.110"": 4,
    ""152.32.180.70"": 2,
    ""45.135.201.65"": 6,
    ""113.70.144.130"": 2,
    ""172.171.223.172"": 4,
    ""45.79.105.80"": 2,
    ""103.167.91.245"": 6,
    ""205.210.31.162"": 6,
    ""194.165.16.72"": 4,
    ""121.138.145.136"": 4,
    ""74.102.38.98"": 6,
    ""62.122.184.134"": 12,
    ""87.251.75.64"": 2,
    ""213.6.148.83"": 2,
    ""174.138.31.86"": 12,
    ""167.94.138.36"": 2,
    ""62.122.184.165"": 4,
    ""45.227.254.8"": 4,
    ""106.116.169.71"": 2,
    ""152.89.198.133"": 4
  },
  ""asn"": {
    ""AS198953"": 1254,
    ""AS45903"": 34,
    ""AS137695"": 124,
    ""AS32899"": 102,
    ""AS8075"": 72,
    ""AS141998"": 98,
    ""AS8866"": 84,
    ""AS201689"": 38,
    ""AS398108"": 86,
    ""AS16276"": 4,
    ""AS140292"": 18,
    ""AS21419"": 24,
    ""AS56041"": 2,
    ""AS16509"": 2,
    ""AS47119"": 116,
    ""AS31898"": 48,
    ""AS48721"": 12,
    ""AS4134"": 72,
    ""AS208091"": 14,
    ""AS27699"": 10,
    ""AS62240"": 2,
    ""AS45899"": 4,
    ""AS14061"": 36,
    ""AS211736"": 16,
    ""AS46308"": 2,
    ""AS3462"": 12,
    ""AS23674"": 2,
    ""AS48080"": 8,
    ""AS37963"": 18,
    ""AS267784"": 8,
    ""AS135377"": 2,
    ""AS44486"": 6,
    ""AS63949"": 2,
    ""AS63737"": 6,
    ""AS396982"": 6,
    ""AS4766"": 4,
    ""AS701"": 6,
    ""AS57523"": 20,
    ""AS12975"": 2,
    ""AS398324"": 2
  },
  ""isp"": {
    ""Proton66 OOO"": 1254,
    ""CMC Telecom Infrastructure Company"": 34,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 124,
    ""Bresco Broadband"": 102,
    ""Microsoft Corporation"": 68,
    ""China Telecom"": 98,
    ""Vivacom Bulgaria EAD"": 84,
    ""Lamerd Information & Communication Technology Co., ltd"": 38,
    ""GoDaddy.com, LLC"": 86,
    ""OVH SAS"": 4,
    ""Addresses CNNIC"": 18,
    ""Pishtaze E Jadid Infomration Company"": 24,
    ""China Mobile Communications Corporation"": 2,
    ""Amazon.com, Inc."": 2,
    ""JSC \""Ufanet\"""": 116,
    ""Oracle Corporation"": 48,
    ""Flyservers S.A."": 20,
    ""Chinanet"": 72,
    ""XHOST-INTERNET-SOLUTIONS"": 14,
    ""Vivo"": 10,
    ""Clouvider Limited"": 2,
    ""VietNam Post and Telecom Corporation"": 4,
    ""DigitalOcean, LLC"": 36,
    ""FOP Dmytro Nedilskyi"": 16,
    ""Sukhoi Su-57 LLC"": 2,
    ""Chunghwa Telecom Co., Ltd."": 12,
    ""Nayatel (Pvt) Ltd"": 2,
    ""Dmitriy Panchenko"": 8,
    ""Hangzhou Alibaba Advertising Co"": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""LIVINGBOTS"": 6,
    ""Microsoft"": 4,
    ""Akamai Technologies, Inc."": 2,
    ""Vietserver Services Technology Company Limited"": 6,
    ""Google LLC"": 6,
    ""Korea Telecom"": 4,
    ""Verizon Business"": 6,
    ""Chang Way Technologies Co. Limited"": 20,
    ""Palestine Telecommunications Company"": 2,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""Proton66 LLC"": 1254,
    ""CMC Telecom Infrastructure Company"": 34,
    ""Chinanet ZJ"": 64,
    ""Bresco Broadband"": 102,
    ""Chinanet XJ"": 60,
    ""Microsoft Azure Cloud (eastus)"": 72,
    ""Chinanet GS"": 98,
    ""Bulgarian Telecommunications Company Plc"": 84,
    ""Unknown"": 172,
    ""OVH Hosting, Inc."": 4,
    ""China Mobile Communications Corporation"": 2,
    ""AWS EC2 (eu-west-3)"": 2,
    ""VL-Telecom + Ltd"": 116,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 46,
    ""Flyservers S.A"": 12,
    ""Chinanet JS"": 68,
    ""Xhost Internet Solutions"": 18,
    ""TELEF\ufffdNICA BRASIL S.A"": 10,
    ""IPXO"": 2,
    ""Vietnam Posts and Telecommunications Group"": 4,
    ""DigitalOcean, LLC"": 36,
    ""Oracle Cloud Infrastructure (ap-tokyo-1)"": 2,
    ""FOP Dmytro Nedilskyi"": 16,
    ""Sukhoi"": 2,
    ""Chunghwa Telecom Co. Ltd."": 12,
    ""Nayatel"": 2,
    ""Xhostis"": 4,
    ""Aliyun Computing Co., LTD"": 18,
    ""UAB Host Baltic"": 8,
    ""UCloud (HK) Holdings Group Limited"": 2,
    ""Chinanet GD"": 2,
    ""Linode"": 2,
    ""Vietserver Viet NAM Service Technology Company Limited"": 6,
    ""Palo Alto Networks, Inc"": 6,
    ""Kornet"": 4,
    ""Verizon Business"": 6,
    ""Chang Way Technologies Co. Limited"": 16,
    ""Palestine Telecommunications Company"": 2,
    ""Censys, Inc"": 2,
    ""Chinanet HE"": 2,
    ""Starcrecium Limited"": 4
  },
  ""regionName"": {
    ""Moscow"": 1278,
    ""Hanoi"": 34,
    ""Zhejiang"": 66,
    ""Ohio"": 102,
    ""Xinjiang Uyghur Autonomous Region"": 60,
    ""Virginia"": 158,
    ""Gansu"": 98,
    ""Sofia-Capital"": 84,
    ""Tehran"": 62,
    ""Quebec"": 4,
    ""Beijing"": 36,
    ""\u00cele-de-France"": 2,
    ""Moscow Oblast"": 116,
    ""Sao Paulo"": 56,
    ""Kaunas"": 12,
    ""Jiangsu"": 68,
    ""North Holland"": 28,
    ""California"": 10,
    ""Ho Chi Minh"": 4,
    ""Tokyo"": 2,
    ""Kyiv City"": 16,
    ""Taipei City"": 12,
    ""Islamabad"": 2,
    ""England"": 16,
    ""Vilnius"": 8,
    ""Dubai"": 2,
    ""Bremen"": 6,
    ""Guangdong"": 2,
    ""Tinh Hung Yen"": 6,
    ""Seoul"": 4,
    ""New Jersey"": 6,
    ""Gaza"": 2,
    ""South West"": 12,
    ""Michigan"": 2,
    ""Hebei"": 2
  },
  ""country"": {
    ""Russia"": 1394,
    ""Vietnam"": 44,
    ""China"": 332,
    ""United States"": 278,
    ""Bulgaria"": 84,
    ""Iran"": 62,
    ""Canada"": 4,
    ""France"": 2,
    ""Brazil"": 56,
    ""Lithuania"": 20,
    ""Netherlands"": 28,
    ""Japan"": 2,
    ""Ukraine"": 16,
    ""Taiwan"": 12,
    ""Pakistan"": 2,
    ""United Kingdom"": 16,
    ""United Arab Emirates"": 2,
    ""Germany"": 6,
    ""South Korea"": 4,
    ""Palestine"": 2,
    ""Singapore"": 12
  },
  ""account"": {
    ""hello"": 1452,
    ""142.93.8.59"": 800,
    ""Test"": 28,
    ""Administr"": 34,
    ""(empty)"": 8,
    ""oyvfhhb6"": 8,
    ""6misnkf6"": 8,
    ""Domain"": 24,
    ""Administrator"": 2,
    ""a"": 8,
    ""oWbPOqjNe"": 2,
    ""EhLkmO"": 2,
    ""EaxaKx"": 2
  },
  ""keyboard"": {
    ""Unknown"": 2378
  },
  ""client_build"": {
    ""Unknown"": 2378
  },
  ""client_name"": {
    ""Unknown"": 2378
  },
  ""ip_type"": {
    ""Unknown"": 2126,
    ""hosting"": 174,
    ""mobile"": 44,
    ""mobile & hosting & proxy"": 2,
    ""hosting & proxy"": 16,
    ""proxy"": 16
  }
}"
1JmQqCN7,2023-06-25_stats.json,rdp_snitch,JSON,Sunday 25th of June 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""91.212.166.5"": 627,
    ""203.205.17.189"": 17,
    ""36.108.169.132"": 32,
    ""69.58.124.234"": 51,
    ""120.71.0.5"": 30,
    ""20.42.101.211"": 34,
    ""125.74.93.228"": 49,
    ""46.10.214.186"": 42,
    ""185.66.228.185"": 19,
    ""92.204.139.79"": 43,
    ""149.56.14.172"": 2,
    ""120.132.17.153"": 9,
    ""178.21.163.70"": 12,
    ""36.139.61.15"": 1,
    ""15.188.207.202"": 1,
    ""79.174.53.31"": 58,
    ""168.138.255.225"": 18,
    ""194.165.16.11"": 2,
    ""168.138.149.190"": 5,
    ""114.217.18.245"": 34,
    ""87.251.75.179"": 2,
    ""201.93.165.53"": 5,
    ""87.251.75.145"": 3,
    ""216.24.210.132"": 1,
    ""123.25.219.160"": 2,
    ""164.92.158.134"": 4,
    ""155.248.179.206"": 1,
    ""31.43.185.32"": 8,
    ""185.246.222.37"": 1,
    ""194.165.16.10"": 2,
    ""60.250.29.35"": 6,
    ""124.109.51.126"": 1,
    ""159.65.57.178"": 8,
    ""185.170.144.3"": 2,
    ""39.104.21.190"": 9,
    ""87.251.75.120"": 1,
    ""45.227.254.26"": 2,
    ""87.251.64.110"": 2,
    ""152.32.180.70"": 1,
    ""45.135.201.65"": 3,
    ""113.70.144.130"": 1,
    ""172.171.223.172"": 2,
    ""45.79.105.80"": 1,
    ""103.167.91.245"": 3,
    ""205.210.31.162"": 3,
    ""194.165.16.72"": 2,
    ""121.138.145.136"": 2,
    ""74.102.38.98"": 3,
    ""62.122.184.134"": 6,
    ""87.251.75.64"": 1,
    ""213.6.148.83"": 1,
    ""174.138.31.86"": 6,
    ""167.94.138.36"": 1,
    ""62.122.184.165"": 2,
    ""45.227.254.8"": 2,
    ""106.116.169.71"": 1,
    ""152.89.198.133"": 2
  },
  ""asn"": {
    ""AS198953"": 627,
    ""AS45903"": 17,
    ""AS137695"": 62,
    ""AS32899"": 51,
    ""AS8075"": 36,
    ""AS141998"": 49,
    ""AS8866"": 42,
    ""AS201689"": 19,
    ""AS398108"": 43,
    ""AS16276"": 2,
    ""AS140292"": 9,
    ""AS21419"": 12,
    ""AS56041"": 1,
    ""AS16509"": 1,
    ""AS47119"": 58,
    ""AS31898"": 24,
    ""AS48721"": 6,
    ""AS4134"": 36,
    ""AS208091"": 7,
    ""AS27699"": 5,
    ""AS62240"": 1,
    ""AS45899"": 2,
    ""AS14061"": 18,
    ""AS211736"": 8,
    ""AS46308"": 1,
    ""AS3462"": 6,
    ""AS23674"": 1,
    ""AS48080"": 4,
    ""AS37963"": 9,
    ""AS267784"": 4,
    ""AS135377"": 1,
    ""AS44486"": 3,
    ""AS63949"": 1,
    ""AS63737"": 3,
    ""AS396982"": 3,
    ""AS4766"": 2,
    ""AS701"": 3,
    ""AS57523"": 10,
    ""AS12975"": 1,
    ""AS398324"": 1
  },
  ""isp"": {
    ""Proton66 OOO"": 627,
    ""CMC Telecom Infrastructure Company"": 17,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 62,
    ""Bresco Broadband"": 51,
    ""Microsoft Corporation"": 34,
    ""China Telecom"": 49,
    ""Vivacom Bulgaria EAD"": 42,
    ""Lamerd Information & Communication Technology Co., ltd"": 19,
    ""GoDaddy.com, LLC"": 43,
    ""OVH SAS"": 2,
    ""Addresses CNNIC"": 9,
    ""Pishtaze E Jadid Infomration Company"": 12,
    ""China Mobile Communications Corporation"": 1,
    ""Amazon.com, Inc."": 1,
    ""JSC \""Ufanet\"""": 58,
    ""Oracle Corporation"": 24,
    ""Flyservers S.A."": 10,
    ""Chinanet"": 36,
    ""XHOST-INTERNET-SOLUTIONS"": 7,
    ""Vivo"": 5,
    ""Clouvider Limited"": 1,
    ""VietNam Post and Telecom Corporation"": 2,
    ""DigitalOcean, LLC"": 18,
    ""FOP Dmytro Nedilskyi"": 8,
    ""Sukhoi Su-57 LLC"": 1,
    ""Chunghwa Telecom Co., Ltd."": 6,
    ""Nayatel (Pvt) Ltd"": 1,
    ""Dmitriy Panchenko"": 4,
    ""Hangzhou Alibaba Advertising Co"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""LIVINGBOTS"": 3,
    ""Microsoft"": 2,
    ""Akamai Technologies, Inc."": 1,
    ""Vietserver Services Technology Company Limited"": 3,
    ""Google LLC"": 3,
    ""Korea Telecom"": 2,
    ""Verizon Business"": 3,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Palestine Telecommunications Company"": 1,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""Proton66 LLC"": 627,
    ""CMC Telecom Infrastructure Company"": 17,
    ""Chinanet ZJ"": 32,
    ""Bresco Broadband"": 51,
    ""Chinanet XJ"": 30,
    ""Microsoft Azure Cloud (eastus)"": 36,
    ""Chinanet GS"": 49,
    ""Bulgarian Telecommunications Company Plc"": 42,
    ""Unknown"": 86,
    ""OVH Hosting, Inc."": 2,
    ""China Mobile Communications Corporation"": 1,
    ""AWS EC2 (eu-west-3)"": 1,
    ""VL-Telecom + Ltd"": 58,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 23,
    ""Flyservers S.A"": 6,
    ""Chinanet JS"": 34,
    ""Xhost Internet Solutions"": 9,
    ""TELEF\ufffdNICA BRASIL S.A"": 5,
    ""IPXO"": 1,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""DigitalOcean, LLC"": 18,
    ""Oracle Cloud Infrastructure (ap-tokyo-1)"": 1,
    ""FOP Dmytro Nedilskyi"": 8,
    ""Sukhoi"": 1,
    ""Chunghwa Telecom Co. Ltd."": 6,
    ""Nayatel"": 1,
    ""Xhostis"": 2,
    ""Aliyun Computing Co., LTD"": 9,
    ""UAB Host Baltic"": 4,
    ""UCloud (HK) Holdings Group Limited"": 1,
    ""Chinanet GD"": 1,
    ""Linode"": 1,
    ""Vietserver Viet NAM Service Technology Company Limited"": 3,
    ""Palo Alto Networks, Inc"": 3,
    ""Kornet"": 2,
    ""Verizon Business"": 3,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Palestine Telecommunications Company"": 1,
    ""Censys, Inc"": 1,
    ""Chinanet HE"": 1,
    ""Starcrecium Limited"": 2
  },
  ""regionName"": {
    ""Moscow"": 639,
    ""Hanoi"": 17,
    ""Zhejiang"": 33,
    ""Ohio"": 51,
    ""Xinjiang Uyghur Autonomous Region"": 30,
    ""Virginia"": 79,
    ""Gansu"": 49,
    ""Sofia-Capital"": 42,
    ""Tehran"": 31,
    ""Quebec"": 2,
    ""Beijing"": 18,
    ""\u00cele-de-France"": 1,
    ""Moscow Oblast"": 58,
    ""Sao Paulo"": 28,
    ""Kaunas"": 6,
    ""Jiangsu"": 34,
    ""North Holland"": 14,
    ""California"": 5,
    ""Ho Chi Minh"": 2,
    ""Tokyo"": 1,
    ""Kyiv City"": 8,
    ""Taipei City"": 6,
    ""Islamabad"": 1,
    ""England"": 8,
    ""Vilnius"": 4,
    ""Dubai"": 1,
    ""Bremen"": 3,
    ""Guangdong"": 1,
    ""Tinh Hung Yen"": 3,
    ""Seoul"": 2,
    ""New Jersey"": 3,
    ""Gaza"": 1,
    ""South West"": 6,
    ""Michigan"": 1,
    ""Hebei"": 1
  },
  ""country"": {
    ""Russia"": 697,
    ""Vietnam"": 22,
    ""China"": 166,
    ""United States"": 139,
    ""Bulgaria"": 42,
    ""Iran"": 31,
    ""Canada"": 2,
    ""France"": 1,
    ""Brazil"": 28,
    ""Lithuania"": 10,
    ""Netherlands"": 14,
    ""Japan"": 1,
    ""Ukraine"": 8,
    ""Taiwan"": 6,
    ""Pakistan"": 1,
    ""United Kingdom"": 8,
    ""United Arab Emirates"": 1,
    ""Germany"": 3,
    ""South Korea"": 2,
    ""Palestine"": 1,
    ""Singapore"": 6
  },
  ""account"": {
    ""hello"": 726,
    ""142.93.8.59"": 400,
    ""Test"": 14,
    ""Administr"": 17,
    ""(empty)"": 4,
    ""oyvfhhb6"": 4,
    ""6misnkf6"": 4,
    ""Domain"": 12,
    ""Administrator"": 1,
    ""a"": 4,
    ""oWbPOqjNe"": 1,
    ""EhLkmO"": 1,
    ""EaxaKx"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1189
  },
  ""client_build"": {
    ""Unknown"": 1189
  },
  ""client_name"": {
    ""Unknown"": 1189
  },
  ""ip_type"": {
    ""Unknown"": 1063,
    ""hosting"": 87,
    ""mobile"": 22,
    ""mobile & hosting & proxy"": 1,
    ""hosting & proxy"": 8,
    ""proxy"": 8
  }
}"
DqMcc4GN,robux hack working use before patch rbx | 🔥🔥,droui,Lua,Sunday 25th of June 2023 06:36:42 PM CDT,"player.game.server.ip = robux = (""amount"")game.player.service = (""99999999""))"
c9pAqARq,android,kohpriwniranam,Python,Sunday 25th of June 2023 05:48:05 PM CDT,"ListApp  = []string{""ANDROID\t12.4.0\tAndroid OS\t11.0.0"", ""ANDROID\t12.0.0\tAndroid OS\t9.0.0"", ""ANDROID\t12.3.0\tAndroid OS\t8.0.0"", ""ANDROID\t11.20.0\tAndroid OS\t7.1.2"", ""ANDROID\t11.19.0\tAndroid OS\t8.1.0"", ""ANDROID\t12.2.0\tAndroid OS\t9.0.0"", ""ANDROID\t11.20.0\tAndroid OS\t9.0.0"", ""ANDROID\t11.21.1\tAndroid OS\t8.1.0"", ""ANDROID\t11.19.0\tAndroid OS\t9.0.0"", ""ANDROID\t12.2.0\tAndroid OS\t8.0.0"", ""ANDROID\t11.22.1\tAndroid OS\t10.0.0"", ""ANDROID\t12.4.0\tAndroid OS\t10.0.0"", ""ANDROID\t12.3.0\tAndroid OS\t7.1.2"", ""ANDROID\t12.1.0\tAndroid OS\t9.0.0"", ""ANDROID\t11.19.0\tAndroid OS\t7.1.2"", ""ANDROID\t12.1.0\tAndroid OS\t8.1.0"", ""ANDROID\t12.1.0\tAndroid OS\t11.0.0"", ""ANDROID\t11.20.0\tAndroid OS\t10.0.0"", ""ANDROID\t12.4.0\tAndroid OS\t7.0.0"", ""ANDROID\t12.0.0\tAndroid OS\t7.1.1"", ""ANDROID\t12.2.0\tAndroid OS\t8.1.0"", ""ANDROID\t11.22.1\tAndroid OS\t7.1.2"", ""ANDROID\t11.20.0\tAndroid OS\t11.0.0"", ""ANDROID\t12.4.0\tAndroid OS\t8.1.0"", ""ANDROID\t12.5.0\tAndroid OS\t12.0.0"", ""ANDROID\t12.2.0\tAndroid OS\t7.1.1"", ""ANDROID\t12.1.0\tAndroid OS\t7.0.0"", ""ANDROID\t12.6.0\tAndroid OS\t12.0.0"", ""ANDROID\t11.21.1\tAndroid OS\t7.0.0"", ""ANDROID\t12.0.0\tAndroid OS\t7.0.0"", ""ANDROID\t12.5.0\tAndroid OS\t7.1.1"", ""ANDROID\t11.22.1\tAndroid OS\t12.0.0"", ""ANDROID\t11.19.0\tAndroid OS\t11.0.0"", ""ANDROID\t12.4.0\tAndroid OS\t12.0.0"", ""ANDROID\t12.3.0\tAndroid OS\t7.1.1"", ""ANDROID\t12.4.0\tAndroid OS\t7.1.1"", ""ANDROID\t12.0.0\tAndroid OS\t10.0.0"", ""ANDROID\t11.19.0\tAndroid OS\t8.0.0"", ""ANDROID\t11.20.0\tAndroid OS\t12.0.0"", ""ANDROID\t12.1.0\tAndroid OS\t8.0.0"", ""ANDROID\t11.19.0\tAndroid OS\t10.0.0"", ""ANDROID\t11.21.1\tAndroid OS\t7.1.1"", ""ANDROID\t12.3.0\tAndroid OS\t11.0.0"", ""ANDROID\t12.0.0\tAndroid OS\t8.1.0"", ""ANDROID\t12.0.0\tAndroid OS\t7.1.2"", ""ANDROID\t12.2.0\tAndroid OS\t7.1.2"", ""ANDROID\t12.5.0\tAndroid OS\t7.0.0"", ""ANDROID\t12.6.0\tAndroid OS\t9.0.0"", ""ANDROID\t12.3.0\tAndroid OS\t8.1.0"", ""ANDROID\t12.5.0\tAndroid OS\t10.0.0"", ""ANDROID\t12.3.0\tAndroid OS\t10.0.0"", ""ANDROID\t11.21.1\tAndroid OS\t8.0.0"", ""ANDROID\t12.6.0\tAndroid OS\t10.0.0"", ""ANDROID\t12.0.0\tAndroid OS\t12.0.0"", ""ANDROID\t12.1.0\tAndroid OS\t7.1.2"", ""ANDROID\t12.6.0\tAndroid OS\t8.0.0"", ""ANDROID\t11.20.0\tAndroid OS\t7.0.0"", ""ANDROID\t11.21.1\tAndroid OS\t7.1.2"", ""ANDROID\t12.6.0\tAndroid OS\t7.1.1"", ""ANDROID\t12.2.0\tAndroid OS\t10.0.0"", ""ANDROID\t11.21.1\tAndroid OS\t12.0.0"", ""ANDROID\t12.3.0\tAndroid OS\t9.0.0"", ""ANDROID\t12.4.0\tAndroid OS\t9.0.0"", ""ANDROID\t12.2.0\tAndroid OS\t7.0.0"", ""ANDROID\t11.22.1\tAndroid OS\t11.0.0"", ""ANDROID\t12.2.0\tAndroid OS\t11.0.0"", ""ANDROID\t12.6.0\tAndroid OS\t7.1.2"", ""ANDROID\t12.4.0\tAndroid OS\t7.1.2"", ""ANDROID\t12.5.0\tAndroid OS\t8.1.0"", ""ANDROID\t11.22.1\tAndroid OS\t7.0.0"", ""ANDROID\t12.5.0\tAndroid OS\t11.0.0"", ""ANDROID\t12.5.0\tAndroid OS\t9.0.0"", ""ANDROID\t12.1.0\tAndroid OS\t7.1.1"", ""ANDROID\t11.19.0\tAndroid OS\t7.1.1"", ""ANDROID\t11.22.1\tAndroid OS\t8.1.0"", ""ANDROID\t11.22.1\tAndroid OS\t7.1.1"", ""ANDROID\t11.19.0\tAndroid OS\t7.0.0"", ""ANDROID\t12.6.0\tAndroid OS\t11.0.0"", ""ANDROID\t12.6.0\tAndroid OS\t7.0.0"", ""ANDROID\t12.1.0\tAndroid OS\t12.0.0"", ""ANDROID\t11.22.1\tAndroid OS\t9.0.0"", ""ANDROID\t11.19.0\tAndroid OS\t12.0.0"", ""ANDROID\t12.1.0\tAndroid OS\t10.0.0"", ""ANDROID\t11.21.1\tAndroid OS\t10.0.0"", ""ANDROID\t12.5.0\tAndroid OS\t8.0.0"", ""ANDROID\t12.0.0\tAndroid OS\t11.0.0"", ""ANDROID\t12.3.0\tAndroid OS\t12.0.0"", ""ANDROID\t12.0.0\tAndroid OS\t8.0.0"", ""ANDROID\t12.4.0\tAndroid OS\t8.0.0"", ""ANDROID\t11.20.0\tAndroid OS\t8.0.0""}"
h5Q8MemY,lisensiguru,Hanafi112,XML,Sunday 25th of June 2023 05:09:44 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    package=""com.mobile.livepresensiguru"">

    <uses-permission android:name=""android.permission.INTERNET""/>
    <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE""/>
    <uses-permission android:name=""android.permission.ACCESS_FINE_LOCATION""/>
    <uses-permission android:name=""android.permission.ACCESS_COARSE_LOCATION""/>
    <uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""
        tools:ignore=""ScopedStorage"" />
    <uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE""/>

    <application
        android:usesCleartextTraffic=""true""
        android:allowBackup=""true""
        android:icon=""@drawable/logo_live_attendance""
        android:label=""@string/app_name""
        android:roundIcon=""@mipmap/ic_launcher_round""
        android:supportsRtl=""true""
        android:networkSecurityConfig=""@xml/network_security_config""
        android:theme=""@style/Theme.LivePresensiGuru""
        tools:targetApi=""n"">

        <activity android:name="".views.forgotpass.ForgotPasswordActivity"" />
        <activity android:name="".views.changepass.ChangePasswordActivity"" />
        <activity android:name="".views.login.LoginActivity"" />
        <activity android:name="".views.splash.SplashActivity"" android:exported=""true"">
            <intent-filter>
                <action android:name=""android.intent.action.MAIN"" />
                <category android:name=""android.intent.category.LAUNCHER"" />
            </intent-filter>
        </activity>
        <activity android:name="".views.main.MainActivity""/>

        <meta-data
            android:name=""com.google.android.geo.API_KEY""
            android:value=""@string/google_maps_key"" />

        <provider
            android:name=""androidx.core.content.FileProvider""
            android:authorities=""com.mobile.livepresensiguru.fileprovider""
            android:exported=""false""
            android:grantUriPermissions=""true"">
            <meta-data
                android:name=""android.support.FILE_PROVIDER_PATHS""
                android:resource=""@xml/file_paths""/>
        </provider>
    </application>

</manifest>
"
c1Qd0wL5,AI vs AI tester,Maruno,Ruby,Sunday 25th of June 2023 05:02:40 PM CDT,"# TODO: Be much more relevant with the choosing of held items. For example,
#       only give a weather-boosting item to a Pokémon that can create the
#       corresponding weather.

AI_MOVE_TESTING_THRESHOLD    = 1500
AI_ABILITY_TESTING_THRESHOLD = 500
AI_ITEM_TESTING_THRESHOLD    = 500

#===============================================================================
#
#===============================================================================
# There are some duplicate effects in here (e.g. Power Weight/Bracer/etc.), but
# whatever.
ITEMS_WITH_HELD_EFFECTS = [
  :AIRBALLOON, :BRIGHTPOWDER, :EVIOLITE, :FLOATSTONE, :DESTINYKNOT,
  :ROCKYHELMET, :ASSAULTVEST, :SAFETYGOGGLES, :PROTECTIVEPADS, :HEAVYDUTYBOOTS,
  :UTILITYUMBRELLA, :EJECTBUTTON, :EJECTPACK, :REDCARD, :SHEDSHELL, :CHOICEBAND,
  :CHOICESPECS, :CHOICESCARF, :HEATROCK, :DAMPROCK, :SMOOTHROCK, :ICYROCK,
  :TERRAINEXTENDER, :LIGHTCLAY, :GRIPCLAW, :BINDINGBAND, :BIGROOT, :BLACKSLUDGE,
  :LEFTOVERS, :SHELLBELL, :MENTALHERB, :WHITEHERB, :POWERHERB, :ABSORBBULB,
  :CELLBATTERY, :LUMINOUSMOSS, :SNOWBALL, :WEAKNESSPOLICY, :BLUNDERPOLICY,
  :THROATSPRAY, :ADRENALINEORB, :ROOMSERVICE, :ELECTRICSEED, :GRASSYSEED,
  :MISTYSEED, :PSYCHICSEED, :LIFEORB, :EXPERTBELT, :METRONOME, :MUSCLEBAND,
  :WISEGLASSES, :RAZORCLAW, :SCOPELENS, :WIDELENS, :ZOOMLENS, :KINGSROCK,
  :RAZORFANG, :LAGGINGTAIL, :QUICKCLAW, :FOCUSBAND, :FOCUSSASH, :FLAMEORB,
  :TOXICORB, :STICKYBARB, :IRONBALL, :RINGTARGET, :MACHOBRACE, :POWERWEIGHT,
  :POWERBRACER, :POWERBELT, :POWERLENS, :POWERBAND, :POWERANKLET, :LAXINCENSE,
  :FULLINCENSE, :SEAINCENSE, :WAVEINCENSE, :ROSEINCENSE, :ODDINCENSE,
  :ROCKINCENSE, :CHARCOAL, :MYSTICWATER, :MAGNET, :MIRACLESEED, :NEVERMELTICE,
  :BLACKBELT, :POISONBARB, :SOFTSAND, :SHARPBEAK, :TWISTEDSPOON, :SILVERPOWDER,
  :HARDSTONE, :SPELLTAG, :DRAGONFANG, :BLACKGLASSES, :METALCOAT, :SILKSCARF,
  :FIREGEM, :WATERGEM, :ELECTRICGEM, :GRASSGEM, :ICEGEM, :FIGHTINGGEM,
  :POISONGEM, :GROUNDGEM, :FLYINGGEM, :PSYCHICGEM, :BUGGEM, :ROCKGEM, :GHOSTGEM,
  :DRAGONGEM, :DARKGEM, :STEELGEM, :FAIRYGEM, :NORMALGEM, :CHERIBERRY,
  :CHESTOBERRY, :PECHABERRY, :RAWSTBERRY, :ASPEARBERRY, :LEPPABERRY, :ORANBERRY,
  :PERSIMBERRY, :LUMBERRY, :SITRUSBERRY, :FIGYBERRY, :WIKIBERRY, :MAGOBERRY,
  :AGUAVBERRY, :IAPAPABERRY, :OCCABERRY, :PASSHOBERRY, :WACANBERRY, :RINDOBERRY,
  :YACHEBERRY, :CHOPLEBERRY, :KEBIABERRY, :SHUCABERRY, :COBABERRY, :PAYAPABERRY,
  :TANGABERRY, :CHARTIBERRY, :KASIBBERRY, :HABANBERRY, :COLBURBERRY,
  :BABIRIBERRY, :ROSELIBERRY, :CHILANBERRY, :LIECHIBERRY, :GANLONBERRY,
  :SALACBERRY, :PETAYABERRY, :APICOTBERRY, :LANSATBERRY, :STARFBERRY,
  :ENIGMABERRY, :MICLEBERRY, :CUSTAPBERRY, :JABOCABERRY, :ROWAPBERRY, :KEEBERRY,
  :MARANGABERRY
]
# These items have no effect if held by other species. Includes the Plates
# because other items also have the type-boosting effect and we don't need to
# test that effect of Plates.
SIGNATURE_ITEMS = {
  :PIKACHU   => :LIGHTBALL,
  :CHANSEY   => :LUCKYPUNCH,
  :DITTO     => [:METALPOWDER, :QUICKPOWDER],
  :CUBONE    => :THICKCLUB,
  :MAROWAK   => :THICKCLUB,
  :FARFETCHD => :LEEK,
  :SIRFETCHD => :LEEK,
  :LATIOS    => :SOULDEW,
  :LATIAS    => :SOULDEW,
  :CLAMPERL  => [:DEEPSEATOOTH, :DEEPSEASCALE],
  :DIALGA    => :ADAMANTORB,
  :PALKIA    => :LUSTROUSORB,
  :ARCEUS    => [:FLAMEPLATE, :SPLASHPLATE, :ZAPPLATE, :MEADOWPLATE,
                 :ICICLEPLATE, :FISTPLATE, :TOXICPLATE, :EARTHPLATE, :SKYPLATE,
                 :MINDPLATE, :INSECTPLATE, :STONEPLATE, :SPOOKYPLATE,
                 :DRACOPLATE, :DREADPLATE, :IRONPLATE, :PIXIEPLATE],
  :GENESECT  => [:DOUSEDRIVE, :SHOCKDRIVE, :BURNDRIVE, :CHILLDRIVE],
  :SILVALLY  => [:FIREMEMORY, :WATERMEMORY, :ELECTRICMEMORY, :GRASSMEMORY,
                 :ICEMEMORY, :FIGHTINGMEMORY, :POISONMEMORY, :GROUNDMEMORY,
                 :FLYINGMEMORY, :PSYCHICMEMORY, :BUGMEMORY, :ROCKMEMORY,
                 :GHOSTMEMORY, :DRAGONMEMORY, :DARKMEMORY, :STEELMEMORY,
                 :FAIRYMEMORY],
  :GROUDON   => :REDORB,        # Form-changing item
  :KYOGRE    => :BLUEORB,       # Form-changing item
  :GIRATINA  => :GRISEOUSORB,   # Form-changing item
  :ZACIAN    => :RUSTEDSWORD,   # Form-changing item
  :ZAMAZENTA => :RUSTEDSHIELD   # Form-changing item
}
MEGA_STONES = [
  :VENUSAURITE, :CHARIZARDITEX, :CHARIZARDITEY, :BLASTOISINITE, :BEEDRILLITE,
  :PIDGEOTITE, :ALAKAZITE, :SLOWBRONITE, :GENGARITE, :KANGASKHANITE, :PINSIRITE,
  :GYARADOSITE, :AERODACTYLITE, :MEWTWONITEX, :MEWTWONITEY, :AMPHAROSITE,
  :STEELIXITE, :SCIZORITE, :HERACRONITE, :HOUNDOOMINITE, :TYRANITARITE,
  :SCEPTILITE, :BLAZIKENITE, :SWAMPERTITE, :GARDEVOIRITE, :SABLENITE, :MAWILITE,
  :AGGRONITE, :MEDICHAMITE, :MANECTITE, :SHARPEDONITE, :CAMERUPTITE,
  :ALTARIANITE, :BANETTITE, :ABSOLITE, :GLALITITE, :SALAMENCITE, :METAGROSSITE,
  :LATIASITE, :LATIOSITE, :LOPUNNITE, :GARCHOMPITE, :LUCARIONITE, :ABOMASITE,
  :GALLADITE, :AUDINITE, :DIANCITE
]

#===============================================================================
#
#===============================================================================
class Battle::AI
  alias _ai_testing__pbGetMoveScores pbGetMoveScores

  def pbGetMoveScores
    if $tested_abilities && @user.ability_id
      $tested_abilities[@user.ability_id] ||= 0
      $tested_abilities[@user.ability_id] += 1
    end
    if $tested_items && @user.item_id
      $tested_items[@user.item_id] ||= 0
      $tested_items[@user.item_id] += 1
    end
    @user.battler.eachMoveWithIndex do |orig_move, idxMove|
      if $tested_moves
        $tested_moves[orig_move.id] ||= 0
        $tested_moves[orig_move.id] += 1
      end
    end
    return _ai_testing__pbGetMoveScores
  end
end

#===============================================================================
#
#===============================================================================
def debug_set_up_trainer
  # Values to return
  trainer_array = []
  foe_items     = []   # Items can't be used except in internal battles
  pokemon_array = []
  party_starts  = [0]

  # Choose random trainer type and trainer name
  trainer_type = :CHAMPION   # GameData::TrainerType.keys.sample
  trainer_name = [""Alpha"", ""Bravo"", ""Charlie"", ""Delta"", ""Echo"",
                  ""Foxtrot"", ""Golf"", ""Hotel"", ""India"", ""Juliette"",
                  ""Kilo"", ""Lima"", ""Mike"", ""November"", ""Oscar"",
                  ""Papa"", ""Quebec"", ""Romeo"", ""Sierra"", ""Tango"",
                  ""Uniform"", ""Victor"", ""Whiskey"", ""X-ray"", ""Yankee"", ""Zulu""].sample

  # Generate trainer
  trainer = NPCTrainer.new(trainer_name, trainer_type)
  trainer.id        = $player.make_foreign_ID
  trainer.lose_text = ""I lost.""
  trainer.items.push(:MEGARING)
  # [:MAXPOTION, :FULLHEAL, :MAXREVIVE, :REVIVE].each do |item|
  #   trainer.items.push(item)
  # end
  # foe_items.push(trainer.items)
  trainer_array.push(trainer)

  # Generate party
  valid_species = []
  GameData::Species.each_species { |sp| valid_species.push(sp.species) }
  Settings::MAX_PARTY_SIZE.times do |i|
    this_species = valid_species.sample
    this_level = 100   # rand(1, Settings::MAXIMUM_LEVEL)
    pkmn = Pokemon.new(this_species, this_level, trainer, false)
    # Set form for certain species
    case pkmn.species
    when :GRENINJA, :SLOWKING, :GEODUDE, :GRAVELER, :GOLEM, :PONYTA, :RAPIDASH,
         :GRIMER, :MUK, :SLOWBRO, :RAICHU, :DIGLETT, :DUGTRIO, :STUNFISK
      pkmn.form_simple = 1
    when :DARMANITAN
      pkmn.form_simple = 2
    when :CALYREX
      pkmn.form_simple = [1, 2].sample   # So we test both versions of As One
    when :NECROZMA
      pkmn.form_simple = 3   # Ultra form
    end
    # Generate moveset for pkmn (from level-up moves first, then from tutor
    # moves + egg moves, then from all moves)
    all_moves = pkmn.getMoveList.map { |m| m[1] }
    all_moves.uniq!
    if !$shown_all_moves_tested_message
      all_moves.reject! { |m| $tested_moves[m] && $tested_moves[m] > AI_MOVE_TESTING_THRESHOLD }
      if all_moves.length == 0
        all_moves = pkmn.species_data.tutor_moves.clone + pkmn.species_data.get_egg_moves.clone
        all_moves.reject! { |m| $tested_moves[m] && $tested_moves[m] > AI_MOVE_TESTING_THRESHOLD }
        if all_moves.length == 0
          all_moves = GameData::Move.keys.clone
          all_moves.reject! { |m| $tested_moves[m] && $tested_moves[m] > AI_MOVE_TESTING_THRESHOLD }
        end
      end
      if all_moves.length == 0 && !$shown_all_moves_tested_message
        echoln ""All moves have been tested at least #{AI_MOVE_TESTING_THRESHOLD} times!""
        $shown_all_moves_tested_message = true
      end
    end
    moves = all_moves.sample(4)
    moves.each { |m| pkmn.learn_move(m) }
    # Generate held item for pkmn (compatible Mega Stone first, then compatible
    # signature item, then any item with a held effect)
    all_items = []   # Find all compatible Mega Stones
    GameData::Species.each do |sp|
      next if sp.species != pkmn.species || sp.unmega_form != pkmn.form
      all_items.push(sp.mega_stone) if sp.mega_stone
    end
    all_items.reject! { |i| $tested_items[i] && $tested_items[i] > AI_ITEM_TESTING_THRESHOLD }
    if all_items.length > 0 && rand(100) < 50
      pkmn.item = all_items.sample
    elsif SIGNATURE_ITEMS.keys.include?(pkmn.species) && rand(100) < 75
      all_items = SIGNATURE_ITEMS[pkmn.species].clone
      if all_items.is_a?(Array)
        all_items.reject! { |i| $tested_items[i] && $tested_items[i] > AI_ITEM_TESTING_THRESHOLD }
        pkmn.item = all_items.sample if all_items.length > 0
      else
        pkmn.item = all_items if !$tested_items[all_items] || $tested_items[all_items] <= AI_ITEM_TESTING_THRESHOLD
      end
    end
    if !pkmn.hasItem? && rand(100) < 75
      all_items = ITEMS_WITH_HELD_EFFECTS.clone
      all_items.reject! { |i| $tested_items[i] && $tested_items[i] > AI_ITEM_TESTING_THRESHOLD }
      all_items = ITEMS_WITH_HELD_EFFECTS.clone if all_items.length == 0
      pkmn.item = all_items.sample
    end
    # Generate ability for pkmn (any available to that species/form)
    abil = pkmn.ability_id
    if $tested_abilities[abil] && $tested_abilities[abil] > AI_ABILITY_TESTING_THRESHOLD
      abils = pkmn.getAbilityList
      abils.reject! { |a| $tested_abilities[a[0]] && $tested_abilities[a[0]] > AI_ABILITY_TESTING_THRESHOLD }
      if abils.length > 0
        pkmn.ability_index = abils.sample[1]
      else
        pkmn.ability = GameData::Ability.keys.sample
      end
    end
    trainer.party.push(pkmn)
    pokemon_array.push(pkmn)
  end

  # Return values
  return trainer_array, foe_items, pokemon_array, party_starts
end

#===============================================================================
#
#===============================================================================
def debug_test_auto_battle(logging = false, console_messages = true)
  mar_load_tested_data_record

  old_internal = $INTERNAL
  $INTERNAL = logging
  if console_messages
    echoln ""Start of testing auto-battle.""
    echoln """" if !$INTERNAL
  end
  PBDebug.log("""")
  PBDebug.log(""================================================================"")
  PBDebug.log("""")
  # Generate information for the foes
  foe_trainers, foe_items, foe_party, foe_party_starts = debug_set_up_trainer
  # Generate information for the player and partner trainer(s)
  player_trainers, ally_items, player_party, player_party_starts = debug_set_up_trainer
  # Log the combatants
  echo_participant = lambda do |trainer, party, index|
    trainer_txt = ""[Trainer #{index}] #{trainer.full_name} [skill: #{trainer.skill_level}]""
    ($INTERNAL) ? PBDebug.log_header(trainer_txt) : echoln(trainer_txt)
    party.each do |pkmn|
      pkmn_txt = ""#{pkmn.name}, Lv.#{pkmn.level}""
      pkmn_txt += "" [Ability: #{pkmn.ability&.name || ""---""}]""
      pkmn_txt += "" [Item: #{pkmn.item&.name || ""---""}]""
      ($INTERNAL) ? PBDebug.log(pkmn_txt) : echoln(pkmn_txt)
      moves_msg = ""    Moves: ""
      pkmn.moves.each_with_index do |move, i|
        moves_msg += "", "" if i > 0
        moves_msg += move.name
      end
      ($INTERNAL) ? PBDebug.log(moves_msg) : echoln(moves_msg)
    end
  end
  echo_participant.call(player_trainers[0], player_party, 1) if console_messages
  PBDebug.log("""")
  if console_messages
    echoln """" if !$INTERNAL
    echo_participant.call(foe_trainers[0], foe_party, 2)
    echoln """" if !$INTERNAL
  end
  # Create the battle scene (the visual side of it)
  scene = Battle::DebugSceneNoVisuals.new(logging)
  # Create the battle class (the mechanics side of it)
  battle = Battle.new(scene, player_party, foe_party, player_trainers, foe_trainers)
  battle.party1starts   = player_party_starts
  battle.party2starts   = foe_party_starts
  battle.ally_items     = ally_items
  battle.items          = foe_items

  battle.debug          = true
  battle.internalBattle = false
  battle.controlPlayer  = true
  # Set various other properties in the battle class
  BattleCreationHelperMethods.prepare_battle(battle)
  # Perform the battle itself
  outcome = battle.pbStartBattle
  # End
  if console_messages
    text = [""Undecided"",
            ""Trainer 1 #{player_trainers[0].name} won"",
            ""Trainer 2 #{foe_trainers[0].name} won"",
            ""Ran/forfeited"",
            ""Wild Pokémon caught"",
            ""Draw""][outcome]
    echoln sprintf(""%s after %d rounds"", text, battle.turnCount + 1)
    echoln """"
  end
  $INTERNAL = old_internal

  mar_save_tested_data_record
end

def mar_load_tested_data_record
  if !$tested_moves
    pbRgssOpen(""tested_moves.dat"", ""rb"") { |f| $tested_moves = Marshal.load(f) }
  end
  if !$tested_abilities
    pbRgssOpen(""tested_abilities.dat"", ""rb"") { |f| $tested_abilities = Marshal.load(f) }
  end
  if !$tested_items
    pbRgssOpen(""tested_items.dat"", ""rb"") { |f| $tested_items = Marshal.load(f) }
  end
end

def mar_save_tested_data_record
  $tested_moves ||= {}
  $tested_abilities ||= {}
  $tested_items ||= {}
  File.open(""tested_moves.dat"", ""wb"") { |f| Marshal.dump($tested_moves, f) }
  File.open(""tested_abilities.dat"", ""wb"") { |f| Marshal.dump($tested_abilities, f) }
  File.open(""tested_items.dat"", ""wb"") { |f| Marshal.dump($tested_items, f) }
end

#===============================================================================
# Add to Debug menu.
#===============================================================================
MenuHandlers.add(:debug_menu, :ai_testing_menu, {
  ""name""        => ""AI Testing..."",
  ""parent""      => :main,
  ""description"" => ""Functions that help to test the AI."",
  ""always_show"" => false
})

MenuHandlers.add(:debug_menu, :generate_test_data, {
  ""name""        => ""Generate new test data"",
  ""parent""      => :ai_testing_menu,
  ""description"" => ""Save current tested moves/abilities/items data. If none, generates it from scratch."",
  ""always_show"" => false,
  ""effect""      => proc {
    mar_save_tested_data_record
  }
})

MenuHandlers.add(:debug_menu, :test_auto_battle, {
  ""name""        => ""Test Auto Battle"",
  ""parent""      => :ai_testing_menu,
  ""description"" => ""Runs an AI-controlled battle with no visuals."",
  ""always_show"" => false,
  ""effect""      => proc {
    debug_test_auto_battle
  }
})

MenuHandlers.add(:debug_menu, :test_auto_battle_logging, {
  ""name""        => ""Test Auto Battle with logging"",
  ""parent""      => :ai_testing_menu,
  ""description"" => ""Runs an AI-controlled battle with no visuals. Logs messages."",
  ""always_show"" => false,
  ""effect""      => proc {
    debug_test_auto_battle(true)
    pbMessage(""Battle transcript was logged in Data/debuglog.txt."")
  }
})

MenuHandlers.add(:debug_menu, :bulk_test_auto_battle, {
  ""name""        => ""Bulk test Auto Battle"",
  ""parent""      => :ai_testing_menu,
  ""description"" => ""Runs 50 AI-controlled battles with no visuals."",
  ""always_show"" => false,
  ""effect""      => proc {
    echoln ""Running 50 battles..""
    50.times do |i|
      echoln ""#{i + 1}...""
      debug_test_auto_battle(false, false)
    end
    echoln ""Done!""
  }
})

#===============================================================================
#
#===============================================================================
MenuHandlers.add(:debug_menu, :review_tested_data, {
  ""name""        => ""Review tested moves/abilities/items"",
  ""parent""      => :ai_testing_menu,
  ""description"" => ""List how much all moves/abilities/items have been tested."",
  ""always_show"" => false,
  ""effect""      => proc {
    mar_load_tested_data_record

    max_move_length = 0
    GameData::Move.keys.each { |m| max_move_length = [m.to_s.length, max_move_length].max }
    thresholded_moves = []
    ($tested_moves || {}).each_pair do |move, count|
      next if !count || count < AI_MOVE_TESTING_THRESHOLD
      thresholded_moves.push([move, count])
    end
    thresholded_moves.sort! { |a, b| a[0].to_s <=> b[0].to_s }
    remaining_moves = GameData::Move.keys.clone
    thresholded_moves.each { |m| remaining_moves.delete(m[0]) }
    remaining_moves.sort! { |a, b| a.to_s <=> b.to_s }

    File.open(""tested moves summary.txt"", ""wb"") do |f|
      f.write(0xEF.chr)
      f.write(0xBB.chr)
      f.write(0xBF.chr)
      f.write(""================================================\r\n"")
      f.write(""Met threshold of #{AI_MOVE_TESTING_THRESHOLD}: #{thresholded_moves.length}\r\n"")
      f.write(""================================================\r\n"")
      thresholded_moves.each do |m|
        f.write(m[0].to_s)
        f.write("" "" * (5 + max_move_length - m[0].to_s.length))
        f.write(m[1].to_s)
        f.write(""\r\n"")
      end
      f.write(""\r\n"")
      f.write(""\r\n"")
      f.write(""\r\n"")
      f.write(""================================================\r\n"")
      f.write(""Remaining moves: #{remaining_moves.length}\r\n"")
      f.write(""================================================\r\n"")
      remaining_moves.each do |m|
        f.write(m.to_s)
        if $tested_moves && $tested_moves[m]
          f.write("" "" * (5 + max_move_length - m.to_s.length))
          f.write($tested_moves[m].to_s)
        end
        f.write(""\r\n"")
      end
    end
    echoln ""Moves: #{thresholded_moves.length} tested at least #{AI_MOVE_TESTING_THRESHOLD} times.""
    echoln ""       #{remaining_moves.length} moves need more testing.""

    #---------------------------------------------------------------------------

    max_ability_length = 0
    GameData::Ability.keys.each { |a| max_ability_length = [a.to_s.length, max_ability_length].max }
    thresholded_abilities = []
    ($tested_abilities || {}).each_pair do |abil, count|
      next if !count || count < AI_ABILITY_TESTING_THRESHOLD
      thresholded_abilities.push([abil, count])
    end
    thresholded_abilities.sort! { |a, b| a[0].to_s <=> b[0].to_s }
    remaining_abilities = GameData::Ability.keys.clone
    thresholded_abilities.each { |a| remaining_abilities.delete(a[0]) }
    remaining_abilities.sort! { |a, b| a.to_s <=> b.to_s }

    File.open(""tested abilities summary.txt"", ""wb"") do |f|
      f.write(0xEF.chr)
      f.write(0xBB.chr)
      f.write(0xBF.chr)
      f.write(""================================================\r\n"")
      f.write(""Met threshold of #{AI_ABILITY_TESTING_THRESHOLD}: #{thresholded_abilities.length}\r\n"")
      f.write(""================================================\r\n"")
      thresholded_abilities.each do |a|
        f.write(a[0].to_s)
        f.write("" "" * (5 + max_ability_length - a[0].to_s.length))
        f.write(a[1].to_s)
        f.write(""\r\n"")
      end
      f.write(""\r\n"")
      f.write(""\r\n"")
      f.write(""\r\n"")
      f.write(""================================================\r\n"")
      f.write(""Remaining abilities: #{remaining_abilities.length}\r\n"")
      f.write(""================================================\r\n"")
      remaining_abilities.each do |a|
        f.write(a.to_s)
        if $tested_abilities && $tested_abilities[a]
          f.write("" "" * (5 + max_ability_length - a.to_s.length))
          f.write($tested_abilities[a].to_s)
        end
        f.write(""\r\n"")
      end
    end
    echoln ""Abilities: #{thresholded_abilities.length} tested at least #{AI_ABILITY_TESTING_THRESHOLD} times.""
    echoln ""           #{remaining_abilities.length} abilities need more testing.""

    #---------------------------------------------------------------------------

    max_item_length = 0
    ITEMS_WITH_HELD_EFFECTS.each { |i| max_item_length = [i.to_s.length, max_item_length].max }
    thresholded_items = []
    ($tested_items || {}).each_pair do |item, count|
      next if !count || count < AI_ITEM_TESTING_THRESHOLD
      thresholded_items.push([item, count])
    end
    thresholded_items.sort! { |a, b| a[0].to_s <=> b[0].to_s }
    remaining_items = ITEMS_WITH_HELD_EFFECTS.clone
    remaining_items += MEGA_STONES.clone
    SIGNATURE_ITEMS.each_pair do |species, items|
      if items.is_a?(Array)
        remaining_items += items
      else
        remaining_items.push(items)
      end
    end
    remaining_items.uniq!
    thresholded_items.each { |i| remaining_items.delete(i[0]) }
    remaining_items.sort! { |a, b| a.to_s <=> b.to_s }

    File.open(""tested items summary.txt"", ""wb"") do |f|
      f.write(0xEF.chr)
      f.write(0xBB.chr)
      f.write(0xBF.chr)
      f.write(""================================================\r\n"")
      f.write(""Met threshold of #{AI_ITEM_TESTING_THRESHOLD}: #{thresholded_items.length}\r\n"")
      f.write(""================================================\r\n"")
      thresholded_items.each do |i|
        f.write(i[0].to_s)
        f.write("" "" * (5 + max_item_length - i[0].to_s.length))
        f.write(i[1].to_s)
        f.write(""\r\n"")
      end
      f.write(""\r\n"")
      f.write(""\r\n"")
      f.write(""\r\n"")
      f.write(""================================================\r\n"")
      f.write(""Remaining items: #{remaining_items.length}\r\n"")
      f.write(""================================================\r\n"")
      remaining_items.each do |i|
        f.write(i.to_s)
        if $tested_items && $tested_items[i]
          f.write("" "" * (5 + max_item_length - i.to_s.length))
          f.write($tested_items[i].to_s)
        end
        f.write(""\r\n"")
      end
    end
    echoln ""Items: #{thresholded_items.length} tested at least #{AI_ITEM_TESTING_THRESHOLD} times.""
    echoln ""       #{remaining_items.length} items need more testing.""
  }
})
"
zqJFebD6,Untitled,LockdateforGHS,MK-61/52,Sunday 25th of June 2023 04:09:05 PM CDT,how 
WK1XBff8,Untitled,LockdateforGHS,SystemVerilog,Sunday 25th of June 2023 04:04:44 PM CDT,"module FullAdder (
  input logic a,
  input logic b,
  input logic carryIn,
  output logic sum,
  output logic carryOut
);
  // Full Adder logic
  assign sum = a ^ b ^ carryIn;
  assign carryOut = (a & b) | (carryIn & (a ^ b));
endmodule

module FullAdderTestbench;
  logic a, b, carryIn;
  logic sum, carryOut;
  
  // Instantiate FullAdder module
  FullAdder dut (
    .a(a),
    .b(b),
    .carryIn(carryIn),
    .sum(sum),
    .carryOut(carryOut)
  );
  
  initial begin
    // Testcase 1
    a = 1'b0;
    b = 1'b0;
    carryIn = 1'b0;
    #10;
    $display(""Testcase 1: a=%b, b=%b, carryIn=%b, sum=%b, carryOut=%b"", a, b, carryIn, sum, carryOut);
    
    // Testcase 2
    a = 1'b1;
    b = 1'b0;
    carryIn = 1'b0;
    #10;
    $display(""Testcase 2: a=%b, b=%b, carryIn=%b, sum=%b, carryOut=%b"", a, b, carryIn, sum, carryOut);
    
    // Testcase 3
    a = 1'b1;
    b = 1'b1;
    carryIn = 1'b1;
    #10;
    $display(""Testcase 3: a=%b, b=%b, carryIn=%b, sum=%b, carryOut=%b"", a, b, carryIn, sum, carryOut);
    
    // End simulation
    $finish;
  end
endmodule

"
tG3r2522,Untitled,KiwontaTv,CSS,Sunday 25th of June 2023 03:38:31 PM CDT,".responsive_table {
    display: normal;
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    -ms-overflow-style: -ms-autohiding-scrollbar,
}

@media (max-width:1002px) {
    .responsive_table {
        display: block;
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        -ms-overflow-style: -ms-autohiding-scrollbar
    }

    .responsive_table>.table-bordered {
        border: 0
    }
}"
tf8HzczT,hFindIndex,CR7CR7,C++,Sunday 25th of June 2023 03:28:59 PM CDT,"class Solution {
public:
    int hIndex(vector<int>& citations) {
        int n = citations.size();
        int left = 0, right = n - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int h = n - mid;

            if (citations[mid] == h) {
                return h;
            } else if (citations[mid] < h) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return n - left;
    }
};"
aud6wPPM,Untitled,emveepee,JSON,Sunday 25th of June 2023 03:24:28 PM CDT,"[""EP014700480244"",""MV014437550000"",""MV012449960000"",""MV012310870000"",""EP025580720030"",""EP025580720031"",""EP025580720032"",""EP005399531069"",""EP034431300062"",""EP038613570034"",""EP031415910033"",""EP029786010010"",""EP035876670007"",""EP027467160023"",""EP035448960010"",""EP029672690008"",""EP029777930016"",""EP045154680033"",""EP045154690032"",""EP047486190004"",""EP000010668452"",""EP000010668453"",""EP000010668454"",""EP000010668455"",""EP000010668456"",""EP000010668457"",""SH036569220000"",""SH017989800000"",""EP019802530188"",""EP027805530045"",""SH045409420000"",""EP000030550731"",""EP005399530690"",""EP027702740008"",""EP011054800243"",""EP014700480166"",""MV011904200000"",""EP002836272779"",""SH034749250000"",""EP027960200068"",""EP027960200054"",""EP000030550773"",""EP027467100009"",""EP005399530884"",""EP005399530975"",""SH022497040000"",""EP029978130001"",""EP029978130002"",""EP035966980077"",""EP022650030203"",""EP017649160049"",""EP037233210019"",""EP029777960083"",""EP044465040024"",""EP046290650037"",""EP029777910039"",""EP024536380172"",""EP033723620128"",""EP046823950024"",""EP046823950055"",""EP038613570035"",""EP034431300094"",""EP031415910038"",""EP035876670008"",""EP032389940005"",""EP029518600018"",""EP022749650042"",""EP039831190030"",""EP041316570034"",""EP027443180021"",""EP029885700013"",""SH023216120000"",""EP005399530807"",""EP032409490261"",""EP020708650037"",""EP012155600010"",""EP013789190013"",""EP030566970006"",""SH022793520000"",""EP000010668460"",""EP000010668461"",""EP010146820271"",""EP041764940001"",""EP002836272780"",""EP037472440016"",""EP028824200023"",""EP021920000071"",""EP021920000072"",""EP032715010015"",""SH039495700000"",""SH047698690000"",""EP005399530796"",""EP029978130003"",""EP029978130004"",""EP035966980068"",""EP022650030200"",""EP017649160065"",""EP037233210020"",""EP029777960057"",""EP044465040025"",""EP046290650038"",""EP029777910041"",""EP024536380191"",""EP033723620129"",""EP046823950026"",""EP046823950056"",""EP038613570036"",""EP034431300065"",""EP031415910043"",""EP035876670009"",""EP032389940006"",""EP029518600019"",""EP022749650043"",""EP039831190002"",""EP041316570018"",""EP027443180038"",""EP029885700014"",""SH039197460000"",""EP005399530871"",""EP032409490271"",""EP020708650038"",""EP012155600011"",""EP013789190014"",""EP030566970008"",""EP000010668462"",""SH004142520000"",""EP041525600014"",""EP039953520010"",""EP025580720077"",""EP039936090009"",""EP002836272781"",""EP037472440017"",""EP028824200024"",""EP028824200025"",""EP024994070040"",""EP024994070041"",""EP024994070042"",""EP005399530797"",""EP029978130005"",""EP029978130006"",""EP035966980071"",""EP022650030207"",""EP017649160031"",""EP037233210021"",""EP029777960062"",""EP044465040026"",""EP046290650039"",""EP029777910042"",""EP024536380213"",""EP033723620130"",""EP046823950028"",""EP046823950057"",""EP038613570037"",""EP034431300063"",""EP031415910036"",""EP035876670010"",""EP032389940007"",""EP029518600020"",""EP022749650044"",""EP039831190003"",""EP041316570033"",""EP032971630001"",""EP029885700015"",""SH036466240000"",""EP005399530872"",""EP032409490272"",""EP020708650039"",""EP021920000068"",""EP013789190015"",""EP013958290007"",""EP013958290011"",""EP000010668463"",""MV009950630000"",""EP002836272782"",""EP037472440018"",""EP028824200027"",""EP028824200028"",""EP005371520082"",""EP005399530798"",""EP029978130007"",""EP029978130008"",""EP035966980073"",""EP022650030212"",""EP017649160064"",""EP037233210022"",""EP029777960058"",""EP044465040017"",""EP046290650040"",""EP029777910044"",""EP024536380186"",""EP033723620133"",""EP046823950002"",""EP046823950058"",""EP038613570038"",""EP034431300066"",""EP031415910037"",""EP035876670011"",""EP032389940008"",""EP029518600021"",""EP022749650045"",""EP039831190004"",""EP041316570055"",""EP032971630003"",""EP029885700016"",""SH027169270000"",""EP005399530888"",""EP032409490273"",""EP020708650040"",""EP013789190017"",""EP013958290004"",""EP013958290005"",""EP000010668451"",""EP011054800281"",""EP041824720002"",""EP002836272783"",""EP037472440019"",""EP028824200029"",""EP028824200030"",""EP015053000084"",""EP015053000085"",""EP015053000086"",""EP005399530799"",""EP035966980047"",""EP035966980072"",""EP022650030187"",""EP017649160082"",""EP037233210023"",""EP029777960059"",""EP044465040018"",""EP046290650041"",""EP029777910045"",""EP024536380216"",""EP033723620136"",""EP046823950003"",""EP046823950059"",""EP038613570039"",""EP034431300067"",""EP031415910063"",""EP035876670012"",""EP032389940009"",""EP029518600022"",""EP022749650046"",""EP039831190010"",""EP041316570041"",""EP032971630004"",""EP029885700017"",""EP027960200051"",""EP005399531596"",""EP032409490274"",""EP020708650041"",""EP012155600012"",""EP013789190111"",""EP013958290006"",""EP013958290008"",""EP007886020296"",""EP000010668464"",""EP021920000087"",""EP041556460015"",""EP035691300004"",""EP001717850106"",""EP002836272784"",""EP037472440020"",""EP028824200031"",""EP020708650059"",""EP020708650060"",""EP020708650062"",""EP020708650063"",""EP005399530800"",""EP034431300099"",""EP038613570001"",""EP031415910044"",""EP029786010009"",""EP035876670013"",""EP027467160024"",""EP035966980048"",""EP035966980075"",""EP035966980008"",""EP046290650001"",""EP046290650002"",""EP046290650003"",""EP046290650004"",""EP044465040019"",""EP044465040015"",""EP017649160048"",""EP017649160012"",""EP017649160013"",""EP017649160016"",""EP037233210003"",""EP037233210004"",""EP037233210005"",""EP037233210006"",""EP044465040016"",""EP044465040022"",""EP027443180010"",""EP032971630005"",""EP029786010001"",""EP029786010002"",""EP029786010003"",""EP021920000074"",""SH047790100000"",""SH040865750000"",""EP021920000076"",""EP029515560364"",""SH014700480000"",""EP021920000069"",""SH046604620000"",""SH047859170000"",""SH028167520000"",""EP026169050008"",""EP026169050009"",""EP026169050010"",""EP000095273269"",""EP034431300069"",""EP038613570002"",""EP031415910045"",""EP029786010008"",""EP035876670014"",""EP027467160025"",""EP035448960011"",""EP029672690009"",""EP029777930023"",""EP045154680034"",""EP045154690033"",""EP047486190005"",""EP000030550710"",""EP019802530186"",""EP045249560014"",""EP000095273268"",""EP027702740034"",""EP027702740035"",""EP011054800244"",""SH044470980000"",""SH045876470000"",""EP002836272785"",""EP032409700009"",""EP027960200021"",""EP004011350065"",""EP027467100010"",""EP005399531184"",""EP035966980050"",""EP035966980052"",""EP022650030168"",""EP017649160038"",""EP037233210027"",""EP029777960077"",""EP044465040020"",""EP046290650043"",""EP029777910059"",""EP024536380219"",""EP033723620135"",""EP046823950007"",""EP046823950060"",""EP038613570003"",""EP034431300117"",""EP031415910046"",""EP035876670015"",""EP032389940010"",""EP029518600023"",""EP022749650047"",""EP039831190031"",""EP041316570010"",""EP027443180032"",""EP029885700018"",""EP005399530916"",""EP032409490275"",""EP020708650042"",""EP012155600014"",""EP013789190019"",""EP024556820005"",""EP024556820008"",""EP000010668476"",""EP000010668474"",""EP024170200001"",""EP025695370027"",""EP030973940011"",""SH015397360000"",""EP000037101397"",""EP021639360044"",""EP004730071208"",""EP042235110330"",""SH000000010000"",""SH000191120000"",""EP003889630162"",""EP027582330003"",""SH007021560000"",""SH031093160000"",""SH028130110000"",""EP002830790472"",""EP014752730451"",""EP015515980179"",""EP029840530005"",""EP021639360031"",""EP029840410059"",""EP029840410056"",""EP037582930019"",""EP000167471429"",""SH015397380000"",""EP004730071209"",""EP000000351695"",""EP035115960035"",""EP034346230061"",""EP011583610327"",""EP000167471411"",""EP000167471418"",""EP021639360007"",""EP038713650005"",""EP001945440722"",""SH031598730000"",""SH014795310000"",""EP008473332939"",""SH015957290000"",""EP040105740456"",""EP043399210096"",""EP013078552733"",""EP035800890451"",""EP035800890452"",""EP019509620011"",""EP047680710007"",""SH015397350000"",""EP004730071210"",""EP042235110331"",""EP040105740457"",""EP039058440032"",""EP022979720080"",""EP038740940037"",""EP019062761370"",""SH010296600000"",""EP032812160655"",""EP016815410242"",""EP001945440723"",""EP015515980193"",""EP008473332851"",""EP043399210097"",""EP013078552643"",""EP035800890379"",""EP035800890380"",""EP019509620016"",""EP047680710008"",""EP004730071211"",""EP042235110332"",""EP040105740458"",""EP038740950037"",""EP029715140100"",""EP032303000067"",""EP019062761346"",""EP032812160653"",""EP016815410243"",""EP001945440724"",""EP015515980194"",""EP008473332862"",""EP043399210075"",""EP013078552729"",""EP035800890375"",""EP035800890376"",""EP019509620017"",""EP047680710009"",""EP004730071212"",""EP042235110333"",""EP040105740459"",""EP047164910003"",""EP013918590087"",""EP019062761349"",""EP032812160649"",""EP016815410244"",""EP001945440725"",""EP015515980206"",""EP008473332928"",""EP043399210076"",""EP013078552721"",""EP035800890351"",""EP035800890352"",""EP019509620022"",""EP047680710010"",""EP004730071213"",""EP042235110334"",""EP040105740460"",""EP017386900232"",""EP043135100019"",""EP038234070031"",""EP019062761433"",""EP032812160663"",""EP016815410245"",""EP001945440726"",""EP015515980195"",""EP008473332927"",""EP043399210104"",""EP013078552726"",""EP035800890588"",""EP035800890589"",""EP019509620023"",""EP047680710011"",""EP004730071214"",""EP042235110335"",""EP040105740435"",""EP024952650001"",""EP024952650002"",""EP043135230017"",""EP034346230064"",""EP019062761351"",""EP032812160654"",""EP016815410246"",""EP016007660023"",""EP026446730012"",""EP017023200035"",""SH013359550000"",""EP041087350016"",""EP000415460367"",""SH006039590000"",""EP027601480005"",""EP042235110336"",""EP037197760001"",""EP037197760002"",""EP034236070021"",""EP029840470053"",""EP004730071215"",""EP024170200002"",""EP025695370028"",""EP030973940012"",""EP000037101440"",""EP021639360045"",""EP003889630163"",""EP027582330004"",""EP026446730020"",""EP002830790348"",""EP029840560005"",""EP019509620007"",""EP029840530006"",""EP021639360032"",""EP029840410060"",""EP029840410058"",""EP037582930020"",""SH000167470000"",""EP004730071216"",""SH000000350000"",""EP033314780047"",""EP034346230063"",""EP024952650031"",""EP000167471407"",""MV013141160000"",""EP038713650006"",""SH001945440000"",""EP015515980196"",""EP008473332976"",""EP043399210103"",""SH013078550000"",""EP035800890644"",""EP035800890645"",""EP019509620024"",""EP047680710012"",""EP004730071217"",""EP042235110337"",""EP040105740451"",""EP043511550011"",""SH047745440000"",""SH025238480000"",""SH027644350000"",""EP030625760160"",""MV009248860000"",""MV003843320000"",""SH019762020000"",""EP022531710181"",""EP042019150001"",""EP040253300017"",""EP028424990044"",""EP028424990045"",""EP033327520005"",""EP046245210019"",""EP028478550006"",""EP039953630036"",""EP030633250017"",""EP036095480084"",""EP037046800028"",""EP029885790094"",""EP036242310046"",""EP034711080057"",""EP030449230019"",""EP047029000012"",""EP026493530071"",""EP044459920010"",""EP046938210026"",""EP030449240027"",""EP039956720071"",""EP021006010049"",""EP042517710021"",""EP024990800059"",""EP041473750007"",""EP021006010040"",""EP030062380033"",""EP031647030016"",""EP029885860044"",""EP030449240074"",""EP027654690019"",""EP017028380369"",""EP017020510322"",""SH020829810000"",""EP000211610895"",""EP017020570567"",""EP043435530015"",""EP046556980007"",""MV018308090000"",""EP015502710110"",""SH043683640000"",""EP017020510323"",""EP029633640052"",""EP036840800032"",""EP028586140060"",""MV000308550000"",""MV003394070000"",""EP034763800007"",""EP034763800008"",""EP022530990081"",""EP022423670069"",""EP034003800019"",""EP021006010058"",""EP029885860046"",""EP029885790148"",""EP037791650012"",""EP002799100085"",""EP028505160055"",""EP030633250133"",""EP023536110099"",""EP039953630030"",""EP041415300016"",""EP017867070167"",""EP017867070177"",""EP021006010062"",""EP046938210030"",""EP036095480068"",""EP029885390003"",""EP033620050025"",""EP029885730049"",""EP021558620092"",""EP031953730002"",""EP030396680019"",""EP030396680020"",""EP029885390029"",""EP029885730100"",""EP030062380008"",""EP028558490092"",""EP031053030236"",""EP021006010053"",""EP017398420074"",""EP017398420076"",""EP017026821565"",""EP036035830355"",""SH006819690000"",""EP037463700009"",""EP043434920006"",""MV001644600000"",""EP015754530032"",""EP041392790016"",""SH006820060000"",""EP038308450185"",""EP030405030013"",""EP040067210005"",""EP031854180402"",""SH006820020000"",""EP023357470046"",""EP034402760005"",""SH010894020000"",""EP034763800009"",""EP034763800010"",""EP035227820040"",""EP032166980001"",""EP034003800025"",""EP021006010052"",""EP029885860037"",""EP030441290009"",""EP037791650006"",""EP030105380027"",""EP028505160056"",""EP030633250110"",""EP023536110104"",""EP039953630037"",""EP041415300007"",""EP017867070170"",""EP017867070138"",""EP030062380030"",""EP033620050008"",""EP029885730001"",""EP036095480071"",""EP029885390001"",""EP047026320016"",""EP021558620093"",""EP031953730065"",""EP030396680021"",""EP030396680022"",""EP029885390010"",""EP030062380018"",""EP041473750012"",""EP028558490093"",""EP031053030080"",""EP030449240085"",""EP017398420075"",""EP017398420077"",""EP017026821566"",""EP036035830426"",""EP038771230035"",""MV010038960000"",""EP015754530033"",""EP038308450186"",""EP044729650009"",""EP043434920008"",""EP031854180403"",""EP026581100010"",""EP030710880042"",""EP034763800012"",""EP034763800011"",""EP022530990099"",""EP022423670020"",""EP034003800021"",""EP021006010054"",""EP029885860013"",""EP029885730037"",""EP037791650013"",""EP030105380018"",""EP028505160057"",""EP030633250125"",""EP023536110100"",""EP039953630034"",""EP041415300020"",""EP017867070142"",""EP017867070188"",""EP030062380026"",""EP046938210041"",""EP036095480063"",""EP020605040028"",""EP029885390051"",""EP021558620094"",""EP031953730077"",""EP030396680023"",""EP030396680027"",""EP029885390041"",""EP029885860042"",""EP030449240016"",""EP028558490094"",""EP021006010073"",""EP041473750021"",""EP017398420078"",""EP017398420080"",""EP017026821567"",""EP036035830357"",""EP038771230065"",""MV012354410000"",""EP015754530034"",""EP038308450187"",""EP017020570568"",""EP016444200079"",""EP031854180404"",""EP021621560007"",""EP038578320010"",""EP034763800014"",""EP034763800013"",""EP022530990123"",""EP022423670064"",""EP034003800024"",""EP021006010061"",""EP030062380003"",""EP029885730067"",""EP037791650014"",""EP030105380005"",""EP028505160077"",""EP030633250148"",""EP023536110102"",""EP039953630038"",""SH036095480000"",""EP030633250072"",""EP026493530155"",""EP017867070172"",""EP017867070157"",""EP029885860025"",""EP033620050015"",""EP030449240019"",""EP036095480072"",""EP020605040032"",""EP030449240042"",""EP021558620095"",""EP031953730125"",""EP030396680028"",""EP030396680029"",""EP029885730022"",""EP029885390009"",""EP030062380017"",""EP028558490095"",""EP029885860032"",""EP030449240037"",""EP017398420081"",""EP017398420083"",""EP017026821568"",""EP036035830358"",""EP038771230072"",""MV000600890000"",""EP015754530035"",""EP038308450188"",""EP025894990041"",""EP040950770032"",""EP031854180405"",""EP041231420002"",""EP036548670003"",""EP034763800015"",""EP034763800016"",""EP022530990160"",""EP022423670051"",""EP034003800001"",""EP021006010059"",""EP029885860027"",""EP029885790034"",""EP037791650007"",""EP030105380011"",""EP028505160063"",""EP030633250146"",""EP023536110101"",""EP039953630032"",""EP030633250043"",""EP026493530150"",""EP017867070159"",""EP017867070155"",""EP030633250046"",""EP030062380021"",""EP046938210012"",""EP036095480081"",""EP020605040034"",""EP030449240056"",""EP021558620096"",""EP031953730003"",""EP030396680024"",""EP030396680030"",""EP029885390002"",""EP030062380025"",""EP028558490096"",""EP021006010063"",""EP030449240028"",""EP029885730039"",""EP017398420082"",""EP017398420084"",""EP017026821570"",""EP036035830443"",""EP038771230071"",""EP025272080029"",""EP015754530036"",""EP002195290123"",""EP024997780148"",""MV001822710000"",""MV009316080000"",""MV003962760000"",""EP022531710182"",""EP031371440050"",""EP047539760005"",""EP037791090042"",""EP032166980002"",""EP040253300015"",""EP047028930006"",""EP047028930001"",""EP045818360024"",""EP045818360022"",""EP030633250044"",""EP039953630033"",""EP029885270004"",""EP037046800029"",""EP033620050006"",""EP038493920021"",""EP034711080058"",""EP030449230021"",""EP029885390123"",""EP029885390122"",""EP047026320009"",""EP044459920041"",""EP031953730081"",""EP045838450026"",""EP030062380002"",""EP021006010020"",""EP041416520052"",""EP029885860018"",""EP021006010050"",""EP036095910023"",""EP031854940058"",""EP020605040026"",""EP030449240007"",""EP030062380041"",""EP024990790028"",""EP037649510010"",""EP029885860077"",""EP030449240104"",""EP030449240021"",""EP033960880075"",""EP033960880076"",""EP031053030127"",""EP027515680035"",""EP030449240051"",""EP017026821350"",""SH047828520000"",""EP036035830238"",""EP030518300018"",""EP044818540008"",""EP000211610896"",""SH027228870000"",""EP002195290349"",""EP001215700281"",""SH047803420000"",""EP030625760238"",""MV010790080000"",""MV003624600000"",""EP022531710183"",""EP042019150002"",""EP040253300016"",""EP028424990047"",""EP028424990048"",""EP033327520004"",""EP046245210012"",""EP032166980003"",""EP039953630035"",""EP030633250052"",""EP022423670106"",""EP037046800030"",""EP029885730004"",""EP036242310017"",""EP034711080059"",""EP030449230020"",""EP047029000011"",""EP026493530072"",""EP044459920029"",""EP046938210027"",""EP041473750008"",""EP039956720072"",""EP021006010060"",""EP042517710022"",""EP024990800060"",""EP030449240050"",""EP021006010055"",""EP029885860053"",""EP031647030017"",""EP031854840081"",""EP030449240089"",""EP030449240105"",""EP027654690023"",""EP017028380370"",""SH047831220000"",""EP043435530016"",""EP046556980008"",""EP039958710013"",""EP015502710111"",""EP017020510324"",""EP029633640061"",""EP036840800011"",""EP028586140062"",""MV002418660000"",""MV009730170000"",""EP034763800017"",""EP034763800018"",""EP022530990087"",""EP022423670146"",""EP034003800018"",""EP021006010064"",""EP029885860033"",""EP029885790072"",""EP037791650015"",""EP002799100043"",""EP028505160059"",""EP030633250145"",""EP023536110098"",""EP039953630040"",""EP041415300067"",""EP017867070168"",""EP017867070154"",""EP021006010066"",""EP020605040031"",""EP029885730112"",""EP036095480066"",""EP046938210033"",""EP030449240052"",""EP021558620097"",""EP031953730011"",""EP030396680025"",""EP030396680031"",""EP029885390014"",""EP029885860017"",""EP030449240023"",""EP028558490097"",""EP031053030063"",""EP021006010072"",""EP017398420085"",""EP017398420086"",""EP017026821571"",""EP036035830450"",""EP037463700010"",""EP038771230070"",""MV000304360000"",""SH015754530000"",""EP041392790017"",""EP038308450189"",""EP030405030014"",""EP005927270091"",""EP040302310001"",""SH031180630000"",""SH011824710000"",""SH011444650000"",""SH000031380000"",""SH033203180000"",""SH007260950000"",""EP044658770165"",""SH001541920000"",""EP000006380285"",""SH015138970000"",""EP000006380284"",""EP000006380291"",""MV000285950000"",""MV000019560000"",""SH011824700000"",""EP000168931141"",""MV000491040000"",""SH025797290000"",""SH009620240000"",""EP000021790145"",""EP000021790148"",""EP000005520230"",""EP000030200212"",""SH039129660000"",""EP000003240128"",""EP000018430013"",""EP000020140121"",""EP000041700091"",""EP000025440053"",""EP000013710007"",""EP000008820153"",""EP000019960143"",""SH044658770000"",""EP000191907751"",""MV002486450000"",""EP044658770166"",""EP000021790149"",""EP000021790150"",""EP000005520231"",""EP000030200213"",""EP000003240129"",""EP000018430014"",""EP000020140122"",""EP000041700092"",""EP000025440058"",""EP000013710008"",""EP000008820152"",""EP000019960144"",""EP000191907752"",""MV009757370000"",""EP044658770167"",""EP000021790151"",""EP000021790152"",""EP000005520232"",""EP000030200214"",""EP000003240130"",""EP000018430016"",""EP000020140123"",""EP000041700094"",""EP000025440055"",""EP000013710009"",""EP000008820154"",""EP000019960142"",""EP000191907753"",""EP005927270093"",""EP036803580007"",""SH047254250000"",""EP044658770168"",""EP000021790153"",""EP000021790154"",""EP000005520233"",""EP000030200215"",""EP000003240131"",""EP000018430017"",""EP000020140124"",""EP000041700106"",""EP000025440052"",""EP000013710010"",""EP000008820155"",""EP000019960145"",""EP000191907754"",""EP001151310057"",""EP012796660046"",""EP012796660047"",""EP015404330032"",""EP044658770169"",""EP000021790155"",""EP000021790156"",""EP000005520234"",""EP000030200217"",""EP000003240132"",""EP000018430018"",""EP000020140126"",""EP000041700095"",""EP000025440061"",""EP000013710011"",""EP000008820157"",""EP000019960153"",""EP000191907755"",""EP032404550010"",""SH000000210000"",""EP044658770170"",""EP000006380280"",""EP046872950023"",""EP041782070001"",""EP000006380289"",""EP000006380281"",""EP046872950024"",""SH000168930000"",""MV003309860000"",""EP000021790157"",""EP000021790158"",""EP000005520235"",""EP000030200219"",""EP000003240133"",""EP000018430019"",""EP000020140125"",""EP000041700098"",""EP000025440059"",""EP000013710012"",""EP000008820156"",""EP000019960146"",""EP000191907756"",""MV017807990000"",""EP025194930054"",""EP012293150799"",""SH020440450000"",""EP009311820135"",""EP046622840002"",""EP000169160149"",""EP000169160151"",""EP014000660443"",""EP014000660446"",""EP013740110208"",""EP013740110210"",""EP000175140048"",""EP000175140043"",""EP017742723053"",""EP010799900150"",""EP010799900151"",""EP007905130284"",""EP021402450047"",""EP000192070412"",""EP011945080494"",""MV001801350000"",""EP000169160176"",""EP000169160177"",""EP009311820023"",""EP009311820024"",""EP047486140005"",""MV009746950000"",""EP041286070007"",""EP012293150800"",""EP009311820136"",""EP002298270800"",""EP018495550112"",""EP018495550113"",""EP031899380014"",""EP031899380015"",""EP040824332373"",""EP040824332374"",""EP040824332375"",""EP040824332376"",""EP040824332377"",""EP046813610051"",""EP013117843334"",""EP002253956098"",""EP017742723054"",""EP005178513672"",""EP032302210022"",""EP026422390094"",""EP009311820179"",""EP009311820180"",""SH027632580000"",""EP008365653581"",""EP009311820115"",""EP012100200506"",""EP047742100002"",""EP038120760041"",""EP044454160214"",""EP009311820038"",""EP019952931211"",""EP009311820138"",""EP000169160009"",""EP000169160013"",""EP000169160166"",""EP010799900012"",""EP010799900013"",""EP040824332378"",""EP040824332379"",""EP040824332380"",""EP040824332381"",""EP040824332382"",""EP046813610052"",""EP013117843330"",""EP002253956099"",""EP017742723055"",""EP005178513674"",""EP032302210023"",""EP026422390095"",""EP009311820181"",""EP009311820182"",""EP008365653582"",""EP009311820106"",""MV019751190000"",""EP009311820204"",""EP009311820205"",""EP044454160215"",""EP009311820039"",""EP019952931184"",""EP009311820139"",""EP000169160014"",""EP000169160017"",""EP000169160171"",""EP010799900017"",""EP010799900018"",""EP040824332383"",""EP040824332384"",""EP040824332385"",""EP040824332386"",""EP040824332387"",""EP046813610053"",""EP013117843333"",""EP002253956100"",""EP017742723056"",""EP005178513676"",""EP032302210024"",""EP026422390096"",""EP009311820183"",""EP009311820184"",""EP008365653583"",""EP009311820114"",""MV007508260000"",""EP044454160216"",""EP009311820040"",""EP019952931189"",""EP009311820140"",""EP000169160015"",""EP000169160018"",""EP000169160178"",""EP010799900019"",""EP010799900020"",""EP040824332388"",""EP040824332389"",""EP040824332390"",""EP040824332391"",""EP040824332392"",""EP046813610054"",""EP013117843322"",""EP002253956101"",""EP017742723057"",""EP005178513654"",""EP032302210025"",""EP026422390097"",""EP009311820188"",""EP009311820189"",""EP008365653584"",""EP009311820117"",""EP032881650011"",""EP041286070017"",""EP041286070018"",""EP009311820293"",""EP009311820219"",""EP044454160217"",""EP009311820041"",""EP019952931190"",""EP009311820137"",""EP000169160027"",""EP000169160028"",""EP000169160189"",""EP010799900021"",""EP010799900022"",""EP040824332393"",""EP040824332394"",""EP040824332395"",""EP040824332396"",""EP040824332397"",""EP046813610055"",""EP013117843313"",""EP002253956061"",""EP017742723058"",""EP005178513655"",""EP032302210026"",""EP026422390098"",""EP009311820190"",""EP009311820193"",""EP008365653585"",""EP009311820119"",""EP009311820206"",""EP009311820207"",""EP044681050012"",""EP012801050266"",""EP044454160218"",""EP009311820042"",""EP019952931208"",""EP033864120028"",""EP000169160029"",""EP000169160030"",""EP000169160201"",""EP025797990011"",""EP010799900023"",""EP040823280077"",""EP004154020544"",""EP004154020545"",""EP013824150179"",""EP022749760253"",""EP027908470040"",""EP032644250051"",""MV000494120000"",""EP006356110096"",""EP006356110098"",""EP000169160180"",""EP000169160181"",""EP009311820002"",""EP009311820003"",""EP011945080463"",""MV006624330000"",""EP025194930055"",""EP012293150801"",""EP009311820043"",""EP046622840003"",""EP000169160160"",""EP000169160161"",""EP014000660444"",""EP014000660445"",""EP013740110211"",""EP013740110212"",""EP000175140046"",""EP000175140052"",""EP017742723059"",""EP010799900153"",""EP010799900154"",""EP007905130282"",""EP021402450048"",""EP031081800001"",""MV011856050000"",""EP006356110107"",""EP006356110109"",""EP000169160182"",""EP000169160183"",""EP009311820162"",""EP009311820168"",""EP047486140006"",""SH047486140000"",""SH032302210000"",""SH035124650000"",""EP012293150802"",""EP009311820068"",""EP002298270801"",""EP018495550116"",""EP018495550118"",""EP031899380016"",""EP031899380017"",""EP040824332398"",""EP040824332399"",""EP040824332400"",""EP040824332401"",""EP040824332402"",""EP046813610056"",""EP013117843412"",""SH002253950000"",""EP004154020331"",""EP004154020332"",""SH017742720000"",""EP005178513650"",""EP032302210028"",""EP026422390099"",""EP009311820192"",""EP009311820191"",""EP008365653586"",""EP009311820118"",""SH012064090000"",""SH047647770000"",""SH005320250000"",""SH005335670000"",""SH035967850000"",""SH012995710000"",""SH036183570000"",""SH005335930000"",""SH004336460000"",""SH005423640000"",""SH005335890000"",""SH005335900000"",""SH036803600000"",""SH022564740000"",""SH019902500000"",""SH000868420000"",""SH005320190000"",""SH032998770000"",""SH027614920000"",""SH010841860000"",""SH017967320000"",""SH031844010000"",""EP042466050013"",""EP042466050014"",""EP047164210003"",""EP042466050015"",""EP047450420003"",""SH000227310000"",""SH021845600000"",""SH027565460000"",""SH036354960000"",""SH027697020000"",""SH021845610000"",""SH039378420000"",""SH005393540000"",""EP045564810020"",""SH026413650000"",""EP033505110017"",""SH006056640000"",""SH019942840000"",""SH008881620000"",""EP033505110018"",""SH020205650000"",""SH005335880000"",""SH001793620000"",""SH045397210000"",""EP033505110019"",""SH033362860000"",""SH000902800000"",""SH033007820000"",""EP033505110020"",""SH020414610000"",""SH013703210000"",""SH019943180000"",""SH025085470000"",""SH036183580000"",""SH045397220000"",""EP033505110021"",""SH005320150000"",""SH003264780000"",""SH016674390000"",""EP045564810021"",""EP047164210004"",""EP042466050016"",""EP047450420004"",""EP032409490021"",""EP032409490022"",""EP011054800128"",""EP015404330060"",""EP003209660029"",""SH010385310000"",""EP023878060051"",""EP005927200009"",""EP005927200010"",""EP005927200011"",""SH027568650000"",""SH028800540000"",""SH025177120000"",""SH013530620000"",""SH025554950000"",""SH026942630000"",""SH011259640000"",""SH010492460000"",""EP013824150178"",""SH007905130000"",""SH008645330000"",""SH028447240000"",""SH026754640000"",""SH015861730000"",""EP000229440802"",""SH047682530000"",""SH022058520000"",""SH010475200000"",""SH029044250000"",""SH002357040000"",""SH022838860000"",""SH017610830000"",""SH015167650000"",""SH017938000000"",""EP047387740004"",""EP000390601387"",""EP015474730041"",""EP015404330061"",""EP024994070030"",""SH031084270000"",""SH000192200000"",""EP040741500033"",""EP023878060041"",""EP002870760392"",""SH004272750000"",""SH008682030000"",""SH000000110000"",""SH008062770000"",""SH024495040000"",""SH030201800000"",""EP035393920001"",""EP030082090926"",""EP030082090975"",""EP000023485155"",""EP019581181685"",""EP019581181568"",""EP026765470022"",""EP007128720096"",""EP012800630218"",""EP000047624158"",""EP000023485220"",""EP012801050163"",""EP039396880052"",""EP009594620135"",""EP039410140210"",""EP039410140211"",""EP001143630067"",""EP001143630068"",""SH003537340000"",""SH029085110000"",""EP023473400058"",""EP035393920002"",""SH003781610000"",""EP030082090927"",""EP030082090976"",""EP000023485156"",""EP019581181649"",""EP019581181556"",""EP026765470023"",""EP007128720097"",""EP012800630219"",""EP000047624159"",""EP000023485221"",""EP012801050164"",""EP032223480061"",""EP009594620136"",""EP039410140212"",""EP039410140213"",""EP001143630069"",""EP001143630070"",""EP035393920003"",""EP039611870007"",""EP030082090928"",""EP030082090977"",""EP000023485157"",""EP019581181631"",""EP019581181555"",""EP026765470024"",""EP007128720098"",""EP012800630220"",""EP000047624304"",""EP000023485222"",""EP012801050165"",""EP039611870008"",""EP009594620137"",""EP039410140214"",""EP039410140215"",""EP001143630071"",""EP001143630072"",""EP040741500034"",""SH033355940000"",""SH032683520000"",""SH024045810000"",""EP035393920004"",""EP030082090929"",""EP030082090978"",""EP000023485158"",""EP019581181648"",""EP019581181511"",""EP026765470025"",""EP007128720100"",""EP012800630221"",""EP000047624161"",""EP000023485223"",""EP012801050166"",""EP047757250002"",""EP009594620138"",""EP039410140216"",""EP039410140217"",""EP001143630073"",""EP001143630074"",""EP023878060031"",""EP032872050007"",""SH009541930000"",""EP035393920005"",""EP030082090930"",""EP030082090979"",""EP000023485159"",""EP019581181650"",""EP019581181503"",""EP026765470026"",""EP007128720101"",""EP012800630222"",""EP000047624162"",""EP000023485224"",""EP041764940003"",""EP037906230003"",""EP009594620139"",""EP039410140218"",""EP039410140219"",""EP001143630075"",""EP001143630076"",""SH004551680000"",""SH000195270000"",""EP047432400005"",""SH027387190000"",""SH006909070000"",""EP047387740009"",""EP002870760279"",""EP029641160002"",""EP005927200039"",""EP037906230008"",""EP036894440014"",""EP000047623999"",""EP000023484970"",""EP032409490023"",""EP032409490024"",""EP011054800129"",""EP015404330063"",""EP003209660030"",""EP023878060089"",""EP005927200013"",""EP005927200012"",""EP005927200014"",""EP000229440674"",""SH019549300000"",""EP000390601388"",""EP015474730043"",""EP015404330062"",""EP024994070031"",""EP035393920006"",""EP030082090931"",""EP030082090980"",""EP000023485160"",""EP019581181653"",""EP019581181514"",""EP026765470027"",""EP007128720102"",""EP012800630223"",""EP000047624168"",""EP000023485225"",""EP034218100025"",""EP041454990003"",""MV015346990000"",""EP027211820015"",""EP030915560005"",""MV006431450000"",""EP032048810004"",""EP029350050003"",""EP028414190004"",""EP041454990002"",""EP027211820010"",""EP029350050011"",""EP034367050070"",""EP029117300119"",""EP018228340012"",""EP042792930013"",""EP041344970008"",""EP003879680322"",""EP029953470007"",""EP040034540023"",""EP037975100052"",""EP042147100022"",""EP042080190016"",""EP021818960005"",""EP038599840055"",""EP028933120028"",""EP043432550019"",""EP037139390017"",""EP030520130089"",""EP000441070806"",""EP035086110047"",""EP017649161224"",""EP026953070137"",""EP031199760167"",""EP030039120007"",""EP032204950059"",""EP020042990030"",""EP034893320070"",""EP013451880163"",""EP003879680321"",""EP039527420102"",""EP038599810029"",""EP024905060100"",""EP029953470008"",""EP044056660011"",""EP041454880023"",""EP046975220010"",""EP029278360030"",""EP043320270033"",""EP041000980036"",""EP038890510001"",""EP042234930017"",""EP032896640009"",""EP039583000008"",""EP032038570071"",""EP034811980039"",""EP017649160118"",""EP044152880003"",""EP026746320045"",""EP029271630068"",""EP024905060142"",""EP036093310029"",""EP033116050033"",""EP029278360089"",""EP037573370108"",""EP038201450054"",""EP042147100023"",""EP023243390342"",""EP026953070138"",""EP030404920001"",""EP030887270004"",""EP026902190017"",""EP041454880027"",""EP034367050059"",""EP037975100053"",""EP035135370012"",""EP023917640051"",""EP000441070796"",""EP044159430001"",""EP003879680320"",""EP020042990045"",""EP013451880175"",""EP037750340002"",""EP030887720049"",""EP034367030136"",""EP013127620002"",""EP029350050008"",""MV011976850000"",""EP032048810005"",""MV018166760000"",""MV013935400000"",""SH030261330000"",""EP029350050010"",""EP041454990005"",""EP030833430005"",""EP008611822070"",""EP034367050073"",""EP003879680319"",""EP037975100058"",""SH046921710000"",""EP041344970039"",""EP030404920086"",""EP017649161047"",""EP013451880165"",""EP035632340021"",""EP003879680318"",""EP034586300002"",""EP023917640016"",""EP042147100010"",""EP035135370018"",""SH017649160000"",""EP042589980030"",""EP044056660012"",""EP042792930019"",""EP036093310053"",""EP039253360021"",""EP038201450050"",""EP033116050029"",""EP039527420103"",""EP024905060109"",""EP046380210017"",""EP030683690059"",""EP038599810031"",""EP046975220013"",""EP029278360041"",""EP044525040019"",""EP003879680324"",""EP026953070139"",""EP040034540024"",""EP035922010007"",""EP026746320091"",""EP034811980042"",""EP043432550021"",""EP044056660013"",""EP037496010014"",""EP023917640018"",""EP038599840020"",""EP043432550028"",""EP035086110023"",""EP034893320072"",""EP031199760168"",""EP038960360024"",""EP024905060143"",""EP026901620008"",""EP042080190021"",""EP041454880038"",""EP039527420104"",""SH037573370000"",""EP034367050062"",""EP033116050001"",""EP029784700030"",""EP041000980037"",""EP030652730003"",""EP001939990043"",""EP042792930016"",""EP034586300017"",""EP030039120104"",""EP030404920089"",""EP017649160863"",""EP045621060022"",""EP042589980031"",""EP039253360009"",""EP000441070838"",""EP026822550012"",""EP020042990337"",""EP032038570004"",""EP032893910002"",""EP013451880166"",""EP032896640011"",""EP036550170010"",""EP034367000012"",""EP038890510038"",""EP024926420008"",""EP028366170054"",""EP015105210054"",""EP008611822071"",""MV013145880000"",""EP022117330054"",""EP030915560003"",""EP035819010004"",""EP029350050007"",""EP027211820012"",""EP027156310010"",""EP041454990004"",""EP034367050075"",""EP030039120011"",""EP017672470130"",""EP030404920073"",""SH041000980000"",""EP044056660014"",""EP042589980033"",""EP042273120029"",""EP045621060021"",""EP035246930025"",""EP017649160908"",""EP013451880160"",""EP020042990389"",""EP029117300009"",""EP038960360025"",""EP038350620070"",""EP046921710037"",""SH025834230000"",""EP039583000007"",""EP023917640019"",""EP026822550001"",""EP038599840066"",""EP044159430005"",""EP037975100019"",""EP034367050067"",""EP039527420001"",""EP038599810035"",""EP024905060106"",""EP038350620027"",""EP041454880034"",""EP037496010021"",""EP022429650136"",""EP029278360032"",""EP039253350011"",""EP026902190013"",""EP026901620020"",""SH044056660000"",""EP021818960006"",""EP038350620011"",""EP035135370013"",""EP035086110012"",""EP026746320046"",""EP034811980040"",""EP038810250004"",""EP044056660015"",""EP030404920051"",""EP023243390307"",""EP032204950054"",""EP031199760169"",""EP036093310012"",""EP042080190003"",""EP024905060144"",""EP040034540025"",""EP042147100001"",""EP033116050002"",""EP029278360090"",""EP022429650120"",""EP041454880025"",""EP034367050069"",""EP037496010019"",""EP011228490011"",""EP017672470135"",""EP036374300018"",""EP001939990044"",""EP026746320207"",""EP017649160878"",""EP042589980034"",""EP032198440021"",""EP000441070455"",""EP020042990339"",""EP044152880004"",""EP038810250007"",""EP035086110075"",""EP013451880102"",""EP042234930011"",""EP038230030013"",""EP029837590012"",""EP029837240021"",""EP028366170047"",""EP013198370019"",""EP027211820014"",""EP008611822072"",""SH043008880000"",""SH036253530000"",""EP027211820008"",""EP027211820007"",""EP032048810002"",""EP023636690014"",""EP034367050077"",""EP003879680325"",""EP037975100020"",""EP030683690060"",""EP038350620073"",""EP043432550013"",""EP017649160919"",""EP013451880103"",""EP035632340022"",""EP003879680326"",""EP028366170016"",""EP023917640020"",""EP035135370014"",""EP037139390015"",""EP041454880024"",""EP036093310030"",""EP043320270030"",""EP038201450040"",""EP033116050003"",""EP039527420002"",""EP024905060003"",""EP044056660016"",""EP038599810026"",""EP046975220014"",""EP029278360033"",""EP039253350003"",""EP003879680327"",""EP045621060039"",""EP026953070140"",""EP040034540026"",""EP035922010008"",""EP038890510002"",""EP034811980044"",""EP038810250008"",""EP038350620076"",""EP044056660017"",""EP023917640021"",""EP042792930007"",""EP032198440009"",""EP034893320092"",""EP031199760170"",""EP038960360001"",""EP024905060145"",""EP030683690064"",""EP039527420003"",""EP034367050068"",""EP041454880028"",""EP041000980045"",""EP030652730008"",""EP001939990049"",""EP038599840031"",""EP038350620014"",""EP030039120018"",""EP030404920074"",""EP017649161239"",""EP045621060032"",""EP042589980003"",""EP034586300025"",""EP000441070839"",""EP020042990338"",""EP034367030119"",""EP013451880112"",""EP037750340003"",""EP029271630069"",""EP044152880005"",""EP035086110061"",""EP038599840059"",""EP036550170011"",""EP021431860004"",""EP008611822073"",""EP028944130015"",""SH043851330000"",""EP027211820001"",""EP046046710001"",""EP027420540009"",""EP032048810001"",""EP025185050006"",""EP029350050002"",""EP034367050078"",""EP030039120005"",""EP017672470134"",""EP041000980046"",""EP028933120086"",""EP042589980009"",""EP017649160920"",""EP013451880107"",""EP020042990390"",""EP039253360002"",""EP029117300118"",""EP038960360002"",""EP046921710036"",""EP023917640022"",""EP035922010009"",""EP037975100021"",""EP034367050066"",""EP039527420004"",""EP024905060028"",""EP044056660018"",""EP041454880026"",""EP038599810033"",""EP022429650121"",""EP029278360034"",""EP039253350014"",""EP026902190015"",""EP026901620016"",""EP021818960009"",""EP038350620017"",""EP035135370021"",""EP026746320092"",""EP034811980031"",""EP038810250009"",""EP044056660019"",""EP023243390306"",""EP044152880006"",""EP031199760171"",""EP036093310031"",""EP030404920088"",""EP024905060146"",""EP038201450056"",""EP033116050004"",""EP029278360035"",""EP028102960117"",""EP041454880035"",""EP029953470005"",""EP011228490012"",""EP017672470111"",""EP001939990052"",""EP026746320208"",""EP017649160889"",""EP042589980007"",""EP000441070456"",""EP020042990397"",""EP043432550022"",""EP036550170012"",""EP034367030120"",""EP013451880106"",""EP038890510003"",""EP038230030014"",""EP034811980028"",""EP042234930025"",""EP037750340010"",""EP040014680002"",""EP008611822074"",""MV018466570000"",""MV018427390000"",""EP030278800003"",""EP038600690002"",""EP034367050079"",""EP003879680328"",""EP037975100022"",""EP029117300120"",""EP038350620086"",""EP020042990246"",""EP041344970040"",""EP017649160929"",""EP013451880108"",""EP035632340023"",""EP003879680329"",""EP036550170013"",""EP023917640023"",""EP030404920084"",""EP035135370024"",""EP017649160782"",""EP042589980012"",""EP038350620085"",""EP044056660020"",""EP036093310026"",""EP043320270032"",""EP034367050064"",""EP033116050005"",""EP039527420005"",""EP024905060004"",""EP038960360003"",""EP039253350012"",""EP046975220015"",""EP029278360036"",""EP042080190020"",""EP003879680391"",""EP026953070141"",""EP040034540001"",""EP026746320216"",""EP034811980032"",""EP017649161032"",""EP017649160120"",""EP044056660021"",""EP023917640024"",""EP035922010001"",""EP032198440033"",""EP034893320093"",""EP031199760172"",""EP038960360004"",""EP024905060147"",""EP026901620007"",""EP042792930003"",""EP042080190011"",""EP041454880037"",""EP039527420006"",""EP037573370109"",""EP034367050028"",""EP030887270005"",""EP029784700028"",""EP039253350027"",""EP011228490016"",""EP030652730010"",""EP001939990041"",""EP038350620088"",""EP045621060031"",""EP032038570090"",""EP017649160885"",""EP041344970009"",""EP042589980013"",""EP039583000021"",""EP000441070854"",""EP020042990344"",""EP032331560013"",""EP032198440050"",""EP013451880114"",""EP034811980027"",""EP032893910005"",""EP035086110039"",""EP030404920081"",""EP028305600003"",""EP032532340041"",""EP029350050001"",""EP008611822075"",""EP001040390247"",""EP041454990001"",""EP030927550005"",""EP030915560004"",""EP027211820004"",""EP036219530007"",""EP039680870006"",""EP039680870007"",""EP017672470114"",""EP026901620004"",""EP032038570087"",""EP011228490010"",""EP031199760115"",""EP044152880007"",""EP044152880008"",""EP046975220016"",""EP037139390010"",""EP038350620072"",""EP041000980051"",""EP041454880052"",""EP030520130090"",""EP026901620006"",""EP017649161029"",""EP017649161265"",""EP035632340024"",""EP030039120016"",""EP028366170053"",""EP020042990336"",""EP013451880117"",""EP003879680392"",""EP033116050006"",""EP039527420007"",""EP024905060006"",""EP030683690001"",""EP022429650126"",""EP038960360005"",""EP026901620001"",""EP036093310027"",""EP040034540002"",""EP033091540033"",""SH035135370000"",""EP029837240005"",""EP028366170015"",""EP017649160121"",""EP033044130022"",""EP026746320047"",""EP032896640012"",""EP024905060148"",""EP036093310054"",""EP038599810030"",""EP039527420008"",""EP037573370114"",""EP034367050001"",""EP029784700027"",""EP031350850002"",""EP038201450036"",""EP026953070146"",""EP030887270006"",""EP034586300008"",""EP030683690002"",""EP034367050009"",""EP037975100023"",""EP035922010010"",""EP042589980015"",""EP000441070900"",""EP044159430002"",""EP028366170055"",""EP020042990040"",""EP013451880116"",""EP033304240023"",""EP044152880009"",""EP044152880010"",""EP017284500005"",""EP045621060064"",""EP046143080009"",""EP031735270001"",""EP034218100038"",""EP027211820020"",""MV019811610000"",""SH042972250000"",""EP034367050082"",""EP029117300121"",""EP031199760117"",""EP033495830002"",""EP042792930017"",""EP032038570088"",""EP003879680393"",""EP042792930006"",""EP040034540003"",""EP037975100024"",""EP042147100004"",""EP042080190019"",""EP021818960015"",""EP038599840052"",""EP028933120040"",""EP024926420036"",""EP037139390022"",""EP030520130092"",""EP000441070913"",""EP026953070147"",""EP031199760173"",""EP030039120021"",""EP020042990078"",""EP034893320094"",""EP013451880118"",""EP003879680330"",""EP039527420009"",""EP038599810032"",""EP024905060020"",""EP029953470006"",""EP044056660022"",""EP041454880008"",""EP046975220017"",""EP029278360037"",""EP043320270038"",""EP038890510004"",""EP024926420021"",""EP034811980048"",""EP017649160122"",""EP044152880011"",""EP026746320051"",""EP029271630070"",""EP024905060149"",""EP036093310015"",""EP033116050007"",""EP029278360091"",""EP037573370115"",""EP038201450052"",""EP042147100024"",""EP023243390308"",""EP026953070148"",""EP030404920007"",""EP030887270007"",""EP026902190021"",""EP041454880007"",""EP034367050048"",""EP037975100025"",""EP030404920061"",""EP023917640025"",""EP000441070797"",""EP044159430007"",""EP003879680331"",""EP020042990051"",""EP013451880113"",""EP030887720050"",""EP034367030121"",""EP025185050001"",""EP041561980001"",""EP046689640001"",""EP030833430008"",""SH037750540000"",""EP039680870004"",""EP039680870002"",""EP029350050005"",""EP030833430007"",""EP027211820019"",""EP027211820018"",""EP034367050080"",""EP003879680332"",""EP037975100026"",""EP046921710041"",""EP008504340235"",""EP041344970041"",""EP017649160930"",""EP013451880115"",""EP035632340025"",""EP003879680333"",""SH042382300000"",""EP023917640026"",""EP035135370023"",""EP017649160769"",""EP042589980016"",""EP044056660023"",""EP039253360012"",""EP022365600011"",""EP042080190012"",""EP024905060022"",""EP046380210018"",""EP030683690009"",""EP038599810034"",""EP046975220018"",""EP029278360038"",""EP003879680335"",""EP026953070117"",""EP040034540004"",""EP035922010011"",""EP026746320096"",""EP034811980052"",""EP043432550023"",""EP017649160798"",""EP044056660024"",""EP023917640027"",""EP030404920022"",""EP038599840017"",""EP034893320097"",""EP031199760174"",""EP038960360008"",""EP024905060150"",""EP026901620022"",""EP031350850029"",""EP041454880006"",""EP039527420010"",""EP037573370116"",""EP034367050012"",""EP033116050008"",""EP029784700029"",""EP020042990352"",""EP030652730009"",""EP001939990047"",""EP034586300010"",""EP030039120108"",""EP017649160896"",""EP042589980017"",""EP039253360020"",""EP000441070914"",""EP045621060018"",""EP020042990378"",""EP032893910003"",""EP013451880120"",""EP032896640013"",""EP036550170014"",""EP034367000011"",""EP038890510039"",""EP024926420007"",""EP032038570012"",""EP015105210055"",""EP047511240003"",""EP047625720003"",""MV009795770000"",""EP047310990007"",""EP044109330003"",""EP026724120153"",""MV000451350000"",""EP014034620161"",""EP031564470023"",""EP029316760131"",""EP033771020006"",""EP042096930005"",""EP024990180004"",""EP031534860089"",""EP036894320007"",""EP026524120002"",""EP031699430013"",""EP019824590063"",""EP030061230067"",""EP025651130007"",""EP025855760082"",""EP040269400036"",""EP045452500006"",""EP044060030059"",""EP030464640170"",""SH017045980000"",""EP019858020273"",""SH027302680000"",""EP039666790107"",""EP041378720057"",""EP025651130085"",""EP032516450145"",""EP033718790063"",""SH029914220000"",""SH045999500000"",""EP020192400136"",""EP045409310028"",""EP025651130276"",""EP020732110137"",""EP025651130275"",""EP045452500003"",""EP036454650016"",""EP036454650017"",""EP031699430014"",""EP031312840007"",""EP031312840005"",""EP037112020010"",""EP033058960092"",""EP034186640004"",""EP044147770003"",""EP038930490034"",""SH047642340000"",""MV005842870000"",""EP047614310002"",""EP047446010004"",""EP046651810002"",""EP018452300225"",""EP041401350003"",""EP031564470024"",""EP029316760110"",""EP033771020003"",""EP042096930006"",""EP024990180006"",""EP031534860091"",""EP036894320008"",""EP026524120001"",""EP019824590062"",""EP030061230068"",""EP025651130008"",""EP025855760083"",""EP040269400009"",""EP045452500007"",""EP044060030007"",""EP030464640171"",""EP019858020274"",""EP039666790106"",""EP041378720051"",""EP025651130108"",""EP032516450137"",""EP033718790011"",""EP029914220008"",""EP020192400137"",""EP045409310029"",""EP025651130274"",""EP013173890626"",""EP045925440008"",""EP045409310026"",""EP025651130002"",""EP039332570012"",""EP034178960289"",""EP025651130238"",""EP020732110007"",""EP032516450138"",""EP025651130084"",""EP039666790006"",""EP041378720040"",""EP033718790039"",""EP031564480137"",""EP029710820002"",""EP033058960093"",""EP013173890682"",""EP031229650061"",""EP047652630001"",""MV001780180000"",""EP013173890734"",""EP031564470025"",""EP029316760130"",""EP033771020004"",""EP042096930007"",""EP024990180012"",""EP031534860092"",""EP036894320010"",""EP026524120005"",""EP031699430015"",""EP019824590074"",""EP030061230069"",""EP025651130009"",""EP025855760084"",""EP040269400037"",""EP045452500008"",""EP044060030008"",""EP030464640172"",""EP019858020275"",""EP039666790105"",""EP041378720007"",""EP025651130086"",""EP033718790066"",""EP029914220013"",""EP020192400138"",""EP022531710189"",""EP031699430041"",""EP039842120001"",""EP045925270008"",""EP013173890627"",""EP022531710190"",""EP039332570014"",""EP034178960246"",""EP025651130212"",""EP020732110008"",""EP045306720001"",""EP039666790007"",""EP041378720050"",""EP033718790041"",""EP033718790042"",""EP031564480138"",""EP029710820001"",""EP045925270009"",""EP013173890683"",""EP037112020006"",""EP047652630002"",""EP047310990008"",""EP044109330004"",""EP047614310003"",""EP013173890735"",""EP031564470026"",""EP029316760111"",""EP033771020005"",""EP042096930008"",""EP024990180009"",""EP031534860093"",""EP036894320011"",""EP026524120013"",""EP031699430016"",""EP019824590075"",""EP030061230070"",""EP025651130014"",""EP025855760085"",""EP040269400053"",""EP045452500009"",""EP044060030009"",""EP030464640173"",""EP019858020331"",""EP039666790119"",""EP041378720008"",""EP025651130087"",""EP033718790015"",""EP029914220014"",""EP020192400139"",""SH031699430000"",""EP039842120002"",""EP013173890628"",""EP027612850141"",""EP023260440061"",""EP022531710191"",""EP039332570016"",""EP034178960272"",""EP025651130201"",""EP020732110009"",""EP045306720011"",""EP039666790008"",""EP041378720039"",""EP033718790018"",""EP033718790043"",""EP031564480139"",""EP029710820004"",""EP018452300227"",""EP013173890684"",""EP045925440009"",""SH038695540000"",""MV001876380000"",""EP013173890736"",""MV002350020000"",""EP031564470027"",""EP029316760129"",""EP033771020007"",""EP042096930009"",""EP024990180008"",""EP031534860094"",""EP036894320012"",""EP026524120011"",""EP031699430037"",""EP019824590077"",""EP030061230071"",""EP025651130115"",""EP025855760086"",""EP040269400038"",""SH045452500000"",""EP044060030010"",""EP030464640174"",""EP019858020330"",""EP039666790104"",""EP041378720009"",""EP025651130088"",""EP033718790030"",""EP029914220011"",""EP020192400140"",""EP031699430043"",""EP039842120003"",""EP019828730138"",""EP013173890629"",""EP022531710192"",""EP039332570018"",""EP034178960248"",""EP025651130216"",""EP020732110010"",""EP032516450144"",""EP039666790009"",""EP041378720049"",""EP033718790057"",""EP033718790044"",""EP031564480140"",""EP029710820003"",""EP019828730139"",""EP013173890685"",""EP041401350004"",""EP034186640005"",""MV000750240000"",""EP013173890637"",""EP031564470040"",""EP029316760128"",""EP033771020008"",""EP042096930010"",""EP024990180011"",""EP031534860095"",""EP036894320013"",""EP026524120012"",""EP031699430025"",""EP019824590076"",""EP030061230072"",""EP025651130015"",""EP025855760087"",""EP040269400039"",""EP045452500012"",""EP044060030011"",""EP030464640175"",""EP019858020332"",""EP039666790103"",""EP041378720010"",""EP025651130135"",""EP033718790006"",""EP029914220012"",""EP020192400141"",""EP031699430044"",""EP039842120004"",""EP022531710193"",""EP039332570020"",""EP034178960249"",""EP025651130202"",""EP020732110011"",""EP032516450146"",""EP039666790010"",""EP041378720038"",""EP033718790045"",""EP033718790046"",""EP025651130215"",""EP014034620163"",""EP027612850143"",""EP023260440062"",""EP044147770004"",""EP026724120154"",""EP038930490035"",""EP031564470041"",""EP029316760127"",""EP033771020053"",""EP042096930011"",""EP024990180028"",""EP031534860096"",""EP036894320014"",""EP026524120014"",""EP031699430030"",""EP019824590078"",""EP030061230024"",""EP025651130016"",""EP025855760088"",""EP040269400040"",""EP045452500013"",""EP044060030012"",""EP030464640176"",""EP019858020333"",""EP039666790102"",""EP041378720011"",""EP025651130132"",""EP032516450143"",""EP033718790056"",""EP029914220015"",""EP020192400142"",""EP045409310036"",""EP025651130273"",""EP020732110140"",""EP025651130249"",""EP045452500004"",""EP036454650019"",""EP047456950003"",""EP047446010005"",""EP047511240004"",""EP047625720004"",""MV001431880000"",""SH031564470000"",""EP029316760126"",""EP033771020009"",""EP042096930012"",""EP024990180013"",""EP031534860097"",""EP036894320015"",""EP026524120010"",""EP031699430005"",""EP019824590079"",""EP030061230073"",""EP025651130011"",""EP025855760089"",""EP040269400041"",""EP045452500014"",""EP044060030013"",""EP030464640177"",""EP019858020334"",""EP039666790101"",""EP041378720012"",""EP025651130089"",""EP045306720005"",""EP033718790032"",""EP029914220019"",""EP020192400143"",""EP045409310034"",""EP025651130272"",""EP020732110141"",""EP025651130271"",""EP045452500005"",""EP036454650025"",""EP036454650020"",""MV001484190000"",""EP031564470046"",""EP029316760112"",""EP033771020001"",""EP042096930013"",""EP024990180015"",""EP031534860098"",""EP036894320016"",""EP026524120020"",""EP031699430027"",""EP019824590080"",""EP030061230074"",""EP025651130012"",""EP025855760090"",""EP040269400010"",""EP045452500015"",""EP044060030060"",""EP030464640191"",""EP019858020346"",""EP039666790097"",""EP041378720013"",""EP025651130137"",""EP033718790008"",""EP029914220016"",""EP020192400144"",""EP045409310035"",""EP025651130270"",""EP025651130003"",""EP039332570022"",""EP034178960296"",""EP025651130203"",""EP020732110012"",""EP032516450140"",""EP039666790011"",""EP041378720048"",""EP033718790047"",""EP031564480141"",""EP029710820006"",""EP033058960094"",""EP013173890686"",""EP031229650062"",""SH029114080000"",""MV017016970000"",""MV018422620000"",""SH036394680000"",""SH003078020000"",""SH040783600000"",""SH009675640000"",""EP001529880455"",""MV016826820000"",""SH044884260000"",""MV010990140000"",""MV020292860000"",""EP009675700409"",""EP000817170345"",""EP028564160022"",""EP040744480004"",""MV002684170000"",""SH038239840000"",""MV009389200000"",""SH016425510000"",""EP000227522194"",""MV001287700000"",""SH022198530000"",""SH016211620000"",""MV018439010000"",""EP000817023013"",""EP000410922636"",""SH016211710000"",""EP005129220692"",""EP017288310170"",""EP038758810015"",""EP031225000059"",""EP037875670098"",""SH011871340000"",""MV010607470000"",""MV014074690000"",""EP000227522195"",""MV010474600000"",""MV001602520000"",""EP000817023014"",""EP000410922637"",""EP005129220693"",""EP017288310171"",""EP034680080030"",""EP041669490001"",""EP030471800096"",""EP043854160005"",""MV001411020000"",""MV008588710000"",""SH031225030000"",""EP000227522196"",""MV003978160000"",""MV001839000000"",""EP000817023015"",""EP000410922638"",""EP005129220694"",""EP017288310172"",""EP043232380003"",""EP023963470059"",""EP038248190039"",""EP039197510014"",""MV003677250000"",""MV010743100000"",""EP000227522197"",""MV013602950000"",""MV002415590000"",""SH024577790000"",""EP000817023016"",""EP000410922639"",""EP005129220695"",""EP004626320221"",""EP021742260144"",""EP031785600058"",""EP029289320063"",""MV000501530000"",""MV020300000000"",""EP000227522198"",""MV009388890000"",""EP004626320179"",""MV002299280000"",""EP000817023017"",""EP000410922640"",""EP018275650002"",""EP005129220696"",""EP017994550205"",""MV000478100000"",""SH008611800000"",""MV011886410000"",""MV012766980000"",""MV010846690000"",""MV005557980000"",""EP022571060348"",""EP037384770001"",""EP043477120038"",""EP040092100054"",""EP028506000021"",""MV018352220000"",""MV001501760000"",""MV020106580000"",""MV013636430000"",""MV003481890000"",""MV010270830000"",""EP001529880456"",""MV009525790000"",""MV005002870000"",""MV016016770000"",""EP009675700414"",""EP000817170346"",""EP028564160015"",""EP040744480005"",""MV004280650000"",""MV007456930000"",""EP000227522199"",""MV005604390000"",""MV000406760000"",""EP000817023018"",""EP000410922641"",""EP005129220697"",""EP017288310173"",""EP038758810011"",""EP031225000060""]"
jpkC0u5n,Mining Turtle,CasuxGaming,Lua,Sunday 25th of June 2023 02:51:15 PM CDT,"while true do
	if turtle.detect() then
  		turtle.dig()
 	end
 	itemcount = turtle.getItemCount(15)
 	if itemcount == 64 then
  		turtle.turnLeft()
  		turtle.turnLeft()
  		for i=1,15 do
   			turtle.select(i)
   			turtle.drop()
  		end
        turtle.turnLeft()
        turtle.turnLeft()
        turtle.select(1)
 	end
end"
xxwViawk,Script 1,ert178,Lua,Sunday 25th of June 2023 02:45:15 PM CDT,"--- Equip/UnEquip
local Tool = script.Parent

Tool.Equipped:Connect(function()
    Tool.Equip.Value = true
end)

Tool.Unequipped:Connect(function()
    Tool.Equip.Value = false
end)

--- Skill
local UIS = game:GetService(""UserInputService"")
local plr = game.Players.LocalPlayer
local Debounce = true
Player = game.Players.LocalPlayer

UIS.InputBegan:Connect(function(Input)
    if Input.KeyCode == Enum.KeyCode.Z and Debounce == true and Tool.Equip.Value == true and Tool.Active.Value == ""None"" then
        Debounce = false
        Tool.Active.Value = ""BariWall""
        wait(0.1)
        local Track1 = Player.Character.Humanoid:LoadAnimation(script.Anim01)
        Track1:Play()
        wait(0.1)
        script.Fire:FireServer()
    local hum =  Player.Character.Humanoid
    for i = 1,10 do
        wait()
        hum.CameraOffset = Vector3.new(
            math.random(-1,1),
            math.random(-1,1),
            math.random(-1,1)
        )
    end
    hum.CameraOffset = Vector3.new(0,0,0)
        wait(0.15)
        Tool.Active.Value = ""None""
        wait(2)
        Debounce = true
    end
end)"
rWaqWRks,Untitled,Falexom,Python,Sunday 25th of June 2023 02:21:01 PM CDT,"import random

from appwrite.client import Client
import telebot
from dotenv import load_dotenv
import os
from appwrite.services.databases import Databases
from appwrite.id import ID


load_dotenv()

client = Client()
db = Databases(client)
API_KEY = os.environ.get('API_KEY')
TOKEN = os.environ.get('TOKEN')
CHAT_ID = os.environ.get('CHAT_ID')
PROJECT_ID = os.environ.get('PROJECT_ID')
ENDPOINT = os.environ.get('ENDPOINT')

(client
 .set_endpoint(f'http://{ENDPOINT}/v1')
 .set_project(PROJECT_ID)
 .set_key(API_KEY)
 .set_self_signed()
 )

print('CREATED')
dt = db.list()
print(dt)


bot = telebot.TeleBot(TOKEN, parse_mode=None)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, ""Test?"")


@bot.message_handler(content_types=['text'])
def logging(message):
    payload = {""payload"": message.text}
    db.create_document('1', '12345', ID.unique(), payload)


bot.infinity_polling()
"
2ySd4eNw,Untitled,GalWat,Python,Sunday 25th of June 2023 02:19:51 PM CDT,"class Static_data(Resource):
    def get(self):
        return {'data': ""static information""}, 200

class Data(Resource):
    def get(self):
        return {'data': get_data()}, 200
	
	def post(self):
        f_value = request.json['lastname']
        s_value = request.json['birthday']

        insert_data(f_value, s_value)
        return {'data': ""OK""}, 200

api.add_resource(Data, '/data')    "
tPXJzehZ,Untitled,MateuszGrabarczyk,C,Sunday 25th of June 2023 01:45:26 PM CDT,"#include <stdlib.h>
#include ""pvm3.h""

void parent(char* programName);
void child();

int main(int argc, char* argv[]) {
	if(pvm_parent() == PvmNoParent) parent(argv[0]);
	else child();
	return 0;
}

void parent(char* programName) {
	const int SIZE = 200;
	int vectorX[SIZE], vectorY[SIZE];
	int ZD[SIZE], ZU[SIZE];
	
	//W tym miejscu vectorX oraz vectorY powinny zostać zainicjalizowane
	
	int tidmaster;
	int ilhost, ilarch, tid;
	struct pvmhostinfo *info;
	
	tidmaster = pvm_mytid();
	
	pvm_config(&ilhost, &ilarch, &info);
	
	int index = 0;
	for(; index < ilhost; index++) {
		pvm_spawn(programName, 0, PvmTaskHost, info[index].hi_name, 1, &tid);
		pvm_initsend(PvmDataDefault);
		pvm_pkint(&vectorX[index]);
		pvm_pkint(&vectorY[index]);
		pvm_pkint(&index);
		pvm_send(&tid, 100);
		
		
	}
	
	int result, appendIndex;
	while(index < SIZE) {
		pvm_recv(-1, 200);
		pvm_upkint(&result, 1, 1);
		pvm_upkint(&appendIndex, 1, 1);
		pvm_upkint(&tid, 1, 1);
		
		if(result > 0) {
			ZD[appendIndex] = result;
			ZU[appendIndex] = 999;
			
		} else if (result < 0) {
			ZD[appendIndex] = 999;
			ZU[appendIndex] = result;
			
		} else {
			ZD[appendIndex] = 999;
			ZU[appendIndex] = 999;
			
		}
			
		pvm_initsend(PvmDataDefault);
		pvm_pkint(&vectorX[index]);
		pvm_pkint(&vectorY[index]);
		pvm_pkint(&index);
		pvm_send(&tid, 100);
		index++;
		
	}
	
	int i = 0;
	for(; i < ilhost; i++) {
		pvm_recv(-1, 200);
		pvm_upkint(&result, 1, 1);
		pvm_upkint(&appendIndex, 1, 1);
		pvm_upkint(&tid, 1, 1);
		
		if(result > 0) {
			ZD[appendIndex] = result;
			ZU[appendIndex] = 999;
			
		} else if (result < 0) {
			ZD[appendIndex] = 999;
			ZU[appendIndex] = result;
			
		} else {
			ZD[appendIndex] = 999;
			ZU[appendIndex] = 999;
			
		}
		
		pvm_kill(tid);
		
	}
	
	pvm_exit();
	exit(0);
"
9Li00WqH,Untitled,cecko,JavaScript,Sunday 25th of June 2023 01:37:53 PM CDT,"async function getInfo() {

    const stopId = document.getElementById('stopId').value;
    const stopNameElement = document.getElementById('stopName');
    const timeTableElement = document.getElementById('buses');

    
    const url = `http://localhost:3030/jsonstore/bus/businfo/${stopId}`;

    try {
        stopNameElement.textContent = 'Loading...';
        timeTableElement.replaceChildren();

        const response = await fetch(url);

        if (response.status !== 200) {
            throw new Error('Stop ID not found!');
        }
        const data = await response.json();
        stopNameElement.textContent = data.name;

        Object.entries(data.buses).forEach(b => {
            const li = document.createElement('li');
            li.textContent = `Bus ${b[0]} arrives in ${b[1]} minutes`;
            timeTableElement.appendChild(li);
        });



    } catch (error) {
        stopNameElement.textContent = 'Error';
    }

}"
zDdhBjxr,Query,brunobozic,T-SQL,Sunday 25th of June 2023 01:01:28 PM CDT,"SELECT d.dep_id,p.per_id,COUNT(*)AS per_cnt,MAX(m.actual) AS has_actual_template FROM department d JOIN manager m ON d.dep_id = m.dep_id LEFT JOIN person p ON m.per_id = p.per_id, message m LEFT OUTER JOIN mark mk ON m.id = mk.msg_id LEFT JOIN template tp ON m.template_id = tp.id WHERE d.dep_id = m.dep_1 GROUP BY d.dep_id, p.per_i HAVING COUNT(*) >= 2 ORDER BY per_cnt DESC;"
jDkaBkWu,AST,brunobozic,JSON,Sunday 25th of June 2023 12:57:27 PM CDT,"{
  ""Value"": {
    ""Success"": true,
    ""ErrorMessage"": """",
    ""Nodes"": [
      {
        ""Name"": ""SelectStatement"",
        ""Type"": ""Statement"",
        ""Start"": 0,
        ""End"": 376,
        ""Children"": [
          {
            ""Name"": ""Subquery"",
            ""Type"": ""Expression"",
            ""Start"": 0,
            ""End"": 375,
            ""Children"": [
              {
                ""Name"": ""QueryExpression"",
                ""Type"": ""Expression"",
                ""Start"": 0,
                ""End"": 353,
                ""Children"": [
                  {
                    ""Name"": ""QuerySpecification"",
                    ""Type"": ""Clause"",
                    ""Start"": 0,
                    ""End"": 353,
                    ""Children"": [
                      {
                        ""Name"": ""FromClause"",
                        ""Type"": ""Clause"",
                        ""Start"": 81,
                        ""End"": 280,
                        ""Children"": [
                          {
                            ""Name"": ""TableSource"",
                            ""Type"": ""Clause"",
                            ""Start"": 86,
                            ""End"": 178,
                            ""Children"": [
                              {
                                ""Name"": ""JoinedTable"",
                                ""Type"": ""Clause"",
                                ""Start"": 86,
                                ""End"": 113,
                                ""Children"": [
                                  {
                                    ""Name"": ""TableSource"",
                                    ""Type"": ""Clause"",
                                    ""Start"": 86,
                                    ""End"": 113,
                                    ""Children"": [
                                      {
                                        ""Name"": ""JoinedTable"",
                                        ""Type"": ""Clause"",
                                        ""Start"": 86,
                                        ""End"": 96,
                                        ""Children"": [
                                          {
                                            ""Name"": ""TableSource"",
                                            ""Type"": ""Clause"",
                                            ""Start"": 86,
                                            ""End"": 96,
                                            ""Children"": [
                                              {
                                                ""Name"": ""TableNameAlias"",
                                                ""Type"": ""Clause"",
                                                ""Start"": 86,
                                                ""End"": 98,
                                                ""Children"": [
                                                  {
                                                    ""Value"": ""department"",
                                                    ""Name"": ""FullName"",
                                                    ""Type"": ""Name"",
                                                    ""Start"": 86,
                                                    ""End"": 96,
                                                    ""Children"": []
                                                  },
                                                  {
                                                    ""Value"": ""d"",
                                                    ""Name"": ""Identifier"",
                                                    ""Type"": ""Name"",
                                                    ""Start"": 97,
                                                    ""End"": 98,
                                                    ""Children"": []
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            ""Name"": ""TableSource"",
                                            ""Type"": ""Clause"",
                                            ""Start"": 104,
                                            ""End"": 113,
                                            ""Children"": [
                                              {
                                                ""Name"": ""TableNameAlias"",
                                                ""Type"": ""Clause"",
                                                ""Start"": 104,
                                                ""End"": 113,
                                                ""Children"": [
                                                  {
                                                    ""Value"": ""manager"",
                                                    ""Name"": ""FullName"",
                                                    ""Type"": ""Name"",
                                                    ""Start"": 104,
                                                    ""End"": 111,
                                                    ""Children"": []
                                                  },
                                                  {
                                                    ""Value"": ""m"",
                                                    ""Name"": ""Identifier"",
                                                    ""Type"": ""Name"",
                                                    ""Start"": 112,
                                                    ""End"": 113,
                                                    ""Children"": []
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            ""Name"": ""TableJoin"",
                                            ""Type"": ""Clause"",
                                            ""Start"": 99,
                                            ""End"": 103,
                                            ""Children"": []
                                          },
                                          {
                                            ""Name"": """",
                                            ""Type"": ""Expression"",
                                            ""Start"": 117,
                                            ""End"": 136,
                                            ""Children"": [
                                              {
                                                ""Value"": ""d.dep_id"",
                                                ""Name"": ""FullName"",
                                                ""Type"": ""Name"",
                                                ""Start"": 117,
                                                ""End"": 125,
                                                ""Children"": []
                                              },
                                              {
                                                ""Value"": ""m.dep_id"",
                                                ""Name"": ""FullName"",
                                                ""Type"": ""Name"",
                                                ""Start"": 128,
                                                ""End"": 136,
                                                ""Children"": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    ""Name"": ""TableSource"",
                                    ""Type"": ""Clause"",
                                    ""Start"": 147,
                                    ""End"": 155,
                                    ""Children"": [
                                      {
                                        ""Name"": ""TableNameAlias"",
                                        ""Type"": ""Clause"",
                                        ""Start"": 147,
                                        ""End"": 155,
                                        ""Children"": [
                                          {
                                            ""Value"": ""person"",
                                            ""Name"": ""FullName"",
                                            ""Type"": ""Name"",
                                            ""Start"": 147,
                                            ""End"": 153,
                                            ""Children"": []
                                          },
                                          {
                                            ""Value"": ""p"",
                                            ""Name"": ""Identifier"",
                                            ""Type"": ""Name"",
                                            ""Start"": 154,
                                            ""End"": 155,
                                            ""Children"": []
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    ""Name"": ""TableJoin"",
                                    ""Type"": ""Clause"",
                                    ""Start"": 137,
                                    ""End"": 146,
                                    ""Children"": []
                                  },
                                  {
                                    ""Name"": """",
                                    ""Type"": ""Expression"",
                                    ""Start"": 159,
                                    ""End"": 178,
                                    ""Children"": [
                                      {
                                        ""Value"": ""m.per_id"",
                                        ""Name"": ""FullName"",
                                        ""Type"": ""Name"",
                                        ""Start"": 159,
                                        ""End"": 167,
                                        ""Children"": []
                                      },
                                      {
                                        ""Value"": ""p.per_id"",
                                        ""Name"": ""FullName"",
                                        ""Type"": ""Name"",
                                        ""Start"": 170,
                                        ""End"": 178,
                                        ""Children"": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            ""Name"": ""TableSource"",
                            ""Type"": ""Clause"",
                            ""Start"": 180,
                            ""End"": 280,
                            ""Children"": [
                              {
                                ""Name"": ""JoinedTable"",
                                ""Type"": ""Clause"",
                                ""Start"": 180,
                                ""End"": 213,
                                ""Children"": [
                                  {
                                    ""Name"": ""TableSource"",
                                    ""Type"": ""Clause"",
                                    ""Start"": 180,
                                    ""End"": 213,
                                    ""Children"": [
                                      {
                                        ""Name"": ""JoinedTable"",
                                        ""Type"": ""Clause"",
                                        ""Start"": 180,
                                        ""End"": 187,
                                        ""Children"": [
                                          {
                                            ""Name"": ""TableSource"",
                                            ""Type"": ""Clause"",
                                            ""Start"": 180,
                                            ""End"": 187,
                                            ""Children"": [
                                              {
                                                ""Name"": ""TableNameAlias"",
                                                ""Type"": ""Clause"",
                                                ""Start"": 180,
                                                ""End"": 189,
                                                ""Children"": [
                                                  {
                                                    ""Value"": ""message"",
                                                    ""Name"": ""FullName"",
                                                    ""Type"": ""Name"",
                                                    ""Start"": 180,
                                                    ""End"": 187,
                                                    ""Children"": []
                                                  },
                                                  {
                                                    ""Value"": ""m"",
                                                    ""Name"": ""Identifier"",
                                                    ""Type"": ""Name"",
                                                    ""Start"": 188,
                                                    ""End"": 189,
                                                    ""Children"": []
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            ""Name"": ""TableSource"",
                                            ""Type"": ""Clause"",
                                            ""Start"": 206,
                                            ""End"": 213,
                                            ""Children"": [
                                              {
                                                ""Name"": ""TableNameAlias"",
                                                ""Type"": ""Clause"",
                                                ""Start"": 206,
                                                ""End"": 213,
                                                ""Children"": [
                                                  {
                                                    ""Value"": ""mark"",
                                                    ""Name"": ""FullName"",
                                                    ""Type"": ""Name"",
                                                    ""Start"": 206,
                                                    ""End"": 210,
                                                    ""Children"": []
                                                  },
                                                  {
                                                    ""Value"": ""mk"",
                                                    ""Name"": ""Identifier"",
                                                    ""Type"": ""Name"",
                                                    ""Start"": 211,
                                                    ""End"": 213,
                                                    ""Children"": []
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            ""Name"": ""TableJoin"",
                                            ""Type"": ""Clause"",
                                            ""Start"": 190,
                                            ""End"": 205,
                                            ""Children"": []
                                          },
                                          {
                                            ""Name"": """",
                                            ""Type"": ""Expression"",
                                            ""Start"": 217,
                                            ""End"": 233,
                                            ""Children"": [
                                              {
                                                ""Value"": ""m.id"",
                                                ""Name"": ""FullName"",
                                                ""Type"": ""Name"",
                                                ""Start"": 217,
                                                ""End"": 221,
                                                ""Children"": []
                                              },
                                              {
                                                ""Value"": ""mk.msg_id"",
                                                ""Name"": ""FullName"",
                                                ""Type"": ""Name"",
                                                ""Start"": 224,
                                                ""End"": 233,
                                                ""Children"": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    ""Name"": ""TableSource"",
                                    ""Type"": ""Clause"",
                                    ""Start"": 244,
                                    ""End"": 255,
                                    ""Children"": [
                                      {
                                        ""Name"": ""TableNameAlias"",
                                        ""Type"": ""Clause"",
                                        ""Start"": 244,
                                        ""End"": 255,
                                        ""Children"": [
                                          {
                                            ""Value"": ""template"",
                                            ""Name"": ""FullName"",
                                            ""Type"": ""Name"",
                                            ""Start"": 244,
                                            ""End"": 252,
                                            ""Children"": []
                                          },
                                          {
                                            ""Value"": ""tp"",
                                            ""Name"": ""Identifier"",
                                            ""Type"": ""Name"",
                                            ""Start"": 253,
                                            ""End"": 255,
                                            ""Children"": []
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    ""Name"": ""TableJoin"",
                                    ""Type"": ""Clause"",
                                    ""Start"": 234,
                                    ""End"": 243,
                                    ""Children"": []
                                  },
                                  {
                                    ""Name"": """",
                                    ""Type"": ""Expression"",
                                    ""Start"": 259,
                                    ""End"": 280,
                                    ""Children"": [
                                      {
                                        ""Value"": ""m.template_id"",
                                        ""Name"": ""FullName"",
                                        ""Type"": ""Name"",
                                        ""Start"": 259,
                                        ""End"": 272,
                                        ""Children"": []
                                      },
                                      {
                                        ""Value"": ""tp.id"",
                                        ""Name"": ""FullName"",
                                        ""Type"": ""Name"",
                                        ""Start"": 275,
                                        ""End"": 280,
                                        ""Children"": []
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        ""Name"": ""SelectList"",
                        ""Type"": ""Clause"",
                        ""Start"": 7,
                        ""End"": 80,
                        ""Children"": [
                          {
                            ""Name"": ""SelectListItem"",
                            ""Type"": ""Clause"",
                            ""Start"": 7,
                            ""End"": 15,
                            ""Children"": [
                              {
                                ""Value"": ""d.dep_id"",
                                ""Name"": ""FullName"",
                                ""Type"": ""Name"",
                                ""Start"": 7,
                                ""End"": 15,
                                ""Children"": []
                              }
                            ]
                          },
                          {
                            ""Name"": ""SelectListItem"",
                            ""Type"": ""Clause"",
                            ""Start"": 16,
                            ""End"": 24,
                            ""Children"": [
                              {
                                ""Value"": ""p.per_id"",
                                ""Name"": ""FullName"",
                                ""Type"": ""Name"",
                                ""Start"": 16,
                                ""End"": 24,
                                ""Children"": []
                              }
                            ]
                          },
                          {
                            ""Name"": ""SelectListItem"",
                            ""Type"": ""Clause"",
                            ""Start"": 25,
                            ""End"": 43,
                            ""Children"": [
                              {
                                ""Name"": ""CountFunction"",
                                ""Type"": ""Expression"",
                                ""Start"": 25,
                                ""End"": 33,
                                ""Children"": [
                                  {
                                    ""Value"": ""*"",
                                    ""Name"": ""FullName"",
                                    ""Type"": ""Name"",
                                    ""Start"": 31,
                                    ""End"": 32,
                                    ""Children"": []
                                  }
                                ]
                              },
                              {
                                ""Value"": ""per_cnt"",
                                ""Name"": ""Identifier"",
                                ""Type"": ""Name"",
                                ""Start"": 36,
                                ""End"": 43,
                                ""Children"": []
                              }
                            ]
                          },
                          {
                            ""Name"": ""SelectListItem"",
                            ""Type"": ""Clause"",
                            ""Start"": 44,
                            ""End"": 80,
                            ""Children"": [
                              {
                                ""Name"": ""MaxFunction"",
                                ""Type"": ""Expression"",
                                ""Start"": 44,
                                ""End"": 57,
                                ""Children"": [
                                  {
                                    ""Value"": ""m.actual"",
                                    ""Name"": ""FullName"",
                                    ""Type"": ""Name"",
                                    ""Start"": 48,
                                    ""End"": 56,
                                    ""Children"": []
                                  }
                                ]
                              },
                              {
                                ""Value"": ""has_actual_template"",
                                ""Name"": ""Identifier"",
                                ""Type"": ""Name"",
                                ""Start"": 61,
                                ""End"": 80,
                                ""Children"": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        ""Name"": ""WhereClause"",
                        ""Type"": ""Clause"",
                        ""Start"": 281,
                        ""End"": 305,
                        ""Children"": [
                          {
                            ""Name"": """",
                            ""Type"": ""Expression"",
                            ""Start"": 287,
                            ""End"": 305,
                            ""Children"": [
                              {
                                ""Value"": ""d.dep_id"",
                                ""Name"": ""FullName"",
                                ""Type"": ""Name"",
                                ""Start"": 287,
                                ""End"": 295,
                                ""Children"": []
                              },
                              {
                                ""Value"": ""m.dep_1"",
                                ""Name"": ""FullName"",
                                ""Type"": ""Name"",
                                ""Start"": 298,
                                ""End"": 305,
                                ""Children"": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        ""Name"": ""GroupByClause"",
                        ""Type"": ""Clause"",
                        ""Start"": 306,
                        ""End"": 332,
                        ""Children"": [
                          {
                            ""Name"": ""GroupByClauseItem"",
                            ""Type"": ""Clause"",
                            ""Start"": 315,
                            ""End"": 323,
                            ""Children"": [
                              {
                                ""Value"": ""d.dep_id"",
                                ""Name"": ""FullName"",
                                ""Type"": ""Name"",
                                ""Start"": 315,
                                ""End"": 323,
                                ""Children"": []
                              }
                            ]
                          },
                          {
                            ""Name"": ""GroupByClauseItem"",
                            ""Type"": ""Clause"",
                            ""Start"": 325,
                            ""End"": 332,
                            ""Children"": [
                              {
                                ""Value"": ""p.per_i"",
                                ""Name"": ""FullName"",
                                ""Type"": ""Name"",
                                ""Start"": 325,
                                ""End"": 332,
                                ""Children"": []
                              }
                            ]
                          }
                        ]
                      },
                      {
                        ""Name"": """",
                        ""Type"": ""Expression"",
                        ""Start"": 340,
                        ""End"": 353,
                        ""Children"": [
                          {
                            ""Name"": ""CountFunction"",
                            ""Type"": ""Expression"",
                            ""Start"": 340,
                            ""End"": 348,
                            ""Children"": [
                              {
                                ""Value"": ""*"",
                                ""Name"": ""FullName"",
                                ""Type"": ""Name"",
                                ""Start"": 346,
                                ""End"": 347,
                                ""Children"": []
                              }
                            ]
                          },
                          {
                            ""Name"": ""IntegerLiteral"",
                            ""Type"": ""Expression"",
                            ""Start"": 352,
                            ""End"": 353,
                            ""Children"": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                ""Name"": ""OrderByClause"",
                ""Type"": ""Clause"",
                ""Start"": 354,
                ""End"": 375,
                ""Children"": [
                  {
                    ""Name"": ""OrderByClauseItem"",
                    ""Type"": ""Clause"",
                    ""Start"": 363,
                    ""End"": 375,
                    ""Children"": [
                      {
                        ""Value"": ""per_cnt"",
                        ""Name"": ""FullName"",
                        ""Type"": ""Name"",
                        ""Start"": 363,
                        ""End"": 370,
                        ""Children"": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  ""Formatters"": [],
  ""ContentTypes"": [],
  ""DeclaredType"": null,
  ""StatusCode"": 200
}"
hXKJYHkR,;p,Saboten758,JavaScript,Sunday 25th of June 2023 12:44:14 PM CDT,"import React,{useState} from 'react';
import {Text,Button,TextInput} from 'react-native';

const emo=()=>{
  const [text,setText]=useState(' ');
  const [emoji,setemoji]=useState(true);
  return(
    <>
      <TextInput style={{padding:30}} placeholder=""Type here to translate"" onChangeText={newtext=>setText(newtext)}/>
      <Button title=""press here to change translation type"" onPress={()=>{setemoji(!emoji)}}></Button>
      {emoji?
      <Text style={{padding:10,fontSize:42}}>{text.split(' ').map(word=>word&&'😎').join(' ')}</Text>:<Text style={{padding:10,fontSize:42}}>{text.split(' ').map(word=>word&&'🤓').join(' ')}</Text>}
    </>
  );
}

export default emo;"
yenh1ugB,hangman.js,Jubaroo,JavaScript,Sunday 25th of June 2023 12:43:49 PM CDT,"const { SlashCommandBuilder } = require('discord.js');

// Hangman stages
const hangmanStages = [
	// Stage 0
	`
	____
	|   |
	    |
	    |
	    |
	____|____
	`,
	// Stage 1
	`
	____
	|   |
	O   |
	    |
	    |
	____|____
	`,
	// Stage 2
	`
	____
	|   |
	O   |
	|   |
	    |
	____|____
	`,
	// Stage 3
	`
	____
	|   |
	O   |
	/|  |
	    |
	____|____
	`,
	// Stage 4
	`
	____
	|   |
	O   |
	/|\\ |
	    |
	____|____
	`,
	// Stage 5
	`
	____
	|   |
	O   |
	/|\\ |
	/   |
	____|____
	`,
	// Stage 6
	`
	____
	|   |
	O   |
	/|\\ |
	/ \\ |
	____|____
	`,
];

module.exports = {
	data: new SlashCommandBuilder()
		.setName('hangman')
		.setDescription('Start a game of Hangman.'),
	async execute(interaction) {
		// add your list of words here
		const words = ['hangman', 'computer', 'javascript', 'discord', 'chatbot', 'gaming', 'keyboard', 'mouse', 'monitor', 'programming'];

		// select a random word from the list
		const word = words[Math.floor(Math.random() * words.length)];
		let displayWord = '_'.repeat(word.length);
		let wrongGuesses = 0;
		const guessedLetters = new Set();

		await interaction.reply(`Word: ${displayWord}\n\`\`\`${hangmanStages[wrongGuesses]}\`\`\``);

		// Set up a message collector to handle guesses
		const filter = m => m.author.id === interaction.user.id;
		const collector = interaction.channel.createMessageCollector({ filter });

		collector.on('collect', async m => {
			const guessedLetter = m.content.trim().toLowerCase();
			console.log(`Message content: ""${m.content}""`);

			if (guessedLetter.length !== 1 || !/^[a-z]$/i.test(guessedLetter)) {
				console.log(`Guessed letter: ""${guessedLetter}"", length: ${guessedLetter.length}`);
				m.reply({ content: 'Please guess a single letter.', ephemeral: true });
				return;
			}

			if (guessedLetters.has(guessedLetter)) {
				m.reply({ content: 'You have already guessed that letter.', ephemeral: true });
				return;
			}

			guessedLetters.add(guessedLetter);

			if (word.includes(guessedLetter)) {
				displayWord = word.split('').map((char, index) => word[index] === guessedLetter ? guessedLetter : displayWord[index]).join('');
			}
			else {
				wrongGuesses++;
			}
			if (displayWord === word) {
				await m.reply(`Congratulations! You've won! The word was: ${word}`);
				collector.stop();
				return;
			}

			if (wrongGuesses >= hangmanStages.length) {
				await m.reply(`Sorry, you've lost. The word was: ${word}\n\`\`\`${hangmanStages[hangmanStages.length - 1]}\`\`\``);
				collector.stop();
				return;
			}

			await m.reply(`Word: ${displayWord}\n\`\`\`${hangmanStages[wrongGuesses]}\`\`\``);
		});
	},
};
"
fQ03zEWS,Untitled,lodha1503,C++,Sunday 25th of June 2023 12:38:00 PM CDT,"int maxSubArray(vector<int>& nums) 
    {
        int flag=0,n=nums.size();
        int maxi=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]>=0)
            {
                flag=1;
                break;
            }
        }
        
        
        if (flag==0)
        {
            
            for(int i=0;i<n;i++)
            {
                if (nums[i]>maxi)
                    maxi=nums[i];
            }
        }
        
        else
        {
            
            int sum=0;
            
            for(int i=0;i<n;i++)
            {
                sum+=nums[i];
                if(sum>=0)
                {
                    if (sum>maxi)
                    {
                        maxi=sum;
                    }
                }
                    
                else
                    sum=0;
                
            }
            
        }
        return maxi;
    }"
0X0Cr6y2,ChatGPT 3 Gen STM32 Source Code for tachometer,ProShow,C++,Sunday 25th of June 2023 12:37:43 PM CDT,"#include ""stm32f1xx_hal.h""
#include ""stdio.h""

// Период измерения (в миллисекундах)
#define MEASUREMENT_PERIOD 1000

// Объявление переменных
uint32_t pulseCount = 0;
float rotationSpeed = 0.0;

// Объявление функций
void SystemClock_Config(void);
void GPIO_Init(void);
void TIM2_Init(void);
void EXTI_Init(void);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  GPIO_Init();
  TIM2_Init();
  EXTI_Init();

  while (1)
  {
    // Запуск измерений
    HAL_Delay(MEASUREMENT_PERIOD);
    rotationSpeed = pulseCount / (float)MEASUREMENT_PERIOD * 1000;
    pulseCount = 0;

    // Запись значения во внутреннюю память
    // Здесь может быть код для записи значения в память

    // Вывод значения скорости вращения в консоль (пример)
    printf(""Rotation Speed: %.2f RPM\n"", rotationSpeed);
  }
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void GPIO_Init(void)
{
  __HAL_RCC_GPIOC_CLK_ENABLE();

  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void TIM2_Init(void)
{
  __HAL_RCC_TIM2_CLK_ENABLE();

  TIM_HandleTypeDef htim2;
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7200 - 1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 100 - 1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn);

  HAL_TIM_Base_Start_IT(&htim2);
}

void EXTI_Init(void)
{
  __HAL_RCC_AFIO_CLK_ENABLE();

  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_13)
  {
    pulseCount++;
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM2)
  {
    // Сброс счетчика
    pulseCount = 0;
  }
}
"
9DZAMXbD,1,matveev,Java,Sunday 25th of June 2023 12:15:46 PM CDT,"package stream.reentrantlock;

public class Mian {
    public static void main(String[] args) throws InterruptedException {
        Res resource = new Res();
        resource.i = 5;
        ThreadI th1 = new ThreadI();
        th1.setName(""one"");
        ThreadI th2 = new ThreadI();
        th1.resource = resource;
        th2.resource = resource;
        th1.start();
        th2.start();
        th1.join();
        th2.join();
        System.out.println(resource.i);
    }

    public static class ThreadI extends Thread {
        Res resource;

        @Override
        public void run() {
            resource.changeI();

        }
    }

}

class Res {
    int i;

    void changeI() {
        int i = this.i;
        if (Thread.currentThread().getName().equals(""one""))
            Thread.yield();
        i++;
        this.i = i;
    }
}
"
cxL3uYUe,japanpsygen,ceater_nerd,Lua,Sunday 25th of June 2023 12:15:37 PM CDT,"-- Lost Psygen by Ietahuoy
-- edited by ikonikbruh
-- effect fixed by ceat
-- ported by ceat

wait(1/60)
script.Parent=nil
NLS=NLS or require(13482937602)()
owner=owner
local plrr = game:GetService(""RunService""):IsStudio() and game:GetService(""Players""):GetPlayers()[1] or owner
do
	local gunmodel = Instance.new(""Model"", script)
	gunmodel.Name = ""GunModel""
	
	local joint = Instance.new(""Part"", gunmodel)
	joint.Size = Vector3.new(0.1, 0.1, 0.1)
	joint.Transparency = 1
	joint.CanCollide = false
	joint.Name = ""Joint""
	
	local hole = Instance.new(""Part"", gunmodel)
	hole.Size = Vector3.new(0.1, 0.1, 0.1)
	hole.Transparency = 1
	hole.CanCollide = false
	hole.Name = ""Hole""
	
	local body = Instance.new(""Part"", gunmodel)
	body.Color = Color3.fromRGB(99, 95, 98)
	body.Size = Vector3.new(4.7, 4.3, 0.8)
	body.CanCollide = false
	body.Name = ""Handle""
	
	local mesh = Instance.new(""SpecialMesh"", body)
	mesh.MeshId = ""rbxassetid://4615369575""
	mesh.Scale = Vector3.new(1.3, 1.3, 1.3)
	
	local bodyweld = Instance.new(""Weld"", joint)
	bodyweld.Part0 = joint
	bodyweld.Part1 = body
	bodyweld.C0 = CFrame.new(-0.937, 0.582, -0.167) * CFrame.fromEulerAnglesYXZ(0, math.rad(165), math.rad(45))
	
	local holeweld = Instance.new(""Weld"", joint)
	holeweld.Part0 = joint
	holeweld.Part1 = hole
	holeweld.C0 = CFrame.new(-1.68, 0.693, -0.5) * CFrame.fromEulerAnglesYXZ(math.rad(-90), 0, 0)
	
	gunmodel.PrimaryPart = joint
end
do
	local knifemodel = Instance.new(""Model"", script)
	knifemodel.Name = ""KnifeModel""
	
	local joint = Instance.new(""Part"", knifemodel)
	joint.Size = Vector3.new(0.1, 0.1, 0.1)
	joint.Transparency = 1
	joint.CanCollide = false
	joint.Name = ""Joint""
	
	local blade = Instance.new(""Part"", knifemodel)
	blade.Size = Vector3.new(0.781, 3.647, 1.386)
	blade.Transparency = 1
	blade.CanCollide = false
	blade.Name = ""Blade""
	Instance.new(""BlockMesh"", blade).Scale = Vector3.zero
	
	local a1 = Instance.new(""Attachment"", blade)
	a1.CFrame = CFrame.new(0, -0.174, 0.993)
	
	local a2 = Instance.new(""Attachment"", blade)
	a2.CFrame = CFrame.new(0, 0.161, -0.964) 
	
	local trail = Instance.new(""Trail"", knifemodel)
	trail.Attachment0 = a1
	trail.Attachment1 = a2
	trail.Color = ColorSequence.new(Color3.fromRGB(255, 251, 248))
	trail.FaceCamera = false
	trail.LightEmission = 1
	trail.LightInfluence = 1
	trail.Texture = """"
	trail.TextureLength = 1
	trail.TextureMode = Enum.TextureMode.Stretch
	trail.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(0.5, 0),
		NumberSequenceKeypoint.new(1, 1)
	})
	trail.Enabled = false
	trail.Lifetime = 1
	trail.MaxLength = 0
	trail.MinLength = 0
	trail.WidthScale = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 1),
		NumberSequenceKeypoint.new(0.5, 1),
		NumberSequenceKeypoint.new(1, 0)
	})
	
	local body = Instance.new(""Part"", knifemodel)
	body.Color = Color3.new()
	body.Size = Vector3.new(0.781, 3.647, 1.386)
	body.CanCollide = false
	body.Name = ""Sword""
	
	local mesh = Instance.new(""SpecialMesh"", body)
	mesh.MeshId = ""rbxassetid://1996456880""
	mesh.Scale = Vector3.new(2, 2.42, 2)
	
	local bodyweld = Instance.new(""Weld"", joint)
	bodyweld.Part0 = joint
	bodyweld.Part1 = body
	bodyweld.C0 = CFrame.new(-2.831, 0.025, 0.017) * CFrame.fromEulerAnglesYXZ(math.rad(87.622), math.rad(90), math.rad(-180))
	
	local bladeweld = Instance.new(""Weld"", joint)
	bladeweld.Part0 = joint
	bladeweld.Part1 = blade
	bladeweld.C0 = CFrame.new(28.028, -0.442, -7.281) * CFrame.fromEulerAnglesYXZ(math.rad(-89.903), math.rad(-90), math.rad(180))
	
	knifemodel.PrimaryPart = joint
end
local charr = plrr.Character
local name = charr.Name
local MainPosition=CFrame.new(0,0,0)
if charr and charr:FindFirstChildOfClass(""Part"") then
	MainPosition = charr:FindFirstChildOfClass(""Part"").CFrame
elseif workspace:FindFirstChildOfClass(""Part"") then
	MainPosition = workspace:FindFirstChildOfClass(""Part"").CFrame*CFrame.new(0,2,0)
else
	MainPosition = CFrame.new(0,4,0)
end
local names = {string.reverse(name),""GOd"",string.upper(name),string.lower(name),""ImMorTalItY"",""dIE"",""ImmOrTal"",""KILLeR"",""pSyChO"",string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255)),string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255)),string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255))..string.char(math.random(1,255)),"""",""hate"",string.sub(name,math.random(0,string.len(name)))}
local accs = {}	local f = nil local face = nil
for _, acc in pairs(charr:GetDescendants()) do
	if acc:IsA'Accessory' or acc:IsA'Hat' or acc:IsA'BodyColors' or acc:IsA'Shirt' or acc:IsA'Pants' or acc:IsA'ShirtGraphic' or acc:IsA'CharacterMesh' then 
		table.insert(accs,acc:Clone()) 
	elseif acc:IsA'Part' and acc.Name == ""Head"" and acc:FindFirstChildOfClass'Decal' then
		f = acc:FindFirstChildOfClass'Decal'.Texture
	end 
end
local sn = 0
local attacking = false
local repeatkey = false
local repeatmouse = false
local Neck=CFrame.new(0,0,0)
local Torso=CFrame.new(0,0,0)
local LeftArm=CFrame.new(0,0,0)
local RightArm=CFrame.new(0,0,0)
local LeftLeg=CFrame.new(0,0,0)
local RightLeg=CFrame.new(0,0,0)
local GunW=CFrame.new(0,0,0)
local KnifeW=CFrame.new(0,0,0)
function InstanceNW(typp,anth)
	local part = Instance.new(typp)
	if anth ~= nil then for i,v in next, anth do pcall(function() part[i] = v end) end end
	return part
end
function alerp(tble,animspeed)
	animspeed=math.min(animspeed,1)
	Torso=Torso:Lerp(tble[1],animspeed)
	Neck=Neck:Lerp(tble[2],animspeed)
	LeftArm=LeftArm:Lerp(tble[3],animspeed)
	RightArm=RightArm:Lerp(tble[4],animspeed)
	LeftLeg=LeftLeg:Lerp(tble[5],animspeed)
	RightLeg=RightLeg:Lerp(tble[6],animspeed)
	GunW=GunW:Lerp(tble[7],animspeed)
	KnifeW=KnifeW:Lerp(tble[8],animspeed)
end
function loop(dur,f)
	local start = os.clock()
	repeat
		f(game:GetService(""RunService"").Heartbeat:wait())
	until os.clock()-start > dur
end
local stoped = false
local W,A,S,D=false,false,false,false
local fallingspeed = 0
local falling = true
local stopeffects = false
local walkspeed = 8 local CCF=nil
local goreSounds = {3739362156,4459576935,3739364168,4459571224,4459570664,4459572763,4459571342,4459571443,4459573960,3847883680,3929462189,3739335394,3929462677}
local MainModel = Instance.new(""Model"",workspace) MainModel.Name = name MainModel.Archivable=true
local EffectModel = Instance.new(""Model"",MainModel) EffectModel.Name = ""EffectModel"" MainModel.Archivable=true
local h=Instance.new(""Part"",MainModel)h.Size=Vector3.new(2,1,1)h.Color=Color3.new() h.Transparency=0 h.Anchored=true h.CanCollide=true h.Name=""Head""
local m=Instance.new(""SpecialMesh"",h)m.MeshType=""Head""m.Scale=Vector3.new(1.25,1.25,1.25)
local t=Instance.new(""Part"",MainModel)t.Material=""Plastic""t.Size=Vector3.new(2,2,1)t.Color=Color3.new() t.Transparency=0 t.Anchored=true t.CanCollide=true t.Name=""Torso""
local ll=Instance.new(""Part"",MainModel)ll.Material=""Plastic""ll.Size=Vector3.new(1,2,1)ll.Color=Color3.new() ll.Transparency=0 ll.Anchored=true ll.CanCollide=true ll.Name=""Left Leg""
local rl=Instance.new(""Part"",MainModel)rl.Material=""Plastic""rl.Size=Vector3.new(1,2,1)rl.Color=Color3.new() rl.Transparency=0 rl.Anchored=true rl.CanCollide=true rl.Name=""Right Leg""
local la=Instance.new(""Part"",MainModel)la.Material=""Plastic""la.Size=Vector3.new(1,2,1)la.Color=Color3.new() la.Transparency=0 la.Anchored=true la.CanCollide=true la.Name=""Left Arm""
local ra=Instance.new(""Part"",MainModel)ra.Material=""Plastic""ra.Size=Vector3.new(1,2,1)ra.Color=Color3.new() ra.Transparency=0 ra.Anchored=true ra.CanCollide=true ra.Name=""Right Arm""
local hum=Instance.new(""Humanoid"",MainModel) hum.Name = """" hum.HealthDisplayType = ""AlwaysOff""
local hairat = Instance.new(""Attachment"") hairat.Parent = h hairat.Position = Vector3.new(0,0.6,0) hairat.Name = ""HairAttachment""
local hatat = Instance.new(""Attachment"") hatat.Parent = h hatat.Position = Vector3.new(0,0.6,0) hatat.Name = ""HatAttachment""
local ffat = Instance.new(""Attachment"") ffat.Parent = h ffat.Position = Vector3.new(0,0,-0.6) ffat.Name = ""FaceFrontAttachment""
local fcat = Instance.new(""Attachment"") fcat.Parent = h fcat.Position = Vector3.new(0,0,0) fcat.Name = ""FaceCenterAttachment""
local bbat = Instance.new(""Attachment"") bbat.Parent = t bbat.Position = Vector3.new(0,0,0.5) bbat.Name = ""BodyBackAttachment""
local bfat = Instance.new(""Attachment"") bfat.Parent = t bfat.Position = Vector3.new(0,0,-0.5) bfat.Name = ""BodyFrontAttachment""
local lcat = Instance.new(""Attachment"") lcat.Parent = t lcat.Position = Vector3.new(-1,1,0) lcat.Name = ""LeftCollarAttachment""
local necat = Instance.new(""Attachment"") necat.Parent = t necat.Position = Vector3.new(0,1,0) necat.Name = ""NeckAttachment""
local rcat = Instance.new(""Attachment"") rcat.Parent = t rcat.Position = Vector3.new(1,1,0) rcat.Name = ""RightCollarAttachment""
local wbat = Instance.new(""Attachment"") wbat.Parent = t wbat.Position = Vector3.new(0,-1,0.5) wbat.Name = ""WaistBackAttachment""
local wcat = Instance.new(""Attachment"") wcat.Parent = t wcat.Position = Vector3.new(0,-1,0) wcat.Name = ""WaistCenterAttachment""
local wfat = Instance.new(""Attachment"") wfat.Parent = t wfat.Position = Vector3.new(0,-1,-0.5) wfat.Name = ""WaistFrontAttachment""
local wfat = Instance.new(""Attachment"") wfat.Parent = ll wfat.Position = Vector3.new(0,-1,0) wfat.Name = ""LeftFootAttachment""
local wfat = Instance.new(""Attachment"") wfat.Parent = rl wfat.Position = Vector3.new(0,-1,0) wfat.Name = ""RightFootAttachment""
local wfat = Instance.new(""Attachment"") wfat.Parent = ra wfat.Position = Vector3.new(0,1,0) wfat.Name = ""RightShoulderAttachment""
local wfat = Instance.new(""Attachment"") wfat.Parent = ra wfat.Position = Vector3.new(0,-1,0) wfat.Name = ""RightGripAttachment""
local wfat = Instance.new(""Attachment"") wfat.Parent = la wfat.Position = Vector3.new(0,1,0) wfat.Name = ""LeftShoulderAttachment""
local wfat = Instance.new(""Attachment"") wfat.Parent = la wfat.Position = Vector3.new(0,-1,0) wfat.Name = ""LeftGripAttachment""
local cam = Instance.new(""Part"",workspace) cam.Name = "">[""..plrr.Name..""]<"" cam.Anchored=true cam.CanCollide=false cam.Transparency=1 cam.Size=Vector3.new()
local playmus = true local mus = Instance.new(""Sound"") mus.Volume = 10 mus.Pitch = 0.85 mus.EmitterSize = 100 mus.SoundId = ""rbxassetid://12616491652"" mus.Parent = t mus.Playing = playmus mus.Looped = true
local muspos = nil muspos = mus.TimePosition local fixmus = false
local GunBackup = script.GunModel:Clone() script.GunModel:Destroy() local Gun = GunBackup:Clone() Gun.Parent=MainModel
--for _, c in pairs(Gun:GetChildren()) do if c:IsA(""BasePart"") then c.Anchored = false c.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0) if c ~= Gun.PrimaryPart then local weldd = Instance.new(""ManualWeld"") weldd.Part0 = Gun.PrimaryPart weldd.Part1 = c weldd.C0 = CFrame.new() weldd.C1 = c.CFrame:inverse() * Gun.PrimaryPart.CFrame weldd.Parent = Gun.PrimaryPart end c.Locked = true end end
local gw = InstanceNW(""Weld"",{Part0 = ra, Part1 = Gun.PrimaryPart, C0 = GunW, C1 = CFrame.new(0,0,0), Parent = Gun})
local KnifeBackup = script.KnifeModel:Clone() script.KnifeModel:Destroy() local Knife = KnifeBackup:Clone() Knife.Parent=MainModel
--for _, c in pairs(Knife:GetChildren()) do if c:IsA(""BasePart"") then c.Anchored = false c.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0) if c ~= Knife.PrimaryPart then local weldd = Instance.new(""ManualWeld"") weldd.Part0 = Knife.PrimaryPart weldd.Part1 = c weldd.C0 = CFrame.new() weldd.C1 = c.CFrame:inverse() * Knife.PrimaryPart.CFrame weldd.Parent = Knife.PrimaryPart end c.Locked = true end end
local kw = InstanceNW(""Weld"",{Part0 = la, Part1 = Knife.PrimaryPart, C0 = KnifeW, C1 = CFrame.new(0,0,0), Parent = Knife})
local EventBackup = Instance.new(""RemoteEvent"")
EventBackup.Name = ""JPInputEventFrom""..plrr.Name
local CamBackup = Instance.new(""RemoteEvent"")
CamBackup.Name = ""JPCamEventFrom""..plrr.Name
local inputScript = [[

local Player = game:GetService(""Players"").LocalPlayer
local Mouse = Player:GetMouse()
local Event = game:GetService(""JointsService""):WaitForChild(""JPInputEventFrom""..Player.Name) 
local CEvent = game:GetService(""JointsService""):WaitForChild(""JPCamEventFrom""..Player.Name) 
local UIS = game:GetService(""UserInputService"")
local h,t = Mouse.Hit,Mouse.Target
local input = function(io,a)
    if a then return end
    local io = {KeyCode=io.KeyCode,UserInputType=io.UserInputType,UserInputState=io.UserInputState}
    Event:FireServer(io)
end
UIS.InputBegan:Connect(input)
UIS.InputEnded:Connect(input)
while wait(1/30) do
	CEvent:FireServer(workspace.Camera.CoordinateFrame)
	local cam = workspace.Camera
	cam.CameraSubject = workspace:FindFirstChild("">[""..Player.Name..""]<"")
	cam.CameraType = ""Custom""
	cam.HeadLocked = true
	cam.HeadScale = 1
	cam.FieldOfView = 70   
	if h~=Mouse.Hit or t~=Mouse.Target then
        Event:FireServer({isMouse=true,Target=Mouse.Target,Hit=Mouse.Hit})
        h,t=Mouse.Hit,Mouse.Target
    end
end

]] 
NLS(inputScript, plrr:WaitForChild(""PlayerGui"")).Name = ""Input""
local EventBackupC = EventBackup:Clone()
local CamBackupC = CamBackup:Clone()
local InputEvent = Instance.new(""RemoteEvent"")
InputEvent.Name = ""JPInputEventFrom""..plrr.Name
InputEvent.Parent = game:GetService(""JointsService"")
local CamEvent = Instance.new(""RemoteEvent"")
CamEvent.Name = ""JPCamEventFrom""..plrr.Name
CamEvent.Parent = game:GetService(""JointsService"")
CamEvent.OnServerEvent:Connect(function(plr, e)
	CCF=e
end)
local CAS = {Actions={}}
local fakeEvent = function()
	local t = {_fakeEvent=true}
	t.Connect = function(self,f)self.Function=f end
	t.connect = t.Connect
	return t
end
local m = {Target=nil,Hit=CFrame.new(),KeyUp=fakeEvent(),KeyDown=fakeEvent(),Button1Up=fakeEvent(),Button1Down=fakeEvent()}
local UIS = {InputBegan=fakeEvent(),InputEnded=fakeEvent()}
function CAS:BindAction(name,fun,touch,...)
	CAS.Actions[name] = {Name=name,Function=fun,Keys={...}}
end
function CAS:UnbindAction(name)
	CAS.Actions[name] = nil
end
local function te(self,ev,...)
	local t = m[ev]
	if t and t._fakeEvent and t.Function then
		t.Function(...)
	end
end
local Mouse,mouse,UserInputService,ContextActionService
do
	m.TrigEvent = te
	UIS.TrigEvent = te
	InputEvent.OnServerEvent:Connect(function(plr,io)
		if plr~=plrr then return end
		if io.isMouse then
			m.Target = io.Target
			m.Hit = io.Hit
		elseif io.UserInputType == Enum.UserInputType.MouseButton1 then
			if io.UserInputState == Enum.UserInputState.Begin then
				m:TrigEvent(""Button1Down"")
			else
				m:TrigEvent(""Button1Up"")
			end
		else
			for n,t in pairs(CAS.Actions) do
				for _,k in pairs(t.Keys) do
					if k==io.KeyCode then
						t.Function(t.Name,io.UserInputState,io)
					end
				end
			end
			if io.UserInputState == Enum.UserInputState.Begin then
				m:TrigEvent(""KeyDown"",io.KeyCode.Name:lower())
				UIS:TrigEvent(""InputBegan"",io,false)
			else
				m:TrigEvent(""KeyUp"",io.KeyCode.Name:lower())
				UIS:TrigEvent(""InputEnded"",io,false)
			end
		end
	end)
	Mouse,mouse,UserInputService,ContextActionService,mausee = m,m,UIS,CAS,m
end
function EndScript() if plrr:FindFirstChild""PlayerGui"" and plrr.PlayerGui:FindFirstChild""Input"" then plrr.PlayerGui.Input:Destroy() end script:ClearAllChildren() script.Disabled = true script:Destroy() stoped=true EventBackup:Destroy() CamBackupC:Destroy() EventBackupC:Destroy() pcall(function() game:GetService(""JointsService"")[""JPInputEventFrom""..plrr.Name]:Destroy() game:GetService(""JointsService"")[""JPCamEventFrom""..plrr.Name]:Destroy() end) end 
game.Players.PlayerRemoving:Connect(function(p)if p == plrr or p.Name == plrr.Name then EndScript() end end)
function onChatted(msg)
	if (msg == "".Stop"" or msg == "".stop"" or msg == ""/e .Stop"" or msg == ""/e .stop"" or msg == ""/e get/nog sr"" or msg == ""get/nog sr"") then EndScript() return end
	if (msg:match(""^/e"") or msg:match(""^/w"")) then return end
	if (not h and not h:IsDescendantOf(workspace)) then return end
end 
local chattedcon = plrr.Chatted:connect(onChatted)
function system()
	game:GetService(""RunService"").Heartbeat:Connect(function(delta) 
		if stoped == false and game.Players:FindFirstChild(plrr.Name) then sn=sn+30*delta
			if plrr and plrr.Character then local ch = plrr.Character plrr.Character=nil ch:Destroy() end

			if MainModel == nil or MainModel.Parent ~= workspace or MainModel.Parent == nil or not MainModel then
				MainModel = Instance.new(""Model"",workspace) MainModel.Name = name MainModel.Archivable=true
				EffectModel = Instance.new(""Model"",MainModel) EffectModel.Name = ""EffectModel"" MainModel.Archivable=true
			end
			if EffectModel == nil or EffectModel.Parent ~= MainModel or EffectModel.Parent == nil or not EffectModel then
				EffectModel = Instance.new(""Model"",MainModel) EffectModel.Name = ""EffectModel"" MainModel.Archivable=true
			end
			if cam == nil or cam.Parent ~= workspace or cam.Parent == nil or not cam then
				cam = Instance.new(""Part"",workspace) cam.Name = "">[""..plrr.Name..""]<"" cam.Anchored=true cam.CanCollide=false cam.Transparency=1 cam.Size=Vector3.new()
			end
			if h == nil or h.Parent ~= MainModel or h.Parent == nil or not h then
				h=Instance.new(""Part"",MainModel)h.Size=Vector3.new(2,1,1)h.Color=Color3.new() h.Transparency=0 h.Anchored=true h.CanCollide=true h.Name=""Head""
				local m=Instance.new(""SpecialMesh"",h)m.MeshType=""Head""m.Scale=Vector3.new(1.25,1.25,1.25) 
				local hairat = Instance.new(""Attachment"") hairat.Parent = h hairat.Position = Vector3.new(0,0.6,0) hairat.Name = ""HairAttachment""
				local hatat = Instance.new(""Attachment"") hatat.Parent = h hatat.Position = Vector3.new(0,0.6,0) hatat.Name = ""HatAttachment""
				local ffat = Instance.new(""Attachment"") ffat.Parent = h ffat.Position = Vector3.new(0,0,-0.6) ffat.Name = ""FaceFrontAttachment""
				local fcat = Instance.new(""Attachment"") fcat.Parent = h fcat.Position = Vector3.new(0,0,0) fcat.Name = ""FaceCenterAttachment""		
				if MainModel:FindFirstChildOfClass(""BodyColors"") then MainModel:FindFirstChildOfClass(""BodyColors""):Destroy() end
			end
			if t == nil or t.Parent ~= MainModel or t.Parent == nil or not t then
				t=Instance.new(""Part"",MainModel)t.Material=""Plastic""t.Size=Vector3.new(2,2,1)t.Color=Color3.new() t.Transparency=0 t.Anchored=true t.CanCollide=true t.Name=""Torso""
				local bbat = Instance.new(""Attachment"") bbat.Parent = t bbat.Position = Vector3.new(0,0,0.5) bbat.Name = ""BodyBackAttachment""
				local bfat = Instance.new(""Attachment"") bfat.Parent = t bfat.Position = Vector3.new(0,0,-0.5) bfat.Name = ""BodyFrontAttachment""
				local lcat = Instance.new(""Attachment"") lcat.Parent = t lcat.Position = Vector3.new(-1,1,0) lcat.Name = ""LeftCollarAttachment""
				local necat = Instance.new(""Attachment"") necat.Parent = t necat.Position = Vector3.new(0,1,0) necat.Name = ""NeckAttachment""
				local rcat = Instance.new(""Attachment"") rcat.Parent = t rcat.Position = Vector3.new(1,1,0) rcat.Name = ""RightCollarAttachment""
				local wbat = Instance.new(""Attachment"") wbat.Parent = t wbat.Position = Vector3.new(0,-1,0.5) wbat.Name = ""WaistBackAttachment""
				local wcat = Instance.new(""Attachment"") wcat.Parent = t wcat.Position = Vector3.new(0,-1,0) wcat.Name = ""WaistCenterAttachment""
				local wfat = Instance.new(""Attachment"") wfat.Parent = t wfat.Position = Vector3.new(0,-1,-0.5) wfat.Name = ""WaistFrontAttachment""	
				if MainModel:FindFirstChildOfClass(""BodyColors"") then MainModel:FindFirstChildOfClass(""BodyColors""):Destroy() end
			end
			if ll == nil or ll.Parent ~= MainModel or ll.Parent == nil or not ll then
				ll=Instance.new(""Part"",MainModel)ll.Material=""Plastic""ll.Size=Vector3.new(1,2,1)ll.Color=Color3.new() ll.Transparency=0 ll.Anchored=true ll.CanCollide=true ll.Name=""Left Leg""
				local wfat = Instance.new(""Attachment"") wfat.Parent = ll wfat.Position = Vector3.new(0,-1,0) wfat.Name = ""LeftFootAttachment""
				if MainModel:FindFirstChildOfClass(""BodyColors"") then MainModel:FindFirstChildOfClass(""BodyColors""):Destroy() end
			end
			if rl == nil or rl.Parent ~= MainModel or rl.Parent == nil or not rl then
				rl=Instance.new(""Part"",MainModel)rl.Material=""Plastic""rl.Size=Vector3.new(1,2,1)rl.Color=Color3.new() rl.Transparency=0 rl.Anchored=true rl.CanCollide=true rl.Name=""Right Leg""
				local wfat = Instance.new(""Attachment"") wfat.Parent = rl wfat.Position = Vector3.new(0,-1,0) wfat.Name = ""RightFootAttachment""
				if MainModel:FindFirstChildOfClass(""BodyColors"") then MainModel:FindFirstChildOfClass(""BodyColors""):Destroy() end
			end
			if la == nil or la.Parent ~= MainModel or la.Parent == nil or not la then
				la=Instance.new(""Part"",MainModel)la.Material=""Plastic""la.Size=Vector3.new(1,2,1)la.Color=Color3.new() la.Transparency=0 la.Anchored=true la.CanCollide=true la.Name=""Left Arm""
				local wfat = Instance.new(""Attachment"") wfat.Parent = ra wfat.Position = Vector3.new(0,1,0) wfat.Name = ""LeftShoulderAttachment""
				local wfat = Instance.new(""Attachment"") wfat.Parent = ra wfat.Position = Vector3.new(0,-1,0) wfat.Name = ""LeftGripAttachment""
				if MainModel:FindFirstChildOfClass(""BodyColors"") then MainModel:FindFirstChildOfClass(""BodyColors""):Destroy() end
			end
			if ra == nil or ra.Parent ~= MainModel or ra.Parent == nil or not ra then
				ra=Instance.new(""Part"",MainModel)ra.Material=""Plastic""ra.Size=Vector3.new(1,2,1)ra.Color=Color3.new() ra.Transparency=0 ra.Anchored=true ra.CanCollide=true ra.Name=""Right Arm""
				local wfat = Instance.new(""Attachment"") wfat.Parent = la wfat.Position = Vector3.new(0,1,0) wfat.Name = ""RightShoulderAttachment""
				local wfat = Instance.new(""Attachment"") wfat.Parent = la wfat.Position = Vector3.new(0,-1,0) wfat.Name = ""RightGripAttachment""		
				if MainModel:FindFirstChildOfClass(""BodyColors"") then MainModel:FindFirstChildOfClass(""BodyColors""):Destroy() end
			end 
			if hum == nil or hum.Parent ~= MainModel or hum.Parent == nil or not hum then
				hum=Instance.new(""Humanoid"",MainModel) hum.Name = """" hum.HealthDisplayType = ""AlwaysOff""
			end
			if face == nil or face.Parent ~= h or face.Parent == nil or not face then
				face = InstanceNW(""Decal"",{Parent=h,Face=""Front"",Texture=f})
			end
			if Gun == nil or Gun.Parent ~= MainModel or Gun.Parent == nil or not Gun then
				Gun = GunBackup:Clone() Gun.Parent=MainModel
				for _, c in pairs(Gun:GetChildren()) do if c:IsA(""BasePart"") then c.Anchored = false c.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0) if c ~= Gun.PrimaryPart then local weldd = Instance.new(""ManualWeld"") weldd.Part0 = Gun.PrimaryPart weldd.Part1 = c weldd.C0 = CFrame.new() weldd.C1 = c.CFrame:inverse() * Gun.PrimaryPart.CFrame weldd.Parent = Gun.PrimaryPart end c.Locked = true end end
				gw = InstanceNW(""Weld"",{Part0 = ra, Part1 = Gun.PrimaryPart, C0 = CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)), C1 = CFrame.new(0,0,0), Parent = Gun})
			end
			if Knife == nil or Knife.Parent ~= MainModel or Knife.Parent == nil or not Knife then
				Knife = KnifeBackup:Clone() Knife.Parent=MainModel
				for _, c in pairs(Knife:GetChildren()) do if c:IsA(""BasePart"") then c.Anchored = false c.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0) if c ~= Knife.PrimaryPart then local weldd = Instance.new(""ManualWeld"") weldd.Part0 = Knife.PrimaryPart weldd.Part1 = c weldd.C0 = CFrame.new() weldd.C1 = c.CFrame:inverse() * Knife.PrimaryPart.CFrame weldd.Parent = Knife.PrimaryPart end c.Locked = true end end
				kw = InstanceNW(""Weld"",{Part0 = la, Part1 = Knife.PrimaryPart, C0 = CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(90),math.rad(-10)), C1 = CFrame.new(0,0,0), Parent = Knife})
			end
			if MainModel:FindFirstChildOfClass(""Accessory"") == nil then for i=1,#accs do if accs[i]:IsA'Accessory' then accs[i]:Clone().Parent=MainModel end end end
			if MainModel:FindFirstChildOfClass(""Hat"") == nil then for i=1,#accs do if accs[i]:IsA'Hat' then accs[i]:Clone().Parent=MainModel end end end
			if MainModel:FindFirstChildOfClass(""BodyColors"") == nil then for i=1,#accs do if accs[i]:IsA'BodyColors' then accs[i]:Clone().Parent=MainModel end end end
			if MainModel:FindFirstChildOfClass(""Shirt"") == nil then for i=1,#accs do if accs[i]:IsA'Shirt' then accs[i]:Clone().Parent=MainModel end end end
			if MainModel:FindFirstChildOfClass(""Pants"") == nil then for i=1,#accs do if accs[i]:IsA'Pants' then accs[i]:Clone().Parent=MainModel end end end
			if MainModel:FindFirstChildOfClass(""ShirtGraphic"") == nil then for i=1,#accs do if accs[i]:IsA'ShirtGraphic' then accs[i]:Clone().Parent=MainModel end end end
			if MainModel:FindFirstChildOfClass(""CharacterMesh"") == nil then for i=1,#accs do if accs[i]:IsA'CharacterMesh' then accs[i]:Clone().Parent=MainModel end end end
			cam.CFrame=MainPosition*CFrame.new(0,1.5,0) cam.Anchored=true cam.CanCollide=false cam.Transparency=1 cam.Size=Vector3.new()
			local chrrr = MainModel:GetChildren() for i=1,#chrrr do
				if chrrr[i] == EffectModel or chrrr[i] == h or chrrr[i] == t or chrrr[i] == rl or chrrr[i] == hum or chrrr[i] == ll or chrrr[i] == ra or chrrr[i] == la or chrrr[i] == mus or chrrr[i] == Gun or chrrr[i] == Knife or chrrr[i]:IsA'Accessory' or chrrr[i]:IsA'Hat' or chrrr[i]:IsA'Shirt' or chrrr[i]:IsA'Pants' or chrrr[i]:IsA'BodyColors' or chrrr[i]:IsA'ShirtGraphic' or chrrr[i]:IsA'CharacterMesh' then else chrrr[i]:Destroy() end
			end
			if plrr and plrr:WaitForChild('Backpack') then plrr:WaitForChild('Backpack'):ClearAllChildren() end
			local rc=Ray.new(MainPosition.Position,(CFrame.new(0,-1-math.max(fallingspeed*delta,0),0).Position).unit*4)
			local pos,hit=workspace:FindPartOnRayWithIgnoreList(rc,{MainModel,cam},false,true)
			if pos~=nil then falling=false fallingspeed=0 MainPosition=MainPosition*CFrame.new(0,hit.Y-MainPosition.Y+3,0)
			else falling=true fallingspeed=fallingspeed+196.2*delta MainPosition=MainPosition-Vector3.new(0,fallingspeed*delta,0)end
			if W or A or S or D then MainPosition=CFrame.new(MainPosition.p,Vector3.new(CCF.x,MainPosition.y,CCF.z))end
			local oldMainPosition=MainPosition
			if W then MainPosition=MainPosition*CFrame.new(0,0,walkspeed*delta)end
			if S then MainPosition=MainPosition*CFrame.new(0,0,-walkspeed*delta)end
			if A then MainPosition=MainPosition*CFrame.new(walkspeed*delta,0,0)end
			if D then MainPosition=MainPosition*CFrame.new(-walkspeed*delta,0,0)end
			if not falling then
				if(MainPosition.X~=oldMainPosition.X or MainPosition.Z~=oldMainPosition.Z)then MainPosition=CFrame.new(MainPosition.p,oldMainPosition.p)
					if attacking == false then
						alerp({CFrame.new(0,0+0.075*math.sin(sn/8),0)*CFrame.Angles(math.rad(2.5-1*math.cos(sn/8)),math.rad(180-5*math.cos(sn/8)),math.rad(0-2.5*math.cos(sn/8))),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(-10+1*math.cos(sn/8)),math.rad(0+5*math.cos(sn/8)),math.rad(0+2.5*math.cos(sn/8))),CFrame.new(-1.5,0-0.1*math.cos(sn/8),0+0.25*math.sin(sn/8))*CFrame.Angles(math.rad(0-15*math.sin(sn/8)),math.rad(0+5*math.cos(sn/8)),0),
							CFrame.new(1.5,0+0.1*math.cos(sn/8),0-0.5*math.sin(sn/8))*CFrame.Angles(math.rad(0+30*math.sin(sn/8)),math.rad(0-10*math.cos(sn/8)),0),CFrame.new(-.5,-2+0.2*math.cos(sn/8),0-1*math.sin(sn/8))*CFrame.Angles(math.rad(-10+40*math.sin(sn/8)),math.rad(10-2.5*math.cos(sn/36)),math.rad(0+1*math.cos(sn/18))),CFrame.new(.5,-2-0.2*math.cos(sn/8),0+1*math.sin(sn/8))*CFrame.Angles(math.rad(-10-40*math.sin(sn/8)),math.rad(0-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
							CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90+10*math.cos(sn/8))),CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(90),math.rad(-10+15*math.cos(sn/8)))},delta*10)
					end
				else
					if attacking == false then
						alerp({CFrame.new(0,0+0.075*math.sin(sn/18),0)*CFrame.Angles(math.rad(5-2.5*math.cos(sn/36)),math.rad(180),math.rad(0-1*math.cos(sn/18))),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(-10-5*math.cos(sn/18)),math.rad(0-5*math.sin(sn/18)),math.rad(0+2.5*math.cos(sn/36))),CFrame.new(-1.05,0-0.025*math.sin(sn/18),0.45)*CFrame.Angles(math.rad(-10-5*math.sin(sn/18)),math.rad(50+15*math.sin(sn/36)),math.rad(0+5*math.sin(sn/18))),
							CFrame.new(1.5,0+0.025*math.sin(sn/18),0)*CFrame.Angles(math.rad(35-10*math.sin(sn/36)),math.rad(-10+5*math.sin(sn/36)),math.rad(25+5*math.sin(sn/18))),CFrame.new(-.5,-2-0.075*math.sin(sn/18),-0.15)*CFrame.Angles(math.rad(0-2.5*math.cos(sn/36)),math.rad(25-2.5*math.cos(sn/36)),math.rad(0+1*math.cos(sn/18))),CFrame.new(.5,-2-0.075*math.sin(sn/18),-0.05)*CFrame.Angles(math.rad(2.5-2.5*math.cos(sn/36)),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
							CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90+10*math.cos(sn/18)),math.rad(90-5*math.cos(sn/18))),CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(90-15*math.cos(sn/36)),math.rad(-10+10*math.cos(sn/18)))},delta*10)
					end
				end
			elseif falling then 
				if(MainPosition.X~=oldMainPosition.X or MainPosition.Z~=oldMainPosition.Z) then MainPosition=CFrame.new(MainPosition.p,oldMainPosition.p)end
				if attacking == false then
					if fallingspeed>0 then
						alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(15-10*math.cos(sn/9)),math.rad(180),0),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(-20-10*math.cos(sn/9)),0,0),CFrame.new(-1.75,0.25,-0.15)*CFrame.Angles(math.rad(15+10*math.sin(sn/9)),0,math.rad(-35-10*math.sin(sn/9))),
							CFrame.new(1.75,0.25,-0.15)*CFrame.Angles(math.rad(15+10*math.sin(sn/9)),0,math.rad(35+10*math.sin(sn/9))),CFrame.new(-.5,-2,0)*CFrame.Angles(math.rad(-5+2.5*math.cos(sn/9)),math.rad(10),0),CFrame.new(.5,-1,-0.25)*CFrame.Angles(math.rad(-10-5*math.sin(sn/9)),math.rad(-5),0),
							CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(70+15*math.cos(sn/9))),CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(90),math.rad(-50+5*math.cos(sn/9)))},delta*10)
					else
						alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(-5-5*math.cos(sn/9)),math.rad(180),0),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(5-10*math.cos(sn/9)),0,0),CFrame.new(-1.5,0.5,-0.75)*CFrame.Angles(math.rad(95+10*math.sin(sn/9)),0,math.rad(-0-5*math.sin(sn/9))),
							CFrame.new(1.5,0.5,-0.75)*CFrame.Angles(math.rad(95+10*math.sin(sn/9)),0,math.rad(0+5*math.sin(sn/9))),CFrame.new(-.5,-1.5,-0.15)*CFrame.Angles(math.rad(-10+5*math.cos(sn/9)),math.rad(5),0),CFrame.new(.5,-0.5,-0.35)*CFrame.Angles(math.rad(-20-10*math.sin(sn/9)),0,0),
							CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(120-15*math.cos(sn/9))),CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(90),math.rad(-70-5*math.cos(sn/9)))},delta*10)
					end
				end
			end
			if MainPosition.Y<=-200 then fallingspeed=0 MainPosition=MainPosition+Vector3.new(0,250,0)end
			t.CFrame=MainPosition*Torso
			h.CFrame=t.CFrame*Neck
			ll.CFrame=t.CFrame*LeftLeg
			rl.CFrame=t.CFrame*RightLeg
			la.CFrame=t.CFrame*LeftArm
			ra.CFrame=t.CFrame*RightArm
			gw.C0=GunW
			kw.C0=KnifeW
			if t.Transparency > 0 or h.Transparency > 0 or ll.Transparency > 0 or rl.Transparency > 0 or la.Transparency > 0 or ra.Transparency > 0 then
				t.Transparency=0 h.Transparency=0 ll.Transparency=0 rl.Transparency=0 la.Transparency=0 ra.Transparency=0
			end
			if math.random(1,100) == 1 then
				LightningBolt({startp=Gun:FindFirstChild'Hole'.CFrame,endp=Gun:FindFirstChild'Hole'.CFrame*CFrame.new(math.random(1,3),math.random(-1,1),math.random(-1,1)),rdm=0.25,ss=0.25,tran=25,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Cylinder"",parts=true,wait=0.025,size=1,size2=0,crtn=true})
			end
			if math.random(1,200) == 1 then
				LightningBolt({startp=Knife:FindFirstChild'Blade'.CFrame,endp=Knife:FindFirstChild'Joint'.CFrame,rdm=1,ss=0.5,tran=50,clr=Color3.new(0,0,0),clr2=Color3.new(0.203922, 0.203922, 0.203922),mesh=""Cylinder"",parts=true,wait=0,size=1,size2=0,crtn=true})
			end
			if math.random(1,50) == 1 then
				spawn(function()
					for i = 1, math.random(1,#names) do game:GetService(""RunService"").Heartbeat:wait()
						MainModel.Name = names[math.random(1,#names)]
						if math.random(1,2) == 1 then
							local a,b = math.random(-45,45),math.random(-45,45)
							Neck=Neck:Lerp(CFrame.new(-b/200,1.5,a/200)*CFrame.Angles(math.rad(a),math.rad(b),0),1)
						end
					end
					MainModel.Name = name
				end)
			end
			if mus.Parent == nil or mus.Parent ~= t or mus == nil or not mus then
				mus = Instance.new(""Sound"") mus.Volume = 10 mus.Pitch = 0.85 mus.EmitterSize = 100 mus.SoundId = ""rbxassetid://12616491652"" mus.Parent = t mus.Playing = playmus mus.Looped = true mus.TimePosition = muspos fixmus = true
			elseif fixmus == false then
				mus.Playing = playmus
				muspos = mus.TimePosition
			else
				fixmus = false
			end
			if plrr and not plrr:WaitForChild(""PlayerGui""):FindFirstChild(""Input"") then
				NLS(inputScript, plrr:WaitForChild(""PlayerGui"")).Name = ""Input""
			end
			if plrr and plrr:WaitForChild(""PlayerGui""):FindFirstChild(""Input"") then
				plrr.PlayerGui.Input.Disabled = false
			end
			if plrr and game:GetService(""JointsService""):FindFirstChild(""JPInputEventFrom""..plrr.Name) == nil then
				local NewInput = EventBackupC:Clone()
				NewInput.Parent = game:GetService(""JointsService"")
				do
					m.TrigEvent = te
					UIS.TrigEvent = te
					NewInput.OnServerEvent:Connect(function(plr,io)
						if plr~=plrr then return end
						if io.isMouse then
							m.Target = io.Target
							m.Hit = io.Hit
						elseif io.UserInputType == Enum.UserInputType.MouseButton1 then
							if io.UserInputState == Enum.UserInputState.Begin then
								m:TrigEvent(""Button1Down"")
							else
								m:TrigEvent(""Button1Up"")
							end
						else
							for n,t in pairs(CAS.Actions) do
								for _,k in pairs(t.Keys) do
									if k==io.KeyCode then
										t.Function(t.Name,io.UserInputState,io)
									end
								end
							end
							if io.UserInputState == Enum.UserInputState.Begin then
								m:TrigEvent(""KeyDown"",io.KeyCode.Name:lower())
								UIS:TrigEvent(""InputBegan"",io,false)
							else
								m:TrigEvent(""KeyUp"",io.KeyCode.Name:lower())
								UIS:TrigEvent(""InputEnded"",io,false)
							end
						end
					end)
					Mouse,mouse,UserInputService,ContextActionService,mausee = m,m,UIS,CAS,m
				end
				if plrr and plrr:WaitForChild(""PlayerGui""):FindFirstChild(""Input"") then
					plrr:WaitForChild(""PlayerGui""):FindFirstChild(""Input""):Destroy()
				end		
			end 
			if plrr and game:GetService(""JointsService""):FindFirstChild(""JPCamEventFrom""..plrr.Name) == nil then
				local NewCam = CamBackupC:Clone()
				NewCam.Parent = game:GetService(""JointsService"")
				NewCam.OnServerEvent:Connect(function(plr, e)
					CCF=e
				end)
			end
		elseif stoped == true or plrr == nil or not plrr or game.Players:FindFirstChild(plrr.Name) == nil or not game.Players:FindFirstChild(plrr.Name) then
			if MainModel then MainModel:Destroy() end
			if cam then cam:Destroy() end
		end
	end)
end
spawn(system)
function r(o,dir,ran,ignor)
	return workspace:FindPartOnRayWithIgnoreList(Ray.new(o, dir.unit * ran), ignor)
end
function cr(pos,dir,ran,ignor)
	local ray = Ray.new(pos,(dir-pos).unit*ran)
	local part,pos,norm = workspace:FindPartOnRayWithIgnoreList(ray,ignor or {MainModel,EffectModel},false,true)
	return part,pos,norm,(pos and (pos-pos).magnitude)
end
function Sound(i,p,v,pi,por)
	local s = nil
	coroutine.resume(coroutine.create(function()
		s = InstanceNW(""Sound"",{Parent=p,Volume=v,Pitch=pi,SoundId =""rbxassetid://""..i})
		s:play()
		if por == true then
			s.PlayOnRemove=true
			s:Destroy()
		end
	end))
	return s
end
--Effect({cf=MainPosition,moveto=Mouse.Hit.p,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""Box"",waits=100,size=Vector3.new(3,3,3),size2=Vector3.new(3,3,3),radX=0,radY=0,radZ=0,mat=""Neon"",lock=false,tran=0,tran2=1,bmr=true,sbm=50,mbm=50})
function Effect(tblee)
	coroutine.resume(coroutine.create(function()
		local origpos = (tblee.cf or nil)
		local moveto = (tblee.moveto or nil)
		local color = (tblee.clr or Color3.new(0,0,0))
		local color2 = (tblee.clr2 or nil)
		local defaultsize = (tblee.size or Vector3.new(2,2,2))
		local material = (tblee.mat or ""Neon"")
		local locker = (tblee.lock or false)
		local rotateX = (tblee.radX or 0)
		local rotateY = (tblee.radY or 0)
		local rotateZ = (tblee.radZ or 0)
		local secondsize = (tblee.size2 or Vector3.new(4,4,4))
		local acttime = (tblee.waits or 100)
		local truetime = acttime/60
		local transpar = (tblee.tran or 0)
		local transpar2 = (tblee.tran2 or 1)
		local typeofmesh = (tblee.mtype or ""S"")
		local boomerang = (tblee.bmr or false)
		local sizeboomerang = (tblee.sbm or 0)
		local moveboomerang = (tblee.mbm or 0)
		local movingspeed = nil
		local mesh = nil
		local endsize = nil
		local endtranpar = nil
		local b1 = 1+moveboomerang/50
		local b2 = 1+sizeboomerang/50
		if typeof(origpos) == ""Vector3""then origpos=CFrame.new(origpos) end 
		if typeof(moveto) == ""CFrame""then moveto=moveto.Position end 
		if typeof(color) == ""BrickColor""then color=color.Color end 
		if typeof(color2) == ""BrickColor""then color2=color2.Color end
		if origpos then
			local p=Instance.new(""Part"",EffectModel)p.Anchored=true p.CanCollide=false p.Color=color p.CFrame=origpos p.Material=material p.Size=Vector3.new(1,1,1)p.CanCollide=false p.Transparency=transpar p.CastShadow=false p.Locked=true
			if typeofmesh == ""Box"" or typeofmesh == ""B"" or typeofmesh == ""1"" then
				mesh=Instance.new(""BlockMesh"",p)mesh.Scale=defaultsize
			elseif typeofmesh == ""Sphere"" or typeofmesh == ""S"" or typeofmesh == ""2"" then
				mesh=Instance.new(""SpecialMesh"",p)mesh.MeshType=""Sphere""mesh.Scale=defaultsize
			elseif typeofmesh == ""Cylinder"" or typeofmesh == ""C"" or typeofmesh == ""3"" then
				mesh=Instance.new(""SpecialMesh"",p)mesh.MeshType=""Cylinder""mesh.Scale=defaultsize
			end
			if locker == true then
				p.Position = origpos.p
				if typeofmesh == ""Cylinder"" or typeofmesh == ""C"" or typeofmesh == ""3"" then 
					p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-(p.Size.Z/1.5))*CFrame.Angles(0,math.rad(90),0)
				else
					p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-(p.Size.Z/1.5))
				end
			else
				if typeofmesh == ""Cylinder"" or typeofmesh == ""C"" or typeofmesh == ""3"" then 
					p.CFrame = origpos*CFrame.Angles(0,math.rad(90),0)
				else
					p.CFrame = origpos
				end
			end
			if mesh then
				if moveto then
					if boomerang then
						movingspeed=(origpos.p - moveto).Magnitude/acttime*b1
					else
						movingspeed=(origpos.p - moveto).Magnitude/acttime
					end
				end
				if boomerang then
					endsize=(defaultsize - secondsize)*b2
				else
					endsize=(defaultsize - secondsize)
				end
				endtranpar=transpar-transpar2
				if boomerang then
					local s = os.clock()
					loop(truetime,function(delta)
						local i = (os.clock()-s)/truetime*acttime
						mesh.Scale=mesh.Scale-(Vector3.new((endsize.X)*((1 - (i/acttime)*b2)),(endsize.Y)*((1 - (i/acttime)*b2)),(endsize.Z)*((1 - (i/acttime)*b2)))*b2)/acttime*delta*60
						p.Transparency = p.Transparency - endtranpar/acttime*delta*60
						p.CFrame=p.CFrame*CFrame.Angles(math.rad(rotateX*delta*60),math.rad(rotateY*delta*60),math.rad(rotateZ*delta*60))
						if color2 then
							p.Color = color:Lerp(color2,i/acttime*delta*60)
						end
						if moveto ~= nil then
							local a = p.Orientation
							if typeofmesh == ""Cylinder"" or typeofmesh == ""C"" or typeofmesh == ""3"" then 
								p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-(movingspeed)*((1-(i/acttime)*b1)))*CFrame.Angles(0,math.rad(90),0)
							else
								p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-(movingspeed)*((1-(i/acttime)*b1)))
							end
							p.Orientation = a
						end
					end)
					--for i = 1, acttime+1 do
					--	game:GetService(""RunService"").Heartbeat:wait() if stopeffects == true then break end
					--	mesh.Scale=mesh.Scale-(Vector3.new((endsize.X)*((1 - (i/acttime)*b2)),(endsize.Y)*((1 - (i/acttime)*b2)),(endsize.Z)*((1 - (i/acttime)*b2)))*b2)/acttime
					--	p.Transparency = p.Transparency - endtranpar/acttime
					--	p.CFrame=p.CFrame*CFrame.Angles(math.rad(rotateX),math.rad(rotateY),math.rad(rotateZ))
					--	if color2 then
					--		p.Color = color:Lerp(color2,i/acttime)
					--	end
					--	if moveto ~= nil then
					--		local a = p.Orientation
					--		if typeofmesh == ""Cylinder"" or typeofmesh == ""C"" or typeofmesh == ""3"" then 
					--			p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-(movingspeed)*((1-(i/acttime)*b1)))*CFrame.Angles(0,math.rad(90),0)
					--		else
					--			p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-(movingspeed)*((1-(i/acttime)*b1)))
					--		end
					--		p.Orientation = a
					--	end
					--end
				else
					local s = os.clock()
					loop(truetime,function(delta)
						local i = (os.clock()-s)/truetime*acttime
						mesh.Scale=mesh.Scale-endsize/acttime*delta*60
						p.Transparency = p.Transparency - endtranpar/acttime*delta*60
						p.CFrame=p.CFrame*CFrame.Angles(math.rad(rotateX*delta*60),math.rad(rotateY*delta*60),math.rad(rotateZ*delta*60))
						if color2 then
							p.Color = color:Lerp(color2,i/acttime*delta*60)
						end
						if moveto ~= nil then
							local a = p.Orientation
							if typeofmesh == ""Cylinder"" or typeofmesh == ""C"" or typeofmesh == ""3"" then 
								p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-movingspeed)*CFrame.Angles(0,math.rad(90),0)
							else
								p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-movingspeed)
							end
							p.Orientation = a
						end
					end)
					--for i = 1, acttime+1 do game:GetService(""RunService"").Heartbeat:wait() if stopeffects == true then break end
					--	mesh.Scale=mesh.Scale-endsize/acttime
					--	p.Transparency = p.Transparency - endtranpar/acttime
					--	p.CFrame=p.CFrame*CFrame.Angles(math.rad(rotateX),math.rad(rotateY),math.rad(rotateZ))
					--	if color2 then
					--		p.Color = color:Lerp(color2,i/acttime)
					--	end
					--	if moveto ~= nil then
					--		local a = p.Orientation
					--		if typeofmesh == ""Cylinder"" or typeofmesh == ""C"" or typeofmesh == ""3"" then 
					--			p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-movingspeed)*CFrame.Angles(0,math.rad(90),0)
					--		else
					--			p.CFrame = CFrame.new(p.Position,moveto)*CFrame.new(0,0,-movingspeed)
					--		end
					--		p.Orientation = a
					--	end
					--end
				end
				p:Destroy()
			end
		elseif origpos == nil then
			warn(""Origpos is nil!"")
		end
	end))
end
--LightningBolt({startp=MainPosition,endp=Mouse.Hit.p,rdm=3,ss=2,tran=100,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Cylinder"",parts=true,wait=0,size=1,size2=0,crtn=true})
function LightningBolt(tblee)
	local startpos = (tblee.startp or nil)
	local endpos = (tblee.endp or nil)
	local randomz = (tblee.rdm or 1)
	local segmentsize = (tblee.ss or 2)
	local fadetime = (tblee.tran or 75)
	local color = (tblee.clr or Color3.new(0,0,0))
	local color2 = (tblee.clr2 or Color3.new(0,0,0))
	local segmentwaiting = (tblee.wait or 0)
	local defaultsize = (tblee.size or 1)
	local corout = (tblee.crtn or false)
	local meshtype = (tblee.mesh or ""Box"")
	local secondsize = (tblee.size2 or 1)
	local endparts = (tblee.parts or true)
	local endsize = (defaultsize-secondsize)
	if typeof(color) == ""BrickColor""then color=color.Color end 
	if typeof(startpos) == ""CFrame""then startpos=startpos.Position end 
	if typeof(endpos) == ""CFrame""then endpos=endpos.Position end
	if startpos and endpos then
		local magnitude = (startpos-endpos).magnitude local cframe = CFrame.new(startpos,endpos)
		if corout == true then 
			coroutine.resume(coroutine.create(function()
				local oldsegment = nil
				for i=1,magnitude+1,segmentsize do if stopeffects == true then break end
					local ex=CFrame.Angles(math.rad(math.random(360)),math.rad(math.random(360)),math.rad(math.random(360)))*CFrame.new(math.random(randomz*100)/100,0,0)
					local new=cframe*CFrame.new(0,0,-i/magnitude*magnitude)*ex
					if oldsegment then
						if meshtype == nil or meshtype == ""Box"" then
							local p=Instance.new(""Part"",EffectModel)p.Anchored=true p.CanCollide=false p.Color=color p.CFrame=CFrame.new(new.p,oldsegment.p)*CFrame.new(0,0,-(new.p-oldsegment.p).magnitude/2)p.Material=""Neon""p.Size=Vector3.new(0.05,0.05,0.05)p.CanCollide=false p.CastShadow=false p.Locked=true
							local mesh=Instance.new(""BlockMesh"",p)mesh.Scale=Vector3.new(10*defaultsize,10*defaultsize,(new.p-oldsegment.p).magnitude*20)
							coroutine.resume(coroutine.create(function()
								loop(fadetime/60,function(delta)
									if color2 then
										p.Color = color:Lerp(color2,i/fadetime*delta*60)
									end
									mesh.Scale=mesh.Scale-Vector3.new(10*(endsize/fadetime*delta*60),10*(endsize/fadetime*delta*60),0)
									p.Transparency=p.Transparency+1/fadetime*delta*60
								end)
								p:Destroy()
							end))
						elseif meshtype == ""Cylinder"" then
							local p=Instance.new(""Part"",EffectModel)p.Anchored=true p.CanCollide=false p.Color=color p.CFrame=CFrame.new(new.p,oldsegment.p)*CFrame.new(0,0,-(new.p-oldsegment.p).magnitude/2)*CFrame.Angles(0,math.rad(90),0) p.Material=""Neon""p.Size=Vector3.new(0.05,0.05,0.05)p.CanCollide=false p.CastShadow=false p.Locked=true
							local mesh=Instance.new(""SpecialMesh"",p)mesh.MeshType=""Cylinder""mesh.Scale=Vector3.new((new.p-oldsegment.p).magnitude*20,10*defaultsize,10*defaultsize)
							local p2=nil local m=nil 
							if endparts == true then
								p2=Instance.new(""Part"",EffectModel)p2.Anchored=true p2.CanCollide=false p2.Color=color p2.CFrame=CFrame.new(new.p,oldsegment.p)*CFrame.new(0,0,-(new.p-oldsegment.p).magnitude) p2.Material=""Neon""p2.Size=Vector3.new(0.05,0.05,0.05)p2.CanCollide=false 
								m=Instance.new(""SpecialMesh"",p2)m.MeshType=""Sphere""m.Scale=Vector3.new(10*defaultsize,10*defaultsize,10*defaultsize)
							end
							coroutine.resume(coroutine.create(function()
								loop(fadetime/60,function(delta)
									if color2 then
										p.Color = color:Lerp(color2,i/fadetime*delta*60)
										if endparts == true then
											p2.Color = color:Lerp(color2,i/fadetime*delta*60)
										end
									end
									if endparts == true then
										m.Scale=m.Scale-Vector3.new(10*(endsize/fadetime*delta*60),10*(endsize/fadetime*delta*60),10*(endsize/fadetime*delta*60))
										p2.Transparency=p2.Transparency+1/fadetime*delta*60
									end
									mesh.Scale=mesh.Scale-Vector3.new(0,10*(endsize/fadetime*delta*60),10*(endsize/fadetime*delta*60))
									p.Transparency=p.Transparency+1/fadetime*delta*60
								end)
								p:Destroy()
								if endparts then
									p2:Destroy()
								end
							end))
						end
						oldsegment=new 
					else 
						oldsegment=new
					end
					if segmentwaiting~=0 then wait(segmentwaiting) end
				end
			end))
		elseif corout == false then
			local oldsegment = nil
			for i=1,magnitude+1,segmentsize do if stopeffects == true then break end
				local ex=CFrame.Angles(math.rad(math.random(360)),math.rad(math.random(360)),math.rad(math.random(360)))*CFrame.new(math.random(randomz*100)/100,0,0)
				local new=cframe*CFrame.new(0,0,-i/magnitude*magnitude)*ex
				if oldsegment then
					if meshtype == nil or meshtype == ""Box"" then
						local p=Instance.new(""Part"",EffectModel)p.Anchored=true p.CanCollide=false p.Color=color p.CFrame=CFrame.new(new.p,oldsegment.p)*CFrame.new(0,0,-(new.p-oldsegment.p).magnitude/2)p.Material=""Neon""p.Size=Vector3.new(0.05,0.05,0.05)p.CanCollide=false p.CastShadow=false p.Locked=true
						local mesh=Instance.new(""BlockMesh"",p)mesh.Scale=Vector3.new(10*defaultsize,10*defaultsize,(new.p-oldsegment.p).magnitude*20)
						coroutine.resume(coroutine.create(function()
							loop(fadetime/60,function(delta)
								if color2 then
									p.Color = color:Lerp(color2,i/fadetime*delta*60)
								end
								mesh.Scale=mesh.Scale-Vector3.new(10*(endsize/fadetime*delta*60),10*(endsize/fadetime*delta*60),0)
								p.Transparency=p.Transparency+1/fadetime*delta*60
							end)
							--for i=1,fadetime do game:GetService(""RunService"").Heartbeat:wait() if stopeffects == true then break end
							--	if color2 then
							--		p.Color = color:Lerp(color2,i/fadetime)
							--	end
							--	mesh.Scale=mesh.Scale-Vector3.new(10*(endsize/fadetime),10*(endsize/fadetime),0)
							--	p.Transparency=p.Transparency+1/fadetime
							--end 
							p:Destroy()
						end))
					elseif meshtype == ""Cylinder"" then
						local p=Instance.new(""Part"",EffectModel)p.Anchored=true p.CanCollide=false p.Color=color p.CFrame=CFrame.new(new.p,oldsegment.p)*CFrame.new(0,0,-(new.p-oldsegment.p).magnitude/2)*CFrame.Angles(0,math.rad(90),0) p.Material=""Neon""p.Size=Vector3.new(0.05,0.05,0.05)p.CanCollide=false p.CastShadow=false p.Locked=true
						local mesh=Instance.new(""SpecialMesh"",p)mesh.MeshType=""Cylinder""mesh.Scale=Vector3.new((new.p-oldsegment.p).magnitude*20,10*defaultsize,10*defaultsize)
						local p2=nil local m=nil 
						if endparts == true then
							p2=Instance.new(""Part"",EffectModel)p2.Anchored=true p2.CanCollide=false p2.Color=color p2.CFrame=CFrame.new(new.p,oldsegment.p)*CFrame.new(0,0,-(new.p-oldsegment.p).magnitude) p2.Material=""Neon""p2.Size=Vector3.new(0.05,0.05,0.05)p2.CanCollide=false 
							m=Instance.new(""SpecialMesh"",p2)m.MeshType=""Sphere""m.Scale=Vector3.new(10*defaultsize,10*defaultsize,10*defaultsize)
						end
						coroutine.resume(coroutine.create(function()
							loop(fadetime/60,function(delta)
								if color2 then
									p.Color = color:Lerp(color2,i/fadetime*delta*60)
									if endparts == true then
										p2.Color = color:Lerp(color2,i/fadetime*delta*60)
									end
								end
								if endparts == true then
									m.Scale=m.Scale-Vector3.new(10*(endsize/fadetime*delta*60),10*(endsize/fadetime*delta*60),10*(endsize/fadetime*delta*60))
									p2.Transparency=p2.Transparency+1/fadetime*delta*60
								end
								mesh.Scale=mesh.Scale-Vector3.new(0,10*(endsize/fadetime*delta*60),10*(endsize/fadetime*delta*60))
								p.Transparency=p.Transparency+1/fadetime*delta*60
							end)
							--for i=1,fadetime do game:GetService(""RunService"").Heartbeat:wait() if stopeffects == true then break end
							--	if color2 then
							--		p.Color = color:Lerp(color2,i/fadetime)
							--		if endparts == true then
							--			p2.Color = color:Lerp(color2,i/fadetime)
							--		end
							--	end
							--	if endparts == true then
							--		m.Scale=m.Scale-Vector3.new(10*(endsize/fadetime),10*(endsize/fadetime),10*(endsize/fadetime))
							--		p2.Transparency=p2.Transparency+1/fadetime
							--	end
							--	mesh.Scale=mesh.Scale-Vector3.new(0,10*(endsize/fadetime),10*(endsize/fadetime))
							--	p.Transparency=p.Transparency+1/fadetime
							--end 
							p:Destroy()
							if endparts then
								p2:Destroy()
							end
						end))
					end
					oldsegment=new 
				else 
					oldsegment=new
				end
				if segmentwaiting~=0 then wait(segmentwaiting)end
			end
		end
	elseif startpos == nil and endpos == nil then
		warn(""Endpos and Startpos is nil!"")
	elseif startpos == nil then
		warn(""Startpos is nil!"")
	elseif endpos == nil then
		warn(""Endpos is nil!"")
	end
end
function Kill(who)
	coroutine.resume(coroutine.create(function()
		if who.Parent ~= MainModel and who.Parent ~= EffectModel and who ~= MainModel and who ~= EffectModel and who ~= cam and who.Parent ~= cam and who ~= script and who.Parent ~= script and who:FindFirstChild(""KilledBy""..plrr.Name) == nil and who.Name ~= ""Ietahuoy"" then
			InstanceNW(""Folder"",{Parent=who,Name=""KilledBy""..plrr.Name})
			coroutine.resume(coroutine.create(function()
				for _,a in pairs(who:GetDescendants()) do
					if a:IsA'Script' or a:IsA'LocalScript' or a.ClassName == ""Script"" or a.ClassName == ""LocalScript"" then
						a.Disabled=true
						a:Destroy()
					elseif a:IsA'ModuleScript' or a.ClassName == ""ModuleScript"" then
						a:Destroy()
					end
				end
				if game:GetService(""Players""):GetPlayerFromCharacter(who) then
					local plr = game:GetService(""Players""):GetPlayerFromCharacter(who)
					for _,a in pairs(plr:WaitForChild'PlayerGui':GetDescendants()) do
						if a:IsA'Script' or a:IsA'LocalScript' or a.ClassName == ""Script"" or a.ClassName == ""LocalScript"" then
							a.Disabled=true
							a:Destroy()
						elseif a:IsA'ModuleScript' or a.ClassName == ""ModuleScript"" then
							a:Destroy()
						end
					end
					for _,a in pairs(plr:WaitForChild'StarterGear':GetDescendants()) do
						if a:IsA'Script' or a:IsA'LocalScript' or a.ClassName == ""Script"" or a.ClassName == ""LocalScript"" then
							a.Disabled=true
							a:Destroy()
						elseif a:IsA'ModuleScript' or a.ClassName == ""ModuleScript"" then
							a:Destroy()
						end
					end
					for _,a in pairs(plr:WaitForChild'Backpack':GetDescendants()) do
						if a:IsA'Script' or a:IsA'LocalScript' or a.ClassName == ""Script"" or a.ClassName == ""LocalScript"" then
							a.Disabled=true
							a:Destroy()
						elseif a:IsA'ModuleScript' or a.ClassName == ""ModuleScript"" then
							a:Destroy()
						end
					end
				end
			end))
			spawn(function()
				while who ~= nil do game:GetService(""RunService"").Heartbeat:wait()
					who:BreakJoints()
					if who:FindFirstChildOfClass(""Humanoid"") ~= nil then who:FindFirstChildOfClass(""Humanoid"").MaxHealth=nil who:FindFirstChildOfClass(""Humanoid"").Health=nil end
				end
			end)
			local mainpart = (who:FindFirstChildOfClass'Part' or who:FindFirstChildOfClass'MeshPart' or who:FindFirstChildOfClass'UnionOperation')
			local e = InstanceNW(""Sound"",{SoundId=""rbxassetid://""..goreSounds[math.random(1,#goreSounds)],Volume=5,PlayOnRemove=true,Pitch=math.random(4,10)/10,Parent=mainpart}) e:Play() e:Destroy()
			Effect({cf=mainpart.CFrame,moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=100,size=Vector3.new(0,0,0),size2=Vector3.new(21,21,21),radX=0,radY=0,radZ=0,mat=""Neon"",lock=false,tran=0.4,tran2=1})
			Effect({cf=mainpart.CFrame,moveto=nil,clr=Color3.new(0,0,0),clr2=Color3.new(0.203922, 0.203922, 0.203922),mtype=""S"",waits=25,size=Vector3.new(21,21,21),size2=Vector3.new(0,0,0),radX=0,radY=0,radZ=0,mat=""Neon"",lock=false,tran=1,tran2=0.4})
			for i = 1,math.random(3,6) do
				Effect({cf=mainpart.CFrame*CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360))),moveto=mainpart.CFrame*CFrame.new(math.random(-15,15),math.random(-15,15),math.random(-15,15)),clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(25,125),size=Vector3.new(3,3,3),size2=Vector3.new(0,42,0),radX=math.random(-1,1),radY=math.random(-1,1),radZ=math.random(-1,1),mat=""Neon"",lock=false,tran=0,tran2=1})
				LightningBolt({startp=mainpart.CFrame,endp=mainpart.CFrame*CFrame.new(math.random(-15,15),math.random(-15,15),math.random(-15,15)),rdm=1,ss=2,tran=math.random(25,125),clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Box"",parts=true,wait=0.001,size=2,size2=0,crtn=true})
			end
			for _, part in pairs(who:GetDescendants()) do
				coroutine.resume(coroutine.create(function()
					if part.ClassName == ""Part"" or part.ClassName == ""MeshPart"" or part.ClassName == ""TrussPart"" or part.ClassName == ""WedgePart"" or part.ClassName == ""CornerWedgePart"" or part.ClassName == ""UnionOperation"" or part.ClassName == ""NegateOperation"" or part.ClassName == ""Seat"" or part.ClassName == ""VehicleSeat"" or part.ClassName == ""SpawnLocation"" then
						local s = nil local r = math.random(1,3) if r==1 then s=part.Size.Z elseif r==2 then s=part.Size.Y elseif r==3 then s=part.Size.X end
						part:BreakJoints() part:Destroy()
						Effect({cf=part.CFrame,moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(25,50),size=Vector3.new(s,s,s),size2=Vector3.new(s*5,s*5,s*5),radX=0,radY=0,radZ=0,mat=""Neon"",lock=false,tran=0.4,tran2=1})
						Effect({cf=part.CFrame,moveto=part.CFrame*CFrame.new(math.random(-15,15),math.random(-15,15),math.random(-15,15)),clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""B"",waits=math.random(25,125),size=part.Size,size2=part.Size,radX=math.random(-1,1),radY=math.random(-1,1),radZ=math.random(-1,1),mat=""Neon"",lock=false,tran=0,tran2=1})
					end
				end))
			end
			who:ClearAllChildren() who:BreakJoints() who:Destroy()
		end
	end))
end
function AoeDam(Where,Range)
	coroutine.resume(coroutine.create(function()
		if Where ~= nil then
			if typeof(Where) == ""CFrame""then Where=Where.Position end 
			for index, a in pairs(workspace:GetDescendants()) do
				if (a.Parent ~= MainModel and a.Parent ~= EffectModel and a ~= MainModel and a ~= EffectModel and a ~= cam and a.Parent ~= cam and a ~= script and a.Parent ~= script) and a.ClassName == ""Part"" or a.ClassName == ""MeshPart"" or a.ClassName == ""TrussPart"" or a.ClassName == ""WedgePart"" or a.ClassName == ""CornerWedgePart"" or a.ClassName == ""UnionOperation"" or a.ClassName == ""NegateOperation"" or a.ClassName == ""Seat"" or a.ClassName == ""VehicleSeat"" or a.ClassName == ""SpawnLocation"" then
					if a.Parent ~= nil and a.Parent:IsA(""Model"") and a.Parent.ClassName == ""Model"" and a.Size == Vector3.new(2,2,1) or a.Size == Vector3.new(2,2.1,1) or a.Size == Vector3.new(1,1.105,1) or a.Size == Vector3.new(1,1.227,1) or a.Size == Vector3.new(1,1.253,1) or a.Size == Vector3.new(1,1.277,1) or a.Size == Vector3.new(1,2,1) or a.Size == Vector3.new(2,1,1) or a.Name == ""Head"" or a.Name == ""Torso"" or a.Name == ""Right Arm"" or a.Name == ""Left Arm"" or a.Name == ""Right Leg"" or a.Name == ""Left Leg"" or a.Name == ""UpperTorso"" or a.Name == ""HumanoidRootPart"" or a.Name == ""LowerTorso"" or a.Name == ""RightHand"" or a.Name == ""LeftHand"" or a.Name == ""RightFoot"" or a.Name == ""LeftFoot"" or a.Name == ""LeftUpperArm"" or a.Name == ""LeftLowerArm"" or a.Name == ""RightUpperArm"" or a.Name == ""RightLowerArm"" or a.Name == ""LeftUpperLeg"" or a.Name == ""LeftLowerLeg"" or a.Name == ""RightUpperLeg"" or a.Name == ""RightLowerLeg"" then
						if (a.Position - Where).Magnitude <= Range+a.Size.Magnitude then
							Kill(a.Parent)
						end
					end
				end
			end
		end
	end))
end
function Slash()
	attacking = true walkspeed = 16
	repeat
		local ran = math.random(1,3)
		if ran == 1 then
			loop(0.22,function(delta)
				alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(225),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-45),math.rad(0)),CFrame.new(-1.75,0.75,0.5)*CFrame.Angles(math.rad(-20),math.rad(20),math.rad(-90)),
					CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
					CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(120),math.rad(0),math.rad(-90))},delta*15)
			end)
			--for i=0,1,0.075 do
			--	local delta = game:GetService(""RunService"").Heartbeat:wait()
			--	alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(225),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-45),math.rad(0)),CFrame.new(-1.75,0.75,0.5)*CFrame.Angles(math.rad(-20),math.rad(20),math.rad(-90)),
			--		CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
			--		CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(120),math.rad(0),math.rad(-90))},.3)
			--end
			if Knife and Knife:FindFirstChild'Trail' then Knife:FindFirstChild'Trail'.Enabled = true end
			Sound(12222208,Knife:FindFirstChild'Blade',5,math.random(6,8)/10,true)
			loop(0.22,function(delta)
				if Knife and Knife:FindFirstChild'Blade' then AoeDam(Knife:FindFirstChild'Blade'.CFrame,3) end
				alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(135),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(45),math.rad(0)),CFrame.new(-0.75,0.5,-1.25)*CFrame.Angles(math.rad(90),math.rad(0),math.rad(20)),
					CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
					CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(90))},delta*15)
			end)
			--for i=0,1,0.075 do game:GetService(""RunService"").Heartbeat:wait() if Knife and Knife:FindFirstChild'Blade' then AoeDam(Knife:FindFirstChild'Blade'.CFrame,3) end
			--	alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(135),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(45),math.rad(0)),CFrame.new(-0.75,0.5,-1.25)*CFrame.Angles(math.rad(90),math.rad(0),math.rad(20)),
			--		CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
			--		CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(90))},.3)
			--end
			if Knife and Knife:FindFirstChild'Trail' then Knife:FindFirstChild'Trail'.Enabled = false end
		elseif ran == 2 then
			loop(0.22,function(delta)
				alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(260),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-80),math.rad(0)),CFrame.new(-1.75,0.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(-70)),
					CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
					CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(-20),math.rad(0),math.rad(-110))},delta*15)
			end)
			--for i=0,1,0.075 do game:GetService(""RunService"").Heartbeat:wait()
			--	alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(260),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-80),math.rad(0)),CFrame.new(-1.75,0.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(-70)),
			--		CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
			--		CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(-20),math.rad(0),math.rad(-110))},.3)
			--end
			if Knife and Knife:FindFirstChild'Trail' then Knife:FindFirstChild'Trail'.Enabled = true end
			Sound(12222208,Knife:FindFirstChild'Blade',5,math.random(6,8)/10,true)
			loop(0.22,function(delta)
				if Knife and Knife:FindFirstChild'Blade' then AoeDam(Knife:FindFirstChild'Blade'.CFrame,3) end
				alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(0)),CFrame.new(-2,0.5,-0.15)*CFrame.Angles(math.rad(90),math.rad(0),math.rad(-80)),
					CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
					CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(90))},delta*15)
			end)
			--for i=0,1,0.075 do game:GetService(""RunService"").Heartbeat:wait() if Knife and Knife:FindFirstChild'Blade' then AoeDam(Knife:FindFirstChild'Blade'.CFrame,3) end
			--	alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(0)),CFrame.new(-2,0.5,-0.15)*CFrame.Angles(math.rad(90),math.rad(0),math.rad(-80)),
			--		CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
			--		CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(90))},.3)
			--end
			if Knife and Knife:FindFirstChild'Trail' then Knife:FindFirstChild'Trail'.Enabled = false end
		elseif ran == 3 then
			loop(0.22,function(delta)
				alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(135),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(45),math.rad(0)),CFrame.new(-0.5,1,-1)*CFrame.Angles(math.rad(120),math.rad(0),math.rad(50)),
					CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
					CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(180),math.rad(0),math.rad(-150))},delta*20)
			end)
			if Knife and Knife:FindFirstChild'Trail' then Knife:FindFirstChild'Trail'.Enabled = true end
			Sound(12222208,Knife:FindFirstChild'Blade',5,math.random(6,8)/10,true)
			loop(0.22,function(delta)
				if Knife and Knife:FindFirstChild'Blade' then AoeDam(Knife:FindFirstChild'Blade'.CFrame,3) end
				alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(225),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-45),math.rad(0)),CFrame.new(-2,0.5,0)*CFrame.Angles(math.rad(40),math.rad(0),math.rad(-80)),
					CFrame.new(1.5,0.1,0.35)*CFrame.Angles(math.rad(-10),math.rad(-20),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
					CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(180),math.rad(0),math.rad(-90))},delta*20)
			end)
			if Knife and Knife:FindFirstChild'Trail' then Knife:FindFirstChild'Trail'.Enabled = false end
		end
	until repeatmouse == false
	attacking = false walkspeed = 8
end
function Shoot()
	attacking = true walkspeed = 4
	repeat
		loop(0.25,function(delta)
			alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(215),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-35),math.rad(0)),CFrame.new(-1.25,0,0.45)*CFrame.Angles(math.rad(-30),math.rad(30),math.rad(0)),
				CFrame.new(1.75,0.5,-1)*CFrame.Angles(math.rad(90),math.rad(0),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
				CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(-10))},delta*20)
		end)
		if Gun and Gun:FindFirstChild'Hole' then
			local o,h=r(Gun:FindFirstChild'Hole'.Position,Mouse.Hit*CFrame.new(math.random(-1,1),math.random(-1,1),math.random(-1,1)).Position-Gun:FindFirstChild'Hole'.Position,250,{MainModel,cam})
			Sound(642890855,Gun:FindFirstChild'Hole',5,math.random(4,6)/10,true)
			Effect({cf=Gun:FindFirstChild'Hole'.CFrame,moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""Box"",waits=math.random(50,100),size=Vector3.new(1,1,1),size2=Vector3.new(0,0,0),radX=math.random(-5,5),radY=math.random(-5,5),radZ=math.random(-5,5),mat=""Neon"",lock=false,tran=0,tran2=1})
			Effect({cf=Gun:FindFirstChild'Hole'.CFrame,moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(100,200),size=Vector3.new(0,0,0),size2=Vector3.new(4,4,4),radX=0,radY=0,radZ=0,mat=""Neon"",lock=false,tran=0,tran2=1})
			for i = 1, math.random(2,4) do
				LightningBolt({startp=Gun:FindFirstChild'Hole'.CFrame,endp=Gun:FindFirstChild'Hole'.CFrame*CFrame.new(math.random(-6,-4),math.random(-2,2),math.random(-2,2)),rdm=0.25,ss=0.25,tran=25,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Cylinder"",parts=true,wait=0.025,size=1,size2=0,crtn=true})
				Effect({cf=Gun:FindFirstChild'Hole'.CFrame,moveto=Gun:FindFirstChild'Hole'.CFrame*CFrame.new(math.random(-5,5),math.random(-5,5),math.random(-5,5)),clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(25,50),size=Vector3.new(1,1,1),size2=Vector3.new(0,10,0),radX=math.random(-5,5),radY=math.random(-5,5),radZ=math.random(-5,5),mat=""Neon"",lock=false,tran=0,tran2=1})
			end
			LightningBolt({startp=Gun:FindFirstChild'Hole'.CFrame,endp=h,rdm=1,ss=5,tran=25,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Box"",parts=true,wait=0,size=2,size2=0,crtn=true})
			Effect({cf=h,moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""Box"",waits=math.random(50,100),size=Vector3.new(0,0,0),size2=Vector3.new(8,8,8),radX=math.random(-5,5),radY=math.random(-5,5),radZ=math.random(-5,5),mat=""Neon"",lock=false,tran=0,tran2=1})
			Effect({cf=h,moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(50,100),size=Vector3.new(12,12,12),size2=Vector3.new(0,0,0),radX=0,radY=0,radZ=0,mat=""Neon"",lock=false,tran=0,tran2=1})
			AoeDam(h,5)
			for i = 1, math.random(4,8) do
				LightningBolt({startp=h,endp=CFrame.new(h)*CFrame.new(math.random(-15,15),math.random(-15,15),math.random(-15,15)),rdm=3,ss=1,tran=25,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Box"",parts=true,wait=0.025,size=1,size2=0,crtn=true})
				Effect({cf=h,moveto=CFrame.new(h)*CFrame.new(math.random(-25,25),math.random(-25,25),math.random(-25,25)),clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(25,50),size=Vector3.new(4,4,4),size2=Vector3.new(0,0,0),radX=0,radY=0,radZ=0,mat=""Neon"",lock=false,tran=0,tran2=1})
			end	
			loop(0.05,function(delta)
				alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(215),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-35),math.rad(0)),CFrame.new(-1.25,0,0.45)*CFrame.Angles(math.rad(-30),math.rad(30),math.rad(0)),
					CFrame.new(1.75,1,-1)*CFrame.Angles(math.rad(120),math.rad(0),math.rad(35)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
					CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(-10))},delta*40)
			end)
		end
	until repeatkey == false
	attacking = false walkspeed = 8
end
function Dash()
	attacking = true walkspeed = 1.42
	--local lc = 0
	local s = os.clock()
	local e = 5
	local lc = 0
	repeat
		local delta = game:GetService(""RunService"").Heartbeat:wait()
		local progress = (os.clock()-s)/2.4
		e = 5+progress*145
		lc = progress*29

		if math.random(1,100) <= 1+lc and Knife and Knife:FindFirstChild'Blade' then LightningBolt({startp=Knife:FindFirstChild'Blade'.CFrame,endp=la.CFrame,rdm=1,ss=0.5,tran=50,clr=Color3.new(0,0,0),clr2=Color3.new(0.203922, 0.203922, 0.203922),mesh=""Cylinder"",parts=true,wait=0,size=1,size2=0,crtn=true}) end
		alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(260),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-80),math.rad(0)),CFrame.new(-2+math.random(-e,e)/500,0.5+math.random(-e,e)/500,0+math.random(-e,e)/500)*CFrame.Angles(math.rad(0+(math.random(-e,e)/5)),math.rad(0+(math.random(-e,e)/5)),math.rad(-90+(math.random(-e,e)/5))),
			CFrame.new(1.5,0.25,-0.2)*CFrame.Angles(math.rad(0),math.rad(10),math.rad(30)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
			CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(70))},delta*20)
	until repeatkey == false or os.clock()-s > 2.4
	LightningBolt({startp=MainPosition,endp=MainPosition*CFrame.new(0,0,e),rdm=1,ss=2,tran=75,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Cylinder"",parts=true,wait=0,size=1,size2=0,crtn=true})
	AoeDam(MainPosition,5)
	Sound(12222208,Knife:FindFirstChild'Blade',5,math.random(6,8)/10,true)
	for i = 1,10 do
		MainPosition=MainPosition*CFrame.new(0,0,e/10)
		AoeDam(MainPosition,5)
		Sound(12222208,Knife:FindFirstChild'Blade',5,math.random(6,8)/10,true)
		LightningBolt({startp=MainPosition,endp=MainPosition*CFrame.new(math.random(-15,15),math.random(-15,15),math.random(-15,15)),rdm=3,ss=1,tran=25,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Box"",parts=true,wait=0.01,size=2,size2=3,crtn=true})
		Effect({cf=MainPosition*CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360))),moveto=MainPosition*CFrame.new(math.random(-5,5),math.random(-5,5),math.random(-5,5)),clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""B"",waits=math.random(25,75),size=Vector3.new(4,4,4),size2=Vector3.new(0,0,0),radX=math.random(-5,5),radY=math.random(-5,5),radZ=math.random(-5,5),mat=""Neon"",lock=false,tran=0,tran2=1})
		for i = 1, math.random(2,3) do
			Effect({cf=MainPosition*CFrame.new(math.random(-5,5),math.random(-5,5),math.random(-5,5))*CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360))),moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(75,150),size=Vector3.new(1,1,1),size2=Vector3.new(0,4,0),radX=math.random(-1,1),radY=math.random(-1,1),radZ=math.random(-1,1),mat=""Neon"",lock=false,tran=0,tran2=1})
		end
	end
	--for i=0,1,0.1 do game:GetService(""RunService"").Heartbeat:wait()
	alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(0)),CFrame.new(-2,0.5,0)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(-90)),
		CFrame.new(1.5,0.25,-0.2)*CFrame.Angles(math.rad(0),math.rad(10),math.rad(30)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
		CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(90))},1)
	--end
	task.wait(1/6)
	attacking = false walkspeed = 8
end
function ThrowKnife()
	attacking = true walkspeed = 1.42 local throwed = false
	loop(1/3,function(delta)
		alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(225),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(-45),math.rad(0)),CFrame.new(-1.75,1.25,0.5)*CFrame.Angles(math.rad(220),math.rad(0),math.rad(-45)),
			CFrame.new(1.5,0,-0.25)*CFrame.Angles(math.rad(20),math.rad(-20),math.rad(20)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
			CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(-90),math.rad(60))},delta*20)
	end)
	local o,h=r(la.Position,Mouse.Hit.p-la.Position,2500,{MainModel,cam})
	if h and o ~= nil then throwed=true
		Sound(743521497,la,5,math.random(8,10)/10,true)
		local kneef = KnifeBackup:Clone() kneef.Parent = EffectModel
		for _, c in pairs(kneef:GetChildren()) do if c:IsA(""BasePart"") then c.Anchored = false c.CanCollide = true c.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0) if c ~= kneef.PrimaryPart then local weldd = Instance.new(""ManualWeld"") weldd.Part0 = kneef.PrimaryPart weldd.Part1 = c weldd.C0 = CFrame.new() weldd.C1 = c.CFrame:inverse() * kneef.PrimaryPart.CFrame weldd.Parent = kneef.PrimaryPart end c.Locked = true end end
		kneef.PrimaryPart.CFrame=CFrame.new(h,la.Position)*CFrame.Angles(0,math.rad(90),0)*CFrame.new(1.5,0,0)
		LightningBolt({startp=la.CFrame,endp=h,rdm=1,ss=5,tran=75,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mesh=""Box"",parts=true,wait=0,size=2,size2=0,crtn=true})
		Effect({cf=h,moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""B"",waits=math.random(75,100),size=Vector3.new(0,0,0),size2=Vector3.new(2,2,2),radX=math.random(-15,15),radY=math.random(-15,15),radZ=math.random(-15,15),mat=""Neon"",lock=false,tran=0,tran2=1})
		Effect({cf=h,moveto=nil,clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(50,75),size=Vector3.new(8,8,8),size2=Vector3.new(0,0,0),radX=0,radY=0,radZ=0,mat=""Neon"",lock=false,tran=1,tran2=0})
		for i=1,math.random(3,5) do
			Effect({cf=h,moveto=CFrame.new(h)*CFrame.new(math.random(-5,5),math.random(-5,5),math.random(-5,5)),clr=Color3.new(0.203922, 0.203922, 0.203922),clr2=Color3.new(0,0,0),mtype=""S"",waits=math.random(25,50),size=Vector3.new(1,1,2),size2=Vector3.new(0,0,4),radX=0,radY=0,radZ=0,mat=""Neon"",lock=true,tran=0,tran2=1})
		end
		local w = InstanceNW(""ManualWeld"",{Part0 = o, Part1 = kneef.PrimaryPart, C0 = CFrame.new(0,0,0), C1 = kneef.PrimaryPart.CFrame:inverse() * o.CFrame, Parent = o})
		AoeDam(kneef.Blade.Position,5)
		spawn(function()
			wait(math.random(3,12))
			local start = os.clock()
			loop(10/6,function()
				local progress = (os.clock()-start)/(10/6)
				for _,a in pairs(kneef:GetChildren()) do
					if a:IsA(""BasePart"") then
						a.Transparency=progress
					end
				end
			end)
			for _,a in pairs(kneef:GetChildren()) do
				if a:IsA(""BasePart"") then
					a.Transparency=1
				end
			end
			--for i = 1,100 do game:GetService(""RunService"").Heartbeat:wait()
			--	if kneef then
			--		for _,a in pairs(kneef:GetChildren()) do if a:IsA(""BasePart"") then a.Transparency=a.Transparency+1/100 end end
			--	end
			--end
			if kneef then kneef:Destroy() w:Destroy() end
		end)
		if Knife then for _,a in pairs(Knife:GetChildren()) do if a:IsA(""BasePart"") then a.Transparency=1 end end end
		--for i=0,5,0.25 do game:GetService(""RunService"").Heartbeat:wait()
		alerp({CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(0)),CFrame.new(0,1.5,-0.15)*CFrame.Angles(math.rad(0),math.rad(90),math.rad(0)),CFrame.new(-1,0.25,-0.5)*CFrame.Angles(math.rad(60),math.rad(0),math.rad(30)),
			CFrame.new(1.5,0,-0.25)*CFrame.Angles(math.rad(20),math.rad(-20),math.rad(20)),CFrame.new(-.5,-2,-0.15)*CFrame.Angles(math.rad(0),math.rad(25),math.rad(0)),CFrame.new(.5,-2,-0.05)*CFrame.Angles(math.rad(0),math.rad(-15-1*math.cos(sn/18)),math.rad(0+1*math.cos(sn/18))),
			CFrame.new(0,-1,0)*CFrame.Angles(0,math.rad(-90),math.rad(90)),CFrame.new(0,-1,0)*CFrame.Angles(math.rad(0),math.rad(-90),math.rad(60))},1)
		--end
		task.wait(1/3)
	end
	attacking = false walkspeed = 8
	if throwed == true then
		local start = os.clock()
		loop(0.41,function(delta)
			local progress = (os.clock()-start)/0.41
			if Knife then
				for _,a in pairs(Knife:GetChildren()) do
					if a:IsA(""BasePart"") then
						a.Transparency=1-progress
					end
				end
			end 
		end)
		if Knife then
			for _,a in pairs(Knife:GetChildren()) do
				if a:IsA(""BasePart"") then
					a.Transparency=0
				end
			end
		end 
	end
end
Mouse.Button1Down:connect(function()
	repeatmouse = true
	if attacking == false then
		Slash()
	end
end)
Mouse.Button1Up:connect(function()
	repeatmouse = false
end)
Mouse.KeyDown:connect(function(key)
	if stoped == false and game.Players:FindFirstChild(plrr.Name) then repeatkey=true
		if key == ""w"" then
			W=true 
		elseif key == ""a"" then
			A=true 
		elseif key == ""s"" then
			S=true 
		elseif key == ""d"" then
			D=true
		elseif key == ""space"" or key == ""j"" then
			if falling == false then
				falling=true
				fallingspeed=-50
				MainPosition=MainPosition*CFrame.new(0,2,0)
			end
		elseif key == ""e"" and attacking == false then
			Shoot()
		elseif key == ""z"" and attacking == false then
			Dash()
		elseif key == ""c"" and attacking == false then
			ThrowKnife()
		elseif key == ""p"" then
			MainModel:Destroy()
			cam:Destroy()
		elseif key == ""l"" then
			stopeffects=true wait() stopeffects=false
		elseif key == ""m"" then
			playmus = not playmus
		end
	end
end)
Mouse.KeyUp:connect(function(key)
	if stoped == false and game.Players:FindFirstChild(plrr.Name) then
		if key==""w"" then 
			W=false 
		elseif key==""a"" then
			A=false
		elseif key==""s"" then
			S=false
		elseif key==""d"" then
			D=false
		elseif key==""e"" then
			repeatkey = false
		elseif key==""z"" then
			repeatkey = false
		end
	end
end)"
fJJtvezX,Pitman03a,AJIECAHDP,Lua,Sunday 25th of June 2023 12:14:38 PM CDT,"-- Initial settings. Depends on game settings and mods.

print(""BblCOTA noBePxHocTu"") 
hr = tonumber(read())
print(""BblCOTA nepeKpbltuu'"")
hp = tonumber(read())
print(""PaDuyc"")
im = tonumber(read())

fl = 1 -- With fuel off 0, otherwise 1.
ch = 1 -- Ender Storage 1, Set Chest 2, Goto start chest 3. 

g = 0
b = 0
jf = 0
i = 0
j = 0

ff = hr + (2*im)
k = hp + 3
hmin = hr - 6
h = (hmin%k) + k
-- print(""ff="", ff, "",k="", k, "",hmin="", hmin,"",h="",h)

-- Dig function

function digF()
--print(""digForward"")
 turtle.select(1)
 g = 0
 while g ~= 50 do
  g = g + 1
  if turtle.detect() then 
   turtle.dig()
   sleep(0.3)
  else g = 50
  end
 end
end
 
function digU()
--print(""digUp"")
 turtle.select(1)
 g = 0
 while g ~= 50 do
  g = g + 1
  if turtle.detectUp() then 
  turtle.digUp()
  sleep(0.3)
  else g = 50
  end
 end
end
 
function digD()
--print(""digDown"")
 turtle.select(1)
 g = 0
 while g ~= 50 do
  g = g + 1
  if turtle.detectDown() then 
  turtle.digDown()
  sleep(0.3)
  else g = 50
  end
 end
end

-- Move function

function moveRL(a)
 if a == ""L"" then 
  turtle.turnLeft()
  sleep(0.3)
 elseif a == ""R"" then 
  turtle.turnRight()
  sleep(0.3)
 end
end

function forw()
 g = 0
--print(""forward"")
 while g~= 50 do
  g = g + 1
  if turtle.forward() then 
   g = 50
  else 
   g = 0
   turtle.attack()
  end
 end
end
 
function Upp(h)
 jf = 0
 local h = h
 while jf ~= h do
  g = 0
  while g < 50 do
   g = g + 1
   if turtle.up() then 
    g = 50
   else 
    g = 0
    turtle.attackUp()
   end
  end
  jf = jf + 1
 end
end
 
function Down(h)
 jf = 0
 local h = h
 while jf ~= h do
  g = 0
  if turtle.detectDown() then 
   turtle.digDown()
  end
  while g < 50 do
   g = g + 1
   if turtle.down() then 
    g = 50
   else 
    g = 0
    turtle.attackDown()
    sleep(0.5)
   end
  end
  jf = jf + 1
 end
 turtle.digDown()
end

-- Floor orientation function

function repit(kg, kf) 
 local kg = kg
 local kf = kf
 if kg == 0 then 
  a = ""F""
 elseif kg > 0 then 
  a = ""R""
 elseif kg < 0 and j ~= i*8 then 
  a = ""L""
 else a = ""R""
 end
 while kf ~= kh do
  if kf == 0 - ((kg^2)^(1/2)) then 
   moveRL(a)
   sleep(0.3)
  end
   forw()
   kf = kf - 1
  end
  moveRL(""L"")
  sleep(0.3)
end

function goZero(kg, kf)
 local kg = kg
 local kf = kf
 moveRL(""L"")
 sleep(0.3)
 if kg == 0 then 
  a = ""F""
 elseif kg < 0 and j ~= i*8 then 
  a = ""R""
 else 
  a = ""L""
 end
 while kf ~= 0 do
  if kf == ((kg^2)^(1/2)) then 
   moveRL(a)
   sleep(0.3)
  end
 forw()
 kf = kf - 1
 end
 moveRL(""L"")
 sleep(0.3)
 moveRL(""L"")
 sleep(0.3)
end

-- Fuel function

function Fuel()
 if fl == 1 then
  while turtle.getFuelLevel() <= 14000 do
   turtle.select(16)
   if turtle.suck() then 
    turtle.refuel() 
   end
  end
 end
end

function FuelES()
 g = 0
 if fl == 1 then
 turtle.select(15)
  while g < 50 do
   g = g + 1
   if turtle.placeDown() then
    while turtle.getFuelLevel() <= 14000 do
	 turtle.suckDown(1) 
     turtle.refuel()
     sleep(0.3)
    end
    sleep(0.3)	
    turtle.digDown()
    sleep(0.3)
    turtle.select(1)
    g = 50
   else 
    turtle.digDown()
   end
  end
 end
end

-- Chest function

function ChestSet() 
 turtle.select(16)
 turtle.placeDown()
 b = 1
 while b < 16 do 
  turtle.select(b)
  turtle.dropDown()
  b = b + 1
 end
end
 
function Chest() 
 b = 1
 while b < 17 do 
  turtle.select(b)
  turtle.dropUp()
  b = b + 1
 end
end

function ChestES() 
 g = 0
 b = 0
 turtle.select(16)
 while g < 50 do
  g = g + 1
  if turtle.placeDown() then
   while b < 14 do
 --????? ? ??????
    b = b + 1
    turtle.select(b)
    turtle.dropDown()
    sleep(0.3)
   end
   turtle.select(16)
   sleep(0.3)
   turtle.digDown()
   sleep(0.3)
   turtle.select(1) 
   g = 50
  else
  g = 0
  turtle.digDown()
  sleep(0.3)
  end
 end
end

-- Main program

if fl == 1 and ch == 1 and turtle.getFuelLevel() < 80 then
 FuelES()
elseif ch ~= 1 and fl == 1 and turtle.getFuelLevel() <= ff then
 Fuel()
end

Down(h)

while h <= hmin do
 i = 0
 while i < im do
  j = 0
  i = i + 1
  while j < (i*8) do
   j = j + 1
   kg = (j%(i*2)) - i
   kf = i + ((kg^2)^(1/2))
   if j == 1 then 
    a = ""L""
   elseif (j%(i*2)) == 0 and j ~= (i*8) then 
    a = ""L""
   else a = ""F""
   end
   digF()
   forw()
   moveRL(a)
   digU()
   digD()
--   gfl = turtle.getFuelLevel()
--   print(""ypoBeHb TonJluBa"", gfl)
   if ch == 1 and fl == 1 and turtle.getFuelLevel() <= 5 then
    FuelES()
   elseif ch == 1 and turtle.getItemCount(12) >= 1 then
    ChestES()
   elseif ch == 2 and turtle.getItemCount(13) >= 1 then
    ChestSet()
   elseif ch == 3 and turtle.getFuelLevel() <= ff and fl == 1 then
     goZero(kg, kf) 
     Upp(h)         
     Chest()         
     Fuel()
     Down(h)        
     repit(kg, kf)  
   elseif ch == 3 and turtle.getItemCount(14) >= 1 then
     goZero(kg, kf) 
     Upp(h)         
     Chest()       
     Fuel()
     Down(h)        
     repit(kg, kf)  
   end
  end
 end
 goZero(kg, kf)
 if h < hmin then 
  Down(k)
 else 
  Upp(h)
  ChestES()
 end
 h = h + k
end

print(""BblnoJIHeHo"")"
ZtfrKiEi,IOI '04 P6 - Empodia,erek1e,C++,Sunday 25th of June 2023 12:02:10 PM CDT,"#include <iostream>
#include <vector>
#include <stack>
#include <climits>

using namespace std;

int main() {
    int n; cin >> n;
    vector<int> a(n);
    for (int &x : a) cin >> x;

    // For each index i, find smallest j s.t. j > i and a[j] < a[i]
    vector<int> nextSmaller(n, n);
    stack<int> st;
    for (int i = n-1; i >= 0; --i) {
        while (!st.empty() && a[st.top()] >= a[i]) st.pop();
        if (!st.empty()) nextSmaller[i] = st.top();
        st.push(i);
    }

    // Find smallest framed interval starting at each index
    vector<pair<int, int>> candidates; // framed intervals

    stack<int> maximums; // maximums since start
    // Let dif[i] = a[i] - i
    vector<vector<int>> maxByDif(2*n-1); // -(n-1) to n-1
    auto dif = [&](int i) { // adding n-1 to avoid negatives
        return a[i] - i + n-1;
    };

    for (int s = n-1; s >= 0; --s) { // fix start
        // remove old maximums
        while (!maximums.empty() && a[maximums.top()] <= a[s]) {
            maxByDif[dif(maximums.top())].pop_back();
            maximums.pop();
        }

        if (!maxByDif[dif(s)].empty()) {
            // first max since i with dif[j] = dif[i]
            int r = maxByDif[dif(s)].back();
            if (r < nextSmaller[s]) candidates.emplace_back(s, r);
        }
        
        // add new maximum
        maximums.push(s);
        maxByDif[dif(s)].push_back(s);
    }

    // Remove all framed intervals that contain others
    //  intervals are ordered by left in decreasing order, and have distinct lefts
    stack<pair<int, int>> empodia;
    int closestFinish = INT_MAX;
    for (auto [l, r] : candidates) {
        if (closestFinish > r) {
            empodia.emplace(l, r);
            closestFinish = r;
        }
    }
    
    // Print empodia
    cout << empodia.size() << endl;
    while (!empodia.empty()) {
        cout << 1+empodia.top().first << ' ' << 1+empodia.top().second << '\n';
        empodia.pop();
    }
    return 0;
}"
a06LT15V,Python #22,palintin,Python,Sunday 25th of June 2023 12:01:34 PM CDT,"'''
 Задача по Python #22

Описание

Напишите функцию decode_morse, которая декодирует азбуку морзе.

Помимо букв, цифр и знаков препинания, существуют специальные служебные коды, наиболее известным из которых является международный сигнал бедствия SOS, который кодируется как '...---...' Эти специальные коды рассматриваются как отдельные специальные символы и обычно передаются как отдельные слова.
'''
MORSE_CODE = {'.-': 'A', '-...': 'B', '-.-.': 'C', '-..': 'D', '.': 'E',
              '..-.': 'F', '--.': 'G', '....': 'H', '..': 'I', '.---': 'J',
              '-.-': 'K', '.-..': 'L', '--': 'M', '-.': 'N', '---': 'O',
              '.--.': 'P', '--.-': 'Q', '.-.': 'R', '...': 'S', '-': 'T',
              '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', '-.--': 'Y',
              '--..': 'Z', '-----': '0', '.----': '1', '..---': '2',
              '...--': '3', '....-': '4', '.....': '5', '-....': '6',
              '--...': '7', '---..': '8', '----.': '9', '.-.-.-': '.',
              '--..--': ',', '..--..': '?', '.----.': ""'"", '-.-.--': '!',
              '-..-.': '/', '-.--.': '(', '-.--.-': ')', '.-...': '&',
              '---...': ':', '-.-.-.': ';', '-...-': '=', '.-.-.': '+',
              '-....-': '-', '..--.-': '_', '.-..-.': '""', '...-..-': '$',
              '.--.-.': '@', '...---...': 'SOS'}
'''
def decode_morse(morse_code):
    return ' '.join(''.join(MORSE_CODE.get(char, '') for char in word.split()) for word in morse_code.split(' ' * 3))
'''


def decode_letter(char):
    return MORSE_CODE.get(char, '')


def decode_word(word):
    return ''.join(map(decode_letter, word.split()))


def decode_morse(morse_code):
    return ' '.join(map(decode_word, morse_code.split(' ' * 3)))


print(decode_morse('.... . -.--   .--- ..- -.. .'))  # HEY JUDE

"
q9wmSPVA,Lape array bug trigger,WarPie90,Delphi,Sunday 25th of June 2023 11:48:15 AM CDT,"program new;



type
  TPathStruct = packed record pts: TPointArray; d: Double; end;
  TQueueHelper = record
    lo, hi: Int32;
    data: array of TPathStruct;
  end;

procedure TQueueHelper.Init(sz: Int32);
begin
  SetLength(Self.data, sz);

  Self.hi := -1;
  Self.lo := 0;
end;

function TQueueHelper.SearchClosest(value: Double): Int32;
var
  l, h: Int32;
begin
  l := Self.Lo;
  h := Self.Hi;

  while l <= h do
  begin
    Result := (l + h) div 2;
    if Self.Data[Result].d < value then
      h := Result - 1
    else if Self.Data[Result].d > value then
      l := Result + 1
    else
      Exit(Result);
  end;
end;

function TQueueHelper.Insert(path:TPointArray; distance: Double): Int32;
var
  idx: Int32;
begin
  idx := Self.SearchClosest(distance);
  if Self.Data[idx].d > distance then Inc(idx);

  if (self.hi+1-idx) > 0 then
  begin
    WriteLn('>>> move from: ', idx,' to ', idx+1,', bytes: ', (self.hi+1-idx)*(SizeOf(TPathStruct)));
    Move(Self.data[idx], Self.data[idx+1], (self.hi+1-idx)*(SizeOf(TPathStruct)));
  end;

  Self.data[idx].d   := distance;
  Self.data[idx].pts := path;

  Inc(Self.hi);
end;


procedure TQueueHelper.Pop(out path:TPointArray; out distance: Double);
begin
  path     := self.data[self.hi].pts;
  distance := self.data[self.hi].d;
  Dec(Self.Hi);
end;

function TQueueHelper.AsString(): String;
var
  tmp: array of TPathStruct;
begin
  tmp := self.data;
  SetLength(tmp, self.hi+1);
  Result := ToString(tmp);
end;



var
  q: TQueueHelper;
  p: tPointArray;
  d: Double;
begin
  q.Init(1000);

  q.Insert([[2,2]], 2);
  WriteLn q.AsString;

  q.Insert([[2,1], [2,2]], 4);
  WriteLn q.AsString;

  q.Insert([[2,2], [1,2]], 8);
  WriteLn q.AsString;

  q.Insert([[2,2], [3,2]], 16);
  WriteLn q.AsString;

  q.Insert([[2,2], [2,3]], 32);
  WriteLn q.AsString;

  q.Insert([[2,2], [2,3], [4,4]], 64);
  WriteLn q.AsString;
end."
EAhLn3ry,Nigerian scammers [25-6-1/2023],bombaires,HTML,Sunday 25th of June 2023 11:47:23 AM CDT,"<a href=""mailto:rbs.bansk@gmail.com"">rbs.bansk@gmail.com</a>
<a href=""mailto:rbs.bansk+27648@gmail.com"">rbs.bansk+27648@gmail.com</a>
<a href=""mailto:rbs.bansk+31730@gmail.com"">rbs.bansk+31730@gmail.com</a>
<a href=""mailto:rbs.bansk+30952@gmail.com"">rbs.bansk+30952@gmail.com</a>
<a href=""mailto:rbs.bansk+28849@gmail.com"">rbs.bansk+28849@gmail.com</a>
<a href=""mailto:rbs.bansk+7033@gmail.com"">rbs.bansk+7033@gmail.com</a>
<a href=""mailto:rbs.bansk+19639@gmail.com"">rbs.bansk+19639@gmail.com</a>
<a href=""mailto:rbs.bansk+29287@gmail.com"">rbs.bansk+29287@gmail.com</a>
<a href=""mailto:rbs.bansk+32068@gmail.com"">rbs.bansk+32068@gmail.com</a>
<a href=""mailto:rbs.bansk+18324@gmail.com"">rbs.bansk+18324@gmail.com</a>
<a href=""mailto:rbs.bansk+27010@gmail.com"">rbs.bansk+27010@gmail.com</a>
<a href=""mailto:rbs.bansk+27431@gmail.com"">rbs.bansk+27431@gmail.com</a>
<a href=""mailto:rbs.bansk+3202@gmail.com"">rbs.bansk+3202@gmail.com</a>
<a href=""mailto:rbs.bansk+6972@gmail.com"">rbs.bansk+6972@gmail.com</a>
<a href=""mailto:rbs.bansk+3269@gmail.com"">rbs.bansk+3269@gmail.com</a>
<a href=""mailto:rbs.bansk+25945@gmail.com"">rbs.bansk+25945@gmail.com</a>
<a href=""mailto:rbs.bansk+10292@gmail.com"">rbs.bansk+10292@gmail.com</a>
<a href=""mailto:rbs.bansk+18611@gmail.com"">rbs.bansk+18611@gmail.com</a>
<a href=""mailto:rbs.bansk+16554@gmail.com"">rbs.bansk+16554@gmail.com</a>
<a href=""mailto:rbs.bansk+10774@gmail.com"">rbs.bansk+10774@gmail.com</a>
<a href=""mailto:rbs.bansk+19709@gmail.com"">rbs.bansk+19709@gmail.com</a>
<a href=""mailto:rbs.bansk+8224@gmail.com"">rbs.bansk+8224@gmail.com</a>
<a href=""mailto:rbs.bansk+29109@gmail.com"">rbs.bansk+29109@gmail.com</a>
<a href=""mailto:rbs.bansk+3421@gmail.com"">rbs.bansk+3421@gmail.com</a>
<a href=""mailto:rbs.bansk+8924@gmail.com"">rbs.bansk+8924@gmail.com</a>
<a href=""mailto:rbs.bansk+11794@gmail.com"">rbs.bansk+11794@gmail.com</a>
<a href=""mailto:rbs.bansk+4387@gmail.com"">rbs.bansk+4387@gmail.com</a>
<a href=""mailto:rbs.bansk+26536@gmail.com"">rbs.bansk+26536@gmail.com</a>
<a href=""mailto:rbs.bansk+28748@gmail.com"">rbs.bansk+28748@gmail.com</a>
<a href=""mailto:rbs.bansk+7120@gmail.com"">rbs.bansk+7120@gmail.com</a>
<a href=""mailto:rbs.bansk+11721@gmail.com"">rbs.bansk+11721@gmail.com</a>
<a href=""mailto:rbs.bansk+12470@gmail.com"">rbs.bansk+12470@gmail.com</a>
<a href=""mailto:rbs.bansk+4268@gmail.com"">rbs.bansk+4268@gmail.com</a>
<a href=""mailto:rbs.bansk+3813@gmail.com"">rbs.bansk+3813@gmail.com</a>
<a href=""mailto:rbs.bansk+9606@gmail.com"">rbs.bansk+9606@gmail.com</a>
<a href=""mailto:rbs.bansk+16022@gmail.com"">rbs.bansk+16022@gmail.com</a>
<a href=""mailto:rbs.bansk+19913@gmail.com"">rbs.bansk+19913@gmail.com</a>
<a href=""mailto:rbs.bansk+26108@gmail.com"">rbs.bansk+26108@gmail.com</a>
<a href=""mailto:rbs.bansk+15829@gmail.com"">rbs.bansk+15829@gmail.com</a>
<a href=""mailto:rbs.bansk+22343@gmail.com"">rbs.bansk+22343@gmail.com</a>
<a href=""mailto:rbs.bansk+3032@gmail.com"">rbs.bansk+3032@gmail.com</a>
<a href=""mailto:rbs.bansk+32190@gmail.com"">rbs.bansk+32190@gmail.com</a>
<a href=""mailto:rbs.bansk+9174@gmail.com"">rbs.bansk+9174@gmail.com</a>
<a href=""mailto:rbs.bansk+17312@gmail.com"">rbs.bansk+17312@gmail.com</a>
<a href=""mailto:rbs.bansk+4387@gmail.com"">rbs.bansk+4387@gmail.com</a>
<a href=""mailto:rbs.bansk+20327@gmail.com"">rbs.bansk+20327@gmail.com</a>
<a href=""mailto:rbs.bansk+26537@gmail.com"">rbs.bansk+26537@gmail.com</a>
<a href=""mailto:rbs.bansk+18605@gmail.com"">rbs.bansk+18605@gmail.com</a>
<a href=""mailto:rbs.bansk+7723@gmail.com"">rbs.bansk+7723@gmail.com</a>
<a href=""mailto:rbs.bansk+17822@gmail.com"">rbs.bansk+17822@gmail.com</a>
<a href=""mailto:rbs.bansk+1426@gmail.com"">rbs.bansk+1426@gmail.com</a>
<a href=""mailto:rbs.bansk+2923@gmail.com"">rbs.bansk+2923@gmail.com</a>
<a href=""mailto:rbs.bansk+3736@gmail.com"">rbs.bansk+3736@gmail.com</a>
<a href=""mailto:rbs.bansk+29978@gmail.com"">rbs.bansk+29978@gmail.com</a>
<a href=""mailto:rbs.bansk+12030@gmail.com"">rbs.bansk+12030@gmail.com</a>
<a href=""mailto:rbs.bansk+20576@gmail.com"">rbs.bansk+20576@gmail.com</a>
<a href=""mailto:rbs.bansk+19688@gmail.com"">rbs.bansk+19688@gmail.com</a>
<a href=""mailto:rbs.bansk+8589@gmail.com"">rbs.bansk+8589@gmail.com</a>
<a href=""mailto:rbs.bansk+11398@gmail.com"">rbs.bansk+11398@gmail.com</a>
<a href=""mailto:rbs.bansk+20407@gmail.com"">rbs.bansk+20407@gmail.com</a>
<a href=""mailto:rbs.bansk+29683@gmail.com"">rbs.bansk+29683@gmail.com</a>
<a href=""mailto:rbs.bansk+16954@gmail.com"">rbs.bansk+16954@gmail.com</a>
<a href=""mailto:rbs.bansk+22420@gmail.com"">rbs.bansk+22420@gmail.com</a>
<a href=""mailto:rbs.bansk+19321@gmail.com"">rbs.bansk+19321@gmail.com</a>
<a href=""mailto:rbs.bansk+10524@gmail.com"">rbs.bansk+10524@gmail.com</a>
<a href=""mailto:rbs.bansk+17254@gmail.com"">rbs.bansk+17254@gmail.com</a>
<a href=""mailto:rbs.bansk+31122@gmail.com"">rbs.bansk+31122@gmail.com</a>
<a href=""mailto:rbs.bansk+9600@gmail.com"">rbs.bansk+9600@gmail.com</a>
<a href=""mailto:rbs.bansk+13724@gmail.com"">rbs.bansk+13724@gmail.com</a>
<a href=""mailto:rbs.bansk+15004@gmail.com"">rbs.bansk+15004@gmail.com</a>
<a href=""mailto:rbs.bansk+11170@gmail.com"">rbs.bansk+11170@gmail.com</a>
<a href=""mailto:rbs.bansk+30063@gmail.com"">rbs.bansk+30063@gmail.com</a>
<a href=""mailto:rbs.bansk+7111@gmail.com"">rbs.bansk+7111@gmail.com</a>
<a href=""mailto:rbs.bansk+3156@gmail.com"">rbs.bansk+3156@gmail.com</a>
<a href=""mailto:rbs.bansk+3027@gmail.com"">rbs.bansk+3027@gmail.com</a>
<a href=""mailto:rbs.bansk+9291@gmail.com"">rbs.bansk+9291@gmail.com</a>
<a href=""mailto:rbs.bansk+11016@gmail.com"">rbs.bansk+11016@gmail.com</a>
<a href=""mailto:rbs.bansk+4321@gmail.com"">rbs.bansk+4321@gmail.com</a>
<a href=""mailto:rbs.bansk+25404@gmail.com"">rbs.bansk+25404@gmail.com</a>
<a href=""mailto:rbs.bansk+29219@gmail.com"">rbs.bansk+29219@gmail.com</a>
<a href=""mailto:rbs.bansk+1804@gmail.com"">rbs.bansk+1804@gmail.com</a>
<a href=""mailto:rbs.bansk+14444@gmail.com"">rbs.bansk+14444@gmail.com</a>
<a href=""mailto:rbs.bansk+15181@gmail.com"">rbs.bansk+15181@gmail.com</a>
<a href=""mailto:rbs.bansk+29263@gmail.com"">rbs.bansk+29263@gmail.com</a>
<a href=""mailto:rbs.bansk+16254@gmail.com"">rbs.bansk+16254@gmail.com</a>
<a href=""mailto:rbs.bansk+12245@gmail.com"">rbs.bansk+12245@gmail.com</a>
<a href=""mailto:rbs.bansk+31238@gmail.com"">rbs.bansk+31238@gmail.com</a>
<a href=""mailto:rbs.bansk+25482@gmail.com"">rbs.bansk+25482@gmail.com</a>
<a href=""mailto:rbs.bansk+3890@gmail.com"">rbs.bansk+3890@gmail.com</a>
<a href=""mailto:rbs.bansk+32053@gmail.com"">rbs.bansk+32053@gmail.com</a>
<a href=""mailto:rbs.bansk+26760@gmail.com"">rbs.bansk+26760@gmail.com</a>
<a href=""mailto:rbs.bansk+23676@gmail.com"">rbs.bansk+23676@gmail.com</a>
<a href=""mailto:rbs.bansk+24614@gmail.com"">rbs.bansk+24614@gmail.com</a>
<a href=""mailto:rbs.bansk+2192@gmail.com"">rbs.bansk+2192@gmail.com</a>
<a href=""mailto:rbs.bansk+16906@gmail.com"">rbs.bansk+16906@gmail.com</a>
<a href=""mailto:rbs.bansk+5984@gmail.com"">rbs.bansk+5984@gmail.com</a>
<a href=""mailto:rbs.bansk+7994@gmail.com"">rbs.bansk+7994@gmail.com</a>
<a href=""mailto:rbs.bansk+4043@gmail.com"">rbs.bansk+4043@gmail.com</a>
<a href=""mailto:rbs.bansk+31549@gmail.com"">rbs.bansk+31549@gmail.com</a>
<a href=""mailto:rbs.bansk+25963@gmail.com"">rbs.bansk+25963@gmail.com</a>
<a href=""mailto:rbs.bansk+9191@gmail.com"">rbs.bansk+9191@gmail.com</a>
<a href=""mailto:foreigncreditcommission@cpn.it"">foreigncreditcommission@cpn.it</a>"
EvvZQf7V,SPOJ - GSS3,erek1e,C++,Sunday 25th of June 2023 11:17:53 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
 
using namespace std;
 
const long long INF = 1e9;
struct Segment {
    long long sum, maxPre, maxSuf, maxSum;
    Segment operator + (const Segment &s2) const {
        Segment s;
        s.sum = sum + s2.sum;
        s.maxPre = max(maxPre, sum + s2.maxPre);
        s.maxSuf = max(s2.maxSuf, s2.sum + maxSuf);
        s.maxSum = max({maxSum, s2.maxSum, maxSuf + s2.maxPre});
        return s;
    }
    Segment () {
        sum = 0;
        maxSum = maxPre = maxSuf = -INF;
    }
    Segment (int x) {
        maxSum = maxPre = maxSuf = sum = x;
    }
};
 
const int MX = 50000;
int a[1+MX];
Segment tree[1+4*MX];
int n, m;
void update(int i) {
    tree[m+i] = Segment(a[i]);
    for (i += m; i > 1; i >>= 1) {
        int x = i, y = i^1;
        if (x > y) swap(x, y);
        tree[i>>1] = tree[x] + tree[y];
    }
}
Segment query(int ql, int qr, int cur = 1, int l = 0, int r = m) {
    if (qr <= l || r <= ql || cur >= m+n) return {};
    if (ql <= l && r <= qr) return tree[cur];
    return query(ql, qr, 2*cur, l, (l+r)/2) + query(ql, qr, 2*cur+1, (l+r)/2, r);
}
 
int main() {
    cin >> n;
    for (m = 1; m < n; m <<= 1);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        update(i);
    }
    int q; cin >> q;
    while (q--) {
        int t, x, y;
        cin >> t >> x >> y;
        if (t == 0) a[x-1] = y, update(x-1);
        else cout << query(x-1, y).maxSum << endl;
    }
    return 0;
} "
ed7T1uHn,P10_simple,A-KouZ1,C++,Sunday 25th of June 2023 11:16:10 AM CDT,"// Written By Kouzerumatsukite; 25 JUNE 2023
#include <Arduino.h>
#include <SPI.h>

// Assign these ESP32 pins to P10 Board
#define DR  23 // -> DR   // Data-Receive
#define OE  21 // -> OE   // Output-Enable
#define CLK 18 // -> CLK  // Data-Clock
#define LAT  5 // -> LAT  // Data-Latch
#define RSA 32 // -> A    // Row Select A
#define RSB 33 // -> B    // Row Select B

// the way of how the data is arranged in the display is stupid
// but we're gonna follow it anyway, its arranged like this:
// row 0-3: 0 4 8 C // Each hex notation stores byte (8 pixels)
// row 4-7: 1 5 9 D // DR IN -> 0123456789ABCDEF -> DR OUT
// row 8-B: 2 6 A E // board -> MATRIX ROW DATA  -> next matrix
// row C-F: 3 7 B F // the four rows selected by RSA / RSB pins

uint8_t display_data[4][16];
int current_row=0;

void displayRow(){
  // turn off display
  digitalWrite(OE,LOW);
  // update row select
  int row = current_row++ & 3;
  digitalWrite(RSA,row>>0&1);
  digitalWrite(RSB,row>>1&1);
  // update row data
  SPI.writeBytes((uint8_t*)display_data[row], 16);
  digitalWrite(LAT,HIGH);
  digitalWrite(LAT,LOW);
  // turn on display
  digitalWrite(OE,HIGH);
  return;
}

const uint8_t bitmap_test_00[] = { 0xC0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x03,  };
const uint8_t bitmap_test_01[] = { 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0xA4, 0x00, 0xA3, 0x0C, 0x34, 0x00, 0xA5, 0x54, 0xA4, 0x00, 0xA5, 0x54, 0xA0, 0x00, 0x63, 0x4C, 0x94, 0x81, 0x00, 0x00, 0x01, 0x83, 0x00, 0x00, 0x03, 0xC7, 0x4A, 0x6E, 0x83, 0xFF, 0x6A, 0x88, 0x86, 0xF7, 0x5A, 0x8C, 0x85, 0x6B, 0x4A, 0x88, 0x05, 0x6B, 0x4A, 0x6E, 0x87, 0xFF, 0x00, 0x00, 0x0F, 0x77, 0x00, 0x00, 0x03, 0xCE, 0x00, 0x00, 0x00, 0xF8,  };
const uint8_t bitmap_test_02[] = { 0xFE, 0x00, 0x7F, 0xC0, 0x82, 0x00, 0x40, 0x40, 0x82, 0x00, 0x40, 0x40, 0x82, 0x00, 0x40, 0x40, 0x82, 0x00, 0x40, 0x40, 0x82, 0x00, 0x40, 0x40, 0x82, 0x00, 0x40, 0x40, 0xE2, 0x00, 0x70, 0x40, 0xE2, 0x00, 0x70, 0x40, 0xE2, 0x00, 0x70, 0x40, 0xE2, 0x00, 0x70, 0x40, 0xE2, 0x00, 0x70, 0x40, 0xE2, 0x22, 0x70, 0x40, 0xE2, 0x22, 0x70, 0x40, 0xE2, 0x2A, 0x70, 0x40, 0xFE, 0x3E, 0x7F, 0xC0,  };
const uint8_t bitmap_test_03[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00,  };
// function to load bitmap into display, in correct order
void loadBitmap(const uint8_t* bitmap_data){
  for(int y=0; y<4; y++){
    for(int x=0; x<16; x++){
      int i = (x/4)+4*(y+4*(3-(x%4)));
      display_data[y][x] = ~bitmap_data[i];
    }
  }
}

void setup() {
  // initialize pin states
  pinMode(DR ,OUTPUT);
  pinMode(OE ,OUTPUT);
  pinMode(CLK,OUTPUT);
  pinMode(LAT,OUTPUT);
  pinMode(RSA,OUTPUT);
  pinMode(RSB,OUTPUT);
  // initialize SPI
  SPI.begin(CLK, -1, DR, -1);
  SPI.beginTransaction(SPISettings(20000000, MSBFIRST, SPI_MODE0));
}

void displayDelay(int millisec){
  int finish_time = millis() + millisec;
  while (finish_time - millis() > 0){
    displayRow();
    delay(1);
  }
}

void loop() {
  // load bitmaps and display
  loadBitmap(bitmap_test_00);
  displayDelay(2500);
  loadBitmap(bitmap_test_01);
  displayDelay(2500);
  loadBitmap(bitmap_test_02);
  displayDelay(2500);
  loadBitmap(bitmap_test_03);
  displayDelay(2500);
}
"
hwK6kbB2,startup,MagmaLP,Lua,Sunday 25th of June 2023 10:59:30 AM CDT,"term.setCursorPos(1,1)
term.clear()
sle = 60
os.loadAPI(""ocs/apis/sensor"")
sen = sensor.wrap(""top"")
state = false

file = fs.open(""minute"" , ""r"")              --read user
minu = file.readLine()
file.close()
minu = tonumber(minu)

hour = minu * 60
day = hour * 24
week = day * 7
month = day * 30

print("" "")
print("" "")
print(""Your - Scrapbox - Calculator"")
print(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~"")
print("" "")
print(""Scrapboxes per minute:  ""..minu)
print("" "")
print(""Scrapboxes per hour:    ""..hour)
print("" "")
print(""Scrapboxes per day:     ""..day)
print("" "")
print(""Scrapboxes per week:    ""..week)
print("" "")
print(""Scrapboxes per month:   ""..month)

                    
                    
                    
while true do
	s = sen.getTargets()
	function getS()
		for v, k  in pairs(s) do
			if k.Name == ""ME Wireless Access Point"" then   
				target = v
			end
		end
		return target
	end

	f = getS()
	s1 = sen.getTargetDetails(target)

	for v, k in pairs(s1.Items) do
   		if k.Name == ""Scrap Box"" then
        	if state == false then
            	box1 = k.Size
				--print(""Wert1: ""..box1)
        	else
           		box2 = k.Size
				--print(""Wert2: ""..box2)
				minu = box2 - box1
				file = fs.open(""minute"", ""w"")
				file.write(minu)
				file.close()
    			--print("" "")
				shell.run(""1"")
        	end
		end
	end

 	if state == true then
 		state = false
 	elseif state == false then
 		state = true
 	end
	sleep(sle)

end"
LhShWqA2,POI Task Salad Bar,erek1e,C++,Sunday 25th of June 2023 10:49:43 AM CDT,"#include <iostream>
#include <vector>
#include <set>
#include <string>
#include <algorithm>
#include <cassert>

using namespace std;

struct Segment {
    int l, r;
    pair<int, int> mx; // largest on segment: (value, index)
    Segment() {}
    Segment(int i, int v): l(i), r(i), mx(v, i) {}
    bool operator < (const Segment &s2) const {
        return pair<int, int>{l, r} < pair<int, int>{s2.l, s2.r};
    }
    Segment operator + (const Segment &s2) const { // merge two adjacent segments
        assert(r+1 == s2.l);
        Segment s;
        s.l = l, s.r = s2.r;
        s.mx = max(mx, s2.mx);
        return s;
    }
};

int main() {
    int n; string s;
    cin >> n >> s;
    bool allJ = true;
    for (char c : s) {
        if (c == 'p') allJ = false;
    }
    if (allJ) {
        cout << ""0\n"";
        return 0;
    }

    int ans = 1;
    vector<int> p(1+n);
    for (int i = 1; i <= n; ++i) p[i] = p[i-1] + (s[i-1] == 'p' ? +1 : -1);

    set<Segment> st; // segments of added values
    vector<pair<int, int>> bySize;
    for (int i = 0; i <= n; ++i) bySize.emplace_back(p[i], i);
    sort(bySize.begin(), bySize.end());
    while (!bySize.empty()) {
        auto [v, i] = bySize.back();
        bySize.pop_back();

        // add into set of segments
        Segment seg(i, v);
        auto it = st.lower_bound(seg);
        if (it != st.end() && it->l == i+1) { // merge with next segment
            /*
            consider index i as the element before the start of the substring, with some index k being the end (i, k]
            all indices j between i and the end k of the substring must have p[i] <= p[j] <= p[k]
            maxK = it->r, since next j does not satisfy p[i] <= p[j]
            the other constraint is p[j] <= p[k], so p[k] must be the maximum encountered so far after p[i]
            the last of these will simply be the (rightmost) largest value in the range [i, maxK]
            */
            ans = max(ans, it->mx.second-i);
            
            // now merge
            seg = seg + *it;
            it = st.erase(it);
        }
        if (it != st.begin()) {
            --it;
            if (it->r == i-1) { // merge with previous segment
                seg = *it + seg;
                st.erase(it);
            }
        }
        st.insert(seg).first;
    }
    cout << ans << endl;
    return 0;
}
"
aGL8ejQT,Phone number information // Python,IArepetsky,Python,Sunday 25th of June 2023 10:43:34 AM CDT,"import colorama
import phonenumbers
from phonenumbers import geocoder, carrier, timezone
from colorama import init
init()
from colorama import Fore, Back, Style

#Phone number information 2

print(Fore.BLUE + ""Phone number information || Creator - IArepetsky"")

ph = phonenumbers.parse(input(Fore.GREEN + ""Enter phone number: ""))

print(phonenumbers.is_possible_number(ph))

print(geocoder.description_for_number(ph, 'en'))
print(geocoder.country_name_for_number(ph, 'en'))

print(carrier.name_for_number(ph, lang='en'))


timeZone = timezone.time_zones_for_number(ph)
print(' ' .join(timeZone))"
n8tSE5Nb,MobSoftenerInstaller,Inksaver,Lua,Sunday 25th of June 2023 10:18:03 AM CDT,"version = 20230430.1439
--[[
	https://pastebin.com/n8tSE5Nb
	Last edited: see version YYYYMMDD.HHMM
	use 'pastebin run n8tSE5Nb' in computer terminal
	This will load startup.lua and setup.lua
	for use in Computercraft / ccTweaked computers when
	used under a dungeon mob spawner for skeletons or zombies
	1 computer + 2 sticky pistons OR 
	2 computers, 4 regular pistons and 6 network cable
	The 2 computers work together to move blocks (slabs)
	from side to side and dispense lava
]]
function clear()
	term.clear()
	term.setCursorPos(1, 1)
end

function checkLabel()
	if os.getComputerLabel() == nil then
		local noname = true
		while noname do
			clear()
			print(""Type a name for this computer (no spaces):_"")
			name = read()
			if name == '' then
				print(""Just pressing Enter does no work"")
			elseif string.find(name, ' ') ~= nil then
				print(""NO SPACES!"")
			else
				noname = false
			end
			if noname then
				sleep(2)
			end
		end
		
		os.setComputerLabel(name)
		print(""Computer label set to ""..os.getComputerLabel())
	end
end

function checkLibs(libDir, filename)
	local fileExists = false
	if libDir == '' then
		if fs.exists(filename) or fs.exists(filename.."".lua"") then
			fileExists = true
		end
	else
		if fs.exists(libDir) then
			if not fs.isDir(libDir) then
				fs.move(libDir, libDir..""Renamed"")
				fs.makeDir(libDir)
			end
		else
			fs.makeDir(libDir)
		end
		if fs.exists(fs.combine(libDir, filename)) or fs.exists(fs.combine(libDir, filename.."".lua"")) then
			fileExists = true
		end
	end
	return fileExists
end

function checkFileExists(filename, isLib)
	-- check in root or lib/ only (existing files)
	local fileExists = false
	if isLib then
		if fs.exists(fs.combine(""lib"", filename)) or fs.exists(fs.combine(""lib"", filename.."".lua"")) then
			fileExists = true
		end
	else
		if fs.exists(filename) or fs.exists(filename.."".lua"") then
			fileExists = true
		end
	end
	return fileExists
end

function createTempDir(tempDir)
	if fs.exists(tempDir) then
		if not fs.exists(fs.combine(tempDir, ""lib"")) then
			fs.makeDir(fs.combine(tempDir, ""lib""))
		end
	else
		fs.makeDir(tempDir)
		fs.makeDir(fs.combine(tempDir, ""lib""))
	end
end

function createLibDir(libDir)
	if fs.exists(libDir) then
		if not fs.isDir(libDir) then --file called lib (unlikely...)
			fs.move(libDir, libDir..""Renamed"") --lib -> libRenamed
			fs.makeDir(libDir)
		end
	else
		fs.makeDir(libDir)
	end
end

function getFile(files, isLib, fileName, saveAs, tmpDir, tmpLibDir)
	-- use pastebin get to download file (to libs folder if isLib)
	if saveAs == """" then
		saveAs = fileName -- use given filename if alternative not supplied
	end
	local saveDir = tmpDir
	if isLib then
		saveDir = tmpLibDir
	end
	success = true
	print(""Downloading from Pastebin..."")
	if shell.run(""pastebin"", ""get"", files[fileName], fs.combine(saveDir, saveAs.."".lua"")) then
		print(saveAs.."".lua copied to ""..saveDir)
	else
		print(""failed to copy ""..saveAs.."".lua from Pastebin"")
		success = false
	end
	
	return success
end

function moveFile(isLib, tmpDir, tmpLibDir, fileName) -- movgee tmp copy to /lib/
	local saveDir = tmpDir
	if isLib then
		saveDir = tmpLibDir
		fs.delete(fs.combine(""lib"", fileName))
		fs.move(fs.combine(saveDir, fileName), fs.combine(""lib"", fileName)) -- move to lib/
		print(fileName.."" updated"")
	else
		fs.delete(fileName)
		fs.move(fs.combine(saveDir, fileName), fs.combine(""./"", fileName)) --move to root
		print(""/lib/""..fileName.."" updated"")
	end
end

function getVersion(line)
	-- version = 20201223.1104
	line = string.gsub(line, "" "", """") -- remove spaces
	local start = string.find(line, ""="")
	local version = 0
	if start ~= nil then -- found
		local dateString = string.sub(line, start + 1)
		version = tonumber(dateString)
	end
	return version
end

function isNewer(isLib, tmpDir, tmpLibDir, fileName)
	-- open files to read file versions
	local old = """"
	local saveDir = tmpDir
	local checkDir = """"
	local move = false
	if isLib then
		if checkFileExists(fileName, true) then
			old = fs.open(fs.combine(""lib"", fileName), ""r"")
			saveDir = tmpLibDir
			checkDir = ""lib""
		else
			move = true
		end
	else
		if checkFileExists(fileName, false) then
			old = fs.open(fileName, ""r"")
		else
			move = true
		end
	end
	if not move then -- previous version of file exists
		if fs.exists(fs.combine(saveDir, fileName)) then
			local new = fs.open(fs.combine(saveDir, fileName), ""r"")
			local oldVer = getVersion(old.readLine())
			local newVer = getVersion(new.readLine())
			if oldVer ~= nil and newVer ~= nil then
				if newVer > oldVer then
					move = true
				end
			elseif oldVer == nil and newVer ~= nil then
				move = true
			end
			new.close()
			old.close()
		end
	end
	
	return move
end

function main()
	local doContinue = true
	local tmpDir = ""tmp""
	local tmpLibDir = fs.combine(tmpDir, ""lib"")
	local libDir = ""lib""
	checkLabel() -- make sure turtle label is set
	createTempDir(tmpDir) -- create /tmp/ and /tmp/lib/
	createLibDir(libDir) -- check/create lib dir
	local libFiles = {}
	libFiles['menu'] = ""BhjbYsw4""

	local files = {}
	files['setup'] = ""AbYQMD5H""
	files['startup'] = ""jytw4EBv""

	-- download into tmp folder
	for k,v in pairs(libFiles) do -- download from pastebin to tmp/lib/
		clear()
		--getFile(files, isLib, filename, saveAs, tmpDir, libDir) files is table of files with text index, isLib = library content, saveAs = filename
		getFile(libFiles, true, k, """", tmpDir, tmpLibDir) -- download file to /tmp/lib
		sleep(2)
	end
	for k,v in pairs(files) do -- download from pastebin to tmp/
		clear()
		getFile(files, false, k, """", tmpDir, tmpLibDir)
		sleep(2)
	end	
	-- check if tmp/lib/file exists in root
	local updated = 0
	for k,v in pairs(libFiles) do
		clear()
		local fileName = k.."".lua""
		print(""Checking: ""..fileName)
		if isNewer(true, tmpDir, tmpLibDir, fileName) then
			moveFile(true, tmpDir, tmpLibDir, fileName) -- move tmp copy to /lib/#
			updated = updated  + 1
		else
			print(fileName.."" is newer or unchanged"")
			fs.delete(fs.combine(tmpLibDir, fileName))
		end
		sleep(2)
	end
	for k,v in pairs(files) do
		clear()
		local fileName = k.."".lua""
		print(""Checking: ""..fileName)
		if isNewer(false, tmpDir, tmpLibDir, fileName) then
			moveFile(false, tmpDir, tmpLibDir, fileName) -- move tmp copy to /lib/
			updated = updated  + 1
		else
			print(fileName.."" is newer or unchanged"")
			fs.delete(fs.combine(tmpDir, fileName))
		end
	end	
	print(""Removing temporary files"")
	local status, retval = pcall(fs.delete, tmpLibDir)
	if not status then
		print(retval)
	end
	status, retval = pcall(fs.delete, tmpDir)
	if not status then
		print(retval)
	end
	print(""\nOperation Complete ""..updated.."" files updated"")
	
end

main()"
jytw4EBv,MobSoftenerStartup,Inksaver,Lua,Sunday 25th of June 2023 10:07:52 AM CDT,"version = 20230625.1400
--[[
MobSoftenerStartup: 
save as startup.lua to auto- start
Setup must be run first!
https://pastebin.com/AbYQMD5H
]]
local function activate(layout, computerType)
	rs.setAnalogueOutput(""top"", 15) 	-- close upper block
	print(""Upper gate closed"")
	rs.setAnalogueOutput(""bottom"", 15) 	-- close lower block
	print(""lower gate closed"")
	rs.setAnalogueOutput(layout, 15) 	-- dispense lava
	print(""Lava dispensed"")
	sleep(0.2)
	rs.setAnalogueOutput(layout, 0) 	-- reset dispenser ready for collecting lava
	if computerType == ""server"" then
		modem.transmit(1,1,""open"")
	end
end

local function reset()
	sleep(0.5)
	rs.setAnalogueOutput(""top"", 15) 	-- close upper block
	print(""Upper gate closed"")
	rs.setAnalogueOutput(""bottom"", 15) 	-- close lower block
	print(""lower gate closed"")
	sleep(0.5)
	rs.setAnalogueOutput(""top"", 0) 		-- close upper block
	rs.setAnalogueOutput(""bottom"", 0) 	-- close lower block
end


local function deactivate(layout, computerType)
	rs.setAnalogueOutput(layout, 15) 	-- collect lava
	print(""Lava recovered"")
	sleep(0.2)
	rs.setAnalogueOutput(layout, 0) 	-- reset dispenser ready for dispensingg lava
	rs.setAnalogueOutput(""top"", 0) 	-- close upper block
	print(""Upper gate opened"")
	rs.setAnalogueOutput(""bottom"", 0) 	-- close lower block
	if computerType == ""server"" then
		modem.transmit(1,1,""close"")
	end
	
	print(""Lower gate opened\n"")
	print(""Waiting for player to activate"")
end

local function standby(text)
	term.clear()
	term.setCursorPos(1,1)
	print(text)
end

local function client(layout)
	standby(""Initiated: Waiting for server"")
	local state = rs.getAnalogueInput(layout)
	while true do	
		local _, side, freq, rfreq, message = os.pullEvent('modem_message')
		if message == ""close"" then
			reset()
		else
			standby(""Waiting for server"")
		end
	end
end

local function main()
	if fs.exists(""config.txt"") then					-- if config file set
		local input = ""left""						-- default side to get redstone input
		local config = fs.open(""config.txt"", ""r"")	-- read config file
		local computerType = config.readLine()		-- ""single"", ""server"", ""client""
		local layout = config.readLine()			-- ""left"", ""right""
		if layout == ""left"" then
			input = ""right""
		end
		local pistonType = config.readLine()		-- ""sticky"", ""regular""
		config.close()								-- close config file
		
		if computerType == ""client"" then			-- only needs to activate pistons
			local modem = peripheral.wrap(""back"")			-- attach the modem
			modem.open(1)							-- open modem for listening
			client(layout)							-- call observation loop for network messages
		else
			if computerType == ""server"" then		-- server  / client with network and regular pistons
				modem = peripheral.wrap(""back"")		-- attach modem 
			end
			standby(""Waiting for player to activate"")
			local state = rs.getAnalogueInput(input)
			while true do
				local rsIn = rs.getAnalogueInput(input)
				if rsIn ~= state then
					state = rsIn
					if rsIn > 0 then
						activate(layout, computerType)
					else
						deactivate(layout, computerType)
					end
				end
				os.pullEvent(""redstone"")
			end
		end
	else
		print(""File config.txt not found. Use setup.lua and restart"")
	end
end

main()"
gNQxPyG0,User Management [Restrictions ADMIN Only],LockdateforGHS,GetText,Sunday 25th of June 2023 10:06:47 AM CDT,"# management v24.02.051

USER access = administrator(function(admin.access));
var admin = seeDoc(limitToAdmin);
  msgbox = ""Please enter user information."",
if user.information valid then
display.user.information();
  button = ""Edit""
  button = ""Delete""
  button = ""Share""
  
  button.edit = user.info.view(then), edit user.information FROM CHOICE;
  button.delete = user.info.deleteuser(then), user.delete;
  button.share = user.info.sharewith.person(then), user.share AS USER
   
   
 end
 
  
 "
AbYQMD5H,MobSoftenerSetup,Inksaver,Lua,Sunday 25th of June 2023 10:00:38 AM CDT,"version = 20230625.1400
--[[
https://pastebin.com/AbYQMD5H
MobSoftenerSetup
Designed for use with MobSoftenerStartup
and dungeon spawners
 ]]
kb = require ""lib.menu""

local messages =
{
[[              Setup page 1 of 2:

Mob lava softener using 2 sticky pistons

Note your layout (Left or Right)

Dispenser on RIGHT       or       LEFT of Computer 

| | |*| |*| |   P = Sticky Piston   | |*| |*| | |
| |P|S| |*| |   S = Slab            | |*| |S|P| |
| |C|D| |*| |   C = Computer        | |*| |D|C| |
| |P|S| |*| |   D = Dispenser       | |*| |S|P| |
| | | | |*| |   * = Stone           | |*| | | | |
| | | |H| | |   H = Hopper          | | |H| | | |
| | | |p| | |   p = Pressure Plate  | | |p| | | |


Press Enter to see next page...]],
[[              Setup page 2 of 2:

Mob lava softener using 4 normal pistons

Note your layout (Left or Right)

Dispenser on RIGHT       or       LEFT of Computer 

| | |*| |*| |   P = Regular Piston  | |*| |*| | |
| |P|S| |P| |   S = Slab            | |P| |S|P| |
| |C|D| |C| |   C = Computer        | |C| |D|C| |
| |P|S| |P| |   D = Dispenser       | |P| |S|P| |
| | | | |*| |   * = Stone           | |*| | | | |
| | | |H| | |   H = Hopper          | | |H| | | |
| | | |p| | |   p = Pressure Plate  | | |p| | | |


Press Enter to Continue]]
}

local function intro()
	kb.clear()
	kb.colourPrint(messages[1])
	read()
	kb.clear()
	kb.colourPrint(messages[2])
	read()
end

local function getPistonType()
	choice = kb.menu(""Piston Type?"", {""2 Sticky  pistons with 1 computer"", ""4 Regular pistons with 2 computers""})
	return choice
end

local function getLayout()
	choice = kb.menu(""Computer / Dispenser layout?"", {""Lava Dispenser on right side of computer"", ""Lava Dispenser on left side of computer""})
	return choice
end

local function getComputerType()
	--kb.clear()
	choice = kb.menu(""What computer am I...?"", {""pressure plate activated server"", ""passive client""})
	return choice
end

local function writeConfig(computerType, layout, pistonType)
	kb.clear()
	local h = fs.open(""config.txt"", ""w"")
	h.writeLine(computerType)	-- ""single, ""server"", ""client""
	print(""Computer     ""..computerType)
	h.writeLine(layout)
	print(""Layout       ""..layout)
	h.writeLine(pistonType)		-- 1 = sticky, 2 = normal
	print(""Piston       ""..pistonType)
	h.close()
	print(""Config.txt file written"")
end

local function main()
	local pistonTypes = {""sticky"", ""regular""}
	local computerTypes = {""single"", ""server"", ""client""}
	local layouts = {""right"", ""left""}
	local computerType = computerTypes[1] -- default for use with 2 sticky pistons ""single""
	
	intro()							-- display Left and Right layouts
	local pistonType = pistonTypes[getPistonType()] 	-- ""sticky"", ""regular""
	local layout = layouts[getLayout()]					-- ""left"", ""right""
	
	if pistonType == ""regular"" then 		-- normal piston x 4, 2 computer
		computerType = computerTypes[getComputerType() + 1]
	end 
	writeConfig(computerType, layout, pistonType) -- eg ""single"", ""left"", ""sticky""
end

main()

"
8DT8NXBF,Shift to Sprint (ROBLOX),LockdateforGHS,Lua,Sunday 25th of June 2023 09:53:41 AM CDT,"-- Place this script inside a LocalScript in StarterPlayerScripts

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild(""Humanoid"")
local userInputService = game:GetService(""UserInputService"")

local isSprinting = false
local walkSpeed = humanoid.WalkSpeed
local sprintSpeed = 2 * walkSpeed -- You can adjust the sprint speed multiplier here

local function onKeyPress(input)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        isSprinting = true
        humanoid.WalkSpeed = sprintSpeed
    end
end

local function onKeyRelease(input)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        isSprinting = false
        humanoid.WalkSpeed = walkSpeed
    end
end

userInputService.InputBegan:Connect(onKeyPress)
userInputService.InputEnded:Connect(onKeyRelease)
"
5AUNXJDb,Testing,Takusa232,JSON,Sunday 25th of June 2023 09:48:02 AM CDT,"⁶⁹⁶²⁷⁹⁷:⁸⁸⁵′⁸⁸⁸⁹⁸⁷⁷‽⁴⁶⁵⁴⁷⁴⁸¹⁴⁸⁸⁵⁷⁵⁷⁰⁷:⁸⁵⁸⁹⁸⁵⁴⁴⁴⁰⁸⁶⁸⁹⁴⁵⁸⁰⁷⁸⁶³⁷⁴⁴¹⁴⁷⁵⁶⁸²⁶·⁴³⁸⁰⁷⁵⁵‽⁷⁷⁸⁵⁵⁶³′⁶¹⁵,⁷‽⁶⁷⁸⁶⁷⁴⁵,⁸⁹⁶·⁷⁴⁷:⁸⁶⁴⁵⁴⁴⁷⁴⁶⁸⁶¹⁵′³′⁵⁷⁴⁰⁷³⁷⁶⁸⁶⁵⁸⁶⁶⁴⁷⁴⁰⁴³⁵⁴⁵'⁵⁸⁵⁸⁵,⁶⁷⁸⁴⁷⁶⁴⁰³,⁸·⁵⁴⁶⁴⁷,⁶⁴⁷⁴⁷⁶⁸³⁵‽⁶⁵⁷'⁴¹⁶·⁶⁶⁵⁹³′⁶²⁵⁵⁵⁸⁵‽⁵⁶⁵⁰⁴⁸⁶⁶⁵⁵⁴⁴⁵:⁵⁹⁴⁵⁶⁷⁸²⁶⁹⁵⁹⁵⁵⁷⁸⁴⁵⁶²⁴⁷⁶⁵⁴⁹³,⁸⁰⁷⁹⁴⁸⁵⁷⁶⁴³,⁵⁸⁵,⁷⁴⁷,⁷³⁸⁶⁵:⁷⁸⁶³⁸⁷⁸³⁵'⁷·⁷³⁵⁵⁴⁸⁷⁴⁷³⁵⁶⁸·⁸⁴⁴⁵⁷⁵⁵·⁷·⁷,⁸⁴⁶⁵⁸²⁷⁸⁸⁴⁷,⁷⁷⁵′⁴⁴⁷,⁴⁸⁴⁸⁶⁷⁵⁹⁶⁶⁴⁰⁵⁴⁸⁷⁵⁰⁸⁵⁷·⁶⁷⁸²⁴⁴⁴⁰⁶³⁵·⁷⁰⁷:⁴⁹⁵,⁶·⁶⁵⁶⁷⁵⁷⁷⁴⁵:⁷⁰⁷·⁶⁵⁶·⁷·⁴⁵⁴⁶⁵²⁵⁰⁷⁵⁵⁸⁴⁷⁵³⁷′⁶⁷⁵⁹⁸¹⁷:⁷:⁴⁸⁵,⁸⁰⁷²⁷⁷⁵²⁴¹⁷²⁵⁷⁸⁶⁴⁹⁵'⁶³⁴⁰⁷⁵⁴⁴⁵‽⁴²⁴¹⁷⁶⁶⁷⁴⁰⁴⁷⁷⁷⁷′⁵⁶⁶⁷⁵⁸⁷⁴⁶²⁷⁹⁷:⁶⁴⁸⁶⁴³⁴⁰⁶²⁵‽⁵⁵⁵⁷⁸⁹⁵⁵⁶·³,⁸⁸⁸⁰⁷⁶⁶¹⁷′⁷⁶³′⁴⁹⁷·⁶⁷⁵‽⁵′⁵:⁶·⁷³⁵⁷⁸⁰⁷⁴⁶⁵⁸⁶⁸⁶⁵³⁵⁶⁶⁰⁸⁰³,⁴⁹⁶·⁷·⁸²⁸·⁷⁸⁴²⁷²⁸⁹⁵'⁷'⁶⁷⁸⁸⁵′⁶³⁸⁵⁸⁸⁴⁶⁵⁸⁸⁹⁶⁰⁵:⁴⁰⁶⁴³,⁴⁰⁸²⁸²⁷‽⁴⁷⁷⁹⁴⁰⁷:⁵⁵⁷⁷⁶⁶⁷⁶⁴⁴⁵³⁸³⁴⁵³,⁷²⁷⁸⁴³⁸⁸⁴³⁸·³,⁴⁷⁷,⁶·⁷,⁷,⁸·⁴⁸⁸⁶⁸⁸⁵:³,⁶³⁶³⁴⁶⁴⁰⁸⁶⁸⁵⁶²⁵:⁵²⁸⁰⁵'⁴⁷⁵·⁷:⁷⁹⁶²⁸·⁶⁸⁶⁵⁷‽⁶⁸⁵⁶⁵⁸⁷²⁸⁰⁸⁵⁶⁰⁵:⁷⁵⁶·⁵⁸⁵·⁸⁸⁸²⁶⁰⁷⁷⁴³⁷²⁶³⁶⁹⁷⁷⁵³³′⁵⁴⁷‽⁶·⁷²³,⁶⁸³,⁶⁴⁴⁹⁵²⁸³⁵‽⁸¹⁵,³′⁵²⁵⁰⁸⁶⁶⁷⁵⁹⁵⁴⁶⁷⁵:⁷⁶⁸⁹⁶·⁷⁵⁵,⁴⁴⁵⁷⁴³⁸¹⁸³³,⁴⁴⁷·⁵⁴⁶⁵⁶·⁸⁷⁸¹⁸⁴⁴²⁶⁴⁴⁸⁶⁸⁴³⁶⁹⁴⁴⁸⁹³′⁷⁹⁶⁵⁷⁴⁴²⁷⁶³,⁵′⁸⁰⁴⁸³,⁸·⁴²⁵·⁸⁹⁵‽⁸²⁴²⁸¹⁷‽⁸⁸⁸⁰⁵,⁸⁷⁸⁷⁷:⁷⁷⁵⁸⁸²⁷⁶⁸¹⁴⁴⁸⁴⁷²⁷'⁸·⁴⁵⁵⁸³′⁸⁷⁵⁶⁵'⁷²⁷·⁵⁴⁸⁸⁸⁹⁴³⁷⁰⁶⁰⁷⁹⁷⁵⁴¹⁸⁶⁵′⁵⁸⁴²⁵⁰⁵:⁷⁵⁴⁴⁵⁷⁶⁷⁵⁶⁷⁸⁵⁵⁷,⁷⁶⁷⁵⁶⁶⁵⁶⁵′⁵⁹⁷⁰⁵⁰⁶⁰⁴³⁶²⁷'⁵·⁶¹⁴⁰⁷′⁵²⁵‽⁷⁷⁶⁰⁶⁵⁵⁰⁷²⁶¹⁷⁰⁷:³,⁵⁹⁶⁶⁸⁷⁸·⁷⁷⁶³⁴⁰⁶²⁸⁴⁶⁷⁷'⁵⁵⁶⁷⁴⁶⁸⁶⁷‽⁷³⁵,⁵′³,⁴⁶⁸¹⁵⁸⁸²⁵,⁴³⁵,⁷:⁶⁴⁴⁶⁸⁸⁶⁸⁶⁹⁸¹⁸⁷⁴¹⁵⁵⁵·⁷⁶⁵′⁵⁷⁶⁷⁷³⁷⁷⁵'⁷⁵⁷·⁶⁹⁵⁷⁴²⁴⁵⁸⁶⁷⁶⁷'⁵⁸⁴⁸⁷⁵⁶³⁷³⁷⁴⁵'⁸⁵⁷'⁴⁶⁴⁶⁵³³′⁴⁵⁷⁵⁵⁶⁷‽⁸⁹⁷′⁶¹⁶³⁴⁷⁷⁹³,⁶·⁸⁶⁸⁵⁵⁷⁸⁴⁷⁷⁴⁷⁷'⁴⁶⁷'⁸³⁷³⁵'⁷:⁶²⁸·⁶²⁵,⁷⁹⁶⁷⁷′³,⁵⁹⁴⁶⁶⁴⁸²⁷‽⁶⁸⁵⁸⁷⁸⁴²⁷⁵⁸⁹⁷⁷⁷‽⁵⁸⁸²⁶⁶⁶³⁵′³′⁶⁷⁸·⁵³⁶⁵⁵³⁷⁹⁷‽⁸⁶⁵,⁶⁴⁴⁵⁴²⁵⁹⁵⁴⁷·⁴⁰⁶⁷⁷:⁸⁵⁵‽⁷:⁷⁷⁸⁵³,³,⁵⁹⁷²⁸⁹⁵'⁵⁹⁵⁰⁴⁸⁸⁵⁷'⁸⁶⁴¹⁸³⁴⁰⁷,⁴¹⁷,⁴⁹⁵²⁸⁰⁷²³,⁶⁴⁶³⁴⁹⁷⁹⁵⁶⁷·⁵⁴⁸⁵⁷²⁸⁵⁵⁹⁷:³,⁷:⁴²⁴⁸⁴⁵⁵⁸⁷:⁵²⁷′⁴⁰⁸·⁸¹⁶⁹⁵·⁴²⁸⁰⁷:⁷⁷⁵‽⁸·⁵⁸⁶²⁶·⁸²⁶³⁷‽⁵′⁷,⁷‽⁶³⁵²⁷⁸⁷⁴⁸⁴⁴¹⁵‽⁸⁵⁵⁹⁵⁹⁶⁶⁸²⁸·⁷·⁵⁸⁶⁴⁶¹⁶⁴⁴¹⁸²⁷·⁴⁷⁵⁰⁴⁴⁶·⁷³⁶⁰⁵′⁸⁴³′³′⁵⁷⁴¹⁶²⁷²⁵′⁶⁰⁶⁰⁷⁸⁸²⁷‽⁴⁹⁵⁷⁶⁶³′⁴⁹⁵⁴⁴⁸⁶³⁴⁶⁴⁹⁷⁰⁵⁴⁵‽⁶⁰⁶⁶⁵'³′⁴⁸⁵⁵⁷'⁶⁹⁸³⁶⁸⁵′⁷:⁷²⁵²⁵′⁸⁵⁴⁷⁵⁷⁷⁸⁵⁸⁶⁵⁵‽⁶³⁵‽⁵⁹⁵:⁵⁰⁶⁴⁷³⁴⁴⁸⁶⁸⁹⁶⁸⁴²⁵⁰⁶³⁷³⁵‽⁵⁷⁶⁴⁷·⁷³³′⁶¹⁴⁸⁷‽⁴⁰⁴⁰⁵⁰⁵⁶⁵‽⁵⁹⁵:⁷⁷⁵⁹⁵³⁸·⁶⁵⁷⁶⁵,⁵'⁴⁶⁸⁶⁵³⁴⁷⁵⁵⁴⁸⁵⁷⁷⁹⁶·⁸·⁸⁸⁵,⁷'⁶⁴⁸⁰⁵′³,⁶⁰⁴⁷⁷⁵⁵'⁵,⁴²⁶¹³,⁶³⁶⁰⁸⁸⁸·⁴⁷⁷⁶⁵⁷³′⁵⁵⁸⁵⁷′⁵⁸⁷'⁴¹⁵⁸⁷⁰⁵'⁷⁴⁵'⁵⁷³′⁴¹⁴⁰⁵′⁸²⁶·⁷⁵⁴⁶⁵⁷⁸⁶⁵⁰⁷,⁸⁰⁸⁵⁵⁰⁸⁵⁵⁷³′⁵‽⁶¹⁸⁶⁷³⁵³⁸⁵⁸⁷⁴⁴⁵‽⁵⁰⁵,⁷²⁷⁰⁵²⁷'⁶³⁶²⁶⁸⁴⁸⁴⁸⁷'⁶⁶³,⁷⁸⁷·⁵⁷⁷⁰⁵·⁷⁸⁶⁰⁸³⁷³⁷⁶⁴¹⁵'⁵²⁵⁹⁵⁰⁶⁶⁷'⁶⁴⁷'⁸⁵⁶³⁶⁰⁵'⁴⁴⁸⁶⁸·⁶⁷⁷⁵⁵⁷⁶⁷⁶⁹⁷⁰⁴⁵⁶⁶⁷′⁶¹⁸⁸⁷·⁴⁹⁷′⁴¹⁶⁵⁷⁶⁶⁶⁷'⁸⁶⁵⁵⁵⁷⁴¹⁷⁷⁸⁸⁶⁷⁵⁷⁷⁶⁵³⁴¹⁷,⁶⁴⁸⁵⁷⁷⁵⁵⁸⁷⁴³⁵⁸⁴⁰⁶·⁶¹⁵⁹⁶¹⁷⁰⁴²⁵'⁶⁸⁵,⁸¹⁷⁷⁶·⁵'⁶⁸⁶⁹⁷:⁷⁶⁴⁰⁵⁰⁴⁵⁵⁶⁵²⁷⁶⁶·⁸⁴⁴⁹³,⁸⁵⁸⁶⁵⁹⁸²⁶⁹⁶⁸⁴⁴⁶⁹⁴³⁴⁹⁴⁸⁶·⁸⁴⁵⁹⁴⁹⁷²⁵³⁴¹⁵⁶⁶³⁴⁹⁸⁰⁴²⁵²⁷·⁶⁹⁵‽⁸⁹⁶⁷³′³′⁷′⁸⁸⁸⁸⁸·⁵⁰⁶²⁸·⁵,⁶⁶⁸⁰⁵,⁶²⁸⁹⁶⁷⁵:⁶⁸⁵²⁵⁶⁸²⁷,⁵⁰³′⁵⁵⁴⁸⁵‽⁴⁴⁵³⁵'⁸⁸⁴⁸⁷:⁴⁴⁵⁰³′⁵⁷⁵⁴⁶⁷⁷‽⁸¹⁷‽⁷⁵⁶²⁷⁷⁷:⁶⁵⁴⁹⁸⁴⁵⁰⁶⁴⁸⁷⁶⁸⁶⁷⁷‽⁴⁸⁸⁶⁷⁹⁵³⁷⁹⁴²⁸⁴⁴²⁶²⁴⁷⁸⁹³,⁶⁹⁵,⁷·³′⁴⁰⁴⁶⁷‽³,⁷⁴⁷·⁸⁶⁴⁴⁸⁹⁸¹⁶⁹⁸⁷⁵‽⁸³⁵'⁸·⁶⁸⁵‽⁶²⁵⁰⁸⁵⁸¹⁸²⁴⁵⁵‽⁵⁶⁴⁴⁶¹⁸⁰⁸⁰⁷′⁷⁵⁸²⁴⁰⁷,⁷⁹⁶⁹⁶³⁶²⁴³⁶⁴⁸¹⁸⁷⁵⁵⁴⁸⁵⁴⁴⁴⁸²⁴⁸⁷⁰⁷⁰⁵³⁵⁰⁷²⁵⁵⁸³⁷⁴⁶⁹⁷⁷⁴⁰⁶¹⁷⁵⁵²⁷⁶⁸³⁷:⁸·³′⁶¹⁸·⁵⁶⁸⁵⁶²⁸⁰⁷⁴⁵'⁸⁵³,⁸¹⁷⁹⁶⁴³,⁶³⁷:⁵·⁴⁰⁶⁶⁷⁸⁴¹⁷,⁴⁰⁷′⁷⁹⁵⁴⁷⁴⁶⁴⁵³⁷⁰⁸⁹⁸⁶⁶⁴⁵′⁷⁵⁴⁴⁶⁷⁶⁷⁵·⁵⁴⁸⁸⁶⁴⁷⁵³,⁷⁸⁵·⁴²⁵⁶⁷⁴⁴³³,⁶⁰⁵²⁵⁴⁶⁹⁵⁹⁵·⁶²⁵⁵⁶⁰⁴⁸⁶⁹⁵⁸⁵⁵⁷⁴⁵⁵⁴⁸⁷′⁵‽⁷,⁴⁶⁸⁴⁸·⁵,⁴³⁷⁷⁵:⁷'⁷⁵⁷⁵⁸³⁶·⁸⁷⁴⁷⁷⁴⁵:⁶⁴⁴⁹⁵⁹⁵⁹⁷'⁴⁷⁷⁷⁵′⁶⁶⁶·⁴⁰⁸⁰⁷³⁸⁹⁴⁰⁴¹⁸³⁴⁴⁷³⁶¹⁴⁶⁴⁴⁷²⁵⁵⁶⁴⁶·⁴⁵⁷²⁴⁹⁶⁸⁵⁰⁷⁷⁸⁵⁸⁴⁴⁷⁵⁰³,⁵⁸⁶⁹⁵‽⁸⁶⁷⁸⁵⁷⁴⁵⁸⁰⁷⁴⁵,⁷⁵⁵⁴⁸⁹³,⁷⁹⁷³⁵²⁴⁵⁵²⁷⁷⁷⁶⁸³⁷⁶⁵²⁶⁶⁵:⁵⁸⁸³⁸⁷⁵⁰⁴⁰⁵⁹³′⁶⁴⁷:⁴⁴⁷²⁷:⁵:⁴⁵⁸¹⁷⁹⁶³⁷⁴⁵²⁵⁸⁸⁷⁸·⁶⁴⁵′³′⁵²⁵⁷⁸³⁸⁹⁴²⁵³⁷′⁴⁷⁸⁰⁶⁶⁴⁹⁷'⁴⁴⁷′⁶¹⁷·⁷,⁵⁰⁶·⁸⁶⁵‽⁸⁹⁵⁸⁷⁶⁵²⁵:⁸⁹⁷⁴⁷³⁸²⁷⁵⁵⁶⁵⁵⁷⁵⁵⁷⁸⁷⁴¹⁷·⁷‽⁷⁴⁶⁶⁸⁵⁷⁶⁷‽⁸⁶⁴³⁵²⁴⁵⁷⁷⁸⁸⁷⁵⁵·⁵⁵⁷⁵⁸·⁵⁴⁸⁷⁷'⁵:⁵:⁷⁸⁴⁶⁸³⁶⁹⁷:⁷⁷⁵,⁸⁸⁷′⁷⁷⁵³⁷³⁷:⁸⁰⁴⁸⁶⁴⁶⁰⁸⁵⁶·⁶⁰⁸⁷⁶³⁵⁵⁵⁹⁶³⁴⁸⁶¹⁶¹⁵:⁸⁴⁵⁶⁷⁴⁵⁵⁷′⁷³⁵⁴⁸³⁵‽⁶¹⁴⁴⁶¹⁵′⁵³⁸⁹⁷⁴⁷³⁸¹⁵'⁷‽⁸⁴⁸⁴⁸⁴⁶⁶⁷'⁷,⁵⁶⁸⁰⁷⁶⁷⁹⁷'⁷·⁵⁷⁸³⁵⁶⁸¹⁶⁹⁸³⁶·⁷⁰⁷⁵⁸¹⁷‽³,⁸⁶⁴⁹⁶⁵⁸⁰³,⁵⁹⁸⁹⁶·⁸²⁷'⁴⁵⁸⁴⁵‽⁵²⁸⁶⁴³⁴⁰⁵′⁷⁶⁷⁵⁷:⁴⁵⁷·⁸⁸⁵⁴⁷³⁸⁷⁶⁵⁷⁴⁶⁸⁴⁷⁷⁰⁵⁶⁷⁹⁷⁸⁴⁰⁵⁰⁴⁴³′⁸⁶⁵‽³′⁴⁹⁷⁰⁶⁵⁷⁰⁶⁷⁶⁶⁴⁸⁸⁵⁵⁷⁶⁷⁶⁹⁵⁹⁴⁹⁵′⁷‽⁷‽⁷′⁴⁸⁶⁹⁸¹⁵⁰⁴²⁷⁹⁷²⁴¹⁶⁴⁵⁶⁵'⁶³⁶·⁸³⁷⁹⁶²⁴⁰⁴³⁸²⁴⁰⁷·⁴⁰⁸⁰⁴⁴⁶⁸⁸⁴⁸⁵⁷⁹⁷⁶⁴⁴⁸²⁴⁹⁴⁴⁸·⁸²⁵‽⁴⁴⁵⁶⁶⁵⁴⁴⁴³⁷⁷⁷⁵⁴⁷⁸⁸⁴⁹⁵‽⁷⁷⁷³⁷'⁶⁰⁸⁴⁶·⁶⁹⁴⁴⁷²⁶¹⁷⁹⁶·³,⁴⁸⁵⁹⁷'³′⁷³⁶⁰⁶⁹⁶⁸⁸⁰⁶⁹⁵⁴⁷⁶⁵⁹⁶⁴⁸·⁷,⁶⁰⁷⁵⁶³⁴⁴⁷:⁵⁰⁴⁴⁷·⁷:⁴⁷⁶·⁷⁰⁵³⁸⁸⁶²⁴¹⁴⁵⁶¹⁸²⁷⁶³′⁵⁰⁴⁹⁸⁸⁸⁵⁵²⁷‽⁸⁹⁵,⁴³⁵·⁶³⁴⁵⁵⁷⁶²⁷⁵⁴⁵⁸⁰⁶⁰⁷⁸⁷‽⁶¹³′⁵⁶⁴⁴⁴⁵⁵²⁸⁶⁵·⁸·⁵⁹⁵³⁵⁰⁵:⁶⁶⁵:⁷⁵⁴²⁷⁰⁵⁵⁶³⁴⁷⁴⁶⁶⁴⁴⁸⁶³⁴³⁶⁷⁵:⁵:⁸⁰⁷⁸⁸⁶⁵²⁴¹⁷⁴⁴³⁶⁴⁴⁵⁵⁸⁴³⁵′⁷:⁵⁶⁸⁸⁵²⁷³⁶⁷⁶⁶⁶⁶⁸¹⁵⁷⁶⁶⁸⁰⁸⁸⁷⁹⁸·⁷⁷⁷‽⁷³⁷,⁷⁵⁵³⁷⁵⁶⁴⁷·⁷·⁸³⁸²⁶⁹⁵,⁷‽⁸⁸⁴⁵⁶⁶⁷'⁷⁹⁷‽⁵·⁷⁴⁶⁴⁵′⁴⁷⁶⁷⁴⁸⁴⁰⁵³⁸⁹⁵⁰⁷³⁸¹⁵:⁴⁷⁸⁹⁷,⁶⁵⁵′⁴⁵⁸²⁵²⁴⁷⁵,⁴⁹⁶⁷⁷⁷⁶²⁶⁶⁶⁴⁷⁸⁸⁷⁷²⁷⁶⁶³⁶⁸⁸⁴⁶⁵⁶⁹⁷⁸⁸⁵⁸·⁵'⁴⁶³′⁷‽⁵⁵⁶⁵⁴⁷⁷⁸⁵²⁸³⁶⁰⁸⁵⁵⁹⁶⁵⁴⁵⁶⁶⁷⁷⁵⁹⁷⁶⁴¹⁴⁵⁵⁸⁶¹⁷⁰⁴⁰⁶⁰⁷⁹⁴²⁸⁴⁸⁴⁸⁷⁶⁹⁵'⁵⁷⁵³⁵⁹⁷⁹⁸⁶⁷⁶⁷⁷⁵'⁴²³′⁵⁰⁷′⁶³⁴⁹⁴⁰⁶·⁵⁹⁶⁰⁷⁴⁵′⁵‽⁷‽⁸⁰⁵:⁸⁹⁶⁹⁸⁵⁷²⁵⁴⁷³⁵⁰³,⁶²⁴⁷⁶⁹⁷′⁷⁴⁷⁵⁷⁰⁷²⁸⁷⁷²⁸⁴⁶³⁴⁷⁶³⁶¹⁵,⁶³⁵⁶⁵⁴⁶·⁶²⁶³⁷'⁴²⁷⁰³,⁵⁰⁸⁰⁵'⁵²⁸⁶⁸¹⁶²⁸⁰⁷'³,⁴⁸⁵⁸³′⁵,⁶⁶⁵⁹⁶⁸⁷⁰⁴⁶⁸⁴⁷,⁷⁰⁵·⁴¹⁵⁹⁸⁵⁵′⁶⁵⁶⁶⁵⁸⁶⁹⁵⁶⁷·⁶¹⁵⁶⁵³⁶⁴⁸⁶⁷⁶³,⁵⁰⁴⁷⁵,⁷⁵⁷⁹⁴¹⁵'⁴⁴⁵⁶³′⁸⁷⁴⁴⁷:⁴²⁷‽⁵'⁷⁷⁷⁶⁷³³,⁷⁵⁷⁷⁷⁰⁵²⁶⁸⁴⁹⁸·⁴⁹⁷⁸⁷·⁶⁸⁶⁸⁴³⁵⁴⁶²⁴¹⁶⁰⁴⁵⁵⁷⁵⁹⁷⁵⁵⁸⁵′⁷⁹⁵,⁶¹⁷³⁴⁷⁶³⁷·⁴⁵⁴⁹⁸¹⁶⁶⁸⁹⁸⁶⁵⁶⁸⁵⁶⁶³,⁷′⁶¹⁵²⁷′⁸⁰⁷³⁷⁰⁴⁷⁵⁹⁴⁰⁶⁹⁶⁵⁶³⁷‽⁶¹⁷³⁵′⁷⁷⁵·⁷‽⁶·⁸·⁷:⁷²⁴²⁸⁸⁵⁸⁴⁶⁶²⁵⁴⁶⁰³′⁶²⁴³⁶⁹⁸⁵⁷,⁷‽⁴⁷⁸⁷⁸³⁷³⁴⁹⁷'⁷⁶⁶⁷⁷⁷⁵′⁸²³,⁸⁹⁸³⁵⁸⁶⁵⁸⁷⁷²⁷,⁵·⁸⁹⁵⁰³,⁵⁰⁴⁴⁴⁷⁷⁷⁵³⁷⁵⁸⁶⁴⁷⁷⁴⁴⁶⁵⁴⁸⁷⁸¹⁶⁵⁶⁷⁵⁰⁷·⁴⁵⁴⁹⁷²⁵⁷⁵′⁸²⁷,⁴⁶⁶·⁴⁶⁵⁷⁵,⁸⁶⁷⁸⁸³⁶⁸⁸⁶⁸⁵⁵⁰⁷'⁷⁴⁶³³,⁶·³,⁵⁶⁸⁸³′⁸⁰⁶²⁷⁵⁴³⁷⁵⁸⁸⁵:⁷·⁷:⁶²⁶⁶⁶⁵⁶⁷⁷,³′⁷'⁷⁷⁸²⁵³⁷‽⁴¹⁵⁸⁵³⁸³⁵′⁶⁸⁵⁹⁷²⁷⁰⁷⁴⁶⁷⁵'⁷³⁸⁸⁸⁰⁴⁶⁶⁷⁴⁶⁵⁷⁶⁴⁴⁷⁵²⁸⁹⁸²⁶⁶⁸¹⁶⁴⁴¹⁷⁹⁵′⁷·⁵⁰³,⁵‽³,⁸⁴⁷:⁶³⁸⁰⁴⁷⁵,⁵⁰⁸²⁴²⁵⁴⁸⁹⁵,⁷⁵⁷⁶⁴³⁶⁴⁶⁰⁵⁷⁵:⁸¹⁵,⁵·⁵⁸⁵,³,⁷⁰⁷'⁶⁵⁴⁴⁶²⁸⁵⁸⁸⁷⁶⁴⁵⁸⁵⁸⁴⁴⁴⁶⁷⁸⁷⁵‽⁴¹⁸¹⁸²⁸⁸⁵³⁸²⁵⁴⁶²⁵·³′⁸¹⁶·⁶⁰⁶⁰⁴⁴⁵⁷⁵·⁷⁹⁸⁶⁴¹⁴⁸⁸⁶⁵'³′⁶⁰⁴⁰⁶⁸⁸⁵⁵⁰⁵⁰⁴⁰⁷⁵⁶⁵⁵'⁵³⁷⁸⁸·⁶⁴⁵⁵⁶⁰⁴¹⁶¹⁷⁷⁴⁵⁸·⁵⁶⁷²⁴⁴⁸²⁴²⁴⁰⁸⁷⁸⁹⁷⁴⁴⁴⁵·⁷²⁶⁵⁸·⁷⁷⁸³⁶²⁶¹⁶⁷⁶⁰⁵‽⁸⁴⁵⁸⁷⁶⁸⁹⁵⁴⁷³⁵:⁴⁷⁷,⁵·⁵⁹⁷⁹⁴⁶⁵⁹⁵⁴⁵⁵⁶⁸⁸·⁶⁴⁵⁹⁶·⁸⁰⁸·⁴⁶⁷⁹⁶¹⁵⁵⁷‽⁷⁷⁵⁵⁸⁹⁶⁴⁸⁰⁶⁰⁵‽⁸⁴⁴⁸⁷:⁶·⁸¹⁴⁰⁵⁶⁶⁹⁵'⁵′³′⁴¹⁶⁹⁵⁰⁶⁶⁷²⁸·⁶⁴⁵³⁴⁸⁵′⁷⁷⁸⁸⁸⁰⁵′⁶⁵⁴¹⁵⁶⁴⁶⁴⁹⁸⁰⁶⁰⁴¹⁵⁹⁸²⁸⁰⁷⁵⁷⁵⁸⁶⁸⁵⁴³⁸·⁷⁷⁵⁶⁵⁴⁵⁴⁵⁶⁷′⁷‽⁸²⁸⁸⁴²³′⁶²⁷³⁸·⁵′⁷⁴⁵⁰⁵′⁸²⁷⁴⁴⁶⁷⁸³′⁷⁷⁴⁰⁵⁵⁸³⁵,⁴²⁴⁷⁷⁸⁶⁴⁸⁶⁶·⁸²³,⁵:⁵³⁷³⁵⁶⁴⁹⁶³³′⁶²⁵⁴⁸⁷⁴⁶⁶³⁵⁹⁵‽⁵⁸⁷·⁸⁹⁷⁶³,⁶⁸⁸⁰⁵⁹⁴⁴⁵′⁸¹⁷⁷⁵:⁸⁶⁴³⁷⁹⁸⁰⁶²⁴⁴⁷⁹⁶⁶⁷'⁷'⁵⁶⁴¹⁵‽⁴²⁵⁵⁵²⁵:³,⁴⁴⁵⁹⁶⁹⁶¹⁸³⁸·⁶²⁶⁰⁸²⁵⁸⁸⁹⁷³⁶⁶⁵²⁴²⁷²⁸⁸⁸⁰⁸·⁸⁰⁷⁶⁷⁵⁵:⁶⁶⁶⁶⁶⁸⁷⁸⁷:⁵²⁶¹⁷'⁶¹⁸⁸⁴⁸⁵⁴⁵·⁵:⁵‽⁵⁰⁴⁰⁵′⁷‽⁷:⁴⁹⁸¹⁸⁸⁷,⁶⁹⁸⁰³,⁵³⁶⁵⁵⁶³,⁸⁰⁷‽⁵:⁸⁹⁸⁰⁴⁹⁷·⁶⁶⁵′⁷⁶⁸¹⁶⁴⁷⁰⁶⁴⁷⁰⁴⁵⁷:⁵·⁵²⁷⁴³,⁴⁶⁷'⁴⁰⁷⁵⁴¹⁶⁹⁷⁹⁵²⁶·⁴⁸⁴⁹⁷⁷⁷⁵⁷³⁸⁰⁵·⁵⁹⁵³⁵⁹⁷⁴⁸⁵⁷⁷⁵⁶⁸²⁵³⁷‽⁷⁷⁷²⁷:⁶⁴⁶⁶⁵,⁶²⁴¹⁴⁵⁸·⁷'⁸⁵⁵⁴⁵⁹⁷⁴³,⁸⁷⁴¹⁵'⁶²⁴¹⁷‽⁵⁵⁵³⁷³⁴²⁴³³′⁵²⁶³⁶⁹⁴³⁶·⁶⁵⁶⁸⁴⁹⁴⁸⁵,³′⁷'⁵⁹⁴⁰⁸⁷⁵³⁸⁹⁷⁰⁵,⁵:⁵'⁷⁵⁸²⁸²⁵⁵⁵⁰⁷'⁷⁹⁶⁵⁷:⁵′⁷⁸⁵⁹⁶·⁷⁷⁵⁷³′⁴¹⁸⁵⁸⁰⁷⁴⁷⁷⁸⁹⁴⁰⁷⁹⁶⁴⁵‽⁸·⁵⁶⁴⁸⁴⁰⁸⁴⁵⁹⁵:⁶⁷⁵³⁸²⁶⁵⁵⁰⁵⁸⁷⁰⁴⁰⁸¹⁷‽⁴²⁴⁴⁶·⁴¹⁶·⁸⁶⁴²⁴⁸⁷⁹⁵³⁴³⁸·⁶³⁶⁵⁶⁶⁷⁸⁶·⁶⁷⁴³⁴²⁵:⁸¹⁵'⁶⁸⁷⁸⁴⁴⁵²⁶²⁵·⁷⁰⁵'⁸²⁵⁶⁶⁷⁶⁸⁷'³′⁶³⁵²⁷⁹⁵,⁸⁷⁷²⁴⁶⁵⁹⁶·⁷:⁴⁹⁶³⁸⁵⁸³⁷⁹⁸³⁶⁶⁴⁰⁴³⁵³⁵⁷⁸³⁷'⁵⁶⁵⁸⁷⁰⁵⁸⁴⁹⁷⁹⁶⁶⁴⁴⁷⁰⁵⁴⁴⁶⁷:⁴²⁶⁰⁴⁸⁵⁷⁷:⁸⁸⁷:³,⁷,⁵⁰⁷‽⁶²⁶⁵⁵³⁸⁰⁷⁹⁷:⁵⁰⁸⁰⁸³⁸⁹⁴¹⁵⁵⁵:⁸·⁶·⁶²⁸⁸⁷:⁴¹⁶·⁴³⁸·⁴⁶⁵,⁵⁴⁷⁶⁷‽⁵·⁶⁶⁵,⁵‽⁶⁷⁶⁸⁷⁸⁵:⁸⁸⁵⁵⁷′⁵⁴⁶¹⁵²⁶⁹⁵²⁶⁶⁶⁸⁸²³′⁴⁹⁷⁸⁵:⁶³⁴⁰⁷·⁷³⁸⁹⁵'³′⁷⁹⁵'⁵·⁵⁰⁸⁷⁷'⁴⁶⁷⁸⁵⁷⁶·⁴³⁵⁷⁴⁰⁴⁷⁴²⁶⁷⁶⁹⁸⁵⁵³⁶⁶⁵'⁵‽⁵⁰⁸⁴⁶⁰⁵⁵⁸⁰⁴⁴⁴⁰⁷⁸⁵²⁵²⁴⁵⁶⁷⁷,⁴⁷⁴⁹⁶⁵⁵²⁸³⁶⁶⁵³⁷²⁸⁰⁶⁸⁷‽⁵‽⁷′⁷⁷⁸⁰³,⁴⁵⁸⁷⁴⁴⁵'⁸·⁷⁶⁷·⁶⁵⁶⁸⁵⁷⁴⁵⁴⁷³,⁵‽⁷⁶⁸²⁶⁵⁸⁸⁸²⁸⁷⁴⁵⁸³⁶⁵⁴⁰⁵′⁷,⁸·⁴⁰⁵⁷³,⁷'⁶⁷⁸⁸⁶⁹⁸⁶⁸⁴⁷⁴⁸⁰⁶²⁷:⁷³³′⁴⁶⁶⁸⁵²⁷⁶⁶³⁵³⁸⁹⁸²⁵'⁷⁴⁵·⁷⁵⁶⁵⁴⁰⁶⁶⁵⁸⁷⁹⁵⁸⁵²⁶⁷⁵⁸⁶⁵⁴⁶⁵⁵⁸⁷⁴⁶⁸⁴⁸¹⁴⁸⁸⁸⁷⁹⁶⁴⁵⁷⁵·⁸⁸⁸⁷⁶⁶⁴⁰⁸·⁸⁸⁵:⁸²⁵'⁴⁸⁵⁹⁵⁰⁷:⁷⁴⁶⁷⁶⁰⁴³⁷'³,⁵³⁷′⁸⁶⁶⁵⁴³⁶³⁵⁹⁷⁰⁵′⁵³⁷,⁵⁷⁵,⁶⁶⁸³⁵⁷⁸⁷⁶⁴⁷′⁴¹⁷⁹⁴⁰⁸⁵⁴⁹⁷⁰⁴⁹³′⁶⁰⁵⁶³′⁸⁴⁷‽⁴¹⁵⁷⁷⁷⁵·⁴⁰⁷'⁵⁵⁷²⁵⁴⁴⁷⁵⁴⁷⁵⁵⁷⁶²⁸⁹⁴⁹⁵⁹⁸⁷⁴⁹⁶⁸⁶⁶⁴⁵⁷·⁵'³,⁴⁰⁵⁷⁶³⁵³⁸⁶⁶⁰⁵′⁶⁴⁷:⁵⁶⁷‽⁷²⁵⁵³,⁸⁷⁸⁵⁴⁵⁵⁰⁴⁶⁶²⁴⁸⁵⁹⁵:⁶⁵⁶·⁴⁰⁴⁶⁶⁵⁶·⁶⁸⁷⁷⁷⁰⁴⁰⁶⁷⁶⁰⁷:⁷⁰⁴⁵⁵⁴⁵·⁷⁷⁶³⁵:⁶⁹⁷⁹⁶⁴⁷:⁵·⁴⁷⁵:⁴⁸⁶⁷⁷'⁷:⁸⁸⁷⁷⁴⁶⁴⁸⁷²⁸⁵⁵'⁶³⁵‽⁵⁵⁵⁹⁶⁴⁷:⁶⁴⁴¹⁵⁹⁶⁴⁶⁸⁶⁸⁵'⁸⁵⁷·⁵:⁷·⁶¹⁷⁵⁴⁰⁶⁸⁷⁰⁷,³′⁶⁰⁵⁰⁶²⁶²⁵³⁸²⁸¹⁶⁵⁴⁶⁵·⁶·⁶·⁵,⁵⁵⁷⁴⁷′⁷⁴⁴⁷⁷⁵⁸⁰⁵:⁵:⁵⁶³,⁶⁴⁶⁸⁵⁰⁵³³′⁵³⁷'⁶⁶⁴⁰⁶⁰⁷⁹⁵⁵⁸·⁵²⁸¹⁷′⁵⁸⁸·⁶⁹⁵⁸⁷:⁵·⁷⁰⁸⁰⁵⁹⁷³⁵,⁶⁹⁷‽³′⁴⁷⁴⁸⁸⁴⁸⁶⁶⁰⁷⁰⁵⁸⁷⁹⁵⁶⁴⁶⁸⁶⁷·⁸⁴⁷:⁵·⁸⁷⁴⁴⁶²⁷⁰⁵⁸⁴⁵⁷⁶⁵⁷⁸⁷⁸²⁷′⁸⁵⁴⁴⁷²⁵⁶⁸⁶⁷‽⁸⁵⁶²⁷⁹⁶⁸⁶·⁵³⁷⁴⁸⁰⁵⁴⁶⁵⁷⁸⁴⁵⁸¹⁷·⁷‽⁸⁶⁵⁴⁷:⁵:⁴³⁵'⁷⁹⁵⁷⁴⁸⁷⁷⁶⁰⁶⁰⁴³⁷⁸⁵⁹³′⁸⁹⁷·⁸⁰⁶⁶⁶⁷⁵⁷⁸·⁸²⁷,⁸⁶⁷⁹⁶⁶⁵²⁷⁰⁷⁹⁶⁸⁸⁸⁷⁶⁵⁰⁶¹⁸²⁶²⁷·⁷:⁴³⁴³⁶⁶⁷⁸⁴⁰⁶⁵⁷·⁷⁷⁵⁸⁸²³,⁵³⁷‽⁶⁵⁸⁶⁵'³,⁶⁷³,⁶¹⁸⁴⁴³³,⁵⁸⁶²⁸⁶⁴⁶⁶⁰⁵:⁴⁷⁴⁰³′³,⁵′⁵⁸⁶⁰⁷²⁴²⁷⁷⁶·³′⁶⁴⁸¹⁸⁷⁵'⁷'⁶³⁵:⁷³⁶⁶⁵⁴⁴⁰⁸³⁸⁵⁷·⁵⁴⁶⁵⁸·⁵⁴⁸¹⁶⁴⁶⁸⁶³⁸²⁶³⁴³⁵'⁶⁴⁷⁹⁶²⁷'⁵⁸⁵⁵⁶·³,⁸⁶⁶⁶⁷′⁷⁸⁶⁰⁸⁵⁵,⁵′⁶⁷⁶⁵⁸·⁵‽⁸⁴⁵'⁷⁷⁴¹⁷'³,⁵'⁶⁶⁷⁰⁷⁰⁵'⁴⁵⁵·⁷⁷⁵'⁷⁷⁶⁵⁵⁹⁴⁶⁸²⁵⁴⁷³⁷⁷⁴⁹⁶⁴⁵⁷⁶⁷⁶²⁷⁹⁵⁶⁷⁶⁸·⁶²⁴⁵⁶⁸⁶⁵³,⁷:⁸³⁵‽⁷′⁸⁴⁶⁸⁷:⁴⁷⁵⁰⁷⁹⁵⁸⁷⁵⁷·⁶³³,⁷,⁶⁷⁴⁶⁷³⁷′⁵′⁵,⁵²⁶⁹³,⁶⁷⁵⁰⁵⁹⁴⁷⁸¹⁸⁶⁷'⁴⁷³′⁷⁴⁷⁸⁵‽⁸⁰⁷⁷⁴³⁶³⁴⁵⁷:⁷³⁶⁶⁶⁶⁵'⁵⁵⁵′⁸⁷⁵³⁵:⁷:⁷²⁸·⁵,⁴⁰⁷‽⁸·⁸⁵⁶³⁸⁵⁵⁷⁴⁵⁵⁷⁵⁹⁵⁰⁵′⁵:⁴⁸⁷,⁸⁹⁴⁶⁶⁵⁵⁰⁶¹⁸¹⁴⁹⁶·⁵⁸⁷,⁵'⁸⁹⁷:⁵⁸⁶⁵⁷²⁵:⁸²⁶⁴³′⁴⁹⁴⁶⁷,⁷⁰⁶⁷⁷⁷⁴⁹⁵⁵⁵³⁷:⁴⁹⁵′⁸⁷⁶³³′⁸⁸⁵·⁸²⁷³⁷⁹⁴⁷⁸⁵⁷·⁵′⁷⁰⁵⁵⁷′⁷⁶³,⁵⁷⁸¹⁶⁸⁵⁵⁴³⁸⁹⁵⁵⁵⁷⁶²⁵‽⁸⁸³′⁶⁷⁷⁰⁷⁶⁸⁰⁴²⁸³⁴⁷⁸²⁷·⁴¹⁶¹⁷⁵⁸⁶⁷,⁷⁴⁷²⁵⁹⁶⁹⁴³⁵⁶⁷·⁷⁴⁸³⁴⁷⁷⁹⁴⁸⁸⁹⁶⁷⁶⁷⁴¹⁴⁸⁸⁹³′⁴⁷⁵⁵⁶⁶⁵⁹⁷⁶⁷'⁶⁶⁵‽⁷³⁷⁹⁶⁵⁶·⁷⁶⁸⁴⁷·⁶⁸⁷:⁶⁵⁷·⁷⁶⁴⁸⁴⁹⁵⁹⁵⁷⁵⁸⁵‽⁴⁵⁸⁴⁶⁶⁵⁴⁶⁵⁶⁸⁴²⁵⁰⁸·⁷'⁵²⁴³⁵⁰⁴⁶⁴³⁷,⁸·⁴⁸⁴⁴⁴⁸³,⁸⁹⁷⁴⁵⁸⁵⁵³,⁵⁷⁵⁹⁸¹⁵⁴⁵‽⁶⁶⁷⁶⁵⁹⁶·⁴⁴⁴⁸⁸⁶⁶⁷⁴³⁸⁰⁵⁸⁵²⁸⁶⁷⁰⁵:⁵⁹⁴⁶⁶·⁴²⁸¹⁶⁵⁶⁸⁷:⁷⁰⁸⁸⁵⁰⁶·⁶⁶⁷·⁵‽⁴⁰⁶⁵⁷‽⁴¹⁵'⁵⁰⁷⁸⁶⁴⁶⁵⁴⁵⁵,⁵'⁷′⁴³⁷⁰⁷⁴⁵⁹⁴³⁶⁵⁸·⁷³³,⁸¹⁴⁷⁶²⁸⁸⁵⁸⁶⁵⁴²⁴⁹⁶·⁶²⁵'⁸·⁶⁴⁷³⁵⁶⁷‽⁶⁰⁷:⁵′⁶¹⁵⁶⁵⁹⁶⁶⁵⁴⁵²⁶²⁵⁵⁴⁹⁵⁸⁶¹⁸·⁷,⁶·⁴⁴⁴²⁷:⁴⁸⁷⁸⁵⁶⁴⁶⁷⁸⁵⁹⁶⁸⁶⁷³,⁶⁹⁶³⁴⁷⁴²⁵⁸⁶⁸⁵⁷⁷⁴⁶⁵⁷⁷⁵·⁷⁹⁶⁶⁵:⁶⁷⁴⁴⁸·⁶⁴⁵⁶⁶⁷⁵‽⁶⁵⁷⁸⁸⁹⁸⁶⁶⁷⁶⁹⁸³⁸²⁸⁸⁷²⁴⁵⁸⁴⁶⁰⁸⁷⁷⁷⁵′⁷³⁸²⁸³⁷·⁸⁷⁷⁴⁸⁸⁸⁷⁵'⁴⁸⁴⁸⁴⁶⁸⁰⁶⁵⁸³⁷·⁶⁹⁷·⁶⁸⁶⁴⁶⁶⁷⁹⁷'⁷²³′⁷′⁶⁷⁷⁷³,⁶¹⁸·⁴⁵⁵⁷⁷⁸⁶²⁶¹⁵⁴⁶⁸⁷⁷⁶·⁵:⁵³⁶⁵⁷,⁸·⁷⁵⁷⁴⁷·⁴²⁴²⁷³³,⁴²⁷²⁴⁷⁷'⁸²⁶⁸⁵⁶⁷³⁸²⁵⁰⁴⁴⁷·⁷:⁷⁰⁵′⁸³⁷⁴⁷‽⁷⁶⁷⁰⁴¹³,⁵⁰⁸⁴⁸⁵⁵′⁸⁷⁸⁴⁶·⁴⁷⁵,⁵,⁶⁹⁶⁷⁴³⁸⁴⁸⁶⁶⁵⁶⁷⁸⁹⁵⁸⁷⁸⁷⁹⁴⁴⁸⁷⁷′⁵³⁷'⁸⁴⁸²⁷′⁸·³′⁷⁷⁴⁸⁷‽⁷'⁷'⁴⁴⁶⁹⁴¹⁷⁵⁵·⁴¹⁵³⁶⁶⁷‽⁷·⁷⁸⁵³⁴⁷⁵⁷⁸·⁴²⁵³⁴¹⁷⁶⁴⁹⁵:⁶⁴⁶⁵⁸³⁶²⁶¹⁸⁸⁸³⁶·⁵,⁴⁹⁴⁸⁵⁵⁷⁰⁵·⁵:⁴³⁷⁰⁷⁵⁴⁷⁶⁸⁷'⁵'⁸³⁸·⁶⁹⁸¹⁴⁰⁴⁰⁴⁷⁶·⁶⁰⁴⁰⁵⁵⁸⁵⁴⁵⁵⁴⁴³⁸³⁶⁴⁸¹⁷⁵⁸¹⁸¹⁷⁴⁷⁴⁸⁶⁶⁹⁸⁸⁶²⁶·⁶⁹⁴⁵⁸⁰⁸⁶⁷⁶⁸⁴⁶¹⁸⁵⁴⁷⁷,⁴⁷⁵:⁷,⁸¹⁷³⁷⁷⁴⁸⁵²⁴⁵⁷·⁶⁶⁵:⁷:⁸⁷⁶⁶⁸⁶⁸¹⁷²⁷⁸⁷³⁵′⁶·⁷³⁵⁵⁷'⁵⁰⁸⁰⁴³⁵·⁸·⁴⁶⁷⁶⁵⁷⁸⁵³′⁸²⁴⁰⁶¹⁷⁰⁴⁰⁸⁴⁴³⁸⁰⁷⁸⁷·⁸⁵⁷'⁶⁷⁷²⁶⁹⁴⁷⁸⁰⁵'⁷⁵⁷:⁷³⁵‽⁴⁰⁷⁰⁸⁰⁵⁷⁴⁷⁵:⁶¹⁷⁹⁶³⁶⁹⁸³⁴¹⁵:⁶·⁴⁷³′⁴⁰⁴⁸⁵⁵⁸⁸⁷‽⁷²⁴¹⁶⁰⁸⁶⁷·⁸²⁷⁴⁶²⁷⁰⁵⁵⁶⁵⁵⁶⁵‽⁵⁵⁵⁷⁴⁰⁶⁷⁷⁶⁶⁸⁵,⁷²⁴⁹⁴⁷⁶⁰³′⁶⁹⁶²⁷⁶⁵²⁶⁷⁶⁵⁴²⁷⁴⁸²⁴⁷⁸·⁷⁷⁷′⁶⁸⁷⁴⁷⁰⁵⁴⁶⁰⁸⁸⁴⁸⁷⁶⁸⁶⁵⁴⁶¹⁷⁴⁴⁷⁶⁹⁶⁴⁷‽⁸¹⁷⁷⁵⁴⁵,⁵,⁸⁵⁷⁹⁷′³′⁴³⁵⁵⁷⁹⁵:⁷²⁴⁶⁵⁰⁴⁸⁷⁵⁸⁸⁶⁹⁷‽⁵⁰⁷⁷³,⁵³⁴⁸⁶⁰⁷⁰⁸·⁴⁸³,⁵′⁶·⁸·⁶⁰⁸⁹⁴²⁸⁹⁸⁶⁶⁸⁷·⁶⁶⁷·⁶²⁶³⁷‽⁷⁴⁶⁵⁵‽⁷⁶⁴⁶⁷⁰⁵,⁵⁵⁷·⁶¹⁴⁴⁴⁹⁸³⁵'⁴¹⁷⁸⁶⁵⁵:⁶⁷⁷³⁸⁵⁶³⁴⁴⁵,⁷′⁶⁹⁷³⁶⁰⁸⁵⁷,⁸⁹⁷²⁷:⁸⁶⁷⁴⁸⁴⁴¹⁸¹⁶⁹⁴²⁷⁹⁴¹⁶⁸⁸·⁵⁸⁵′⁵:⁸³⁴⁵⁶⁷⁶⁹⁶⁵⁷′⁷·⁸¹⁷⁵⁷⁷⁴⁰⁷⁷⁴⁴⁸⁵⁸³⁵‽⁶²⁷⁴⁷,⁸·⁸⁵⁸⁴⁷'⁴⁷⁸⁵⁴³⁴²⁵:⁴⁵⁵′⁵³⁸·⁵⁸⁸³⁶⁴⁷³⁸⁵⁶⁶⁷⁵⁵'⁷⁹⁷³⁴⁴⁸²⁵⁴⁵²⁷⁵⁸⁵⁵²⁸²⁵⁵⁴⁹⁷⁹⁷:⁵³⁷‽⁵,⁶⁹⁶⁴⁶⁷⁶²⁶⁵⁵·⁴⁴⁸²⁸¹⁸⁰⁵⁶⁴⁶⁴⁵⁴⁴⁵‽⁷⁸⁸¹³,⁷⁷⁵⁴³,⁵⁶⁷³⁶¹⁵⁷⁷⁴⁵⁵⁶⁶⁵,⁵′⁸·⁵⁰⁴²⁶⁷⁷⁵⁵³⁷:⁷⁸⁸³⁶¹⁶⁶⁶·⁵⁰⁷,³,⁸⁸⁸⁸⁶³⁸·⁶⁴⁶²⁷⁴⁶²³′⁶²⁵⁵⁸¹⁵·⁵,⁵³⁷‽⁸⁷⁸⁸⁴⁴⁴⁰⁴³⁵⁴⁶⁶⁷:⁷⁰⁸¹⁷⁶⁸³⁵:⁶⁷⁶⁷⁵·⁷‽⁷³⁴⁵⁸⁶⁷⁶⁵′⁵⁰⁷⁵⁵³⁵′⁸²⁴⁵⁷‽⁸⁶⁴⁹⁶·⁴³⁸⁰⁷³⁶⁷⁵²⁸⁷⁸⁴⁵'⁶⁴⁷⁰⁵:⁴⁴⁷⁷⁷⁰⁸⁷⁵′⁶·⁷⁸⁶⁶⁷⁴⁵⁶⁶⁷⁵³⁶³⁴⁴⁸⁶⁵⁷⁵⁴⁷²⁸⁹⁵⁰⁷,⁷‽⁶⁵⁵‽⁵·⁴⁷⁵·⁷⁹⁵‽⁷′⁸⁰⁶⁸⁵²⁵:⁴⁶⁸·⁶⁷⁷,⁵·⁵⁴⁸⁵⁴¹⁵⁰⁸⁹⁴⁷⁷⁷⁷⁷⁷‽⁶⁰⁴⁰⁷⁵⁶⁴⁸·⁵⁰⁸⁷⁵⁶⁷²⁶⁹⁵'⁵⁸⁵⁸⁸⁰⁶⁶⁵·⁵·⁵·⁴⁶⁶⁵⁷‽⁵⁹⁵⁹⁵³⁷′⁷⁹⁷,⁵⁹⁶⁴⁵⁸⁶⁰⁶⁶⁵⁰⁷⁴⁵⁵⁵‽⁶⁹⁴⁰⁴⁷⁴⁶⁷:⁷'⁴⁴⁵⁸⁶⁶⁷⁰⁵:⁷⁷⁵⁴⁴⁴⁶¹⁵′⁶⁵⁴⁰⁷²⁷'⁸⁰⁷⁸⁴⁵⁴³⁸⁴⁵³⁶⁰⁷⁶³,⁷‽⁸⁶⁵⁹⁵⁷⁶¹⁵′⁶⁶⁵²⁶⁸⁶⁶⁷⁷⁴⁶⁷⁷⁶⁰⁵′⁷⁷⁴³⁵⁸⁶²⁷⁴⁷⁵⁴²⁵³⁷⁶⁸⁴⁸³⁵,⁷·⁷⁷⁶⁶⁸⁷⁸¹⁶⁶⁶⁰⁸⁷⁷⁶⁸⁷⁷⁴⁷⁰⁴⁸⁸³⁴⁹⁵⁰⁸⁸⁸³⁶⁹³′⁷⁰⁸⁴⁷⁰⁸¹⁶·⁵³⁵:⁷′⁶¹³′⁷·⁷·⁴⁰⁷⁶⁸⁵⁵:⁸²⁵'⁶⁴⁷⁷⁵⁵⁷:⁵⁷⁴⁸⁷⁶⁴⁷⁵:⁶·⁶²⁸¹⁴⁵⁷·⁵⁷⁵'⁶⁸⁷⁷⁷·⁴⁹⁶⁷⁴⁷⁶⁷⁷²⁷⁹⁸⁸⁵²⁸¹⁵,⁴⁹⁸⁷⁷⁷⁸⁸⁷⁹⁷:⁶⁷⁸²⁶²⁸⁵⁸⁵⁶¹⁴²⁴⁵⁵⁷⁴⁷⁵⁹⁷⁶⁵³⁵·⁶⁴⁸⁰⁵'⁷′⁴⁶⁵,⁴⁸⁷⁴⁴⁶⁸·⁵·⁵,⁷,⁴⁹⁸⁷⁴²⁶³⁵‽⁵‽⁶²⁵⁴⁸¹⁵,⁵′⁷⁰³,⁵⁷⁸¹⁶⁴⁴⁶⁶⁴⁷³⁶¹⁵²⁷⁴⁷,⁶⁶⁷⁴⁶⁰⁸⁹⁷⁵⁸⁶⁴⁵⁶·⁶⁶⁷³⁸⁵⁴⁸⁸¹⁸·⁴²⁵·⁸⁹⁶⁰⁷⁶⁵‽⁷⁷⁸·⁵⁴⁵′⁷⁸⁶⁴⁸⁵⁶⁸⁵⁹⁴³⁸⁷⁵‽⁶⁴⁸⁰⁷⁶⁸⁴⁷²⁷:⁶⁸⁷:⁸⁰⁸⁵⁸⁷⁴⁵⁵⁹⁷⁰⁵·⁶¹⁴⁸⁴⁴⁴³⁸⁰⁷³⁵⁹⁸⁵⁷⁸⁴⁸⁵⁹⁷,⁵⁰⁷⁵⁶·⁴⁴⁷‽⁶⁰⁴³⁴⁰⁶⁷⁶⁸⁸⁶⁶⁸⁷³³′⁶⁴⁷³⁶·⁵⁸⁷⁰⁴⁸⁴⁸⁸⁶⁵′⁴⁰⁸²⁵'⁶·⁵⁸⁸⁷⁷⁴⁶·⁷⁴⁴⁷⁷⁰⁷,⁷·⁶⁴⁶⁰⁶³⁵‽⁴⁰⁶⁷⁷³⁷,⁵³⁶¹⁸·⁸⁷⁴¹⁵'⁷⁷⁷⁵⁷⁶⁶⁵⁶⁸⁷⁶⁶³⁷,⁴⁸⁵⁷⁷:⁸⁷⁸·⁶⁶⁷³⁶²⁶¹⁷²⁵·⁷⁵⁸¹⁷·⁸¹⁷⁹⁷:⁴²⁶¹⁷⁰⁴⁴³′⁴³⁵:⁵³⁵,⁷‽⁸³⁸⁰⁴³⁵⁵⁸⁴⁶³⁷³⁷′⁸⁸³′⁷,⁵⁷³′⁵²⁷⁸⁷,⁵,⁷⁷⁴⁸⁸⁸⁸·⁶⁰⁶⁹⁵²⁵·⁸⁹⁷³⁸⁶⁶²⁸⁵⁴³⁶⁸⁵²⁸⁵⁴²⁵,⁴¹⁵:⁸⁶⁸⁰⁶⁴⁷²⁵⁶⁴¹⁴¹⁵⁰⁶⁰⁶⁸⁶⁹⁶⁹⁴⁹⁸·⁵²⁵⁵⁸³⁷⁸⁷⁶⁷⁹⁶⁰⁴¹⁸²⁷′⁸⁶³′⁸⁸⁸⁷⁵⁰⁷⁴⁸⁸⁷·⁸⁸⁵⁷⁸⁸⁷′⁷⁹⁷⁰⁵⁰⁷′⁸³⁸¹⁶·⁷²⁷‽⁷′⁵·⁴¹⁶⁵⁶⁸⁵⁴⁷⁸⁸·⁸⁶⁶⁵⁴⁹⁸¹⁸¹⁵⁹⁷⁷⁵⁶⁶⁹⁴⁴⁵'⁷⁹⁴⁹⁷⁹⁷⁶⁸⁰⁵⁹⁵⁸⁵⁰⁷²⁵·⁷⁸⁷‽⁷²⁸⁷⁵⁹⁶⁰⁵⁷⁴²³,⁸¹⁷⁰⁵³⁶¹⁷³⁵⁸⁸⁶⁸⁷⁴³⁵⁸⁵,³,⁶⁶⁴²⁶²⁶⁶⁴³⁷²⁴¹⁶²⁷⁶⁶⁷⁶⁴⁶·⁷⁷⁶³⁵'⁷⁷⁷⁷⁷⁰⁷′⁶⁴⁷³⁵:⁷⁴⁵,⁶⁸⁷·⁵:³′⁵²⁴⁸⁷'⁷′⁸⁸⁷′⁵⁶⁵‽⁵⁹⁵³⁵⁸⁴³⁴⁷⁶⁴⁵⁶⁷⁶⁵′⁷:⁶³⁷'⁶⁵⁸·⁵,³′⁸⁶⁶⁴⁵·⁶⁰⁸⁶³,⁷‽⁷⁶⁶⁴⁸⁶³,⁴⁷³′⁵′⁶⁹⁵⁶⁵⁷⁴⁹⁶⁰⁷·⁴¹⁸⁰⁴⁵⁵⁵⁸⁷⁷·⁷:⁵⁹⁵⁰⁸⁶⁷'⁸²⁶⁹⁷⁸⁴⁷⁷:⁷⁵⁸⁸⁷'⁷'⁵'⁵⁸⁸⁴⁵⁵⁷²⁷′⁸·⁶⁰⁸⁹⁷⁶⁸⁷⁷,⁷′⁵·⁷:⁴⁴⁵⁶⁵³⁵‽⁶⁸⁸²⁶⁵⁷⁶⁶⁷⁶⁰⁶²⁴⁹⁷⁹⁸⁶⁴⁵⁶⁵⁵:⁸⁴⁸⁷⁸⁵⁶⁵⁵⁴⁵⁶⁶⁶⁸⁶⁵⁷⁷:⁷'⁸²⁷³⁶³⁷⁹⁷'⁵:⁴⁶⁵′⁸⁵⁵⁹⁵⁶⁴⁷⁴⁷⁷⁵⁵‽⁸²⁶·⁴²⁵⁷⁷'⁴⁵⁷,⁵'⁴⁷⁶⁹⁶·⁸⁶⁴⁸⁴⁰⁷⁵⁵:⁵⁴⁵⁶⁷′⁷,⁵²⁶⁵⁷⁵⁴¹⁵·⁷⁶⁸⁵⁴⁰⁵·⁵‽⁸⁷⁵⁶⁸⁵⁷:⁵,⁵⁹⁸⁶⁵⁰⁴⁴⁴⁴⁷⁴⁶·⁷⁵⁵³⁶·⁸⁵⁷²⁴²⁴⁴⁴⁵⁷⁴⁴⁴⁵⁰⁷′⁵⁰⁸²⁵,⁵'⁵⁶³′⁷'⁸⁷⁷:⁴⁶⁸⁶⁷:³,⁷⁵⁴³⁶·⁸⁴⁵:⁸⁶⁵⁷⁸⁵⁷′⁴⁴⁴⁴⁸⁶⁷,⁵⁶⁶⁵⁵:⁷²⁶⁴³′⁷⁹⁷⁵⁷⁹⁸⁷⁸⁸⁵⁶⁴⁴³′⁶⁶⁶·⁴⁹⁶⁵⁴⁴⁶⁵⁵³⁵⁹⁸⁶⁷·⁶⁹⁸¹⁷⁷⁵·⁷:⁵‽⁸⁹⁶⁴⁷⁴⁵′⁷²⁸⁶⁸³⁴⁷⁷:⁵·⁶⁵⁶³⁶⁴⁸⁷⁴⁷⁴⁷⁷'⁸·⁴⁷⁶⁹⁴³⁴³⁴⁷⁵‽⁵⁷⁸¹⁵⁷⁶⁴⁵·⁶⁸⁶⁶⁷⁰⁶⁰⁶⁸⁵⁸⁴⁵⁵⁰⁷⁷⁷‽⁸⁰⁵'⁵⁹⁷⁵⁷⁸⁶⁶⁸⁴⁵⁵⁵⁰⁴³⁵·⁶⁰⁶⁴⁵⁷⁶⁹⁸²⁵:⁵³⁴³⁵⁷⁴¹⁷⁷⁷'⁵⁸⁸·⁷²⁶⁷⁵:⁷‽⁷⁵⁷⁰⁶¹⁴⁰⁴⁹⁴²⁸⁴⁵⁸⁸⁹⁴³⁸¹⁸⁰⁶⁴⁸¹⁶⁰⁵⁶⁵⁷⁸⁶⁸¹⁷′⁶⁹⁶·⁷⁹⁴²⁵²⁷⁵⁵⁶⁵³⁴⁶⁸·⁷·⁴⁴⁸⁰⁴⁴³,⁷⁸⁸²⁵⁵⁷·⁶⁰⁸⁰⁷²⁵⁸⁵:⁸⁶⁶⁹⁴⁰⁵⁸⁴⁵⁴⁶⁵⁹⁷⁶⁸⁰⁷⁷⁵⁴⁴⁰⁶⁵⁸⁹⁵⁹⁶⁹⁷⁵⁴¹⁸⁴⁵⁵⁸⁷⁴³⁴⁴⁸⁸⁶⁰⁵³⁵'⁷⁴⁴²⁴⁹⁴⁶⁸⁰⁷′⁸⁰⁷‽⁸⁵⁴⁵⁷⁸⁸·⁴⁵⁶·⁷‽⁵'⁷⁴⁷²³′⁷:⁸³⁷⁰⁵‽⁵,⁴⁹⁶⁸⁵⁸³,⁷,⁸¹⁸⁴⁴⁴⁵⁹⁷,⁵⁴⁵⁹⁸³⁴³⁵⁶⁴³⁴⁴⁶⁰⁸·⁵⁶⁷³⁸¹⁴¹⁸⁶⁸⁰⁶²⁵'⁷′⁸⁵⁸⁷⁸¹⁷′⁵³⁵⁷⁷‽⁸⁰⁸²⁷⁶⁵,⁵⁰⁵³⁷⁸⁵‽³′⁵³⁵⁸⁷'⁶³⁴⁵⁶·⁵⁴⁸⁴⁶⁹⁸³⁷³⁵⁰⁷:⁴⁴⁵:⁵′⁸⁰⁶⁵⁵⁶⁷‽⁷⁴⁷,⁸⁹⁸⁶⁷‽⁴¹⁵⁷³′⁷·⁸⁶⁵⁹⁸²⁵⁶⁵⁸⁸⁶⁶·⁸⁶⁴⁹⁷³⁶⁷³,⁴⁷⁶⁶⁸³⁷⁵⁸⁷³,⁴¹⁸¹⁸·⁵‽⁸⁶³′⁷·⁵⁰⁶⁴⁷·⁴⁷⁵:⁵⁹⁵·⁶⁸⁸⁶⁸⁴⁶⁴⁷⁵⁸¹⁶·³,³′⁵‽⁷⁴⁵,⁶²⁵²⁷⁷⁷'⁵:⁶·⁶¹⁶⁸⁷′⁴⁸⁴⁷⁵⁵⁶⁷⁷²⁷⁵⁵⁰⁷:⁶⁵⁴⁵⁶⁰⁶·⁵⁷⁷⁷⁸·⁴⁰⁷⁰⁷⁹⁶²⁸⁷⁷⁶⁶⁴⁵'⁷²⁷,⁷‽⁶³⁴⁵⁵²⁸¹⁵'⁷⁵⁶⁴⁷⁶⁴⁹⁵·⁶⁷⁶·⁷⁶⁷′⁸⁶⁴⁰⁵:⁸⁰⁶⁸⁶⁴⁵·⁵:⁷′⁵⁶⁵⁵³,⁶¹⁶·⁸⁴⁵⁴⁷·⁵⁹⁵,⁴⁶⁸⁴⁷·⁴⁰⁷⁷⁵,⁷·⁷⁶⁶⁹⁶²⁸⁵⁵⁴⁵²⁵:⁸⁹⁴⁴⁴²⁵′⁵⁴⁸·⁸⁷⁶²⁷⁶⁵⁰⁸⁹⁵⁷⁷⁸⁷⁶⁴⁸⁶⁴⁸⁶⁷⁷⁶¹⁶¹⁸⁹⁵²⁴⁰⁷′⁶⁷⁸⁹⁵⁵⁸⁵⁷′⁷,⁵⁷⁷‽⁵⁶⁵⁰⁶²⁴⁴⁵⁴⁵⁴⁵‽⁴²⁸⁴⁸⁴⁵‽⁵′⁸³⁸¹⁶⁵⁶⁶⁴³⁸⁷⁴⁹⁵⁹⁵²⁶⁷⁶⁰⁶·⁶⁶⁶²⁶⁸⁸·⁶⁶⁵²⁴²⁵⁴⁷·⁷⁸⁸⁵⁷'⁷·⁵⁹⁴²⁷‽⁵⁸³′⁷⁰⁷,⁸⁰⁸²⁴³⁴⁶⁶⁸⁶⁸⁸¹⁷⁹⁴⁶⁵⁹⁴⁵⁸⁵⁴⁸⁷³⁶³⁵²⁴⁴⁸⁰⁷³⁶¹⁴⁸⁸⁴⁵⁴⁴⁴⁷‽⁷:⁸²⁴³⁶³⁸⁷⁴⁹⁷⁸⁶⁰⁷:⁷⁷⁶⁰⁷:⁷‽⁷⁵⁶⁹⁷⁸⁸⁸⁴⁶⁸⁸⁴³⁷⁴⁷·⁸³⁷:⁸¹⁸⁸⁶⁴⁶·⁸⁶⁶⁷⁶⁹⁶¹⁴⁸⁵⁴⁵⁸⁸⁹⁵²³′⁴⁸⁷³⁶⁸⁶⁰⁸⁵⁶⁴⁶⁴⁷⁴⁵⁴⁶⁷⁵:⁵⁹⁴⁰⁷′⁴⁰⁴³⁷⁸⁷⁰⁵³⁵⁴⁵'⁷⁰⁵⁸⁴⁵⁶³⁷⁵⁶⁹⁷⁰⁴⁹⁵·⁷·⁶²⁶⁷⁶⁷⁷⁹⁷·⁶⁰⁶⁶⁸³⁷‽⁴⁸⁶⁰⁶³⁷⁷⁴⁶⁷·⁵⁵⁵‽⁶³⁸⁹⁵⁴⁴⁴⁸³⁸⁰⁴⁴⁸⁵⁴⁸⁷⁹⁵⁸⁶·⁵²⁴⁴⁴⁵⁸⁶⁴⁷⁷³⁵·⁸⁸⁷‽⁶⁴⁷⁹⁵⁰⁵⁴⁵·⁵⁶⁷,⁵'⁷⁰⁷³⁷⁶⁷²⁷'⁷⁸⁸³⁷⁹⁶⁶⁴³⁶⁸⁷²³,⁵,⁴⁴³,⁵⁰⁵:³,⁶⁷⁵⁸⁵‽⁴⁰⁸⁷⁵⁷⁶⁴⁷³⁷³⁷,⁷'⁶⁴⁸²⁷'⁴⁶⁸⁰⁷‽⁶⁰⁶³⁷³⁵⁶⁷·⁶¹⁷'⁸·⁶⁷⁸⁶⁵⁸⁵⁵⁷′⁵'⁸⁹⁷⁰⁸⁵⁷′⁷⁹³′⁴²⁵,⁷,⁶⁶⁴²⁷⁰⁶¹⁵'⁸⁰⁸·⁶¹⁸²⁶⁷⁴⁹⁶⁷⁵⁵⁷⁰⁶⁵⁵,⁴⁵⁷:⁸⁸⁷′⁶⁹⁶⁹⁸⁶⁷²⁷⁰⁴⁰⁶⁰⁶⁶⁸⁴⁵:⁶⁵⁸·⁷‽⁵:⁶⁷⁴⁶⁵⁸⁵′⁷:⁷⁷⁶⁸⁸⁷⁵⁵⁵⁰⁵‽⁷·⁶³⁵:⁵⁹⁴⁹⁷⁷⁸⁶⁸²⁴⁷⁷⁷⁵⁸⁵⁴⁷⁶⁵⁰⁵:⁸³⁷·⁴⁸⁵²⁷⁶⁵⁹⁸⁰⁸³⁷⁹⁵²⁶⁸³,⁸⁹⁷⁷⁸⁵⁸²⁷⁵⁸⁷⁸⁸⁶⁶⁸⁸⁴⁰⁶⁵³,⁴⁴⁴⁸⁴²⁵²⁸⁸⁴⁸⁵³⁵³⁵⁹⁶⁶⁶⁴³,⁷⁹⁸³⁸¹⁷⁸⁷⁰⁶⁴⁴⁵⁴⁸⁸¹⁶⁸⁷⁴⁵⁸⁵⁵⁴¹⁴¹⁶²³′⁵⁰⁸·⁸⁹⁵:⁶⁷⁷⁸⁸³⁴²⁸⁶⁵⁴⁶²⁵⁰⁵:⁸¹⁸²⁵⁷⁸⁸⁴⁵⁶⁷⁷⁴⁷·⁶⁴³′⁸³⁷'⁴⁴⁴⁸⁸⁵⁷‽⁵′⁵⁶⁸⁸⁶³⁵′⁴⁶⁶²⁶⁴⁶²⁷³⁵³⁶·⁷⁰⁸⁷⁸⁰⁵,⁸⁷⁷‽⁴²⁷′⁸⁹⁷:⁵⁵⁶²⁵⁷⁴⁴⁷⁸⁷,⁴²⁶⁴⁵,⁷⁰⁶⁵⁷⁶⁶¹³′⁸⁸⁶⁵⁶⁰⁸¹⁵⁴⁷⁷⁸⁴⁷⁴⁷⁸⁵·⁸⁶⁷′⁷·⁵,⁵⁹⁷‽⁶¹⁵⁴⁴¹⁸⁰⁸⁰⁸⁶⁷⁹⁷:⁷⁶⁴⁷⁵²⁵·⁵⁴⁵⁸⁷‽⁷⁹⁸⁰⁴⁵⁵³⁷:⁶⁸⁷⁴⁴⁸⁸⁹⁷,⁷⁰⁴⁵⁴⁰⁴²⁵⁵⁶⁰⁵⁶⁵⁴⁵‽⁷⁹⁶³⁵³⁷⁴⁴⁷⁷²⁷'⁸³⁴⁵⁸⁸⁶²⁷⁰⁷‽⁶³⁷′⁷³⁷⁶⁶⁹⁷'⁵′⁷'⁶·⁸⁰⁸³⁷⁷⁷,⁵:⁵³⁷,⁵'⁶⁷⁷⁰⁴⁶³,⁷,⁷²⁴⁵⁷'⁷⁵⁴⁹⁸¹⁷³⁶·⁸⁴⁶⁰⁷³⁴⁶⁸⁴⁵,⁷⁴⁶⁸⁵⁷⁸²⁸²⁸¹⁶²⁵²⁸⁹⁷⁴⁶²⁴²⁴¹⁷³⁷²⁶²⁵²⁸⁸⁷′⁸⁸⁸⁴⁸⁹⁷³⁵·⁶⁵⁴¹⁴⁹⁷‽⁷³⁵′⁵'⁷'⁸²⁷,⁸³⁶²⁶⁰⁵:⁵⁸⁵⁸⁵⁰⁸·⁶¹⁸⁹³,⁴⁷⁸⁹⁶⁰⁵'⁷⁰⁸³⁵,⁷²³,⁵⁹⁴⁵⁵⁴⁵'⁴⁶⁵⁸⁵⁷⁴⁴⁵′⁴⁵⁵⁸⁶⁴⁷⁶⁴⁷⁷'⁵⁰⁵,⁵′⁵⁷⁸⁵⁵⁹⁶³⁵³⁷³⁸⁰⁵²⁵‽⁷′⁵⁴⁴¹⁴⁸⁷³³,⁵·⁵‽⁶⁰⁷⁹⁵⁷⁶⁰⁴⁰⁴⁹⁸⁸³,⁸⁷⁷²⁷⁵⁷⁷⁵·⁴⁴⁷⁷⁶⁷⁵³⁷⁹⁶⁹⁵⁵⁵,⁶⁴⁸⁹⁷⁷⁷⁴⁸·⁷⁶⁷⁰⁷'⁶⁶⁶¹⁵⁸⁵³⁶⁴⁷‽⁸·⁸⁵⁶³⁵,⁷²⁵⁰⁶⁴⁴³⁷:⁶⁶⁵⁶⁷′⁵⁵⁸⁹⁶²⁸²⁵⁸³,⁷⁶⁵·⁸²⁸⁸⁷⁵⁷⁷⁵⁸⁸¹⁶⁹⁷⁰⁸⁵⁸⁰⁴¹⁶⁹⁸⁸⁷'⁵·⁵′⁸⁹⁶⁹⁷‽⁵·⁵⁷⁴⁶⁴⁶⁵⁸⁵²³′⁵³⁸⁷⁵'⁶⁵⁷⁰⁵⁰⁸³⁸⁵⁷⁸⁵⁶⁴⁰⁶⁴⁶⁸⁵⁹⁴⁵⁵,⁸⁷⁴⁵⁵′⁴¹⁶⁵⁶⁹⁷⁵⁴⁸⁸¹⁴⁴⁴⁹³′⁵′⁷,⁶²⁵‽⁸⁸⁷⁹⁸⁵³,⁵⁹⁸¹⁸·⁶²⁴⁵⁶⁰⁸⁹⁵³⁸⁴⁸⁸⁷‽⁴¹⁸·⁴⁵⁷'⁶⁸⁸³⁷⁴⁷·⁴⁷⁴⁴⁷·⁵⁶⁴⁵³′⁶²⁸⁴⁵'⁷·⁵²⁴⁴⁷,⁸⁶⁸⁵⁴⁴⁵′⁷'³′⁶·⁷⁷⁴⁷⁷⁷⁷⁷⁴⁵⁴⁵⁷‽⁸⁴⁷⁵⁵:⁷,⁴⁵⁵⁴⁵²⁷⁴⁸²⁶⁶⁷²⁶⁸⁸⁰⁸⁶⁶·⁵‽⁶³⁸⁶⁴⁶⁸¹⁷·⁵′⁸¹⁶⁰⁶⁰⁵,⁸⁴³,⁴⁷⁷⁷⁵‽⁶·⁷'³,⁸⁵⁴⁹⁸⁸⁶¹⁵⁰⁸⁸⁶⁹⁵:⁸⁴⁴²⁸·⁶⁹⁵⁰³′⁴²⁶⁷⁵⁷⁸⁵⁷'⁴⁵⁶²⁶⁴⁵²⁷‽⁶¹⁸·⁵⁴⁵⁰⁵,⁴⁶⁴²⁵⁴⁵⁴⁸⁰⁸⁰⁵⁷⁴⁰⁶·⁶⁰⁵·⁵²⁷·⁷⁸⁷⁹⁸²⁵⁹⁵⁷⁴⁰⁵⁰⁵'⁷⁰⁵'⁸²⁶⁶³,⁸⁶⁴³⁵⁰⁵'⁷⁷⁵⁷⁵⁷³′⁴⁵⁶¹⁶⁴⁷⁹⁷⁴⁵:⁷:⁴¹⁵⁵⁸²⁸⁶⁷²⁵⁶⁷⁰⁴⁴⁴⁹⁵′⁴⁰⁵'⁶⁷⁴²⁷⁵⁶⁸⁷²⁶⁹⁶·⁴²³,⁶⁸⁵³⁷‽⁸⁹⁶⁵⁷:⁶⁴⁵⁹⁸⁴⁷⁴⁶⁷⁷⁸⁷·⁷³⁵,⁸⁹⁶¹⁵′⁶³⁵²³,⁵⁴⁷:⁸⁹⁸·⁴²⁸⁵⁷·⁷⁶⁴²⁸⁷⁶³⁸⁴⁷⁹⁷⁵⁸⁴⁷'⁴¹⁶·⁸⁷⁸⁴⁶⁹⁶⁴⁵′⁵⁰⁶⁶⁷⁰⁷⁹⁵′⁴³⁴⁹⁷,⁷⁵⁶⁸⁸⁰⁵,⁶⁷⁴¹⁸·⁴⁹⁷‽⁷,⁷‽⁷‽⁶⁴⁴⁸⁴⁹⁸⁶⁴⁹⁸⁰⁵⁸⁶⁰⁴²⁸⁴⁶¹⁶³⁵,⁸⁵⁷,⁸³⁴⁰⁸²⁸⁹³,⁴⁷⁷⁵⁷⁹⁴⁹⁴²⁸³⁵⁹⁵⁵⁶⁷⁶⁴³′⁷⁶⁶¹⁶·⁸⁰⁷⁴⁷²⁷⁰⁴³⁷,⁵⁵⁸³⁸²⁷²⁸⁵⁸⁸⁵⁹⁷⁹³,⁵'⁶⁷⁷²⁴³⁸²⁵·⁷'⁵⁴⁶⁸⁶⁸⁵‽⁸⁹⁵'⁵,⁶⁰⁷⁹⁵,⁶⁷⁷·³′⁶³⁷·⁸⁴⁵,⁵²³,⁷,⁷⁷⁶⁵⁷³⁴⁹⁵⁵⁴¹⁵‽⁷⁹⁷·⁶⁵⁵⁴⁷‽⁸⁵⁴⁷⁵⁵⁷'⁵⁵⁵⁸⁵'⁵⁷⁷⁴³′⁴⁶⁵'⁸⁰⁴¹⁶³⁴⁰⁸²⁷⁶⁸²⁵²⁸⁶⁸²⁴¹⁵⁷⁴⁴⁵²⁴⁶⁸⁴⁴⁶⁶⁶⁶¹⁴⁷⁷⁰⁷⁷⁵·⁸⁶⁸⁹⁸⁴⁶⁰⁷⁹⁷³⁸⁷⁵,⁶⁶⁷⁹⁶⁴⁸⁸⁵⁹⁵⁷⁷⁵⁶²⁵⁵⁷'⁶⁶⁶⁴⁶¹⁷⁶⁶²⁸¹⁶³⁴⁵⁵:⁵·⁶⁷⁵,⁶²⁶⁷⁵²⁶³⁴²⁶⁰⁵²⁷⁸⁶²⁵'⁴⁰⁵⁰⁵⁹⁵'⁷⁶⁸¹⁸⁷⁵,⁸³⁵³⁵⁹⁷²⁷⁴⁴²⁶⁹⁴²⁶⁸⁴⁷⁷⁵⁵⁰⁵²⁷·⁵‽⁸⁰⁷²⁴⁶⁴⁵⁷⁶⁵‽⁷⁴⁸⁹³′⁵'⁵⁵⁷⁷⁶⁹⁷²⁷⁹⁷⁷⁵:⁷⁰⁵·⁵'⁸³⁵·⁵⁸⁷‽⁶¹⁷‽⁴⁴⁵⁵⁷′⁴⁰⁷⁷⁸⁴⁵:⁶⁰⁸·⁷·⁴³⁷²⁶⁹⁴⁶⁸·⁷²⁶¹⁵'⁶⁶⁷·⁷·⁶⁰⁶³⁵'⁵²⁶⁵⁷′⁴³⁸³⁸³⁴³³,⁶·⁴⁶⁴⁸⁸⁸⁵⁶⁷⁴⁷⁰⁶·⁷:⁵⁴⁷,⁵‽⁸³⁵,⁴¹⁶³⁶⁹⁵⁶⁷³⁷:⁴⁴⁴⁰⁵:⁷:³,⁵⁶⁸²⁴⁸⁴⁶⁵′⁵⁰⁸³⁵⁵⁸⁹⁴³⁷⁷⁸⁹⁸⁹⁶⁰⁵⁹⁴⁰⁸²⁶⁹³′⁷,⁴¹⁷⁷⁷:⁶·⁶³⁴¹⁴⁶⁶⁶³′⁴²⁴⁵⁷′⁵:⁴⁷⁴⁴⁸⁰⁷,⁵,⁶⁹⁵⁶⁴⁵⁵⁰⁴⁵⁷³⁸⁸⁷⁴⁷⁵⁷⁶⁴⁷⁶⁶⁷⁷⁷·⁷⁵⁷⁹⁶³⁴¹⁵:⁵⁰⁵⁷⁷³⁵,⁴⁵⁷⁴⁸⁸⁷⁴⁶⁶⁶⁷⁴⁸⁶⁶⁷‽⁶⁹⁵′⁷′⁸³⁵′⁷:⁴³⁸⁷⁴⁰⁷⁶⁶⁶⁵'⁷⁷⁷²⁸⁰⁶⁵⁶·⁶³⁸⁶⁸⁰⁸¹⁶⁶⁷:⁷⁸⁷,⁵,⁴⁶⁵:⁴⁴⁷,⁴⁹⁶²⁵⁵⁸⁶⁵⁹⁶⁹⁸¹⁶⁸⁵⁶⁵⁹⁵⁴⁷:⁵⁴⁶⁰⁷·⁵′⁸⁷⁴²⁸¹⁴⁰³′⁴¹⁵³⁷‽⁷⁷⁴⁵⁶⁶⁵⁴⁵⁵⁷⁴⁸¹⁵'⁷⁴⁶⁰⁶¹⁵⁸⁷²⁸·⁸⁶⁸²⁴³⁴⁴⁴⁰⁵:⁴⁶⁸⁰⁶⁰⁷⁸⁵⁸⁸³⁶⁹⁴²⁶·⁴⁷⁸⁷⁸⁸⁶²⁴³⁵·⁸⁸⁵³⁶¹⁵⁴⁵⁷⁸²⁵,⁵⁴⁸²⁶⁶⁵′⁷⁵⁷⁶⁵⁶⁷⁹⁵⁴³′⁸⁵⁶⁹⁴⁵⁷:⁴⁷⁶⁸⁶¹⁶³⁷⁵⁵⁵⁷⁹⁴⁵⁵·⁶⁹⁵⁰⁷⁹⁵⁹³,⁵′⁴⁷⁸⁹³′⁵⁴⁴¹⁴⁵⁵⁸⁶⁵⁷′⁵·⁴⁷⁸⁷⁵'⁵²⁶·⁷'⁷′⁷,⁵³⁷²⁵³⁴⁸⁵⁷⁶⁵⁷⁸⁸⁵⁶⁰⁵⁰⁵⁷⁷⁷⁴⁴⁵'⁵,⁶⁴⁴¹⁷′⁵⁷⁸⁸⁵⁹⁵:⁶³⁸²⁷,⁸⁴⁸·⁵'⁷'⁷⁸⁷⁷⁷‽⁶⁷⁵‽⁴³⁶⁰⁸¹⁵⁶⁸·⁵⁵⁶⁵⁷'⁷⁴⁵⁹³′⁸¹⁵′⁷⁸⁸¹⁷²⁶²⁸·⁸⁵⁷⁹⁶⁵⁷·⁵‽⁶¹⁵'⁶⁹⁷′⁵⁴⁸¹⁵'⁵'⁸⁶⁴⁵⁸⁹⁷:⁷³⁸³⁶⁰⁷³⁴⁰⁵⁴⁷'⁸⁵⁵⁴⁸⁶⁸⁵⁸⁸⁷³⁴²⁴⁹⁴²³,⁴⁷⁷⁰⁵⁹⁷⁸⁴⁰⁸⁰⁵,⁶⁶⁷,⁸⁷⁷⁰⁸¹⁸⁷⁶·⁸²⁶⁵⁶⁶⁸²⁷⁸⁴⁶⁷⁹⁸·⁸⁰⁷'⁶⁹⁶⁹⁶²⁷⁷⁴⁹⁵²⁵⁶⁵²⁶⁴⁵'⁷⁴⁵⁷⁶⁶⁴³⁶⁶⁸⁸⁵²⁴³⁴⁸⁸¹⁵′⁷⁰⁴⁵⁷‽⁵⁰⁴⁶⁵'⁵⁷⁸⁵⁸⁸³,⁴⁹⁸·⁵,⁸⁷⁶⁶⁷‽⁷⁷⁶⁹⁴⁶⁵‽⁷,⁸⁴⁵²⁸⁰⁶¹⁶⁸⁷⁸⁶²⁶·⁵′⁴⁹⁵·⁸⁹⁸⁰⁸¹⁴⁸⁵′⁷⁵⁸²⁷⁵⁴⁴⁴³⁸⁷⁷⁴⁶⁴⁷³⁷‽⁴⁸⁸¹⁵′⁸⁴⁷⁵⁶·⁷³⁷⁷⁷·⁶⁷⁷⁵⁸⁶⁸⁹⁵′³,⁸¹⁶⁷⁶⁴⁸⁸⁷·⁴⁷⁷⁶⁷⁵⁴⁰⁷⁵⁶¹⁴¹⁷'⁷⁴⁶²⁴⁴⁴⁸⁵'⁸⁹⁶²⁶⁶⁶⁰⁴⁴⁵³⁷,⁴⁹⁷⁸⁴⁷⁵·³′⁸¹⁷⁹⁵‽³′⁴²⁴⁷⁸³⁵³⁵⁶⁵'⁷‽⁶⁷⁵⁶⁷⁵⁷⁵⁵′⁸³⁵²⁵‽⁸³⁶⁹⁶¹⁵,⁷‽⁷'⁷′⁶⁸⁵³⁷⁴⁵,⁴²⁶²⁴⁴⁸⁹⁴⁸⁷'⁸·⁷‽⁷'⁴⁸⁷'⁴⁴⁸¹⁵⁰⁸⁸⁸⁸⁵⁹⁵⁹⁵′⁵³⁵‽⁷'⁷‽⁷'⁵:⁶²⁵⁶⁷:⁴⁶³′⁴⁹⁶⁷⁶⁹⁴⁴⁸⁸⁴⁰⁷⁶⁶¹⁵⁵⁷·⁵′⁷⁷⁵³⁸¹⁶¹⁵‽⁷⁸⁵,⁷⁶⁵⁵⁵⁶⁷‽⁶²⁵′⁸⁹⁵⁵⁷·⁷³⁸⁵⁶¹⁵⁸⁸⁴⁶¹⁸⁸⁵'⁴¹⁸¹⁷³⁶⁵⁴⁵⁷⁹⁸⁸⁵⁸⁷′⁵,⁸⁸⁸²⁷⁹⁵⁴⁴⁸⁷²⁵⁶⁷′⁸·⁸⁷⁵⁹³,⁸⁷⁸⁸⁴⁸⁶⁴⁷⁴⁷³⁶⁶⁵⁵⁸⁵⁸·⁵⁰⁵⁴⁷⁹⁸⁹⁷²⁵,⁷²⁸³⁴⁷⁴³⁶⁸⁴⁶⁴³⁴³⁴⁹⁷·⁴⁴⁶⁹⁴²⁸⁵⁴¹⁵:⁶⁸⁴²⁵‽⁵·⁵⁶⁵⁷⁵³⁸·⁵′⁴¹³,⁷·⁷:⁸³⁷³⁵⁴⁴⁹⁶³⁷⁰⁸⁶⁶¹⁶·⁸⁹⁵⁸³,⁴³⁵⁴⁷³⁸⁶⁵⁶⁷⁴⁶⁰⁷²⁷'⁸³⁸²⁶¹⁷‽⁸⁷⁴⁸⁴⁰⁵⁴⁶⁹⁷⁰⁸⁷⁶²⁴⁵⁴³⁶·⁷‽⁶⁰⁶⁵⁷⁴⁷⁷⁷⁵⁴³⁵⁵⁴⁷⁷‽⁷⁷⁵⁵⁵⁴⁴⁵⁷'⁷,⁸⁰⁶³⁴³⁷⁵⁸⁷⁴⁸⁴⁰⁸⁵⁷²⁸·⁶⁹⁸²⁸²⁵²⁸⁹⁵⁹⁵·⁵⁶⁷:⁷'⁵‽⁶·⁶⁷⁵,⁶·⁷⁴⁵⁷⁷⁷⁸⁵⁸⁹⁸¹⁷·⁶⁸⁵:⁵⁴⁶³⁷⁰⁴⁰⁵⁶⁸³⁴⁸⁶¹⁷'⁵'⁴⁸⁷³⁵⁰⁸⁸⁸⁰⁸⁰⁷⁸⁶⁰⁴³⁴⁴⁵'⁴⁵⁸⁰⁵⁷⁶⁴⁶⁹⁶⁵⁷⁰⁸¹⁴⁴⁸⁰⁶⁴⁵'⁵,⁶⁷⁷·⁵⁶⁵⁰⁴⁷⁸²⁴⁶⁴⁵⁵⁷⁶·⁸⁷⁶⁴⁸⁶⁵⁵⁸³⁵⁴⁴²⁷·⁸¹⁸⁸⁵:⁸⁶⁷:⁴²⁵⁰⁵′⁷'⁸⁶⁶⁶⁶⁵⁵⁸⁷⁵⁶⁹⁶⁸³′⁵⁰³′⁵·⁵⁰⁵⁶⁶¹⁷,³,⁵:⁴⁵⁷′⁷⁰⁶·⁷,⁸⁸⁵⁶⁷·⁶⁰⁴⁴⁶¹⁷⁷⁸⁵³,⁵²⁶⁰⁶³⁷⁶⁷'⁶⁸⁴⁸⁵⁶⁴⁴³′⁵⁰⁴⁹⁷⁴⁵⁷⁸⁰⁴⁵⁴⁴⁴⁵⁸⁹⁵⁴⁷⁶⁶⁴⁶⁰⁷⁷⁵‽⁶²⁷⁹⁷:⁵,⁸³⁷⁹⁷′⁶·⁷⁵⁶⁸⁵·⁵⁴⁵⁸⁴⁹⁶¹⁵³⁵·⁷⁴⁷⁰⁴¹⁸¹⁸⁵⁴⁰⁸³⁴²⁶⁹⁷·⁶³⁷′⁶¹⁶¹⁴¹⁵,⁶·⁶⁹³′⁷′⁴²³′⁷⁷⁶²⁵‽⁶⁵⁶·⁴³⁴³⁷³⁷⁷⁸⁶⁵·⁴⁸⁵⁵⁶³⁷⁷⁷·⁶⁷⁵⁴⁷²⁵³⁷³⁸⁸⁵³⁶⁷⁷'⁷·⁸·⁵·⁵⁰⁵³⁸⁰⁷,⁴⁰⁴⁶⁵′⁶⁸⁴²⁵³⁴⁴⁴⁴⁸·⁵²⁷³⁷⁶⁵·⁶²⁸⁶⁷,⁶·⁶⁷⁶³⁴⁶⁷⁴⁶³⁵⁰⁵³⁷⁴⁵⁰⁶⁶⁷⁶⁸⁴⁸⁴⁶⁷⁶⁰⁶²⁵⁷⁸⁴⁷⁰⁷⁵⁵⁹⁶³⁷:⁵⁹⁴²⁶·⁸⁶⁷′⁵'⁶⁷⁵²⁵²⁸¹⁴³⁸⁷⁷⁸⁷⁸⁴⁵³′⁷³⁷·⁸²⁸·⁴⁰⁴¹⁴⁶⁸·⁸⁰⁵²⁸⁵⁴⁵⁸·⁷²⁷⁶⁷'⁸⁰⁷³⁸¹⁶³⁶⁸⁷⁶⁵‽⁸⁹⁵′⁶⁸⁷²⁵′⁷,⁴³⁶³⁵:³′⁸⁵⁴³⁴⁶⁴¹⁵·⁶⁰⁷⁸⁸⁵⁶²⁸⁵⁸⁷⁵'⁴⁹⁶⁹⁷′⁸⁹⁷,⁴⁹⁴¹⁶·⁷,⁴¹⁵‽⁷⁹⁴⁷⁵³⁷⁸⁷·⁴⁹⁷²⁸⁸⁵⁵⁵⁴⁴³⁷′⁵⁰⁷⁶⁶¹⁷,⁸⁵³,⁸⁷⁶⁷⁵²⁷′⁷³⁷²⁵′⁵⁹⁷⁷³,⁴³⁴⁸⁸⁶⁷:⁷,⁶·⁶⁵⁶³⁸⁷⁵³⁷⁰⁸⁹⁷⁹⁴⁹⁶⁴⁷⁴⁶⁷⁸⁵⁵⁴⁸⁸⁷⁹⁵⁰⁸⁸⁶²⁷³⁴⁴⁴⁷⁶⁷⁷⁷⁵⁷⁷⁵⁷⁷⁷,⁷'³,⁴³⁵²⁴⁰⁷³⁷⁹⁷⁰⁶⁰⁸⁶⁶·⁵,⁸⁴⁵⁰⁷‽⁷³⁶²⁸¹⁴⁷⁸²³′⁵:⁵⁴³′⁷³⁶⁷⁷′⁶·⁷,⁶⁰⁸⁰⁵·⁷⁰³′⁶⁶⁸⁴⁸³⁸·⁵⁰⁶⁰⁶¹⁷:⁶⁷⁶⁶⁸¹⁷⁷⁷⁸⁸⁴⁴⁰⁷⁵⁷⁸⁴⁸⁵⁷³,⁵⁷⁸⁶⁶⁸⁴⁴³′⁵·⁵⁹⁵⁰⁵‽⁵:⁷³⁷⁰³′⁸³⁵³⁴⁵⁸⁸⁴⁷⁷⁶⁶⁰⁷⁶⁵‽⁴³⁶⁶⁶³⁵,⁷⁰⁶⁵⁷:⁷⁴⁶⁴⁶⁴⁵:⁵,⁵⁷⁵⁷⁵⁷⁷′⁶³⁸²⁵'⁴¹⁵:⁶¹⁵′⁵‽⁶⁷⁸⁶⁷³⁸⁷⁵⁸⁶⁴⁵⁶⁵⁹⁵²⁴⁶⁵²⁷'⁷:⁷⁸⁷⁴⁵³⁴¹³′⁸⁵⁶²⁷′⁷⁰⁴⁶⁷′⁸·⁷‽⁶⁴⁵·⁸⁵⁷⁷⁷⁶⁴⁰⁸⁹⁷·⁶⁷⁷⁹⁷²⁷·³′⁸⁶⁷³⁸⁹⁵:⁵²⁸⁴⁴⁰⁵:⁶²⁸⁰⁴¹⁵⁷⁷²⁸⁷⁵:⁷‽⁶⁰⁵′⁶³⁴⁷⁵‽⁶·⁸⁸⁷⁵⁴²⁷,⁸·⁸⁷⁷⁵⁷:⁷⁸⁴⁴³,⁴⁵⁵⁹⁴³⁵·⁷⁴⁴⁵⁶⁴⁵⁶⁸⁵⁵,⁶⁵⁶⁷⁷⁶⁵⁰⁷⁶⁷′⁷'⁵⁴⁷‽⁸⁴⁶·⁷²⁸²⁷⁴⁷′⁶⁴⁷⁷⁴⁸⁶¹⁷⁸⁴⁶⁴⁴⁵⁷⁸⁴⁶⁹⁷'⁷⁸⁶⁶⁷⁷⁶¹⁴³⁷²⁵⁵⁶¹⁸³⁷‽⁵⁰⁵'⁴⁵⁴⁹⁵⁴³,⁵²⁵·⁶⁰⁴⁵⁷:⁷²⁸²⁵⁶⁴¹⁵²⁵³⁷‽⁵⁷⁴¹⁵′⁶³⁶⁷⁷′⁴⁴⁵⁷⁵⁹⁸⁵³,⁵⁵⁶⁵⁵⁷⁷⁹⁶⁵⁴⁶⁷,⁵³⁴⁴⁵‽⁸¹⁸·⁷²⁵′⁸¹⁷⁹⁷⁸⁷⁰⁶·⁴⁴⁵⁶⁷:⁵⁹⁵²⁸⁶⁷⁷⁶⁹⁸⁰⁵:⁸·⁸⁴⁸⁰⁵⁷⁸²⁷′⁴²⁶⁸⁵⁸⁴²⁷⁵⁴⁶⁴⁵⁴⁷⁵:³′⁴⁶⁴⁵⁴⁸⁶¹⁵:⁷‽⁷⁸⁷⁴⁸⁷⁷⁹³,⁷'⁴⁹⁶⁴⁸⁹⁴²⁵‽⁵⁰⁶³⁶⁷⁵⁵⁴⁶⁵⁶⁵⁶⁵⁷⁷⁸⁸³⁶⁹⁵:⁷³⁶⁹⁸¹⁶⁴⁵‽⁴⁶⁷⁶⁴⁷⁸⁴⁴⁵⁴⁵⁷·⁷,⁷³⁵⁹⁶·⁵⁰⁷⁶⁵:⁴⁵⁸⁵⁴⁹⁸¹⁷,⁸³⁷⁶⁴⁴⁸⁶⁸³⁸¹⁸·⁵⁰⁴²⁸³⁶⁶⁸³⁵³⁵⁵⁶⁹⁴³⁷³⁶²⁷‽⁵′⁸⁷⁴⁸⁵⁷⁷⁵⁴³⁸¹⁶²⁴⁰⁴⁸⁵³⁴²⁸¹⁷⁸⁴⁸⁵²⁷²⁵²⁷⁰⁴⁷⁷⁴⁸³⁷‽⁷⁰⁶⁹⁴⁸⁷²⁷⁷⁶⁶⁸⁶⁵,⁵⁰⁷⁷⁵⁹⁷‽⁷,⁸¹⁷²⁶⁹⁸⁵⁵'⁸⁶⁸¹⁶¹⁷²⁸⁶⁵:⁶⁶⁷′⁴⁶⁶⁷⁶³⁴⁹⁶⁵⁸⁰⁵:⁷³⁷·³,⁷'⁷⁷⁶⁴⁵³⁵·⁴⁷⁶⁰⁶⁸⁵⁵⁷⁸⁸⁴⁶⁶⁵⁰⁷‽⁴⁶⁸⁶⁷·⁵²⁸⁵⁴⁷⁵⁹⁸¹⁴¹⁶·⁵⁶⁶⁹⁸·⁵⁰⁴¹⁷⁵⁷⁰⁵⁰⁷⁷⁶·⁸¹⁴¹⁷,⁴⁴⁵⁷⁷′⁶⁴⁵³⁷⁷⁶⁵⁸³⁴⁵⁵²⁵⁶⁸³⁷⁷⁵'⁶¹⁶¹⁵'⁴⁵⁵⁹⁸⁹⁸⁶⁶⁹⁶⁶⁵⁰⁷⁴⁸²⁷⁵⁷²⁷⁶⁵²⁵⁹⁵⁶⁶⁷⁴³⁴⁷⁸⁶⁵³⁶⁹⁷²⁴⁹⁷,⁷'⁷:⁵'⁷⁴⁸⁰⁵⁴⁷‽³,⁴⁹⁵⁸³,⁷⁸⁴⁷⁵‽³,⁶⁶⁵‽⁶²⁷⁸⁵⁷⁷⁴⁸·⁸⁹⁴³⁷⁶⁴⁰⁸⁴⁷⁶⁷⁹⁶⁶⁸³⁴³⁴⁸⁷·⁴⁸⁵‽⁵:⁵²⁵′⁴⁰⁷⁹³,⁴¹⁵,⁵⁵⁸⁸⁵,⁸⁵⁷'⁶¹⁶⁷⁵⁷⁸⁵⁸⁸⁵²⁵·⁷'⁶¹⁶⁴⁶⁷⁸⁹⁵⁴⁷,⁶⁸⁸⁷⁵·⁷:⁶¹⁶³⁴⁶⁵‽⁶³⁵‽⁵⁷⁸³⁷⁷³,⁵⁰⁸⁶⁴³⁵·⁷⁵⁵²⁵·⁴⁶⁵,⁶⁵⁸⁰⁷⁸⁵‽⁴³⁵⁹⁵‽⁵‽⁸⁰⁷⁸⁷⁶⁷‽⁷³⁸⁸⁷⁰⁷·⁴⁹⁷⁹³′⁵:⁶⁵⁷⁴⁸⁴⁶⁴⁴⁵⁵'⁷⁹⁵'⁸⁴⁷·⁵⁵⁷³⁴⁴⁵³⁵'⁴⁹⁵⁸⁶³⁷·⁶¹⁷'⁸⁵⁴⁶⁴⁷⁵‽⁵⁰⁶⁷⁷⁴⁶²⁸⁵⁴³⁷′⁷,⁵⁹⁷:⁵‽³′⁸⁰⁵⁷⁵,⁶⁵⁵′⁵⁴⁴⁷⁴⁸⁸⁹⁵⁸⁷′⁷⁷⁶⁷⁸⁶⁴⁸⁸⁵⁶⁶⁸⁶⁶⁷⁵⁷⁵⁵⁷⁰⁴⁰⁴⁵⁸¹⁴³⁸⁴⁵⁷⁴⁹⁶¹⁷⁴⁶⁴⁴⁶⁴³⁷⁰⁸⁴⁷⁰⁵⁶⁸⁶³,⁵³⁷·⁴³⁵²⁸⁵⁵⁰⁶⁸⁷⁹⁴⁷⁸¹⁸⁴⁷‽⁵⁷⁶⁶⁷⁰⁶³⁵⁴⁷⁸⁸⁶⁸·³,⁷·⁵·⁴³⁶⁷⁵⁷⁶⁸³,⁵⁰⁸⁹⁵⁴⁷⁴⁵⁹⁵⁶⁴⁰⁷³⁶⁶⁸⁵⁶⁸⁵:⁸¹⁷⁶⁸⁷⁷'⁷'⁴²⁶⁷⁶⁹⁸·³′⁸²⁵,⁶⁴⁴⁰⁵⁶⁵³⁸³³′⁷′⁵⁸⁷⁷⁷²⁴⁰⁷²⁵⁷⁷⁶⁷·⁵⁰⁷⁹³,⁵⁴⁵⁰⁷'⁷⁶⁴³⁶²⁶⁹⁵⁵⁵³⁶⁹⁴⁷⁷⁵⁵·⁴⁶⁵²⁵‽⁸¹⁸·⁴¹⁴¹⁶⁸⁷³⁵′⁵⁴⁵⁸⁴⁷⁴⁴⁵⁷⁴⁹⁸⁸⁶⁷⁴⁸⁸⁷⁵'⁵⁴⁸⁸⁸⁷⁸¹⁸⁸⁴⁵⁷'⁶⁷⁶⁹⁶⁴⁷⁷⁸⁸⁵⁴⁸⁸⁵,⁸⁷⁷²⁵⁰⁵²⁸⁴⁶⁸⁷:⁷‽⁶⁶⁶¹⁶⁰⁵:³′⁶¹⁷:⁸⁵⁸⁵⁷⁵⁴⁸⁴⁸⁶²⁵³⁵²⁵³⁴⁴⁴⁶⁶³⁵⁵⁸⁴⁶⁴⁸⁰⁴⁵⁵⁴⁸³⁸¹⁵⁸⁷·⁶⁴⁶·⁵,⁷'⁷:⁵⁷⁵′⁵³⁷:⁴⁷⁵⁷⁸⁴⁷,⁸⁹⁴⁷⁷'⁸⁶⁶⁸⁷′⁸⁴⁴²⁵³⁴⁷⁵'⁵⁸⁴¹⁸²⁸⁴⁸¹⁸⁵⁴⁸⁷,⁵,⁶²⁵⁸⁷,⁷⁷⁸²⁴¹⁷·³′⁸⁰³′⁶⁶⁶³⁶⁵⁵‽⁷:⁴⁶⁸²⁴⁰⁴⁸⁶⁰⁸³⁸·⁴⁹⁴³⁷⁶⁸⁶⁵²⁸⁰³′⁷⁹⁷³⁵⁴⁴⁸⁵⁵⁸¹⁷⁷³,⁸⁸⁸¹⁵⁴⁷⁰⁵,⁴⁵³′⁷,⁷⁷⁶⁴⁴²⁸⁸⁵⁶⁸⁴⁵·⁴⁷⁷·⁴⁶⁵:⁷′⁶·⁵⁸⁷:⁵⁸⁵⁹⁷²⁷³⁷′⁷·⁶⁰⁵⁵⁸²⁷⁸⁸⁶⁴⁵⁷³⁷:⁷‽⁶⁹⁵²⁵:⁸¹⁵'⁸³⁸⁹⁵′⁶⁶⁸·⁵⁶⁶¹⁵⁹⁷⁷⁸⁶³′⁴¹⁸⁵⁵⁹⁷‽⁸¹⁸⁷³′⁷⁰⁴¹⁴⁶⁶⁴⁵:⁵:⁷⁴⁵'⁷⁵⁵⁸⁵:⁵⁸⁷:⁵'⁴³⁶·⁷:³′⁵³⁶⁴⁶⁹⁶⁰⁸⁵⁴⁸⁷⁷⁵⁴⁵⁰⁴¹⁴⁹⁵⁸⁸⁰⁴⁶⁴⁷⁴³⁷'⁸·⁴⁸⁶⁶⁴⁸⁴⁸⁷'⁸·⁸⁰⁷⁶⁶¹⁴⁷⁶¹⁶⁰⁵⁵⁸²⁴¹⁸⁰⁸⁹⁸⁹⁵⁹⁶·⁶¹⁶⁸⁵⁰⁴⁶⁴¹⁷⁸⁵⁹⁶²⁵⁴⁸⁵⁴⁴⁷‽⁶⁷⁷²⁵′⁵⁸⁴⁴⁷²⁵⁴⁵·⁵·⁶⁶⁷⁶⁸¹⁶⁷⁷,⁷²⁷‽⁴⁴⁷⁴⁵²⁸⁴⁷⁷⁸⁹⁷²⁴⁵⁵⁶⁸·⁵⁷⁵⁷⁷′⁷²⁷⁷⁴²³,⁷·⁷⁹⁵⁵³,⁵³⁸⁵⁵′⁵⁷⁶⁸⁵⁴⁶¹⁷·⁸⁷⁷⁶⁴³⁵'⁵:⁸⁹⁴³⁶⁹⁸·⁴⁹⁵′³,⁵⁴⁵,³,⁶⁰⁵'⁴⁵⁸⁸⁷‽³′⁷⁹⁷⁹⁵²⁵⁶⁸⁸⁵'⁵,⁶⁶⁶⁰⁴⁹⁵⁸⁶⁰⁵·⁷²⁷:⁴⁴⁶⁹⁷⁹⁸⁷⁶⁷⁸⁷⁷‽⁴⁴⁴⁵⁵'⁷⁶⁵'⁶⁷⁶⁸⁵⁴⁵′⁴⁰³,³′⁵,⁵⁰⁷⁶⁸³³,⁴⁹⁶²⁶⁸³,⁵⁰⁸·⁶⁷⁵⁰³,⁶⁷⁴⁷⁷²⁵'⁷⁰⁴¹⁷⁹⁵²⁵‽⁶⁴⁵‽⁶⁴³,⁷·⁸⁴⁷⁰⁷³⁵,⁸³⁴⁹⁴⁶⁵⁰⁷⁶⁴⁵⁸⁵⁵⁰⁷⁷⁵·⁸⁵⁷‽⁵³⁵³⁵·⁴⁰⁸⁰⁸⁰⁷⁴⁶⁰⁸⁵⁶·⁵⁵⁴⁹⁷²⁴⁷⁶³⁴³³,⁷²⁸⁶⁵⁹⁵⁵⁵³⁶²⁴⁶⁸⁷⁶⁵⁵⁸⁴¹⁶⁴⁵⁹⁵⁵⁷⁵⁷²⁶⁶⁵⁰⁷⁹⁶⁹⁴⁸⁴⁹⁶⁸⁵³⁶·⁵⁶⁸⁵⁵³⁶⁸⁴⁰⁵‽⁵⁴⁷'⁴³⁵:⁸⁴⁴³⁷²⁶⁶⁵·⁸⁷⁶³⁷⁰⁴⁰⁴¹⁷⁸⁵'⁵⁰⁶⁵⁴¹⁷‽⁴⁶⁵⁵⁷⁷⁷⁶³′⁶³⁴¹⁴³⁷‽⁵⁹⁵,⁴⁷⁸⁹⁷²⁶⁶⁶¹⁵⁵⁸⁵⁶⁴⁵'⁸¹⁵²⁵⁴⁴³⁶⁹⁷³⁸³⁵⁵⁶²³,⁴⁵⁶⁴⁶¹⁶⁰⁸·⁴⁴⁴⁵⁷,⁵⁰⁷,⁴⁴⁶²⁷'⁷′⁸⁴⁵⁶⁸²⁸⁷⁶⁶⁴⁵⁶⁸⁷‽⁷⁹⁵,³,⁵⁴³,⁷⁸⁵⁵⁷‽⁶¹⁶⁰⁷⁷⁶¹⁵⁵³′⁸⁴⁴⁷⁶⁴⁶⁷⁵·⁴⁸⁶⁰⁸·⁸⁶⁶⁴⁴²⁵⁶⁴³⁵³⁵³⁵⁷⁵³⁴⁹⁶⁷⁶²⁴¹⁷²⁵⁴⁷³⁵⁷⁶¹⁸⁴⁷³³,⁵⁶⁶⁰⁵⁰⁶⁴⁵'⁵⁷⁴⁶⁴⁷⁴⁶⁶⁵⁵²⁷³⁴⁴⁸⁸⁴⁴⁵′⁶⁵⁴⁵⁵′⁷⁰⁸⁶⁵⁶⁸⁶⁵³⁸⁶⁵:⁴⁵⁶⁸⁶¹⁵,⁵⁸³,⁷,⁵⁷³′⁴⁷⁵'⁵²⁵⁶⁵‽⁷⁰³′⁵'⁶⁷⁶⁷⁴⁸⁵⁹⁶⁴⁸⁶⁴²⁷⁸⁷‽⁷⁷⁴⁵⁶·⁴⁵⁷,⁴²⁸²⁸³⁷²⁷⁴⁴⁵⁵⁸⁴⁹⁷‽⁶⁶⁷‽⁶³⁶⁴⁸⁶⁵·⁶⁰⁶⁰³,⁸¹⁵⁷⁷,⁷⁹⁷⁰⁴⁵⁸⁰⁸⁸⁷‽⁴¹⁶¹⁸⁹⁵⁶⁸⁴⁶⁵⁴⁸⁸³⁵⁵⁴⁷⁸⁶⁴⁹⁸³⁵⁹⁵′⁷⁵⁵⁴⁸⁸⁴⁹⁵³⁸⁸⁷:⁷³⁸⁹⁵'⁸⁹⁴¹⁴⁰⁸·⁸³⁵⁶⁶⁸⁸²⁷′⁵⁷⁸⁶⁸²⁵⁶⁷‽⁸¹⁸⁰⁷⁸⁷:⁴¹⁴³⁵²⁴⁷⁷,⁶⁴⁴⁸⁵:⁷⁰⁶⁰⁵⁷⁷·⁷³⁴⁹⁴³⁵⁶⁶⁴⁷,⁸⁶⁶⁶⁷,⁴⁴⁵:⁴⁷⁵′⁶²⁴⁹⁵⁵⁵²⁸⁵⁷'⁶³³,⁴⁷⁷⁴⁷³⁶⁵⁸¹⁷⁹⁶¹⁸⁹⁵²⁶⁷⁵⁹⁶⁶⁷‽⁴¹⁶·⁶⁶⁴⁴³′⁷′⁶¹⁴²³,⁸⁹⁶⁸⁴¹⁴²⁵⁹⁶⁷⁷⁵⁷′⁷⁵⁸⁶⁶⁸⁴²⁸⁹⁸¹⁶⁹⁸³⁵⁷⁷⁵⁸⁸⁵⁶⁴⁴⁸⁹⁷⁰⁸⁸⁶·⁸⁰⁷⁶⁸³⁶²⁴¹⁷:⁸⁸⁶⁹⁶⁷⁵'⁸²⁵⁶⁶⁶⁴⁴⁸⁴⁷'⁴⁶⁴⁹⁷'⁸³⁶⁹⁶⁵⁸⁶⁴¹⁸⁹⁴⁰⁶³⁸·⁷′⁷⁵⁶·⁸⁵⁶⁵⁶⁹⁶⁴⁸¹⁸²⁸⁰⁸⁹⁷′⁸⁴⁶³⁶⁹⁷'⁶⁴⁴⁸⁵⁹⁸⁵⁸⁵⁸¹⁶·⁸⁷⁵⁵⁴⁰⁷²⁵′⁴⁸³,⁷⁸⁷:⁷:³,⁴¹⁴⁷⁵⁹⁷‽⁵‽⁷⁵⁸²⁵⁶⁶⁷³,⁵,⁷‽⁷:⁵³⁴⁸⁷‽⁶⁶⁷‽⁴³³′⁷:⁶·³′⁴²⁶⁰⁶⁶⁵³⁵⁶⁴⁰⁸⁰⁴⁰⁸²⁵⁹⁴⁰⁷‽⁶⁷⁵⁴⁵⁰⁷:⁴⁸⁵,⁷⁷⁷²⁵²⁵,⁸⁵⁸¹⁵⁶⁷⁷⁸⁵⁵³⁸⁶⁷⁸⁵‽⁵'⁶⁹⁸⁰⁴²⁶⁵⁴³⁸⁰⁵⁸⁵'⁵⁴⁵,⁴⁴⁷·⁷,⁸²⁸⁸⁴⁴⁶·⁵⁴⁵⁵⁷,⁷⁰⁸⁰⁵'⁴⁷⁷′⁶⁴⁸⁴⁷‽⁷·⁷⁹⁸⁴⁶⁷⁶⁸⁵⁶⁵⁶⁵:⁶¹⁴⁵⁴⁴⁶·⁸³⁴³⁴⁰⁶⁰⁵⁰⁷'⁶⁷⁷⁵⁵⁵⁴¹⁵²⁴⁴⁸·⁶⁵⁷·⁵²⁶⁸⁷⁰⁷⁶⁷⁹⁷·⁶²⁷′⁸⁸⁵⁵⁴²⁶⁸⁷'⁶·⁵'⁴⁹⁵⁹⁴⁴⁸⁹⁷‽⁷⁶⁷³⁵³⁸²⁷²⁵⁰⁵³⁴²⁴³⁷²⁷⁵⁶⁹⁸⁹⁶⁴⁷⁷⁵‽⁴²⁷³⁵³⁸¹⁵⁸⁴⁵⁷⁷⁵,⁶¹⁵:⁸⁹⁵′⁸⁰⁷⁴⁶³⁷⁸³′⁷′⁷⁹⁷⁷⁶⁰⁷⁷⁶⁷⁸⁸⁴²⁴⁶⁷·⁵'⁵²⁵³⁴⁵⁴⁷⁷·⁸·⁷⁷⁵,⁶²⁸⁰⁸·⁷⁹⁷'⁷⁶⁸¹⁵²⁷⁵⁷⁷⁷′⁶⁸⁷‽⁴¹⁷·⁴⁶⁴⁰⁶³³,⁷⁵⁴²⁸⁹⁷⁹⁷,⁶⁴⁸⁵⁸⁵⁵·⁴⁷⁴⁷⁷′⁵⁴⁸⁷⁵⁶⁴⁰⁴⁴⁷⁷⁷⁹⁷,⁷⁷⁸·⁵⁰⁵⁸⁷:⁵⁸⁶·⁸⁹⁵⁸⁶¹⁶⁴⁵⁹⁷'⁷·⁸³⁷⁸⁶⁹⁶²⁸⁶⁷⁸⁴²⁷:⁷³⁸¹⁸⁷⁷⁶⁴⁷⁵·⁴¹⁵·⁸³⁷⁵⁸³⁸⁷⁷·⁶¹⁶⁹⁷,⁷⁰³,⁷⁶⁸³⁵⁰⁴¹⁴⁶⁸⁸⁵⁸⁸⁹⁴²⁷‽⁴⁶⁵⁴⁵′⁸⁰⁵⁶⁸⁷⁴⁸⁵⁹⁸⁴⁷⁸⁷·⁴¹⁷⁷⁶⁵⁵²³,⁶³⁶⁸⁴⁹⁸¹⁵′⁷⁷⁶¹⁷′⁵:³′⁸⁸⁸·⁴⁰⁵:⁸³³,⁵⁸⁶⁵⁶·⁴²⁸⁴⁵⁷⁸⁰⁵′⁵,⁵⁴⁷⁴⁶⁷⁷⁷⁵‽⁵,⁶⁹⁷⁹³′⁷:⁴⁰⁷,⁴⁷⁸²⁸²⁷′⁸·⁴⁸⁵'⁷,⁵‽⁷⁹⁵²⁶⁸⁷,⁵‽⁵⁰³′⁶·⁸⁵⁵³⁵·⁷‽⁷,⁴⁵⁶⁶⁷'⁷⁵⁸⁴⁴⁹⁵′⁸⁹⁸·⁸¹⁷'⁷′⁶⁷⁷·⁵⁰⁴²⁵⁰⁵⁷⁷⁰⁴¹³,⁵‽⁸⁵⁴⁶⁴³⁷⁹⁶¹⁷⁴⁵‽⁵⁶³,⁵⁸⁸³⁶⁹⁶⁴⁵⁶³′⁷⁰⁵,⁷⁴⁷⁶⁴²⁷'⁶⁶⁷⁵⁶⁹⁴⁸⁴³³,⁸⁵⁵³⁷⁰⁴⁵⁵⁶⁵:⁵,⁵⁷⁴¹⁸⁸⁵⁷⁵⁹⁵³⁴⁹⁵⁸⁸⁶⁵⁶⁴⁶⁸⁴⁶⁹⁸¹⁴⁹⁷'⁴⁷⁴⁷⁶⁰⁶⁷⁸·⁴⁹⁷,⁴³⁴³⁶⁷⁸⁸⁵⁰⁴⁹⁶⁷⁷⁴⁵⁸⁴²⁷:⁷⁵⁷⁰⁷‽⁷·⁸⁵⁵⁶⁵′⁷⁸⁷·⁸³⁴⁴⁸⁷⁸·⁴⁵⁸⁵⁸⁴⁴⁰⁶⁶⁴⁹⁵·⁵‽⁶⁵⁶¹⁵⁵⁸⁶⁵⁶⁶¹⁷⁴⁷⁷⁵⁸⁷‽⁵'⁸⁸⁵:⁷,⁶⁶⁷·⁶⁹⁵,⁶⁴⁵:⁸⁶⁷·⁵'⁵²⁸²⁸⁴⁴⁵⁶⁷⁷⁷⁸⁸⁴³⁷:⁷⁹⁴⁶⁶¹⁵:⁷⁶⁸⁷⁶⁰⁷′⁵³⁶⁵⁸²⁶⁹⁸⁹⁶⁷⁴⁰⁴⁶³,⁷⁴⁷⁰⁴⁹⁵⁵⁷⁴⁶⁰⁵³⁴¹⁷⁰⁵'⁵′⁵′⁵'⁴⁷⁸⁶⁶⁹⁴⁰⁸·⁵⁹⁴⁰⁶⁷⁸⁰⁵⁴⁷,⁷'⁷⁵⁵′⁴⁴⁴³⁷‽⁶⁹⁴⁷⁵'⁴⁵⁵,⁸³⁷'⁴⁸⁴²⁶⁶⁸⁸⁶⁵⁶⁴⁴⁰⁵,⁶⁵⁷⁰⁶⁵⁴⁸⁴³⁷⁵³′⁶⁹⁷⁵⁸⁷⁶²⁷³⁵⁸⁵,⁷′⁶·⁷,⁴⁷⁶⁵⁴⁶⁷⁸⁴³⁶⁷⁵′⁷:⁵⁰⁸⁸⁶⁸⁵,⁵⁴³,⁷:⁵²⁸·⁶⁶⁶⁸⁸³⁷‽⁷:⁷'⁶³⁴³⁸⁰⁵²⁷⁰⁸⁸⁵,⁶¹⁸⁶⁸·⁷⁵⁵′⁶³⁷⁰⁵'⁶·⁵‽⁵²⁷²⁵⁴⁸²⁷⁴⁸¹⁵′⁸·⁷⁸³′⁵⁵⁷·⁵³⁶⁵⁷‽⁵·⁴⁹⁵⁷⁸⁹⁷⁵⁷⁷⁴³⁵²⁶¹⁵⁰⁴⁵⁵:⁵⁴⁷:⁸⁶⁸⁹⁵'⁵′⁴²⁴⁰⁴⁰⁶³⁶⁰⁷⁸⁵,⁷'⁴⁴⁶⁷⁵⁹⁸⁹⁸³⁷³⁵′⁷⁸⁵⁴⁶⁹⁵:⁵²⁸²⁴⁷⁵:⁴⁰⁵³⁶⁶⁴¹⁷⁹⁷‽⁷:⁷,⁶⁸⁸·⁴⁸⁵⁷⁵⁵⁷⁶⁶·⁷⁷⁶¹⁵·⁴⁰⁴³⁵⁵⁸⁸⁵‽³′⁵²⁶⁹⁶⁹⁵⁹⁸⁴⁴⁰⁶⁸⁴⁶⁴⁹⁶³⁸⁶⁴⁸⁴⁹³′⁴¹⁷³⁶⁰⁴⁷⁷⁷⁴⁸⁷⁸⁶·⁸⁰⁷⁵⁵‽⁶⁰⁴⁷⁴⁸⁴⁶⁵³⁷⁸⁷³⁵,⁵³⁴⁶⁸⁷⁷‽⁸³⁵⁵⁷'⁵:⁶⁵⁸⁶⁷·³′⁴⁵⁶⁶⁵⁷⁸⁹⁴²⁷‽⁶³⁸⁹⁷⁸⁶⁵⁵⁰⁵⁴⁵′⁶²⁴³⁸¹⁷‽⁵³⁵⁰⁷⁴⁷:⁵²⁶³⁸⁴⁷⁷⁸³³,⁸⁹⁸⁰⁶⁶⁷′⁵‽⁸²⁵'⁸⁵⁶⁹³′⁸³⁸⁶⁷²⁶²⁸·⁶¹⁷:⁸³⁸⁹⁸⁹⁵:³,⁵'⁷·⁵³⁵·³′⁷³⁸⁸⁶⁰⁵⁰⁷‽⁵⁹⁸⁹⁵⁰⁵⁰⁷⁹⁸³⁶⁴⁷⁶⁸¹⁶⁶⁸³⁴⁵⁵⁰⁷·⁷³⁶⁴⁷⁸⁷⁹⁷²⁴⁷⁶⁰⁵⁰⁵·⁵:⁶⁶⁵′⁸⁰⁷⁶⁵'⁵⁸⁷·⁸¹⁷'⁸⁴⁵³⁸¹⁶⁷⁸⁴⁵⁰⁷·⁴⁵⁶⁶⁶·⁶²⁷⁷⁸⁴⁵⁵⁷⁷⁶·⁸⁰⁸⁰⁷⁵⁷⁷⁵²⁷‽⁴⁶⁶⁷⁶⁷⁷′⁶⁰⁶¹⁷²⁶·⁵³⁷⁵⁸⁰³′⁸²⁸⁸⁶³⁴⁰⁴⁴⁷⁸⁶⁵⁷'⁴²⁷·⁵⁴⁶⁶⁶⁵⁴⁸⁶·⁸·⁸⁷⁶¹⁵²⁸⁹⁶¹⁸⁷⁵⁰⁵,⁸⁵⁴⁵⁴⁷⁷³⁶⁴⁷⁷⁷,⁷·⁵⁶⁸⁹⁷·⁵⁸⁵⁵⁸³⁷⁴⁸⁹⁴¹⁷'⁸⁶⁵³⁶³⁷·⁴³⁵⁸⁷,⁷⁸⁷⁴⁵⁸³,⁷⁷⁷′⁸⁰⁵⁹⁷·⁸⁸⁷,⁵·⁶⁹⁵²⁶⁹⁸⁶³,⁴³⁸⁰⁶²⁴⁸⁸⁷⁵⁷⁷²⁵⁰⁸⁴⁸⁰⁵:⁶¹⁶¹⁷⁴⁸⁶⁶⁴⁸⁵⁵'⁷⁰⁵⁷⁵,⁷⁸⁴⁵⁶¹⁷:⁶⁸⁶⁰⁵⁹⁶⁰⁷'⁴⁵⁷⁷⁷⁵⁶⁶⁵,⁷⁴⁸⁶⁸²⁸⁵⁵⁸⁵²⁷⁶⁷⁵⁶²⁴⁹⁵,⁵³⁷⁴⁷'⁸¹⁷²⁸⁷⁶⁸⁸⁸⁵:³′⁸⁷⁵⁷⁵²⁶¹⁶⁹⁴³⁴⁰³′⁸⁷⁷:⁵'⁷⁴⁸¹⁴⁶⁶⁴⁷⁸⁸⁴⁸⁷³,⁷³⁶⁷⁴⁰⁶³⁷'⁶⁶⁷⁶⁴¹⁵·⁶⁵⁷′⁷³⁶³⁶⁵⁵³⁷⁶⁵,⁴⁴⁵:⁵'⁶⁶⁷⁶⁸⁴⁷⁶³′⁶⁵⁵²⁸⁵⁷²⁶·⁸·⁷⁴⁵³⁶⁰⁸²⁵‽⁷'⁴¹⁵⁷⁸⁵⁶²⁵'⁴²⁵·⁵⁷⁵,⁵⁷⁷⁷⁸⁵⁴⁶⁶⁴⁶⁴⁶⁹⁵‽⁶·⁸⁰⁸²⁶⁷⁷⁹⁴⁶⁷²⁵'⁷⁹⁷²⁴⁸⁵⁰⁶²⁶⁷⁸⁷⁵:⁷‽⁷³⁵⁶⁷³⁷²⁷³⁵³⁶¹³′⁶⁴⁷,⁴³⁵‽⁵⁴⁴⁶⁸⁹⁸³⁴⁷⁶⁰⁷⁵⁵⁸⁵⁶⁶⁷⁷⁸⁵⁵⁶⁹⁷³⁵,⁷'⁸⁹⁷·⁸·⁸⁷⁶⁶⁵‽⁵⁴⁸⁴⁴³⁷⁵⁶⁸⁸⁰⁵'⁵⁴⁴⁴⁸⁷⁷³⁸⁸⁵,⁷′⁶²⁵′⁸¹⁶⁵⁶⁰⁶¹⁵⁹⁶⁵⁷⁷⁵⁶⁷²⁷²⁷,⁸⁶⁵·⁶⁰⁷:⁴⁴⁷⁸⁷⁹⁵³⁴³⁸⁰⁶⁰⁶·⁵⁹⁶⁵⁷⁷⁴⁵⁵′⁶⁷⁴⁸⁶³⁷²⁴⁸⁷'⁶⁵⁸⁷⁷⁷⁵³⁸⁵³′⁸⁷⁸⁹⁵,⁸³⁶⁶⁷'⁶³⁶¹⁸³⁷:⁵,⁶⁴⁵²⁶⁶⁵,⁷⁶⁵²⁷⁶⁴³⁴⁸⁶⁷⁶⁷⁶·³′⁵′⁴⁰³,⁵:⁷⁴⁸⁷⁷⁹⁷'⁵⁰⁵⁵³′⁵,⁵′⁷⁸³′⁷⁹⁵⁰⁷³⁶⁸⁶⁶⁶⁸⁷⁸⁵⁸⁵·⁶¹³′⁴⁷⁶⁹⁵⁷⁵‽⁷′⁷⁰⁴⁶⁶⁶⁷′³,⁴⁷⁵³⁴⁷⁴²⁶¹⁴¹⁵⁶⁶³⁶¹⁶⁷⁴⁵⁴⁷⁴¹⁴⁹⁵³⁵⁴⁶³⁷⁹⁷'⁶⁷⁴⁹⁸⁷³′⁴⁴⁵:⁷⁸⁸⁰⁶³⁸¹⁴¹⁷⁸⁵:³′⁷⁹³′⁴⁶⁷⁷⁵⁴⁵⁰⁵³⁸⁶⁶⁰⁸¹⁶⁹⁸⁵⁷'⁵'⁵·⁷⁸⁷⁸⁶⁹⁴⁶⁵⁶⁴⁴⁷³⁷⁹⁷′⁵⁸⁵⁹⁵⁰⁷³⁶⁵⁷⁸⁶¹⁶²⁷'⁵·⁷⁹⁵⁸⁴⁰⁶·⁸⁰⁴²⁶²⁶⁰⁴⁶⁷³⁸·⁵′³,⁸⁸⁴⁵⁷³⁷⁸⁴¹⁸³⁵³⁷'⁸¹⁶⁴⁵⁸⁷⁶⁴⁸⁷‽⁸³⁷,³,⁷‽⁷⁰⁵⁴⁵⁶⁷,⁶⁰³,⁵·⁶⁸⁴⁷⁵³⁷⁷⁵′⁴¹⁷‽⁸·³′⁷⁵⁵⁰⁴⁶⁴⁹⁵⁸⁴²⁵′⁶⁰⁷·⁵⁰⁴²⁵⁸⁵‽⁵⁰⁸⁹⁸·⁴⁰⁵⁰⁴³⁷²⁶⁹⁸¹⁴³⁵²⁴⁰⁶⁷⁸⁹⁵′⁸¹⁷⁸⁸⁵⁵⁶⁵⁵⁵³⁴⁹⁴⁹⁸²⁶³⁷³⁵·⁷:³,⁸⁶⁵⁸⁸⁹⁶⁴⁸¹⁵⁰⁷:⁴⁴⁸⁰⁶⁵⁶⁵⁴¹⁶²⁵‽⁸¹⁷′⁷:⁴¹⁸⁸⁸⁵⁵⁵⁴²⁴⁵⁸²³′³,⁷⁶⁵²⁷·⁴⁴⁷:⁷·⁷⁰⁷,⁶²⁷′⁷'⁸⁵⁵'⁸¹⁵³⁵³⁷⁶⁶⁵⁷‽⁵'⁸⁰⁶⁰⁵⁵⁴⁵⁴⁹⁷²⁶²⁴⁸⁸⁵⁷⁵⁶⁵⁸⁹⁴⁹⁷,⁸⁶⁶¹⁷'⁵⁰⁴⁸⁴³⁶⁶⁶⁴⁸⁹⁷³⁷⁸⁶²⁸⁸⁴⁶⁴⁹⁶⁸⁴³⁵⁵⁶²⁶⁹⁷:⁷⁷⁷'⁸⁴³,⁷⁶⁸⁶⁶⁵⁵‽⁶⁵⁷⁰⁸⁷⁷,⁷³⁵,³′⁷⁷⁷'⁶·⁵⁷⁵,⁷⁹⁵³⁵:³′⁶⁴⁶³⁵⁸⁸⁶⁴⁶⁷²⁴⁴⁶⁴⁶⁹⁷,⁸⁰⁶⁶⁷⁶⁵‽⁴⁸⁶³⁸·⁶²⁵,⁶³⁸⁹⁶⁴⁸³⁴⁰⁷⁰⁶⁸⁶³⁴⁶⁸⁰⁵⁷⁶⁶⁶⁶⁶⁷⁵'⁷:⁷:⁶·⁶⁵⁸⁹⁷⁷⁵⁹⁸⁶⁵⁷⁷⁸⁸·⁸¹⁵⁶⁷²⁵‽⁷⁷⁴⁶⁵′⁵⁴⁶⁸⁶⁴⁷⁹⁵²⁵²⁸⁶⁴⁰⁴⁴⁸¹⁶⁹⁴⁴⁴³⁴⁰⁷,⁵′⁵⁶⁵⁶⁵⁴⁷⁴⁶⁸⁵²⁶²⁷′⁸⁸⁸³⁶⁴⁶¹⁶²⁵:⁷³⁷⁹⁷⁹⁸⁹⁵′³,⁸·³′⁸⁸⁷'⁸⁹⁵⁵⁶²⁸²⁶·⁸⁸⁷′⁷·⁶⁸⁸³⁸⁰⁷⁶⁴⁰⁶⁰⁴²⁴³⁶·⁵³⁷:⁷⁵⁸⁷⁸⁵⁷⁷⁷⁵⁶⁸⁸⁷⁴⁴⁷,⁵⁶⁷⁹⁸³⁷⁰⁶³⁶³⁶³⁸⁶⁶⁶⁵³⁴⁰⁵:⁴⁹⁴²⁸³⁸⁴⁵,⁷·⁵⁴⁵⁷⁶⁹⁵⁸⁵‽⁷·⁶⁹⁴³⁴⁴⁴⁶⁶⁸⁵⁵⁵⁰⁴²⁸¹⁵·⁵⁸⁷·⁸³⁵′⁷:⁷⁹⁸²⁶⁵⁷⁹⁴⁸⁴⁸⁵⁸⁶⁷⁵'⁴²⁵⁴⁶⁹⁸⁰⁴⁸⁴⁵⁵⁹⁴²⁴⁰⁶⁸⁶⁶⁵′⁵⁶⁶⁹⁷²⁶⁸⁷,⁵:⁴⁵⁶·⁷⁸⁵⁴⁸·⁷⁰⁵³⁴⁹⁷,⁷⁴⁵:⁶⁷⁶⁷⁶⁸⁷,⁷⁷⁷⁹⁸⁴⁵⁴⁷′³′⁷′⁴⁶⁷⁰⁷⁹⁴⁵⁴⁵⁵,⁴²⁶⁵³,⁶⁰⁷·⁵⁷⁷⁶⁸⁸⁵⁹⁷⁸⁵²⁷·⁷²⁴¹⁵⁷⁵⁴⁸¹⁶·⁴⁸⁵⁷⁵³⁵′⁴⁰⁷²⁸⁰⁷'⁵⁹⁴⁷⁶⁵⁷⁵⁸⁹⁸⁷⁷⁴⁶⁰⁵′⁷⁶⁸⁸⁶³⁴⁵⁷·⁷‽⁴⁰⁵⁶⁴⁶⁷⁵⁶⁵⁵⁸⁴⁶⁶⁵⁵'⁶·⁴⁹⁵⁸⁵:⁵²⁴²⁷⁷⁵:⁷,⁵'⁷⁸⁵²⁷·⁴⁹⁸⁵⁵⁵⁸·⁸³⁴⁸⁸⁴⁷⁹⁶⁴⁸⁸⁴⁴³,⁶³⁷⁸⁵⁰⁵²⁸·⁵⁸⁷,⁷⁶⁸⁴⁵·⁸¹⁵⁵⁴⁰⁵⁰⁷⁷⁶⁶⁵⁵⁴¹⁷⁶⁶²⁸⁶⁴³⁷⁰⁷'⁶⁴⁸·⁷⁵⁵′⁸⁴⁷⁷⁵⁷⁸⁸⁸⁶⁴¹⁵:⁵⁷³′⁵′⁵'⁷³⁶⁹⁷‽⁵⁴⁴⁶⁵‽⁷:⁵,⁷²⁷⁸⁶³⁴⁷⁸²⁷²⁸²⁷⁸⁸·⁷²⁶⁴⁷⁰⁸⁰⁵⁹⁶⁶⁵⁸⁴⁴⁴¹⁴³⁸⁵⁸⁵⁴⁹⁵⁷⁵·⁸⁸⁷′⁸⁹⁵⁵⁷⁵⁷³⁶¹⁷⁰⁸¹⁷⁸⁷⁵⁴³⁷⁹⁴⁷⁴¹⁷′⁴⁴⁵⁹⁵⁴⁸⁷⁶³⁷³⁵⁶⁷′⁸¹⁵⁶⁶⁸⁶·⁴⁹⁵⁹⁴⁰⁸⁴⁷·⁸⁶⁴²⁴⁶⁷:⁴⁷⁴⁵⁶¹⁴⁰⁸⁹⁸³³,⁷′⁶⁷⁷,⁷⁶⁶³⁴⁴⁸²⁵,⁷·⁵⁷⁷⁹⁷⁵⁸⁸⁴⁹⁶⁴⁷⁸⁶⁸⁷·⁶⁰³,⁸³⁴⁹⁵,⁷⁶⁸⁰⁸⁶⁵′⁵,⁵·⁵³⁶⁵⁷:⁵·⁵³⁵′⁷·⁸⁷⁷⁴⁴⁶⁶·⁷⁹⁸¹⁵'⁴¹⁷‽⁷′⁶¹⁵:⁵⁵⁴⁶⁷⁷⁵'⁷·⁴³⁸¹⁵⁰⁵⁸⁶²⁸⁸⁴⁷⁵⁸⁸·⁵⁰⁸⁹⁶³⁷⁵⁵⁵⁸⁹³,⁶⁷⁴²⁸³⁶⁶⁶⁹⁷:⁶⁸⁴¹⁸⁰⁶⁴⁴⁰⁴⁶⁴⁷⁸²⁶²⁶⁶⁵²⁷²⁵·⁷′⁶¹⁷⁸⁷′⁸²⁷⁶⁶⁰⁵‽⁶⁶⁷⁰⁵'⁸⁹⁷²⁵·⁶⁴⁶⁴⁵⁸³′⁷⁰⁶⁵⁵⁸⁸⁸⁷⁷⁷⁴⁷:⁵⁴⁵'⁵⁹⁵,⁸³³′⁵'⁴²⁵²⁵⁸⁴²⁷'⁷⁹⁴¹⁷‽⁶³⁵⁴⁶⁹⁸²⁸⁹⁵³⁷,⁶⁸⁶⁰⁸⁰⁴⁵⁵⁶⁴²⁶³⁴⁹⁴³⁶⁵⁸⁹⁷⁸⁸⁶⁴⁸⁴²⁷′⁸¹⁷⁸⁵⁴⁵⁰⁷²⁶⁹⁷⁶⁶⁰⁶⁶⁸⁶³,⁷·⁵⁷⁸⁷⁴⁸⁴⁷⁶¹⁶⁹⁸⁰⁶⁰⁵³⁷′⁵⁵⁷⁸⁴¹⁷⁹⁵⁸⁸²⁵⁴⁷⁹⁶·⁵:⁵²⁵′⁸⁶⁶⁶⁸⁸⁴⁹⁸⁵³,⁶⁵⁸·⁷'⁶⁰⁵‽⁵⁴⁸⁶⁶⁶⁷'⁷⁷⁷:⁵⁵⁶²⁸³⁵,⁵³⁷·⁷⁴⁵⁷⁸⁹⁵²⁵⁰⁸²⁴⁸⁸²⁷²⁷⁸⁷⁴⁸⁶⁸⁷⁷⁷⁵⁷³,⁵⁹⁵⁸⁷⁴⁵⁴⁵⁴⁷³⁸·⁵⁶⁶·⁶⁰⁷⁴⁵⁹⁷'⁷′⁵,⁵⁶⁶⁷⁵:⁶¹⁵·⁸⁹⁷′⁷⁸⁸¹⁵·⁴²⁵,⁸⁷⁵⁹⁷⁴⁸³⁵,⁷·⁵⁵⁷⁷⁵³⁵⁸⁶·⁸³⁷⁶⁸⁵⁴⁹⁴⁷⁶⁶⁷⁵⁵²⁷³⁷³⁵⁴⁶⁰⁴⁵⁶¹⁸⁹⁵,⁷⁹⁸²⁸⁰⁵'⁵⁸⁷⁷⁵²⁴⁷⁵²⁴⁴⁷³⁵⁵⁶⁹⁴⁰⁷⁰⁵⁵⁸⁸⁵⁹⁴¹⁶⁴⁷·⁷:⁴⁷⁴⁹⁶²⁷³⁴³⁷⁵⁵,⁶·⁷‽⁴⁶⁶²⁴³⁷⁷⁶⁰⁴⁰⁷⁷⁴⁶⁷·⁴⁶³,⁸⁵⁶⁰⁵⁷⁵⁷⁶·⁶⁷³,⁷⁸⁵²⁷'⁷'⁶⁸⁷‽⁴⁶⁷′⁸⁸⁷:⁵:⁷·⁸⁷⁵⁰⁷‽⁷‽⁷‽⁷⁴⁴¹⁷'⁵⁷⁷′⁶²⁶⁸⁵·⁴⁸⁵⁹⁵'⁸¹⁶⁶⁸⁴⁵⁷⁷⁴⁷,⁵⁸⁷:⁵⁵⁶¹⁶²⁴¹⁵²⁵⁹⁶⁸⁶²⁶²⁶⁶⁶⁵⁵⁶⁵,⁷⁶⁷,⁶⁶⁵⁰⁶²⁵⁷⁴²⁷'⁴⁹⁵:⁵‽⁸·⁷:⁴⁷⁷⁶⁸⁶⁷²⁷⁹⁸⁰⁵⁵⁵⁴⁶⁷⁶³⁸⁴⁷⁹⁷⁵⁸⁹⁷³⁴⁹⁷²⁸⁵⁴⁹⁷·⁷³⁶²⁷³⁸¹⁶·⁸⁸⁸⁴⁷⁸⁸³⁸⁷⁶⁸⁵:⁷⁷⁵⁹⁷⁶⁴⁰⁴⁵⁷·⁵⁰⁶⁸⁴⁰⁵·⁴⁵⁸⁶⁸⁰⁷⁷⁶¹⁴⁴⁸⁵⁶¹⁷⁸⁸⁵⁴³⁵⁵⁷²⁵:⁵⁶⁵⁸⁷:⁵‽⁷⁴⁴⁹⁶⁵⁵'⁶⁸⁶·⁷⁰⁷⁵⁷⁴⁴⁵⁸⁵⁴⁴⁴⁶⁶¹⁶⁹⁵⁵⁵⁷⁴⁹⁸⁵⁸⁶⁶²⁷‽⁶⁸⁶·⁶⁹⁷³⁵⁵⁷·⁴⁰⁸¹⁶⁵⁴⁸⁷²⁷⁸⁷²⁵³⁵‽⁶⁷⁵⁵⁵′⁵‽⁵⁶⁸²⁴¹⁶⁷⁸¹⁵²⁶⁹⁸⁰⁵⁸⁵:⁸⁵⁷⁹⁶⁶⁸·⁴⁶⁵'⁵,⁷'⁵⁷⁶⁷⁸³⁷·⁷⁸⁷,⁵³⁶⁹⁸¹⁶·⁴¹⁵:⁷·⁷,⁴²⁷'⁸³⁶²⁷⁸⁵‽⁷⁹⁵⁰⁸⁵⁵⁵⁸³⁷⁶⁵⁵⁶⁵⁶¹⁴⁵⁵:⁶³⁸⁷⁷⁶⁷⁶⁸⁸⁷·⁶¹⁷⁹⁴²⁵,⁶⁵⁶⁴⁴⁰⁸¹⁸⁶⁷⁸⁵′⁶⁹⁷′⁸⁷⁶⁵³′⁵⁰⁵′⁵⁵⁶¹⁶·⁸¹⁴⁹⁶⁹⁵⁷⁴⁰⁶⁴⁶⁵⁵·⁴⁴⁶³⁷⁵⁶⁵³,⁷⁹⁷:⁵‽⁵‽⁵⁹⁷⁶⁶⁹⁸⁵⁵⁶⁶⁷⁵⁴⁵³⁴²⁵³⁶⁸³,⁶·⁶⁷⁸⁸⁷‽⁶⁰⁴⁷⁸³⁴¹³′⁸³⁵‽⁶⁴⁴⁹⁵⁰⁷·⁴³⁷·⁴¹⁴⁷⁴⁸⁴⁵⁷⁷⁴³⁶⁶⁴⁶⁵′⁸³⁸⁶⁵⁶⁷⁵⁶⁹⁴⁰⁵⁷⁷²⁵⁹⁵′⁵⁸³′⁴⁸⁴⁶⁴³⁶⁰⁷⁷⁶⁶⁴¹⁷'⁵⁷⁵⁴⁸·⁷⁵⁶³⁸⁷⁷⁴⁸²⁶⁰⁶¹⁶¹⁵²⁸²⁸³⁷⁰³′⁶⁶⁶⁴⁶⁵⁵‽⁵'⁵⁸⁵⁵⁴⁷⁶⁰⁸³⁴¹⁷³⁷²⁶⁷⁴⁸⁷⁴⁵:⁷‽⁶⁸⁶·⁵,⁶¹⁵⁸⁶·⁶²⁴⁴⁷²⁶⁸⁸⁶⁵³⁷⁷⁷‽⁵⁶⁷²⁷'⁷³⁴²⁵²⁴²⁴⁹⁴²⁸³⁴¹⁷,⁸²⁴⁴⁵³⁵⁵⁵²⁸⁴⁶²⁵·⁵:⁶⁸⁵⁷⁴⁷⁴²⁷³⁷,⁴⁰⁵′⁶²⁷′⁶⁰⁷²⁶·⁸³⁶⁴⁴⁴⁸¹⁷⁶⁸⁹⁵,⁴⁵⁴¹⁷⁹⁷⁴⁷⁸⁷′⁴³⁶⁰⁵⁴⁴⁰⁴⁵⁶⁹⁶⁸⁸⁶⁸³⁵⁷⁷⁹⁶⁶⁸·³′⁵,⁸⁴⁵·⁵⁸⁷⁵⁸³⁷⁵⁷⁰⁵⁹⁷‽⁴⁴⁸⁷⁸⁷³,⁷⁷⁵³⁷'⁷⁸⁵‽⁵⁴⁷·⁵³⁸⁹⁴⁶⁶⁵⁶⁹⁵′⁵⁷³′⁷²⁶²⁵⁸⁶⁴⁷·⁵·⁵⁹⁸·⁷:⁵²³,⁶·⁸⁷⁴⁹⁶⁸⁵⁶⁴⁵⁵⁰⁷⁵⁴⁷⁶¹⁸⁸⁵⁴⁶⁵⁸⁸⁵⁷⁷⁴⁵⁴⁷,⁵³⁶⁸⁵,⁵³⁷′⁶⁶⁴⁰³,⁷⁷⁸³⁷⁷⁷⁰⁷'⁵:⁷⁴⁵⁰⁸⁵⁵′⁵⁸⁴⁰⁸¹⁶¹⁵‽⁵⁰⁵⁰⁷·⁷⁸⁷⁹⁴⁷⁵²⁶⁵⁸⁴⁵,⁶⁵⁸²⁶·⁸⁰⁸⁶⁷⁴⁶⁸⁵,⁷:⁸¹⁴⁷⁵·⁷‽⁶⁷⁷³⁵,⁷⁶⁵⁹⁵‽⁷⁶³,⁷⁰⁸⁶⁵⁶⁵²⁵·⁶·⁵'⁴⁸⁶·⁶·⁵·⁴⁷⁵⁴⁵⁶⁵⁶⁷⁶⁸⁸⁴⁷⁵⁰⁵⁷⁷⁶⁴⁶⁴⁵⁸⁸⁵⁸⁸¹⁶⁷⁵,⁷²⁷‽⁵,⁵⁶⁶⁸⁸⁸⁵:⁵⁴⁴³⁶⁷⁴²⁷'⁵·⁷³⁴³⁴¹⁷⁰⁷′⁷‽⁴¹⁸⁹⁵²⁷⁴⁸²⁴³⁷,⁷⁹⁸⁷⁶⁶⁷⁸⁶²⁶⁵⁷⁸⁴²⁶³⁷⁹⁸⁷⁵⁸⁷′⁴⁷⁵⁷⁵′³′⁷⁹⁷³⁴⁹⁶·⁴⁸⁵⁹⁷,⁶·⁷⁶⁷:⁴⁵⁸·⁶⁴⁴⁷⁵⁴⁸⁵⁶·⁵⁵⁴⁷⁴⁰⁵³⁸³⁴¹⁵′⁶⁵⁸⁹⁸⁷⁶·⁷⁴⁸¹⁸⁴⁵⁴⁵'⁶⁵⁵⁶⁵³⁷⁰⁸⁹⁷⁰⁵,⁴⁸⁸⁹³,⁶⁶⁶⁸⁵:⁸⁶⁵²⁴³⁷⁴⁶⁰⁸⁶⁵⁴⁷³⁴⁸⁷⁸⁷²⁵,⁸⁷⁵³⁸⁸⁴⁷⁸⁵⁷⁸⁵·⁷⁶⁸³⁴⁸⁴³⁵⁶⁴⁹⁴³⁸⁰⁴⁴⁵′⁶⁰⁶¹⁷⁶⁸⁸³,⁵:⁷³⁸³⁵⁶⁵⁵⁶¹⁷⁹⁷²⁸⁴³,⁸·⁴³⁷′⁸³⁴⁶⁸⁴⁷'⁶²⁵³⁷:⁶⁶⁶⁹⁷:³′⁶·⁵·³,⁴³⁵'⁶·⁸⁹⁸⁹⁸⁰⁴²⁷·⁵³⁵⁹⁷⁵⁵⁸⁵⁴⁵⁹⁶⁶⁴⁹⁶·⁵²⁷‽⁶⁹³′⁸¹⁷′⁸⁵⁸⁵⁸¹⁸⁶⁷²⁴⁷⁷³⁷⁷⁸⁰⁴⁷³,⁴⁵⁵⁵⁵⁵⁵·⁶²⁷⁹⁸·⁵⁹⁴⁰⁶⁰⁵³⁷'⁶⁸⁵·⁸³⁶⁹⁷⁶⁷³⁵⁶⁵'³′⁴⁶⁸⁸⁵⁸⁵⁰⁶⁵⁷⁸⁵′⁴³⁶⁶⁵⁶⁵'⁴⁵⁸⁸⁶⁸³′⁷′⁸⁶⁶¹⁵⁸⁵⁰⁷‽⁶·⁶·⁵:⁸⁸⁸²⁴⁶⁸⁵⁵⁴⁵,⁸⁹⁸²⁷⁴⁸⁸⁵⁶⁸·⁴⁴⁸¹⁷⁸⁶⁵⁷:⁵'⁶¹⁶¹⁸³⁶²⁶⁹⁶⁸⁷‽⁸⁹⁴¹³,⁴⁷⁷'⁶³⁷⁸⁵⁸⁸·⁷⁶⁷⁰⁷³³,⁸⁵⁶⁷⁵⁷⁷⁹⁵²⁴⁶⁶⁵⁸⁶⁵⁶⁵'⁷⁴⁵⁷⁶⁶⁴⁸⁷,⁶⁵⁷·⁶²⁵,⁵'⁶⁴⁵,⁷²⁷'⁷⁶⁷⁹⁵⁸⁴⁶⁵·⁸³⁷⁵⁵:⁵⁶⁷⁷⁸⁷⁵⁰⁸⁶⁸²⁸⁹⁷,⁶⁰⁵⁶⁶⁸⁷²⁶⁴⁷⁹⁸⁰⁵·³,⁵,⁵⁸⁷⁴⁸⁸⁶⁴⁵·⁶⁴⁷⁹⁷⁵⁵'⁷⁸⁵³⁶⁹⁸⁶⁴⁶⁴¹⁵'⁸⁰⁸⁰⁴⁴⁷⁴⁸⁰⁶¹⁵'⁴⁰⁵⁵³,⁷³⁴⁹⁸³⁴²⁶⁷⁴⁶⁴⁴⁷²⁷³⁷⁹⁷⁷⁷′⁸⁹⁴⁹⁶³⁶¹⁸⁹⁷⁵⁵³⁷⁹⁶⁶⁷·⁵⁶⁷'⁷‽⁵:⁸²⁸·⁶⁶⁶⁶⁷⁶⁷⁸⁶⁰⁴⁴⁷,⁵‽⁵'⁸⁰⁵⁷⁴¹⁷⁶⁷³⁵⁶⁶⁰⁷⁸⁴⁰⁶¹⁸⁷⁸⁶⁷‽⁸⁹⁶³⁵²⁷'⁸⁷⁶¹⁴⁹⁷⁵⁶·⁶¹⁷'⁸⁴⁴⁵³,⁵⁸⁵³⁶⁷⁷⁶⁶⁶⁶³⁵⁹⁷⁴⁸⁵⁵·⁶¹⁷:⁷⁶⁷⁶⁸⁰⁶¹⁶²⁷′⁷⁸⁴⁷⁵⁵⁵⁶⁴⁰⁵'⁶²⁵'⁴²⁸⁷⁸⁶⁶⁷⁸⁴⁴¹⁷⁷⁸²⁵:⁸⁹⁵‽⁷:⁶⁷⁶³⁶⁷⁶¹⁸⁷⁸¹⁶⁸⁴⁴⁷,⁷′⁵⁵⁵⁶⁶⁵⁷'⁸¹⁵′⁶⁰⁵⁹⁵⁰⁷³⁴⁶⁷·⁸⁴³′⁸⁵⁴⁸⁷·⁶⁰⁵⁴⁷⁸⁶⁵⁸²⁷⁶⁵³⁴⁰⁵⁸⁸²⁶⁰⁷⁰⁴⁷⁵·⁵⁹⁴¹⁵⁹⁵⁹⁸⁵⁷·⁴⁷⁵⁵⁶⁰⁷³⁷:⁸⁷⁴¹⁸⁰⁴⁸⁵⁴⁶¹⁶⁹⁵⁶⁸⁶⁶⁷⁷·⁸⁸⁷·⁷′⁴¹⁶⁴⁶⁷⁶³⁴⁴⁸⁰⁴⁵⁷:⁸⁶⁸⁷⁷:⁸·⁶²⁵‽⁵⁵⁴⁴⁵′⁸¹⁶⁹⁸⁹⁵⁵⁷·⁵⁹⁷⁸⁷‽⁶⁴⁷⁴⁸⁸⁴²⁸⁰⁵·⁸⁰⁸¹⁵,⁷⁴⁸⁸⁴⁸³′⁵⁸⁸⁷⁷⁵⁶²⁵⁴⁴⁵⁷'⁶¹⁷⁴⁷⁷⁴⁴⁵‽⁶⁴⁵⁷⁶¹⁸⁷⁸⁴⁸¹⁶⁶⁴⁸⁶⁸³,⁷⁴⁷⁶⁶⁰⁸·⁸¹⁷³⁶⁵⁵⁸⁵⁴⁶³⁴¹⁵⁰³,⁵²⁶⁶⁸⁰⁵:³′⁷'⁵⁶⁴⁷⁶⁵³,⁵'⁵⁷⁵,⁷⁷⁵⁵⁵⁴⁷'⁵,⁸⁵⁵⁷⁵‽⁷⁴⁵⁵⁶⁴⁵,⁶⁷⁷⁰⁶⁸⁴⁹⁸⁷⁴³⁸²⁵⁰⁷⁵⁵⁵⁴⁵⁵²⁶⁸⁵‽⁴⁸⁷⁰⁴⁷⁶⁸⁶⁷⁸⁰⁵:⁷‽⁷'⁵⁸⁶⁹⁷⁷⁷‽⁸¹⁴⁶⁸⁵⁷,⁴⁴⁵⁵⁷⁸⁴¹⁴¹⁷⁹⁴⁵⁸⁰⁷⁶⁸⁶⁶·⁷·⁸⁸⁸·⁴⁷⁵‽⁸·⁶⁴⁸³⁴⁹⁷⁷⁵⁸⁷⁰⁸⁸⁶⁶⁸⁶⁸⁸⁶⁴⁶⁹⁷·⁴⁶⁸⁸⁷·⁸³⁴¹⁸⁹⁸⁸⁶⁴⁵⁶⁷⁴⁶⁵⁴²⁸⁸⁷:⁶⁷⁷′⁷:⁴²⁷·⁵′⁸·⁸⁵⁸⁷³′⁵²⁸³⁴⁷⁷⁶⁵⁷⁷⁵⁷⁵⁵,⁶⁵⁴³⁵⁰⁷,⁸⁰⁶¹⁸²⁸⁶⁶³⁵′⁷:⁷'⁵⁸⁴⁴⁵³⁵,⁷⁹⁵⁰⁷³⁵'⁵⁵⁶⁶⁴³⁴⁴⁵³⁵′⁴⁶⁴³⁸³⁵⁵⁷,⁶⁵⁵·⁸⁹⁸⁷⁶⁴⁶¹⁷,⁴⁶⁴⁷⁵²⁶⁶⁷:⁶¹⁵:⁵²⁶⁷⁸⁵⁴⁷⁸⁹⁵,³′⁴¹⁸·⁴⁵⁷·⁸⁹⁸⁶⁷'⁷,⁵‽⁶³⁵⁹⁴⁹⁵‽⁷‽⁵‽⁴⁴⁵²⁸⁵⁵⁹⁵⁵⁸⁰⁵⁵⁴³⁸⁸⁵'⁶⁰⁷'⁸¹⁵'⁵²⁵⁹⁵′⁵:⁴⁸⁶²⁵⁰⁷⁸⁵′⁸⁸⁶⁴⁸¹⁵:⁷′⁴⁷⁵′⁷⁸⁷²⁴⁷⁶⁸⁶⁵⁸⁵⁷:⁴⁷³,⁵‽⁴²⁸¹⁶⁶⁴⁸⁸⁸⁵⁴⁷:⁵⁹⁵,⁴⁸⁴²⁸⁶⁶⁸⁴³⁶¹⁶⁵³,⁶⁰⁷⁹⁶⁵⁶¹⁶⁹⁴⁶⁵'⁷⁸⁷⁴⁷‽⁴²⁷⁴⁷⁹⁴⁸⁵⁶⁸⁹⁴⁷⁷‽⁴¹⁵‽⁵:⁴⁰⁵,⁶⁰⁷⁷⁵:⁵:⁶⁹⁵²⁵⁴⁸⁰⁶⁰⁶⁴⁷'⁵⁸⁵⁶⁵·⁴⁹⁶⁴⁵⁵⁷:⁸⁶⁵⁹⁴⁴⁵⁵⁷′⁷⁰⁵⁰⁴⁰⁷‽⁷²⁷⁰⁸⁰⁵⁴⁷⁶⁶⁴⁶⁷⁸⁸⁵‽⁷′⁷·⁷'⁵⁸⁷′⁵·⁸³⁴²⁶⁵⁸³⁵⁵⁷³⁷⁶⁷'⁸⁴⁷⁹⁷'⁷,⁷‽⁵⁴⁸⁹⁶⁰⁵⁵⁵′⁷⁸⁵⁸⁸²⁴⁸⁶⁷⁶¹⁶⁶⁶²⁷⁵⁵⁰⁴⁰⁶⁸⁷‽⁶⁶⁶⁸⁵·⁸⁵⁶⁴⁴⁹⁵²⁷,⁷⁸⁸³⁶⁰⁶⁸⁸⁰³,⁴⁰⁷⁰⁶³⁶⁸⁷²⁶⁶⁵⁴⁶⁷³,⁵⁶⁷⁷⁶⁵⁶⁹⁶⁷⁷⁷⁸¹⁴⁷⁶⁶⁷⁸⁷⁶⁷³³′⁴³⁶⁸⁴⁶⁴⁴⁶⁷⁷,⁵‽⁶⁰⁸·⁷:⁸¹³′⁶⁹⁶⁷⁷⁵⁴⁸⁷′⁷⁵⁸·⁸⁰⁷²⁴¹⁵·⁷⁴⁷²⁵²⁷³⁶⁰⁸⁴⁴⁵⁷⁸⁴⁶⁶⁴⁷:⁴¹⁴⁶⁸⁷⁵⁸⁷'⁷‽⁶²⁸⁸⁶²⁷²⁸⁹⁷:⁵⁶⁴⁰⁶⁴⁸⁸⁸⁶⁴⁵⁵:³,⁴⁵⁴⁰⁴⁰⁷⁷⁸⁴⁸⁹⁶⁷⁶⁰⁶⁸⁷′⁶⁶⁶⁵⁵·⁴²⁵⁵⁸⁴⁵‽⁸³⁶⁵⁷'⁴⁵⁶¹⁷:⁴³⁶⁷³,⁴¹⁵,⁴¹⁵,⁸³⁵⁸⁶¹⁶⁴⁷·⁵⁶⁸³⁸⁵⁷⁹⁸⁰⁶⁷⁸·⁷,⁷³⁷′⁵·⁸⁸⁵⁹⁷⁸⁵⁴⁵⁴⁵:⁶⁹⁷'⁵⁴⁵³⁵³⁷⁵⁷⁰⁸⁵⁷·⁵·⁵·⁷′⁴⁸⁶⁴⁶³⁸²⁴⁰⁶·⁸¹⁵·⁷⁶⁸⁹⁵³⁵:⁸⁹⁷'⁷⁵⁴⁵⁶²⁵,⁷·⁷⁰⁶¹⁶⁴⁷′⁶⁷⁵⁷⁵²⁵,⁸⁸⁸²⁵³⁵‽⁶·⁶⁰⁶¹⁶⁸⁷⁴⁷⁹⁶⁶⁷⁷⁸²⁴⁵⁷⁰⁶⁵⁸⁶⁸³⁶⁸⁴⁰⁵³⁵⁴⁶⁵⁷⁷⁸¹⁸⁴⁷:⁷⁰⁶¹⁷,⁴⁵⁶⁵⁵³⁷′⁴⁵⁶·⁸⁶⁵³⁵:⁵'⁶⁸⁶⁴⁵⁶⁷‽⁶⁶⁵'⁷⁹⁸¹⁴⁶⁶⁷⁷⁹⁴⁷⁴²⁵‽⁶⁸⁷·⁶³⁵⁰⁵'⁵⁰⁷⁶⁸⁰⁷⁶⁷⁵⁴⁰⁴⁹⁶⁹⁵:⁶⁶⁴⁰⁵,⁷·⁴⁹⁵,⁴²⁶¹⁵'⁵,⁵‽⁵‽⁴³⁷⁰⁵·⁶¹⁴⁷⁵⁸⁷⁰⁷⁴⁷:⁵:⁷⁶⁷³⁴⁴⁵⁰⁷′⁶⁹⁸¹⁷'⁷⁰⁸·⁵′⁴⁷⁶·⁸⁸⁷·⁷³⁶⁵⁵⁶³,⁸⁵⁶·⁶⁷⁸²⁶⁷⁶⁵⁷⁸⁸⁰⁷⁰⁵⁶⁴⁷⁸⁹⁷⁸⁷:⁷⁸⁸³⁸³⁷′⁶⁴⁷⁹⁵:⁵⁵⁷′⁴²⁶²⁵³⁷'⁵‽⁵'⁵'⁶⁷⁵′³′⁶³⁸⁸³′⁸⁴⁷⁵⁴⁴⁷:⁶⁴⁸²⁸⁸⁷:⁶⁴⁸⁵⁷⁷⁵'⁵⁴⁵⁶⁶⁹⁸⁸⁵⁹⁷⁶⁴⁸⁵⁵⁸¹⁵‽⁷:⁸⁸⁵·⁴⁵⁸⁵⁶⁷⁷⁰⁶⁷⁴⁸⁴⁷⁶⁰⁷⁰⁸⁹⁷·⁸³⁷⁹⁴⁷⁷⁴⁴⁴⁵⁶⁴²⁶²⁵′⁵²⁵³⁵⁸⁵′⁸⁵⁷'⁷²⁴⁷⁵⁵⁴¹⁶⁴³′⁶⁶⁵³⁵,⁶⁴⁸⁹⁵⁶⁴³⁸⁶⁴¹⁸³⁵⁰⁵:⁵,⁷³⁵³³,⁶⁸⁴⁰⁵⁵⁷⁹⁵·⁶⁸⁶⁸⁷'⁵′⁷'⁴¹⁸²⁵,⁸⁰³′⁷⁴⁵·⁷'⁷³⁴⁰⁷⁵⁴⁴⁶²⁶⁷⁶²⁶·⁵,⁷⁶⁵:⁶⁴³′⁸·⁶⁷⁷⁹⁶¹⁷:⁸⁶⁴⁴⁵²⁸³⁶⁷⁶⁶⁵'⁵⁴⁴⁸⁵⁵⁷'⁷²⁶⁴⁴⁴⁸⁷⁷³⁵‽⁷‽⁷·⁶²⁵‽⁷'⁴⁵⁴¹⁷‽⁵·⁶⁴⁴⁴⁵⁵⁵,⁸¹⁵·⁸⁰⁸¹⁴⁰⁴¹⁵'⁶⁶⁴⁸⁵⁰⁷′⁴⁵⁷′⁶⁹⁷²⁶²⁸³⁶⁴⁷⁵⁶¹⁷³⁷'⁸⁷⁸⁴⁶⁰³,⁴³⁶⁰⁶⁷⁷:⁵⁷⁸⁶⁸¹⁶⁷⁸⁹⁶⁴⁷⁸⁶⁸⁶⁴⁶⁶⁵⁷⁵,⁷,⁵:⁸·⁵⁸⁶⁶³,⁸⁹⁴⁷⁶⁹⁸⁵⁵,⁵⁰⁶⁶⁴⁰⁸³⁸⁵⁸³⁴⁶⁷⁵⁷²⁴⁵⁵:⁷⁷⁴⁹⁷'³′⁷,⁴³⁸¹⁶⁵⁵²⁵:⁶⁹⁸³⁴⁴⁵:⁶⁰⁸⁶⁷⁷⁵′⁴¹⁶⁵⁷⁶⁸⁰⁶²⁴⁸⁵⁷³,⁴⁹⁷⁰⁸⁷⁵²⁷⁷⁵³⁴³⁶⁶⁵³⁵⁵⁵′³′⁵'⁷‽⁴²⁵'⁷,⁵⁵⁷²⁸³⁴³⁵⁷⁵⁰⁵³⁷,⁷:⁵⁰⁷⁵⁴⁹⁴⁵³,⁸·⁸⁸⁶¹⁸⁹⁵‽⁶³⁷‽⁵‽⁷,⁵′⁵′⁵⁷⁷⁴⁶¹⁷⁹⁷³⁶⁹⁵⁸⁶⁰⁴⁵⁷'⁸⁸⁵:⁵⁶⁷⁸⁷⁵⁷⁷⁵⁰⁵⁹⁸¹⁴⁴⁶⁰⁸³⁸³⁵⁴⁴⁸⁸⁷⁷⁵⁸³⁵‽⁴⁶⁶⁰⁸⁵⁶⁶⁶⁶⁷⁶⁸⁶⁶⁸⁵⁴⁷·⁷⁸⁴⁷⁴⁶⁶·⁸⁰⁴²⁵⁶⁷⁰⁷:⁶·⁷⁶⁷⁰⁵·⁵⁰⁵⁴⁸¹⁷:⁴¹⁶²⁷⁸⁸⁴⁸²⁶⁵⁸⁴⁴⁴⁷·⁵²⁶³⁷²⁶⁸⁵⁴⁷⁹⁵³⁷⁴⁷⁴⁸⁶⁷‽⁵⁹⁸³⁶⁸⁸⁰⁵‽⁶·⁸⁸⁷⁰⁶⁵⁷⁶⁷²⁸⁴⁷‽⁴⁹⁴⁹⁴²⁸¹⁵⁷⁴⁵⁵,⁷⁸⁵²⁵⁷⁴⁴⁵⁰⁷′⁵·⁶⁸⁶·⁷⁸⁷′⁷⁴⁷:⁶⁷⁶⁶⁵·⁸³⁷'⁶⁶⁷³⁶⁷⁸²⁷⁴⁸⁸⁴⁶⁵⁴⁷·⁶⁹⁵,³′⁷⁷⁷'⁸⁸⁵'⁵·⁶²³,⁷⁴⁴⁹⁷⁴⁴²⁶⁵⁴²⁴²⁴¹⁴¹⁴⁰⁵⁹⁷·⁶⁰³′⁶⁰⁸⁰⁸³⁸⁷⁷⁷⁸¹⁸⁰⁴⁰⁷⁶⁶·⁴⁴⁸⁶⁷′⁵,⁵⁹⁵²⁸⁹⁸³⁴⁰⁵′³,⁷⁸⁷·⁶⁴⁷‽⁶⁰⁷⁹⁶¹⁷⁹⁴³⁵⁷⁸¹⁴¹⁵·⁵⁰⁵⁷⁴⁷⁶³⁶⁰⁶⁰⁶⁶⁵⁰⁸²⁵‽⁴⁴⁵:⁸⁸⁵‽⁴³⁶⁸⁵·⁸⁹⁷⁶⁴⁹⁸³⁶⁷⁷·⁸³⁶⁸⁶⁶⁴⁹⁴¹⁵⁸⁷:⁴⁴⁵,³,⁵‽⁴⁹⁴⁵³,⁷⁷⁶⁷⁵,⁶⁹⁴⁷⁶³⁶⁰⁶²⁷·⁸⁵⁷′⁸⁷⁸⁴⁵:⁸⁹⁶²⁴³⁷‽⁵⁹⁸⁹⁵‽⁸²⁵⁸⁶¹⁴⁶⁸²⁵³⁵²⁷⁹⁴⁰⁸⁵⁵⁸⁶⁵⁵³³′⁴⁰⁸⁹⁵,⁶⁰⁷'⁵·⁶²⁶⁷⁵‽⁸²⁴³⁸·⁷′⁵⁸⁴⁴⁷‽⁷⁰⁸·³,⁵³⁵‽⁷·⁵⁰⁷⁹⁷′⁴¹⁷⁶⁶⁷⁷³⁸⁹³,⁵·⁶·⁵·⁵⁴⁷'⁶·⁸³³,⁵⁰⁶⁷⁵·⁴¹³′³′⁶³⁵⁰⁶¹⁶⁹⁵⁷⁷⁸⁵⁰⁶²⁵⁴⁷,⁵·⁶⁸⁷⁵⁷′⁵⁹⁶¹⁵⁸⁵³⁴⁶⁶⁷⁷,⁷⁰⁷⁴³,⁵'⁸⁶⁸²⁷·⁴⁸⁷:⁷⁷⁶¹⁷⁰⁴¹⁷:⁷⁷⁷⁶⁴⁸⁷‽³′⁸⁶⁶⁹⁴⁹⁸⁶⁸⁷⁷⁴⁶⁵⁶⁸⁶·⁸·⁸¹⁷′⁴⁹⁷'⁶·⁷⁴⁵⁴⁷⁹⁷:⁶·⁶⁶⁷⁶⁵³⁷⁰⁶⁵⁷,⁵⁰⁶³⁷³⁵⁴⁸⁸³′⁵⁴⁵⁵⁴²⁶⁶⁴⁹⁶⁷⁷′⁷⁷⁵³⁵′⁷⁶⁸⁴⁶¹⁶¹⁵'⁴⁰⁷′⁷⁶⁴⁷⁴⁴³′⁸⁴⁷⁹⁷⁴⁴⁴⁵⁵⁶⁹⁸·⁴⁹⁷³⁴⁹⁴⁹⁷:⁷,⁵²⁴⁸⁸³⁴²⁴⁴⁴⁶⁷:⁷⁶⁸⁸⁸²⁵'⁸³⁴⁴⁶⁷⁷³⁶⁸⁴²⁵⁷⁸⁷⁴⁹⁷⁸⁷⁹⁷:⁷,⁷²⁴⁸⁶⁰⁶⁶⁶·⁴⁶⁷⁵⁷⁰⁷⁶⁸⁰⁵⁴⁵⁵⁵⁸⁷'⁷³⁶¹⁸⁸⁸⁴⁵′⁵:⁵·⁷,⁵³⁸⁷⁴⁸⁷:⁷,⁵⁰⁶·³,⁷′⁵⁵⁸⁵⁴²⁴²⁸⁸⁶¹⁸²⁷⁶⁵²"
