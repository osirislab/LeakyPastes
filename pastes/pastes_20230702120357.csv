id,title,username,language,date,content
wsVHXZwd,Generics and Delegates,iumar69,C#,Sunday 2nd of July 2023 07:01:46 AM CDT,"//----------------------------------------------Generic Delegates------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;

namespace A
{
    public delegate T SampleDelegate<T>(T a, T b);

    class Mathoperations
    {
        public int Add(int a, int b)
        {
            return a + b;
        }

        public int Subtract(int a, int b) { return a - b; }
    }

    class Program
    {
        public static void Main()
        {
            Mathoperations m = new Mathoperations();
            SampleDelegate<int> s = new SampleDelegate<int>(m.Add);

            Console.WriteLine(""The addition is: "" + s(10, 20));

            s = m.Subtract;
            Console.WriteLine(""The difference is: "" + s(10, 20));


            Console.ReadLine();
        }
    }
}"
SQXkub2w,"Remove Yoast HTML Comments “This site is optimized with the Yoast WordPress""",fahimmurshed,PHP,Sunday 2nd of July 2023 06:55:56 AM CDT,"//Remove Yoast HTML Comments
//https://gist.github.com/robwent/f36e97fdd648a40775379a86bd97b332

function go_yoast() {
  if (defined('WPSEO_VERSION')){
      add_action('get_header',function (){ ob_start(function ($o){
          return preg_replace('/\n?<.*?Yoast SEO plugin.*?>/mi','',$o); }); });
      add_action('wp_head',function (){ ob_end_flush(); }, 999);
  }
}
add_action('plugins_loaded', 'go_yoast');

// or
add_filter( 'wpseo_debug_markers', '__return_false' );"
zB4Yfn3A,Add custom mime types to WordPress,fahimmurshed,PHP,Sunday 2nd of July 2023 06:53:42 AM CDT,"//The following goes in a themes functions file or a custom hooks plugin

function custom_upload_mimes ( $existing_mimes ) {
    $existing_mimes['epub'] = 'application/epub+zip';
    $existing_mimes['mobi'] = 'application/x-mobipocket-ebook';
 
    return $existing_mimes;
}
 
add_filter('upload_mimes', 'custom_upload_mimes');"
5iKsNURL,Disk Formatter rewrite,UNIXnerdV,Python,Sunday 2nd of July 2023 06:45:51 AM CDT,"""""""
	Python Disk Formatter - Remade   - Prototype
	Created on: 21 May 2023
	Created by MrUNIMan
	
	Copyright (C) 2023 MrUNIXMan

	This program is specific for Linux not any other due to course time.
	
	This was a remade version for a college project. So I decided to give the 
	code out
	
	
	Requirements for Python3 to be installed via PIP.
	
	Prettytable
	Psutil
	
	
	This one uses a Mimic mode as well as real mode



""""""
# imports

import os, datetime, sys, platform, time;
from subprocess import run, PIPE
from prettytable import PrettyTable;



# Classes - This can be multiple classes for each part


# Format is for the format operation
# User interface is things like menu 


class format_op():
	def __init__(self):
		
		
		self.PHASES = (1,2,3);   # Default phases used for the 3 devices
		self.BLK_SIZE = (512,1024,2048, 3097, 4096);  # Default blocksizes
		self.MAX_DISK_LIST = 0;  # To be used to prevent overdoing it.

		# Default Index set for the tuples
		self.PHI = 0   # Phase Index
		self.BSI = 0  # Blocksize Index
		self.DI = 0  # Disk Index
		
		
		
		
		
		self.inputdev = []    		  # input devices
		self.drivelist = []    		  # List of drives from lsblk
		self.outputdev = ""/dev/null""  # default but will change
		self.blocksize = 4096;		  # default blocksize value
		self.phase = 0				  # default phase amount, this will cause aborts
		self.maxphase = 0 			  # maxmium phase to use in loops
		
		
		# Phase related stuff  - These to show on the table
		
		self.phase1_start_time = 0;
		self.phase2_start_time = 0;
		self.phase3_start_time = 0;
		
		self.phase1_fin_time = 0;
		self.phase2_fin_time = 0;
		self.phase3_fin_time = 0;
		
		# Statuses - this will update on the tabled with date
		
		self.phase1_status = ""Running"";
		self.phase2_status = ""Running"";
		self.phase3_status = ""Running"";
		
		# Phase Status - This will show time after
		self.working = ""Running"";
		
		# Phase Values
		self.phase1_val = 1;
		self.phase2_val = 2;
		self.phase3_val = 3;
		
		# Input device
		self.phase1_ip = 0
		self.phase2_ip = 0
		self.phase3_ip = 0
		
		# Start Date/Time
		self.datetime_start = 0;
		
		
		
		
		
		
	def get_disks(self):
		argv = ['lsblk -d -o name -n']
		output = run(argv, shell=True, stdout=PIPE)
		
		output_string = output.stdout.decode('utf-8');
		output_string = output_string.strip();
		
		results = output_string.split('\n');
		return results;
		
	def update_disklist(self,i):
		self.outputdev = self.drivelist[i]
		
	def update_phase(self,i):
		self.phase = self.PHASES[i];
	
	def update_blocksize(self,i):
		self.blocksize = self.BLK_SIZE[i];
		
#-------------------------------------------------------------------------------------------
# Functions
	
	
	
	def select_disk(self):
		""""""
		self.PHASES						# Phases
		self.MAX_DISKS_LIST				#MAX_DEVICES
		self.DI							# DEVICE Index
		""""""	
		
		DISKS = self.get_disks();			# Runs LS BLOCK
		select_disk_key = 0;
		
		for x in DISKS:
			
			"""""" 
			Filter out unwanted entries
			
			""""""
			if(""zram"" in x ):  # Ram Disk on ASUS PC
				continue;
			if(""loop"" in x ):  # Ubuntu's snap
				continue;
			else:
				disktmp = ""/dev/{0}"".format(x);
				f.drivelist.append(disktmp);   # Forms a newlist in the class
	

		self.MAX_DISK_LIST = len(self.drivelist)
		count = 1;
		
		#-----------------------------------------------------------------------
	
		# Draw the display before drawing values
		
		while (select_disk_key != 3):
			
			
			UI.draw_screen();
		
			print(""Select Disks"")
			print(""List of disks on the system"");
			print()
		
			DisksTable = PrettyTable([""Device No"", ""Device name"", ""Selected""]);
			
			
			
			for disks in self.drivelist:
				
				
				# This shows an arrow next to the disks in form of <===
				if(disks == self.outputdev):
					selected = ""<===""
				else:
					selected = "" "";
				
				
				DiskEntry = count,disks, selected;
				DisksTable.add_row(DiskEntry);
				
				
				if(count < self.MAX_DISK_LIST):
					count += 1;
				else:
					count = 1;
					
					
			
			print(DisksTable);		# Only needs to be printed once
			
			print();
			print(""Selected Disk: {0}"".format(f.outputdev));
			print();
			print(""1. Reset disk back to /dev/null"");
			print(""2. Circulate through the disks"");
			print(""3. Return to previous"");
			print()
			
			try:
				select_disk_key = int(input(""Enter your Option:> ""));
				
				if (select_disk_key == 3):
					Message = ""Selected Disk: "" + f.outputdev; 
					g.writelog(Message);
					f.drivelist.clear();   # clears the list
					break;
				
				if(select_disk_key == 1):
					f.outputdev = ""/dev/null""
			
				elif(select_disk_key == 2):
					if(self.DI < self.MAX_DISK_LIST):
						f.update_disklist(self.DI)
					else:
						self.DI = 0; # Reset
						f.update_disklist(self.DI)
				
					self.DI += 1
				
				
				
				
				
				
			except ValueError:
				print(""Please use integers for menu selection"");
				g.pause();
				
					
	
					
			
	def start_format_question(self):
		
		
		# Asks to Mimic's the format to safeguard data.
		
		UI.Minmic_screen();
		
		response = input(""> "");
		
		if(response == 'yes' or response == 'Yes' or response == 'YES' or response == 'y' or response == 'Y'):
			g.mimic = ""yes""
			g.mimicstate = 'on'
		elif(response == 'no' or response == 'No' or response == 'NO' or response == 'n' or response == 'N'):
			g.mimic = ""no""
			g.mimicstate = 'off'
		else:
			g.mimic = ""yes""
			g.mimicstate = 'on'
			
		
		
		
		
		UI.Confirmation_to_format();
		
		response = input(""> "");
		
		if(response == 'yes' or response == 'Yes' or response == 'YES' or response == 'y' or response == 'Y'):
			self.start_format()
		elif(response == 'no' or response == 'No' or response == 'NO' or response == 'n' or response == 'N'):
			return 1
		else:
			return 1
		

	
	
	
	
	def que_device(self, item):
		self.inputdev.append(item);
	
	def deque_device(self):
		if len(self.inputdev) < 1:
			return None
		return self.inputdev.pop(0);
		
	def print_que_dev(self, i=1):
		print(""Phase"");
		print(""Queue     Device to use"");
		print(""-------------------------"");
		
		for x in self.inputdev:
			print(""{0}         {1}          "".format(i, x));
			i += 1;
			
	def print_que_dev_phases(self, phase, timeinfo, i=1):
	#def print_que_dev_phases(self, i=1, phase, timeinfo):
		print(""Phase"");
		print(""Queue     Device to use"");
		print(""-------------------------"");
		
		for x in self.inputdev:
			print(""{0}         {1}          "".format(i, x));
			i += 1;
	
	
		
		
	def start_format(self):
		
		
		PHCount = 1;
		
		# This will only run if yes was selected at the confirmation
		
		
		if(f.phase == 0):
			print();
			print(""No Phase Selected, Aborting...."");
			print();
			g.pause();
			return 1;
			
		if(f.phase == 3):
			f.maxphase = f.phase 
			f.que_device(""/dev/zero"");
			f.phase1_ip = ""/dev/zero"";
			f.que_device(""/dev/random"");
			f.phase2_ip = ""/dev/random"";
			f.que_device(""/dev/urandom"");
			f.phase3_ip = ""/dev/urandom"";
		elif(f.phase == 2):
			f.maxphase = f.phase 
			f.que_device(""/dev/random"");
			f.phase1_ip = ""/dev/random"";
			f.que_device(""/dev/urandom"");
			f.phase2_ip = ""/dev/urandom"";
		elif(f.phase == 1):
			f.maxphase = f.phase 
			f.que_device(""/dev/urandom"");
			f.phase1_ip = ""/dev/urandom"";
		
		
		
		
		#-------------------------------------
		#write-logs
		
			
		DATETIME = g.update_date_time()  # This keeps the whole date and time it started
		g.datetime_start = DATETIME;  # This can be shown on the final screen
		g.writelog(""{0} phase Format Process - Started"".format(f.phase));
		g.writelog("" "");
		
		
		
		
		#---------------------------------
		for x in f.inputdev:
			if(PHCount == 1):
				PH1TIME_START = g.update_time();
				f.phase1_start_time  = PH1TIME_START;
				
				
			elif(PHCount == 2):	
				PH2TIME_START = g.update_time();
				f.phase2_start_time  = PH2TIME_START;
				
			
			elif(PHCount == 3):
				PH3TIME_START = g.update_time();
				f.phase3_start_time  = PH3TIME_START;
				
			#f.Draw_Status_Screen(DATETIME, x, PHCount); # Draws the table here
			UI.Format_Status(DATETIME, x, PHCount);
						
			argv = ""dd if={0} of={1} bs={2} status=progress conv=notrunc,noerror"".format(x, f.outputdev, f.blocksize)
			
			# Writes to a log file
			#--------------------------------------------------------------
			g.writelog(""Phase {0} Format Started"".format(PHCount));
			g.writelog(""Executing command: {0}"".format(argv));
			#---------------------------------------------------------------
			
		
			if (g.mimic == 'yes'):
				# Comment this if you going to use os.system
				print(""This is currently running a fake format (Mimic)"");
				print(""The command would be: "") 
				print(argv);
				time.sleep(60);
			elif (g.mimic == 'no'):	
				print(""Formatting in Progress"");
				print(""Executing command: "" + argv);
				os.system(argv)
				time.sleep(5);
			
			
			# Finish here
			
			if(PHCount == 1):
				PH1TIME_FINISH = g.update_time();
				f.phase1_fin_time = PH1TIME_FINISH
				f.phase1_status = f.phase1_fin_time
				
			elif(PHCount == 2):
				PH2TIME_FINISH = g.update_time();
				f.phase2_fin_time = PH2TIME_FINISH
				f.phase2_status = f.phase2_fin_time
				
				
			elif(PHCount == 3):
				PH3TIME_FINISH = g.update_time();
				f.phase3_fin_time = PH3TIME_FINISH
				f.phase3_status = f.phase3_fin_time
			
			
			g.writelog(""Phase {0} Format Complete"".format(PHCount));
			
			if ( PHCount < f.maxphase):
				PHCount += 1;
			else:
				PHCount = 1;
		
		UI.Complete_Screen(f.phase);
		g.writelog("" "");
		g.writelog(""{0} phase format process complete.."".format(f.phase));
		
		# Reset Values  - Abstraction example here its unimportant for people to see.
		f.inputdev.clear();   # Clears the list for the next use
		f.phase1_status = ""Running"";
		f.phase2_status = ""Running"";
		f.phase3_status = ""Running"";	
		
		
		
		
		
	
	
	
	
	
	
	
	
		

class general():
	def __init__(self):
		
		
		self.mimic = ""yes""		# Enable mimic by default
		self.mimicstate = 'NULL';

#------------------------------------------------------------------------		
	
	def pause(self):
		dumbkey = input(""Please Press Enter to continue"")
		
	def update_time(self):   # This is used for different purpose to the date_time
		now = datetime.datetime.now();
		TIME = now.strftime(""%H:%M"");
		return TIME;
		
	def update_date(self):   # This is used for different purpose to the date_time
		now = datetime.datetime.now();
		DATE = now.strftime(""%d/%m/%Y"");
		return DATE;
	
	def update_date_time(self):
		# This works
		# shows like this:     22/05/2023 - 09:18

		now = datetime.datetime.now()
		DATE = now.strftime(""%d/%m/%Y"");
		TIME = now.strftime(""%H:%M"");
		
		DateTimeInfo = DATE + "" - "" + TIME;
		
		return DateTimeInfo;	
	
	def writelog(self, message):
		""""""
		Log files are written like this
		
		logfile = open(""/tmp/format-utility.log"", 'a');				# Open as Append
		logfile.write(""Format log started: {0} - {1}\n"".format(LogDate, LogTime));
		logfile.flush();
		
		""""""	
		DATETIME = self.update_date_time();
		
		logfile.write(""[ {0} ]: {1}\n"".format(DATETIME, message));
		logfile.flush();
	
	
	
	
	
	
	


class user_interface():
	def __init__(self):
		
		self.Author = ""MrUNIXMan""
		self.Version = 0.1
		
		self.Progname = ""Disk Eraser utility for SATA Disks ""
		self.title = ""{0}  {1} - Copyright 2023 {2}"".format(self.Progname, self.Version, self.Author)
		self.underline = ""-"";
		
		
#------------------------------------------------------------------------		
	def clear_screen(self):
		os.system('clear');
		
	
		
	def draw_screen(self):
		self.clear_screen();
		
		print(self.title);
		underline = len(self.title);
		print(self.underline * underline);
		DateTime = g.update_date_time();    # Gets the date and time
		print(""Date/Time: "" + DateTime)
		print();
		
		
		
		
	def draw_main_menu(self):
		self.draw_screen();
		
		
		# This shows a little table for displaying the options selected
		DeviceInfo = PrettyTable([""Target Disk"", ""Blocksize Selected"", ""No of Phases""]);
		output = f.outputdev, f.blocksize, f.phase;
		DeviceInfo.add_row(output)
		print(DeviceInfo);
		print();
		
		#Options to show
		print(""1. Select Disk"");
		print(""2. Set Block Size value (Press number and enter to scroll through)"");
		print(""3. Set phase amount (Press number and enter to scroll through)"");
		print(""4. Commence Format"");
		print(""-""*70);										# Seaerator
		print(""5. Help"");
		print(""6. About Format utility"");
		print(""7. Quit"");
		print()	
		
	
	
	def Confirmation_to_format(self):
		self.draw_screen();
		
		StartFormat = PrettyTable([""Format Options"", ""Selected values""])
		disk_row = ""Disk to erase:"", f.outputdev ;
		phase_row =  ""Phase(s):"", f.phase;
		blocksize_row = ""Blocksize:"", f.blocksize
		mimic_row = ""Mimic Format (Fake format):"", g.mimic;
				
		StartFormat.add_row(disk_row);
		StartFormat.add_row(phase_row);
		StartFormat.add_row(blocksize_row);
		StartFormat.add_row(mimic_row);
		
		print(StartFormat);   # Prints the table.
		
		
		print()
		print(""CAUTION: This proceedure will take few mins to several hours"");
		print(""and it will erase your target device to point it may be"");
		print(""unrecoverable.."");
		
		print();
		print(""Are you sure you want to do this (Yes/No)?"");
		
	    
	
	
	def Minmic_screen(self):
		self.draw_screen();
		print();
		print(""Do you wish to turn on Mimic Mode?"");
		print();
		print(""This pretends to perform the operation but display, useful for prototypes, testing"");
		print(""or other uses. This will be shorter and is enabled by default"");
		print()
		
		
	def Format_Status(self, dateinfo, inputdev, phasenumber):
		self.draw_screen();
		
		InfoTable = PrettyTable([""Erasing Device"", ""Blocksize Value used"", ""Phase(s)"", ""Date/Time Start""])
		InfoOut = f.outputdev, f.blocksize, f.phase, dateinfo
		InfoTable.add_row(InfoOut)
		
		
		
		StatusTable = PrettyTable([""Phase"", ""Time Start"", ""State/Finish Time"", ""Erasing with"", ""Mimic State""]); # Makes a table
		
		
		if(phasenumber == 1):
			StatusOut = f.phase1_val, f.phase1_start_time, f.phase1_status, f.phase1_ip, g.mimicstate
			StatusTable.add_row(StatusOut)
			
			
		
		elif(phasenumber == 2):
			P1Out = f.phase1_val, f.phase1_start_time, f.phase1_status, f.phase1_ip, g.mimicstate
			# Add rows
			StatusTable.add_row(P1Out)
			
			P2Out = f.phase2_val, f.phase2_start_time, f.phase2_status, f.phase2_ip, g.mimicstate
			StatusTable.add_row(P2Out)
			
			
		
		elif(phasenumber == 3):
			P1Out = f.phase1_val, f.phase1_start_time, f.phase1_status, f.phase1_ip, g.mimicstate
			StatusTable.add_row(P1Out)
			
			P2Out = f.phase2_val, f.phase2_start_time, f.phase2_status, f.phase2_ip, g.mimicstate
			StatusTable.add_row(P2Out)
			
			P3Out = f.phase3_val, f.phase3_start_time, f.phase3_status, f.phase3_ip, g.mimicstate
			StatusTable.add_row(P3Out)
			
		print(InfoTable);
		print(StatusTable);
		print();
		
		
	
	def Complete_Screen(self, phasenumber):
		
		
		self.draw_screen();
		
		dateinfo = g.update_date_time();
		DateTimeTable = PrettyTable([ ""Started"", ""Completed"", ""Device Erased"", ""Blocksize value used""])  # Hopes to use colums
		
		print(""{0} Phase - Format Completed"".format(f.phase));
		header = ""{0} Phase - Format Completed"".format(f.phase);
		header_len = len(header);
		
		print(""="" * header_len);
		print()
				
		DateTBLOUT = f.datetime_start, dateinfo, f.outputdev, f.blocksize
		DateTimeTable.add_row(DateTBLOUT);
		
		print(DateTimeTable);
		
		StatusTable = PrettyTable([""Phase"", ""Time Start"", ""State/Finish Time"", ""Erased with""]); # Makes a table
		
		if(phasenumber == 1):
			StatusOut = f.phase1_val, f.phase1_start_time, f.phase1_status, f.phase1_ip
			StatusTable.add_row(StatusOut)
			
			
		
		elif(phasenumber == 2):
			P1Out = f.phase1_val, f.phase1_start_time, f.phase1_status, f.phase1_ip
			# Add rows
			StatusTable.add_row(P1Out)
			
			P2Out = f.phase2_val, f.phase2_start_time, f.phase2_status, f.phase2_ip
			StatusTable.add_row(P2Out)
			
			
		
		elif(phasenumber == 3):
			P1Out = f.phase1_val, f.phase1_start_time, f.phase1_status, f.phase1_ip
			StatusTable.add_row(P1Out)
			
			P2Out = f.phase2_val, f.phase2_start_time, f.phase2_status, f.phase2_ip
			StatusTable.add_row(P2Out)
			
			P3Out = f.phase3_val, f.phase3_start_time, f.phase3_status, f.phase3_ip
			StatusTable.add_row(P3Out)
			
		print(StatusTable);
		print();
		
		g.pause();
	
	
		
		
		
		
		
# Instancing of the above Classes
f = format_op();
UI = user_interface();
g = general();

#-----------------------------------------------------------

# Log file start


""""""
Log file writing at Start and Finish displays
differently to rest of the log

This is why is done like this while
rest is called from an OOP function

""""""
logfile = open(""format-utility.log"", 'a');				# Open as Append
LogDateTimeStart = g.update_date_time();
logfile.write(""\n"");
logfile.write(""Format log started: {0}\n"".format(LogDateTimeStart));
logfile.write(""\n"");
logfile.flush();


#--------------------------------------------------------------










# Start of the Program

def main():
	
	mmkey = 0; # sets the key for this menu to 0 
	
	
	while(mmkey != 7):
		
		# Draws out the main menu	
		UI.draw_main_menu();
		
		
		# This is where error is trapped and message is changed to prevent
		# the program from crashing.
		
		try:
			mmkey = int(input(""> ""));
			
			if(mmkey == 7):	# Quits the program by breaking the loop
				LogTimeDate = g.update_date_time();
				logfile.write(""\n"");
				logfile.write(""Format log Ended: {0}\n"".format(LogTimeDate));
				logfile.flush();
				logfile.close()				# Closes the log file
				break;
			
			if(mmkey == 1):
				f.select_disk(); # Passes to another function

			elif(mmkey == 2):
				print(""Set blocksize"");
				f.BSI;  # Blocksize index for tuple
				
				if (f.BSI < 4 + 1):
					f.update_blocksize(f.BSI)
				else:
					f.BSI = 0; # Reset
					f.update_blocksize(f.BSI)
				f.BSI += 1
				
			elif(mmkey == 3):      # Sets the phase index which is handled by the update phase
				print(""Set Phase"");
				
				
				if(f.PHI < 2+1):
					f.update_phase(f.PHI)
				else:
					f.PHI = 0; # Reset
					f.update_phase(f.PHI)
				f.PHI += 1;
			
			elif(mmkey == 4):
				f.start_format_question();
			
			elif(mmkey == 5):
				print(""Show Help"");
				time.sleep(10);
		
			elif(mmkey == 6):
				print();	
				print(self.title);
				titlelen = len(self.title);
				print();
				print(""Rewritten Project by MrUNIXMan - 2023"");
				print();
				print(""This program uses BSD Licence"");
				
				
				f.pause();
			
			
			
			
		except ValueError:
			print(""Enter Numbers only please"");
			
		



if __name__ == ""__main__"":
	main();
	exit();
"
SzkdbxBK,poste lua,tommy2805,Lua,Sunday 2nd of July 2023 06:34:33 AM CDT,"if not fs.exists(""/frame"") then
    fs.makeDir(""/frame"")
    shell.run(""pastebin get kPiQjsdR frame/frame1"")
end
 
mon = peripheral.wrap(""top"")
mon.setTextScale(0.5)
term.redirect(mon)
paintutils.drawImage(paintutils.loadImage(""frame/frame1""), 1, 1)"
WHdhA0Hq,Roblox Free Robux Script [ Free ! ] 🤑🤑,TapZzee,Lua,Sunday 2nd of July 2023 06:07:28 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/ScriptDumper/FreeRobux/main/main.lua""))()"
ALA4Nmip,Biscuit Cookies Knife,zcwasfe,Lua,Sunday 2nd of July 2023 06:06:44 AM CDT,"management: q,e,r,b
require(13931392364):knife(""playername"")"
cGtpwTdy,data621,TestGuy1,JSON,Sunday 2nd of July 2023 06:00:09 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'fafe7bb7549aa14961545c52148aa1ebd7b9dd056a2bdf55acaac162e701297fef28923087f5003aea1a6c3305100686e68391f3e3baeabd96c9ce1e65252ede22ff0724a9a1797290fc169e87edcf8acae778ee2d539acc8435261f64b245ff90341f2c439e893f71a8bde920551c673fda088df1a2b16a99b02d58bbfc1af0',
  otherdata: [
    '2ff443d36bcde2ef29b8331f4ad85d8e',
    'd91430a9eec6477d823eed525e37db64',
    'ba42063d199b6489e2f84438783f6de0',
    '3d6eebd774b2285177d6118a3a60e294',
    '678fdb50aa272c6a31a96a0cf2a1174c',
    '345020caa5c2ee80ef738ca9560d84a0',
    '25f436d019630d338d3393a593696b76',
    '4dee1a0c5bbb78ecc788d3af9e71c05f'
  ]
}"
NGAKfWHZ,Dayz init.c / Spawn with certain items,OneShot1984,C,Sunday 2nd of July 2023 05:44:27 AM CDT,"


	override void StartingEquipSetup(PlayerBase player, bool clothesChosen)
	{
		EntityAI itemTop;
		EntityAI itemEnt;
		ItemBase itemBs;
        EntityAI itemClothing;
		float rand;

	 player.RemoveAllItems();
    
    ref TStringArray topsArray = {""tacticalshirt_LiveToSurvive""};
 	ref TStringArray pantsArray = {""cargopants_LiveToSurvive""};
 	ref TStringArray shoesArray = {""jungleboots_LiveToSurvive""};
 	ref TStringArray backpackArray = {""TaloonBag_LiveToSurvive""};
 	ref TStringArray helmArray = {""BaseballCap_LiveToSurvive""};
 	ref TStringArray handsArray = {""tacticalgloves_LiveToSurvive""};


 	EntityAI item1 = player.GetInventory().CreateInInventory(topsArray.GetRandomElement());
	EntityAI item2 = player.GetInventory().CreateInInventory(pantsArray.GetRandomElement());
 	EntityAI item3 = player.GetInventory().CreateInInventory(shoesArray.GetRandomElement());
	EntityAI item4 = player.GetInventory().CreateInInventory(backpackArray.GetRandomElement());
 	EntityAI item5 = player.GetInventory().CreateInInventory(helmArray.GetRandomElement());
 	EntityAI item7 = player.GetInventory().CreateInInventory(handsArray.GetRandomElement());     

   

		itemClothing = player.FindAttachmentBySlotName( ""Body"" );
		{

             itemEnt = player.GetInventory().CreateInInventory(""SodaCan_Pipsi"");
		player.SetQuickBarEntityShortcut(itemEnt, 3);
		
			
			itemEnt = player.GetInventory().CreateInInventory(""SodaCan_Pipsi"");

            itemEnt = player.GetInventory().CreateInInventory(""BandageDressing"");
			player.SetQuickBarEntityShortcut(itemEnt, 2);

            itemEnt = player.GetInventory().CreateInInventory(""BakedBeansCan_Opened"");
			player.SetQuickBarEntityShortcut(itemEnt, 4);

            itemEnt = player.GetInventory().CreateInInventory(""BakedBeansCan_Opened"");


            itemEnt = player.GetInventory().CreateInInventory(""CombatKnife"");
			player.SetQuickBarEntityShortcut(itemEnt, 0);

			
            itemEnt = player.GetInventory().CreateInInventory(""Roadflare"");
			player.SetQuickBarEntityShortcut(itemEnt, 1);
	    
          
			};
		if ( itemClothing )
		{
			//SetRandomHealth( itemClothing );
			
			//itemEnt = itemClothing.GetInventory().CreateInInventory( ""TunaCan"" );
						if ( Class.CastTo( itemBs, itemEnt ) )
				itemBs.SetQuantity( 4 );

			//SetRandomHealth( itemEnt );

			string chemlightArray[] = { ""Chemlight_White"", ""Chemlight_Yellow"", ""Chemlight_Green"", ""Chemlight_Red"" };
			int rndIndex = Math.RandomInt( 0, 4 );
			//itemEnt = itemClothing.GetInventory().CreateInInventory( chemlightArray[rndIndex] );
			SetRandomHealth( itemEnt );
		}
		
		itemClothing = player.FindAttachmentBySlotName( ""legs"" );
		if ( itemClothing )
			//SetRandomHealth( itemClothing );
		
		itemClothing = player.FindAttachmentBySlotName( ""Feet"" );
		if ( itemClothing )
			//SetRandomHealth( itemClothing );

 				player.GetStatWater().Add(3400);
				player.GetStatEnergy().Add(4400);
	}
};
Mission CreateCustomMission(string path)
{
	return new CustomMission();
}"
JCGwT31S,move_2,georgi9232,Python,Sunday 2nd of July 2023 05:27:40 AM CDT,"start_position = int(input())
array = list(map(int, input().split("","")))

forward_sum = 0
backward_sum = 0
current_position = start_position

while True:
    instruction = input().strip().split()
    if instruction[0] == ""exit"":
        break

    steps = int(instruction[0])
    direction = instruction[1]
    size = int(instruction[2])

    if direction == ""forward"":
        new_position = (current_position + steps)

        if current_position <= new_position:
            forward_sum += sum(array[current_position + 1:new_position+1])
        else:
            forward_sum += sum(array[current_position + 1:new_position + 1])

    elif direction == ""backwards"":
        new_position = (current_position - steps)

        if current_position >= new_position:
            backward_sum += sum(array[new_position:current_position])
        else:
            backward_sum += sum(array[new_position:]) + sum(array[:current_position])

    current_position = new_position

print(f""Forward: {forward_sum}"")
print(f""Backwards: {backward_sum}"")

"
wVqVK6B7,mousouzei.mid tone.js json,kosukesuzuki,JSON,Sunday 2nd of July 2023 05:27:26 AM CDT,"{
  ""header"": {
    ""keySignatures"": [
      {
        ""key"": ""Gb"",
        ""scale"": ""minor"",
        ""ticks"": 0
      },
      {
        ""key"": ""G"",
        ""scale"": ""minor"",
        ""ticks"": 107520
      },
      {
        ""key"": ""Gb"",
        ""scale"": ""minor"",
        ""ticks"": 153600
      },
      {
        ""key"": ""G"",
        ""scale"": ""minor"",
        ""ticks"": 253440
      },
      {
        ""key"": ""D"",
        ""scale"": ""minor"",
        ""ticks"": 299520
      },
      {
        ""key"": ""G"",
        ""scale"": ""minor"",
        ""ticks"": 360960
      },
      {
        ""key"": ""Ab"",
        ""scale"": ""minor"",
        ""ticks"": 384000
      }
    ],
    ""meta"": [],
    ""name"": """",
    ""ppq"": 960,
    ""tempos"": [
      {
        ""bpm"": 134.00005806669182,
        ""ticks"": 0
      }
    ],
    ""timeSignatures"": []
  },
  ""tracks"": [
    {
      ""channel"": 0,
      ""controlChanges"": {
        ""7"": [
          {
            ""number"": 7,
            ""ticks"": 0,
            ""time"": 0,
            ""value"": 0.7874015748031497
          }
        ]
      },
      ""pitchBends"": [],
      ""instrument"": {
        ""family"": ""piano"",
        ""number"": 1,
        ""name"": ""bright acoustic piano""
      },
      ""name"": """",
      ""notes"": [
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 3840,
          ""time"": 1.791044,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 4320,
          ""time"": 2.0149245000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 4800,
          ""time"": 2.238805,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 5280,
          ""time"": 2.4626855,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000033,
          ""durationTicks"": 720,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 5760,
          ""time"": 2.686566,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 6480,
          ""time"": 3.0223867500000003,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 7200,
          ""time"": 3.3582075000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 8160,
          ""time"": 3.8059685,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 8640,
          ""time"": 4.0298490000000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 9120,
          ""time"": 4.2537295,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999999,
          ""durationTicks"": 720,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 9600,
          ""time"": 4.47761,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 10320,
          ""time"": 4.81343075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 11520,
          ""time"": 5.373132,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 12000,
          ""time"": 5.5970125,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 12480,
          ""time"": 5.820893,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 12960,
          ""time"": 6.044773500000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 13440,
          ""time"": 6.268654000000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 13920,
          ""time"": 6.4925345000000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 14160,
          ""time"": 6.6044747500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 14880,
          ""time"": 6.9402955,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 15840,
          ""time"": 7.3880565,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 16320,
          ""time"": 7.611937,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 16800,
          ""time"": 7.8358175,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 17280,
          ""time"": 8.059698000000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 17760,
          ""time"": 8.2835785,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999999,
          ""durationTicks"": 720,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 18000,
          ""time"": 8.39551875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 19200,
          ""time"": 8.95522,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 19680,
          ""time"": 9.1791005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 20160,
          ""time"": 9.402981,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 20640,
          ""time"": 9.6268615,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 21120,
          ""time"": 9.850742,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 21600,
          ""time"": 10.0746225,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 21840,
          ""time"": 10.18656275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 22560,
          ""time"": 10.5223835,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 23520,
          ""time"": 10.9701445,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 24000,
          ""time"": 11.194025,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 24480,
          ""time"": 11.4179055,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 24960,
          ""time"": 11.641786,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000174,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 25440,
          ""time"": 11.8656665,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 25680,
          ""time"": 11.977606750000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 26880,
          ""time"": 12.537308000000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 27360,
          ""time"": 12.761188500000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 27840,
          ""time"": 12.985069000000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 28320,
          ""time"": 13.208949500000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 28800,
          ""time"": 13.432830000000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 29280,
          ""time"": 13.6567105,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 29520,
          ""time"": 13.76865075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 30240,
          ""time"": 14.1044715,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 31200,
          ""time"": 14.5522325,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 31680,
          ""time"": 14.776113,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 32160,
          ""time"": 14.9999935,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 32640,
          ""time"": 15.223874,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 33120,
          ""time"": 15.4477545,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000000163,
          ""durationTicks"": 960,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 33600,
          ""time"": 15.671635,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 34560,
          ""time"": 16.119396000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 49920,
          ""time"": 23.283572,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 50400,
          ""time"": 23.5074525,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 50880,
          ""time"": 23.731333,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 51360,
          ""time"": 23.955213500000003,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999999,
          ""durationTicks"": 720,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 51840,
          ""time"": 24.179094000000003,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 52560,
          ""time"": 24.514914750000003,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 53280,
          ""time"": 24.850735500000003,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 54240,
          ""time"": 25.298496500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 54720,
          ""time"": 25.522377000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 55200,
          ""time"": 25.746257500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999999,
          ""durationTicks"": 720,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 55680,
          ""time"": 25.970138000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 56400,
          ""time"": 26.305958750000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 57600,
          ""time"": 26.865660000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 58080,
          ""time"": 27.089540500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 58560,
          ""time"": 27.313421,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 59040,
          ""time"": 27.5373015,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 59520,
          ""time"": 27.761182,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 60000,
          ""time"": 27.9850625,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 60240,
          ""time"": 28.09700275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 60960,
          ""time"": 28.4328235,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 61920,
          ""time"": 28.8805845,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 62400,
          ""time"": 29.104465,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 62880,
          ""time"": 29.3283455,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 63360,
          ""time"": 29.552226,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 63840,
          ""time"": 29.7761065,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 64320,
          ""time"": 29.999987,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 65280,
          ""time"": 30.447748,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 65760,
          ""time"": 30.6716285,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 66240,
          ""time"": 30.895509,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 66720,
          ""time"": 31.1193895,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 67200,
          ""time"": 31.34327,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 67680,
          ""time"": 31.5671505,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999996,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 67920,
          ""time"": 31.67909075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 68640,
          ""time"": 32.014911500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 69600,
          ""time"": 32.462672500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 70080,
          ""time"": 32.686553,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 70560,
          ""time"": 32.9104335,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 71040,
          ""time"": 33.134314,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 71520,
          ""time"": 33.3581945,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 71760,
          ""time"": 33.47013475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 72960,
          ""time"": 34.029836,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 73440,
          ""time"": 34.2537165,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 73920,
          ""time"": 34.477597,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 74400,
          ""time"": 34.7014775,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 74880,
          ""time"": 34.925358,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 75360,
          ""time"": 35.1492385,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 75600,
          ""time"": 35.26117875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 76320,
          ""time"": 35.5969995,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 77280,
          ""time"": 36.0447605,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 77760,
          ""time"": 36.268641,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 78240,
          ""time"": 36.4925215,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 78720,
          ""time"": 36.716402,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 79200,
          ""time"": 36.9402825,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 79680,
          ""time"": 37.164163,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 80640,
          ""time"": 37.611924,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 56,
          ""name"": ""G#3"",
          ""ticks"": 84480,
          ""time"": 39.402968,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 58,
          ""name"": ""A#3"",
          ""ticks"": 85200,
          ""time"": 39.738788750000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 59,
          ""name"": ""B3"",
          ""ticks"": 85920,
          ""time"": 40.0746095,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 86400,
          ""time"": 40.29849,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 59,
          ""name"": ""B3"",
          ""ticks"": 87360,
          ""time"": 40.746251,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 58,
          ""name"": ""A#3"",
          ""ticks"": 88320,
          ""time"": 41.194012,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 89040,
          ""time"": 41.529832750000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 89760,
          ""time"": 41.8656535,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 91200,
          ""time"": 42.537295,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 91680,
          ""time"": 42.7611755,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 92160,
          ""time"": 42.985056,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 92640,
          ""time"": 43.2089365,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 92880,
          ""time"": 43.320876750000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 93600,
          ""time"": 43.6566975,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 94080,
          ""time"": 43.880578,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 94560,
          ""time"": 44.1044585,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 94800,
          ""time"": 44.21639875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 95520,
          ""time"": 44.5522195,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 96000,
          ""time"": 44.7761,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 96480,
          ""time"": 44.9999805,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 96720,
          ""time"": 45.11192075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 97440,
          ""time"": 45.4477415,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 97920,
          ""time"": 45.671622,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 98640,
          ""time"": 46.00744275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 99360,
          ""time"": 46.3432635,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 99840,
          ""time"": 46.567144,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 100080,
          ""time"": 46.67908425,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 1.5671635000000066,
          ""durationTicks"": 3360,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 100320,
          ""time"": 46.7910245,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 106080,
          ""time"": 49.477590500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 106560,
          ""time"": 49.701471000000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 107040,
          ""time"": 49.925351500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 107520,
          ""time"": 50.149232000000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 108240,
          ""time"": 50.48505275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 108960,
          ""time"": 50.820873500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 109920,
          ""time"": 51.268634500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 110400,
          ""time"": 51.492515000000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 110880,
          ""time"": 51.716395500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 111360,
          ""time"": 51.940276000000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 112080,
          ""time"": 52.27609675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 112800,
          ""time"": 52.611917500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 113760,
          ""time"": 53.059678500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 114240,
          ""time"": 53.283559000000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 114720,
          ""time"": 53.507439500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 115200,
          ""time"": 53.731320000000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 74,
          ""name"": ""D5"",
          ""ticks"": 115920,
          ""time"": 54.06714075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 116640,
          ""time"": 54.4029615,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 117600,
          ""time"": 54.8507225,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 118080,
          ""time"": 55.074603,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 118560,
          ""time"": 55.2984835,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 119040,
          ""time"": 55.522364,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 74,
          ""name"": ""D5"",
          ""ticks"": 119760,
          ""time"": 55.85818475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 120480,
          ""time"": 56.1940055,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 121440,
          ""time"": 56.6417665,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 121920,
          ""time"": 56.865647,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 122400,
          ""time"": 57.0895275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 122880,
          ""time"": 57.313408,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 123600,
          ""time"": 57.649228750000006,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 124320,
          ""time"": 57.9850495,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 125280,
          ""time"": 58.4328105,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 125760,
          ""time"": 58.656691,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 126240,
          ""time"": 58.8805715,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 126720,
          ""time"": 59.104452,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 127440,
          ""time"": 59.440272750000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 128160,
          ""time"": 59.7760935,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 129120,
          ""time"": 60.2238545,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 130080,
          ""time"": 60.6716155,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 130560,
          ""time"": 60.895496,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 74,
          ""name"": ""D5"",
          ""ticks"": 131280,
          ""time"": 61.231316750000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 132000,
          ""time"": 61.5671375,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 132960,
          ""time"": 62.0148985,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 133440,
          ""time"": 62.238779,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 133920,
          ""time"": 62.4626595,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 134400,
          ""time"": 62.68654,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 74,
          ""name"": ""D5"",
          ""ticks"": 135120,
          ""time"": 63.022360750000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.6716415000000069,
          ""durationTicks"": 1440,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 135840,
          ""time"": 63.3581815,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 137280,
          ""time"": 64.02982300000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 138240,
          ""time"": 64.47758400000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 138720,
          ""time"": 64.7014645,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 139200,
          ""time"": 64.92534500000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 139680,
          ""time"": 65.1492255,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 140160,
          ""time"": 65.373106,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 140880,
          ""time"": 65.70892675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 141600,
          ""time"": 66.0447475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 142080,
          ""time"": 66.268628,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 142560,
          ""time"": 66.4925085,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 143040,
          ""time"": 66.716389,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 143520,
          ""time"": 66.9402695,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 144000,
          ""time"": 67.16415,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 144480,
          ""time"": 67.3880305,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 144720,
          ""time"": 67.49997075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 145440,
          ""time"": 67.8357915,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 145920,
          ""time"": 68.059672,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 146400,
          ""time"": 68.2835525,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 146880,
          ""time"": 68.507433,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 147360,
          ""time"": 68.7313135,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 147840,
          ""time"": 68.955194,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 148560,
          ""time"": 69.29101475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 149280,
          ""time"": 69.6268355,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 149760,
          ""time"": 69.850716,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 152640,
          ""time"": 71.193999,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 168960,
          ""time"": 78.805936,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 169440,
          ""time"": 79.02981650000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 169920,
          ""time"": 79.253697,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 170400,
          ""time"": 79.47757750000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 170880,
          ""time"": 79.701458,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 171600,
          ""time"": 80.03727875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 172320,
          ""time"": 80.37309950000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 173280,
          ""time"": 80.82086050000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 173760,
          ""time"": 81.044741,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 174240,
          ""time"": 81.26862150000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 174720,
          ""time"": 81.492502,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 175440,
          ""time"": 81.82832275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 176640,
          ""time"": 82.388024,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 177120,
          ""time"": 82.61190450000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 177600,
          ""time"": 82.835785,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 178080,
          ""time"": 83.05966550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 178560,
          ""time"": 83.283546,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 179040,
          ""time"": 83.50742650000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 179280,
          ""time"": 83.61936675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 180000,
          ""time"": 83.95518750000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 180960,
          ""time"": 84.40294850000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 181440,
          ""time"": 84.626829,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 181920,
          ""time"": 84.85070950000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 182400,
          ""time"": 85.07459,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 182880,
          ""time"": 85.29847050000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.5597012500000034,
          ""durationTicks"": 1200,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 183120,
          ""time"": 85.41041075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 184320,
          ""time"": 85.970112,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 184800,
          ""time"": 86.19399250000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 185280,
          ""time"": 86.417873,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 185760,
          ""time"": 86.64175350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 186240,
          ""time"": 86.865634,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 186720,
          ""time"": 87.0895145,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 186960,
          ""time"": 87.20145475000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 187680,
          ""time"": 87.5372755,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 188640,
          ""time"": 87.9850365,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 189120,
          ""time"": 88.208917,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 189600,
          ""time"": 88.4327975,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 190080,
          ""time"": 88.656678,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 190560,
          ""time"": 88.8805585,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 190800,
          ""time"": 88.99249875000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 192000,
          ""time"": 89.5522,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 192480,
          ""time"": 89.7760805,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 192960,
          ""time"": 89.999961,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 193440,
          ""time"": 90.2238415,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 193920,
          ""time"": 90.447722,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 194400,
          ""time"": 90.6716025,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 194640,
          ""time"": 90.78354275000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 195360,
          ""time"": 91.1193635,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 196320,
          ""time"": 91.5671245,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 196800,
          ""time"": 91.791005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 197280,
          ""time"": 92.0148855,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 197760,
          ""time"": 92.238766,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 198240,
          ""time"": 92.4626465,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 198720,
          ""time"": 92.686527,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 199680,
          ""time"": 93.134288,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 200160,
          ""time"": 93.3581685,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 200640,
          ""time"": 93.582049,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 201120,
          ""time"": 93.8059295,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 201600,
          ""time"": 94.02981,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 202080,
          ""time"": 94.2536905,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 202320,
          ""time"": 94.36563075000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 203040,
          ""time"": 94.7014515,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 204000,
          ""time"": 95.1492125,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 204480,
          ""time"": 95.373093,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 204960,
          ""time"": 95.5969735,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 205440,
          ""time"": 95.82085400000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 205920,
          ""time"": 96.0447345,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 206160,
          ""time"": 96.15667475000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 207360,
          ""time"": 96.71637600000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 207840,
          ""time"": 96.9402565,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 208320,
          ""time"": 97.16413700000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 208800,
          ""time"": 97.3880175,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 209280,
          ""time"": 97.61189800000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 209760,
          ""time"": 97.8357785,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 210000,
          ""time"": 97.94771875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 210720,
          ""time"": 98.2835395,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 211680,
          ""time"": 98.7313005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 212160,
          ""time"": 98.95518100000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 212640,
          ""time"": 99.1790615,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 213120,
          ""time"": 99.40294200000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 213600,
          ""time"": 99.6268225,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 214080,
          ""time"": 99.85070300000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 215040,
          ""time"": 100.29846400000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 215520,
          ""time"": 100.5223445,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 216000,
          ""time"": 100.74622500000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 216480,
          ""time"": 100.9701055,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 216960,
          ""time"": 101.19398600000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 217440,
          ""time"": 101.4178665,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 217680,
          ""time"": 101.52980675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 218400,
          ""time"": 101.8656275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 219360,
          ""time"": 102.3133885,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 219840,
          ""time"": 102.53726900000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 220320,
          ""time"": 102.7611495,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 220800,
          ""time"": 102.98503000000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 221520,
          ""time"": 103.32085075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 222720,
          ""time"": 103.88055200000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 223200,
          ""time"": 104.1044325,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 223680,
          ""time"": 104.32831300000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 224160,
          ""time"": 104.5521935,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 224640,
          ""time"": 104.77607400000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 225120,
          ""time"": 104.9999545,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 225360,
          ""time"": 105.11189475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 226080,
          ""time"": 105.4477155,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 227040,
          ""time"": 105.8954765,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 227520,
          ""time"": 106.11935700000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 228000,
          ""time"": 106.3432375,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 228480,
          ""time"": 106.56711800000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 228960,
          ""time"": 106.7909985,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 229440,
          ""time"": 107.01487900000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 56,
          ""name"": ""G#3"",
          ""ticks"": 230400,
          ""time"": 107.46264000000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 58,
          ""name"": ""A#3"",
          ""ticks"": 231120,
          ""time"": 107.79846075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 59,
          ""name"": ""B3"",
          ""ticks"": 231840,
          ""time"": 108.1342815,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 232320,
          ""time"": 108.35816200000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 59,
          ""name"": ""B3"",
          ""ticks"": 233280,
          ""time"": 108.805923,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 58,
          ""name"": ""A#3"",
          ""ticks"": 234240,
          ""time"": 109.253684,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 234960,
          ""time"": 109.58950475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 235680,
          ""time"": 109.9253255,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 237120,
          ""time"": 110.596967,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 237600,
          ""time"": 110.8208475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 238080,
          ""time"": 111.044728,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 238560,
          ""time"": 111.2686085,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 238800,
          ""time"": 111.38054875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 239520,
          ""time"": 111.7163695,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 240000,
          ""time"": 111.94025,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 240480,
          ""time"": 112.1641305,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 240720,
          ""time"": 112.27607075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 61,
          ""name"": ""C#4"",
          ""ticks"": 241440,
          ""time"": 112.6118915,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 241920,
          ""time"": 112.835772,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 242400,
          ""time"": 113.0596525,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 242640,
          ""time"": 113.17159275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 243360,
          ""time"": 113.5074135,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 243840,
          ""time"": 113.731294,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 244560,
          ""time"": 114.06711475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 245280,
          ""time"": 114.4029355,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 245760,
          ""time"": 114.626816,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 246000,
          ""time"": 114.73875625000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 1.5671634999999924,
          ""durationTicks"": 3360,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 246240,
          ""time"": 114.85069650000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 252000,
          ""time"": 117.53726250000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 252480,
          ""time"": 117.761143,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 252960,
          ""time"": 117.98502350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 253440,
          ""time"": 118.208904,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 254160,
          ""time"": 118.54472475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 254880,
          ""time"": 118.88054550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 255840,
          ""time"": 119.32830650000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 256320,
          ""time"": 119.552187,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 256800,
          ""time"": 119.77606750000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 257280,
          ""time"": 119.999948,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 258000,
          ""time"": 120.33576875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 258720,
          ""time"": 120.67158950000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 259680,
          ""time"": 121.11935050000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 260160,
          ""time"": 121.343231,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 260640,
          ""time"": 121.56711150000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 261120,
          ""time"": 121.790992,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 74,
          ""name"": ""D5"",
          ""ticks"": 261840,
          ""time"": 122.12681275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 262560,
          ""time"": 122.46263350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 263520,
          ""time"": 122.91039450000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 264000,
          ""time"": 123.134275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 264480,
          ""time"": 123.35815550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 264960,
          ""time"": 123.582036,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 74,
          ""name"": ""D5"",
          ""ticks"": 265680,
          ""time"": 123.91785675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 266400,
          ""time"": 124.25367750000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 267360,
          ""time"": 124.70143850000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 267840,
          ""time"": 124.925319,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 268320,
          ""time"": 125.14919950000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 268800,
          ""time"": 125.37308,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 269520,
          ""time"": 125.70890075000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 270240,
          ""time"": 126.04472150000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 271200,
          ""time"": 126.49248250000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 271680,
          ""time"": 126.716363,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 272160,
          ""time"": 126.94024350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 272640,
          ""time"": 127.164124,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 273360,
          ""time"": 127.49994475000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 274080,
          ""time"": 127.83576550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 275040,
          ""time"": 128.2835265,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 276000,
          ""time"": 128.7312875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 276480,
          ""time"": 128.95516800000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 74,
          ""name"": ""D5"",
          ""ticks"": 277200,
          ""time"": 129.29098875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 277920,
          ""time"": 129.6268095,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 278880,
          ""time"": 130.0745705,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 279360,
          ""time"": 130.298451,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 279840,
          ""time"": 130.5223315,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 280320,
          ""time"": 130.746212,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 74,
          ""name"": ""D5"",
          ""ticks"": 281040,
          ""time"": 131.08203275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.6716414999999927,
          ""durationTicks"": 1440,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 281760,
          ""time"": 131.4178535,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 283200,
          ""time"": 132.089495,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 284160,
          ""time"": 132.537256,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 284640,
          ""time"": 132.7611365,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 285120,
          ""time"": 132.985017,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 285600,
          ""time"": 133.2088975,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 286080,
          ""time"": 133.432778,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 286800,
          ""time"": 133.76859875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 287520,
          ""time"": 134.1044195,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 288000,
          ""time"": 134.3283,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999751,
          ""durationTicks"": 240,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 288480,
          ""time"": 134.55218050000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 288960,
          ""time"": 134.776061,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 289440,
          ""time"": 134.9999415,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 289920,
          ""time"": 135.223822,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999751,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 290400,
          ""time"": 135.44770250000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 290640,
          ""time"": 135.55964275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 291360,
          ""time"": 135.8954635,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 291840,
          ""time"": 136.119344,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 292320,
          ""time"": 136.34322450000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 292800,
          ""time"": 136.567105,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 293280,
          ""time"": 136.7909855,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 293760,
          ""time"": 137.014866,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 294480,
          ""time"": 137.35068675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 295200,
          ""time"": 137.6865075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 295680,
          ""time"": 137.910388,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 299520,
          ""time"": 139.701432,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 300480,
          ""time"": 140.149193,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 301440,
          ""time"": 140.596954,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 302400,
          ""time"": 141.044715,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 303360,
          ""time"": 141.492476,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 304320,
          ""time"": 141.940237,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 305280,
          ""time"": 142.387998,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 305760,
          ""time"": 142.61187850000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 306240,
          ""time"": 142.835759,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 307200,
          ""time"": 143.28352,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 308160,
          ""time"": 143.731281,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 309120,
          ""time"": 144.179042,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 310080,
          ""time"": 144.626803,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 311040,
          ""time"": 145.074564,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 312000,
          ""time"": 145.522325,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 312960,
          ""time"": 145.970086,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 313440,
          ""time"": 146.19396650000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 313920,
          ""time"": 146.417847,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 314880,
          ""time"": 146.865608,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 315840,
          ""time"": 147.313369,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 316800,
          ""time"": 147.76113,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 317760,
          ""time"": 148.208891,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 318720,
          ""time"": 148.656652,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 319680,
          ""time"": 149.104413,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 320640,
          ""time"": 149.552174,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 321120,
          ""time"": 149.77605450000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 321600,
          ""time"": 149.999935,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 323040,
          ""time"": 150.67157650000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 323520,
          ""time"": 150.895457,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 324480,
          ""time"": 151.343218,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 324960,
          ""time"": 151.56709850000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 325920,
          ""time"": 152.0148595,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 326400,
          ""time"": 152.23874,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 327360,
          ""time"": 152.686501,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 327840,
          ""time"": 152.9103815,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 330240,
          ""time"": 154.029784,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 331200,
          ""time"": 154.47754500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 332160,
          ""time"": 154.925306,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 333120,
          ""time"": 155.37306700000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 334080,
          ""time"": 155.820828,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 335040,
          ""time"": 156.26858900000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 336000,
          ""time"": 156.71635,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 336480,
          ""time"": 156.9402305,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 336960,
          ""time"": 157.16411100000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 337920,
          ""time"": 157.611872,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 338880,
          ""time"": 158.05963300000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 339840,
          ""time"": 158.507394,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 340800,
          ""time"": 158.95515500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 341760,
          ""time"": 159.402916,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 342720,
          ""time"": 159.85067700000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 343680,
          ""time"": 160.298438,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 344160,
          ""time"": 160.5223185,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 344640,
          ""time"": 160.74619900000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 345600,
          ""time"": 161.19396,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 346560,
          ""time"": 161.64172100000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 347520,
          ""time"": 162.089482,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 348480,
          ""time"": 162.53724300000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 349440,
          ""time"": 162.985004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 350400,
          ""time"": 163.43276500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 351360,
          ""time"": 163.880526,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 351840,
          ""time"": 164.1044065,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 352320,
          ""time"": 164.32828700000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 353760,
          ""time"": 164.9999285,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 354240,
          ""time"": 165.22380900000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 355200,
          ""time"": 165.67157,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 355680,
          ""time"": 165.8954505,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 356640,
          ""time"": 166.3432115,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 357120,
          ""time"": 166.567092,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 57,
          ""name"": ""A3"",
          ""ticks"": 360960,
          ""time"": 168.358136,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 59,
          ""name"": ""B3"",
          ""ticks"": 361680,
          ""time"": 168.69395675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 60,
          ""name"": ""C4"",
          ""ticks"": 362400,
          ""time"": 169.0297775,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 362880,
          ""time"": 169.253658,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 60,
          ""name"": ""C4"",
          ""ticks"": 363840,
          ""time"": 169.70141900000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 59,
          ""name"": ""B3"",
          ""ticks"": 364800,
          ""time"": 170.14918,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 365520,
          ""time"": 170.48500075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 366240,
          ""time"": 170.8208215,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 367680,
          ""time"": 171.49246300000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 368160,
          ""time"": 171.7163435,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 368640,
          ""time"": 171.940224,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 369120,
          ""time"": 172.1641045,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 369360,
          ""time"": 172.27604475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 370080,
          ""time"": 172.61186550000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 370560,
          ""time"": 172.835746,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 371040,
          ""time"": 173.0596265,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 371280,
          ""time"": 173.17156675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 372000,
          ""time"": 173.50738750000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 372480,
          ""time"": 173.731268,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 372960,
          ""time"": 173.9551485,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 373200,
          ""time"": 174.06708875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 373920,
          ""time"": 174.40290950000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 374400,
          ""time"": 174.62679,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 375120,
          ""time"": 174.96261075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 375840,
          ""time"": 175.29843150000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 376320,
          ""time"": 175.522312,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 376560,
          ""time"": 175.63425225,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 1.5671634999999924,
          ""durationTicks"": 3360,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 376800,
          ""time"": 175.7461925,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 382560,
          ""time"": 178.4327585,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 383040,
          ""time"": 178.656639,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999751,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 383520,
          ""time"": 178.88051950000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 384000,
          ""time"": 179.1044,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 384720,
          ""time"": 179.44022075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 385440,
          ""time"": 179.77604150000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 386400,
          ""time"": 180.2238025,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 386880,
          ""time"": 180.447683,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 387360,
          ""time"": 180.67156350000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 387840,
          ""time"": 180.895444,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 388560,
          ""time"": 181.23126475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 389280,
          ""time"": 181.56708550000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 390240,
          ""time"": 182.0148465,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 390720,
          ""time"": 182.238727,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 391200,
          ""time"": 182.46260750000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 391680,
          ""time"": 182.686488,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 75,
          ""name"": ""D#5"",
          ""ticks"": 392400,
          ""time"": 183.02230875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 393120,
          ""time"": 183.35812950000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 394080,
          ""time"": 183.8058905,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 394560,
          ""time"": 184.029771,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 395040,
          ""time"": 184.25365150000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 395520,
          ""time"": 184.477532,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 75,
          ""name"": ""D#5"",
          ""ticks"": 396240,
          ""time"": 184.81335275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 396960,
          ""time"": 185.14917350000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 397920,
          ""time"": 185.5969345,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 398400,
          ""time"": 185.820815,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 398880,
          ""time"": 186.04469550000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 399360,
          ""time"": 186.268576,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 400080,
          ""time"": 186.60439675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 400800,
          ""time"": 186.94021750000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 401760,
          ""time"": 187.3879785,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 402240,
          ""time"": 187.611859,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 402720,
          ""time"": 187.83573950000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 403200,
          ""time"": 188.05962,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 403920,
          ""time"": 188.39544075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 404640,
          ""time"": 188.73126150000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 405600,
          ""time"": 189.1790225,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 406560,
          ""time"": 189.62678350000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 407040,
          ""time"": 189.850664,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 75,
          ""name"": ""D#5"",
          ""ticks"": 407760,
          ""time"": 190.18648475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 408480,
          ""time"": 190.52230550000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 409440,
          ""time"": 190.9700665,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 409920,
          ""time"": 191.193947,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 410400,
          ""time"": 191.41782750000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 410880,
          ""time"": 191.64170800000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 75,
          ""name"": ""D#5"",
          ""ticks"": 411600,
          ""time"": 191.97752875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 412320,
          ""time"": 192.31334950000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 413280,
          ""time"": 192.7611105,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 413760,
          ""time"": 192.984991,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 414240,
          ""time"": 193.20887150000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 414720,
          ""time"": 193.43275200000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 415440,
          ""time"": 193.76857275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 416160,
          ""time"": 194.10439350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 417120,
          ""time"": 194.5521545,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 417600,
          ""time"": 194.776035,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 418080,
          ""time"": 194.99991550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 418560,
          ""time"": 195.22379600000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 419280,
          ""time"": 195.55961675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 420000,
          ""time"": 195.8954375,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 420960,
          ""time"": 196.3431985,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 421440,
          ""time"": 196.567079,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 421920,
          ""time"": 196.7909595,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 422400,
          ""time"": 197.01484000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 75,
          ""name"": ""D#5"",
          ""ticks"": 423120,
          ""time"": 197.35066075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 423840,
          ""time"": 197.6864815,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 424800,
          ""time"": 198.1342425,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 425280,
          ""time"": 198.358123,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 425760,
          ""time"": 198.5820035,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 426240,
          ""time"": 198.80588400000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 75,
          ""name"": ""D#5"",
          ""ticks"": 426960,
          ""time"": 199.14170475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 427680,
          ""time"": 199.4775255,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 428640,
          ""time"": 199.9252865,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 429120,
          ""time"": 200.149167,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 429600,
          ""time"": 200.3730475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 430080,
          ""time"": 200.59692800000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 430800,
          ""time"": 200.93274875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 431520,
          ""time"": 201.2685695,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 432480,
          ""time"": 201.7163305,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 432960,
          ""time"": 201.940211,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 433440,
          ""time"": 202.1640915,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 433920,
          ""time"": 202.38797200000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 434640,
          ""time"": 202.72379275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 435360,
          ""time"": 203.0596135,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 436320,
          ""time"": 203.5073745,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 436800,
          ""time"": 203.731255,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 437280,
          ""time"": 203.9551355,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 437760,
          ""time"": 204.17901600000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 75,
          ""name"": ""D#5"",
          ""ticks"": 438480,
          ""time"": 204.51483675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 439200,
          ""time"": 204.8506575,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 440160,
          ""time"": 205.2984185,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 440640,
          ""time"": 205.522299,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 441120,
          ""time"": 205.7461795,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 441600,
          ""time"": 205.97006000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 75,
          ""name"": ""D#5"",
          ""ticks"": 442320,
          ""time"": 206.30588075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 443040,
          ""time"": 206.6417015,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 444480,
          ""time"": 207.313343,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 445440,
          ""time"": 207.76110400000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 445920,
          ""time"": 207.9849845,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 446400,
          ""time"": 208.208865,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 446880,
          ""time"": 208.4327455,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 447360,
          ""time"": 208.65662600000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 448080,
          ""time"": 208.99244675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 448800,
          ""time"": 209.3282675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 449280,
          ""time"": 209.55214800000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 449760,
          ""time"": 209.7760285,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 450240,
          ""time"": 209.999909,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 450720,
          ""time"": 210.2237895,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 451200,
          ""time"": 210.44767000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999751,
          ""durationTicks"": 240,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 451680,
          ""time"": 210.67155050000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 451920,
          ""time"": 210.78349075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 452640,
          ""time"": 211.1193115,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 453120,
          ""time"": 211.34319200000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 72,
          ""name"": ""C5"",
          ""ticks"": 453600,
          ""time"": 211.56707250000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 454080,
          ""time"": 211.790953,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 454560,
          ""time"": 212.0148335,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 455040,
          ""time"": 212.23871400000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 455760,
          ""time"": 212.57453475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 456480,
          ""time"": 212.9103555,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 456960,
          ""time"": 213.13423600000002,
          ""velocity"": 0.7874015748031497
        }
      ],
      ""endOfTrackTicks"": 460800
    },
    {
      ""channel"": 1,
      ""controlChanges"": {
        ""7"": [
          {
            ""number"": 7,
            ""ticks"": 0,
            ""time"": 0,
            ""value"": 0.6299212598425197
          }
        ]
      },
      ""pitchBends"": [],
      ""instrument"": {
        ""family"": ""piano"",
        ""number"": 1,
        ""name"": ""bright acoustic piano""
      },
      ""name"": """",
      ""notes"": [
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 84480,
          ""time"": 39.402968,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 85200,
          ""time"": 39.738788750000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 85920,
          ""time"": 40.0746095,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 86400,
          ""time"": 40.29849,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 87360,
          ""time"": 40.746251,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 88320,
          ""time"": 41.194012,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 89040,
          ""time"": 41.529832750000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 89760,
          ""time"": 41.8656535,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 106080,
          ""time"": 49.477590500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 106560,
          ""time"": 49.701471000000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 107040,
          ""time"": 49.925351500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 107520,
          ""time"": 50.149232000000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 108240,
          ""time"": 50.48505275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 108960,
          ""time"": 50.820873500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 109920,
          ""time"": 51.268634500000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 110400,
          ""time"": 51.492515000000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 110880,
          ""time"": 51.716395500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 113760,
          ""time"": 53.059678500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 114240,
          ""time"": 53.283559000000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 114720,
          ""time"": 53.507439500000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 115200,
          ""time"": 53.731320000000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 115920,
          ""time"": 54.06714075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 116640,
          ""time"": 54.4029615,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194024999999641,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 117600,
          ""time"": 54.8507225,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 118080,
          ""time"": 55.074603,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 118560,
          ""time"": 55.2984835,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 119040,
          ""time"": 55.522364,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 119760,
          ""time"": 55.85818475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 120480,
          ""time"": 56.1940055,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 121440,
          ""time"": 56.6417665,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 121920,
          ""time"": 56.865647,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 122400,
          ""time"": 57.0895275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 122880,
          ""time"": 57.313408,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 123600,
          ""time"": 57.649228750000006,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 124320,
          ""time"": 57.9850495,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 125280,
          ""time"": 58.4328105,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 125760,
          ""time"": 58.656691,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 126240,
          ""time"": 58.8805715,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 126720,
          ""time"": 59.104452,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 57,
          ""name"": ""A3"",
          ""ticks"": 127440,
          ""time"": 59.440272750000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 57,
          ""name"": ""A3"",
          ""ticks"": 128160,
          ""time"": 59.7760935,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 129120,
          ""time"": 60.2238545,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 130080,
          ""time"": 60.6716155,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 130560,
          ""time"": 60.895496,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 131280,
          ""time"": 61.231316750000005,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 132000,
          ""time"": 61.5671375,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 132960,
          ""time"": 62.0148985,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 133440,
          ""time"": 62.238779,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999993,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 133920,
          ""time"": 62.4626595,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000000344,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 134400,
          ""time"": 62.68654,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 135120,
          ""time"": 63.022360750000004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.6716415000000069,
          ""durationTicks"": 1440,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 135840,
          ""time"": 63.3581815,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 230400,
          ""time"": 107.46264000000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 231120,
          ""time"": 107.79846075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 231840,
          ""time"": 108.1342815,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 232320,
          ""time"": 108.35816200000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 233280,
          ""time"": 108.805923,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 234240,
          ""time"": 109.253684,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 234960,
          ""time"": 109.58950475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 70,
          ""name"": ""A#4"",
          ""ticks"": 235680,
          ""time"": 109.9253255,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 252000,
          ""time"": 117.53726250000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 252480,
          ""time"": 117.761143,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 252960,
          ""time"": 117.98502350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 253440,
          ""time"": 118.208904,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 254160,
          ""time"": 118.54472475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 254880,
          ""time"": 118.88054550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 255840,
          ""time"": 119.32830650000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 256320,
          ""time"": 119.552187,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 256800,
          ""time"": 119.77606750000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 259680,
          ""time"": 121.11935050000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 260160,
          ""time"": 121.343231,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 260640,
          ""time"": 121.56711150000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 261120,
          ""time"": 121.790992,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 261840,
          ""time"": 122.12681275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 262560,
          ""time"": 122.46263350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.1119402499999893,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 263520,
          ""time"": 122.91039450000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 264000,
          ""time"": 123.134275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 264480,
          ""time"": 123.35815550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 264960,
          ""time"": 123.582036,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 265680,
          ""time"": 123.91785675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 266400,
          ""time"": 124.25367750000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 267360,
          ""time"": 124.70143850000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 267840,
          ""time"": 124.925319,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 268320,
          ""time"": 125.14919950000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 268800,
          ""time"": 125.37308,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 269520,
          ""time"": 125.70890075000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999999985,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 270240,
          ""time"": 126.04472150000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 271200,
          ""time"": 126.49248250000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 271680,
          ""time"": 126.716363,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388049999999282,
          ""durationTicks"": 480,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 272160,
          ""time"": 126.94024350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 272640,
          ""time"": 127.164124,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582074999999634,
          ""durationTicks"": 720,
          ""midi"": 57,
          ""name"": ""A3"",
          ""ticks"": 273360,
          ""time"": 127.49994475000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 57,
          ""name"": ""A3"",
          ""ticks"": 274080,
          ""time"": 127.83576550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 275040,
          ""time"": 128.2835265,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 276000,
          ""time"": 128.7312875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 276480,
          ""time"": 128.95516800000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 277200,
          ""time"": 129.29098875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 277920,
          ""time"": 129.6268095,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 278880,
          ""time"": 130.0745705,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 279360,
          ""time"": 130.298451,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 279840,
          ""time"": 130.5223315,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 62,
          ""name"": ""D4"",
          ""ticks"": 280320,
          ""time"": 130.746212,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 281040,
          ""time"": 131.08203275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.6716414999999927,
          ""durationTicks"": 1440,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 281760,
          ""time"": 131.4178535,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 64,
          ""name"": ""E4"",
          ""ticks"": 360960,
          ""time"": 168.358136,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 361680,
          ""time"": 168.69395675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 362400,
          ""time"": 169.0297775,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 362880,
          ""time"": 169.253658,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 363840,
          ""time"": 169.70141900000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 66,
          ""name"": ""F#4"",
          ""ticks"": 364800,
          ""time"": 170.14918,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 69,
          ""name"": ""A4"",
          ""ticks"": 365520,
          ""time"": 170.48500075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 71,
          ""name"": ""B4"",
          ""ticks"": 366240,
          ""time"": 170.8208215,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 413280,
          ""time"": 192.7611105,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 413760,
          ""time"": 192.984991,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 414240,
          ""time"": 193.20887150000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 414720,
          ""time"": 193.43275200000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 415440,
          ""time"": 193.76857275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 416160,
          ""time"": 194.10439350000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 417120,
          ""time"": 194.5521545,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 417600,
          ""time"": 194.776035,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 418080,
          ""time"": 194.99991550000001,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 420960,
          ""time"": 196.3431985,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 421440,
          ""time"": 196.567079,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 421920,
          ""time"": 196.7909595,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 422400,
          ""time"": 197.01484000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 423120,
          ""time"": 197.35066075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 423840,
          ""time"": 197.6864815,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 424800,
          ""time"": 198.1342425,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 425280,
          ""time"": 198.358123,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 425760,
          ""time"": 198.5820035,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 426240,
          ""time"": 198.80588400000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 426960,
          ""time"": 199.14170475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 427680,
          ""time"": 199.4775255,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 428640,
          ""time"": 199.9252865,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 429120,
          ""time"": 200.149167,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 429600,
          ""time"": 200.3730475,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 430080,
          ""time"": 200.59692800000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 430800,
          ""time"": 200.93274875,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 431520,
          ""time"": 201.2685695,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 432480,
          ""time"": 201.7163305,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 432960,
          ""time"": 201.940211,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 433440,
          ""time"": 202.1640915,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 433920,
          ""time"": 202.38797200000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 58,
          ""name"": ""A#3"",
          ""ticks"": 434640,
          ""time"": 202.72379275,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 58,
          ""name"": ""A#3"",
          ""ticks"": 435360,
          ""time"": 203.0596135,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 436320,
          ""time"": 203.5073745,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 436800,
          ""time"": 203.731255,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 437280,
          ""time"": 203.9551355,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 437760,
          ""time"": 204.17901600000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 438480,
          ""time"": 204.51483675,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 439200,
          ""time"": 204.8506575,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.11194025000000352,
          ""durationTicks"": 240,
          ""midi"": 65,
          ""name"": ""F4"",
          ""ticks"": 440160,
          ""time"": 205.2984185,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 440640,
          ""time"": 205.522299,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 441120,
          ""time"": 205.7461795,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.3358207499999821,
          ""durationTicks"": 720,
          ""midi"": 63,
          ""name"": ""D#4"",
          ""ticks"": 441600,
          ""time"": 205.97006000000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.33582075000001055,
          ""durationTicks"": 720,
          ""midi"": 68,
          ""name"": ""G#4"",
          ""ticks"": 442320,
          ""time"": 206.30588075,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.6716414999999927,
          ""durationTicks"": 1440,
          ""midi"": 67,
          ""name"": ""G4"",
          ""ticks"": 443040,
          ""time"": 206.6417015,
          ""velocity"": 0.7874015748031497
        }
      ],
      ""endOfTrackTicks"": 460800
    },
    {
      ""channel"": 0,
      ""controlChanges"": {},
      ""pitchBends"": [],
      ""instrument"": {
        ""family"": ""piano"",
        ""number"": 0,
        ""name"": ""acoustic grand piano""
      },
      ""name"": """",
      ""notes"": [
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 330240,
          ""time"": 154.029784,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 54,
          ""name"": ""F#3"",
          ""ticks"": 331200,
          ""time"": 154.47754500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 332160,
          ""time"": 154.925306,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 333120,
          ""time"": 155.37306700000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 334080,
          ""time"": 155.820828,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 54,
          ""name"": ""F#3"",
          ""ticks"": 335040,
          ""time"": 156.26858900000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 52,
          ""name"": ""E3"",
          ""ticks"": 336000,
          ""time"": 156.71635,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 336480,
          ""time"": 156.9402305,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 336960,
          ""time"": 157.16411100000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 337920,
          ""time"": 157.611872,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 54,
          ""name"": ""F#3"",
          ""ticks"": 338880,
          ""time"": 158.05963300000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 339840,
          ""time"": 158.507394,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 340800,
          ""time"": 158.95515500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 341760,
          ""time"": 159.402916,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 57,
          ""name"": ""A3"",
          ""ticks"": 342720,
          ""time"": 159.85067700000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 59,
          ""name"": ""B3"",
          ""ticks"": 343680,
          ""time"": 160.298438,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 344160,
          ""time"": 160.5223185,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 344640,
          ""time"": 160.74619900000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 345600,
          ""time"": 161.19396,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 54,
          ""name"": ""F#3"",
          ""ticks"": 346560,
          ""time"": 161.64172100000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 347520,
          ""time"": 162.089482,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 348480,
          ""time"": 162.53724300000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776100000001406,
          ""durationTicks"": 960,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 349440,
          ""time"": 162.985004,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 54,
          ""name"": ""F#3"",
          ""ticks"": 350400,
          ""time"": 163.43276500000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 52,
          ""name"": ""E3"",
          ""ticks"": 351360,
          ""time"": 163.880526,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 351840,
          ""time"": 164.1044065,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.44776099999998564,
          ""durationTicks"": 960,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 352320,
          ""time"": 164.32828700000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 353760,
          ""time"": 164.9999285,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.2238804999999786,
          ""durationTicks"": 480,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 354240,
          ""time"": 165.22380900000002,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 50,
          ""name"": ""D3"",
          ""ticks"": 355200,
          ""time"": 165.67157,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 355680,
          ""time"": 165.8954505,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 57,
          ""name"": ""A3"",
          ""ticks"": 356640,
          ""time"": 166.3432115,
          ""velocity"": 0.7874015748031497
        },
        {
          ""duration"": 0.22388050000000703,
          ""durationTicks"": 480,
          ""midi"": 55,
          ""name"": ""G3"",
          ""ticks"": 357120,
          ""time"": 166.567092,
          ""velocity"": 0.7874015748031497
        }
      ]
    }
  ]
}"
wqBqLPfm,move_1,georgi9232,Python,Sunday 2nd of July 2023 05:26:29 AM CDT,"start_position = int(input())
array = list(map(int, input().split("","")))

forward_sum = 0
backward_sum = 0
current_position = start_position

while True:
    instruction = input().strip().split()
    if instruction[0] == ""exit"":
        break

    steps = int(instruction[0])
    direction = instruction[1]
    size = int(instruction[2])

    if direction == ""forward"":
        new_position = (current_position + steps)
        if new_position != current_position:
            forward_sum += sum(array[current_position:new_position])

    elif direction == ""backwards"":
        new_pos = (current_position - steps)
        if new_position != current_position:
            backward_sum += sum(array[new_position:current_position])

    current_position = new_position


print(f""Forward: {forward_sum}"")
print(f""Backwards: {backward_sum}"")



"
Z9iReWqF,09. Fish Tank,veronikaaa86,Python,Sunday 2nd of July 2023 04:58:04 AM CDT,"length = int(input())
width = int(input())
height = int(input())
percent_acc = float(input())

volume = length * width * height
total_lt = volume / 1000
acc_volume = total_lt * (percent_acc / 100)
result = total_lt - acc_volume

print(result)"
URETZT93,08. Basketball Equipment,veronikaaa86,Python,Sunday 2nd of July 2023 04:48:24 AM CDT,"year_tax = int(input())

shoes_price = year_tax - (year_tax * 0.4)
suit_price = shoes_price - (shoes_price * 0.2)
ball_price = suit_price / 4
acc_price = ball_price / 5

total_price = shoes_price + suit_price + ball_price + acc_price + year_tax

print(total_price)
"
AYwKU3np,Untitled,Praom,MySQL,Sunday 2nd of July 2023 04:46:55 AM CDT,"UPDATE `creature_template` SET `AIName`='SmartAI' WHERE `entry` IN (86807);

DELETE FROM `smart_scripts` WHERE (`source_type`=0) AND `entryorguid` IN (86807);
INSERT INTO `smart_scripts`(`entryorguid`, `source_type`, `id`, `link`, `event_type`, `event_phase_mask`, `event_chance`, `event_flags`, `event_param1`, `event_param2`, `event_param3`, `event_param4`, `event_param5`, `action_type`, `action_param1`, `action_param2`, `action_param3`, `action_param4`, `action_param5`, `action_param6`, `action_param_float`, `action_delay`, `target_type`, `target_param1`, `target_param2`, `target_param3`, `target_param4`, `target_x`, `target_y`, `target_z`, `target_o`, `comment`) VALUES 
(86807, 0, 0, 0, 0, 0, 100, 0, 2000, 2000, 9000, 9000, 0, 11, 174872, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, ''), 
(86807, 0, 1, 0, 0, 0, 100, 0, 8000, 8000, 13000, 13000, 0, 11, 174876, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, '');"
VJzgA4U5,07. Food Delivery,veronikaaa86,Python,Sunday 2nd of July 2023 04:34:24 AM CDT,"chicken_menu_count = int(input())
fish_menu_count = int(input())
vegi_menu_count = int(input())

price_chicken_menu = chicken_menu_count * 10.35
price_fish_menu = fish_menu_count * 12.4
price_vegi_menu = vegi_menu_count * 8.15

all_menu_sum = price_chicken_menu + price_fish_menu + price_vegi_menu
dessert_price = all_menu_sum * 0.20

total_sum = all_menu_sum + dessert_price + 2.50

print(total_sum)"
xNA9XAxy,Bootstrap - lezione 1,fcamuso,HTML,Sunday 2nd of July 2023 04:20:56 AM CDT,"<!doctype html>
<html lang=""en"">
  <head>
    <!-- Required meta tags -->
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1, shrink-to-fit=no"">
    <!-- -------------------------------------------------------------------------------------- -->

    <!-- Bootstrap CSS v5.3.0 -->
  <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"" rel=""stylesheet"" 
  integrity=""sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"" 
  crossorigin=""anonymous"">

    <title>Con Bootstrap</title>

    <style>
      
    </style>
  </head>
  
  <body>

  <div data-bs-theme=""light"">
    <button type=""button"" class=""btn btn-primary"">Primary</button>
    <button type=""button"" class=""btn btn-secondary"">Secondary</button>
    <button type=""button"" class=""btn btn-success"">Success</button>
    <button type=""button"" class=""btn btn-transparent"">Transparent</button>
    <button type=""button"" class=""btn btn-danger"">Danger</button>
    <button type=""button"" class=""btn btn-warning"">Warning</button>
    <button type=""button"" class=""btn btn-info"">Info</button>
    <button type=""button"" class=""btn btn-light"">Light</button>
    <button type=""button"" class=""btn btn-dark"">Dark</button>
  </div>
  
  <br><br>

    <button type=""button"" class=""btn btn-outline-primary"">Primary</button>
    <button type=""button"" class=""btn btn-outline-secondary"">Secondary</button>
    <button type=""button"" class=""btn btn-outline-success"">Success</button>
    <button type=""button"" class=""btn btn-outline-transparent"">Transparent</button>
    <button type=""button"" class=""btn btn-outline-danger"">Danger</button>
    <button type=""button"" class=""btn bg-primary border-danger text-success"">Warning</button>
    <button type=""button"" class=""btn btn-outline-info"">Info</button>
    <button type=""button"" class=""btn btn-outline-light"">Light</button>
    <button type=""button"" class=""btn btn-outline-dark"">Dark</button>
    
    <br><br>
    
    <button type=""button"" class=""btn btn-link"">Link</button>

    <br><br>
    
    <!-- 
      bg-xxxx = background
      border-xxxx = bordi
      text-xxxx = colore testo 
    -->

    <h1 style=""max-width: 300px;"" class=""bg-body-secondary text-primary 
               border-danger border
               border-top-0 border-bottom-0"">
      Hello World
    </h1>

    <small>piccolo hello world</small>
    
    <div class=""text-bg-danger""> 
      NOTARE ANCHE IL RESET DEI CSS (ad esempio azzeramento margini) 
    </div>
   
   
    
   <!-- Bootstrap JavaScript Libraries -->
  <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"" 
          integrity=""sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"" 
          crossorigin=""anonymous""></script>
  </body>
</html>
"
jDKuv7GD,06. Repainting,veronikaaa86,Python,Sunday 2nd of July 2023 04:08:07 AM CDT,"nylon = int(input())
paint = int(input())
razr = int(input())
hours_workers = int(input())

price_nylon = (nylon + 2) * 1.5
price_paint = (paint * 1.1) * 14.5
price_razr = razr * 5

sum_materials = price_nylon + price_paint + price_razr + 0.40
sum_workers = (sum_materials * 0.30) * hours_workers
total_sum = sum_materials + sum_workers

print(total_sum)
"
r42Fw6fV,05. Supplies for School,veronikaaa86,Python,Sunday 2nd of July 2023 03:52:59 AM CDT,"pen_count = int(input())
markers_count = int(input())
detergent_lt = int(input())
discount_percent = int(input())

price_pen = pen_count * 5.80
price_markers = markers_count * 7.20
price_detergent = detergent_lt * 1.20

total_price = price_pen + price_markers + price_detergent
discount = total_price * (discount_percent / 100)
sum_with_discount = total_price - discount

print(sum_with_discount)"
11bfQLza,04. Vacation books list,veronikaaa86,Python,Sunday 2nd of July 2023 03:33:39 AM CDT,"total_pages_count = int(input())
pages_per_hour = int(input())
days = int(input())

total_hours = total_pages_count // pages_per_hour
hour_per_day = total_hours // days

print(hour_per_day)"
7w0RuxaL,Untitled,kimjunehee,JSON,Sunday 2nd of July 2023 03:02:10 AM CDT,"{
    0 : ""a"",
	1 : ""h""
}"
GZjSzmDB,Untitled,kimjunehee,JSON,Sunday 2nd of July 2023 03:00:33 AM CDT,"{
    1, 2, 3, 4, 5
}"
FdXhPgii,Untitled,kimjunehee,JSON,Sunday 2nd of July 2023 02:55:45 AM CDT,"{
    ""Name"" : ""GOD_GUY"",
    ""Robux"" : 1000,
    ""Game"" : ""Fun""
}"
EJgf0kAv,02,Nikola_944,Java,Sunday 2nd of July 2023 02:36:02 AM CDT,"package Exam;

import java.util.*;

public class Chainalysis_02 {
    private static Map<String, String> parentsMap;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        scanner.nextLine();

        parentsMap = new HashMap<>();

        for (int i = 0; i < n; i++) {
            String[] transaction = scanner.nextLine().split("" "");
            String from = transaction[0];
            String to = transaction[1];

            union(from, to);
        }

        int groupCount = countGroups();

        System.out.println(groupCount);
    }

    private static void union(String a, String b) {
        String parentA = find(a);
        String parentB = find(b);

        if (!parentA.equals(parentB)) {
            parentsMap.put(parentA, parentB);
        }
    }

    private static String find(String a) {
        parentsMap.putIfAbsent(a, a);

        if (!parentsMap.get(a).equals(a)) {
            parentsMap.put(a, find(parentsMap.get(a)));
        }

        return parentsMap.get(a);
    }

    private static int countGroups() {
        Set<String> groupsSet = new HashSet<>();

        for (String address : parentsMap.keySet()) {
            groupsSet.add(find(address));
        }

        return groupsSet.size();
    }
}"
WGDqaVJ4,Untitled,ezzr,C++,Sunday 2nd of July 2023 02:19:57 AM CDT,"#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

#define MOD 1000000007
#define INF 2147483647
#define pb push_back
#define ppb pop_back
#define ff first
#define ss second
#define set_bits __builtin_popcountll
#define nl '\n'
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)

typedef long long ll;

const int N = 1e5 + 500;

int n, m, q, K;
vector<int> a, ans;
vector<array<int, 4>> qs;
vector<array<int, 2>> upd;
vector<array<int, 3>> all;
int c[N << 1], s[N];

void in(int v) {
    --s[c[v]];
    ++s[++c[v]];
}

void out(int v) {
    --s[c[v]];
    ++s[--c[v]];
}

int32_t main() {
    fastio();
    cin >> n >> m >> q >> K;
    int k = pow(n, 2.0 / 3);
    a.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        all.push_back({a[i], i, 0});
    }
    for (int i = 0; i < q; i++) {
        int t, a, b;
        cin >> t >> a >> b;
        if (t == 1) {
            qs.push_back({(int)upd.size() - 1, a - 1, b - 1, (int)qs.size()});
        } else {
            upd.push_back({a - 1, b});
            all.push_back({b, (int)upd.size() - 1, 1});
        }
    }
    sort(all.begin(), all.end());
    int cnt = 0;
    if (all[0][2]) upd[all[0][1]][1] = 0;
    else a[all[0][1]] = 0;
    for (int i = 1; i < (int)all.size(); i++) {
        if (all[i][0] != all[i - 1][0]) cnt++;
        if (all[i][2]) upd[all[i][1]][1] = cnt;
        else a[all[i][1]] = cnt;
    }
    sort(qs.begin(), qs.end(), [k](array<int, 4> &a, array<int, 4> &b){
        return a[0] / k < b[0] / k || 
            (a[0] / k == b[0] / k && a[1] / k < b[1] / k) ||
            (a[0] / k == b[0] / k && a[1] / k == b[1] / k && a[2] < b[2]);
    });
    int cur_q = 0, cur_t = -1, l = 0, r = 0;
    s[0] = m;
    in(a[0]);
    ans.resize(qs.size());
    while (cur_q < (int)qs.size()) {
        while (l > qs[cur_q][1]) in(a[--l]);
        while (r < qs[cur_q][2]) in(a[++r]);
        while (l < qs[cur_q][1]) out(a[l++]);
        while (r > qs[cur_q][2]) out(a[r--]);
        while (cur_t > qs[cur_q][0]) {
            if (l <= upd[cur_t][0] && r >= upd[cur_t][0]) {
                out(a[upd[cur_t][0]]);
                in(upd[cur_t][1]);
            }
            swap(a[upd[cur_t][0]], upd[cur_t][1]);
            cur_t--;
        }
        while (cur_t < qs[cur_q][0]) {
            cur_t++;
            if (l <= upd[cur_t][0] && r >= upd[cur_t][0]) {
                out(a[upd[cur_t][0]]);
                in(upd[cur_t][1]);
            }
            swap(a[upd[cur_t][0]], upd[cur_t][1]);
        }
        ans[qs[cur_q][3]] = s[K];
        cur_q++;
    }
    for (int i : ans) cout << i << endl;
    return 0;
}"
tv5tdNFM,My Dioxus app,loloof64,Rust,Sunday 2nd of July 2023 01:44:24 AM CDT,"#[allow(non_snake_case)]
fn App(cx: Scope) -> Element {
    let program_path = use_state(cx, || """".to_string());
    let command = use_state(cx, || """".to_string());
    let is_selecting_program = use_state(cx, || false);

    let process_handler = Rc::new(RefCell::new(ProcessHandler::new()));
    let process_handler_clone = process_handler.clone();
    let process_handler_clone_2 = process_handler.clone();
    let process_handler_clone_3 = process_handler.clone();

    use_component_lifecycle(
        cx,
        move || (),
        move || {
            process_handler.borrow_mut().dispose();
        },
    );

    use_future(cx, (), move |_| async move {
        loop {
            let lines = process_handler_clone_3.borrow_mut().read_output();
            lines.into_iter().for_each(|line| println!(""{}"", line));
            tokio::time::sleep(Duration::from_millis(10)).await;
        }
    });

    if *is_selecting_program.current() {
        cx.render(rsx! {
            FileExplorer {
                on_cancel: |_| is_selecting_program.set(false),
                on_validate: |path_string| {
                    is_selecting_program.set(false);
                    program_path.set(path_string);
                },
            }
        })
    } else {
        cx.render(rsx! {div {
            style { include_str!(""./style.css"") }
            div {
                class: ""fieldsLine"",
                input {
                    value: ""{command}"",
                    oninput: move |evt| command.set(evt.value.clone())
                }
                button {
                    onclick: move |_| {
                        process_handler_clone_2.borrow_mut().send_command(command.to_string());
                    },
                    ""Send command""
                }
            }
        }
        div {
            class: ""fieldsLine"",
            input {
                value: ""{program_path}"",
                oninput: move |evt| program_path.set(evt.value.clone())
            }
            button {
                onclick: move |_| is_selecting_program.set(true),
                ""Select program""
            }
        }
        button {
            onclick: move |_| {
                match process_handler_clone.borrow_mut().start_program(program_path.get()) {
                    Err(e) => eprintln!(""{}"", e),
                    _ => ()
                }
            },
            ""Start program""
        },
        })
    }
}
"
XaRkMUiv,re-animate,w1zlm,Lua,Sunday 2nd of July 2023 01:42:07 AM CDT,"-- humanoidAnimateR15Moods.lua

local Character = game.Players.LocalPlayer.Character
local Humanoid = Character:WaitForChild(""Humanoid"")
local pose = ""Standing""

local userNoUpdateOnLoopSuccess, userNoUpdateOnLoopValue = pcall(function() return UserSettings():IsUserFeatureEnabled(""UserNoUpdateOnLoop"") end)
local userNoUpdateOnLoop = userNoUpdateOnLoopSuccess and userNoUpdateOnLoopValue

local userAnimateScaleRunSuccess, userAnimateScaleRunValue = pcall(function() return UserSettings():IsUserFeatureEnabled(""UserAnimateScaleRun"") end)
local userAnimateScaleRun = userAnimateScaleRunSuccess and userAnimateScaleRunValue

local function getRigScale()
	if userAnimateScaleRun then
		return Character:GetScale()
	else
		return 1
	end
end

local AnimationSpeedDampeningObject = script:FindFirstChild(""ScaleDampeningPercent"")
local HumanoidHipHeight = 2

local EMOTE_TRANSITION_TIME = 0.1

local currentAnim = """"
local currentAnimInstance = nil
local currentAnimTrack = nil
local currentAnimKeyframeHandler = nil
local currentAnimSpeed = 1.0

local runAnimTrack = nil
local runAnimKeyframeHandler = nil

local PreloadedAnims = {}

local function getAnimTable(anims)
    local returnTable = {}

    for _, v in pairs(anims:GetChildren()) do
        if v:IsA(""Animation"") then
            local AddTable = {id = v.AnimationId, weight = 10}
            if v:FindFirstChild(""Weight"") then
                AddTable[""Weight""] = v.Weight.Value
            end

            returnTable[#returnTable + 1] = AddTable
        end
    end

    return returnTable
end

local OrigAnimator = Character.Animate
OrigAnimator.Disabled = true

local animTable = {}
local animNames = { 
	idle = 	getAnimTable(OrigAnimator.idle),
	walk = 	getAnimTable(OrigAnimator.walk), 
	run = 	getAnimTable(OrigAnimator.run), 
	swim =  getAnimTable(OrigAnimator.swim), 
	swimidle = 	getAnimTable(OrigAnimator.swimidle), 
	jump = 	getAnimTable(OrigAnimator.jump), 
	fall = 	getAnimTable(OrigAnimator.fall), 
	climb = getAnimTable(OrigAnimator.climb), 
	sit = 	getAnimTable(OrigAnimator.sit),	
	toolnone =  getAnimTable(OrigAnimator.toolnone),
	toolslash = getAnimTable(OrigAnimator.toolslash),
	toollunge = getAnimTable(OrigAnimator.toollunge),
	wave =  getAnimTable(OrigAnimator.wave),
	point = getAnimTable(OrigAnimator.point),
	dance = getAnimTable(OrigAnimator.dance),
	dance2 =    getAnimTable(OrigAnimator.dance2),
	dance3 =    getAnimTable(OrigAnimator.dance3),
	laugh = getAnimTable(OrigAnimator.laugh),
	cheer = {
				{ id = ""http://www.roblox.com/asset/?id=507770677"", weight = 10 } 
			},
}

--[[
    {
		{ id = ""http://www.roblox.com/asset/?id=507770677"", weight = 10 } 
	}
]]

-- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
local emoteNames = { wave = false, point = false, dance = true, dance2 = true, dance3 = true, laugh = false, cheer = false}

math.randomseed(tick())

function findExistingAnimationInSet(set, anim)
	if set == nil or anim == nil then
		return 0
	end
	
	for idx = 1, set.count, 1 do 
		if set[idx].anim.AnimationId == anim.AnimationId then
			return idx
		end
	end
	
	return 0
end

function configureAnimationSet(name, fileList)
	if (animTable[name] ~= nil) then
		for _, connection in pairs(animTable[name].connections) do
			connection:disconnect()
		end
	end
	animTable[name] = {}
	animTable[name].count = 0
	animTable[name].totalWeight = 0	
	animTable[name].connections = {}

	local allowCustomAnimations = true

	local success, msg = pcall(function() allowCustomAnimations = game:GetService(""StarterPlayer"").AllowCustomAnimations end)
	if not success then
		allowCustomAnimations = true
	end

	-- check for config values
	local config = script:FindFirstChild(name)
	if (allowCustomAnimations and config ~= nil) then
		table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
		table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
		
		local idx = 0
		for _, childPart in pairs(config:GetChildren()) do
			if (childPart:IsA(""Animation"")) then
				local newWeight = 1
				local weightObject = childPart:FindFirstChild(""Weight"")
				if (weightObject ~= nil) then
					newWeight = weightObject.Value
				end
				animTable[name].count = animTable[name].count + 1
				idx = animTable[name].count
				animTable[name][idx] = {}
				animTable[name][idx].anim = childPart
				animTable[name][idx].weight = newWeight
				animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
				table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
				table.insert(animTable[name].connections, childPart.ChildAdded:connect(function(property) configureAnimationSet(name, fileList) end))
				table.insert(animTable[name].connections, childPart.ChildRemoved:connect(function(property) configureAnimationSet(name, fileList) end))
			end
		end
	end
	
	-- fallback to defaults
	if (animTable[name].count <= 0) then
		for idx, anim in pairs(fileList) do
			animTable[name][idx] = {}
			animTable[name][idx].anim = Instance.new(""Animation"")
			animTable[name][idx].anim.Name = name
			animTable[name][idx].anim.AnimationId = anim.id
			animTable[name][idx].weight = anim.weight
			animTable[name].count = animTable[name].count + 1
			animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
		end
	end
	
	-- preload anims
	for i, animType in pairs(animTable) do
		for idx = 1, animType.count, 1 do
			if PreloadedAnims[animType[idx].anim.AnimationId] == nil then
				Humanoid:LoadAnimation(animType[idx].anim)
				PreloadedAnims[animType[idx].anim.AnimationId] = true
			end				
		end
	end
end

------------------------------------------------------------------------------------------------------------

function configureAnimationSetOld(name, fileList)
	if (animTable[name] ~= nil) then
		for _, connection in pairs(animTable[name].connections) do
			connection:disconnect()
		end
	end
	animTable[name] = {}
	animTable[name].count = 0
	animTable[name].totalWeight = 0	
	animTable[name].connections = {}

	local allowCustomAnimations = true

	local success, msg = pcall(function() allowCustomAnimations = game:GetService(""StarterPlayer"").AllowCustomAnimations end)
	if not success then
		allowCustomAnimations = true
	end

	-- check for config values
	local config = script:FindFirstChild(name)
	if (allowCustomAnimations and config ~= nil) then
		table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
		table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
		local idx = 1
		for _, childPart in pairs(config:GetChildren()) do
			if (childPart:IsA(""Animation"")) then
				table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
				animTable[name][idx] = {}
				animTable[name][idx].anim = childPart
				local weightObject = childPart:FindFirstChild(""Weight"")
				if (weightObject == nil) then
					animTable[name][idx].weight = 1
				else
					animTable[name][idx].weight = weightObject.Value
				end
				animTable[name].count = animTable[name].count + 1
				animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
				idx = idx + 1
			end
		end
	end

	-- fallback to defaults
	if (animTable[name].count <= 0) then
		for idx, anim in pairs(fileList) do
			animTable[name][idx] = {}
			animTable[name][idx].anim = Instance.new(""Animation"")
			animTable[name][idx].anim.Name = name
			animTable[name][idx].anim.AnimationId = anim.id
			animTable[name][idx].weight = anim.weight
			animTable[name].count = animTable[name].count + 1
			animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
			-- print(name .. "" ["" .. idx .. ""] "" .. anim.id .. "" ("" .. anim.weight .. "")"")
		end
	end
	
	-- preload anims
	for i, animType in pairs(animTable) do
		for idx = 1, animType.count, 1 do 
			Humanoid:LoadAnimation(animType[idx].anim)
		end
	end
end

-- Setup animation objects
function scriptChildModified(child)
	local fileList = animNames[child.Name]
	if (fileList ~= nil) then
		configureAnimationSet(child.Name, fileList)
	end	
end

script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)

-- Clear any existing animation tracks
-- Fixes issue with characters that are moved in and out of the Workspace accumulating tracks
local animator = if Humanoid then Humanoid:FindFirstChildOfClass(""Animator"") else nil
if animator then
	local animTracks = animator:GetPlayingAnimationTracks()
	for i,track in ipairs(animTracks) do
		track:Stop(0)
		track:Destroy()
	end
end

for name, fileList in pairs(animNames) do 
	configureAnimationSet(name, fileList)
end	

-- ANIMATION

-- declarations
local toolAnim = ""None""
local toolAnimTime = 0

local jumpAnimTime = 0
local jumpAnimDuration = 0.31

local toolTransitionTime = 0.1
local fallTransitionTime = 0.2

local currentlyPlayingEmote = false

-- functions

function stopAllAnimations()
	local oldAnim = currentAnim

	-- return to idle if finishing an emote
	if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
		oldAnim = ""idle""
	end
	
	if currentlyPlayingEmote then
		oldAnim = ""idle""
		currentlyPlayingEmote = false
	end

	currentAnim = """"
	currentAnimInstance = nil
	if (currentAnimKeyframeHandler ~= nil) then
		currentAnimKeyframeHandler:disconnect()
	end

	if (currentAnimTrack ~= nil) then
		currentAnimTrack:Stop()
		currentAnimTrack:Destroy()
		currentAnimTrack = nil
	end

	-- clean up walk if there is one
	if (runAnimKeyframeHandler ~= nil) then
		runAnimKeyframeHandler:disconnect()
	end
	
	if (runAnimTrack ~= nil) then
		runAnimTrack:Stop()
		runAnimTrack:Destroy()
		runAnimTrack = nil
	end
	
	return oldAnim
end

function getHeightScale()
	if Humanoid then
		if not Humanoid.AutomaticScalingEnabled then
			-- When auto scaling is not enabled, the rig scale stands in for
			-- a computed scale.
			return getRigScale()
		end
		
		local scale = Humanoid.HipHeight / HumanoidHipHeight
		if AnimationSpeedDampeningObject == nil then
			AnimationSpeedDampeningObject = script:FindFirstChild(""ScaleDampeningPercent"")
		end
		if AnimationSpeedDampeningObject ~= nil then
			scale = 1 + (Humanoid.HipHeight - HumanoidHipHeight) * AnimationSpeedDampeningObject.Value / HumanoidHipHeight
		end
		return scale
	end	
	return getRigScale()
end

local function rootMotionCompensation(speed)
	local speedScaled = speed * 1.25
	local heightScale = getHeightScale()
	local runSpeed = speedScaled / heightScale
	return runSpeed
end

local smallButNotZero = 0.0001
local function setRunSpeed(speed)
	local normalizedWalkSpeed = 0.5 -- established empirically using current `913402848` walk animation
	local normalizedRunSpeed  = 1
	local runSpeed = rootMotionCompensation(speed)

	local walkAnimationWeight = smallButNotZero
	local runAnimationWeight = smallButNotZero
	local walkAnimationTimewarp = runSpeed/normalizedWalkSpeed
	local runAnimationTimerwarp = runSpeed/normalizedRunSpeed

	if runSpeed <= normalizedWalkSpeed then
		walkAnimationWeight = 1
	elseif runSpeed < normalizedRunSpeed then
		local fadeInRun = (runSpeed - normalizedWalkSpeed)/(normalizedRunSpeed - normalizedWalkSpeed)
		walkAnimationWeight = 1 - fadeInRun
		runAnimationWeight  = fadeInRun
		walkAnimationTimewarp = 1
		runAnimationTimerwarp = 1
	else
		runAnimationWeight = 1
	end
	currentAnimTrack:AdjustWeight(walkAnimationWeight)
	runAnimTrack:AdjustWeight(runAnimationWeight)
	currentAnimTrack:AdjustSpeed(walkAnimationTimewarp)
	runAnimTrack:AdjustSpeed(runAnimationTimerwarp)
end

function setAnimationSpeed(speed)
	if currentAnim == ""walk"" then
			setRunSpeed(speed)
	else
		if speed ~= currentAnimSpeed then
			currentAnimSpeed = speed
			currentAnimTrack:AdjustSpeed(currentAnimSpeed)
		end
	end
end

function keyFrameReachedFunc(frameName)
	if (frameName == ""End"") then
		if currentAnim == ""walk"" then
			if userNoUpdateOnLoop == true then
				if runAnimTrack.Looped ~= true then
					runAnimTrack.TimePosition = 0.0
				end
				if currentAnimTrack.Looped ~= true then
					currentAnimTrack.TimePosition = 0.0
				end
			else
				runAnimTrack.TimePosition = 0.0
				currentAnimTrack.TimePosition = 0.0
			end
		else
			local repeatAnim = currentAnim
			-- return to idle if finishing an emote
			if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
				repeatAnim = ""idle""
			end
			
			if currentlyPlayingEmote then
				if currentAnimTrack.Looped then
					-- Allow the emote to loop
					return
				end
				
				repeatAnim = ""idle""
				currentlyPlayingEmote = false
			end
			
			local animSpeed = currentAnimSpeed
			playAnimation(repeatAnim, 0.15, Humanoid)
			setAnimationSpeed(animSpeed)
		end
	end
end

function rollAnimation(animName)
	local roll = math.random(1, animTable[animName].totalWeight) 
	local origRoll = roll
	local idx = 1
	while (roll > animTable[animName][idx].weight) do
		roll = roll - animTable[animName][idx].weight
		idx = idx + 1
	end
	return idx
end

local function switchToAnim(anim, animName, transitionTime, humanoid)
	-- switch animation		
	if (anim ~= currentAnimInstance) then
		
		if (currentAnimTrack ~= nil) then
			currentAnimTrack:Stop(transitionTime)
			currentAnimTrack:Destroy()
		end

		if (runAnimTrack ~= nil) then
			runAnimTrack:Stop(transitionTime)
			runAnimTrack:Destroy()
			if userNoUpdateOnLoop == true then
				runAnimTrack = nil
			end
		end

		currentAnimSpeed = 1.0
	
		-- load it to the humanoid; get AnimationTrack
		currentAnimTrack = humanoid:LoadAnimation(anim)
		currentAnimTrack.Priority = Enum.AnimationPriority.Core
		 
		-- play the animation
		currentAnimTrack:Play(transitionTime)
		currentAnim = animName
		currentAnimInstance = anim

		-- set up keyframe name triggers
		if (currentAnimKeyframeHandler ~= nil) then
			currentAnimKeyframeHandler:disconnect()
		end
		currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
		
		-- check to see if we need to blend a walk/run animation
		if animName == ""walk"" then
			local runAnimName = ""run""
			local runIdx = rollAnimation(runAnimName)

			runAnimTrack = humanoid:LoadAnimation(animTable[runAnimName][runIdx].anim)
			runAnimTrack.Priority = Enum.AnimationPriority.Core
			runAnimTrack:Play(transitionTime)		
			
			if (runAnimKeyframeHandler ~= nil) then
				runAnimKeyframeHandler:disconnect()
			end
			runAnimKeyframeHandler = runAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)	
		end
	end
end

function playAnimation(animName, transitionTime, humanoid) 	
	local idx = rollAnimation(animName)
	local anim = animTable[animName][idx].anim

	switchToAnim(anim, animName, transitionTime, humanoid)
	currentlyPlayingEmote = false
end

function playEmote(emoteAnim, transitionTime, humanoid)
	switchToAnim(emoteAnim, emoteAnim.Name, transitionTime, humanoid)
	currentlyPlayingEmote = true
end

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

local toolAnimName = """"
local toolAnimTrack = nil
local toolAnimInstance = nil
local currentToolAnimKeyframeHandler = nil

function toolKeyFrameReachedFunc(frameName)
	if (frameName == ""End"") then
		playToolAnimation(toolAnimName, 0.0, Humanoid)
	end
end


function playToolAnimation(animName, transitionTime, humanoid, priority)	 		
		local idx = rollAnimation(animName)
		local anim = animTable[animName][idx].anim

		if (toolAnimInstance ~= anim) then
			
			if (toolAnimTrack ~= nil) then
				toolAnimTrack:Stop()
				toolAnimTrack:Destroy()
				transitionTime = 0
			end
					
			-- load it to the humanoid; get AnimationTrack
			toolAnimTrack = humanoid:LoadAnimation(anim)
			if priority then
				toolAnimTrack.Priority = priority
			end
			 
			-- play the animation
			toolAnimTrack:Play(transitionTime)
			toolAnimName = animName
			toolAnimInstance = anim

			currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
		end
end

function stopToolAnimations()
	local oldAnim = toolAnimName

	if (currentToolAnimKeyframeHandler ~= nil) then
		currentToolAnimKeyframeHandler:disconnect()
	end

	toolAnimName = """"
	toolAnimInstance = nil
	if (toolAnimTrack ~= nil) then
		toolAnimTrack:Stop()
		toolAnimTrack:Destroy()
		toolAnimTrack = nil
	end

	return oldAnim
end

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-- STATE CHANGE HANDLERS

function onRunning(speed)
	local heightScale = if userAnimateScaleRun then getHeightScale() else 1
	
	local movedDuringEmote = currentlyPlayingEmote and Humanoid.MoveDirection == Vector3.new(0, 0, 0)
	local speedThreshold = movedDuringEmote and (Humanoid.WalkSpeed / heightScale) or 0.75
	if speed > speedThreshold * heightScale then
		local scale = 16.0
		playAnimation(""walk"", 0.2, Humanoid)
		setAnimationSpeed(speed / scale)
		pose = ""Running""
	else
		if emoteNames[currentAnim] == nil and not currentlyPlayingEmote then
			playAnimation(""idle"", 0.2, Humanoid)
			pose = ""Standing""
		end
	end
end

function onDied()
	pose = ""Dead""
end

function onJumping()
	playAnimation(""jump"", 0.1, Humanoid)
	jumpAnimTime = jumpAnimDuration
	pose = ""Jumping""
end

function onClimbing(speed)
	if userAnimateScaleRun then
		speed /= getHeightScale()
	end
	local scale = 5.0
	playAnimation(""climb"", 0.1, Humanoid)
	setAnimationSpeed(speed / scale)
	pose = ""Climbing""
end

function onGettingUp()
	pose = ""GettingUp""
end

function onFreeFall()
	if (jumpAnimTime <= 0) then
		playAnimation(""fall"", fallTransitionTime, Humanoid)
	end
	pose = ""FreeFall""
end

function onFallingDown()
	pose = ""FallingDown""
end

function onSeated()
	pose = ""Seated""
end

function onPlatformStanding()
	pose = ""PlatformStanding""
end

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

function onSwimming(speed)
	if userAnimateScaleRun then
		speed /= getHeightScale()
	end
	if speed > 1.00 then
		local scale = 10.0
		playAnimation(""swim"", 0.4, Humanoid)
		setAnimationSpeed(speed / scale)
		pose = ""Swimming""
	else
		playAnimation(""swimidle"", 0.4, Humanoid)
		pose = ""Standing""
	end
end

function animateTool()
	if (toolAnim == ""None"") then
		playToolAnimation(""toolnone"", toolTransitionTime, Humanoid, Enum.AnimationPriority.Idle)
		return
	end

	if (toolAnim == ""Slash"") then
		playToolAnimation(""toolslash"", 0, Humanoid, Enum.AnimationPriority.Action)
		return
	end

	if (toolAnim == ""Lunge"") then
		playToolAnimation(""toollunge"", 0, Humanoid, Enum.AnimationPriority.Action)
		return
	end
end

function getToolAnim(tool)
	for _, c in ipairs(tool:GetChildren()) do
		if c.Name == ""toolanim"" and c.className == ""StringValue"" then
			return c
		end
	end
	return nil
end

local lastTick = 0

function stepAnimate(currentTime)
	local amplitude = 1
	local frequency = 1
  	local deltaTime = currentTime - lastTick
  	lastTick = currentTime

	local climbFudge = 0
	local setAngles = false

  	if (jumpAnimTime > 0) then
  		jumpAnimTime = jumpAnimTime - deltaTime
  	end

	if (pose == ""FreeFall"" and jumpAnimTime <= 0) then
		playAnimation(""fall"", fallTransitionTime, Humanoid)
	elseif (pose == ""Seated"") then
		playAnimation(""sit"", 0.5, Humanoid)
		return
	elseif (pose == ""Running"") then
		playAnimation(""walk"", 0.2, Humanoid)
	elseif (pose == ""Dead"" or pose == ""GettingUp"" or pose == ""FallingDown"" or pose == ""Seated"" or pose == ""PlatformStanding"") then
		stopAllAnimations()
		amplitude = 0.1
		frequency = 1
		setAngles = true
	end

	-- Tool Animation handling
	local tool = Character:FindFirstChildOfClass(""Tool"")
	if tool and tool:FindFirstChild(""Handle"") then
		local animStringValueObject = getToolAnim(tool)

		if animStringValueObject then
			toolAnim = animStringValueObject.Value
			-- message recieved, delete StringValue
			animStringValueObject.Parent = nil
			toolAnimTime = currentTime + .3
		end

		if currentTime > toolAnimTime then
			toolAnimTime = 0
			toolAnim = ""None""
		end

		animateTool()		
	else
		stopToolAnimations()
		toolAnim = ""None""
		toolAnimInstance = nil
		toolAnimTime = 0
	end
end

-- connect events
Humanoid.Died:connect(onDied)
Humanoid.Running:connect(onRunning)
Humanoid.Jumping:connect(onJumping)
Humanoid.Climbing:connect(onClimbing)
Humanoid.GettingUp:connect(onGettingUp)
Humanoid.FreeFalling:connect(onFreeFall)
Humanoid.FallingDown:connect(onFallingDown)
Humanoid.Seated:connect(onSeated)
Humanoid.PlatformStanding:connect(onPlatformStanding)
Humanoid.Swimming:connect(onSwimming)

-- setup emote chat hook
game:GetService(""Players"").LocalPlayer.Chatted:connect(function(msg)
	local emote = """"
	if (string.sub(msg, 1, 3) == ""/e "") then
		emote = string.sub(msg, 4)
	elseif (string.sub(msg, 1, 7) == ""/emote "") then
		emote = string.sub(msg, 8)
	end
	
	if (pose == ""Standing"" and emoteNames[emote] ~= nil) then
		playAnimation(emote, EMOTE_TRANSITION_TIME, Humanoid)
	end
end)

-- emote bindable hook
script:WaitForChild(""PlayEmote"").OnInvoke = function(emote)
	-- Only play emotes when idling
	if pose ~= ""Standing"" then
		return
	end

	if emoteNames[emote] ~= nil then
		-- Default emotes
		playAnimation(emote, EMOTE_TRANSITION_TIME, Humanoid)
		
		return true, currentAnimTrack
	elseif typeof(emote) == ""Instance"" and emote:IsA(""Animation"") then
		-- Non-default emotes
		playEmote(emote, EMOTE_TRANSITION_TIME, Humanoid)

		return true, currentAnimTrack
	end
	
	-- Return false to indicate that the emote could not be played
	return false
end

if Character.Parent ~= nil then
	-- initialize to idle
	playAnimation(""idle"", 0.1, Humanoid)
	pose = ""Standing""
end

-- loop to handle timed state transitions and tool animations
while Character.Parent ~= nil do
	local _, currentGameTime = wait(0.1)
	stepAnimate(currentGameTime)
end

"
0zVR30PW,pt_energyReservation,puretilt,Lua,Sunday 2nd of July 2023 01:34:07 AM CDT,"function widget:GetInfo()
    return {
        name = ""Energy Reservation"",
        desc = ""Stops cons and lab if under energy threshold"",
        author = ""PureTilt"",
        date = ""June 2023"",
        layer = 1000, -- this should be high enough to draw above ground, not sure of best value to use
        version = 2,
        enabled = true  --  loaded by default?
    }
end

--amount of resourced which can't be reserved
local laveForBuildersFlat = 100
local laveForBuildersFraction = 0.3

--units which will be ignored for energy reservation
local ignoredUnitsDefsIDs = {
    ""corcom"",
    ""armcom""
}
--builders which will nto be stalled
local ignoredBuilderDefsIDs = {
    ""corcom"",
    ""armcom""
}

local echo = Spring.Echo
local myTeamID = Spring.GetMyTeamID
local GetUnitHealth = Spring.GetUnitHealth
local energyNeedPerUnit = {}

local ignoredUnitsDefs = {}
local ignoredBuilderDefs = {}

for index, ID in pairs(ignoredUnitsDefsIDs) do
    ignoredUnitsDefs[ID] = true
end
for index, ID in pairs(ignoredBuilderDefsIDs) do
    ignoredBuilderDefs[ID] = true
end

for defID, udef in pairs(UnitDefs) do
    local energyPerSecond = 0
    local energyPerShot = 0
    local weaponText = """"
    local WCount = 0
    if not ignoredUnitsDefs[udef.name] then
        for name, value in pairs(udef.weapons) do
            local weaponDef = WeaponDefs[value.weaponDef]
            if not weaponDef.stockpile then
                if weaponDef.energyCost ~= 0 then
                    energyPerSecond = energyPerSecond + weaponDef.energyCost / weaponDef.reload
                end
                if energyPerShot < weaponDef.energyCost then
                    energyPerShot = weaponDef.energyCost
                end
            end
            --weaponText = weaponText .. ""\n--weapon:"" .. weaponDef.name .. "" "" .. energyPerSecond .. ""/"" .. energyPerShot
            WCount = WCount + 1
        end
    end
    if energyPerSecond > 0 or energyPerShot > 0 then
        --echo(udef.name .. ""  "" .. energyPerSecond .. ""/"" .. energyPerShot .. ""/"" .. WCount .. weaponText)
    end
    energyNeedPerUnit[defID] = { perSecond = energyPerSecond, perShot = energyPerShot }
end

--[[
note on GetTeamResources:
current amount
maximum
current consumption
production
idk
idk
idk
idk
overflow
--]]

local GetUnitDefID = Spring.GetUnitDefID
local GetTeamUnitsCounts = Spring.GetTeamUnitsCounts
local GetTeamResources = Spring.GetTeamResources
local GetUnitCurrentCommand = Spring.GetUnitCurrentCommand
local GiveOrderToUnit = Spring.GiveOrderToUnit
local GetUnitIsBuilding = Spring.GetUnitIsBuilding
local GetTeamUnitsSorted = Spring.GetTeamUnitsSorted
local GetUnitResources = Spring.GetUnitResources
local GetUnitBasePosition = Spring.GetUnitBasePosition

local stoppedBuilders = {}
local energyWanted = 0

function widget:GameFrame(gameFrame)
    --calculate energy to reserve
    if gameFrame % 30 == 0 then
        local minStorage = 0
        local needPerSecond = 0
        for defID, count in pairs(GetTeamUnitsCounts(myTeamID())) do
            if defID ~= ""n"" then
                --echo(defID..""/""..UnitDefs[defID].name)
                if count > 0 then
                    local persecond = energyNeedPerUnit[defID].perSecond * count ^ 0.7
                    local pershot = energyNeedPerUnit[defID].perShot * 1.5
                    needPerSecond = needPerSecond + persecond
                    if minStorage < pershot then
                        minStorage = pershot
                    end
                end
                --echo(""unit: "" .. UnitDefs[defID].name .. ""  "" .. minStorage .. ""/"" .. needPerSecond)
            end
        end
        if minStorage > needPerSecond then
            energyWanted = minStorage
        else
            energyWanted = needPerSecond
        end
        local currentE, maxE, EConsumption, EProd, _ = GetTeamResources(myTeamID(), ""e"")
        local maxAllowedReserve = maxE * (1 - laveForBuildersFraction) - laveForBuildersFlat
        if energyWanted > maxAllowedReserve then
            energyWanted = maxAllowedReserve
        end
        --echo(""energy reserve: "" .. energyWanted)
    end

    if gameFrame % 10 == 0 then
        for unitID, stopped in pairs(stoppedBuilders) do
            local cmdID, _, buildingID, cmdParam1, _, cmdParam3, _ = GetUnitCurrentCommand(unitID)
            local building = GetUnitIsBuilding(unitID)
            local buildProgress = 0
            if building ~= nil then
                _, _, _, _, buildProgress = GetUnitHealth(building)
            end
            if stopped and cmdID ~= 5 then
                -- mark as nto stopped if wait command got interrupted by player or other widget
                stoppedBuilders[unitID] = false
            elseif cmdID ~= 5  and buildProgress == 1 then
                -- remove wait command if target building was complete
                stoppedBuilders[unitID] = false
                GiveOrderToUnit(unitID, 5, 0, 0)
            end
        end
        local currentE, maxE, EConsumption, EProd, _ = GetTeamResources(myTeamID(), ""e"")
        if currentE > energyWanted * 1.1 then
            for unitID, stopped in pairs(stoppedBuilders) do
                if stopped then
                    --echo(UnitDefs[GetUnitDefID(unitID)].name)
                    stoppedBuilders[unitID] = false
                    GiveOrderToUnit(unitID, 5, 0, 0)
                end
            end
        elseif energyWanted > 0 and currentE < energyWanted then
            local excessConsumption = EProd - EConsumption
            for defID, unitIDs in pairs(GetTeamUnitsSorted(myTeamID())) do
                if defID ~= ""n"" and not ignoredBuilderDefs[UnitDefs[defID].name] and UnitDefs[defID].isBuilder and not UnitDefs[defID].isBuilding then
                    --echo(UnitDefs[defID].name)
                    for index, unitID in pairs(unitIDs) do
                        if not stoppedBuilders[unitID] then
                            --local _, _, _, energyUse = GetUnitResources(unitID)
                            --echo(GetUnitCurrentCommand(unitID))
                            local cmdID, _, buildingID, cmdParam1, _, cmdParam3, _ = GetUnitCurrentCommand(unitID)
                            if cmdID ~= nil then
                                local canBuild = false
                                if cmdID == 40 then
                                    _, _, _, _, buildProgress = GetUnitHealth(cmdParam1)
                                    if buildProgress < 1 and UnitDefs[GetUnitDefID(cmdParam1)].energyCost > 0 then
                                        local posX1, posY1, posZ1 = GetUnitBasePosition(unitID)
                                        local posX2, posY2, posZ2 = GetUnitBasePosition(cmdParam1)
                                        --echo(UnitDefs[GetUnitDefID(unitID)].name .. (math.abs(posX1 - posX2) ^ 2) .. ""+"" .. (math.abs(posZ1 - posZ2) ^ 2) .. ""<="" .. (UnitDefs[defID].buildDistance ^ 2 * 1.25))
                                        canBuild = UnitDefs[defID].isBuilding or (math.abs(posX1 - posX2) ^ 2) + (math.abs(posZ1 - posZ2) ^ 2) <= UnitDefs[defID].buildDistance ^ 2 * 1.25
                                    end
                                elseif (cmdID <= -1) then
                                    local building = GetUnitIsBuilding(unitID)
                                    local buildProgress = 0
                                    local costsE = false
                                    if building ~= nil then
                                        _, _, _, _, buildProgress = GetUnitHealth(building)
                                        costsE = UnitDefs[GetUnitDefID(building)].energyCost > 0
                                    end
                                    if buildProgress < 1 and costsE then
                                        local posX, posY, posZ = GetUnitBasePosition(unitID)
                                        canBuild = UnitDefs[defID].isBuilding or math.abs(cmdParam1 - posX) ^ 2 + math.abs(cmdParam3 - posZ) ^ 2 <= UnitDefs[defID].buildDistance ^ 2 * 1.25
                                    end

                                end
                                if (canBuild) then
                                    GiveOrderToUnit(unitID, 5, 0, 0)
                                    stoppedBuilders[unitID] = true
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

function widget:Shutdown()
    for unitID, stopped in pairs(stoppedBuilders) do
        local cmdID, _, buildingID, cmdParam1, _, cmdParam3, _ = GetUnitCurrentCommand(unitID)
        if stopped and cmdID == 5 then
            stoppedBuilders[unitID] = false
            GiveOrderToUnit(unitID, 5, 0, 0)
        end
    end
end

function widget:KeyRelease(keyCode, mods, label, utf32char, scanCode, actionList)
    if keyCode == 93 then
        --[[
        for defID, unitIDs in pairs(GetTeamUnitsSorted(myTeamID())) do
            if defID ~= ""n"" and UnitDefs[defID].name == ""armcom"" then
                for index, unitID in pairs(unitIDs) do
                    echo(GetUnitCurrentCommand(unitID))
                    local cmdTypeID, _, cmdID, cmdParam1, _, cmdParam3, _ = GetUnitCurrentCommand(unitID)
                    local building = GetUnitIsBuilding(unitID)
                    if building ~= nil then
                        echo(GetUnitHealth(building))

                    end
                end
            end
        end
        --]]
        Spring.SendCommands(""atm"")
    elseif keyCode == 91 then
        echo(""energy reserve: "" .. energyWanted)
    end
end"
MfvKmaNG,christmas,Grossos,JavaScript,Sunday 2nd of July 2023 01:29:30 AM CDT,"function christmasGift(input) {

    let index = 0;
    let command = input[index];

    let kids = 0;
    let adults = 0;

    let gift = 0;
    let pulover = 0;
   

    while (command !== 'Christmas') {

        currentYearsOld = Number(command);

        if (currentYearsOld <= 16) {
            kids++;
           
        } else if (currentYearsOld > 16) {
            adults++;
     
        }

        index++;
        command = input[index];

    }

    console.log(`Number of adults: ${adults}`);
    console.log(`Number of kids: ${kids}`);
    console.log(`Money for toys: ${kids * 5}`);
    console.log(`Money for sweaters: ${adults * 15}`);

}

christmasGift(['16','20','46','12','8','20','49','Christmas'])"
D4V66khh,Monitora Urls e exporta para HTML,MizunoBrasil,Python,Sunday 2nd of July 2023 01:15:47 AM CDT,"from bs4 import BeautifulSoup
import requests
import pyautogui
import time
import pyperclip
from pynput import mouse
import tkinter as tk
from tkinter import filedialog
from datetime import datetime
from tkinter import messagebox

# Função para iniciar a captura de URLs
def iniciar_captura():
    listener.start()
    btn_exportar_urls.configure(state=""disabled"")
    btn_iniciar_captura.configure(state=""disabled"", relief=tk.SUNKEN)  # Botão destacado
    btn_parar_captura.configure(state=""normal"", relief=tk.RAISED)  # Botão não destacado

# Função para parar a captura de URLs
def parar_captura():
    listener.stop()
    btn_exportar_urls.configure(state=""normal"")
    btn_iniciar_captura.configure(state=""normal"", relief=tk.RAISED)  # Botão não destacado
    btn_parar_captura.configure(state=""disabled"", relief=tk.SUNKEN)  # Botão destacado

# Função para obter o título da página
def get_page_title(url):
    try:
        res = requests.get(url)
        soup = BeautifulSoup(res.text, 'html.parser')
        title = soup.title.string
        return title
    except Exception as e:
        print(e)
        return ""Título não disponível""

# Função para lidar com o clique do mouse
def on_click(x, y, button, pressed):
    if button == mouse.Button.right and pressed:
        # Copiar o endereço da web para a área de transferência
        pyautogui.hotkey('ctrl', 'l')  # Selecionar a barra de endereço
        pyautogui.hotkey('ctrl', 'c')  # Copiar o endereço para a área de transferência
        url = pyperclip.paste()  # Obter o endereço da web da área de transferência
        agora = datetime.now()  # Obter a data e hora atual
        title = get_page_title(url)  # Obter o título da página
        captured_urls.insert(0, (url, agora, title))  # Adicionar a URL capturada à lista
        text_area.insert(tk.END, f""A URL '{url}' foi copiada para a área de transferência.\n"")
        window.after(2000, clear_message)  # Limpar a mensagem após 2 segundos

# Função para exportar as URLs capturadas
def exportar_urls():
    output_file_path = filedialog.asksaveasfilename(defaultextension='.html', filetypes=[('Arquivo HTML', '*.html')])
    if output_file_path:
        with open(output_file_path, 'w') as file:
            file.write('<html>\n<head>\n<title>URLs Capturadas</title>\n</head>\n<body>\n<h1>URLs Capturadas</h1>\n')
            for url, agora, title in captured_urls:
                file.write(f""<p>{agora.strftime('%Y-%m-%d %H:%M:%S')} - <a href='{url}'>{title}</a></p>\n"")
            file.write('</body>\n</html>')
        print(""As URLs capturadas foram exportadas para o arquivo:"", output_file_path)

# Função para limpar a mensagem após 2 segundos
def clear_message():
    text_area.delete(1.0, tk.END)

# Função para exibir as instruções de uso
def mostrar_como_usar():
    instrucoes = """"""\
    Clique em 'Iniciar Captura' para monitorar as URLs visitadas.
    Quando quiser salvar uma URL, clique com o botão direito do mouse na barra de endereços,
    e a URL será copiada para a área de transferência do computador. Repita esse procedimento
    para capturar quantas URLs desejar. Ao final clique em Finalizar Captura. Por último clique em 'Exportar URLs' para gerar
    uma lista com os links em um arquivo HTML, incluindo a data e hora de acesso de cada link.
    """"""
    messagebox.showinfo(""Como Usar"", instrucoes)

# Função para exibir a mensagem 'Sobre'
def mostrar_sobre():
    sobre_mensagem = ""2023, Mizuno""
    messagebox.showinfo(""Sobre"", sobre_mensagem)

# Inicialização da interface gráfica
window = tk.Tk()
window.title(""Monitora URLs"")
window.geometry(""600x400"")
window.resizable(False, False)

# Área de texto para exibir as mensagens
text_area = tk.Text(window, height=6, font=(""Courier New"", 12))
text_area.pack(side=""bottom"", padx=20, pady=20)

# Frame para agrupar os botões
frame_botoes = tk.Frame(window)
frame_botoes.pack(side=""bottom"", padx=20, pady=10)

# Botão para iniciar a captura de URLs
btn_iniciar_captura = tk.Button(frame_botoes, text=""Iniciar Captura"", command=iniciar_captura, font=(""Arial"", 12), width=15)
btn_iniciar_captura.pack(pady=10)

# Botão para parar a captura de URLs
btn_parar_captura = tk.Button(frame_botoes, text=""Parar Captura"", command=parar_captura, state=""disabled"", font=(""Arial"", 12), width=15)
btn_parar_captura.pack(pady=10)

# Botão para exportar as URLs capturadas
btn_exportar_urls = tk.Button(frame_botoes, text=""Exportar URLs"", command=exportar_urls, font=(""Arial"", 12), width=15)
btn_exportar_urls.pack(pady=10)

# Menu
menu_bar = tk.Menu(window)

ajuda_menu = tk.Menu(menu_bar, tearoff=0)
ajuda_menu.add_command(label=""Como Usar o Programa"", command=mostrar_como_usar)
ajuda_menu.add_command(label=""Sobre"", command=mostrar_sobre)

menu_bar.add_cascade(label=""Menu"", menu=ajuda_menu)

window.config(menu=menu_bar)

# Centralizar a janela na tela
window.update_idletasks()
window_width = window.winfo_width()
window_height = window.winfo_height()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
x = (screen_width // 2) - (window_width // 2)
y = (screen_height // 2) - (window_height // 2)
window.geometry(f""{window_width}x{window_height}+{x}+{y}"")

# Lista para armazenar as URLs capturadas
captured_urls = []

# Criar um listener para o clique do mouse
listener = mouse.Listener(on_click=on_click)

# Executar a interface gráfica
window.mainloop()
"
fx24R727,expandRoundKeys,Anupznk,Python,Sunday 2nd of July 2023 12:43:36 AM CDT,"def expandRoundKeys(key):
    """"""
    https://en.m.wikipedia.org/wiki/AES_key_schedule?fbclid=IwAR2MKdPC8cO1BeqKlkaheZYKKlUf_QgO7-t1SDPD5etsE8_RvhrLnQnWYAA
    """"""

    genRoundConsts()

    key_size = len(key)
    # print('key_size', key_size)
    num_keys = util.getNumOfRounds() + 1  # this is R

    # Initialize round keys with the original key
    round_keys = [key[i:i + 4] for i in range(0, key_size, 4)]

    """"""
    N as the length of the key in 32-bit words: 
    4 words for AES-128, 6 words for AES-192, 
    and 8 words for AES-256

    R as the number of rounds: 
    10 rounds for AES-128, 12 rounds for AES-192, 
    14 rounds for AES-256
    """"""
    # print('round const hex', aes_extension.roundConstsHex)

    N = key_size // 4
    for i in range(N, 4 * num_keys):
        # i >= N
        prevWord = round_keys[i - 1].copy()
        if i % N == 0:
            prevWord = rot_word(prevWord)
            prevWord = sub_word(prevWord)
            prevWord[0] ^= roundConstsHex[i // N]

        elif i >= N and N > 6 and i % N == 4:  # todo check
            prevWord = sub_word(prevWord)   # SubWord(W[i-1])

        # common for all cases
        # todo
        prevWord = [round_keys[i - N][j] ^ prevWord[j] for j in range(4)]
        round_keys.append(prevWord)
        # print('round keys', round_keys)

    allRoundKeys = []
    for i in range(0, len(round_keys), 4):  # range(start, stop, step) 4 words per round
        currRoundKey = []
        for j in range(4):
            currRoundKey.append(round_keys[i + j])
        allRoundKeys.append(np.transpose(currRoundKey))

    flattened_list = [element for sublist in allRoundKeys for element in sublist]
    # print(flattened_list[2])
    global expandedRoundKeys
    expandedRoundKeys = flattened_list
"
RFPJ64zv,"Arm Wrestle Simulator | Unlimited Cash, Kunkle, And Other | OP | 2023",BloxScript_Hub,Lua,Sunday 2nd of July 2023 12:21:40 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/limaspeedy/limaspeedy/main/HubLDS""))()

-- Credits by Sr. Lds"
eeShF0wp,sql_interview_moving_sum,saiRo199,SQL,Sunday 2nd of July 2023 12:17:34 AM CDT,"-- moving sum (cumulative sum using analytical function)

select 
employee_id,
salary,sum(salary) over(partition by department_id order by employee_id) as cume_sum,
department_id
from hr.employees;"
hHF2ZMAn,sql_interview_quater_wise_employee_joined,saiRo199,SQL,Saturday 1st of July 2023 11:44:36 PM CDT,"-- employees with his/her joining quater 

select employee_id,hire_date,case
when extract(month from hire_date) in (1,2,3) then 'q1'
when extract(month from hire_date) in (4,5,6) then 'q2'
when extract(month from hire_date) in (7,8,9) then 'q3'
when extract(month from hire_date) in (10,11,12) then 'q4'
end as AdmissionQuater
from hr.employees;

-- no of employes jloin in each quater
with temptable(empid,quater) as (
    select employee_id,case
    when extract(month from hire_date) in (1,2,3) then 'q1'
    when extract(month from hire_date) in (4,5,6) then 'q2'
    when extract(month from hire_date) in (7,8,9) then 'q3'
    when extract(month from hire_date) in (10,11,12) then 'q4'
    end as quater
    from hr.employees
)
select quater,count(empid) from temptable
group by quater;
"
RHmN3LPn,sql_interview_duplicate_nonduplicate_finding,saiRo199,SQL,Saturday 1st of July 2023 11:24:20 PM CDT,"create table tab1 (id int,ename varchar(200),age int);

insert into tab1 values(1,'name1',20);
insert into tab1 values(2,'name2',24);
insert into tab1 values(3,'name3',18);
insert into tab1 values(4,'name4',29);
insert into tab1 values(5,'name5',27);
insert into tab1 values(1,'name1',20);
insert into tab1 values(5,'name5',27);
insert into tab1 values(5,'name5',27);
insert into tab1 values(2,'name2',24);
insert into tab1 values(1,'name1',20);


select * from tab1;

-- finding unique rows from all duplicate data
select * from (
    select id,ename,age,row_number() over(partition by id,ename,age order by id) as row_num
    from tab1
) where row_num=1

-- finding unique rows from duplicate table that appeared only one time in source table
select * from tab1
group by id,ename,age
having count(*)=1

-- finding duplicate rows from duplicate table that appeared multiple times in source table
select distinct id,ename,age from (
    select id,ename,age,row_number() over(partition by id,ename,age order by id) as row_num
    from tab1
) where row_num > 1 ;

select * from tab1
group by id,ename,age
having count(*) <> 1;"
8ARa7AfE,melon v5,anzzue,Lua,Saturday 1st of July 2023 10:28:03 PM CDT,"a = 1
p = 1
x = 1 
m = 0 
n = 1 
t = 1
q = 1

write(""Length: "")
length = read()
l = length

write(""Rows: "")
row = read()
r = row
b = row

write(""Gap: "")
gap = read()
g = gap
x = r * g

repeat
repeat


--collect
repeat

turtle.dig()
a = a + 1
turtle.forward()
print (a)
print (l)


until( a > tonumber(l) )

turtle.turnRight()




x = x - g
x = x + 1
print(x)
 repeat
p = p + 1
turtle.forward()
until( p > x )



turtle.turnRight()

--drive to receive bay
repeat
n = n + 1
turtle.forward()
until n > (tonumber(l))

--drop at receive bay
turtle.drop(64)

--drive to next row
turtle.turnRight()
x = 1




x = x + 1
p = 1

 repeat
p = p + 1
turtle.forward()
until( p > x )
turtle.forward()

turtle.turnRight()


--var reset
a = 1
p = 1
m = 0 
n = 1 


t = t + 1
until ( t > tonumber(r) )
--var reset
t = 1
y = 1
turtle.turnLeft()
z = z + 1
repeat
y = y + 1
turtle.forward()

until ( y > r) 

until ( q > 10 )
"
WxNs1yft,CC:Tweaked Simple Mobfarm Sorter,timconspicuous,Lua,Saturday 1st of July 2023 09:52:50 PM CDT,"local input  = peripheral.wrap(""left"")
local trash  = peripheral.wrap(""top"")
local output = peripheral.wrap(""right"")

while true do
	for i = 1,input.size() do
		if input.getItemDetail(i) then
			if input.getItemDetail(i).nbt ~= nil or input.getItemDetail(i).durability ~= nil then
				input.pushItems(peripheral.getName(trash),i,64)
			else
				input.pushItems(peripheral.getName(output),i,64)
			end
		end
	end
	os.sleep(10)
end"
QJqYwv9q,Minecraft book text formatter (will be moved to github.com/TangentFoxy later),TangentFox,Lua,Saturday 1st of July 2023 09:47:13 PM CDT,"character_width_dots = { -- all characters are currently 1 to 6 dots wide
  ""!',.:;i|"",
  ""`l"",
  "" \""()*I[]t{}"",
  ""<>fk"",
  ""AaBbCcDdEeFGgHhJjKLMmNnOoPpQqRrSsTUuVvWwXxYyZz1234567890#$£%^&_-+=\\?/"",
  ""@~"",
}
character_spacing_width_dots = 1
default_character_width = 5

compatible = {
  max_dots_per_line: 114,
  max_lines_per_page: 14,
  max_characters_per_page: 798,
}
bedrock = {
  max_characters_per_book: 12800,
  max_pages_per_book: 50,
}
java = {
  max_characters_per_book: 79800,
  max_pages_per_book: 100,
}



copy = (...) ->
  output = {}
  for i = 1, select ""#"", ...
    for key, value in pairs select i, ...
      output[key] = value
  return output

-- rebuild character_width_dots into a quicker/easier form
character = {}
character.default = default_character_width
character[""\n""] = -character_spacing_width_dots
for i = 1, #character_width_dots
  line = character_width_dots[i]
  for j = 1, #line
    character[line\sub j, j] = i



input = """"
lines = {}
for line in io.lines ""input.txt""
  table.insert lines, line\gsub(""\t"", ""   "")
input = table.concat lines, ""\n""



limits = copy compatible, bedrock

-- lengths start at -1 to account for first extra dot
lines = {}
current_line_text = """"
current_line_length = -character_spacing_width_dots
next_line_text = """"
next_line_length = -character_spacing_width_dots
whitespace_encountered = false

while #input > 0
  current_character = input\sub 1, 1
  current_character_dots = (character[current_character] or character.default) + character_spacing_width_dots
  if current_character == "" ""
    whitespace_encountered = true

  current_line_text ..= current_character
  current_line_length += current_character_dots
  input = input\sub 2

  if current_character == ""\n""
    -- table.insert lines, current_line_text\sub(1, #current_line_text - 1) .. ""\\n""
    table.insert lines, current_line_text
    current_line_text = next_line_text
    current_line_length = next_line_length
    next_line_text = """"
    next_line_length = -character_spacing_width_dots

    whitespace_encountered = false
    continue

  if current_line_length > limits.max_dots_per_line
    while "" "" != current_line_text\sub #current_line_text
      current_character = current_line_text\sub #current_line_text
      current_character_dots = (character[current_character] or character.default) + character_spacing_width_dots

      next_line_text = current_character .. next_line_text
      next_line_length += current_character_dots
      current_line_text = current_line_text\sub 1, #current_line_text - 1
      current_line_length -= current_character_dots

      unless whitespace_encountered
        -- print ""Broke a huge line: #{current_line_text}""
        break

    table.insert lines, current_line_text
    current_line_text = next_line_text
    current_line_length = next_line_length
    next_line_text = """"
    next_line_length = -character_spacing_width_dots

    whitespace_encountered = false
    continue

if #current_line_text > 0
  table.insert lines, current_line_text



page_number = 1
output = {
  string.rep(""-"", 40) .. "" PAGE #{page_number}""
}
current_line = """"
for i = 1, #lines
  line = lines[i]
  current_line ..= line
  if ""\n"" == line\sub #line
    table.insert output, current_line
    current_line = """"
  -- table.insert output, line
  if i % limits.max_lines_per_page == 0
    table.insert output, current_line\sub(1, #current_line - 1)
    if i < #lines
      current_line = """"
      page_number += 1
      table.insert output, string.rep(""-"", 40) .. "" PAGE #{page_number}""

if #current_line > 0
  table.insert output, current_line

-- for line in *output
--   print line
-- print table.concat output
file = io.open ""output.txt"", ""w""
file\write table.concat output, ""\n""
file\close!
"
DRWXbQsG,Untitled,Falexom,Python,Saturday 1st of July 2023 09:18:11 PM CDT,"### base
import random


class Pokemon:
    def __init__(self, hp, defense, special_defense):
        self.hp = hp
        self.defense = defense
        self.special_defense = special_defense


class PhysicalAttack(Pokemon):
    def __init__(self, damage, hp, defense,  special_defense):
        super().__init__(hp,  defense, special_defense)
        self.damage = damage

    def attack(self):
        if self.defense > 50:
            self.damage = random.randint(10, 30)
            self.hp -= self.damage
        else:
            self.damage = random.randint(40, 50)
            self.hp -= self.damage


class Status(Pokemon):
    def __init__(self, status, hp,  defense,  special_defense):
        super().__init__(hp,  defense,  special_defense)
        self.status = status

    def status(self):
        return self.hp


class SpecialAttack(Pokemon):
    def __init__(self, damage, hp, defense,  special_defense):
        super().__init__(hp,  defense,  special_defense)
        self.damage = damage

    def attack(self):
        if self.special_defense > 50:
            self.damage = random.randint(25, 30)
            self.hp -= self.damage
        else:
            self.damage = random.randint(70, 80)
            self.hp -= self.damage


class Upgrade(Pokemon):
    def __init__(self, hp, defense, special_defense):
        super().__init__(hp, defense, special_defense)

    def upgrade(self):
        self.hp += 100

### battle
import time

from pokemons import *
import random


class Battle:
    def attack(self, attacker, pokemon):
        PhysicalAttack.attack(pokemon)
        print(f'{attacker.name} attacks {pokemon.name}! Pokemons hp {pokemon.hp}!')

    def special_attack(self, attacker, pokemon):
        SpecialAttack.attack(pokemon)
        print(f'{attacker.name} attacks by special attack {pokemon.name}!  Pokemons hp {pokemon.hp}!')

    def status(self, pokemon1, pokemon2):
        hp1 = Status.status(pokemon1)
        hp2 = Status.status(pokemon2)
        print(f'{pokemon1.name} is {hp1}, {pokemon2.name} is {hp2}')

    def upgrade(self, pokemon):
        Upgrade.upgrade(pokemon)
        print(f'{pokemon.name} has an upgrade!')


b = Battle()
battle_list = [b.attack, b.special_attack]
dragonite = Dragonite('Dragonite', 300, 30, 20)
mismagius = Mismagius('Mismagius', 250, 60, 50)

flag = 1
first_player_count = 0
second_player_count = 0

while True:
    if dragonite.hp <= 0 or mismagius.hp <= 0:
        break

    if first_player_count >= 20:
        b.upgrade(dragonite)
        first_player_count = 0
    if second_player_count >= 20:
        b.upgrade(mismagius)
        second_player_count = 0

    if flag == 1:
        attack = random.choice(battle_list)
        if attack == b.attack:
            b.attack(dragonite, mismagius)
            first_player_count += random.randint(1, 10)
            flag = 2

        if attack == b.special_attack:
            b.attack(dragonite, mismagius)
            first_player_count += random.randint(1, 10)
            flag = 2

    if flag == 2:
        attack = random.choice(battle_list)
        if attack == b.attack:
            b.attack(mismagius, dragonite)
            second_player_count += random.randint(1, 10)
            flag = 1
        if attack == b.special_attack:
            b.attack(mismagius, dragonite)
            second_player_count += random.randint(1, 10)
            flag = 1

    b.status(dragonite, mismagius)
    time.sleep(1)

if mismagius.hp <= 0:
    print('Dragonite won!')

if dragonite.hp <= 0:
    print('Misamagius won!')

### pokemons
from base import *


class Dragonite(Pokemon):
    def __init__(self, name, hp, defense,  special_defense):
        super().__init__(hp,  defense,  special_defense)
        self.name = name


class Mismagius(Pokemon):
    def __init__(self, name, hp, defense, special_defense):
        super().__init__(hp, defense, special_defense)
        self.name = name

"
u9kQ7k8x,Untitled,Falexom,Python,Saturday 1st of July 2023 09:07:59 PM CDT,"class Stack:
    def __init__(self, stack):
        self.__stack = stack

    def push(self, value):
        self.__stack.append(value)

    def pop(self):
        self.__stack.pop()

    def clear(self):
        for element in range(len(self.__stack)):
            self.__stack.pop()

    def view(self):
        print(self.__stack)


s = Stack([1])
s.push(5)
s.push(3)
s.push(4)
s.push(8)
s.push(9)
s.view()
s.pop()
s.pop()
s.view()
s.clear()
s.view()"
2U4Tg8td,Untitled,phpface,CSS,Saturday 1st of July 2023 08:34:32 PM CDT,"#preloader .spinner-border {
    color: green!important;
}"
Nr5rfKpX,Estoque e Vendas,LightProgrammer000,Python,Saturday 1st of July 2023 08:29:37 PM CDT,"""""""
# Programa: Exercício 6.17
""""""

# Dicionario
estoque = {
    ""tomate"": [1000, 2.30],
    ""alface"": [500, 0.45],
    ""batata"": [2001, 1.20],
    ""feijao"": [100, 1.50]
}

# Variavel de controle do total de vendas
total = 0

while True:

    # Menu (entrada de dados)
    print(f""""""\n{""=-="" * 10} MENU {""=-="" * 10}"""""")
    print(""# [1] Insercao de produtos no estoque"")
    print(""# [2] Vendagem de produtos"")
    print(""# [3] Atualizacao do estoque e vendas"")
    print(""# [4] Encerrar programa"")
    opc = int(input(""# Opc: ""))

    if opc == 1:

        while True:
                print(""\n* Inserindo produtos"")
                merc = input(""# Mercadoria: "").lower()
                qtd_merc = int(input(""# Quantidade: ""))
                val_merc = float(input(""# Preco: ""))

                # Estocando mercadorias no dicionario
                estoque[merc] = [qtd_merc, val_merc]

                # Controle de menu
                ins_prod = int(input(""# Deseja inserir outro produto no estoque: \n[1] Sim \n[2] Nao \nOpc: ""))

                if ins_prod == 2:

                    # Mensagem
                    print(""# Estoque atualizado"")

                    # Repeticao:
                    for i, j in estoque.items():
                        print(f""- Produto: {i} | Quantidade: {j[0]} | Preco: R$ {j[1]}"")
                    break

                else:
                    continue

    elif opc == 2:

        # Lista controle para opercao de 'desempacotamento'
        vendas = []

        # Apresentacao
        print(""\n# Vendendo Mercadoria"")

        # Entrada de dados
        merc = input(""# Mercadoria: "")

        # Decisao: Procurando produto no estoque
        if merc in estoque:
            vendas.append(merc)

            qtd_vend = int(input(""# Quantidade vendida: ""))

            # Protecao: Valor que excede o estoque
            if qtd_vend <= estoque[merc][0]:
                vendas.append(qtd_vend)

                # Desempacotamento
                prod, qtd = vendas

                # Calculos do valor
                total += estoque[merc][1] * qtd

                # Abatimento no estoque
                estoque[prod][0] -= qtd

                # Mensagem
                print(f""# Valor da venda do '{prod}': {qtd * estoque[prod][1]}"")
                print(f""# Quantidade no estoque do prodruto '{prod}': {estoque[prod][0]}"")

            else:
                print(f""# Valor invalido"")

        else:
            print(""# Produto inexistente"")

    # Analisar estoque
    elif opc == 3:

        # Repeticao: Apresentacao dos itens da lista
        for i, j in estoque.items():
            print(f""- Produto: {i} | Quantidade: {j[0]:0.2f} | Preco: R$ {j[1]:.2f}"")

        print(f""# Total das vendas: R$ {total:.2f}"")

    # Saida do programa
    elif opc == 4:
        break

    else:
        print(""# Codigo Invalido"")"
quqvdqWb,Typechart resistance/immunity lookup tables,CancerFairy,C,Saturday 1st of July 2023 08:21:41 PM CDT,"static const u32 sBugResists[] =
{
    BIT_TYPE_FAIRY, BIT_TYPE_FIGHTING, BIT_TYPE_FIRE, BIT_TYPE_FLYING, BIT_TYPE_GHOST, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugDoubleResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_GHOST, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_FLYING, BIT_TYPE_FIGHTING | BIT_TYPE_GHOST, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkResists[] =
{
    BIT_TYPE_DARK, BIT_TYPE_FAIRY, BIT_TYPE_FIGHTING, BIT_TYPE_NONE
};

static const u32 sDarkDoubleResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FAIRY, BIT_TYPE_DARK | BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_NONE
};

static const u32 sDragonResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonImmunities[] =
{
    BIT_TYPE_FAIRY, BIT_TYPE_NONE
};

static const u32 sElectricResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_ELECTRIC, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricImmunities[] =
{
    BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sFairyResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_FAIRY, BIT_TYPE_FLYING, BIT_TYPE_POISON, BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingDoubleResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_BUG | BIT_TYPE_PSYCHIC, BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_PSYCHIC, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_PSYCHIC, BIT_TYPE_POISON | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingImmunities[] =
{
    BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sFireResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_FIRE, BIT_TYPE_ROCK, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_DRAGON | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFlyingResists[] =
{
    BIT_TYPE_ELECTRIC, BIT_TYPE_ROCK, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingDoubleResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostResists[] =
{
    BIT_TYPE_DARK, BIT_TYPE_NONE
};

static const u32 sGhostImmunities[] =
{
    BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sGrassResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_DRAGON, BIT_TYPE_FIRE, BIT_TYPE_FLYING, BIT_TYPE_GRASS, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassDoubleResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_BUG | BIT_TYPE_STEEL, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_GRASS, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_GRASS, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGroundResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGroundDoubleResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGroundImmunities[] =
{
    BIT_TYPE_FLYING, BIT_TYPE_NONE
};

static const u32 sIceResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_ICE, BIT_TYPE_STEEL, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_ICE, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_ICE | BIT_TYPE_STEEL, BIT_TYPE_ICE | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sNormalResists[] =
{
    BIT_TYPE_ROCK, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalDoubleResists[] =
{
    BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalImmunities[] =
{
    BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sPoisonResists[] =
{
    BIT_TYPE_GHOST, BIT_TYPE_GROUND, BIT_TYPE_POISON, BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sPoisonDoubleResists[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sPoisonImmunities[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPsychicResists[] =
{
    BIT_TYPE_PSYCHIC, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPsychicDoubleResists[] =
{
    BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPsychicImmunities[] =
{
    BIT_TYPE_DARK, BIT_TYPE_NONE
};

static const u32 sRockResists[] =
{
    BIT_TYPE_FIGHTING, BIT_TYPE_GROUND, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sRockDoubleResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sSteelResists[] =
{
    BIT_TYPE_ELECTRIC, BIT_TYPE_FIRE, BIT_TYPE_STEEL, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sSteelDoubleResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sWaterResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_GRASS, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sWaterDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_WATER, BIT_TYPE_GRASS | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugDarkResists[] =
{
    BIT_TYPE_FAIRY, BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FIGHTING | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugDarkDoubleResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_NONE
};

static const u32 sBugDragonResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugElectricResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugFairyResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugFairyDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugFightingResists[] =
{
    BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_FLYING, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_FAIRY | BIT_TYPE_GHOST, BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sBugFightingDoubleResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sBugFireResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_ROCK, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugFlyingResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_ROCK, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_FLYING, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugGrassDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugGroundResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sBugIceResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_ICE, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_ICE, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_ICE, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_ICE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugNormalResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_ROCK, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugPoisonResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_GHOST, BIT_TYPE_FIGHTING | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GROUND, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_FLYING | BIT_TYPE_GROUND, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_ROCK, BIT_TYPE_GHOST, BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugPoisonDoubleResists[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sBugPsychicResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugRockResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_GROUND, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugRockDoubleResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugSteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugDarkResists[] =
{
    BIT_TYPE_FAIRY, BIT_TYPE_FIGHTING, BIT_TYPE_NONE
};

static const u32 sBugDarkDoubleResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_NONE
};

static const u32 sDarkDragonResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkElectricResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sDarkFairyResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkFightingResists[] =
{
    BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_FLYING, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sDarkFireResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDarkFlyingResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkGhostResists[] =
{
    BIT_TYPE_DARK, BIT_TYPE_DARK | BIT_TYPE_FAIRY, BIT_TYPE_DARK | BIT_TYPE_FIGHTING, BIT_TYPE_NONE
};

static const u32 sDarkGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DARK, BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_FLYING, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_DARK | BIT_TYPE_POISON, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_FLYING, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkGroundResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DARK, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sDarkIceResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_ICE, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_ICE, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_ICE, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDarkNormalResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkPoisonResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_DARK | BIT_TYPE_POISON, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sDarkPsychicResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkRockResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_GROUND, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING, BIT_TYPE_NONE
};

static const u32 sDarkSteelResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDarkWaterResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugDragonResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkDragonResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonElectricResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonElectricImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sDragonFairyResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonFightingImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sDragonFlyingResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonGhostResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonGhostImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sDragonGrassResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonGroundImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_NONE
};

static const u32 sDragonIceResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonNormalResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonNormalImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sDragonPoisonResists[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonPoisonImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonPsychicResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FAIRY, BIT_TYPE_NONE
};

static const u32 sDragonRockResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonSteelResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonWaterResists[] =
{
    BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugElectricResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkElectricResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sDragonElectricResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonElectricImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sElectricFairyResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricFightingResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sElectricFightingImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sElectricFireResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sElectricFlyingResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC, BIT_TYPE_NONE
};

static const u32 sElectricGhostResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricGhostImmunities[] =
{
    BIT_TYPE_GROUND | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sElectricGrassResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_BUG | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricGrassDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricGroundResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricGroundImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sElectricIceResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_ICE, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricNormalResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_ROCK, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricNormalImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sElectricPoisonResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_GROUND, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sElectricPoisonImmunities[] =
{
    BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricPsychicResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sElectricRockResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_GROUND, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_GROUND, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricSteelResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS, BIT_TYPE_FIRE | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricWaterResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricWaterDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sBugFairyResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugFairyDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkFairyResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonFairyResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricFairyResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_GRASS, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyFightingResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sFairyFireResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFairyFlyingResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyGrassResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyGrassDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyIceResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_ICE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyNormalResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyPoisonResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GROUND, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyPsychicResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyRockResists[] =
{
    BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairySteelResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairySteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyWaterResists[] =
{
    BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugFightingResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_FAIRY, BIT_TYPE_FLYING, BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sBugFightingDoubleResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sDarkFightingResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FIGHTING | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sDragonFightingImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sElectricFightingResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_BUG | BIT_TYPE_ELECTRIC, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sElectricFightingImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sFairyFightingResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_POISON | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingFireResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFightingFlyingResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingGhostImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sFightingGrassResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FLYING, BIT_TYPE_POISON, BIT_TYPE_BUG | BIT_TYPE_PSYCHIC, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_FLYING | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_POISON | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingGrassDoubleResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sFightingGroundResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingGroundImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sFightingIceResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFightingPoisonResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_BUG | BIT_TYPE_GROUND, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_FLYING | BIT_TYPE_GROUND, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_PSYCHIC, BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC, BIT_TYPE_POISON | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingPoisonImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingPsychicResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_PSYCHIC, BIT_TYPE_FAIRY | BIT_TYPE_PSYCHIC, BIT_TYPE_FLYING | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sFightingRockResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_PSYCHIC, BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingSteelResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_ELECTRIC, BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFightingWaterResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_GRASS, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugFireResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FLYING | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDarkFireResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sElectricFireResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sFairyFireResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFightingFireResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireFlyingResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireGhostResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireGrassResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_FIRE, BIT_TYPE_NONE
};

static const u32 sFireGrassDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_NONE
};

static const u32 sFireIceResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireNormalResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFirePoisonResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_GROUND, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GROUND, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_GROUND | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFirePsychicResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireRockResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_GROUND | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireSteelResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_WATER, BIT_TYPE_FIRE, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireSteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireWaterResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireWaterDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugFlyingResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FLYING | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkFlyingResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonFlyingResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricFlyingResists[] =
{
    BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyFlyingResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingFlyingResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFireFlyingResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sFlyingGhostResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingGrassResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingIceResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_ICE, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_ICE | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingNormalResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_ROCK, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingNormalDoubleResists[] =
{
    BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingPoisonResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingPsychicResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingRockResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingSteelResists[] =
{
    BIT_TYPE_ELECTRIC, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingSteelDoubleResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDarkGhostResists[] =
{
    BIT_TYPE_DARK, BIT_TYPE_NONE
};

static const u32 sDragonGhostResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonGhostImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sElectricGhostResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricGhostImmunities[] =
{
    BIT_TYPE_GROUND | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sFightingGhostImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sFireGhostResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFlyingGhostResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DARK, BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_FLYING, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_DARK | BIT_TYPE_POISON, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostGroundResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DARK, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGhostGroundImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sGhostIceResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_ICE, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGhostNormalResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostNormalImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sGhostPoisonResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_DARK | BIT_TYPE_POISON, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sGhostPoisonImmunities[] =
{
    BIT_TYPE_NORMAL | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostPsychicResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sGhostRockResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostSteelResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGhostWaterResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_BUG | BIT_TYPE_STEEL, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_FLYING, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugGrassDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DARK, BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_FLYING, BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_FIGHTING | BIT_TYPE_FLYING, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_DARK | BIT_TYPE_POISON, BIT_TYPE_FAIRY | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_BUG | BIT_TYPE_ELECTRIC, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_GRASS, BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricGrassDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sFairyGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_BUG | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_POISON, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyGrassDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingGrassResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FLYING | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sFightingGrassDoubleResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sFireGrassResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sFireGrassDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_NONE
};

static const u32 sFlyingGrassResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostGrassResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DARK, BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_FLYING, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_DARK | BIT_TYPE_POISON, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassGroundResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_GRASS, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGrassGroundDoubleResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGrassIceResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_ICE, BIT_TYPE_BUG | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_ICE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassNormalResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_STEEL, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassPoisonResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_BUG | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_FLYING | BIT_TYPE_POISON, BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassPsychicResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_STEEL, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FLYING | BIT_TYPE_PSYCHIC, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassRockResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassSteelResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_ELECTRIC, BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_STEEL, BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS, BIT_TYPE_FIRE | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassSteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassWaterResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_FLYING | BIT_TYPE_GRASS, BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassWaterDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sBugGroundResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_BUG | BIT_TYPE_FLYING, BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sDarkGroundResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DARK, BIT_TYPE_BUG | BIT_TYPE_FAIRY, BIT_TYPE_BUG | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sDragonGroundImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FLYING, BIT_TYPE_NONE
};

static const u32 sElectricGroundResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricGroundImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sFightingGroundResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FLYING | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingGroundImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sGhostGroundResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DARK, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGhostGroundImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sGrassGroundResists[] =
{
    BIT_TYPE_BUG, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGrassGroundDoubleResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGroundIceResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_ICE, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGroundNormalImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sGroundPoisonResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_BUG | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sGroundPoisonImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGroundPsychicResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sGroundPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FLYING, BIT_TYPE_NONE
};

static const u32 sGroundRockResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sGroundSteelResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_GRASS | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGroundWaterResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sBugIceResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_ICE, BIT_TYPE_FIGHTING | BIT_TYPE_ICE, BIT_TYPE_FIRE | BIT_TYPE_ICE, BIT_TYPE_GHOST | BIT_TYPE_ICE, BIT_TYPE_ICE | BIT_TYPE_POISON, BIT_TYPE_ICE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkIceResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_ICE, BIT_TYPE_FAIRY | BIT_TYPE_ICE, BIT_TYPE_FIGHTING | BIT_TYPE_ICE, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDragonIceResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_ICE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sElectricIceResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_ICE, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyIceResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_ICE, BIT_TYPE_ICE | BIT_TYPE_POISON, BIT_TYPE_ICE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFairyIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingIceResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_FAIRY | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireIceResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFlyingIceResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_ICE, BIT_TYPE_ICE | BIT_TYPE_ROCK, BIT_TYPE_ICE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGhostIceResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_ICE, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGrassIceResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_BUG | BIT_TYPE_ICE, BIT_TYPE_FIRE | BIT_TYPE_ICE, BIT_TYPE_ICE | BIT_TYPE_POISON, BIT_TYPE_ICE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassIceDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGroundIceResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_ICE, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceNormalResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_ICE | BIT_TYPE_ROCK, BIT_TYPE_ICE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIcePoisonResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_ICE, BIT_TYPE_ICE | BIT_TYPE_POISON, BIT_TYPE_ICE | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIcePsychicResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_ICE | BIT_TYPE_PSYCHIC, BIT_TYPE_ICE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceRockResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceSteelResists[] =
{
    BIT_TYPE_FIRE, BIT_TYPE_STEEL, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceSteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceWaterResists[] =
{
    BIT_TYPE_ICE | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugNormalResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FLYING | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkNormalResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_FAIRY | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonNormalResists[] =
{
    BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonNormalImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sElectricNormalResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_GRASS | BIT_TYPE_ROCK, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricNormalImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sFairyNormalResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFireNormalResists[] =
{
    BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sFlyingNormalResists[] =
{
    BIT_TYPE_ROCK, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFlyingNormalDoubleResists[] =
{
    BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostNormalResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostNormalImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sGrassNormalResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGroundNormalImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sIceNormalResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_ICE | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalPoisonResists[] =
{
    BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalPoisonImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalPsychicResists[] =
{
    BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sNormalRockResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalSteelResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugPoisonResists[] =
{
    BIT_TYPE_GHOST, BIT_TYPE_FIGHTING | BIT_TYPE_GROUND, BIT_TYPE_FIRE | BIT_TYPE_GROUND, BIT_TYPE_FLYING | BIT_TYPE_GROUND, BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_FLYING | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugPoisonDoubleResists[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sDarkPoisonResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_GROUND, BIT_TYPE_DARK | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sDragonPoisonResists[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonPoisonImmunities[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricPoisonResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_GROUND, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_ROCK, BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sElectricPoisonImmunities[] =
{
    BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyPoisonResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingPoisonResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_GROUND, BIT_TYPE_FLYING | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC, BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sFightingPoisonImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFirePoisonResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_GROUND, BIT_TYPE_FIRE | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sFlyingPoisonResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sGhostPoisonResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_DARK | BIT_TYPE_POISON, BIT_TYPE_DARK | BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sGhostPoisonImmunities[] =
{
    BIT_TYPE_NORMAL | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassPoisonResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FLYING | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_POISON, BIT_TYPE_NONE
};

static const u32 sGroundPoisonResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_GHOST, BIT_TYPE_BUG | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sGroundPoisonImmunities[] =
{
    BIT_TYPE_FLYING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sIcePoisonResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_ICE, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_ICE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_ROCK, BIT_TYPE_ICE | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sNormalPoisonResists[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_ROCK, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK, BIT_TYPE_NONE
};

static const u32 sNormalPoisonImmunities[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPoisonPsychicResists[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_PSYCHIC, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPoisonPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPoisonRockResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPoisonSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_FIRE | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sPoisonWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugPsychicResists[] =
{
    BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkPsychicResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonPsychicResists[] =
{
    BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FAIRY, BIT_TYPE_NONE
};

static const u32 sElectricPsychicResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sFairyPsychicResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingPsychicResists[] =
{
    BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFightingPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sFirePsychicResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFlyingPsychicResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK, BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostPsychicResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_NORMAL, BIT_TYPE_NONE
};

static const u32 sGrassPsychicResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_PSYCHIC, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_FLYING | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGroundPsychicResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sGroundPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FLYING, BIT_TYPE_NONE
};

static const u32 sIcePsychicResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_ICE | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalPsychicResists[] =
{
    BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK, BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_GHOST, BIT_TYPE_NONE
};

static const u32 sPoisonPsychicResists[] =
{
    BIT_TYPE_GHOST | BIT_TYPE_PSYCHIC, BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPoisonPsychicImmunities[] =
{
    BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPsychicRockResists[] =
{
    BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPsychicSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPsychicWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugRockResists[] =
{
    BIT_TYPE_FIGHTING, BIT_TYPE_FAIRY | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_GROUND, BIT_TYPE_GHOST | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sBugRockDoubleResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkRockResists[] =
{
    BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_FAIRY | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_GROUND, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDragonRockResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sElectricRockResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_GROUND, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_GRASS | BIT_TYPE_GROUND, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairyRockResists[] =
{
    BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingRockResists[] =
{
    BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_PSYCHIC, BIT_TYPE_FAIRY | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_POISON, BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC, BIT_TYPE_NONE
};

static const u32 sFireRockResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFlyingRockResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostRockResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_GROUND, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassRockResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGroundRockResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_GROUND, BIT_TYPE_NONE
};

static const u32 sIceRockResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sNormalRockResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_ROCK, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPoisonRockResists[] =
{
    BIT_TYPE_FIGHTING | BIT_TYPE_GHOST, BIT_TYPE_FIGHTING | BIT_TYPE_GROUND, BIT_TYPE_FIGHTING | BIT_TYPE_POISON, BIT_TYPE_FIGHTING | BIT_TYPE_ROCK, BIT_TYPE_GROUND, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_ROCK | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sPsychicRockResists[] =
{
    BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sRockSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_WATER, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sRockWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugSteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sDarkSteelResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_FIGHTING | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_STEEL, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDragonSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sElectricSteelResists[] =
{
    BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_GRASS, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFairySteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFairySteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sFightingSteelResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_FLYING, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireSteelResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_FIRE, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireSteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFlyingSteelResists[] =
{
    BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFlyingSteelDoubleResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGhostSteelResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_ELECTRIC, BIT_TYPE_DARK | BIT_TYPE_FIRE, BIT_TYPE_DARK | BIT_TYPE_STEEL, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGrassSteelResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING, BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIRE, BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGrassSteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_NONE
};

static const u32 sGroundSteelResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_GRASS | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_FIRE, BIT_TYPE_STEEL, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceSteelDoubleResists[] =
{
    BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sNormalSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sPoisonSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_ELECTRIC | BIT_TYPE_POISON, BIT_TYPE_FIRE | BIT_TYPE_GHOST, BIT_TYPE_FIRE | BIT_TYPE_GROUND, BIT_TYPE_FIRE | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_STEEL, BIT_TYPE_GROUND | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_STEEL, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_GROUND | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sPsychicSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC, BIT_TYPE_FIRE | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sRockSteelResists[] =
{
    BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING, BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND, BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL, BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_GROUND | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sSteelWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sBugWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDarkWaterResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sDragonWaterResists[] =
{
    BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sElectricWaterResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sElectricWaterDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sFairyWaterResists[] =
{
    BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFightingWaterResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_FAIRY, BIT_TYPE_DRAGON | BIT_TYPE_FLYING, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_GRASS, BIT_TYPE_FAIRY | BIT_TYPE_GRASS, BIT_TYPE_FLYING | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_POISON, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_FAIRY | BIT_TYPE_WATER, BIT_TYPE_FLYING | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireWaterResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFireWaterDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sFlyingWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_ELECTRIC | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGhostWaterResists[] =
{
    BIT_TYPE_DARK | BIT_TYPE_DRAGON, BIT_TYPE_DARK | BIT_TYPE_GRASS, BIT_TYPE_DARK | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sGrassWaterResists[] =
{
    BIT_TYPE_DRAGON, BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGrassWaterDoubleResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_NONE
};

static const u32 sGroundWaterResists[] =
{
    BIT_TYPE_BUG | BIT_TYPE_DRAGON, BIT_TYPE_DRAGON | BIT_TYPE_GRASS, BIT_TYPE_GRASS, BIT_TYPE_BUG | BIT_TYPE_WATER, BIT_TYPE_GRASS | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sIceWaterResists[] =
{
    BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sNormalWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sPoisonWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_GHOST, BIT_TYPE_DRAGON | BIT_TYPE_POISON, BIT_TYPE_GHOST | BIT_TYPE_WATER, BIT_TYPE_POISON | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sPsychicWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_PSYCHIC | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sRockWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_FIGHTING | BIT_TYPE_WATER, BIT_TYPE_STEEL | BIT_TYPE_WATER, BIT_TYPE_NONE
};

static const u32 sSteelWaterResists[] =
{
    BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC, BIT_TYPE_DRAGON | BIT_TYPE_STEEL, BIT_TYPE_DRAGON | BIT_TYPE_WATER, BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS, BIT_TYPE_GRASS | BIT_TYPE_STEEL, BIT_TYPE_GRASS | BIT_TYPE_WATER, BIT_TYPE_WATER, BIT_TYPE_NONE
};

const struct u32 *gTypeChartResistsLookupTable[] =
{
    [BIT_TYPE_BUG]                            = sBugResists,
    [BIT_TYPE_DARK]                           = sDarkResists,
    [BIT_TYPE_DRAGON]                         = sDragonResists,
    [BIT_TYPE_ELECTRIC]                       = sElectricResists,
    [BIT_TYPE_FAIRY]                          = sFairyResists,
    [BIT_TYPE_FIGHTING]                       = sFightingResists,
    [BIT_TYPE_FIRE]                           = sFireResists,
    [BIT_TYPE_FLYING]                         = sFlyingResists,
    [BIT_TYPE_GHOST]                          = sGhostResists,
    [BIT_TYPE_GRASS]                          = sGrassResists,
    [BIT_TYPE_GROUND]                         = sGroundResists,
    [BIT_TYPE_ICE]                            = sIceResists,
    [BIT_TYPE_NORMAL]                         = sNormalResists,
    [BIT_TYPE_POISON]                         = sPoisonResists,
    [BIT_TYPE_PSYCHIC]                        = sPsychicResists,
    [BIT_TYPE_ROCK]                           = sRockResists,
    [BIT_TYPE_STEEL]                          = sSteelResists,
    [BIT_TYPE_WATER]                          = sWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_DARK]            = sBugDarkResists,
    [BIT_TYPE_BUG | BIT_TYPE_DRAGON]          = sBugDragonResists,
    [BIT_TYPE_BUG | BIT_TYPE_ELECTRIC]        = sBugElectricResists,
    [BIT_TYPE_BUG | BIT_TYPE_FAIRY]           = sBugFairyResists,
    [BIT_TYPE_BUG | BIT_TYPE_FIGHTING]        = sBugFightingResists,
    [BIT_TYPE_BUG | BIT_TYPE_FIRE]            = sBugFireResists,
    [BIT_TYPE_BUG | BIT_TYPE_FLYING]          = sBugFlyingResists,
    [BIT_TYPE_BUG | BIT_TYPE_GRASS]           = sBugGrassResists,
    [BIT_TYPE_BUG | BIT_TYPE_GROUND]          = sBugGroundResists,
    [BIT_TYPE_BUG | BIT_TYPE_ICE]             = sBugIceResists,
    [BIT_TYPE_BUG | BIT_TYPE_NORMAL]          = sBugNormalResists,
    [BIT_TYPE_BUG | BIT_TYPE_POISON]          = sBugPoisonResists,
    [BIT_TYPE_BUG | BIT_TYPE_PSYCHIC]         = sBugPsychicResists,
    [BIT_TYPE_BUG | BIT_TYPE_ROCK]            = sBugRockResists,
    [BIT_TYPE_BUG | BIT_TYPE_STEEL]           = sBugSteelResists,
    [BIT_TYPE_BUG | BIT_TYPE_WATER]           = sBugWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_DARK]            = sBugDarkResists,
    [BIT_TYPE_DARK | BIT_TYPE_DRAGON]         = sDarkDragonResists,
    [BIT_TYPE_DARK | BIT_TYPE_ELECTRIC]       = sDarkElectricResists,
    [BIT_TYPE_DARK | BIT_TYPE_FAIRY]          = sDarkFairyResists,
    [BIT_TYPE_DARK | BIT_TYPE_FIGHTING]       = sDarkFightingResists,
    [BIT_TYPE_DARK | BIT_TYPE_FIRE]           = sDarkFireResists,
    [BIT_TYPE_DARK | BIT_TYPE_FLYING]         = sDarkFlyingResists,
    [BIT_TYPE_DARK | BIT_TYPE_GHOST]          = sDarkGhostResists,
    [BIT_TYPE_DARK | BIT_TYPE_GRASS]          = sDarkGrassResists,
    [BIT_TYPE_DARK | BIT_TYPE_GROUND]         = sDarkGroundResists,
    [BIT_TYPE_DARK | BIT_TYPE_ICE]            = sDarkIceResists,
    [BIT_TYPE_DARK | BIT_TYPE_NORMAL]         = sDarkNormalResists,
    [BIT_TYPE_DARK | BIT_TYPE_POISON]         = sDarkPoisonResists,
    [BIT_TYPE_DARK | BIT_TYPE_PSYCHIC]        = sDarkPsychicResists,
    [BIT_TYPE_DARK | BIT_TYPE_ROCK]           = sDarkRockResists,
    [BIT_TYPE_DARK | BIT_TYPE_STEEL]          = sDarkSteelResists,
    [BIT_TYPE_DARK | BIT_TYPE_WATER]          = sDarkWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_DRAGON]          = sBugDragonResists,
    [BIT_TYPE_DARK | BIT_TYPE_DRAGON]         = sDarkDragonResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC]     = sDragonElectricResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_FAIRY]        = sDragonFairyResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_FLYING]       = sDragonFlyingResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_GHOST]        = sDragonGhostResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_GRASS]        = sDragonGrassResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_ICE]          = sDragonIceResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_NORMAL]       = sDragonNormalResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_POISON]       = sDragonPoisonResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC]      = sDragonPsychicResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_ROCK]         = sDragonRockResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_STEEL]        = sDragonSteelResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_WATER]        = sDragonWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_ELECTRIC]        = sBugElectricResists,
    [BIT_TYPE_DARK | BIT_TYPE_ELECTRIC]       = sDarkElectricResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC]     = sDragonElectricResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY]      = sElectricFairyResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING]   = sElectricFightingResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE]       = sElectricFireResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING]     = sElectricFlyingResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST]      = sElectricGhostResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS]      = sElectricGrassResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND]     = sElectricGroundResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_ICE]        = sElectricIceResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_NORMAL]     = sElectricNormalResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_POISON]     = sElectricPoisonResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC]    = sElectricPsychicResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK]       = sElectricRockResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL]      = sElectricSteelResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_WATER]      = sElectricWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_FAIRY]           = sBugFairyResists,
    [BIT_TYPE_DARK | BIT_TYPE_FAIRY]          = sDarkFairyResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_FAIRY]        = sDragonFairyResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FAIRY]      = sElectricFairyResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING]      = sFairyFightingResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_FIRE]          = sFairyFireResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_FLYING]        = sFairyFlyingResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_GRASS]         = sFairyGrassResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_ICE]           = sFairyIceResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_NORMAL]        = sFairyNormalResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_POISON]        = sFairyPoisonResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_PSYCHIC]       = sFairyPsychicResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_ROCK]          = sFairyRockResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_STEEL]         = sFairySteelResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_WATER]         = sFairyWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_FIGHTING]        = sBugFightingResists,
    [BIT_TYPE_DARK | BIT_TYPE_FIGHTING]       = sDarkFightingResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING]   = sElectricFightingResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_FIGHTING]      = sFairyFightingResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_FIRE]       = sFightingFireResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_FLYING]     = sFightingFlyingResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GRASS]      = sFightingGrassResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GROUND]     = sFightingGroundResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_ICE]        = sFightingIceResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_POISON]     = sFightingPoisonResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_PSYCHIC]    = sFightingPsychicResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_ROCK]       = sFightingRockResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_STEEL]      = sFightingSteelResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_WATER]      = sFightingWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_FIRE]            = sBugFireResists,
    [BIT_TYPE_DARK | BIT_TYPE_FIRE]           = sDarkFireResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FIRE]       = sElectricFireResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_FIRE]          = sFairyFireResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_FIRE]       = sFightingFireResists,
    [BIT_TYPE_FIRE | BIT_TYPE_FLYING]         = sFireFlyingResists,
    [BIT_TYPE_FIRE | BIT_TYPE_GHOST]          = sFireGhostResists,
    [BIT_TYPE_FIRE | BIT_TYPE_GRASS]          = sFireGrassResists,
    [BIT_TYPE_FIRE | BIT_TYPE_ICE]            = sFireIceResists,
    [BIT_TYPE_FIRE | BIT_TYPE_NORMAL]         = sFireNormalResists,
    [BIT_TYPE_FIRE | BIT_TYPE_POISON]         = sFirePoisonResists,
    [BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC]        = sFirePsychicResists,
    [BIT_TYPE_FIRE | BIT_TYPE_ROCK]           = sFireRockResists,
    [BIT_TYPE_FIRE | BIT_TYPE_STEEL]          = sFireSteelResists,
    [BIT_TYPE_FIRE | BIT_TYPE_WATER]          = sFireWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_FLYING]          = sBugFlyingResists,
    [BIT_TYPE_DARK | BIT_TYPE_FLYING]         = sDarkFlyingResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_FLYING]       = sDragonFlyingResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FLYING]     = sElectricFlyingResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_FLYING]        = sFairyFlyingResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_FLYING]     = sFightingFlyingResists,
    [BIT_TYPE_FIRE | BIT_TYPE_FLYING]         = sFireFlyingResists,
    [BIT_TYPE_FLYING | BIT_TYPE_GHOST]        = sFlyingGhostResists,
    [BIT_TYPE_FLYING | BIT_TYPE_GRASS]        = sFlyingGrassResists,
    [BIT_TYPE_FLYING | BIT_TYPE_ICE]          = sFlyingIceResists,
    [BIT_TYPE_FLYING | BIT_TYPE_NORMAL]       = sFlyingNormalResists,
    [BIT_TYPE_FLYING | BIT_TYPE_POISON]       = sFlyingPoisonResists,
    [BIT_TYPE_FLYING | BIT_TYPE_PSYCHIC]      = sFlyingPsychicResists,
    [BIT_TYPE_FLYING | BIT_TYPE_ROCK]         = sFlyingRockResists,
    [BIT_TYPE_FLYING | BIT_TYPE_STEEL]        = sFlyingSteelResists,
    [BIT_TYPE_FLYING | BIT_TYPE_WATER]        = sFlyingWaterResists,
    [BIT_TYPE_DARK | BIT_TYPE_GHOST]          = sDarkGhostResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_GHOST]        = sDragonGhostResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST]      = sElectricGhostResists,
    [BIT_TYPE_FIRE | BIT_TYPE_GHOST]          = sFireGhostResists,
    [BIT_TYPE_FLYING | BIT_TYPE_GHOST]        = sFlyingGhostResists,
    [BIT_TYPE_GHOST | BIT_TYPE_GRASS]         = sGhostGrassResists,
    [BIT_TYPE_GHOST | BIT_TYPE_GROUND]        = sGhostGroundResists,
    [BIT_TYPE_GHOST | BIT_TYPE_ICE]           = sGhostIceResists,
    [BIT_TYPE_GHOST | BIT_TYPE_NORMAL]        = sGhostNormalResists,
    [BIT_TYPE_GHOST | BIT_TYPE_POISON]        = sGhostPoisonResists,
    [BIT_TYPE_GHOST | BIT_TYPE_PSYCHIC]       = sGhostPsychicResists,
    [BIT_TYPE_GHOST | BIT_TYPE_ROCK]          = sGhostRockResists,
    [BIT_TYPE_GHOST | BIT_TYPE_STEEL]         = sGhostSteelResists,
    [BIT_TYPE_GHOST | BIT_TYPE_WATER]         = sGhostWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_GRASS]           = sBugGrassResists,
    [BIT_TYPE_DARK | BIT_TYPE_GRASS]          = sDarkGrassResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_GRASS]        = sDragonGrassResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS]      = sElectricGrassResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_GRASS]         = sFairyGrassResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GRASS]      = sFightingGrassResists,
    [BIT_TYPE_FIRE | BIT_TYPE_GRASS]          = sFireGrassResists,
    [BIT_TYPE_FLYING | BIT_TYPE_GRASS]        = sFlyingGrassResists,
    [BIT_TYPE_GHOST | BIT_TYPE_GRASS]         = sGhostGrassResists,
    [BIT_TYPE_GRASS | BIT_TYPE_GROUND]        = sGrassGroundResists,
    [BIT_TYPE_GRASS | BIT_TYPE_ICE]           = sGrassIceResists,
    [BIT_TYPE_GRASS | BIT_TYPE_NORMAL]        = sGrassNormalResists,
    [BIT_TYPE_GRASS | BIT_TYPE_POISON]        = sGrassPoisonResists,
    [BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC]       = sGrassPsychicResists,
    [BIT_TYPE_GRASS | BIT_TYPE_ROCK]          = sGrassRockResists,
    [BIT_TYPE_GRASS | BIT_TYPE_STEEL]         = sGrassSteelResists,
    [BIT_TYPE_GRASS | BIT_TYPE_WATER]         = sGrassWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_GROUND]          = sBugGroundResists,
    [BIT_TYPE_DARK | BIT_TYPE_GROUND]         = sDarkGroundResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND]     = sElectricGroundResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GROUND]     = sFightingGroundResists,
    [BIT_TYPE_GHOST | BIT_TYPE_GROUND]        = sGhostGroundResists,
    [BIT_TYPE_GRASS | BIT_TYPE_GROUND]        = sGrassGroundResists,
    [BIT_TYPE_GROUND | BIT_TYPE_ICE]          = sGroundIceResists,
    [BIT_TYPE_GROUND | BIT_TYPE_POISON]       = sGroundPoisonResists,
    [BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC]      = sGroundPsychicResists,
    [BIT_TYPE_GROUND | BIT_TYPE_ROCK]         = sGroundRockResists,
    [BIT_TYPE_GROUND | BIT_TYPE_STEEL]        = sGroundSteelResists,
    [BIT_TYPE_GROUND | BIT_TYPE_WATER]        = sGroundWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_ICE]             = sBugIceResists,
    [BIT_TYPE_DARK | BIT_TYPE_ICE]            = sDarkIceResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_ICE]          = sDragonIceResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_ICE]        = sElectricIceResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_ICE]           = sFairyIceResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_ICE]        = sFightingIceResists,
    [BIT_TYPE_FIRE | BIT_TYPE_ICE]            = sFireIceResists,
    [BIT_TYPE_FLYING | BIT_TYPE_ICE]          = sFlyingIceResists,
    [BIT_TYPE_GHOST | BIT_TYPE_ICE]           = sGhostIceResists,
    [BIT_TYPE_GRASS | BIT_TYPE_ICE]           = sGrassIceResists,
    [BIT_TYPE_GROUND | BIT_TYPE_ICE]          = sGroundIceResists,
    [BIT_TYPE_ICE | BIT_TYPE_NORMAL]          = sIceNormalResists,
    [BIT_TYPE_ICE | BIT_TYPE_POISON]          = sIcePoisonResists,
    [BIT_TYPE_ICE | BIT_TYPE_PSYCHIC]         = sIcePsychicResists,
    [BIT_TYPE_ICE | BIT_TYPE_ROCK]            = sIceRockResists,
    [BIT_TYPE_ICE | BIT_TYPE_STEEL]           = sIceSteelResists,
    [BIT_TYPE_ICE | BIT_TYPE_WATER]           = sIceWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_NORMAL]          = sBugNormalResists,
    [BIT_TYPE_DARK | BIT_TYPE_NORMAL]         = sDarkNormalResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_NORMAL]       = sDragonNormalResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_NORMAL]     = sElectricNormalResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_NORMAL]        = sFairyNormalResists,
    [BIT_TYPE_FIRE | BIT_TYPE_NORMAL]         = sFireNormalResists,
    [BIT_TYPE_FLYING | BIT_TYPE_NORMAL]       = sFlyingNormalResists,
    [BIT_TYPE_GHOST | BIT_TYPE_NORMAL]        = sGhostNormalResists,
    [BIT_TYPE_GRASS | BIT_TYPE_NORMAL]        = sGrassNormalResists,
    [BIT_TYPE_ICE | BIT_TYPE_NORMAL]          = sIceNormalResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_POISON]       = sNormalPoisonResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_PSYCHIC]      = sNormalPsychicResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_ROCK]         = sNormalRockResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_STEEL]        = sNormalSteelResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_WATER]        = sNormalWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_POISON]          = sBugPoisonResists,
    [BIT_TYPE_DARK | BIT_TYPE_POISON]         = sDarkPoisonResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_POISON]       = sDragonPoisonResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_POISON]     = sElectricPoisonResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_POISON]        = sFairyPoisonResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_POISON]     = sFightingPoisonResists,
    [BIT_TYPE_FIRE | BIT_TYPE_POISON]         = sFirePoisonResists,
    [BIT_TYPE_FLYING | BIT_TYPE_POISON]       = sFlyingPoisonResists,
    [BIT_TYPE_GHOST | BIT_TYPE_POISON]        = sGhostPoisonResists,
    [BIT_TYPE_GRASS | BIT_TYPE_POISON]        = sGrassPoisonResists,
    [BIT_TYPE_GROUND | BIT_TYPE_POISON]       = sGroundPoisonResists,
    [BIT_TYPE_ICE | BIT_TYPE_POISON]          = sIcePoisonResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_POISON]       = sNormalPoisonResists,
    [BIT_TYPE_POISON | BIT_TYPE_PSYCHIC]      = sPoisonPsychicResists,
    [BIT_TYPE_POISON | BIT_TYPE_ROCK]         = sPoisonRockResists,
    [BIT_TYPE_POISON | BIT_TYPE_STEEL]        = sPoisonSteelResists,
    [BIT_TYPE_POISON | BIT_TYPE_WATER]        = sPoisonWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_PSYCHIC]         = sBugPsychicResists,
    [BIT_TYPE_DARK | BIT_TYPE_PSYCHIC]        = sDarkPsychicResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC]      = sDragonPsychicResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC]    = sElectricPsychicResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_PSYCHIC]       = sFairyPsychicResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_PSYCHIC]    = sFightingPsychicResists,
    [BIT_TYPE_FIRE | BIT_TYPE_PSYCHIC]        = sFirePsychicResists,
    [BIT_TYPE_FLYING | BIT_TYPE_PSYCHIC]      = sFlyingPsychicResists,
    [BIT_TYPE_GHOST | BIT_TYPE_PSYCHIC]       = sGhostPsychicResists,
    [BIT_TYPE_GRASS | BIT_TYPE_PSYCHIC]       = sGrassPsychicResists,
    [BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC]      = sGroundPsychicResists,
    [BIT_TYPE_ICE | BIT_TYPE_PSYCHIC]         = sIcePsychicResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_PSYCHIC]      = sNormalPsychicResists,
    [BIT_TYPE_POISON | BIT_TYPE_PSYCHIC]      = sPoisonPsychicResists,
    [BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK]        = sPsychicRockResists,
    [BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL]       = sPsychicSteelResists,
    [BIT_TYPE_PSYCHIC | BIT_TYPE_WATER]       = sPsychicWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_ROCK]            = sBugRockResists,
    [BIT_TYPE_DARK | BIT_TYPE_ROCK]           = sDarkRockResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_ROCK]         = sDragonRockResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_ROCK]       = sElectricRockResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_ROCK]          = sFairyRockResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_ROCK]       = sFightingRockResists,
    [BIT_TYPE_FIRE | BIT_TYPE_ROCK]           = sFireRockResists,
    [BIT_TYPE_FLYING | BIT_TYPE_ROCK]         = sFlyingRockResists,
    [BIT_TYPE_GHOST | BIT_TYPE_ROCK]          = sGhostRockResists,
    [BIT_TYPE_GRASS | BIT_TYPE_ROCK]          = sGrassRockResists,
    [BIT_TYPE_GROUND | BIT_TYPE_ROCK]         = sGroundRockResists,
    [BIT_TYPE_ICE | BIT_TYPE_ROCK]            = sIceRockResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_ROCK]         = sNormalRockResists,
    [BIT_TYPE_POISON | BIT_TYPE_ROCK]         = sPoisonRockResists,
    [BIT_TYPE_PSYCHIC | BIT_TYPE_ROCK]        = sPsychicRockResists,
    [BIT_TYPE_ROCK | BIT_TYPE_STEEL]          = sRockSteelResists,
    [BIT_TYPE_ROCK | BIT_TYPE_WATER]          = sRockWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_STEEL]           = sBugSteelResists,
    [BIT_TYPE_DARK | BIT_TYPE_STEEL]          = sDarkSteelResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_STEEL]        = sDragonSteelResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_STEEL]      = sElectricSteelResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_STEEL]         = sFairySteelResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_STEEL]      = sFightingSteelResists,
    [BIT_TYPE_FIRE | BIT_TYPE_STEEL]          = sFireSteelResists,
    [BIT_TYPE_FLYING | BIT_TYPE_STEEL]        = sFlyingSteelResists,
    [BIT_TYPE_GHOST | BIT_TYPE_STEEL]         = sGhostSteelResists,
    [BIT_TYPE_GRASS | BIT_TYPE_STEEL]         = sGrassSteelResists,
    [BIT_TYPE_GROUND | BIT_TYPE_STEEL]        = sGroundSteelResists,
    [BIT_TYPE_ICE | BIT_TYPE_STEEL]           = sIceSteelResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_STEEL]        = sNormalSteelResists,
    [BIT_TYPE_POISON | BIT_TYPE_STEEL]        = sPoisonSteelResists,
    [BIT_TYPE_PSYCHIC | BIT_TYPE_STEEL]       = sPsychicSteelResists,
    [BIT_TYPE_ROCK | BIT_TYPE_STEEL]          = sRockSteelResists,
    [BIT_TYPE_STEEL | BIT_TYPE_WATER]         = sSteelWaterResists,
    [BIT_TYPE_BUG | BIT_TYPE_WATER]           = sBugWaterResists,
    [BIT_TYPE_DARK | BIT_TYPE_WATER]          = sDarkWaterResists,
    [BIT_TYPE_DRAGON | BIT_TYPE_WATER]        = sDragonWaterResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_WATER]      = sElectricWaterResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_WATER]         = sFairyWaterResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_WATER]      = sFightingWaterResists,
    [BIT_TYPE_FIRE | BIT_TYPE_WATER]          = sFireWaterResists,
    [BIT_TYPE_FLYING | BIT_TYPE_WATER]        = sFlyingWaterResists,
    [BIT_TYPE_GHOST | BIT_TYPE_WATER]         = sGhostWaterResists,
    [BIT_TYPE_GRASS | BIT_TYPE_WATER]         = sGrassWaterResists,
    [BIT_TYPE_GROUND | BIT_TYPE_WATER]        = sGroundWaterResists,
    [BIT_TYPE_ICE | BIT_TYPE_WATER]           = sIceWaterResists,
    [BIT_TYPE_NORMAL | BIT_TYPE_WATER]        = sNormalWaterResists,
    [BIT_TYPE_POISON | BIT_TYPE_WATER]        = sPoisonWaterResists,
    [BIT_TYPE_PSYCHIC | BIT_TYPE_WATER]       = sPsychicWaterResists,
    [BIT_TYPE_ROCK | BIT_TYPE_WATER]          = sRockWaterResists,
    [BIT_TYPE_STEEL | BIT_TYPE_WATER]         = sSteelWaterResists,
};

const struct u32 *gTypeChartResistsLookupTable[] =
{
    [BIT_TYPE_BUG]                            = sBugDoubleResists,
    [BIT_TYPE_DARK]                           = sDarkDoubleResists,
    [BIT_TYPE_ELECTRIC]                       = sElectricDoubleResists,
    [BIT_TYPE_FAIRY]                          = sFairyDoubleResists,
    [BIT_TYPE_FIGHTING]                       = sFightingDoubleResists,
    [BIT_TYPE_FIRE]                           = sFireDoubleResists,
    [BIT_TYPE_FLYING]                         = sFlyingDoubleResists,
    [BIT_TYPE_GRASS]                          = sGrassDoubleResists,
    [BIT_TYPE_GROUND]                         = sGroundDoubleResists,
    [BIT_TYPE_ICE]                            = sIceDoubleResists,
    [BIT_TYPE_NORMAL]                         = sNormalDoubleResists,
    [BIT_TYPE_POISON]                         = sPoisonDoubleResists,
    [BIT_TYPE_PSYCHIC]                        = sPsychicDoubleResists,
    [BIT_TYPE_ROCK]                           = sRockDoubleResists,
    [BIT_TYPE_STEEL]                          = sSteelDoubleResists,
    [BIT_TYPE_WATER]                          = sWaterDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_DARK]            = sBugDarkDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_FAIRY]           = sBugFairyDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_FIGHTING]        = sBugFightingDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_GRASS]           = sBugGrassDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_ICE]             = sBugIceDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_POISON]          = sBugPoisonDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_ROCK]            = sBugRockDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_STEEL]           = sBugSteelDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_DARK]            = sBugDarkDoubleResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS]      = sElectricGrassDoubleResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_WATER]      = sElectricWaterDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_FAIRY]           = sBugFairyDoubleResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_GRASS]         = sFairyGrassDoubleResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_ICE]           = sFairyIceDoubleResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_STEEL]         = sFairySteelDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_FIGHTING]        = sBugFightingDoubleResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GRASS]      = sFightingGrassDoubleResists,
    [BIT_TYPE_FIRE | BIT_TYPE_GRASS]          = sFireGrassDoubleResists,
    [BIT_TYPE_FIRE | BIT_TYPE_ICE]            = sFireIceDoubleResists,
    [BIT_TYPE_FIRE | BIT_TYPE_STEEL]          = sFireSteelDoubleResists,
    [BIT_TYPE_FIRE | BIT_TYPE_WATER]          = sFireWaterDoubleResists,
    [BIT_TYPE_FLYING | BIT_TYPE_NORMAL]       = sFlyingNormalDoubleResists,
    [BIT_TYPE_FLYING | BIT_TYPE_STEEL]        = sFlyingSteelDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_GRASS]           = sBugGrassDoubleResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GRASS]      = sElectricGrassDoubleResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_GRASS]         = sFairyGrassDoubleResists,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GRASS]      = sFightingGrassDoubleResists,
    [BIT_TYPE_FIRE | BIT_TYPE_GRASS]          = sFireGrassDoubleResists,
    [BIT_TYPE_GRASS | BIT_TYPE_GROUND]        = sGrassGroundDoubleResists,
    [BIT_TYPE_GRASS | BIT_TYPE_ICE]           = sGrassIceDoubleResists,
    [BIT_TYPE_GRASS | BIT_TYPE_STEEL]         = sGrassSteelDoubleResists,
    [BIT_TYPE_GRASS | BIT_TYPE_WATER]         = sGrassWaterDoubleResists,
    [BIT_TYPE_GRASS | BIT_TYPE_GROUND]        = sGrassGroundDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_ICE]             = sBugIceDoubleResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_ICE]           = sFairyIceDoubleResists,
    [BIT_TYPE_FIRE | BIT_TYPE_ICE]            = sFireIceDoubleResists,
    [BIT_TYPE_GRASS | BIT_TYPE_ICE]           = sGrassIceDoubleResists,
    [BIT_TYPE_ICE | BIT_TYPE_STEEL]           = sIceSteelDoubleResists,
    [BIT_TYPE_FLYING | BIT_TYPE_NORMAL]       = sFlyingNormalDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_POISON]          = sBugPoisonDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_ROCK]            = sBugRockDoubleResists,
    [BIT_TYPE_BUG | BIT_TYPE_STEEL]           = sBugSteelDoubleResists,
    [BIT_TYPE_FAIRY | BIT_TYPE_STEEL]         = sFairySteelDoubleResists,
    [BIT_TYPE_FIRE | BIT_TYPE_STEEL]          = sFireSteelDoubleResists,
    [BIT_TYPE_FLYING | BIT_TYPE_STEEL]        = sFlyingSteelDoubleResists,
    [BIT_TYPE_GRASS | BIT_TYPE_STEEL]         = sGrassSteelDoubleResists,
    [BIT_TYPE_ICE | BIT_TYPE_STEEL]           = sIceSteelDoubleResists,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_WATER]      = sElectricWaterDoubleResists,
    [BIT_TYPE_FIRE | BIT_TYPE_WATER]          = sFireWaterDoubleResists,
    [BIT_TYPE_GRASS | BIT_TYPE_WATER]         = sGrassWaterDoubleResists,
};

const struct u32 *gTypeChartImmunitiesTable[] =
{
    [BIT_TYPE_DRAGON]                         = sDragonImmunities,
    [BIT_TYPE_ELECTRIC]                       = sElectricImmunities,
    [BIT_TYPE_FIGHTING]                       = sFightingImmunities,
    [BIT_TYPE_GHOST]                          = sGhostImmunities,
    [BIT_TYPE_GROUND]                         = sGroundImmunities,
    [BIT_TYPE_NORMAL]                         = sNormalImmunities,
    [BIT_TYPE_POISON]                         = sPoisonImmunities,
    [BIT_TYPE_PSYCHIC]                        = sPsychicImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC]     = sDragonElectricImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING]     = sDragonFightingImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_GHOST]        = sDragonGhostImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_GROUND]       = sDragonGroundImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_NORMAL]       = sDragonNormalImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_POISON]       = sDragonPoisonImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC]      = sDragonPsychicImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_ELECTRIC]     = sDragonElectricImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING]   = sElectricFightingImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST]      = sElectricGhostImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND]     = sElectricGroundImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_NORMAL]     = sElectricNormalImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_POISON]     = sElectricPoisonImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC]    = sElectricPsychicImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_FIGHTING]     = sDragonFightingImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_FIGHTING]   = sElectricFightingImmunities,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GHOST]      = sFightingGhostImmunities,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GROUND]     = sFightingGroundImmunities,
    [BIT_TYPE_FIGHTING | BIT_TYPE_POISON]     = sFightingPoisonImmunities,
    [BIT_TYPE_FIGHTING | BIT_TYPE_PSYCHIC]    = sFightingPsychicImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_GHOST]        = sDragonGhostImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GHOST]      = sElectricGhostImmunities,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GHOST]      = sFightingGhostImmunities,
    [BIT_TYPE_GHOST | BIT_TYPE_GROUND]        = sGhostGroundImmunities,
    [BIT_TYPE_GHOST | BIT_TYPE_NORMAL]        = sGhostNormalImmunities,
    [BIT_TYPE_GHOST | BIT_TYPE_POISON]        = sGhostPoisonImmunities,
    [BIT_TYPE_GHOST | BIT_TYPE_PSYCHIC]       = sGhostPsychicImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_GROUND]       = sDragonGroundImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_GROUND]     = sElectricGroundImmunities,
    [BIT_TYPE_FIGHTING | BIT_TYPE_GROUND]     = sFightingGroundImmunities,
    [BIT_TYPE_GHOST | BIT_TYPE_GROUND]        = sGhostGroundImmunities,
    [BIT_TYPE_GROUND | BIT_TYPE_NORMAL]       = sGroundNormalImmunities,
    [BIT_TYPE_GROUND | BIT_TYPE_POISON]       = sGroundPoisonImmunities,
    [BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC]      = sGroundPsychicImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_NORMAL]       = sDragonNormalImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_NORMAL]     = sElectricNormalImmunities,
    [BIT_TYPE_GHOST | BIT_TYPE_NORMAL]        = sGhostNormalImmunities,
    [BIT_TYPE_GROUND | BIT_TYPE_NORMAL]       = sGroundNormalImmunities,
    [BIT_TYPE_NORMAL | BIT_TYPE_POISON]       = sNormalPoisonImmunities,
    [BIT_TYPE_NORMAL | BIT_TYPE_PSYCHIC]      = sNormalPsychicImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_POISON]       = sDragonPoisonImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_POISON]     = sElectricPoisonImmunities,
    [BIT_TYPE_FIGHTING | BIT_TYPE_POISON]     = sFightingPoisonImmunities,
    [BIT_TYPE_GHOST | BIT_TYPE_POISON]        = sGhostPoisonImmunities,
    [BIT_TYPE_GROUND | BIT_TYPE_POISON]       = sGroundPoisonImmunities,
    [BIT_TYPE_NORMAL | BIT_TYPE_POISON]       = sNormalPoisonImmunities,
    [BIT_TYPE_POISON | BIT_TYPE_PSYCHIC]      = sPoisonPsychicImmunities,
    [BIT_TYPE_DRAGON | BIT_TYPE_PSYCHIC]      = sDragonPsychicImmunities,
    [BIT_TYPE_ELECTRIC | BIT_TYPE_PSYCHIC]    = sElectricPsychicImmunities,
    [BIT_TYPE_FIGHTING | BIT_TYPE_PSYCHIC]    = sFightingPsychicImmunities,
    [BIT_TYPE_GHOST | BIT_TYPE_PSYCHIC]       = sGhostPsychicImmunities,
    [BIT_TYPE_GROUND | BIT_TYPE_PSYCHIC]      = sGroundPsychicImmunities,
    [BIT_TYPE_NORMAL | BIT_TYPE_PSYCHIC]      = sNormalPsychicImmunities,
    [BIT_TYPE_POISON | BIT_TYPE_PSYCHIC]      = sPoisonPsychicImmunities,
};
"
xP7Ah2mM,SpaceX script,A_GUES,Lua,Saturday 1st of July 2023 08:05:39 PM CDT,"loadstring(game:HttpGet(('https://raw.githubusercontent.com/ProExecutor/Pro-Executor-/main/SpaceX.lua'),true))()"
uyCdXbWj,Untitled,35657,C++,Saturday 1st of July 2023 07:54:30 PM CDT,"#include <iostream>

using namespace std;

//int Max(int left, int right) {
//	if (left > right) {
//		return left;
//	}
//	else {
//		return right;
//	}
//}
//
//int Max(int left, int right) {
//	return left > right ? left : right;
//}
//

int Max(int left, int right) {
	int c = 0;
	left > right ? c = left : c = right;
	return c;
}

void PrintMax(int left, int right) {
	left > right ? cout << left : cout << right;
	cout << endl;
}


void Print() {
	cout << ""hello"" << endl;
}


int Sum(int a, int b) {
	return a + b;
}

int Mult(int a, int b) {
	return a * b;
}

void Calc(int a, int b) {
	cout << (Sum(a, b) - Mult(a, b)) * 2 << endl;
}

void PrinRectangle(int a, int b) {
	for (int i = 0; i < a; i++) {
		for (int j = 0; j < b; j++) {
			cout << '*';
		}
		cout << endl;
	}
	cout << endl;
}

int Fact(int N) {
	int result = 1;
	for (int i = 1; i <= N; i++) {
		result *= i;
	}
	return result;
}

void IsSimple(int number) {
	for (int i = 2; i < number; i++) {
		if (number % i == 0) {
			cout << ""No simple"" << endl;
			return;
		}
	}
	cout << ""Simple"" << endl;
}

//bool IsSimple(int number) {
//	for (int i = 2; i < number; i++) {
//		if (number % i == 0) {
//			return false;
//		}
//	}
//	return true;
//}

void CheckArray(int arr[], int size) {
	int min = arr[0];
	int min_index = 0;
	int max = arr[0];
	int max_index = 0;

	for (int i = 0; i < size; i++) {
		if (arr[i] < min) {
			min = arr[i];
			min_index = i;
		}
		if (arr[i] > max) {
			max = arr[i];
			max_index = i;
		}
	}
	cout << ""Минимальное значение: "" << min << "", индекс: "" << min_index << endl;
	cout << ""Максимальное значение: "" << max << "", индекс: "" << max_index << endl;
}

void InvertArray(int arr[], int size) {
	for (int i = 0; i < size / 2; i++) {
		int temp = arr[i];
		arr[i] = arr[size - i - 1];
		arr[size - i - 1] = temp;
	}
}

void PrintArray(int arr[], int size) {
	for (int i = 0; i < size; i++) {
		cout << arr[i] << "" "";
	}
	cout << endl;
}

void RandArray(int arr[], int size) {
	srand(time(NULL));
	for (int i = 0; i < size; i++) {
		arr[i] = rand() % 100;
	}
}

void SortArray(int arr[], int size) {
	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}

int main() {
	setlocale(LC_ALL, ""Russian"");
	const int size = 10;
	int arr[size];
	RandArray(arr, size);
	PrintArray(arr, size);
	CheckArray(arr, size);
	InvertArray(arr, size);
	PrintArray(arr, size);
	SortArray(arr, size);
	PrintArray(arr, size);
}"
daZrqx3b,Untitled,35657,C++,Saturday 1st of July 2023 07:50:07 PM CDT,"#include <iostream>

using namespace std;


class ForwardList {
public:

    struct Node { //односвязный список состоит из узлов
        int value; // узел хранит информативную часть
        Node* next; // и указатель на следующий узел в списке
    };

    void Push_front(const int& value) {
        head = new Node{ value, head };
        size++;
    }

    void Pop_front() {
        if (size > 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            size--;
        }
    }

    void Print() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->value << "" "";
            temp = temp->next;
        }
        cout << endl;
    }

    int Front() {
        if (head != nullptr) {
            return head->value;
        }
    }

    int Front() const {
        if (head != nullptr) {
            return head->value;
        }
    }

    int Find(const int value) {
        int i = 0;
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->value == value) {
                return i;
            }
            temp = temp->next;
            i++;
        }
        return -1;
    }

    void Insert(const int index, const int value) {
        if (index == 0) {
            Push_front(value);
            return;
        }
        if (index > 0 && index <= size) {
            Node* temp = head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            temp->next = new Node{ value, temp->next };
            size++;
        }
    }

    void Erase(const int index) {
        if (index == 0) {
            Pop_front();
            return;
        }
        if (index > 0 && index < size) {
            Node* temp = head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            Node* buf = temp->next->next;
            delete temp->next;
            temp->next = buf;
            size--;
        }
    }

    void Clear() {
        while (head != nullptr) {
            Pop_front();
        }
    }

    int Size() const {
        return size;
    }

private:
    int size = 0;
    Node* head = nullptr;
};

int main() {
    ForwardList list1;

    for (int i = 0; i < 10; i++) {
        list1.Push_front(i + 1);
    }
    list1.Print();
    cout << list1.Size() << endl;

    for (int i = 0; i < 3; i++) {
        list1.Pop_front();
    }
    list1.Print();
    cout << ""size = "" << list1.Size() << endl;

    cout << list1.Front() << endl;
    cout << list1.Find(5) << endl;

    list1.Insert(3, 10);
    list1.Print();
    list1.Erase(3);
    list1.Print();
    cout << ""============="" << endl;
    list1.Clear();
    list1.Print();
}"
0sjpULF6,Leetcode: 168. Excel Sheet Column Title,sanya5791,Kotlin,Saturday 1st of July 2023 07:40:06 PM CDT,"class Solution {
    fun convertToTitle(columnNumber: Int): String {
        val aCode = 64
        val dimentionNumber = 26

        val result = StringBuilder()
        var num = columnNumber
        while (num > 0) {
            val remainder = if (num % dimentionNumber == 0) dimentionNumber 
                            else num % dimentionNumber
            val ch = (remainder + aCode).toChar()
            result.insert(0, ch)

            num -= remainder
            num /= dimentionNumber
        }

        return result.toString()
    }
}"
85gGieqB,2023-07-01_stats.json,rdp_snitch,JSON,Saturday 1st of July 2023 07:18:31 PM CDT,"{
  ""ip"": {
    ""46.10.214.186"": 108,
    ""202.55.133.12"": 6,
    ""120.71.0.5"": 99,
    ""125.74.93.228"": 162,
    ""92.204.139.79"": 171,
    ""114.217.18.245"": 96,
    ""69.58.124.234"": 147,
    ""36.108.169.132"": 96,
    ""168.138.149.190"": 27,
    ""172.105.53.82"": 6,
    ""178.21.163.70"": 27,
    ""185.66.228.185"": 54,
    ""192.99.110.133"": 18,
    ""201.93.165.53"": 21,
    ""20.42.101.211"": 102,
    ""168.138.255.225"": 24,
    ""152.89.198.113"": 3,
    ""222.88.163.139"": 6,
    ""194.165.16.11"": 6,
    ""87.251.75.145"": 6,
    ""31.43.185.32"": 24,
    ""139.162.114.83"": 30,
    ""164.92.158.134"": 12,
    ""91.240.118.133"": 12,
    ""185.170.144.3"": 6,
    ""39.104.21.190"": 18,
    ""139.162.155.67"": 3,
    ""47.108.29.192"": 3,
    ""138.197.8.152"": 3,
    ""120.132.17.153"": 24,
    ""87.251.75.120"": 3,
    ""119.23.235.54"": 3,
    ""202.139.198.173"": 3,
    ""103.55.38.129"": 3,
    ""182.52.113.124"": 3,
    ""68.183.177.180"": 9,
    ""43.156.229.114"": 3,
    ""112.5.87.34"": 3,
    ""45.227.254.55"": 6,
    ""178.32.170.23"": 3,
    ""179.43.184.138"": 3,
    ""205.210.31.65"": 9,
    ""139.59.28.233"": 12,
    ""120.27.12.65"": 3,
    ""87.251.75.64"": 3,
    ""162.142.125.214"": 3,
    ""121.138.145.136"": 6,
    ""45.119.81.119"": 6,
    ""152.89.198.133"": 6,
    ""62.122.184.166"": 12,
    ""62.122.184.168"": 12,
    ""87.251.64.110"": 6,
    ""45.227.254.49"": 6,
    ""13.69.193.185"": 3,
    ""62.122.184.165"": 6,
    ""167.248.133.33"": 3,
    ""118.70.102.3"": 6,
    ""45.140.17.16"": 9,
    ""20.110.29.138"": 3,
    ""205.210.31.172"": 9
  },
  ""asn"": {
    ""AS8866"": 108,
    ""AS63737"": 6,
    ""AS137695"": 195,
    ""AS141998"": 162,
    ""AS398108"": 171,
    ""AS4134"": 102,
    ""AS32899"": 147,
    ""AS31898"": 51,
    ""AS63949"": 39,
    ""AS21419"": 27,
    ""AS201689"": 54,
    ""AS16276"": 21,
    ""AS27699"": 21,
    ""AS8075"": 108,
    ""AS57523"": 51,
    ""AS48721"": 6,
    ""AS208091"": 12,
    ""AS211736"": 24,
    ""AS14061"": 36,
    ""AS48080"": 12,
    ""AS37963"": 27,
    ""AS140292"": 24,
    ""AS135566"": 3,
    ""AS136052"": 3,
    ""AS23969"": 3,
    ""AS132203"": 3,
    ""AS9808"": 3,
    ""AS267784"": 12,
    ""AS51852"": 3,
    ""AS396982"": 18,
    ""AS398324"": 3,
    ""AS4766"": 6,
    ""AS131386"": 6,
    ""AS398722"": 3,
    ""AS18403"": 6,
    ""AS198953"": 9
  },
  ""isp"": {
    ""Vivacom Bulgaria EAD"": 108,
    ""Vietserver Services Technology Company Limited"": 6,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 195,
    ""China Telecom"": 162,
    ""GoDaddy.com, LLC"": 171,
    ""Chinanet"": 102,
    ""Bresco Broadband"": 147,
    ""Oracle Corporation"": 51,
    ""Akamai Technologies"": 6,
    ""Pishtaze E Jadid Infomration Company"": 27,
    ""Lamerd Information & Communication Technology Co., ltd"": 54,
    ""OVH SAS"": 18,
    ""Vivo"": 21,
    ""Microsoft Corporation"": 108,
    ""Chang Way Technologies Co. Limited"": 51,
    ""Flyservers S.A."": 18,
    ""XHOST-INTERNET-SOLUTIONS"": 12,
    ""FOP Dmytro Nedilskyi"": 24,
    ""Akamai Technologies, Inc."": 33,
    ""DigitalOcean, LLC"": 24,
    ""Dmitriy Panchenko"": 12,
    ""Hangzhou Alibaba Advertising Co"": 24,
    ""Addresses CNNIC"": 27,
    ""catCloud"": 3,
    ""PT Cloud Hosting Indonesia"": 3,
    ""TOT Public Company Limited"": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""China Mobile"": 3,
    ""OVH ISP"": 3,
    ""Private Layer INC"": 3,
    ""Google LLC"": 18,
    ""DigitalOcean"": 12,
    ""Censys, Inc."": 6,
    ""Korea Telecom"": 6,
    ""Long Van System Solution"": 6,
    ""FPT Telecom Company"": 6,
    ""Proton66 OOO"": 9
  },
  ""org"": {
    ""Bulgarian Telecommunications Company Plc"": 108,
    ""VietServer Services technology company limited"": 6,
    ""Chinanet XJ"": 99,
    ""Chinanet GS"": 162,
    ""Unknown"": 285,
    ""Chinanet JS"": 96,
    ""Bresco Broadband"": 147,
    ""Chinanet ZJ"": 96,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 51,
    ""Linode"": 6,
    ""AVAST Software"": 18,
    ""TELEF\ufffdNICA BRASIL S.A"": 21,
    ""Microsoft Azure Cloud (eastus)"": 102,
    ""Starcrecium Limited"": 9,
    ""Chinanet HA"": 6,
    ""Flyservers S.A"": 6,
    ""Xhost Internet Solutions"": 18,
    ""FOP Dmytro Nedilskyi"": 24,
    ""Linode, LLC"": 33,
    ""DigitalOcean, LLC"": 33,
    ""Chang Way Technologies Co. Limited"": 42,
    ""Xhostis"": 6,
    ""Aliyun Computing Co., LTD"": 27,
    ""Digital Ocean"": 3,
    ""PT Cloud Hosting Indonesia"": 3,
    ""Addresses for"": 3,
    ""Tencent Cloud Computing"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""UAB Host Baltic"": 12,
    ""Novotea network"": 3,
    ""Private Layer Inc"": 3,
    ""Palo Alto Networks, Inc"": 18,
    ""Censys Inc"": 3,
    ""Kornet"": 6,
    ""Microsoft Azure Cloud (northeurope)"": 3,
    ""Censys, Inc."": 3,
    ""Vietnam Internet Network Information Center"": 6,
    ""Proton66 LLC"": 9,
    ""Microsoft Azure Cloud (eastus2)"": 3
  },
  ""regionName"": {
    ""Sofia-Capital"": 108,
    ""Hanoi"": 12,
    ""Xinjiang Uyghur Autonomous Region"": 99,
    ""Gansu"": 162,
    ""Virginia"": 276,
    ""Jiangsu"": 96,
    ""Ohio"": 147,
    ""Zhejiang"": 96,
    ""Sao Paulo"": 72,
    ""Maharashtra"": 6,
    ""Tehran"": 81,
    ""Quebec"": 18,
    ""Moscow"": 66,
    ""Henan"": 6,
    ""Kaunas"": 6,
    ""North Holland"": 30,
    ""Kyiv City"": 24,
    ""Tokyo"": 30,
    ""Beijing"": 42,
    ""Hesse"": 3,
    ""Sichuan"": 3,
    ""New Jersey"": 3,
    ""Guangdong"": 6,
    ""Samut Prakan"": 3,
    ""West Java"": 3,
    ""Pattani"": 3,
    ""South West"": 9,
    ""North West"": 3,
    ""Vilnius"": 12,
    ""Flanders"": 3,
    ""Zurich"": 3,
    ""California"": 18,
    ""Karnataka"": 12,
    ""Shandong"": 3,
    ""Michigan"": 6,
    ""Seoul"": 6,
    ""Ho Chi Minh"": 6,
    ""Leinster"": 3
  },
  ""country"": {
    ""Bulgaria"": 108,
    ""Vietnam"": 18,
    ""China"": 513,
    ""United States"": 450,
    ""Brazil"": 72,
    ""India"": 18,
    ""Iran"": 81,
    ""Canada"": 18,
    ""Russia"": 66,
    ""Lithuania"": 18,
    ""Netherlands"": 30,
    ""Ukraine"": 24,
    ""Japan"": 30,
    ""Germany"": 3,
    ""Thailand"": 6,
    ""Indonesia"": 3,
    ""Singapore"": 12,
    ""Belgium"": 3,
    ""Switzerland"": 3,
    ""South Korea"": 6,
    ""Ireland"": 3
  },
  ""account"": {
    ""142.93.8.59"": 1158,
    ""hello"": 153,
    ""Administr"": 48,
    ""Test"": 39,
    ""(empty)"": 9,
    ""Domain"": 57,
    ""Administrator"": 3,
    ""DlBJuMOHU"": 3,
    ""QEpYMO"": 3,
    ""ewEfbP"": 3,
    ""pTkbJQRJo"": 3,
    ""GrlIKT"": 3,
    ""LgWZjx"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1485
  },
  ""client_build"": {
    ""Unknown"": 1485
  },
  ""client_name"": {
    ""Unknown"": 1485
  },
  ""ip_type"": {
    ""Unknown"": 1095,
    ""hosting"": 297,
    ""mobile"": 54,
    ""hosting & proxy"": 18,
    ""proxy"": 21
  }
}"
mxTKsQbY,2023-07-01_stats.json,rdp_snitch,JSON,Saturday 1st of July 2023 07:16:14 PM CDT,"{
  ""ip"": {
    ""46.10.214.186"": 72,
    ""202.55.133.12"": 4,
    ""120.71.0.5"": 66,
    ""125.74.93.228"": 108,
    ""92.204.139.79"": 114,
    ""114.217.18.245"": 64,
    ""69.58.124.234"": 98,
    ""36.108.169.132"": 64,
    ""168.138.149.190"": 18,
    ""172.105.53.82"": 4,
    ""178.21.163.70"": 18,
    ""185.66.228.185"": 36,
    ""192.99.110.133"": 12,
    ""201.93.165.53"": 14,
    ""20.42.101.211"": 68,
    ""168.138.255.225"": 16,
    ""152.89.198.113"": 2,
    ""222.88.163.139"": 4,
    ""194.165.16.11"": 4,
    ""87.251.75.145"": 4,
    ""31.43.185.32"": 16,
    ""139.162.114.83"": 20,
    ""164.92.158.134"": 8,
    ""91.240.118.133"": 8,
    ""185.170.144.3"": 4,
    ""39.104.21.190"": 12,
    ""139.162.155.67"": 2,
    ""47.108.29.192"": 2,
    ""138.197.8.152"": 2,
    ""120.132.17.153"": 16,
    ""87.251.75.120"": 2,
    ""119.23.235.54"": 2,
    ""202.139.198.173"": 2,
    ""103.55.38.129"": 2,
    ""182.52.113.124"": 2,
    ""68.183.177.180"": 6,
    ""43.156.229.114"": 2,
    ""112.5.87.34"": 2,
    ""45.227.254.55"": 4,
    ""178.32.170.23"": 2,
    ""179.43.184.138"": 2,
    ""205.210.31.65"": 6,
    ""139.59.28.233"": 8,
    ""120.27.12.65"": 2,
    ""87.251.75.64"": 2,
    ""162.142.125.214"": 2,
    ""121.138.145.136"": 4,
    ""45.119.81.119"": 4,
    ""152.89.198.133"": 4,
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 8,
    ""87.251.64.110"": 4,
    ""45.227.254.49"": 4,
    ""13.69.193.185"": 2,
    ""62.122.184.165"": 4,
    ""167.248.133.33"": 2,
    ""118.70.102.3"": 4,
    ""45.140.17.16"": 6,
    ""20.110.29.138"": 2,
    ""205.210.31.172"": 6
  },
  ""asn"": {
    ""AS8866"": 72,
    ""AS63737"": 4,
    ""AS137695"": 130,
    ""AS141998"": 108,
    ""AS398108"": 114,
    ""AS4134"": 68,
    ""AS32899"": 98,
    ""AS31898"": 34,
    ""AS63949"": 26,
    ""AS21419"": 18,
    ""AS201689"": 36,
    ""AS16276"": 14,
    ""AS27699"": 14,
    ""AS8075"": 72,
    ""AS57523"": 34,
    ""AS48721"": 4,
    ""AS208091"": 8,
    ""AS211736"": 16,
    ""AS14061"": 24,
    ""AS48080"": 8,
    ""AS37963"": 18,
    ""AS140292"": 16,
    ""AS135566"": 2,
    ""AS136052"": 2,
    ""AS23969"": 2,
    ""AS132203"": 2,
    ""AS9808"": 2,
    ""AS267784"": 8,
    ""AS51852"": 2,
    ""AS396982"": 12,
    ""AS398324"": 2,
    ""AS4766"": 4,
    ""AS131386"": 4,
    ""AS398722"": 2,
    ""AS18403"": 4,
    ""AS198953"": 6
  },
  ""isp"": {
    ""Vivacom Bulgaria EAD"": 72,
    ""Vietserver Services Technology Company Limited"": 4,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 130,
    ""China Telecom"": 108,
    ""GoDaddy.com, LLC"": 114,
    ""Chinanet"": 68,
    ""Bresco Broadband"": 98,
    ""Oracle Corporation"": 34,
    ""Akamai Technologies"": 4,
    ""Pishtaze E Jadid Infomration Company"": 18,
    ""Lamerd Information & Communication Technology Co., ltd"": 36,
    ""OVH SAS"": 12,
    ""Vivo"": 14,
    ""Microsoft Corporation"": 72,
    ""Chang Way Technologies Co. Limited"": 34,
    ""Flyservers S.A."": 12,
    ""XHOST-INTERNET-SOLUTIONS"": 8,
    ""FOP Dmytro Nedilskyi"": 16,
    ""Akamai Technologies, Inc."": 22,
    ""DigitalOcean, LLC"": 16,
    ""Dmitriy Panchenko"": 8,
    ""Hangzhou Alibaba Advertising Co"": 16,
    ""Addresses CNNIC"": 18,
    ""catCloud"": 2,
    ""PT Cloud Hosting Indonesia"": 2,
    ""TOT Public Company Limited"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""China Mobile"": 2,
    ""OVH ISP"": 2,
    ""Private Layer INC"": 2,
    ""Google LLC"": 12,
    ""DigitalOcean"": 8,
    ""Censys, Inc."": 4,
    ""Korea Telecom"": 4,
    ""Long Van System Solution"": 4,
    ""FPT Telecom Company"": 4,
    ""Proton66 OOO"": 6
  },
  ""org"": {
    ""Bulgarian Telecommunications Company Plc"": 72,
    ""VietServer Services technology company limited"": 4,
    ""Chinanet XJ"": 66,
    ""Chinanet GS"": 108,
    ""Unknown"": 190,
    ""Chinanet JS"": 64,
    ""Bresco Broadband"": 98,
    ""Chinanet ZJ"": 64,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 34,
    ""Linode"": 4,
    ""AVAST Software"": 12,
    ""TELEF\ufffdNICA BRASIL S.A"": 14,
    ""Microsoft Azure Cloud (eastus)"": 68,
    ""Starcrecium Limited"": 6,
    ""Chinanet HA"": 4,
    ""Flyservers S.A"": 4,
    ""Xhost Internet Solutions"": 12,
    ""FOP Dmytro Nedilskyi"": 16,
    ""Linode, LLC"": 22,
    ""DigitalOcean, LLC"": 22,
    ""Chang Way Technologies Co. Limited"": 28,
    ""Xhostis"": 4,
    ""Aliyun Computing Co., LTD"": 18,
    ""Digital Ocean"": 2,
    ""PT Cloud Hosting Indonesia"": 2,
    ""Addresses for"": 2,
    ""Tencent Cloud Computing"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""UAB Host Baltic"": 8,
    ""Novotea network"": 2,
    ""Private Layer Inc"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Censys Inc"": 2,
    ""Kornet"": 4,
    ""Microsoft Azure Cloud (northeurope)"": 2,
    ""Censys, Inc."": 2,
    ""Vietnam Internet Network Information Center"": 4,
    ""Proton66 LLC"": 6,
    ""Microsoft Azure Cloud (eastus2)"": 2
  },
  ""regionName"": {
    ""Sofia-Capital"": 72,
    ""Hanoi"": 8,
    ""Xinjiang Uyghur Autonomous Region"": 66,
    ""Gansu"": 108,
    ""Virginia"": 184,
    ""Jiangsu"": 64,
    ""Ohio"": 98,
    ""Zhejiang"": 64,
    ""Sao Paulo"": 48,
    ""Maharashtra"": 4,
    ""Tehran"": 54,
    ""Quebec"": 12,
    ""Moscow"": 44,
    ""Henan"": 4,
    ""Kaunas"": 4,
    ""North Holland"": 20,
    ""Kyiv City"": 16,
    ""Tokyo"": 20,
    ""Beijing"": 28,
    ""Hesse"": 2,
    ""Sichuan"": 2,
    ""New Jersey"": 2,
    ""Guangdong"": 4,
    ""Samut Prakan"": 2,
    ""West Java"": 2,
    ""Pattani"": 2,
    ""South West"": 6,
    ""North West"": 2,
    ""Vilnius"": 8,
    ""Flanders"": 2,
    ""Zurich"": 2,
    ""California"": 12,
    ""Karnataka"": 8,
    ""Shandong"": 2,
    ""Michigan"": 4,
    ""Seoul"": 4,
    ""Ho Chi Minh"": 4,
    ""Leinster"": 2
  },
  ""country"": {
    ""Bulgaria"": 72,
    ""Vietnam"": 12,
    ""China"": 342,
    ""United States"": 300,
    ""Brazil"": 48,
    ""India"": 12,
    ""Iran"": 54,
    ""Canada"": 12,
    ""Russia"": 44,
    ""Lithuania"": 12,
    ""Netherlands"": 20,
    ""Ukraine"": 16,
    ""Japan"": 20,
    ""Germany"": 2,
    ""Thailand"": 4,
    ""Indonesia"": 2,
    ""Singapore"": 8,
    ""Belgium"": 2,
    ""Switzerland"": 2,
    ""South Korea"": 4,
    ""Ireland"": 2
  },
  ""account"": {
    ""142.93.8.59"": 772,
    ""hello"": 102,
    ""Administr"": 32,
    ""Test"": 26,
    ""(empty)"": 6,
    ""Domain"": 38,
    ""Administrator"": 2,
    ""DlBJuMOHU"": 2,
    ""QEpYMO"": 2,
    ""ewEfbP"": 2,
    ""pTkbJQRJo"": 2,
    ""GrlIKT"": 2,
    ""LgWZjx"": 2
  },
  ""keyboard"": {
    ""Unknown"": 990
  },
  ""client_build"": {
    ""Unknown"": 990
  },
  ""client_name"": {
    ""Unknown"": 990
  },
  ""ip_type"": {
    ""Unknown"": 730,
    ""hosting"": 198,
    ""mobile"": 36,
    ""hosting & proxy"": 12,
    ""proxy"": 14
  }
}"
iq0qup6S,2023-07-01_stats.json,rdp_snitch,JSON,Saturday 1st of July 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""46.10.214.186"": 36,
    ""202.55.133.12"": 2,
    ""120.71.0.5"": 33,
    ""125.74.93.228"": 54,
    ""92.204.139.79"": 57,
    ""114.217.18.245"": 32,
    ""69.58.124.234"": 49,
    ""36.108.169.132"": 32,
    ""168.138.149.190"": 9,
    ""172.105.53.82"": 2,
    ""178.21.163.70"": 9,
    ""185.66.228.185"": 18,
    ""192.99.110.133"": 6,
    ""201.93.165.53"": 7,
    ""20.42.101.211"": 34,
    ""168.138.255.225"": 8,
    ""152.89.198.113"": 1,
    ""222.88.163.139"": 2,
    ""194.165.16.11"": 2,
    ""87.251.75.145"": 2,
    ""31.43.185.32"": 8,
    ""139.162.114.83"": 10,
    ""164.92.158.134"": 4,
    ""91.240.118.133"": 4,
    ""185.170.144.3"": 2,
    ""39.104.21.190"": 6,
    ""139.162.155.67"": 1,
    ""47.108.29.192"": 1,
    ""138.197.8.152"": 1,
    ""120.132.17.153"": 8,
    ""87.251.75.120"": 1,
    ""119.23.235.54"": 1,
    ""202.139.198.173"": 1,
    ""103.55.38.129"": 1,
    ""182.52.113.124"": 1,
    ""68.183.177.180"": 3,
    ""43.156.229.114"": 1,
    ""112.5.87.34"": 1,
    ""45.227.254.55"": 2,
    ""178.32.170.23"": 1,
    ""179.43.184.138"": 1,
    ""205.210.31.65"": 3,
    ""139.59.28.233"": 4,
    ""120.27.12.65"": 1,
    ""87.251.75.64"": 1,
    ""162.142.125.214"": 1,
    ""121.138.145.136"": 2,
    ""45.119.81.119"": 2,
    ""152.89.198.133"": 2,
    ""62.122.184.166"": 4,
    ""62.122.184.168"": 4,
    ""87.251.64.110"": 2,
    ""45.227.254.49"": 2,
    ""13.69.193.185"": 1,
    ""62.122.184.165"": 2,
    ""167.248.133.33"": 1,
    ""118.70.102.3"": 2,
    ""45.140.17.16"": 3,
    ""20.110.29.138"": 1,
    ""205.210.31.172"": 3
  },
  ""asn"": {
    ""AS8866"": 36,
    ""AS63737"": 2,
    ""AS137695"": 65,
    ""AS141998"": 54,
    ""AS398108"": 57,
    ""AS4134"": 34,
    ""AS32899"": 49,
    ""AS31898"": 17,
    ""AS63949"": 13,
    ""AS21419"": 9,
    ""AS201689"": 18,
    ""AS16276"": 7,
    ""AS27699"": 7,
    ""AS8075"": 36,
    ""AS57523"": 17,
    ""AS48721"": 2,
    ""AS208091"": 4,
    ""AS211736"": 8,
    ""AS14061"": 12,
    ""AS48080"": 4,
    ""AS37963"": 9,
    ""AS140292"": 8,
    ""AS135566"": 1,
    ""AS136052"": 1,
    ""AS23969"": 1,
    ""AS132203"": 1,
    ""AS9808"": 1,
    ""AS267784"": 4,
    ""AS51852"": 1,
    ""AS396982"": 6,
    ""AS398324"": 1,
    ""AS4766"": 2,
    ""AS131386"": 2,
    ""AS398722"": 1,
    ""AS18403"": 2,
    ""AS198953"": 3
  },
  ""isp"": {
    ""Vivacom Bulgaria EAD"": 36,
    ""Vietserver Services Technology Company Limited"": 2,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 65,
    ""China Telecom"": 54,
    ""GoDaddy.com, LLC"": 57,
    ""Chinanet"": 34,
    ""Bresco Broadband"": 49,
    ""Oracle Corporation"": 17,
    ""Akamai Technologies"": 2,
    ""Pishtaze E Jadid Infomration Company"": 9,
    ""Lamerd Information & Communication Technology Co., ltd"": 18,
    ""OVH SAS"": 6,
    ""Vivo"": 7,
    ""Microsoft Corporation"": 36,
    ""Chang Way Technologies Co. Limited"": 17,
    ""Flyservers S.A."": 6,
    ""XHOST-INTERNET-SOLUTIONS"": 4,
    ""FOP Dmytro Nedilskyi"": 8,
    ""Akamai Technologies, Inc."": 11,
    ""DigitalOcean, LLC"": 8,
    ""Dmitriy Panchenko"": 4,
    ""Hangzhou Alibaba Advertising Co"": 8,
    ""Addresses CNNIC"": 9,
    ""catCloud"": 1,
    ""PT Cloud Hosting Indonesia"": 1,
    ""TOT Public Company Limited"": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""China Mobile"": 1,
    ""OVH ISP"": 1,
    ""Private Layer INC"": 1,
    ""Google LLC"": 6,
    ""DigitalOcean"": 4,
    ""Censys, Inc."": 2,
    ""Korea Telecom"": 2,
    ""Long Van System Solution"": 2,
    ""FPT Telecom Company"": 2,
    ""Proton66 OOO"": 3
  },
  ""org"": {
    ""Bulgarian Telecommunications Company Plc"": 36,
    ""VietServer Services technology company limited"": 2,
    ""Chinanet XJ"": 33,
    ""Chinanet GS"": 54,
    ""Unknown"": 95,
    ""Chinanet JS"": 32,
    ""Bresco Broadband"": 49,
    ""Chinanet ZJ"": 32,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 17,
    ""Linode"": 2,
    ""AVAST Software"": 6,
    ""TELEF\ufffdNICA BRASIL S.A"": 7,
    ""Microsoft Azure Cloud (eastus)"": 34,
    ""Starcrecium Limited"": 3,
    ""Chinanet HA"": 2,
    ""Flyservers S.A"": 2,
    ""Xhost Internet Solutions"": 6,
    ""FOP Dmytro Nedilskyi"": 8,
    ""Linode, LLC"": 11,
    ""DigitalOcean, LLC"": 11,
    ""Chang Way Technologies Co. Limited"": 14,
    ""Xhostis"": 2,
    ""Aliyun Computing Co., LTD"": 9,
    ""Digital Ocean"": 1,
    ""PT Cloud Hosting Indonesia"": 1,
    ""Addresses for"": 1,
    ""Tencent Cloud Computing"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""UAB Host Baltic"": 4,
    ""Novotea network"": 1,
    ""Private Layer Inc"": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""Censys Inc"": 1,
    ""Kornet"": 2,
    ""Microsoft Azure Cloud (northeurope)"": 1,
    ""Censys, Inc."": 1,
    ""Vietnam Internet Network Information Center"": 2,
    ""Proton66 LLC"": 3,
    ""Microsoft Azure Cloud (eastus2)"": 1
  },
  ""regionName"": {
    ""Sofia-Capital"": 36,
    ""Hanoi"": 4,
    ""Xinjiang Uyghur Autonomous Region"": 33,
    ""Gansu"": 54,
    ""Virginia"": 92,
    ""Jiangsu"": 32,
    ""Ohio"": 49,
    ""Zhejiang"": 32,
    ""Sao Paulo"": 24,
    ""Maharashtra"": 2,
    ""Tehran"": 27,
    ""Quebec"": 6,
    ""Moscow"": 22,
    ""Henan"": 2,
    ""Kaunas"": 2,
    ""North Holland"": 10,
    ""Kyiv City"": 8,
    ""Tokyo"": 10,
    ""Beijing"": 14,
    ""Hesse"": 1,
    ""Sichuan"": 1,
    ""New Jersey"": 1,
    ""Guangdong"": 2,
    ""Samut Prakan"": 1,
    ""West Java"": 1,
    ""Pattani"": 1,
    ""South West"": 3,
    ""North West"": 1,
    ""Vilnius"": 4,
    ""Flanders"": 1,
    ""Zurich"": 1,
    ""California"": 6,
    ""Karnataka"": 4,
    ""Shandong"": 1,
    ""Michigan"": 2,
    ""Seoul"": 2,
    ""Ho Chi Minh"": 2,
    ""Leinster"": 1
  },
  ""country"": {
    ""Bulgaria"": 36,
    ""Vietnam"": 6,
    ""China"": 171,
    ""United States"": 150,
    ""Brazil"": 24,
    ""India"": 6,
    ""Iran"": 27,
    ""Canada"": 6,
    ""Russia"": 22,
    ""Lithuania"": 6,
    ""Netherlands"": 10,
    ""Ukraine"": 8,
    ""Japan"": 10,
    ""Germany"": 1,
    ""Thailand"": 2,
    ""Indonesia"": 1,
    ""Singapore"": 4,
    ""Belgium"": 1,
    ""Switzerland"": 1,
    ""South Korea"": 2,
    ""Ireland"": 1
  },
  ""account"": {
    ""142.93.8.59"": 386,
    ""hello"": 51,
    ""Administr"": 16,
    ""Test"": 13,
    ""(empty)"": 3,
    ""Domain"": 19,
    ""Administrator"": 1,
    ""DlBJuMOHU"": 1,
    ""QEpYMO"": 1,
    ""ewEfbP"": 1,
    ""pTkbJQRJo"": 1,
    ""GrlIKT"": 1,
    ""LgWZjx"": 1
  },
  ""keyboard"": {
    ""Unknown"": 495
  },
  ""client_build"": {
    ""Unknown"": 495
  },
  ""client_name"": {
    ""Unknown"": 495
  },
  ""ip_type"": {
    ""Unknown"": 365,
    ""hosting"": 99,
    ""mobile"": 18,
    ""hosting & proxy"": 6,
    ""proxy"": 7
  }
}"
