id,title,username,language,date,content
B9bwNAVs,邀您一起看：书签管理：「编辑」-✎修改,xiaomianao666,JavaScript,Friday 19th of May 2023 01:04:25 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥书签管理：「编辑」-✎修改@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImZpbGU6Ly8vc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20uZXhhbXBsZS5oaWtlcnZpZXcvZmlsZXMvRG9jdW1lbnRzL25ld1BsYW5Ib21lLmh0bWxcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwi4pGg5o6o6I2QXCJ9IiwidGl0bGUiOiLkuabnrb7nrqHnkIbvvJrjgIznvJbovpHjgI0t4pyO5L+u5pS5In0=
4TBDq9fV,Centrally-Configure Kartra Countdown Timers,briank,HTML,Friday 19th of May 2023 12:36:00 AM CDT,"<!--
Centrally-Configured Fixed-Date-And-Time Countdown Timer For Kartra

1. Upload a *plain-text* file containing the event time and expiration redirect URL
(if desired) in this format to the Membership > Files area:

eventTime = '2023-05-20T15:00Z'; /* Event date & GMT/UTC time in ISO format */
expirationURL = 'https://example.com'; /* = ''; for no expiration redirect */
resetTimers();

2. Create a tracking link pointing to the configuration file. Reuse this link on all pages
that should share this timer. Just update the target file URL to the new upload URL if/when
updating the configuration.
3. Add 1+ fixed-date-and-time countdowns to your page with a past date and no redirection.
4. Add this code to the BODY tracking section of your page, putting the tracking link URL
from step 2 into the script src attribute at the bottom.
-->
<script>
var eventTime, expirationURL, counters = $('[data-countdown] div.countdown').attr('data-date', null);
function resetTimers () {
if (!eventTime) return;
var diffSecs = Math.max(Math.floor((+new Date(eventTime) - new Date()) / 1000), 0);
if (diffSecs <= 0 && expirationURL) location = expirationURL;
counters.each((n, el) => {
var $el = $(el);
$el.stopCountDown();
$el.data('diffSecs', diffSecs);
if (expirationURL) $el.data('callback', () => location = expirationURL);
$el.startCountDown();
});
}
$(() => setTimeout(resetTimers, 0));
</script>
<script src='https://account.krtra.com/tracking_link_here' async defer></script>"
iejPPBUp,邀您一起看：优酷视频-妻不可欺,xiaomianao666,JavaScript,Friday 19th of May 2023 12:12:12 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥优酷视频-妻不可欺@@
njzNE13p,# tk_intergalactic.py,here2share,Python,Friday 19th of May 2023 12:10:54 AM CDT,"# tk_intergalactic.py

import tkinter as tk
from PIL import Image, ImageTk, ImageDraw, ImageFilter
import math
import random
import io

ww = 599
hh = 599

root = tk.Tk()
root.title(""tk_intergalactic"")
root.geometry(""%dx%d+0+0""%(ww,hh))
canvas = tk.Canvas(root, bg='white', width=ww, height=hh)
canvas.pack()

scale = 0
zoom = 0.05

cx, cy = ww//2, hh//2
img = Image.new('RGB', (ww, hh), ""white"")

pixels = []

t = 100
XY = [(x, y) for x in range(cx-t, cx+t) for y in range(cy-t, cy+t)]
random.shuffle(XY)

for y in range(hh):
	for x in range(ww):
		r, g, b = random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)
		pixels.append((r, g, b))

img.putdata(pixels)
tkimg = ImageTk.PhotoImage(img)
canvas.create_image((cx, cy), image=tkimg)
canvas.update()

# calculate the blur radius to achieve 0.01% blur
blur_radius = 0.0009 * min(img.size)

rnd = 50
# Zoom effect
while True:
	for i in range(1000):
		x, y = XY.pop(0)
		XY.insert(-(10-(i%10)), (x, y))
		r, g, b = img.getpixel((x,y))
		r = max(0, min(255, r + random.randint(-rnd, rnd)))
		g = max(0, min(255, g + random.randint(-rnd, rnd)))
		b = max(0, min(255, b + random.randint(-rnd, rnd)))
		img.putpixel((x, y), (r, g, b))

	xt, yt = int(ww+scale), int(hh+scale)
	img = img.resize((xt, yt), resample=Image.LANCZOS)
	img = img.filter(ImageFilter.GaussianBlur(radius=blur_radius))
	
	# crop parameters to zoom into the center
	img = img.crop((scale/2, scale/2, xt-scale/2, yt-scale/2))
	scale += zoom
	
	tkimg = ImageTk.PhotoImage(img)
	canvas.create_image((cx, cy), image=tkimg)
	canvas.update()"
Pw1WspRt,segmentendbutton,yudiwibisono,Dart,Thursday 18th of May 2023 11:47:09 PM CDT,"import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

enum Sizes { extraSmall, small, medium, large, extraLarge }

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  State<StatefulWidget> createState() {
    return MyAppState();
  }
}

class MyAppState extends State<MyApp> {
  //mana yang dipilih
  Set<Sizes> selection = <Sizes>{Sizes.large, Sizes.extraLarge};

  @override
  Widget build(Object context) {
    return MaterialApp(
      theme: ThemeData(useMaterial3: true),
      home: Scaffold(
        body: Center(
            child: SegmentedButton<Sizes>(
          segments: const <ButtonSegment<Sizes>>[
            ButtonSegment<Sizes>(value: Sizes.extraSmall, label: Text('XS')),
            ButtonSegment<Sizes>(value: Sizes.small, label: Text('S')),
            ButtonSegment<Sizes>(value: Sizes.medium, label: Text('M')),
            ButtonSegment<Sizes>(
              value: Sizes.large,
              label: Text('L'),
            ),
            ButtonSegment<Sizes>(value: Sizes.extraLarge, label: Text('XL')),
          ],
          selected: selection,
          onSelectionChanged: (Set<Sizes> newSelection) {
            setState(() {
              selection = newSelection;
            });
          },
          multiSelectionEnabled: true,
        )
        ),
      ),
    );
  }
}
"
UqkM272b,Ultimate add-on for contact form 7 - conditional (custom validation),CodeDropz,PHP,Thursday 18th of May 2023 11:35:15 PM CDT,"if( function_exists( 'codeDropz_dnd_upload_cf7' ) ){
        remove_filter('wpcf7_validate_mfile*', array( codeDropz_dnd_upload_cf7(), 'dnd_upload_cf7_validation_filter' ), 10, 2 );
        add_filter('wpcf7_validate_mfile*', 'custom_cf7_validate_fields', 10, 2 );
    }

    function custom_cf7_validate_fields( $result, $tag ){

        // Don't validate if license-info is ""TYPE IT IN""
        $condition = 'License-Info';
        if( isset( $_POST[ $condition ] ) && $_POST[ $condition ] == 'Type it in' ){
            return $result;
        }

        // Proceed with validation
        $multiple_files = ( isset( $_POST[ $tag->name ] ) ? array_map( 'sanitize_text_field', $_POST[ $tag->name ] ) : null );
        if( ( is_null( $multiple_files ) || count( $multiple_files ) == 0 ) && $tag->is_required() ) {
            $result->invalidate( $tag, wpcf7_get_message( 'invalid_required' ) );
            return $result;
        }
        
        return $result;
    }"
sDCFxdYa,Untitled,HEROJIT_SINGH,Python,Thursday 18th of May 2023 11:25:50 PM CDT,"import scrapy
from scrapy.crawler import CrawlerProcess
from scrapy.linkextractors import LinkExtractor
from scrapy.spiders import CrawlSpider, Rule
from bs4 import BeautifulSoup
from nltk.corpus import webtext, gutenberg
from nltk.corpus.reader.plaintext import PlaintextCorpusReader
from nltk.corpus import wordnet

class StackOverflowSpider(scrapy.Spider):
    name = ""stackoverflow""
    start_urls = [""https://stackoverflow.com/questions/tagged/python""]

    def parse(self, response):
        questions = response.css(""div.question-summary"")
        for question in questions:
            title = question.css(""h3 a::text"").get()
            votes = question.css("".vote-count-post strong::text"").get()
            yield {
                ""source"": ""Stack Overflow"",
                ""title"": title,
                ""votes"": votes
            }

class GitHubSpider(scrapy.Spider):
    name = ""github""
    start_urls = [""https://github.com/topics/python""]

    def parse(self, response):
        repositories = response.css(""h3.f3 > a"")
        for repository in repositories:
            name = repository.css(""::text"").get().strip()
            yield {
                ""source"": ""GitHub"",
                ""name"": name
            }

class KaggleSpider(scrapy.Spider):
    name = ""kaggle""
    start_urls = [""https://www.kaggle.com/datasets?search=python""]

    def parse(self, response):
        datasets = response.css("".kernel-list-item__link"")
        for dataset in datasets:
            title = dataset.css(""::text"").get().strip()
            yield {
                ""source"": ""Kaggle"",
                ""title"": title
            }

# Add additional spiders for other sources

# Create a CrawlerProcess with all the spiders
process = CrawlerProcess()
process.crawl(StackOverflowSpider)
process.crawl(GitHubSpider)
process.crawl(KaggleSpider)
process.crawl()
# Add other spiders to the process

# Start the crawling process
process.start()
"
nJygM7j5,credit errors,jargon,PHP,Thursday 18th of May 2023 11:15:16 PM CDT,"array(3) { [0]=> array(0) { } [""Text""]=> array(0) { } [1]=> array(0) { } }
Warning: Undefined array key 0 in C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-php\Dumper.php on line 30

Warning: Undefined array key ""Text"" in C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-php\Dumper.php on line 30

Warning: Undefined array key 0 in C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-php\Dumper.php on line 30

Warning: Undefined array key ""Text"" in C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-php\Dumper.php on line 30

Warning: Undefined array key 0 in C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-php\Dumper.php on line 30

Warning: Undefined array key ""Text"" in C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-php\Dumper.php on line 30

Fatal error: Uncaught TypeError: Dump::Credit(): Return value must be of type string, none returned in C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-php\Dumper.php:32 Stack trace: #0 C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-devkit\attributes.php(63): Dump->Credit('<table style=""w...') #1 C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-devkit\index.php(138): __Attributes_->Attributes() #2 C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\public\index.php(5): require_once('C:\\xampp-8.1.6-...') #3 {main} thrown in C:\xampp-8.1.6-0\projects\puzzlum.net.6.test\pzlm-php\Dumper.php on line 32"
E5KFcaGY,# tk_intergalactic_test.py,here2share,Python,Thursday 18th of May 2023 11:07:46 PM CDT,"# tk_intergalactic_test.py

import tkinter as tk
from PIL import Image, ImageTk, ImageDraw, ImageFilter
import math
import random
import io

ww = 599
hh = 599

root = tk.Tk()
root.title(""tk_intergalactic"")
root.geometry(""%dx%d+0+0""%(ww,hh))
canvas = tk.Canvas(root, bg='white', width=ww, height=hh)
canvas.pack()

scale = 0
zoom = 0.1

cx, cy = ww//2, hh//2
img = Image.new('RGB', (ww, hh), ""white"")

pixels = []

t = 50
XY = [(x, y) for x in range(cx-t, cx+t) for y in range(cy-t, cy+t)]
random.shuffle(XY)

for y in range(hh):
	for x in range(ww):
		r, g, b = random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)
		pixels.append((r, g, b))

img.putdata(pixels)
tkimg = ImageTk.PhotoImage(img)
canvas.create_image((cx, cy), image=tkimg)
canvas.update()

# calculate the blur radius to achieve 0.01% blur
blur_radius = 0.0009 * min(img.size)

# Zoom effect
while True:
	draw = ImageDraw.Draw(img)
	color = ""#{:02x}{:02x}{:02x}"".format(*[random.randint(0, 255) for _ in range(3)])
	draw.ellipse((cx - 1, cy - 1, cx + 1, cy + 1), fill=color)	
	for i in range(5):
		x, y = XY.pop(0)
		XY.insert(-(5-i), (x, y))
		color = ""#{:02x}{:02x}{:02x}"".format(*[random.randint(0, 255) for _ in range(3)])
		draw.ellipse((x, y, x + 1, y + 1), fill=color)

	xt, yt = int(ww+scale), int(hh+scale)
	img = img.resize((xt, yt), resample=Image.LANCZOS)
	
	img = img.filter(ImageFilter.GaussianBlur(radius=blur_radius))
	
	# crop parameters to zoom into the center
	img = img.crop((scale/2, scale/2, xt-scale/2, yt-scale/2))
	scale += zoom
	
	tkimg = ImageTk.PhotoImage(img)
	canvas.create_image((cx, cy), image=tkimg)
	canvas.update()"
20W07zhp,RailDriverAdapter.cs,AyrA,C#,Thursday 18th of May 2023 10:48:09 PM CDT,"using DVRailDriverMod.HID;
using DVRailDriverMod.RailDriverDevice;
using System;
using System.Linq;
using System.Threading;
using UnityEngine;

namespace DVRailDriverMod
{
    public class RailDriverAdapter : IDisposable
    {
        private LocoControllerBase currentLoco = null;
        private TrainCar currentCar = null;

        private Device dev = null;
        private Thread tUpdateLoop = null;
        private bool isEmergencyBrakeActive = false;

        public void Start()
        {
            if (dev != null)
            {
                return;
            }
            Debug.LogWarning($""{nameof(RailDriverAdapter)}: Started"");
            var devices = HidPieDeviceFinder.FindPieDevices();
            Debug.LogWarning(string.Join(""\n"", devices.Select(m => m.Path)));
            if (devices.Length > 0)
            {
                dev = new Device(DeviceCalibration.GetCalibrationData());
                dev.Input += Dev_Input;
                try
                {
                    dev.Start();
                    Debug.LogWarning(""Device is open"");
                }
                catch (Exception ex)
                {
                    Debug.LogWarning(""Unable to open the device: "" + ex.Message);
                }
                if (dev.IsOpen)
                {
                    dev.LED.SetText(""RDY"");
                }
                else
                {
                    Debug.LogError(""Device could not be opened"");
                }
                PlayerManager.CarChanged += CarChanged;
                tUpdateLoop = new Thread(UpdateLocoStates)
                {
                    IsBackground = true
                };
                tUpdateLoop.Start();
            }
        }

        private void UpdateLocoStates()
        {
            while (tUpdateLoop != null)
            {
                var d = dev;
                var l = currentLoco;
                var diesel = l as LocoControllerDiesel;
                var shunter = l as LocoControllerShunter;
                if (d != null && l != null)
                {
                    if (isEmergencyBrakeActive)
                    {
                        if (l.GetSpeedKmH() < 1.0)
                        {
                            isEmergencyBrakeActive = false;
                            l.SetSanders(0.0f);
                            diesel?.SetEngineRunning(false);
                            shunter?.SetEngineRunning(false);
                            d.LED.ClearMarquee();
                        }
                        else
                        {
                            d.LED.SetMarquee(""E-STOP"", true);
                        }
                    }
                    else if (l.IsDerailed())
                    {
                        d.LED.SetMarquee(""DERAILED"", true);
                    }
                    else if (l.IsWheelslipping())
                    {
                        d.LED.SetText(""SLP"");
                    }
                    else
                    {
                        d.LED.SetNumber(l.GetSpeedKmH());
                    }
                }
                else
                {
                    d.LED.SetText(""OFF"");
                }
                Thread.Sleep(200);
            }
        }

        private void CarChanged(TrainCar obj)
        {
            if (obj == null)
            {
                //Keep RailDriver connected if we're hooked up with the remote control
                if (currentLoco == null || !currentLoco.IsRemoteControlled())
                {
                    currentLoco = null;
                    currentCar = null;
                }
                return;
            }
            currentCar = obj;
            if (obj.TryGetComponent(out LocoControllerShunter shunter))
            {
                currentLoco = shunter;
            }
            else if (obj.TryGetComponent(out LocoControllerDiesel diesel))
            {
                currentLoco = diesel;
            }
            else if (obj.TryGetComponent(out LocoControllerSteam steam))
            {
                currentLoco = steam;
            }
            else
            {
                currentLoco = null;
            }
            SetInitialValues(currentLoco);
        }

        private void SetInitialValues(LocoControllerBase loco)
        {
            if (dev.DPad != CrossButtons.None)
            {
                //Camera
                float offset = 0.0f;
                if (dev.DPad.HasFlag(CrossButtons.Right))
                {
                    offset = 45f;
                }
                else if (dev.DPad.HasFlag(CrossButtons.Left))
                {
                    offset = 315f;
                }
                if (offset != 0f)
                {
                    var instance = SingletonBehaviour<APlayerTeleport>.Instance;
                    if (instance is PlayerTeleportNonVR)
                    {
                        var c = (instance as PlayerTeleportNonVR).charController;
                        var y = c.m_Camera.transform.rotation.eulerAngles.y;
                        var rotation = Quaternion.Euler(0, y + offset, 0);
                        c.ForceLookRotation(rotation);
                    }
                }
                //Movement
                float move = 0f;
                if (dev.DPad.HasFlag(CrossButtons.Up))
                {
                    move = 1f;
                }
                else if (dev.DPad.HasFlag(CrossButtons.Down))
                {
                    move = -1f;
                }
                if (move != 0f)
                {
                    /* TODO: Let player walk forwards or backwards
                    var instance = SingletonBehaviour<APlayerTeleport>.Instance;
                    if (instance is PlayerTeleportNonVR)
                    {
                        var c = (instance as PlayerTeleportNonVR).charController;
                        var angles = c.m_Camera.transform.rotation.eulerAngles;
                        angles.x = angles.x / 360f * move;
                        angles.y = angles.y / 360f * move;
                        angles.z = angles.z / 360f * move;
                        c.MoveBy(angles);
                    }
                    //*/
                }

            }

            var diesel = loco as LocoControllerDiesel;
            var shunter = loco as LocoControllerShunter;

            if (loco == null)
            {
                return;
            }
            //Switch
            if (dev.ButtonsTop.HasFlag(RowButtons.Button13) || dev.ButtonsTop.HasFlag(RowButtons.Button14))
            {
                System.Diagnostics.Debug.Print(""SWITCH: Attempting track switch"");
                var bogie = loco.train?.Bogies?.FirstOrDefault(m => !m.HasDerailed);
                if (bogie?.track != null)
                {
                    System.Diagnostics.Debug.Print(""SWITCH: Trying to find closest junction"");
                    var junction = bogie.track.FindClosestJunction(bogie.gameObject.transform.position, 100f);
                    if (junction != null)
                    {
                        if (bogie.track != junction.inBranch?.track)
                        {
                            System.Diagnostics.Debug.Print(""SWITCH: Wrong side of junction {0:X8}"", junction.GetInstanceID());
                        }
                        else
                        {
                            try
                            {
                                junction.Switch(Junction.SwitchMode.REGULAR);
                                System.Diagnostics.Debug.Print(""SWITCH: Sent switch command to junction {0:X8}"", junction.GetInstanceID());
                            }
                            catch (Exception ex)
                            {
                                //Cannot switch this for some reason
                                System.Diagnostics.Debug.Print(""SWITCH: Cannot switch junction {0:X8}"", junction.GetInstanceID());
                                System.Diagnostics.Debug.Print(""SWITCH: {0}"", ex.Message);
                            }
                        }
                    }
                    else
                    {
                        System.Diagnostics.Debug.Print(""SWITCH: No junction found"");
                    }
                }
                else
                {
                    System.Diagnostics.Debug.Print(""SWITCH: No track or bogie found"");
                }

            }
            //Sand
            if (dev.AuxButtons.HasFlag(AuxButtons.Sand))
            {
                loco.SetSanders(loco.IsSandOn() ? 0.0f : 1.0f);
            }
            //Reverser
            if (loco.analogReverser)
            {
                loco.SetReverser((float)dev.ParsedReverser);
            }
            else
            {
                switch (dev.TriStateReverser)
                {
                    case ReverserPosition.Forward:
                        loco.SetReverser(1.0f);
                        break;
                    case ReverserPosition.Neutral:
                        loco.SetReverser(0.0f);
                        break;
                    case ReverserPosition.Reverse:
                        loco.SetReverser(-1.0f);
                        break;
                }
            }
            //Horn
            if (dev.AuxButtons.HasFlag(AuxButtons.HornDown) || dev.AuxButtons.HasFlag(AuxButtons.HornUp))
            {
                loco.UpdateHorn(1.0f);
            }
            else
            {
                loco.UpdateHorn(0.0f);
            }
            //Handle E-Brake
            if (isEmergencyBrakeActive || dev.ParsedTrainBrake < 0.0 || dev.AuxButtons.HasFlag(AuxButtons.EUp) || dev.AuxButtons.HasFlag(AuxButtons.EDown))
            {
                isEmergencyBrakeActive = true;
                loco.SetThrottle(0.0f);
                loco.SetBrake(1.0f);
                loco.SetIndependentBrake(1.0f);
            }
            else
            {
                if (diesel != null || shunter != null)
                {
                    if (dev.ButtonsTop.HasFlag(RowButtons.Button1))
                    {
                        var running = diesel?.GetEngineRunning() ?? shunter?.GetEngineRunning() ?? false;
                        diesel?.SetEngineRunning(!running);
                        shunter?.SetEngineRunning(!running);
                    }
                }
                if (dev.ParsedThrottle >= 0.0)
                {
                    loco.SetThrottle((float)dev.ParsedThrottle);
                    //Future version: Disable dynamic brake
                }
                else
                {
                    loco.SetThrottle(0.0f);
                    //Future version: Set dynamic brake value
                }
                loco.SetIndependentBrake((float)dev.ParsedIndBrake);
                loco.SetBrake((float)dev.ParsedTrainBrake);
            }
        }

        private void Dev_Input(Device sender, ButtonType buttonType)
        {
            SetInitialValues(currentLoco);
        }

        public void Stop()
        {
            if (dev != null)
            {
                Debug.LogWarning($""{nameof(RailDriverAdapter)}: Stopped"");
                var tSpeedOld = tUpdateLoop;
                tUpdateLoop = null;
                tSpeedOld.Join();
                dev.Dispose();
                dev = null;
                PlayerManager.CarChanged -= CarChanged;
            }
        }

        public void Dispose()
        {
            Stop();
        }
    }
}
"
Dv9918nm,邀您一起看：李红俊老师作品,xiaomianao666,JavaScript,Thursday 18th of May 2023 10:24:12 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥李红俊老师作品@@
SSDTJHS7,邀您一起看：♥管理-V1.6,xiaomianao666,JavaScript,Thursday 18th of May 2023 10:11:14 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥♥管理-V1.6@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS+nei1luaWh+S7tlwiLFwicGF0aFwiOlwiY29uZmlnXCIsXCJydWxlXCI6XCJqczpcXG5sZXQgbWV0aG9kO1xcbmxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxuICAgIGV2YWwoXFxcImxldCBKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFwi5L6d6LWWXFxcIl07XFxufVxcbiQuZXhwb3J0cy5tZXRob2QgPSBtZXRob2Q7XFxuJC5leHBvcnRzLnZlcnNpb24gPSAxMDtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaOpeWPo+e8k+WtmFwiLFwicGF0aFwiOlwiamlla291XCIsXCJydWxlXCI6XCJqczpcXG5sZXQgbWV0aG9kO1xcbmxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxuICAgIGV2YWwoXFxcImxldCBKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFwi5L6d6LWWXFxcIl0ucmVwbGFjZShcXFwiLmpzXFxcIixcXFwiMi5qc1xcXCIpO1xcbn1cXG5yZXF1aXJlKG1ldGhvZCk7XFxuXFxuJC5leHBvcnRzID0ge1xcbiAgICDkuIDnuqc6IOS4gOe6pyxcXG4gICAg5LqM57qnOiDkuoznuqcsXFxuICAgIOWFrOWFsTog5YWs5YWxLFxcbiAgICDlsZ7mgKc6IOWxnuaAp1xcbn1cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS6keWPo+S7pOWvvOWFpVwiLFwicGF0aFwiOlwiaW1wb3J0XCIsXCJydWxlXCI6XCJqczpcXG5mdW5jdGlvbiBjbG91ZGltcG9ydCgpIHtcXG4gICAgbGV0IHJlbW90ZWZpbGU7XFxuICAgIGxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG4gICAgaWYgKGZpbGVFeGlzdChjZmdmaWxlKSkge1xcbiAgICAgICAgZXZhbChcXFwibGV0IEp1Y29uZmlnPVxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgICAgICByZW1vdGVmaWxlID0gSnVjb25maWdbXFxcIuS+nei1llxcXCJdLm1hdGNoKC9odHRwKHMpPzpcXFxcL1xcXFwvLipcXFxcLy8pWzBdICsgJ1NyY0p1U2V0LmpzJztcXG4gICAgfVxcbiAgICBpZihyZW1vdGVmaWxlKXtcXG4gICAgICAgIHJlcXVpcmUocmVtb3RlZmlsZSk7XFxuICAgICAgICByZXR1cm4gSllpbXBvcnQoaW5wdXQpO1xcbiAgICB9ZWxzZXtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/msqHmnInnlKjov4fogZrpmIXiiJrlsI/nqIvluo/vvJ9cXFwiO1xcbiAgICB9XFxufVxcbiQuZXhwb3J0cyA9IGNsb3VkaW1wb3J0KCk7XCJ9XSxcInBhcmFtc1wiOlwie1xcXCJuZXdXaW5kb3dcXFwiOnRydWUsXFxcIndpbmRvd0lkXFxcIjpcXFwi6IGa6ZiF4oia566h55CGXFxcIn1cIixcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi6IGa6ZiF4oiaXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4w77yb77ybIFdpbjY077yb77ybIHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNS4wLjAuMCBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcImZpbmRfcnVsZVwiOlwianM6KFxcbigpID0+IHtcXG4gICAgcmVxdWlyZShjb25maWcu5L6d6LWWLm1hdGNoKC9odHRwKHMpPzpcXFxcL1xcXFwvLipcXFxcLy8pWzBdICsgXFxcIlNyY0p1U2V0LmpzXFxcIik7XFxuICAgIFNSQ1NldCgpO1xcbn1cXG4pKClcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInVhXCI6XCJwY1wiLFwicHJlUnVsZVwiOlwiaWYgKCFjb25maWcu5L6d6LWWKSB7XFxuICAgIC8v6L+c56iL5L6d6LWW57Si5byV5paH5Lu25Luj55CG5Zyw5Z2A5YiX6KGoXFxuICAgIGxldCByZXF1aXJlbGlzdCA9IFsnaHR0cHM6Ly9yYXcuaXFpcS5pby8nLCAnaHR0cHM6Ly9naHByb3h5Lm5ldC9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vJywgJ2h0dHBzOi8vZ2hwcm94eS5jb20vaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLycsICdodHRwczovL2Nkbi5zdGF0aWNhbHkuY29tL2doLycsICdodHRwczovL2dpdGh1Yi5qZXZvbnMudmlwL2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8nXVxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVpcmVsaXN0Lmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICB0cnkgeyAvL+i/nOeoi+S+nei1lue0ouW8lVxcbiAgICAgICAgICAgIHJlcXVpcmUocmVxdWlyZWxpc3RbaV0gKyAnc3JjNDg1OTc5NjIvaGsvSnUvcmVxdWlyZS5qcycpO1xcbiAgICAgICAgICAgIGlmIChyZWx5ZmlsZSkge1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgbG9nKGUubWVzc2FnZSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgaW5pdENvbmZpZyh7XFxuICAgICAgICDkvp3otZY6IHJlbHlmaWxlXFxuICAgIH0pO1xcbiAgICBsZXQgY2ZnZmlsZSA9IFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL1NyYy9KdS9jb25maWcuanNvblxcXCI7XFxuICAgIGlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgZXZhbChcXFwibGV0IEp1Y29uZmlnPVxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgICAgICAgICAgSnVjb25maWdbXFxcIuS+nei1llxcXCJdID0gcmVseWZpbGUubWF0Y2goL2h0dHAocyk/OlxcXFwvXFxcXC8uKlxcXFwvLylbMF0gKyAnU3JjSnVNZXRob2QuanMnO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShjZmdmaWxlLCBKU09OLnN0cmluZ2lmeShKdWNvbmZpZykpO1xcbiAgICAgICAgfSBjYXRjaCAoZSkge31cXG4gICAgfVxcbn1cXG4vL2J5LuW4heKImmDkurrmiY0g6IGa5qih5p2/77yBXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuS+nei1luaWh+S7tlxcXCIsXFxcInBhdGhcXFwiOlxcXCJjb25maWdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5sZXQgbWV0aG9kO1xcXFxubGV0IGNmZ2ZpbGUgPSBcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcXFxcXCI7XFxcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxcXG4gICAgZXZhbChcXFxcXFxcImxldCBKdWNvbmZpZz1cXFxcXFxcIiArIGZldGNoKGNmZ2ZpbGUpICsgXFxcXFxcXCI7XFxcXFxcXCIpO1xcXFxuICAgIG1ldGhvZCA9IEp1Y29uZmlnW1xcXFxcXFwi5L6d6LWWXFxcXFxcXCJdO1xcXFxufVxcXFxuJC5leHBvcnRzLm1ldGhvZCA9IG1ldGhvZDtcXFxcbiQuZXhwb3J0cy52ZXJzaW9uID0gMTA7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5o6l5Y+j57yT5a2YXFxcIixcXFwicGF0aFxcXCI6XFxcImppZWtvdVxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCBtZXRob2Q7XFxcXG5sZXQgY2ZnZmlsZSA9IFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9TcmMvSnUvY29uZmlnLmpzb25cXFxcXFxcIjtcXFxcbmlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXFxcbiAgICBldmFsKFxcXFxcXFwibGV0IEp1Y29uZmlnPVxcXFxcXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFxcXFxcIjtcXFxcXFxcIik7XFxcXG4gICAgbWV0aG9kID0gSnVjb25maWdbXFxcXFxcXCLkvp3otZZcXFxcXFxcIl0ucmVwbGFjZShcXFxcXFxcIi5qc1xcXFxcXFwiLFxcXFxcXFwiMi5qc1xcXFxcXFwiKTtcXFxcbn1cXFxcbnJlcXVpcmUobWV0aG9kKTtcXFxcblxcXFxuJC5leHBvcnRzID0ge1xcXFxuICAgIOS4gOe6pzog5LiA57qnLFxcXFxuICAgIOS6jOe6pzog5LqM57qnLFxcXFxuICAgIOWFrOWFsTog5YWs5YWxLFxcXFxuICAgIOWxnuaApzog5bGe5oCnXFxcXG59XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5LqR5Y+j5Luk5a+85YWlXFxcIixcXFwicGF0aFxcXCI6XFxcImltcG9ydFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmZ1bmN0aW9uIGNsb3VkaW1wb3J0KCkge1xcXFxuICAgIGxldCByZW1vdGVmaWxlO1xcXFxuICAgIGxldCBjZmdmaWxlID0gXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL1NyYy9KdS9jb25maWcuanNvblxcXFxcXFwiO1xcXFxuICAgIGlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXFxcbiAgICAgICAgZXZhbChcXFxcXFxcImxldCBKdWNvbmZpZz1cXFxcXFxcIiArIGZldGNoKGNmZ2ZpbGUpICsgXFxcXFxcXCI7XFxcXFxcXCIpO1xcXFxuICAgICAgICByZW1vdGVmaWxlID0gSnVjb25maWdbXFxcXFxcXCLkvp3otZZcXFxcXFxcIl0ubWF0Y2goL2h0dHAocyk/OlxcXFxcXFxcL1xcXFxcXFxcLy4qXFxcXFxcXFwvLylbMF0gKyAnU3JjSnVTZXQuanMnO1xcXFxuICAgIH1cXFxcbiAgICBpZihyZW1vdGVmaWxlKXtcXFxcbiAgICAgICAgcmVxdWlyZShyZW1vdGVmaWxlKTtcXFxcbiAgICAgICAgcmV0dXJuIEpZaW1wb3J0KGlucHV0KTtcXFxcbiAgICB9ZWxzZXtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/msqHmnInnlKjov4fogZrpmIXiiJrlsI/nqIvluo/vvJ9cXFxcXFxcIjtcXFxcbiAgICB9XFxcXG59XFxcXG4kLmV4cG9ydHMgPSBjbG91ZGltcG9ydCgpO1xcXCJ9XVwifSIsInBpY1VybCI6Imh0dHBzOi8vbGFubWVpZ3VvamlhbmcuY29tL3R1Ymlhby9tb3JlLzEyOS5wbmciLCJ0aXRsZSI6IuKZpeeuoeeQhi1WMS42In0=
cEe85RRz,python - turtle,rezamalik15,Python,Thursday 18th of May 2023 09:39:02 PM CDT,"import turtle
import time

t = turtle.Turtle()
s = turtle.Screen()

s.bgcolor(""red"")
t.pensize(5)
t.pencolor(""blue"")

t.speed(1)
t.forward(50)
t.left(90)
t.forward(50)
t.left(90)
t.forward(50)
t.left(90)
t.forward(50)
t.left(90)


time.sleep(2)
"
KkMYAKfa,Untitled,HackersUnitedToxic,Lua,Thursday 18th of May 2023 08:14:37 PM CDT,"local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua""))()
local Window = Library.CreateLib(""woc hub"", ""Midnight"")

-- MAIN
local autotime = Window:NewTab(""autotime"")
local autotimeSection = autotime:NewSection(""autotime"")

autotimeSection:NewButton(""autotime v1"", ""autotimes the shot for you."", function()
    game:GetService(""UserInputService"").InputBegan:Connect(function(i, gpe)
        if not gpe and i.KeyCode == Enum.KeyCode.T then 
        keypress(0x45)
        wait(0.70)
        keyrelease(0x45)
        end
        end)
end)"
n9qnSX8U,my rh2 script,HackersUnitedToxic,Lua,Thursday 18th of May 2023 07:58:43 PM CDT,"local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua""))()
local Window = Library.CreateLib(""woc hub"", ""Midnight"")

-- MAIN
local autotime = Window:NewTab(""autotime"")
local autotimeSection = autotime:NewSection(""autotime"")

autotimeSection:NewButton(""autotime v1"", ""autotimes the shot for you."", function()
    game:GetService(""UserInputService"").InputBegan:Connect(function(i, gpe)
        if not gpe and i.KeyCode == Enum.KeyCode.F then 
        keypress(0x45)
        wait(0.70)
        keyrelease(0x45)
        end
        end)
end)"
0jQLVKBr,Untitled,Pinto085,C++,Thursday 18th of May 2023 07:46:34 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define RED 0
#define WHITE 1
#define INF int(1e9)

vector<int> read_walk(){
    vector<int> walk;
    char ch; string s; int t; cin >> s;
    stringstream sin(s);
    int cnt = count(s.begin(), s.end(), '-');
    while(cnt != -1){
        sin >> t; walk.emplace_back(t);
        if(cnt) sin >> ch;
        --cnt;
    }
    return walk;
}

vector<pair<int, int>> p; //p[position] = {color, is_king}
pair<int, int> walk_red[2] = {{+1, -1}, {+1, +1}};
pair<int, int> walk_white[2] = {{-1, -1}, {-1, +1}};
vector<tuple<int, int>> adj1[40]; // {adj, color_can}
vector<tuple<int, int, int>> adj2[40]; // {adj, color_can, eat_pos}
int turn_king[40]; //if turn_king[pos] = COLOR, then COLOR become KING

bool in(int i, int j){
    return i >= 0 && i < 8 && j >= 0 && j < 8;
}

void init(){
    int M[8][8];
    for(int i = 0, cnt = 1; i < 8; i++){
        for(int j = 0; j < 8; j++){
            if((i&1) != (j&1)) M[i][j] = cnt++;
            else M[i][j] = 0;
        }
    }
    for(int i = 0, cnt = 1; i < 8; i++){
        for(int j = 0; j < 8; j++){
            if(!M[i][j]) continue;
            for(int k = 0; k < 2; k++){
                //RED MOVEMENTS
                int ni1 = i+walk_red[k].first, nj1 = j+walk_red[k].second;
                int ni2 = i+2*walk_red[k].first, nj2 = j+2*walk_red[k].second;
                if(in(ni1, nj1)) adj1[M[i][j]].emplace_back(M[ni1][nj1], RED);
                if(in(ni2, nj2)) adj2[M[i][j]].emplace_back(M[ni2][nj2], RED, M[ni1][nj1]);
                //WHITE MOVEMENTS
                ni1 = i+walk_white[k].first, nj1 = j+walk_white[k].second;
                ni2 = i+2*walk_white[k].first, nj2 = j+2*walk_white[k].second;
                if(in(ni1, nj1)) adj1[M[i][j]].emplace_back(M[ni1][nj1], WHITE);
                if(in(ni2, nj2)) adj2[M[i][j]].emplace_back(M[ni2][nj2], WHITE, M[ni1][nj1]);
            }
        }
    }
    memset(turn_king, -1, sizeof(turn_king));
    turn_king[1] = turn_king[2] = turn_king[3] = turn_king[4] = WHITE;
    turn_king[29] = turn_king[30] = turn_king[31] = turn_king[32] = RED;
}

int can_do1(int a, int b){
    if(a < 1 || a > 32 || p[a].first == -1) return -1; //NO ONE IS IN 'a'
    if(b < 1 || b > 32 || p[b].first != -1) return -1; //SOMEONE IS IN 'b'
    int i = 0;
    for(auto [v, color]:adj1[a]){
        //'v' is where we wanna go and (we can do the movement or we are king)
        if(v == b && (color == p[a].first || p[a].second == 1))
            return i;
        ++i;
    }
    return -1;
}

int can_do2(int a, int b){
    if(a < 1 || a > 32 || p[a].first == -1) return -1; //NO ONE IS IN 'a'
    if(b < 1 || b > 32 || p[b].first != -1) return -1; //SOMEONE IS IN 'b'
    int i = 0; 
    for(auto [v, color, eat]:adj2[a]){
        //'v' is where we wanna go and (we can do the movement or we are king)
        if(v == b && (color == p[a].first || p[a].second == 1)){
            if(p[eat].first == -1) return -1; //NO ONE IS IN 'eat'
            if(p[eat].first == p[a].first) return -1; // 'a' eats 'eat' and they have the same color
            return i;
        }
        ++i;
    }
    return -1;
}

bool can_eat_pos(int a){
    for(auto [b, color, eat]:adj2[a])
        if(can_do2(a, b) != -1)
            return true;
    return false;
}

bool can_eat(int color){
    for(int a = 1; a <= 32; a++){
        if(p[a].first != color) continue;
        for(auto [b, color, eat]:adj2[a])
            if(can_do2(a, b) != -1)
                return true;
    }
    return false;
}

bool is_movement1(int a, int b){
    for(auto [v, color]:adj1[a])
        if(v == b) return true;
    return false;
}

bool do_movement1(vector<int> &walk, int color){
    int a = walk[0], b = walk[1];
    if(a < 1 || a > 32 || p[a].first != color) return false;
    if(can_do1(a, b) != -1){
        swap(p[a], p[b]);
        p[b].second |= (turn_king[b] == color);
        return true;
    }
    return false;
}

bool do_movement2(int a, int b, int color){
    int i = can_do2(a, b);
    if(i != -1){
        int aux1, aux2, eat; tie(aux1, aux2, eat) = adj2[a][i];
        p[eat] = {-1, -1};
        swap(p[a], p[b]);
        p[b].second |= (turn_king[b] == color);
        return true;
    }
    return false;
}

bool do_movements2(vector<int> &walk, int color){
    int a = walk[0], b; bool became_king = false;
    if(a < 1 || a > 32 || p[a].first != color) return false;
    for(int i = 1; i < walk.size(); i++){
        if(became_king) return false; //Once a piece is promoted, its move ends
        a = walk[i-1]; b = walk[i];
        int is_king_before = p[a].second;
        if(!do_movement2(a, b, color)) return false;
        int is_king_after = p[b].second;
        became_king |= (!is_king_before && is_king_after);
    }
    //the piece did not become king and it can eat someone else, then it must
    if(!became_king && can_eat_pos(b)) return false;
    return true;
}

int main(){
    init();
    int r, w;
    while(cin >> r >> w){
        if(!r && !w) break;
        p.assign(40, {-1, -1});
        while(r--){
            int num; cin >> num;
            p[abs(num)] = {RED, num<0};
        }
        while(w--){
            int num; cin >> num;
            p[abs(num)] = {WHITE, num<0};
        }
        int m, op; char ch;
        cin >> m >> ch;
        op = (ch == 'W');
        int pos_ans = INF;
        for(int k = 1; k <= m; k++){
            vector<int> walk = read_walk();
            //We must do at least 1 step
            if(walk.size() <= 1) 
                pos_ans = min(pos_ans, k);
            //if we are not eating the oponent we must walk just 1 step
            bool mov1 = is_movement1(walk[0], walk[1]);
            if(mov1 && walk.size() != 2) 
                pos_ans = min(pos_ans, k);
            //if can_eat then it must do it
            bool must_eat = can_eat(op);
            if(must_eat && mov1) pos_ans = min(pos_ans, k);
            //if cant do the movement then stop
            bool movement_sucessful;
            if(mov1) movement_sucessful = do_movement1(walk, op);
            else movement_sucessful = do_movements2(walk, op);
            if(!movement_sucessful) pos_ans = min(pos_ans, k);

            op ^= 1;
        }
        if(pos_ans == INF) cout << ""All moves valid\n"";
        else cout << ""Move "" << pos_ans << "" is invalid\n"";
    }
    return 0;
}
"
LmpuiMQB,Untitled,Pinto085,C++,Thursday 18th of May 2023 07:25:47 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define RED 0
#define WHITE 1
#define INF int(1e9)

vector<int> read_walk(){
    vector<int> walk;
    char ch; string s; int t; cin >> s;
    stringstream sin(s);
    int cnt = count(s.begin(), s.end(), '-');
    while(cnt != -1){
        sin >> t; walk.emplace_back(t);
        if(cnt) sin >> ch;
        --cnt;
    }
    return walk;
}

vector<pair<int, int>> p; //p[position] = {color, is_king}
pair<int, int> walk_red[2] = {{+1, -1}, {+1, +1}};
pair<int, int> walk_white[2] = {{-1, -1}, {-1, +1}};
vector<tuple<int, int>> adj1[40]; // {adj, color_can}
vector<tuple<int, int, int>> adj2[40]; // {adj, color_can, eat_pos}
int turn_king[40]; //if turn_king[pos] = COLOR, then COLOR become KING

bool in(int i, int j){
    return i >= 0 && i < 8 && j >= 0 && j < 8;
}
void init(){
    int M[8][8];
    for(int i = 0, cnt = 1; i < 8; i++){
        for(int j = 0; j < 8; j++){
            if((i&1) != (j&1)) M[i][j] = cnt++;
            else M[i][j] = 0;
        }
    }
    for(int i = 0, cnt = 1; i < 8; i++){
        for(int j = 0; j < 8; j++){
            if(!M[i][j]) continue;
            for(int k = 0; k < 2; k++){
                //RED MOVEMENTS
                int ni1 = i+walk_red[k].first, nj1 = j+walk_red[k].second;
                int ni2 = i+2*walk_red[k].first, nj2 = j+2*walk_red[k].second;
                if(in(ni1, nj1)) adj1[M[i][j]].emplace_back(M[ni1][nj1], RED);
                if(in(ni2, nj2)) adj2[M[i][j]].emplace_back(M[ni2][nj2], RED, M[ni1][nj1]);
                //WHITE MOVEMENTS
                ni1 = i+walk_white[k].first, nj1 = j+walk_white[k].second;
                ni2 = i+2*walk_white[k].first, nj2 = j+2*walk_white[k].second;
                if(in(ni1, nj1)) adj1[M[i][j]].emplace_back(M[ni1][nj1], WHITE);
                if(in(ni2, nj2)) adj2[M[i][j]].emplace_back(M[ni2][nj2], WHITE, M[ni1][nj1]);
            }
        }
    }
    memset(turn_king, -1, sizeof(turn_king));
    turn_king[1] = turn_king[2] = turn_king[3] = turn_king[4] = WHITE;
    turn_king[29] = turn_king[30] = turn_king[31] = turn_king[32] = RED;
}

int can_do1(int a, int b){
    if(a < 1 || a > 32 || p[a].first == -1) return -1; //NO ONE IS IN 'a'
    if(b < 1 || b > 32 || p[b].first != -1) return -1; //SOMEONE IS IN 'b'
    int i = 0;
    for(auto [v, color]:adj1[a]){
        //'v' is where we wanna go and (we can do the movement or we are king)
        if(v == b && (color == p[a].first || p[a].second == 1))
            return i;
        ++i;
    }
    return -1;
}

int can_do2(int a, int b){
    if(a < 1 || a > 32 || p[a].first == -1) return -1; //NO ONE IS IN 'a'
    if(b < 1 || b > 32 || p[b].first != -1) return -1; //SOMEONE IS IN 'b'
    int i = 0; 
    for(auto [v, color, eat]:adj2[a]){
        //'v' is where we wanna go and (we can do the movement or we are king)
        if(v == b && (color == p[a].first || p[a].second == 1)){
            if(p[eat].first == -1) return -1; //NO ONE IS IN 'eat'
            if(p[eat].first == p[a].first) return -1; // 'a' eats 'eat' and they have the same color
            return i;
        }
        ++i;
    }
    return -1;
}

bool can_eat_pos(int a){
    for(auto [b, color, eat]:adj2[a])
        if(can_do2(a, b) != -1)
            return true;
    return false;
}

bool can_eat(int color){
    for(int a = 1; a <= 32; a++){
        if(p[a].first != color) continue;
        for(auto [b, color, eat]:adj2[a])
            if(can_do2(a, b) != -1)
                return true;
    }
    return false;
}

bool is_movement1(int a, int b){
    for(auto [v, color]:adj1[a])
        if(v == b) return true;
    return false;
}

bool do_movement1(vector<int> &walk, int color){
    int a = walk[0], b = walk[1];
    if(a < 1 || a > 32 || p[a].first != color) return false;
    if(can_do1(a, b) != -1){
        swap(p[a], p[b]);
        p[b].second |= (turn_king[b] == color);
        return true;
    }
    return false;
}

bool do_movement2(int a, int b, int color){
    int i = can_do2(a, b);
    if(i != -1){
        int aux1, aux2, eat; tie(aux1, aux2, eat) = adj2[a][i];
        p[eat] = {-1, -1};
        swap(p[a], p[b]);
        p[b].second |= (turn_king[b] == color);
        return true;
    }
    return false;
}

bool do_movements2(vector<int> &walk, int color){
    int a = walk[0], b; bool became_king = false;
    if(a < 1 || a > 32 || p[a].first != color) return false;
    for(int i = 1; i < walk.size(); i++){
        if(became_king) return false; //Once a piece is promoted, its move ends
        a = walk[i-1]; b = walk[i];
        int is_king_before = p[a].second;
        if(!do_movement2(a, b, color)) return false;
        int is_king_after = p[b].second;
        became_king |= (!is_king_before && is_king_after);
    }
    //the piece did not become king and it can eat someone else, then it must
    if(!became_king && can_eat_pos(b)) return false;
    return true;
}

void print_state(){
    for(int i = 0, cnt = 1; i < 8; i++){
        for(int j = 0; j < 8; j++){
            if((i&1) != (j&1)){ 
                cout << (p[cnt].first == -1 ? 'X' : (p[cnt].first == RED ? char('r'-32*p[cnt].second) : char('w'-32*p[cnt].second))) << "" "";
                cnt++;
            }else{
                cout << ""X "";
            }
        }
        cout << ""\n"";
    }
    cout << ""\n"";
}

int main(){
    init();
    int r, w;
    while(cin >> r >> w){
        if(!r && !w) break;
        if(r != 4 && w != 3) break;
        p.assign(40, {-1, -1});
        while(r--){
            int num; cin >> num;
            p[abs(num)] = {RED, num<0};
        }
        while(w--){
            int num; cin >> num;
            p[abs(num)] = {WHITE, num<0};
        }
        int m, op; char ch;
        cin >> m >> ch;
        op = (ch == 'W');
        // print_state();
        int pos_ans = INF;
        for(int k = 1; k <= m; k++){
            vector<int> walk = read_walk();
            //We must do at least 1 step
            if(walk.size() <= 1) 
                pos_ans = min(pos_ans, k);
            //if we are not eating the oponent we must walk just 1 step
            bool mov1 = is_movement1(walk[0], walk[1]);
            if(mov1 && walk.size() != 2) 
                pos_ans = min(pos_ans, k);
            //if can_eat then it must do it
            bool must_eat = can_eat(op);
            if(must_eat && mov1) pos_ans = min(pos_ans, k);
            //if cant do the movement then stop
            bool movement_sucessful;
            if(mov1) movement_sucessful = do_movement1(walk, op);
            else movement_sucessful = do_movements2(walk, op);
            if(!movement_sucessful) pos_ans = min(pos_ans, k);

            // print_state();
            op ^= 1;
        }
        if(pos_ans == INF) cout << ""All moves valid\n"";
        else cout << ""Move "" << pos_ans << "" is invalid\n"";
    }
    return 0;
}
"
azrkZHH7,2023-05-18_stats.json,rdp_snitch,JSON,Thursday 18th of May 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""162.241.158.17"": 26,
    ""51.75.160.42"": 2,
    ""106.116.169.71"": 2,
    ""47.101.207.207"": 7,
    ""94.182.91.36"": 2,
    ""85.102.99.152"": 12,
    ""103.214.22.38"": 10,
    ""194.165.16.10"": 4,
    ""194.165.16.111"": 3,
    ""193.29.13.31"": 3,
    ""5.62.34.45"": 1,
    ""5.62.34.41"": 1,
    ""185.170.144.3"": 2,
    ""87.251.75.145"": 3,
    ""31.43.185.32"": 5,
    ""121.4.147.80"": 3,
    ""23.224.176.115"": 1,
    ""174.138.17.83"": 1,
    ""87.251.75.120"": 2,
    ""185.122.204.69"": 3,
    ""87.251.64.110"": 4,
    ""93.180.135.253"": 20,
    ""45.119.83.28"": 2,
    ""103.67.163.4"": 10,
    ""194.165.16.76"": 2,
    ""91.240.118.11"": 8,
    ""176.113.115.140"": 6,
    ""43.156.9.187"": 51,
    ""45.135.201.65"": 8,
    ""121.41.5.167"": 3,
    ""193.233.21.87"": 2,
    ""193.233.233.227"": 4,
    ""38.142.129.18"": 1,
    ""71.6.134.233"": 10,
    ""185.11.61.199"": 2,
    ""194.26.135.80"": 2,
    ""167.94.145.57"": 1,
    ""205.210.31.250"": 3,
    ""98.159.37.69"": 1,
    ""193.227.49.104"": 96,
    ""103.167.91.173"": 1,
    ""87.251.75.64"": 1,
    ""20.169.241.254"": 2,
    ""167.94.138.52"": 1,
    ""194.165.16.37"": 2,
    ""45.227.254.19"": 2,
    ""205.210.31.172"": 3
  },
  ""asn"": {
    ""AS19871"": 26,
    ""AS16276"": 2,
    ""AS4134"": 2,
    ""AS37963"": 10,
    ""AS31549"": 2,
    ""AS47331"": 12,
    ""AS63473"": 10,
    ""AS48721"": 11,
    ""AS42397"": 3,
    ""AS36351"": 2,
    ""AS48080"": 6,
    ""AS208091"": 6,
    ""AS211736"": 5,
    ""AS45090"": 3,
    ""AS40065"": 1,
    ""AS14061"": 1,
    ""AS57523"": 15,
    ""AS62456"": 20,
    ""AS131386"": 2,
    ""AS150813"": 10,
    ""AS57678"": 6,
    ""AS132203"": 51,
    ""AS44486"": 8,
    ""AS56380"": 2,
    ""Unknown"": 4,
    ""AS174"": 1,
    ""AS10439"": 10,
    ""AS398705"": 1,
    ""AS396982"": 6,
    ""AS62240"": 1,
    ""AS2561"": 96,
    ""AS63737"": 1,
    ""AS8075"": 2,
    ""AS398324"": 1,
    ""AS267784"": 2
  },
  ""isp"": {
    ""Unified Layer"": 26,
    ""OVH SAS"": 2,
    ""Chinanet"": 2,
    ""Addresses CNNIC"": 7,
    ""Aria Shatel Company Ltd"": 2,
    ""TTNet A.S."": 12,
    ""Hosthatch"": 10,
    ""Flyservers S.A."": 13,
    ""Bunea TELECOM SRL"": 3,
    ""SoftLayer Technologies Inc."": 2,
    ""Dmitriy Panchenko"": 6,
    ""XHOST-INTERNET-SOLUTIONS"": 6,
    ""FOP Dmytro Nedilskyi"": 5,
    ""China Internet Network Information Center"": 3,
    ""Cnservers LLC"": 1,
    ""DigitalOcean, LLC"": 1,
    ""Chang Way Technologies Co. Limited"": 15,
    ""WEBHANE Bilisim Teknolojileri Ticaret Limited Sirketi"": 20,
    ""Long Van System Solution"": 2,
    ""Thoi MMO Company Limited"": 10,
    ""Cat Technologies Co. Limited"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 51,
    ""LIVINGBOTS"": 8,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""''IT FRUIT'' S.R.L."": 2,
    ""Aeza-promo"": 4,
    ""Cogent Communications"": 1,
    ""CariNet, Inc."": 10,
    ""Censys, Inc."": 2,
    ""Google LLC"": 6,
    ""LogicWeb Inc."": 1,
    ""Egyptian Universities Network"": 96,
    ""Vietserver Services Technology Company Limited"": 1,
    ""Microsoft Corporation"": 2
  },
  ""org"": {
    ""WEBSITEWELCOME.COM"": 26,
    ""OVH Ltd"": 2,
    ""Chinanet HE"": 2,
    ""Aliyun Computing Co., LTD"": 10,
    ""Unknown"": 12,
    ""Turk Telekomunikasyon A.S"": 12,
    ""HostRoyale Technologies Pvt Ltd"": 10,
    ""Flyservers S.A"": 11,
    ""Bunea TELECOM SRL"": 3,
    ""AVAST Software"": 2,
    ""Xhostis"": 2,
    ""Xhost Internet Solutions"": 10,
    ""FOP Dmytro Nedilskyi"": 7,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 3,
    ""CloudRadium L.L.C"": 1,
    ""DigitalOcean, LLC"": 1,
    ""Starcrecium Limited"": 5,
    ""WEBHANE Bilisim Teknolojileri Ticaret Limited Sirketi"": 20,
    ""MINHTHOIPC"": 10,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Cat Technologies Co. Limited"": 6,
    ""Tencent Cloud Computing"": 51,
    ""Aeza promo1"": 4,
    ""Budd Van Lines"": 1,
    ""CariNet, Inc."": 10,
    ""Censys, Inc."": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""Dedicated Servers"": 1,
    ""Egyptian Universities Network"": 96,
    ""Vietserver Viet NAM Service Technology Company Limited"": 1,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Censys, Inc"": 1,
    ""UAB Host Baltic"": 2
  },
  ""regionName"": {
    ""Utah"": 26,
    ""England"": 8,
    ""Hebei"": 2,
    ""Shanghai"": 10,
    ""Tehran"": 2,
    ""Trabzon"": 12,
    ""Central and Western District"": 10,
    ""Kaunas"": 11,
    ""Timis"": 3,
    ""Beijing"": 2,
    ""North Holland"": 2,
    ""Kyiv City"": 5,
    ""California"": 8,
    ""South West"": 1,
    ""Moscow"": 27,
    ""Istanbul"": 20,
    ""Ho Chi Minh"": 2,
    ""Tinh Binh GJinh"": 10,
    ""North West"": 51,
    ""Bremen"": 8,
    ""Zhejiang"": 3,
    ""Chi\u0219in\u0103u Municipality"": 2,
    ""Georgia"": 1,
    ""Nevada"": 10,
    ""Chechnya"": 2,
    ""Hesse"": 1,
    ""Giza"": 96,
    ""Tinh Hung Yen"": 1,
    ""Virginia"": 2,
    ""Michigan"": 1,
    ""Vilnius"": 2
  },
  ""country"": {
    ""United States"": 48,
    ""United Kingdom"": 8,
    ""China"": 17,
    ""Iran"": 2,
    ""Turkey"": 32,
    ""Hong Kong"": 10,
    ""Lithuania"": 13,
    ""Romania"": 3,
    ""Netherlands"": 2,
    ""Ukraine"": 5,
    ""Singapore"": 52,
    ""Russia"": 29,
    ""Vietnam"": 13,
    ""Germany"": 9,
    ""Moldova"": 2,
    ""Egypt"": 96
  },
  ""account"": {
    ""hello"": 257,
    ""Test"": 11,
    ""(empty)"": 5,
    ""Administr"": 21,
    ""Domain"": 26,
    ""565a7pd7"": 4,
    ""eltons"": 5,
    ""administr"": 5,
    ""ZyJGCbdku"": 1,
    ""QnwNZH"": 1,
    ""kOXqgn"": 1,
    ""IZSYUNBA"": 1,
    ""WStUnumzZ"": 1,
    ""zQtaDB"": 1,
    ""GCATzN"": 1
  },
  ""keyboard"": {
    ""Unknown"": 341
  },
  ""client_build"": {
    ""Unknown"": 341
  },
  ""client_name"": {
    ""Unknown"": 341
  },
  ""ip_type"": {
    ""hosting"": 121,
    ""Unknown"": 202,
    ""mobile"": 2,
    ""hosting & proxy"": 3,
    ""proxy"": 13
  }
}"
veMbC5zb,Gestion Elevator Pneumaticcraft,Asreborn,Lua,Thursday 18th of May 2023 06:29:16 PM CDT,"-- Player Detector --
 
pd = peripheral.wrap(""right"")
 
-- Redstone Integrator --
 
porte1 = peripheral.wrap(""redstoneIntegrator_4"")
caller1 = peripheral.wrap(""redstoneIntegrator_5"")
porte2 = peripheral.wrap(""redstoneIntegrator_6"")
caller2 = peripheral.wrap(""redstoneIntegrator_7"")
porte3 = peripheral.wrap(""redstoneIntegrator_8"")
caller3 = peripheral.wrap(""redstoneIntegrator_9"")
porte4 = peripheral.wrap(""redstoneIntegrator_11"")
caller4 = peripheral.wrap(""redstoneIntegrator_10"")
porte5 = peripheral.wrap(""redstoneIntegrator_12"")
caller5 = peripheral.wrap(""redstoneIntegrator_13"")
porte6 = peripheral.wrap(""redstoneIntegrator_14"")
caller6 = peripheral.wrap(""redstoneIntegrator_15"")
 
 
-- Programme -- 
 
while true do
 
------ Player devant porte 1 --
    
    local posOne1 = {x=268;y=65;z=-157}
    local posTwo1 = {x=272;y=67;z=-154}
    
 
    if pd.isPlayersInCoords(posOne1,posTwo1) == true
    then
        porte1.setOutput(""top"",true)
        caller1.setOutput(""back"",true)
    else
        porte1.setOutput(""top"",false)
        caller1.setOutput(""back"",false)
    end

------ Player devant porte 2 --
    
    local posOne2 = {x=270;y=77;z=-157}
    local posTwo2 = {x=274;y=79;z=-154}
    
 
    if pd.isPlayersInCoords(posOne2,posTwo2) == true
    then
        porte2.setOutput(""top"",true)
        caller2.setOutput(""back"",true)
    else
        porte2.setOutput(""top"",false)
        caller2.setOutput(""back"",false)
    end

------ Player devant porte 3 --
    
    local posOne3 = {x=270;y=89;z=-157}
    local posTwo3 = {x=274;y=91;z=-154}
    
 
    if pd.isPlayersInCoords(posOne3,posTwo3) == true
    then
        porte3.setOutput(""top"",true)
        caller3.setOutput(""back"",true)
    else
        porte3.setOutput(""top"",false)
        caller3.setOutput(""back"",false)
    end

------ Player devant porte 4 --
    
    local posOne4 = {x=270;y=101;z=-157}
    local posTwo4 = {x=274;y=103;z=-154}
    
 
    if pd.isPlayersInCoords(posOne4,posTwo4) == true
    then
        porte4.setOutput(""top"",true)
        caller4.setOutput(""back"",true)
    else
        porte4.setOutput(""top"",false)
        caller4.setOutput(""back"",false)
    end

------ Player devant porte 5 --
    
    local posOne5 = {x=270;y=113;z=-157}
    local posTwo5 = {x=274;y=115;z=-154}
    
 
    if pd.isPlayersInCoords(posOne5,posTwo5) == true
    then
        porte5.setOutput(""top"",true)
        caller5.setOutput(""back"",true)
    else
        porte5.setOutput(""top"",false)
        caller5.setOutput(""back"",false)
    end

------ Player devant porte 6 --
    
    local posOne6 = {x=270;y=125;z=-157}
    local posTwo6 = {x=274;y=127;z=-154}
    
 
    if pd.isPlayersInCoords(posOne6,posTwo6) == true
    then
        porte6.setOutput(""top"",true)
        caller6.setOutput(""back"",true)
    else
        porte6.setOutput(""top"",false)
        caller6.setOutput(""back"",false)
    end

 
end
 "
mZzcstuq,DOA Priv V0.0.2,DAHOODEXPLOITS,Lua,Thursday 18th of May 2023 06:06:04 PM CDT,"-- // Target Aim + Antilock Section Credits to Azure Devs (Lapt, Elegant, Horrific, Weda, and Durp) -- \\

-- // desync aa -- \\
_G.Desync = false

game.RunService.Heartbeat:Connect(function()
if _G.Desync then
local CurrentVelocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0,math.rad(0),0)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0,math.rad(7),0)
game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(7000,7000,7000)
game.RunService.RenderStepped:Wait()
game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = CurrentVelocity
    end
end)

-- // no velocity aa -- \\
getgenv().VelocityAA = false 

game:GetService(""RunService"").heartbeat:Connect(function()
if getgenv().VelocityAA == true then 
local abc = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(1,1,1) * (2^16)
game:GetService(""RunService"").RenderStepped:Wait()
game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = abc
end 
end)

-- // silent + tracer + resolver + checks -- \\
getgenv().DOAPriv = {
    Silent = {
        SilentToggle = '',
        Enabled = False,
        AimPart = ""HumanoidRootPart"",
        Prediction = 0.132,
        ClosestPart = False
    },
    FOV = {
        Visible = False,
        Radius = 40,
    },

    Tracer = {
        TracerToggle = ""Q"",
        Enabled = false,
        AimPart = ""HumanoidRootPart"",
        Prediction = 4.8,
        SmoothnessValue = 0.07,
        Smoothness = False,
        TraceClosestPart = False,
        UseTracerRadius = False,
        Radius = 150,
        ShowFOV = false
    },
    Resolver = {
        AutoResolve = false,  -- Keep These Settings, Very Recommended
        Positive = 80,
        Negative = -40,
    },

    Extras = {
        WallCheck = true,
        UnlockedOnDeath = false,
    },
}

if not LPH_OBFUSCATED then
    LPH_JIT_MAX = function(...)
        return (...)
    end
    LPH_NO_VIRTUALIZE = function(...)
        return (...)
    end
end

LPH_JIT_MAX(
    function()
        local Players, Client, Mouse, RS, Camera, r =
            game:GetService(""Players""),
            game:GetService(""Players"").LocalPlayer,
            game:GetService(""Players"").LocalPlayer:GetMouse(),
            game:GetService(""RunService""),
            game.Workspace.CurrentCamera,
            math.random

        local Circle = Drawing.new(""Circle"")
        Circle.Color = Color3.new(1, 1, 1)
        Circle.Transparency = 0.5
        Circle.Thickness = 1

        local TracerCircle = Drawing.new(""Circle"")
        TracerCircle.Color = Color3.new(1, 1, 1)
        TracerCircle.Thickness = 1

        local prey
        local prey2
        local On

        local Vec2 = function(property)
            return Vector2.new(property.X, property.Y + (game:GetService(""GuiService""):GetGuiInset().Y))
        end

        local UpdateSilentFOV = function()
            if not Circle then
                return Circle
            end
            Circle.Visible = getgenv().DOAPriv.FOV[""Visible""]
            Circle.Radius = getgenv().DOAPriv.FOV[""Radius""] * 3.05
            Circle.Position = Vec2(Mouse)

            return Circle
        end

        local UpdateTracerFOV = function()
            if not TracerCircle then
                return TracerCircle
            end

            TracerCircle.Visible = getgenv().DOAPriv.Tracer[""ShowFOV""]
            TracerCircle.Radius = getgenv().DOAPriv.Tracer[""Radius""]
            TracerCircle.Position = Vec2(Mouse)

            return TracerCircle
        end

        game.RunService.RenderStepped:Connect(function ()
            UpdateTracerFOV()
            UpdateSilentFOV()
        end)

        local WallCheck = function(destination, ignore)
            if getgenv().DOAPriv.Extras.WallCheck then
                local Origin = Camera.CFrame.p
                local CheckRay = Ray.new(Origin, destination - Origin)
                local Hit = game.workspace:FindPartOnRayWithIgnoreList(CheckRay, ignore)
                return Hit == nil
            else
                return true
            end
        end

        local useVelocity = function (player) 
            player.Character.HumanoidRootPart.Velocity = Vector3.new(0.36, 0.21, 0.34) * 2
        end

        local checkVelocity = function (player, pos, neg)
            if player and player.Character:FindFirstChild(""Humanoid"") then
                local velocity = player.Character.HumanoidRootPart.Velocity
                if (velocity.Magnitude > neg or velocity.Magnitude < pos and
                (not player.Character.Humanoid.Jump == true)) then
                    useVelocity(player)
                end
            end
            return false
        end

        task.spawn(function () while task.wait() do if getgenv().DOAPriv.Resolver.AutoResolve == true then checkVelocity(prey or prey2, getgenv().DOAPriv.Resolver.Positive, getgenv().DOAPriv.Resolver.Negative) end end end)

        GetClosestToMouse = function()
            local Target, Closest = nil, 1 / 0

            for _, v in pairs(Players:GetPlayers()) do
                if (v.Character and v ~= Client and v.Character:FindFirstChild(""HumanoidRootPart"")) then
                    local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
                    local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude

                    if
                        (Circle.Radius > Distance and Distance < Closest and OnScreen and
                            WallCheck(v.Character.HumanoidRootPart.Position, {Client, v.Character}))
                     then
                        Closest = Distance
                        Target = v
                    end
                end
            end
            return Target
        end

        function TargetChecks(Target)
            if getgenv().DOAPriv.Extras.UnlockedOnDeath == true and Target.Character then
                return Target.Character.BodyEffects[""K.O""].Value and true or false
            end
            return false
        end

        function PredictionictTargets(Target, Value)
            return Target.Character[getgenv().DOAPriv.Silent.AimPart].CFrame +
                (Target.Character[getgenv().DOAPriv.Silent.AimPart].Velocity * Value)
        end

        local WTS = function(Object)
            local ObjectVector = Camera:WorldToScreenPoint(Object.Position)
            return Vector2.new(ObjectVector.X, ObjectVector.Y)
        end

        local IsOnScreen = function(Object)
            local IsOnScreen = Camera:WorldToScreenPoint(Object.Position)
            return IsOnScreen
        end

        local FilterObjs = function(Object)
            if string.find(Object.Name, ""Gun"") then
                return
            end
            if table.find({""Part"", ""MeshPart"", ""BasePart""}, Object.ClassName) then
                return true
            end
        end
        GetClosestBodyPart = function(character)
            local ClosestDistance = 1 / 0
            local BodyPart = nil
            if (character and character:GetChildren()) then
                for _, x in next, character:GetChildren() do
                    if FilterObjs(x) and IsOnScreen(x) then
                        local Distance = (WTS(x) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                        if getgenv().DOAPriv.Tracer.UseTracerRadius == true then
                            if (TracerCircle.Radius > Distance and Distance < ClosestDistance) then
                                ClosestDistance = Distance
                                BodyPart = x
                            end
                        else
                            if (Distance < ClosestDistance) then
                                ClosestDistance = Distance
                                BodyPart = x
                            end
                        end
                    end
                end
            end
            return BodyPart
        end

        Mouse.KeyDown:Connect(
            function(Key)
                if (Key == getgenv().DOAPriv.Tracer.TracerToggle:lower()) then
                    if getgenv().DOAPriv.Tracer.Enabled == true then
                        On = not On
                        if On then
                            prey2 = GetClosestToMouse()
                        else
                            if prey2 ~= nil then
                                prey2 = nil
                            end
                        end
                    end
                end
                if (Key == getgenv().DOAPriv.Silent.SilentToggle:lower()) then
                    if getgenv().DOAPriv.Silent.Enabled == true then
                        getgenv().DOAPriv.Silent.Enabled = false
                    else
                        getgenv().DOAPriv.Silent.Enabled = true
                    end
                end
            end
        )

        RS.RenderStepped:Connect(
            function()
                if prey then
                    if prey ~= nil and getgenv().DOAPriv.Silent.Enabled and getgenv().DOAPriv.Silent.ClosestPart == true then
                        getgenv().DOAPriv.Silent[""AimPart""] = tostring(GetClosestBodyPart(prey.Character))
                    end
                end
                if prey2 then
                    if
                        prey2 ~= nil and not TargetChecks(prey2) and getgenv().DOAPriv.Tracer.Enabled and
                            getgenv().DOAPriv.Tracer.TraceClosestPart == true
                     then
                        getgenv().DOAPriv.Tracer[""AimPart""] = tostring(GetClosestBodyPart(prey2.Character))
                    end
                end
            end
        )

        local TracerPredictioniction = function(Target, Value)
            return Target.Character[getgenv().DOAPriv.Tracer.AimPart].Position +
                (Target.Character[getgenv().DOAPriv.Tracer.AimPart].Velocity / Value)
        end

        RS.RenderStepped:Connect(
            function()
                if
                    prey2 ~= nil and not TargetChecks(prey2) and getgenv().DOAPriv.Tracer.Enabled and
                        getgenv().DOAPriv.Tracer.Smoothness == true
                 then
                    local Main = CFrame.new(Camera.CFrame.p, TracerPredictioniction(prey2, getgenv().DOAPriv.Tracer.Prediction))
                    Camera.CFrame =
                        Camera.CFrame:Lerp(
                        Main,
                        getgenv().DOAPriv.Tracer.SmoothnessValue,
                        Enum.EasingStyle.Elastic,
                        Enum.EasingDirection.InOut,
                        Enum.EasingStyle.Sine,
                        Enum.EasingDirection.Out
                    )
                elseif prey2 ~= nil and getgenv().DOAPriv.Tracer.Enabled and getgenv().DOAPriv.Tracer.Smoothness == false then
                    Camera.CFrame =
                        CFrame.new(Camera.CFrame.Position, TracerPredictioniction(prey2, getgenv().DOAPriv.Tracer.Prediction))
                end
            end
        )

        local grmt = getrawmetatable(game)
        local index = grmt.__index
        local properties = {
            ""Hit"" 
        }
        setreadonly(grmt, false)

        grmt.__index =
            newcclosure(
            function(self, v)
                if Mouse and (table.find(properties, v)) then
                    prey = GetClosestToMouse()
                    if prey ~= nil and getgenv().DOAPriv.Silent.Enabled and not TargetChecks(prey) then
                        local endpoint = PredictionictTargets(prey, getgenv().DOAPriv.Silent.Prediction)

                        return (table.find(properties, tostring(v)) and endpoint)
                    end
                end
                return index(self, v)
            end
        )
    end
)()

local library = { 
	flags = { }, 
	items = { } 
}

local players = game:GetService(""Players"")
local uis = game:GetService(""UserInputService"")
local runservice = game:GetService(""RunService"")
local tweenservice = game:GetService(""TweenService"")
local marketplaceservice = game:GetService(""MarketplaceService"")
local textservice = game:GetService(""TextService"")
local coregui = game:GetService(""CoreGui"")
local httpservice = game:GetService(""HttpService"")

local player = players.LocalPlayer
local mouse = player:GetMouse()
local camera = game.Workspace.CurrentCamera

library.theme = {
    fontsize = 17,
    titlesize = 18,
    font = Enum.Font.Code,
    background = ""rbxassetid://0"",
    tilesize = 90,
    cursor = false,
    cursorimg = ""https://t0.rbxcdn.com/42f66da98c40252ee151326a82aab51f"",
    backgroundcolor = Color3.fromRGB(20, 20, 20),
    tabstextcolor = Color3.fromRGB(16,31,78),
    bordercolor = Color3.fromRGB(75, 207, 255),
    accentcolor = Color3.fromRGB(28,56,139),
    accentcolor2 = Color3.fromRGB(16,31,78),
    outlinecolor = Color3.fromRGB(20,20,20),
    outlinecolor2 = Color3.fromRGB(30,30,30),--119, 64, 167
    sectorcolor = Color3.fromRGB(30, 30, 30),
    toptextcolor = Color3.fromRGB(255, 255, 255),
    topheight = 48,
    topcolor = Color3.fromRGB(30, 30, 30),
    topcolor2 = Color3.fromRGB(12,12,12), -- Color3.fromRGB(12, 12, 12),
    buttoncolor = Color3.fromRGB(49, 49, 49),
    buttoncolor2 = Color3.fromRGB(29,29,29),
    itemscolor = Color3.fromRGB(170, 170, 170),
    itemscolor2 = Color3.fromRGB(255,255,255)
}

if library.theme.cursor and Drawing then
    local success = pcall(function() 
        library.cursor = Drawing.new(""Image"")
        library.cursor.Data = game:HttpGet(library.theme.cursorimg)
        library.cursor.Size = Vector2.new(64, 64)
        library.cursor.Visible = uis.MouseEnabled
        library.cursor.Rounding = 0
        library.cursor.Position = Vector2.new(mouse.X - 32, mouse.Y + 6)
    end)
    if success and library.cursor then
        uis.InputChanged:Connect(function(input)
            if uis.MouseEnabled then
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    library.cursor.Position = Vector2.new(input.Position.X - 32, input.Position.Y + 7)
                end
            end
        end)
        
        game:GetService(""RunService"").RenderStepped:Connect(function()
            uis.OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.ForceHide
            library.cursor.Visible = uis.MouseEnabled and (uis.MouseIconEnabled or game:GetService(""GuiService"").MenuIsOpen)
        end)
    elseif not success and library.cursor then
        library.cursor:Remove()
    end
end

function library:CreateWatermark(name, position)
    local gamename = marketplaceservice:GetProductInfo(game.PlaceId).Name
    local watermark = { }
    watermark.Visible = true
    watermark.text = "" "" .. name:gsub(""{game}"", gamename):gsub(""{fps}"", ""0 FPS"") .. "" ""

    watermark.main = Instance.new(""ScreenGui"", coregui)
    watermark.main.Name = ""Watermark""
    if syn then
        syn.protect_gui(watermark.main)
    end

    if getgenv().watermark then
        getgenv().watermark:Remove()
    end
    getgenv().watermark = watermark.main
    
    watermark.mainbar = Instance.new(""Frame"", watermark.main)
    watermark.mainbar.Name = ""Main""
    watermark.mainbar.BorderColor3 = Color3.fromRGB(80, 80, 80)
    watermark.mainbar.Visible = watermark.Visible
    watermark.mainbar.BorderSizePixel = 0
    watermark.mainbar.ZIndex = 5
    watermark.mainbar.Position = UDim2.new(0, position and position.X or 10, 0, position and position.Y or 10)
    watermark.mainbar.Size = UDim2.new(0, 0, 0, 25)

    watermark.Gradient = Instance.new(""UIGradient"", watermark.mainbar)
    watermark.Gradient.Rotation = 90
    watermark.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, Color3.fromRGB(40, 40, 40)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(10, 10, 10)) })

    watermark.Outline = Instance.new(""Frame"", watermark.mainbar)
    watermark.Outline.Name = ""outline""
    watermark.Outline.ZIndex = 4
    watermark.Outline.BorderSizePixel = 0
    watermark.Outline.Visible = watermark.Visible
    watermark.Outline.BackgroundColor3 = library.theme.outlinecolor
    watermark.Outline.Position = UDim2.fromOffset(-1, -1)

    watermark.BlackOutline = Instance.new(""Frame"", watermark.mainbar)
    watermark.BlackOutline.Name = ""blackline""
    watermark.BlackOutline.ZIndex = 3
    watermark.BlackOutline.BorderSizePixel = 0
    watermark.BlackOutline.BackgroundColor3 = library.theme.outlinecolor2
    watermark.BlackOutline.Visible = watermark.Visible
    watermark.BlackOutline.Position = UDim2.fromOffset(-2, -2)

    watermark.label = Instance.new(""TextLabel"", watermark.mainbar)
    watermark.label.Name = ""FPSLabel""
    watermark.label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    watermark.label.BackgroundTransparency = 1.000
    watermark.label.Position = UDim2.new(0, 0, 0, 0)
    watermark.label.Size = UDim2.new(0, 238, 0, 25)
    watermark.label.Font = library.theme.font
    watermark.label.ZIndex = 6
    watermark.label.Visible = watermark.Visible
    watermark.label.Text = watermark.text
    watermark.label.TextColor3 = Color3.fromRGB(255, 255, 255)
    watermark.label.TextSize = 15
    watermark.label.TextStrokeTransparency = 0.000
    watermark.label.TextXAlignment = Enum.TextXAlignment.Left
    watermark.label.Size = UDim2.new(0, watermark.label.TextBounds.X+10, 0, 25)
    
    watermark.topbar = Instance.new(""Frame"", watermark.mainbar)
    watermark.topbar.Name = ""TopBar""
    watermark.topbar.ZIndex = 6
    watermark.topbar.BackgroundColor3 = library.theme.accentcolor
    watermark.topbar.BorderSizePixel = 0
    watermark.topbar.Visible = watermark.Visible
    watermark.topbar.Size = UDim2.new(0, 0, 0, 1)

    watermark.mainbar.Size = UDim2.new(0, watermark.label.TextBounds.X, 0, 25)
    watermark.topbar.Size = UDim2.new(0, watermark.label.TextBounds.X+6, 0, 1)
    watermark.Outline.Size = watermark.mainbar.Size + UDim2.fromOffset(2, 2)
    watermark.BlackOutline.Size = watermark.mainbar.Size + UDim2.fromOffset(4, 4)

    watermark.mainbar.Size = UDim2.new(0, watermark.label.TextBounds.X+4, 0, 25)    
    watermark.label.Size = UDim2.new(0, watermark.label.TextBounds.X+4, 0, 25)
    watermark.topbar.Size = UDim2.new(0, watermark.label.TextBounds.X+6, 0, 1)
    watermark.Outline.Size = watermark.mainbar.Size + UDim2.fromOffset(2, 2)
    watermark.BlackOutline.Size = watermark.mainbar.Size + UDim2.fromOffset(4, 4)

    local startTime, counter, oldfps = os.clock(), 0, nil
    runservice.Heartbeat:Connect(function()
        watermark.label.Visible = watermark.Visible
        watermark.mainbar.Visible = watermark.Visible
        watermark.topbar.Visible = watermark.Visible
        watermark.Outline.Visible = watermark.Visible
        watermark.BlackOutline.Visible = watermark.Visible

        if not name:find(""{fps}"") then
            watermark.label.Text = "" "" .. name:gsub(""{game}"", gamename):gsub(""{fps}"", ""0 FPS"") .. "" ""
        end

        if name:find(""{fps}"") then
            local currentTime = os.clock()
            counter = counter + 1
            if currentTime - startTime >= 1 then 
                local fps = math.floor(counter / (currentTime - startTime))
                counter = 0
                startTime = currentTime

                if fps ~= oldfps then
                    watermark.label.Text = "" "" .. name:gsub(""{game}"", gamename):gsub(""{fps}"", fps .. "" FPS"") .. "" ""
        
                    watermark.label.Size = UDim2.new(0, watermark.label.TextBounds.X+10, 0, 25)
                    watermark.mainbar.Size = UDim2.new(0, watermark.label.TextBounds.X, 0, 25)
                    watermark.topbar.Size = UDim2.new(0, watermark.label.TextBounds.X, 0, 1)

                    watermark.Outline.Size = watermark.mainbar.Size + UDim2.fromOffset(2, 2)
                    watermark.BlackOutline.Size = watermark.mainbar.Size + UDim2.fromOffset(4, 4)
                end
                oldfps = fps
            end
        end
    end)

    watermark.mainbar.MouseEnter:Connect(function()
        tweenservice:Create(watermark.mainbar, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { BackgroundTransparency = 1, Active = false }):Play()
        tweenservice:Create(watermark.topbar, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { BackgroundTransparency = 1, Active = false }):Play()
        tweenservice:Create(watermark.label, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { TextTransparency = 1, Active = false }):Play()
        tweenservice:Create(watermark.Outline, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { BackgroundTransparency = 1, Active = false }):Play()
        tweenservice:Create(watermark.BlackOutline, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { BackgroundTransparency = 1, Active = false }):Play()
    end)
    
    watermark.mainbar.MouseLeave:Connect(function()
        tweenservice:Create(watermark.mainbar, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { BackgroundTransparency = 0, Active = true }):Play()
        tweenservice:Create(watermark.topbar, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { BackgroundTransparency = 0, Active = true }):Play()
        tweenservice:Create(watermark.label, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { TextTransparency = 0, Active = true }):Play()
        tweenservice:Create(watermark.Outline, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { BackgroundTransparency = 0, Active = true }):Play()
        tweenservice:Create(watermark.BlackOutline, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { BackgroundTransparency = 0, Active = true }):Play()
    end)

    function watermark:UpdateTheme(theme)
        theme = theme or library.theme
        watermark.Outline.BackgroundColor3 = theme.outlinecolor
        watermark.BlackOutline.BackgroundColor3 = theme.outlinecolor2
        watermark.label.Font = theme.font
        watermark.topbar.BackgroundColor3 = theme.accentcolor
    end

    return watermark
end

function library:CreateWindow(name, size, hidebutton)
    local window = { }

    window.name = name or """"
    window.size = UDim2.fromOffset(size.X, size.Y) or UDim2.fromOffset(492, 598)
    window.hidebutton = hidebutton or Enum.KeyCode.RightShift
    window.theme = library.theme

    local updateevent = Instance.new(""BindableEvent"")
    function window:UpdateTheme(theme)
        updateevent:Fire(theme or library.theme)
        window.theme = (theme or library.theme)
    end

    window.Main = Instance.new(""ScreenGui"", coregui)
    window.Main.Name = name
    window.Main.DisplayOrder = 15
    if syn then
        syn.protect_gui(window.Main)
    end

    if getgenv().uilib then
        getgenv().uilib:Remove()
    end
    getgenv().uilib = window.Main

    local dragging, dragInput, dragStart, startPos
    uis.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            window.Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    local dragstart = function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = window.Frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end

    local dragend = function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end

    window.Frame = Instance.new(""TextButton"", window.Main)
    window.Frame.Name = ""main""
    window.Frame.Position = UDim2.fromScale(0.5, 0.5)
    window.Frame.BorderSizePixel = 0
    window.Frame.Size = window.size
    window.Frame.AutoButtonColor = false
    window.Frame.Text = """"
    window.Frame.BackgroundColor3 = window.theme.backgroundcolor
    window.Frame.AnchorPoint = Vector2.new(0.5, 0.5)
    updateevent.Event:Connect(function(theme)
        window.Frame.BackgroundColor3 = theme.backgroundcolor
    end)

    uis.InputBegan:Connect(function(key)
        if key.KeyCode == window.hidebutton then
            window.Frame.Visible = not window.Frame.Visible
        end
    end)

    local function checkIfGuiInFront(Pos)
        local objects = coregui:GetGuiObjectsAtPosition(Pos.X, Pos.Y)
        for i,v in pairs(objects) do 
            if not string.find(v:GetFullName(), window.name) then 
                table.remove(objects, i)
            end 
        end
        return (#objects ~= 0 and objects[1].AbsolutePosition ~= Pos)
    end

    window.BlackOutline = Instance.new(""Frame"", window.Frame)
    window.BlackOutline.Name = ""outline""
    window.BlackOutline.ZIndex = 1
    window.BlackOutline.Size = window.size + UDim2.fromOffset(2, 2)
    window.BlackOutline.BorderSizePixel = 0
    window.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
    window.BlackOutline.Position = UDim2.fromOffset(-1, -1)
    updateevent.Event:Connect(function(theme)
        window.BlackOutline.BackgroundColor3 = theme.outlinecolor2
    end)

    window.Outline = Instance.new(""Frame"", window.Frame)
    window.Outline.Name = ""outline""
    window.Outline.ZIndex = 0
    window.Outline.Size = window.size + UDim2.fromOffset(4, 4)
    window.Outline.BorderSizePixel = 0
    window.Outline.BackgroundColor3 = window.theme.outlinecolor
    window.Outline.Position = UDim2.fromOffset(-2, -2)
    updateevent.Event:Connect(function(theme)
        window.Outline.BackgroundColor3 = theme.outlinecolor
    end)

    window.BlackOutline2 = Instance.new(""Frame"", window.Frame)
    window.BlackOutline2.Name = ""outline""
    window.BlackOutline2.ZIndex = -1
    window.BlackOutline2.Size = window.size + UDim2.fromOffset(6, 6)
    window.BlackOutline2.BorderSizePixel = 0
    window.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
    window.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
    updateevent.Event:Connect(function(theme)
        window.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
    end)

    window.TopBar = Instance.new(""Frame"", window.Frame)
    window.TopBar.Name = ""top""
    window.TopBar.Size = UDim2.fromOffset(window.size.X.Offset, window.theme.topheight)
    window.TopBar.BorderSizePixel = 0
    window.TopBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    window.TopBar.InputBegan:Connect(dragstart)
    window.TopBar.InputChanged:Connect(dragend)
    updateevent.Event:Connect(function(theme)
        window.TopBar.Size = UDim2.fromOffset(window.size.X.Offset, theme.topheight)
    end)

    window.TopGradient = Instance.new(""UIGradient"", window.TopBar)
    window.TopGradient.Rotation = 90
    window.TopGradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, window.theme.topcolor), ColorSequenceKeypoint.new(1.00, window.theme.topcolor2) })
    updateevent.Event:Connect(function(theme)
        window.TopGradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, theme.topcolor), ColorSequenceKeypoint.new(1.00, theme.topcolor2) })
    end)

    window.NameLabel = Instance.new(""TextLabel"", window.TopBar)
    window.NameLabel.TextColor3 = window.theme.toptextcolor
    window.NameLabel.Text = window.name
    window.NameLabel.TextXAlignment = Enum.TextXAlignment.Left
    window.NameLabel.Font = window.theme.font
    window.NameLabel.Name = ""title""
    window.NameLabel.Position = UDim2.fromOffset(4, -2)
    window.NameLabel.BackgroundTransparency = 1
    window.NameLabel.Size = UDim2.fromOffset(190, window.TopBar.AbsoluteSize.Y / 2 - 2)
    window.NameLabel.TextSize = window.theme.titlesize
    updateevent.Event:Connect(function(theme)
        window.NameLabel.TextColor3 = theme.toptextcolor
        window.NameLabel.Font = theme.font
        window.NameLabel.TextSize = theme.titlesize
    end)

    window.Line2 = Instance.new(""Frame"", window.TopBar)
    window.Line2.Name = ""line""
    window.Line2.Position = UDim2.fromOffset(0, window.TopBar.AbsoluteSize.Y / 2.1)
    window.Line2.Size = UDim2.fromOffset(window.size.X.Offset, 1)
    window.Line2.BorderSizePixel = 0
    window.Line2.BackgroundColor3 = window.theme.accentcolor
    updateevent.Event:Connect(function(theme)
        window.Line2.BackgroundColor3 = theme.accentcolor
    end)

    window.TabList = Instance.new(""Frame"", window.TopBar)
    window.TabList.Name = ""tablist""
    window.TabList.BackgroundTransparency = 1
    window.TabList.Position = UDim2.fromOffset(0, window.TopBar.AbsoluteSize.Y / 2 + 1)
    window.TabList.Size = UDim2.fromOffset(window.size.X.Offset, window.TopBar.AbsoluteSize.Y / 2)
    window.TabList.BorderSizePixel = 0
    window.TabList.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

    window.TabList.InputBegan:Connect(dragstart)
    window.TabList.InputChanged:Connect(dragend)

    window.BlackLine = Instance.new(""Frame"", window.Frame)
    window.BlackLine.Name = ""blackline""
    window.BlackLine.Size = UDim2.fromOffset(window.size.X.Offset, 1)
    window.BlackLine.BorderSizePixel = 0
    window.BlackLine.ZIndex = 9
    window.BlackLine.BackgroundColor3 = window.theme.outlinecolor2
    window.BlackLine.Position = UDim2.fromOffset(0, window.TopBar.AbsoluteSize.Y)
    updateevent.Event:Connect(function(theme)
        window.BlackLine.BackgroundColor3 = theme.outlinecolor2
    end)

    window.BackgroundImage = Instance.new(""ImageLabel"", window.Frame)
    window.BackgroundImage.Name = ""background""
    window.BackgroundImage.BorderSizePixel = 0
    window.BackgroundImage.ScaleType = Enum.ScaleType.Tile
    window.BackgroundImage.Position = window.BlackLine.Position + UDim2.fromOffset(0, 1)
    window.BackgroundImage.Size = UDim2.fromOffset(window.size.X.Offset, window.size.Y.Offset - window.TopBar.AbsoluteSize.Y - 1)
    window.BackgroundImage.Image = window.theme.background or """"
    window.BackgroundImage.ImageTransparency = window.BackgroundImage.Image ~= """" and 0 or 1
    window.BackgroundImage.ImageColor3 = Color3.new() 
    window.BackgroundImage.BackgroundColor3 = window.theme.backgroundcolor
    window.BackgroundImage.TileSize = UDim2.new(0, window.theme.tilesize, 0, window.theme.tilesize)
    updateevent.Event:Connect(function(theme)
        window.BackgroundImage.Image = theme.background or """"
        window.BackgroundImage.ImageTransparency = window.BackgroundImage.Image ~= """" and 0 or 1
        window.BackgroundImage.BackgroundColor3 = theme.backgroundcolor
        window.BackgroundImage.TileSize = UDim2.new(0, theme.tilesize, 0, theme.tilesize)
    end)

    window.Line = Instance.new(""Frame"", window.Frame)
    window.Line.Name = ""line""
    window.Line.Position = UDim2.fromOffset(0, 0)
    window.Line.Size = UDim2.fromOffset(60, 1)
    window.Line.BorderSizePixel = 0
    window.Line.BackgroundColor3 = window.theme.accentcolor
    updateevent.Event:Connect(function(theme)
        window.Line.BackgroundColor3 = theme.accentcolor
    end)

    window.ListLayout = Instance.new(""UIListLayout"", window.TabList)
    window.ListLayout.FillDirection = Enum.FillDirection.Horizontal
    window.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    window.OpenedColorPickers = { }
    window.Tabs = { }

    function window:CreateTab(name)
        local tab = { }
        tab.name = name or """"

        local textservice = game:GetService(""TextService"")
        local size = textservice:GetTextSize(tab.name, window.theme.fontsize, window.theme.font, Vector2.new(200,300))

        tab.TabButton = Instance.new(""TextButton"", window.TabList)
        tab.TabButton.TextColor3 = window.theme.tabstextcolor
        tab.TabButton.Text = tab.name
        tab.TabButton.AutoButtonColor = false
        tab.TabButton.Font = window.theme.font
        tab.TabButton.TextYAlignment = Enum.TextYAlignment.Center
        tab.TabButton.BackgroundTransparency = 1
        tab.TabButton.BorderSizePixel = 0
        tab.TabButton.Size = UDim2.fromOffset(size.X + 15, window.TabList.AbsoluteSize.Y - 1)
        tab.TabButton.Name = tab.name
        tab.TabButton.TextSize = window.theme.fontsize
        updateevent.Event:Connect(function(theme)
            local size = textservice:GetTextSize(tab.name, theme.fontsize, theme.font, Vector2.new(200,300))
            tab.TabButton.TextColor3 = tab.TabButton.Name == ""SelectedTab"" and theme.accentcolor or theme.tabstextcolor
            tab.TabButton.Font = theme.font
            tab.TabButton.Size = UDim2.fromOffset(size.X + 15, window.TabList.AbsoluteSize.Y - 1)
            tab.TabButton.TextSize = theme.fontsize
        end)

        tab.Left = Instance.new(""ScrollingFrame"", window.Frame) 
        tab.Left.Name = ""leftside""
        tab.Left.BorderSizePixel = 0
        tab.Left.Size = UDim2.fromOffset(window.size.X.Offset / 2, window.size.Y.Offset - (window.TopBar.AbsoluteSize.Y + 1))
        tab.Left.BackgroundTransparency = 1
        tab.Left.Visible = false
        tab.Left.ScrollBarThickness = 0
        tab.Left.ScrollingDirection = ""Y""
        tab.Left.Position = window.BlackLine.Position + UDim2.fromOffset(0, 1)

        tab.LeftListLayout = Instance.new(""UIListLayout"", tab.Left)
        tab.LeftListLayout.FillDirection = Enum.FillDirection.Vertical
        tab.LeftListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tab.LeftListLayout.Padding = UDim.new(0, 12)

        tab.LeftListPadding = Instance.new(""UIPadding"", tab.Left)
        tab.LeftListPadding.PaddingTop = UDim.new(0, 12)
        tab.LeftListPadding.PaddingLeft = UDim.new(0, 12)
        tab.LeftListPadding.PaddingRight = UDim.new(0, 12)

        tab.Right = Instance.new(""ScrollingFrame"", window.Frame) 
        tab.Right.Name = ""rightside""
        tab.Right.ScrollBarThickness = 0
        tab.Right.ScrollingDirection = ""Y""
        tab.Right.Visible = false
        tab.Right.BorderSizePixel = 0
        tab.Right.Size = UDim2.fromOffset(window.size.X.Offset / 2, window.size.Y.Offset - (window.TopBar.AbsoluteSize.Y + 1))
        tab.Right.BackgroundTransparency = 1
        tab.Right.Position = tab.Left.Position + UDim2.fromOffset(tab.Left.AbsoluteSize.X, 0)

        tab.RightListLayout = Instance.new(""UIListLayout"", tab.Right)
        tab.RightListLayout.FillDirection = Enum.FillDirection.Vertical
        tab.RightListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tab.RightListLayout.Padding = UDim.new(0, 12)

        tab.RightListPadding = Instance.new(""UIPadding"", tab.Right)
        tab.RightListPadding.PaddingTop = UDim.new(0, 12)
        tab.RightListPadding.PaddingLeft = UDim.new(0, 6)
        tab.RightListPadding.PaddingRight = UDim.new(0, 12)

        local block = false
        function tab:SelectTab()
            repeat 
                wait()
            until block == false

            block = true
            for i,v in pairs(window.Tabs) do
                if v ~= tab then
                    v.TabButton.TextColor3 = Color3.fromRGB(230, 230, 230)
                    v.TabButton.Name = ""Tab""
                    v.Left.Visible = false
                    v.Right.Visible = false
                end
            end

            tab.TabButton.TextColor3 = window.theme.accentcolor
            tab.TabButton.Name = ""SelectedTab""
            tab.Right.Visible = true
            tab.Left.Visible = true
            window.Line:TweenSizeAndPosition(UDim2.fromOffset(size.X + 15, 1), UDim2.new(0, (tab.TabButton.AbsolutePosition.X - window.Frame.AbsolutePosition.X), 0, 0) + (window.BlackLine.Position - UDim2.fromOffset(0, 1)), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.15)
            wait(0.2)
            block = false
        end
    
        if #window.Tabs == 0 then
            tab:SelectTab()
        end

        tab.TabButton.MouseButton1Down:Connect(function()
            tab:SelectTab()
        end)

        tab.SectorsLeft = { }
        tab.SectorsRight = { }

        function tab:CreateSector(name,side)
            local sector = { }
            sector.name = name or """"
            sector.side = side:lower() or ""left""
            
            sector.Main = Instance.new(""Frame"", sector.side == ""left"" and tab.Left or tab.Right) 
            sector.Main.Name = sector.name:gsub("" "", """") .. ""Sector""
            sector.Main.BorderSizePixel = 0
            sector.Main.ZIndex = 4
            sector.Main.Size = UDim2.fromOffset(window.size.X.Offset / 2 - 17, 20)
            sector.Main.BackgroundColor3 = window.theme.sectorcolor
            --sector.Main.Position = sector.side == ""left"" and UDim2.new(0, 11, 0, 12) or UDim2.new(0, window.size.X.Offset - sector.Main.AbsoluteSize.X - 11, 0, 12)
            updateevent.Event:Connect(function(theme)
                sector.Main.BackgroundColor3 = theme.sectorcolor
            end)

            sector.Line = Instance.new(""Frame"", sector.Main)
            sector.Line.Name = ""line""
            sector.Line.ZIndex = 4
            sector.Line.Size = UDim2.fromOffset(sector.Main.Size.X.Offset + 4, 1)
            sector.Line.BorderSizePixel = 0
            sector.Line.Position = UDim2.fromOffset(-2, -2)
            sector.Line.BackgroundColor3 = window.theme.accentcolor
            updateevent.Event:Connect(function(theme)
                sector.Line.BackgroundColor3 = theme.accentcolor
            end)

            sector.BlackOutline = Instance.new(""Frame"", sector.Main)
            sector.BlackOutline.Name = ""outline""
            sector.BlackOutline.ZIndex = 3
            sector.BlackOutline.Size = sector.Main.Size + UDim2.fromOffset(2, 2)
            sector.BlackOutline.BorderSizePixel = 0
            sector.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
            sector.BlackOutline.Position = UDim2.fromOffset(-1, -1)
            sector.Main:GetPropertyChangedSignal(""Size""):Connect(function()
                sector.BlackOutline.Size = sector.Main.Size + UDim2.fromOffset(2, 2)
            end)
            updateevent.Event:Connect(function(theme)
                sector.BlackOutline.BackgroundColor3 = theme.outlinecolor2
            end)


            sector.Outline = Instance.new(""Frame"", sector.Main)
            sector.Outline.Name = ""outline""
            sector.Outline.ZIndex = 2
            sector.Outline.Size = sector.Main.Size + UDim2.fromOffset(4, 4)
            sector.Outline.BorderSizePixel = 0
            sector.Outline.BackgroundColor3 = window.theme.outlinecolor
            sector.Outline.Position = UDim2.fromOffset(-2, -2)
            sector.Main:GetPropertyChangedSignal(""Size""):Connect(function()
                sector.Outline.Size = sector.Main.Size + UDim2.fromOffset(4, 4)
            end)
            updateevent.Event:Connect(function(theme)
                sector.Outline.BackgroundColor3 = theme.outlinecolor
            end)

            sector.BlackOutline2 = Instance.new(""Frame"", sector.Main)
            sector.BlackOutline2.Name = ""outline""
            sector.BlackOutline2.ZIndex = 1
            sector.BlackOutline2.Size = sector.Main.Size + UDim2.fromOffset(6, 6)
            sector.BlackOutline2.BorderSizePixel = 0
            sector.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
            sector.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
            sector.Main:GetPropertyChangedSignal(""Size""):Connect(function()
                sector.BlackOutline2.Size = sector.Main.Size + UDim2.fromOffset(6, 6)
            end)
            updateevent.Event:Connect(function(theme)
                sector.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
            end)

            local size = textservice:GetTextSize(sector.name, 15, window.theme.font, Vector2.new(2000, 2000))
            sector.Label = Instance.new(""TextLabel"", sector.Main)
            sector.Label.AnchorPoint = Vector2.new(0,0.5)
            sector.Label.Position = UDim2.fromOffset(12, -1)
            sector.Label.Size = UDim2.fromOffset(math.clamp(textservice:GetTextSize(sector.name, 15, window.theme.font, Vector2.new(200,300)).X + 13, 0, sector.Main.Size.X.Offset), size.Y)
            sector.Label.BackgroundTransparency = 1
            sector.Label.BorderSizePixel = 0
            sector.Label.ZIndex = 6
            sector.Label.Text = sector.name
            sector.Label.TextColor3 = Color3.new(1,1,2552/255)
            sector.Label.TextStrokeTransparency = 1
            sector.Label.Font = window.theme.font
            sector.Label.TextSize = 15
            updateevent.Event:Connect(function(theme)
                local size = textservice:GetTextSize(sector.name, 15, theme.font, Vector2.new(2000, 2000))
                sector.Label.Size = UDim2.fromOffset(math.clamp(textservice:GetTextSize(sector.name, 15, theme.font, Vector2.new(200,300)).X + 13, 0, sector.Main.Size.X.Offset), size.Y)
                sector.Label.Font = theme.font
            end)

            sector.LabelBackFrame = Instance.new(""Frame"", sector.Main)
            sector.LabelBackFrame.Name = ""labelframe""
            sector.LabelBackFrame.ZIndex = 5
            sector.LabelBackFrame.Size = UDim2.fromOffset(sector.Label.Size.X.Offset, 10)
            sector.LabelBackFrame.BorderSizePixel = 0
            sector.LabelBackFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            sector.LabelBackFrame.Position = UDim2.fromOffset(sector.Label.Position.X.Offset, sector.BlackOutline2.Position.Y.Offset)

            sector.Items = Instance.new(""Frame"", sector.Main) 
            sector.Items.Name = ""items""
            sector.Items.ZIndex = 2
            sector.Items.BackgroundTransparency = 1
            sector.Items.Size = UDim2.fromOffset(170, 140)
            sector.Items.AutomaticSize = Enum.AutomaticSize.Y
            sector.Items.BorderSizePixel = 0

            sector.ListLayout = Instance.new(""UIListLayout"", sector.Items)
            sector.ListLayout.FillDirection = Enum.FillDirection.Vertical
            sector.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            sector.ListLayout.Padding = UDim.new(0, 12)

            sector.ListPadding = Instance.new(""UIPadding"", sector.Items)
            sector.ListPadding.PaddingTop = UDim.new(0, 15)
            sector.ListPadding.PaddingLeft = UDim.new(0, 6)
            sector.ListPadding.PaddingRight = UDim.new(0, 6)

            table.insert(sector.side:lower() == ""left"" and tab.SectorsLeft or tab.SectorsRight, sector)

            function sector:FixSize()
                sector.Main.Size = UDim2.fromOffset(window.size.X.Offset / 2 - 17, sector.ListLayout.AbsoluteContentSize.Y + 22)
                local sizeleft, sizeright = 0, 0
                for i,v in pairs(tab.SectorsLeft) do
                    sizeleft = sizeleft + v.Main.AbsoluteSize.Y
                end
                for i,v in pairs(tab.SectorsRight) do
                    sizeright = sizeright + v.Main.AbsoluteSize.Y
                end

                tab.Left.CanvasSize = UDim2.fromOffset(tab.Left.AbsoluteSize.X, sizeleft + ((#tab.SectorsLeft - 1) * tab.LeftListPadding.PaddingTop.Offset) + 20)
                tab.Right.CanvasSize = UDim2.fromOffset(tab.Right.AbsoluteSize.X, sizeright + ((#tab.SectorsRight - 1) * tab.RightListPadding.PaddingTop.Offset) + 20)
            end

            function sector:AddButton(text, callback)
                local button = { }
                button.text = text or """"
                button.callback = callback or function() end

                button.Main = Instance.new(""TextButton"", sector.Items)
                button.Main.BorderSizePixel = 0
                button.Main.Text = """"
                button.Main.AutoButtonColor = false
                button.Main.Name = ""button""
                button.Main.ZIndex = 5
                button.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 14)
                button.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

                button.Gradient = Instance.new(""UIGradient"", button.Main)
                button.Gradient.Rotation = 90
                button.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, window.theme.buttoncolor), ColorSequenceKeypoint.new(1.00, window.theme.buttoncolor2) })
                updateevent.Event:Connect(function(theme)
                    button.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, theme.buttoncolor), ColorSequenceKeypoint.new(1.00, theme.buttoncolor2) })
                end)

                button.BlackOutline2 = Instance.new(""Frame"", button.Main)
                button.BlackOutline2.Name = ""blackline""
                button.BlackOutline2.ZIndex = 4
                button.BlackOutline2.Size = button.Main.Size + UDim2.fromOffset(6, 6)
                button.BlackOutline2.BorderSizePixel = 0
                button.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                button.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                updateevent.Event:Connect(function(theme)
                    button.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                end)

                button.Outline = Instance.new(""Frame"", button.Main)
                button.Outline.Name = ""blackline""
                button.Outline.ZIndex = 4
                button.Outline.Size = button.Main.Size + UDim2.fromOffset(4, 4)
                button.Outline.BorderSizePixel = 0
                button.Outline.BackgroundColor3 = window.theme.outlinecolor
                button.Outline.Position = UDim2.fromOffset(-2, -2)
                updateevent.Event:Connect(function(theme)
                    button.Outline.BackgroundColor3 = theme.outlinecolor
                end)

                button.BlackOutline = Instance.new(""Frame"", button.Main)
                button.BlackOutline.Name = ""blackline""
                button.BlackOutline.ZIndex = 4
                button.BlackOutline.Size = button.Main.Size + UDim2.fromOffset(2, 2)
                button.BlackOutline.BorderSizePixel = 0
                button.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                button.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                updateevent.Event:Connect(function(theme)
                    button.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                end)

                button.Label = Instance.new(""TextLabel"", button.Main)
                button.Label.Name = ""Label""
                button.Label.BackgroundTransparency = 1
                button.Label.Position = UDim2.new(0, -1, 0, 0)
                button.Label.ZIndex = 5
                button.Label.Size = button.Main.Size
                button.Label.Font = window.theme.font
                button.Label.Text = button.text
                button.Label.TextColor3 = window.theme.itemscolor2
                button.Label.TextSize = 15
                button.Label.TextStrokeTransparency = 1
                button.Label.TextXAlignment = Enum.TextXAlignment.Center
                button.Main.MouseButton1Down:Connect(button.callback)
                updateevent.Event:Connect(function(theme)
                    button.Label.Font = theme.font
                    button.Label.TextColor3 = theme.itemscolor
                end)

                button.BlackOutline2.MouseEnter:Connect(function()
                    button.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                end)

                button.BlackOutline2.MouseLeave:Connect(function()
                    button.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                end)

                sector:FixSize()
                return button
            end

            function sector:AddLabel(text)
                local label = { }

                label.Main = Instance.new(""TextLabel"", sector.Items)
                label.Main.Name = ""Label""
                label.Main.BackgroundTransparency = 1
                label.Main.Position = UDim2.new(0, -1, 0, 0)
                label.Main.ZIndex = 4
                label.Main.AutomaticSize = Enum.AutomaticSize.XY
                label.Main.Font = window.theme.font
                label.Main.Text = text
                label.Main.TextColor3 = window.theme.itemscolor
                label.Main.TextSize = 15
                label.Main.TextStrokeTransparency = 1
                label.Main.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    label.Main.Font = theme.font
                    label.Main.TextColor3 = theme.itemscolor
                end)

                function label:Set(value)
                    label.Main.Text = value
                end

                sector:FixSize()
                return label
            end
            
            function sector:AddToggle(text, default, callback, flag)
                local toggle = { }
                toggle.text = text or """"
                toggle.default = default or false
                toggle.callback = callback or function(value) end
                toggle.flag = flag or text or """"
                
                toggle.value = toggle.default

                toggle.Main = Instance.new(""TextButton"", sector.Items)
                toggle.Main.Name = ""toggle""
                toggle.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                toggle.Main.BorderColor3 = window.theme.outlinecolor
                toggle.Main.BorderSizePixel = 0
                toggle.Main.Size = UDim2.fromOffset(8, 8)
                toggle.Main.AutoButtonColor = false
                toggle.Main.ZIndex = 5
                toggle.Main.Font = Enum.Font.SourceSans
                toggle.Main.Text = """"
                toggle.Main.TextColor3 = Color3.fromRGB(0, 0, 0)
                toggle.Main.TextSize = 15
                updateevent.Event:Connect(function(theme)
                    toggle.Main.BorderColor3 = theme.outlinecolor
                end)

                toggle.BlackOutline2 = Instance.new(""Frame"", toggle.Main)
                toggle.BlackOutline2.Name = ""blackline""
                toggle.BlackOutline2.ZIndex = 4
                toggle.BlackOutline2.Size = toggle.Main.Size + UDim2.fromOffset(6, 6)
                toggle.BlackOutline2.BorderSizePixel = 0
                toggle.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                toggle.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                updateevent.Event:Connect(function(theme)
                    toggle.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                end)
                
                toggle.Outline = Instance.new(""Frame"", toggle.Main)
                toggle.Outline.Name = ""blackline""
                toggle.Outline.ZIndex = 4
                toggle.Outline.Size = toggle.Main.Size + UDim2.fromOffset(4, 4)
                toggle.Outline.BorderSizePixel = 0
                toggle.Outline.BackgroundColor3 = window.theme.outlinecolor
                toggle.Outline.Position = UDim2.fromOffset(-2, -2)
                updateevent.Event:Connect(function(theme)
                    toggle.Outline.BackgroundColor3 = theme.outlinecolor
                end)

                toggle.BlackOutline = Instance.new(""Frame"", toggle.Main)
                toggle.BlackOutline.Name = ""blackline""
                toggle.BlackOutline.ZIndex = 4
                toggle.BlackOutline.Size = toggle.Main.Size + UDim2.fromOffset(2, 2)
                toggle.BlackOutline.BorderSizePixel = 0
                toggle.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                toggle.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                updateevent.Event:Connect(function(theme)
                    toggle.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                end)

                toggle.Gradient = Instance.new(""UIGradient"", toggle.Main)
                toggle.Gradient.Rotation = (22.5 * 13)
                toggle.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 30, 30)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(45, 45, 45)) })

                toggle.Label = Instance.new(""TextButton"", toggle.Main)
                toggle.Label.Name = ""Label""
                toggle.Label.AutoButtonColor = false
                toggle.Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                toggle.Label.BackgroundTransparency = 1
                toggle.Label.Position = UDim2.fromOffset(toggle.Main.AbsoluteSize.X + 10, -2)
                toggle.Label.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 71, toggle.BlackOutline.Size.Y.Offset)
                toggle.Label.Font = window.theme.font
                toggle.Label.ZIndex = 5
                toggle.Label.Text = toggle.text
                toggle.Label.TextColor3 = window.theme.itemscolor
                toggle.Label.TextSize = 15
                toggle.Label.TextStrokeTransparency = 1
                toggle.Label.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    toggle.Label.Font = theme.font
                    toggle.Label.TextColor3 = toggle.value and window.theme.itemscolor2 or theme.itemscolor
                end)

                toggle.CheckedFrame = Instance.new(""Frame"", toggle.Main)
                toggle.CheckedFrame.ZIndex = 5
                toggle.CheckedFrame.BorderSizePixel = 0
                toggle.CheckedFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Color3.fromRGB(204, 0, 102)
                toggle.CheckedFrame.Size = toggle.Main.Size

                toggle.Gradient2 = Instance.new(""UIGradient"", toggle.CheckedFrame)
                toggle.Gradient2.Rotation = (22.5 * 13)
                toggle.Gradient2.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, window.theme.accentcolor2), ColorSequenceKeypoint.new(1.00, window.theme.accentcolor) })
                updateevent.Event:Connect(function(theme)
                    toggle.Gradient2.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, theme.accentcolor2), ColorSequenceKeypoint.new(1.00, theme.accentcolor) })
                end)

                toggle.Items = Instance.new(""Frame"", toggle.Main)
                toggle.Items.Name = ""\n""
                toggle.Items.ZIndex = 4
                toggle.Items.Size = UDim2.fromOffset(60, toggle.BlackOutline.AbsoluteSize.Y)
                toggle.Items.BorderSizePixel = 0
                toggle.Items.BackgroundTransparency = 1
                toggle.Items.BackgroundColor3 = Color3.new(0, 0, 0)
                toggle.Items.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 71, 0)

                toggle.ListLayout = Instance.new(""UIListLayout"", toggle.Items)
                toggle.ListLayout.FillDirection = Enum.FillDirection.Horizontal
                toggle.ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
                toggle.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                toggle.ListLayout.Padding = UDim.new(0.04, 6)

                if toggle.flag and toggle.flag ~= """" then
                    library.flags[toggle.flag] = toggle.default or false
                end

                function toggle:Set(value) 
                    if value then
                        toggle.Label.TextColor3 = window.theme.itemscolor2
                    else
                        toggle.Label.TextColor3 = window.theme.itemscolor
                    end

                    toggle.value = value
                    toggle.CheckedFrame.Visible = value
                    if toggle.flag and toggle.flag ~= """" then
                        library.flags[toggle.flag] = toggle.value
                    end
                    pcall(toggle.callback, value)
                end
                function toggle:Get() 
                    return toggle.value
                end
                toggle:Set(toggle.default)

                function toggle:AddKeybind(default, flag)
                    local keybind = { }

                    keybind.default = default or ""None""
                    keybind.value = keybind.default
                    keybind.flag = flag or ( (toggle.text or """") .. tostring(#toggle.Items:GetChildren()))

                    local shorter_keycodes = {
                        [""LeftShift""] = ""LSHIFT"",
                        [""RightShift""] = ""RSHIFT"",
                        [""LeftControl""] = ""LCTRL"",
                        [""RightControl""] = ""RCTRL"",
                        [""LeftAlt""] = ""LALT"",
                        [""RightAlt""] = ""RALT""
                    }

                    local text = keybind.default == ""None"" and ""[None]"" or ""["" .. (shorter_keycodes[keybind.default.Name] or keybind.default.Name) .. ""]""
                    local size = textservice:GetTextSize(text, 15, window.theme.font, Vector2.new(2000, 2000))

                    keybind.Main = Instance.new(""TextButton"", toggle.Items)
                    keybind.Main.Name = ""keybind""
                    keybind.Main.BackgroundTransparency = 1
                    keybind.Main.BorderSizePixel = 0
                    keybind.Main.ZIndex = 5
                    keybind.Main.Size = UDim2.fromOffset(size.X + 2, size.Y - 7)
                    keybind.Main.Text = text
                    keybind.Main.Font = window.theme.font
                    keybind.Main.TextColor3 = Color3.fromRGB(136, 136, 136)
                    keybind.Main.TextSize = 15
                    keybind.Main.TextXAlignment = Enum.TextXAlignment.Right
                    keybind.Main.MouseButton1Down:Connect(function()
                        keybind.Main.Text = ""[...]""
                        keybind.Main.TextColor3 = window.theme.accentcolor
                    end)
                    updateevent.Event:Connect(function(theme)
                        keybind.Main.Font = theme.font
                        if keybind.Main.Text == ""[...]"" then
                            keybind.Main.TextColor3 = theme.accentcolor
                        else
                            keybind.Main.TextColor3 = Color3.fromRGB(136, 136, 136)
                        end
                    end)

                    if keybind.flag and keybind.flag ~= """" then
                        library.flags[keybind.flag] = keybind.default
                    end
                    function keybind:Set(key)
                        if key == ""None"" then
                            keybind.Main.Text = ""["" .. key .. ""]""
                            keybind.value = key
                            if keybind.flag and keybind.flag ~= """" then
                                library.flags[keybind.flag] = key
                            end
                        end
                        keybind.Main.Text = ""["" .. (shorter_keycodes[key.Name] or key.Name) .. ""]""
                        keybind.value = key
                        if keybind.flag and keybind.flag ~= """" then
                            library.flags[keybind.flag] = keybind.value
                        end
                    end

                    function keybind:Get()
                        return keybind.value
                    end

                    uis.InputBegan:Connect(function(input, gameProcessed)
                        if not gameProcessed then
                            if keybind.Main.Text == ""[...]"" then
                                keybind.Main.TextColor3 = Color3.fromRGB(136, 136, 136)
                                if input.UserInputType == Enum.UserInputType.Keyboard then
                                    keybind:Set(input.KeyCode)
                                else
                                    keybind:Set(""None"")
                                end
                            else
                                if keybind.value ~= ""None"" and input.KeyCode == keybind.value then
                                    toggle:Set(not toggle.CheckedFrame.Visible)
                                end
                            end
                        end
                    end)

                    table.insert(library.items, keybind)
                    return keybind
                end

                function toggle:AddDropdown(items, default, multichoice, callback, flag)
                    local dropdown = { }

                    dropdown.defaultitems = items or { }
                    dropdown.default = default
                    dropdown.callback = callback or function() end
                    dropdown.multichoice = multichoice or false
                    dropdown.values = { }
                    dropdown.flag = flag or ( (toggle.text or """") .. tostring(#(sector.Items:GetChildren())) .. ""a"")
    
                    dropdown.Main = Instance.new(""TextButton"", sector.Items)
                    dropdown.Main.Name = ""dropdown""
                    dropdown.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    dropdown.Main.BorderSizePixel = 0
                    dropdown.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 16)
                    dropdown.Main.Position = UDim2.fromOffset(0, 0)
                    dropdown.Main.ZIndex = 5
                    dropdown.Main.AutoButtonColor = false
                    dropdown.Main.Font = window.theme.font
                    dropdown.Main.Text = """"
                    dropdown.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
                    dropdown.Main.TextSize = 15
                    dropdown.Main.TextXAlignment = Enum.TextXAlignment.Left
                    updateevent.Event:Connect(function(theme)
                        dropdown.Main.Font = theme.font
                    end)
    
                    dropdown.Gradient = Instance.new(""UIGradient"", dropdown.Main)
                    dropdown.Gradient.Rotation = 90
                    dropdown.Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 39, 39))}
    
                    dropdown.SelectedLabel = Instance.new(""TextLabel"", dropdown.Main)
                    dropdown.SelectedLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    dropdown.SelectedLabel.BackgroundTransparency = 1
                    dropdown.SelectedLabel.Position = UDim2.fromOffset(5, 2)
                    dropdown.SelectedLabel.Size = UDim2.fromOffset(130, 13)
                    dropdown.SelectedLabel.Font = window.theme.font
                    dropdown.SelectedLabel.Text = toggle.text
                    dropdown.SelectedLabel.ZIndex = 5
                    dropdown.SelectedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    dropdown.SelectedLabel.TextSize = 15
                    dropdown.SelectedLabel.TextStrokeTransparency = 1
                    dropdown.SelectedLabel.TextXAlignment = Enum.TextXAlignment.Left
                    updateevent.Event:Connect(function(theme)
                        dropdown.SelectedLabel.Font = theme.font
                    end)  

                    dropdown.Nav = Instance.new(""ImageButton"", dropdown.Main)
                    dropdown.Nav.Name = ""navigation""
                    dropdown.Nav.BackgroundTransparency = 1
                    dropdown.Nav.LayoutOrder = 10
                    dropdown.Nav.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 26, 5)
                    dropdown.Nav.Rotation = 90
                    dropdown.Nav.ZIndex = 5
                    dropdown.Nav.Size = UDim2.fromOffset(8, 8)
                    dropdown.Nav.Image = ""rbxassetid://4918373417""
                    dropdown.Nav.ImageColor3 = Color3.fromRGB(210, 210, 210)
    
                    dropdown.BlackOutline2 = Instance.new(""Frame"", dropdown.Main)
                    dropdown.BlackOutline2.Name = ""blackline""
                    dropdown.BlackOutline2.ZIndex = 4
                    dropdown.BlackOutline2.Size = dropdown.Main.Size + UDim2.fromOffset(6, 6)
                    dropdown.BlackOutline2.BorderSizePixel = 0
                    dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    dropdown.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                    updateevent.Event:Connect(function(theme)
                        dropdown.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                    end)
    
                    dropdown.Outline = Instance.new(""Frame"", dropdown.Main)
                    dropdown.Outline.Name = ""blackline""
                    dropdown.Outline.ZIndex = 4
                    dropdown.Outline.Size = dropdown.Main.Size + UDim2.fromOffset(4, 4)
                    dropdown.Outline.BorderSizePixel = 0
                    dropdown.Outline.BackgroundColor3 = window.theme.outlinecolor
                    dropdown.Outline.Position = UDim2.fromOffset(-2, -2)
                    updateevent.Event:Connect(function(theme)
                        dropdown.Outline.BackgroundColor3 = theme.outlinecolor
                    end)
    
                    dropdown.BlackOutline = Instance.new(""Frame"", dropdown.Main)
                    dropdown.BlackOutline.Name = ""blackline444""
                    dropdown.BlackOutline.ZIndex = 4
                    dropdown.BlackOutline.Size = dropdown.Main.Size + UDim2.fromOffset(2, 2)
                    dropdown.BlackOutline.BorderSizePixel = 0
                    dropdown.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                    dropdown.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                    updateevent.Event:Connect(function(theme)
                        dropdown.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                    end)
    
                    dropdown.ItemsFrame = Instance.new(""ScrollingFrame"", dropdown.Main)
                    dropdown.ItemsFrame.Name = ""itemsframe""
                    dropdown.ItemsFrame.BorderSizePixel = 0
                    dropdown.ItemsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    dropdown.ItemsFrame.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
                    dropdown.ItemsFrame.ScrollBarThickness = 2
                    dropdown.ItemsFrame.ZIndex = 8
                    dropdown.ItemsFrame.ScrollingDirection = ""Y""
                    dropdown.ItemsFrame.Visible = false
                    dropdown.ItemsFrame.Size = UDim2.new(0, 0, 0, 0)
                    dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.Main.AbsoluteSize.X, 0)
    
                    dropdown.ListLayout = Instance.new(""UIListLayout"", dropdown.ItemsFrame)
                    dropdown.ListLayout.FillDirection = Enum.FillDirection.Vertical
                    dropdown.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
                    dropdown.ListPadding = Instance.new(""UIPadding"", dropdown.ItemsFrame)
                    dropdown.ListPadding.PaddingTop = UDim.new(0, 2)
                    dropdown.ListPadding.PaddingBottom = UDim.new(0, 2)
                    dropdown.ListPadding.PaddingLeft = UDim.new(0, 2)
                    dropdown.ListPadding.PaddingRight = UDim.new(0, 2)
    
                    dropdown.BlackOutline2Items = Instance.new(""Frame"", dropdown.Main)
                    dropdown.BlackOutline2Items.Name = ""blackline3""
                    dropdown.BlackOutline2Items.ZIndex = 7
                    dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                    dropdown.BlackOutline2Items.BorderSizePixel = 0
                    dropdown.BlackOutline2Items.BackgroundColor3 = window.theme.outlinecolor2
                    dropdown.BlackOutline2Items.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-3, -3)
                    dropdown.BlackOutline2Items.Visible = false
                    updateevent.Event:Connect(function(theme)
                        dropdown.BlackOutline2Items.BackgroundColor3 = theme.outlinecolor2
                    end)
                    
                    dropdown.OutlineItems = Instance.new(""Frame"", dropdown.Main)
                    dropdown.OutlineItems.Name = ""blackline8""
                    dropdown.OutlineItems.ZIndex = 7
                    dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                    dropdown.OutlineItems.BorderSizePixel = 0
                    dropdown.OutlineItems.BackgroundColor3 = window.theme.outlinecolor
                    dropdown.OutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-2, -2)
                    dropdown.OutlineItems.Visible = false
                    updateevent.Event:Connect(function(theme)
                        dropdown.OutlineItems.BackgroundColor3 = theme.outlinecolor
                    end)
    
                    dropdown.BlackOutlineItems = Instance.new(""Frame"", dropdown.Main)
                    dropdown.BlackOutlineItems.Name = ""blackline3""
                    dropdown.BlackOutlineItems.ZIndex = 7
                    dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(-2, -2)
                    dropdown.BlackOutlineItems.BorderSizePixel = 0
                    dropdown.BlackOutlineItems.BackgroundColor3 = window.theme.outlinecolor2
                    dropdown.BlackOutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-1, -1)
                    dropdown.BlackOutlineItems.Visible = false
                    updateevent.Event:Connect(function(theme)
                        dropdown.BlackOutlineItems.BackgroundColor3 = theme.outlinecolor2
                    end)
    
                    dropdown.IgnoreBackButtons = Instance.new(""TextButton"", dropdown.Main)
                    dropdown.IgnoreBackButtons.BackgroundTransparency = 1
                    dropdown.IgnoreBackButtons.BorderSizePixel = 0
                    dropdown.IgnoreBackButtons.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
                    dropdown.IgnoreBackButtons.Size = UDim2.new(0, 0, 0, 0)
                    dropdown.IgnoreBackButtons.ZIndex = 7
                    dropdown.IgnoreBackButtons.Text = """"
                    dropdown.IgnoreBackButtons.Visible = false
                    dropdown.IgnoreBackButtons.AutoButtonColor = false

                    if dropdown.flag and dropdown.flag ~= """" then
                        library.flags[dropdown.flag] = dropdown.multichoice and { dropdown.default or dropdown.defaultitems[1] or """" } or (dropdown.default or dropdown.defaultitems[1] or """")
                    end

                    function dropdown:isSelected(item)
                        for i, v in pairs(dropdown.values) do
                            if v == item then
                                return true
                            end
                        end
                        return false
                    end
    
                    function dropdown:updateText(text)
                        if #text >= 27 then
                            text = text:sub(1, 25) .. ""..""
                        end
                        dropdown.SelectedLabel.Text = text
                    end
    
                    dropdown.Changed = Instance.new(""BindableEvent"")
                    function dropdown:Set(value)
                        if type(value) == ""table"" then
                            dropdown.values = value
                            dropdown:updateText(table.concat(value, "", ""))
                            pcall(dropdown.callback, value)
                        else
                            dropdown:updateText(value)
                            dropdown.values = { value }
                            pcall(dropdown.callback, value)
                        end
                        
                        dropdown.Changed:Fire(value)
                        if dropdown.flag and dropdown.flag ~= """" then
                            library.flags[dropdown.flag] = dropdown.multichoice and dropdown.values or dropdown.values[1]
                        end
                    end
    
                    function dropdown:Get()
                        return dropdown.multichoice and dropdown.values or dropdown.values[1]
                    end
    
                    dropdown.items = { }
                    function dropdown:Add(v)
                        local Item = Instance.new(""TextButton"", dropdown.ItemsFrame)
                        Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                        Item.TextColor3 = Color3.fromRGB(255, 255, 255)
                        Item.BorderSizePixel = 0
                        Item.Position = UDim2.fromOffset(0, 0)
                        Item.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset - 4, 20)
                        Item.ZIndex = 9
                        Item.Text = v
                        Item.Name = v
                        Item.AutoButtonColor = false
                        Item.Font = window.theme.font
                        Item.TextSize = 15
                        Item.TextXAlignment = Enum.TextXAlignment.Left
                        Item.TextStrokeTransparency = 1
                        dropdown.ItemsFrame.CanvasSize = dropdown.ItemsFrame.CanvasSize + UDim2.fromOffset(0, Item.AbsoluteSize.Y)
    
                        Item.MouseButton1Down:Connect(function()
                            if dropdown.multichoice then
                                if dropdown:isSelected(v) then
                                    for i2, v2 in pairs(dropdown.values) do
                                        if v2 == v then
                                            table.remove(dropdown.values, i2)
                                        end
                                    end
                                    dropdown:Set(dropdown.values)
                                else
                                    table.insert(dropdown.values, v)
                                    dropdown:Set(dropdown.values)
                                end
    
                                return
                            else
                                dropdown.Nav.Rotation = 90
                                dropdown.ItemsFrame.Visible = false
                                dropdown.ItemsFrame.Active = false
                                dropdown.OutlineItems.Visible = false
                                dropdown.BlackOutlineItems.Visible = false
                                dropdown.BlackOutline2Items.Visible = false
                                dropdown.IgnoreBackButtons.Visible = false
                                dropdown.IgnoreBackButtons.Active = false
                            end
    
                            dropdown:Set(v)
                            return
                        end)
    
                        runservice.RenderStepped:Connect(function()
                            if dropdown.multichoice and dropdown:isSelected(v) or dropdown.values[1] == v then
                                Item.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
                                Item.TextColor3 = window.theme.accentcolor
                                Item.Text = "" "" .. v
                            else
                                Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                                Item.TextColor3 = Color3.fromRGB(255, 255, 255)
                                Item.Text = v
                            end
                        end)
    
                        table.insert(dropdown.items, v)
                        dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * Item.AbsoluteSize.Y, 20, 156) + 4)
                        dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * Item.AbsoluteSize.Y) + 4)
    
                        dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                        dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
                        dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                        dropdown.IgnoreBackButtons.Size = dropdown.ItemsFrame.Size
                    end
    
                    function dropdown:Remove(value)
                        local item = dropdown.ItemsFrame:FindFirstChild(value)
                        if item then
                            for i,v in pairs(dropdown.items) do
                                if v == value then
                                    table.remove(dropdown.items, i)
                                end
                            end
    
                            dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * item.AbsoluteSize.Y, 20, 156) + 4)
                            dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * item.AbsoluteSize.Y) + 4)
        
                            dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
                            dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                            dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                            dropdown.IgnoreBackButtons.Size = dropdown.ItemsFrame.Size
    
                            item:Remove()
                        end
                    end 
    
                    for i,v in pairs(dropdown.defaultitems) do
                        dropdown:Add(v)
                    end
    
                    if dropdown.default then
                        dropdown:Set(dropdown.default)
                    end
    
                    local MouseButton1Down = function()
                        if dropdown.Nav.Rotation == 90 then
                            tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { Rotation = -90 }):Play()
                            if dropdown.items and #dropdown.items ~= 0 then
                                dropdown.ItemsFrame.ScrollingEnabled = true
                                sector.Main.Parent.ScrollingEnabled = false
                                dropdown.ItemsFrame.Visible = true
                                dropdown.ItemsFrame.Active = true
                                dropdown.IgnoreBackButtons.Visible = true
                                dropdown.IgnoreBackButtons.Active = true
                                dropdown.OutlineItems.Visible = true
                                dropdown.BlackOutlineItems.Visible = true
                                dropdown.BlackOutline2Items.Visible = true
                            end
                        else
                            tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { Rotation = 90 }):Play()
                            dropdown.ItemsFrame.ScrollingEnabled = false
                            sector.Main.Parent.ScrollingEnabled = true
                            dropdown.ItemsFrame.Visible = false
                            dropdown.ItemsFrame.Active = false
                            dropdown.IgnoreBackButtons.Visible = false
                            dropdown.IgnoreBackButtons.Active = false
                            dropdown.OutlineItems.Visible = false
                            dropdown.BlackOutlineItems.Visible = false
                            dropdown.BlackOutline2Items.Visible = false
                        end
                    end
    
                    dropdown.Main.MouseButton1Down:Connect(MouseButton1Down)
                    dropdown.Nav.MouseButton1Down:Connect(MouseButton1Down)
    
                    dropdown.BlackOutline2.MouseEnter:Connect(function()
                        dropdown.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                    end)
                    dropdown.BlackOutline2.MouseLeave:Connect(function()
                        dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    end)
    
                    sector:FixSize()
                    table.insert(library.items, dropdown)
                    return dropdown
                end

                function toggle:AddTextbox(default, callback, flag)
                    local textbox = { }
                    textbox.callback = callback or function() end
                    textbox.default = default
                    textbox.value = """"
                    textbox.flag = flag or ( (toggle.text or """") .. tostring(#(sector.Items:GetChildren())) .. ""a"")
    
                    textbox.Holder = Instance.new(""Frame"", sector.Items)
                    textbox.Holder.Name = ""holder""
                    textbox.Holder.ZIndex = 5
                    textbox.Holder.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 14)
                    textbox.Holder.BorderSizePixel = 0
                    textbox.Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    
                    textbox.Gradient = Instance.new(""UIGradient"", textbox.Holder)
                    textbox.Gradient.Rotation = 90
                    textbox.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 39, 39)) })
    
                    textbox.Main = Instance.new(""TextBox"", textbox.Holder)
                    textbox.Main.PlaceholderText = """"
                    textbox.Main.Text = """"
                    textbox.Main.BackgroundTransparency = 1
                    textbox.Main.Font = window.theme.font
                    textbox.Main.Name = ""textbox""
                    textbox.Main.MultiLine = false
                    textbox.Main.ClearTextOnFocus = false
                    textbox.Main.ZIndex = 5
                    textbox.Main.TextScaled = true
                    textbox.Main.Size = textbox.Holder.Size
                    textbox.Main.TextSize = 15
                    textbox.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
                    textbox.Main.BorderSizePixel = 0
                    textbox.Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    textbox.Main.TextXAlignment = Enum.TextXAlignment.Left
    
                    if textbox.flag and textbox.flag ~= """" then
                        library.flags[textbox.flag] = textbox.default or """"
                    end

                    function textbox:Set(text)
                        textbox.value = text
                        textbox.Main.Text = text
                        if textbox.flag and textbox.flag ~= """" then
                            library.flags[textbox.flag] = text
                        end
                        pcall(textbox.callback, text)
                    end
                    updateevent.Event:Connect(function(theme)
                        textbox.Main.Font = theme.font
                    end)
    
                    function textbox:Get()
                        return textbox.value
                    end
    
                    if textbox.default then 
                        textbox:Set(textbox.default)
                    end
    
                    textbox.Main.FocusLost:Connect(function()
                        textbox:Set(textbox.Main.Text)
                    end)
    
                    textbox.BlackOutline2 = Instance.new(""Frame"", textbox.Main)
                    textbox.BlackOutline2.Name = ""blackline""
                    textbox.BlackOutline2.ZIndex = 4
                    textbox.BlackOutline2.Size = textbox.Main.Size + UDim2.fromOffset(6, 6)
                    textbox.BlackOutline2.BorderSizePixel = 0
                    textbox.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    textbox.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                    updateevent.Event:Connect(function(theme)
                        textbox.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                    end)
                    
                    textbox.Outline = Instance.new(""Frame"", textbox.Main)
                    textbox.Outline.Name = ""blackline""
                    textbox.Outline.ZIndex = 4
                    textbox.Outline.Size = textbox.Main.Size + UDim2.fromOffset(4, 4)
                    textbox.Outline.BorderSizePixel = 0
                    textbox.Outline.BackgroundColor3 = window.theme.outlinecolor
                    textbox.Outline.Position = UDim2.fromOffset(-2, -2)
                    updateevent.Event:Connect(function(theme)
                        textbox.Outline.BackgroundColor3 = theme.outlinecolor
                    end)
    
                    textbox.BlackOutline = Instance.new(""Frame"", textbox.Main)
                    textbox.BlackOutline.Name = ""blackline""
                    textbox.BlackOutline.ZIndex = 4
                    textbox.BlackOutline.Size = textbox.Main.Size + UDim2.fromOffset(2, 2)
                    textbox.BlackOutline.BorderSizePixel = 0
                    textbox.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                    textbox.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                    updateevent.Event:Connect(function(theme)
                        textbox.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                    end)
    
                    textbox.BlackOutline2.MouseEnter:Connect(function()
                        textbox.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                    end)
                    textbox.BlackOutline2.MouseLeave:Connect(function()
                        textbox.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    end)
    
                    sector:FixSize()
                    table.insert(library.items, textbox)
                    return textbox
                end

                function toggle:AddColorpicker(default, callback, flag)
                    local colorpicker = { }

                    colorpicker.callback = callback or function() end
                    colorpicker.default = default or Color3.fromRGB(255, 255, 255)
                    colorpicker.value = colorpicker.default
                    colorpicker.flag = flag or ( (toggle.text or """") .. tostring(#toggle.Items:GetChildren()))

                    colorpicker.Main = Instance.new(""Frame"", toggle.Items)
                    colorpicker.Main.ZIndex = 6
                    colorpicker.Main.BorderSizePixel = 0
                    colorpicker.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    colorpicker.Main.Size = UDim2.fromOffset(16, 10)

                    colorpicker.Gradient = Instance.new(""UIGradient"", colorpicker.Main)
                    colorpicker.Gradient.Rotation = 90

                    local clr = Color3.new(math.clamp(colorpicker.value.R / 1.7, 0, 1), math.clamp(colorpicker.value.G / 1.7, 0, 1), math.clamp(colorpicker.value.B / 1.7, 0, 1))
                    colorpicker.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, colorpicker.value), ColorSequenceKeypoint.new(1.00, clr) })

                    colorpicker.BlackOutline2 = Instance.new(""Frame"", colorpicker.Main)
                    colorpicker.BlackOutline2.Name = ""blackline""
                    colorpicker.BlackOutline2.ZIndex = 4
                    colorpicker.BlackOutline2.Size = colorpicker.Main.Size + UDim2.fromOffset(6, 6)
                    colorpicker.BlackOutline2.BorderSizePixel = 0
                    colorpicker.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    colorpicker.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                    updateevent.Event:Connect(function(theme)
                        if window.OpenedColorPickers[colorpicker.MainPicker] then
                            colorpicker.BlackOutline2.BackgroundColor3 = theme.accentcolor
                        else
                            colorpicker.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                        end
                    end)
                    
                    colorpicker.Outline = Instance.new(""Frame"", colorpicker.Main)
                    colorpicker.Outline.Name = ""blackline""
                    colorpicker.Outline.ZIndex = 4
                    colorpicker.Outline.Size = colorpicker.Main.Size + UDim2.fromOffset(4, 4)
                    colorpicker.Outline.BorderSizePixel = 0
                    colorpicker.Outline.BackgroundColor3 = window.theme.outlinecolor
                    colorpicker.Outline.Position = UDim2.fromOffset(-2, -2)
                    updateevent.Event:Connect(function(theme)
                        colorpicker.Outline.BackgroundColor3 = theme.outlinecolor
                    end)
    
                    colorpicker.BlackOutline = Instance.new(""Frame"", colorpicker.Main)
                    colorpicker.BlackOutline.Name = ""blackline""
                    colorpicker.BlackOutline.ZIndex = 4
                    colorpicker.BlackOutline.Size = colorpicker.Main.Size + UDim2.fromOffset(2, 2)
                    colorpicker.BlackOutline.BorderSizePixel = 0
                    colorpicker.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                    colorpicker.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                    updateevent.Event:Connect(function(theme)
                        colorpicker.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                    end)

                    colorpicker.BlackOutline2.MouseEnter:Connect(function()
                        colorpicker.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                    end)

                    colorpicker.BlackOutline2.MouseLeave:Connect(function()
                        if not window.OpenedColorPickers[colorpicker.MainPicker] then
                            colorpicker.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                        end
                    end)

                    colorpicker.MainPicker = Instance.new(""TextButton"", colorpicker.Main)
                    colorpicker.MainPicker.Name = ""picker""
                    colorpicker.MainPicker.ZIndex = 100
                    colorpicker.MainPicker.Visible = false
                    colorpicker.MainPicker.AutoButtonColor = false
                    colorpicker.MainPicker.Text = """"
                    window.OpenedColorPickers[colorpicker.MainPicker] = false
                    colorpicker.MainPicker.Size = UDim2.fromOffset(180, 196)
                    colorpicker.MainPicker.BorderSizePixel = 0
                    colorpicker.MainPicker.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    colorpicker.MainPicker.Rotation = 0.000000000000001
                    colorpicker.MainPicker.Position = UDim2.fromOffset(-colorpicker.MainPicker.AbsoluteSize.X + colorpicker.Main.AbsoluteSize.X, 17)

                    colorpicker.BlackOutline3 = Instance.new(""Frame"", colorpicker.MainPicker)
                    colorpicker.BlackOutline3.Name = ""blackline""
                    colorpicker.BlackOutline3.ZIndex = 98
                    colorpicker.BlackOutline3.Size = colorpicker.MainPicker.Size + UDim2.fromOffset(6, 6)
                    colorpicker.BlackOutline3.BorderSizePixel = 0
                    colorpicker.BlackOutline3.BackgroundColor3 = window.theme.outlinecolor2
                    colorpicker.BlackOutline3.Position = UDim2.fromOffset(-3, -3)
                    updateevent.Event:Connect(function(theme)
                        colorpicker.BlackOutline3.BackgroundColor3 = theme.outlinecolor2
                    end)
                    
                    colorpicker.Outline2 = Instance.new(""Frame"", colorpicker.MainPicker)
                    colorpicker.Outline2.Name = ""blackline""
                    colorpicker.Outline2.ZIndex = 98
                    colorpicker.Outline2.Size = colorpicker.MainPicker.Size + UDim2.fromOffset(4, 4)
                    colorpicker.Outline2.BorderSizePixel = 0
                    colorpicker.Outline2.BackgroundColor3 = window.theme.outlinecolor
                    colorpicker.Outline2.Position = UDim2.fromOffset(-2, -2)
                    updateevent.Event:Connect(function(theme)
                        colorpicker.Outline2.BackgroundColor3 = theme.outlinecolor
                    end)
    
                    colorpicker.BlackOutline3 = Instance.new(""Frame"", colorpicker.MainPicker)
                    colorpicker.BlackOutline3.Name = ""blackline""
                    colorpicker.BlackOutline3.ZIndex = 98
                    colorpicker.BlackOutline3.Size = colorpicker.MainPicker.Size + UDim2.fromOffset(2, 2)
                    colorpicker.BlackOutline3.BorderSizePixel = 0
                    colorpicker.BlackOutline3.BackgroundColor3 = window.theme.outlinecolor2
                    colorpicker.BlackOutline3.Position = UDim2.fromOffset(-1, -1)
                    updateevent.Event:Connect(function(theme)
                        colorpicker.BlackOutline3.BackgroundColor3 = theme.outlinecolor2
                    end)

                    colorpicker.hue = Instance.new(""ImageLabel"", colorpicker.MainPicker)
                    colorpicker.hue.ZIndex = 101
                    colorpicker.hue.Position = UDim2.new(0,3,0,3)
                    colorpicker.hue.Size = UDim2.new(0,172,0,172)
                    colorpicker.hue.Image = ""rbxassetid://4155801252""
                    colorpicker.hue.ScaleType = Enum.ScaleType.Stretch
                    colorpicker.hue.BackgroundColor3 = Color3.new(1,0,0)
                    colorpicker.hue.BorderColor3 = window.theme.outlinecolor2
                    updateevent.Event:Connect(function(theme)
                        colorpicker.hue.BorderColor3 = theme.outlinecolor2
                    end)

                    colorpicker.hueselectorpointer = Instance.new(""ImageLabel"", colorpicker.MainPicker)
                    colorpicker.hueselectorpointer.ZIndex = 101
                    colorpicker.hueselectorpointer.BackgroundTransparency = 1
                    colorpicker.hueselectorpointer.BorderSizePixel = 0
                    colorpicker.hueselectorpointer.Position = UDim2.new(0, 0, 0, 0)
                    colorpicker.hueselectorpointer.Size = UDim2.new(0, 7, 0, 7)
                    colorpicker.hueselectorpointer.Image = ""rbxassetid://6885856475""

                    colorpicker.selector = Instance.new(""TextLabel"", colorpicker.MainPicker)
                    colorpicker.selector.ZIndex = 100
                    colorpicker.selector.Position = UDim2.new(0,3,0,181)
                    colorpicker.selector.Size = UDim2.new(0,173,0,10)
                    colorpicker.selector.BackgroundColor3 = Color3.fromRGB(255,255,255)
                    colorpicker.selector.BorderColor3 = window.theme.outlinecolor2
                    colorpicker.selector.Text = """"
                    updateevent.Event:Connect(function(theme)
                        colorpicker.selector.BorderColor3 = theme.outlinecolor2
                    end)
        
                    colorpicker.gradient = Instance.new(""UIGradient"", colorpicker.selector)
                    colorpicker.gradient.Color = ColorSequence.new({ 
                        ColorSequenceKeypoint.new(0, Color3.new(1,0,0)), 
                        ColorSequenceKeypoint.new(0.17, Color3.new(1,0,1)), 
                        ColorSequenceKeypoint.new(0.33,Color3.new(0,0,1)), 
                        ColorSequenceKeypoint.new(0.5,Color3.new(0,1,1)), 
                        ColorSequenceKeypoint.new(0.67, Color3.new(0,1,0)), 
                        ColorSequenceKeypoint.new(0.83, Color3.new(1,1,0)), 
                        ColorSequenceKeypoint.new(1, Color3.new(1,0,0))
                    })

                    colorpicker.pointer = Instance.new(""Frame"", colorpicker.selector)
                    colorpicker.pointer.ZIndex = 101
                    colorpicker.pointer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    colorpicker.pointer.Position = UDim2.new(0,0,0,0)
                    colorpicker.pointer.Size = UDim2.new(0,2,0,10)
                    colorpicker.pointer.BorderColor3 = Color3.fromRGB(255, 255, 255)

                    if colorpicker.flag and colorpicker.flag ~= """" then
                        library.flags[colorpicker.flag] = colorpicker.default
                    end

                    function colorpicker:RefreshHue()
                        local x = (mouse.X - colorpicker.hue.AbsolutePosition.X) / colorpicker.hue.AbsoluteSize.X
                        local y = (mouse.Y - colorpicker.hue.AbsolutePosition.Y) / colorpicker.hue.AbsoluteSize.Y
                        colorpicker.hueselectorpointer:TweenPosition(UDim2.new(math.clamp(x * colorpicker.hue.AbsoluteSize.X, 0.5, 0.952 * colorpicker.hue.AbsoluteSize.X) / colorpicker.hue.AbsoluteSize.X, 0, math.clamp(y * colorpicker.hue.AbsoluteSize.Y, 0.5, 0.885 * colorpicker.hue.AbsoluteSize.Y) / colorpicker.hue.AbsoluteSize.Y, 0), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.05)
                        colorpicker:Set(Color3.fromHSV(colorpicker.color, math.clamp(x * colorpicker.hue.AbsoluteSize.X, 0.5, 1 * colorpicker.hue.AbsoluteSize.X) / colorpicker.hue.AbsoluteSize.X, 1 - (math.clamp(y * colorpicker.hue.AbsoluteSize.Y, 0.5, 1 * colorpicker.hue.AbsoluteSize.Y) / colorpicker.hue.AbsoluteSize.Y)))
                    end

                    function colorpicker:RefreshSelector()
                        local pos = math.clamp((mouse.X - colorpicker.hue.AbsolutePosition.X) / colorpicker.hue.AbsoluteSize.X, 0, 1)
                        colorpicker.color = 1 - pos
                        colorpicker.pointer:TweenPosition(UDim2.new(pos, 0, 0, 0), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.05)
                        colorpicker.hue.BackgroundColor3 = Color3.fromHSV(1 - pos, 1, 1)

                        local x = (colorpicker.hueselectorpointer.AbsolutePosition.X - colorpicker.hue.AbsolutePosition.X) / colorpicker.hue.AbsoluteSize.X
                        local y = (colorpicker.hueselectorpointer.AbsolutePosition.Y - colorpicker.hue.AbsolutePosition.Y) / colorpicker.hue.AbsoluteSize.Y
                        colorpicker:Set(Color3.fromHSV(colorpicker.color, math.clamp(x * colorpicker.hue.AbsoluteSize.X, 0.5, 1 * colorpicker.hue.AbsoluteSize.X) / colorpicker.hue.AbsoluteSize.X, 1 - (math.clamp(y * colorpicker.hue.AbsoluteSize.Y, 0.5, 1 * colorpicker.hue.AbsoluteSize.Y) / colorpicker.hue.AbsoluteSize.Y)))
                    end

                    function colorpicker:Set(value)
                        local color = Color3.new(math.clamp(value.r, 0, 1), math.clamp(value.g, 0, 1), math.clamp(value.b, 0, 1))
                        colorpicker.value = color
                        if colorpicker.flag and colorpicker.flag ~= """" then
                            library.flags[colorpicker.flag] = color
                        end
                        local clr = Color3.new(math.clamp(color.R / 1.7, 0, 1), math.clamp(color.G / 1.7, 0, 1), math.clamp(color.B / 1.7, 0, 1))
                        colorpicker.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, color), ColorSequenceKeypoint.new(1.00, clr) })
                        pcall(colorpicker.callback, color)
                    end

                    function colorpicker:Get(value)
                        return colorpicker.value
                    end
                    colorpicker:Set(colorpicker.default)

                    local dragging_selector = false
                    local dragging_hue = false

                    colorpicker.selector.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging_selector = true
                            colorpicker:RefreshSelector()
                        end
                    end)
    
                    colorpicker.selector.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging_selector = false
                            colorpicker:RefreshSelector()
                        end
                    end)

                    colorpicker.hue.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging_hue = true
                            colorpicker:RefreshHue()
                        end
                    end)
    
                    colorpicker.hue.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging_hue = false
                            colorpicker:RefreshHue()
                        end
                    end)
    
                    uis.InputChanged:Connect(function(input)
                        if dragging_selector and input.UserInputType == Enum.UserInputType.MouseMovement then
                            colorpicker:RefreshSelector()
                        end
                        if dragging_hue and input.UserInputType == Enum.UserInputType.MouseMovement then
                            colorpicker:RefreshHue()
                        end
                    end)

                    local inputBegan = function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            for i,v in pairs(window.OpenedColorPickers) do
                                if v and i ~= colorpicker.MainPicker then
                                    i.Visible = false
                                    window.OpenedColorPickers[i] = false
                                end
                            end

                            colorpicker.MainPicker.Visible = not colorpicker.MainPicker.Visible
                            window.OpenedColorPickers[colorpicker.MainPicker] = colorpicker.MainPicker.Visible
                            if window.OpenedColorPickers[colorpicker.MainPicker] then
                                colorpicker.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                            else
                                colorpicker.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                            end
                        end
                    end

                    colorpicker.Main.InputBegan:Connect(inputBegan)
                    colorpicker.Outline.InputBegan:Connect(inputBegan)
                    colorpicker.BlackOutline2.InputBegan:Connect(inputBegan)
                    table.insert(library.items, colorpicker)
                    return colorpicker
                end

                function toggle:AddSlider(min, default, max, decimals, callback, flag)
                    local slider = { }
                    slider.text = text or """"
                    slider.callback = callback or function(value) end
                    slider.min = min or 0
                    slider.max = max or 100
                    slider.decimals = decimals or 1
                    slider.default = default or slider.min
                    slider.flag = flag or ( (toggle.text or """") .. tostring(#toggle.Items:GetChildren()))
    
                    slider.value = slider.default
                    local dragging = false
    
                    slider.Main = Instance.new(""TextButton"", sector.Items)
                    slider.Main.Name = ""slider""
                    slider.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    slider.Main.Position = UDim2.fromOffset(0, 0)
                    slider.Main.BorderSizePixel = 0
                    slider.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 12)
                    slider.Main.AutoButtonColor = false
                    slider.Main.Text = """"
                    slider.Main.ZIndex = 7

                    slider.InputLabel = Instance.new(""TextLabel"", slider.Main)
                    slider.InputLabel.BackgroundTransparency = 1
                    slider.InputLabel.Size = slider.Main.Size
                    slider.InputLabel.Font = window.theme.font
                    slider.InputLabel.Text = ""0""
                    slider.InputLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
                    slider.InputLabel.Position = slider.Main.Position
                    slider.InputLabel.Selectable = false
                    slider.InputLabel.TextSize = 15
                    slider.InputLabel.ZIndex = 9
                    slider.InputLabel.TextStrokeTransparency = 1
                    slider.InputLabel.TextXAlignment = Enum.TextXAlignment.Center
                    updateevent.Event:Connect(function(theme)
                        slider.InputLabel.Font = theme.font
                        slider.InputLabel.TextColor3 = theme.itemscolor
                    end)
    
                    slider.BlackOutline2 = Instance.new(""Frame"", slider.Main)
                    slider.BlackOutline2.Name = ""blackline""
                    slider.BlackOutline2.ZIndex = 4
                    slider.BlackOutline2.Size = slider.Main.Size + UDim2.fromOffset(6, 6)
                    slider.BlackOutline2.BorderSizePixel = 0
                    slider.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    slider.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                    updateevent.Event:Connect(function(theme)
                        slider.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                    end)
                    
                    slider.Outline = Instance.new(""Frame"", slider.Main)
                    slider.Outline.Name = ""blackline""
                    slider.Outline.ZIndex = 4
                    slider.Outline.Size = slider.Main.Size + UDim2.fromOffset(4, 4)
                    slider.Outline.BorderSizePixel = 0
                    slider.Outline.BackgroundColor3 = window.theme.outlinecolor
                    slider.Outline.Position = UDim2.fromOffset(-2, -2)
                    updateevent.Event:Connect(function(theme)
                        slider.Outline.BackgroundColor3 = theme.outlinecolor
                    end)
    
                    slider.BlackOutline = Instance.new(""Frame"", slider.Main)
                    slider.BlackOutline.Name = ""blackline""
                    slider.BlackOutline.ZIndex = 4
                    slider.BlackOutline.Size = slider.Main.Size + UDim2.fromOffset(2, 2)
                    slider.BlackOutline.BorderSizePixel = 0
                    slider.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                    slider.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                    updateevent.Event:Connect(function(theme)
                        slider.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                    end)
    
                    slider.Gradient = Instance.new(""UIGradient"", slider.Main)
                    slider.Gradient.Rotation = 90
                    slider.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(41, 41, 41)) })
    
                    slider.SlideBar = Instance.new(""Frame"", slider.Main)
                    slider.SlideBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255) --Color3.fromRGB(204, 0, 102)
                    slider.SlideBar.ZIndex = 8
                    slider.SlideBar.BorderSizePixel = 0
                    slider.SlideBar.Size = UDim2.fromOffset(0, slider.Main.Size.Y.Offset)
    
                    slider.Gradient2 = Instance.new(""UIGradient"", slider.SlideBar)
                    slider.Gradient2.Rotation = 90
                    slider.Gradient2.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, window.theme.accentcolor), ColorSequenceKeypoint.new(1.00, window.theme.accentcolor2) })
                    updateevent.Event:Connect(function(theme)
                        slider.Gradient2.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, theme.accentcolor), ColorSequenceKeypoint.new(1.00, theme.accentcolor2) })
                    end)
    
                    slider.BlackOutline2.MouseEnter:Connect(function()
                        slider.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                    end)
                    slider.BlackOutline2.MouseLeave:Connect(function()
                        slider.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    end)
    
                    if slider.flag and slider.flag ~= """" then
                        library.flags[slider.flag] = slider.default or slider.min or 0
                    end

                    function slider:Get()
                        return slider.value
                    end
    
                    function slider:Set(value)
                        slider.value = math.clamp(math.round(value * slider.decimals) / slider.decimals, slider.min, slider.max)
                        local percent = 1 - ((slider.max - slider.value) / (slider.max - slider.min))
                        if slider.flag and slider.flag ~= """" then
                            library.flags[slider.flag] = slider.value
                        end
                        slider.SlideBar:TweenSize(UDim2.fromOffset(percent * slider.Main.AbsoluteSize.X, slider.Main.AbsoluteSize.Y), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.05)
                        slider.InputLabel.Text = slider.value
                        pcall(slider.callback, slider.value)
                    end
                    slider:Set(slider.default)
    
                    function slider:Refresh()
                        local mousePos = camera:WorldToViewportPoint(mouse.Hit.p)
                        local percent = math.clamp(mousePos.X - slider.SlideBar.AbsolutePosition.X, 0, slider.Main.AbsoluteSize.X) / slider.Main.AbsoluteSize.X
                        local value = math.floor((slider.min + (slider.max - slider.min) * percent) * slider.decimals) / slider.decimals
                        value = math.clamp(value, slider.min, slider.max)
                        slider:Set(value)
                    end
    
                    slider.SlideBar.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = true
                            slider:Refresh()
                        end
                    end)
    
                    slider.SlideBar.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = false
                        end
                    end)
    
                    slider.Main.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = true
                            slider:Refresh()
                        end
                    end)
    
                    slider.Main.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = false
                        end
                    end)
    
                    uis.InputChanged:Connect(function(input)
                        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                            slider:Refresh()
                        end
                    end)
    
                    sector:FixSize()
                    table.insert(library.items, slider)
                    return slider
                end

                toggle.Main.MouseButton1Down:Connect(function()
                    toggle:Set(not toggle.CheckedFrame.Visible)
                end)
                toggle.Label.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggle:Set(not toggle.CheckedFrame.Visible)
                    end
                end)

                local MouseEnter = function()
                    toggle.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                end
                local MouseLeave = function()
                    toggle.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                end

                toggle.Label.MouseEnter:Connect(MouseEnter)
                toggle.Label.MouseLeave:Connect(MouseLeave)
                toggle.BlackOutline2.MouseEnter:Connect(MouseEnter)
                toggle.BlackOutline2.MouseLeave:Connect(MouseLeave)

                sector:FixSize()
                table.insert(library.items, toggle)
                return toggle
            end

            function sector:AddTextbox(text, default, callback, flag)
                local textbox = { }
                textbox.text = text or """"
                textbox.callback = callback or function() end
                textbox.default = default
                textbox.value = """"
                textbox.flag = flag or text or """"

                textbox.Label = Instance.new(""TextButton"", sector.Items)
                textbox.Label.Name = ""Label""
                textbox.Label.AutoButtonColor = false
                textbox.Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                textbox.Label.BackgroundTransparency = 1
                textbox.Label.Position = UDim2.fromOffset(sector.Main.Size.X.Offset, 0)
                textbox.Label.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 0)
                textbox.Label.Font = window.theme.font
                textbox.Label.ZIndex = 5
                textbox.Label.Text = textbox.text
                textbox.Label.TextColor3 = window.theme.itemscolor
                textbox.Label.TextSize = 15
                textbox.Label.TextStrokeTransparency = 1
                textbox.Label.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    textbox.Label.Font = theme.font
                end)

                textbox.Holder = Instance.new(""Frame"", sector.Items)
                textbox.Holder.Name = ""holder""
                textbox.Holder.ZIndex = 5
                textbox.Holder.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 14)
                textbox.Holder.BorderSizePixel = 0
                textbox.Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

                textbox.Gradient = Instance.new(""UIGradient"", textbox.Holder)
                textbox.Gradient.Rotation = 90
                textbox.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 39, 39)) })

                textbox.Main = Instance.new(""TextBox"", textbox.Holder)
                textbox.Main.PlaceholderText = textbox.text
                textbox.Main.PlaceholderColor3 = Color3.fromRGB(190, 190, 190)
                textbox.Main.Text = """"
                textbox.Main.BackgroundTransparency = 1
                textbox.Main.Font = window.theme.font
                textbox.Main.Name = ""textbox""
                textbox.Main.MultiLine = false
                textbox.Main.ClearTextOnFocus = false
                textbox.Main.ZIndex = 5
                textbox.Main.TextScaled = true
                textbox.Main.Size = textbox.Holder.Size
                textbox.Main.TextSize = 15
                textbox.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
                textbox.Main.BorderSizePixel = 0
                textbox.Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                textbox.Main.TextXAlignment = Enum.TextXAlignment.Left

                if textbox.flag and textbox.flag ~= """" then
                    library.flags[textbox.flag] = textbox.default or """"
                end

                function textbox:Set(text)
                    textbox.value = text
                    textbox.Main.Text = text
                    if textbox.flag and textbox.flag ~= """" then
                        library.flags[textbox.flag] = text
                    end
                    pcall(textbox.callback, text)
                end
                updateevent.Event:Connect(function(theme)
                    textbox.Main.Font = theme.font
                end)

                function textbox:Get()
                    return textbox.value
                end

                if textbox.default then 
                    textbox:Set(textbox.default)
                end

                textbox.Main.FocusLost:Connect(function()
                    textbox:Set(textbox.Main.Text)
                end)

                textbox.BlackOutline2 = Instance.new(""Frame"", textbox.Main)
                textbox.BlackOutline2.Name = ""blackline""
                textbox.BlackOutline2.ZIndex = 4
                textbox.BlackOutline2.Size = textbox.Main.Size + UDim2.fromOffset(6, 6)
                textbox.BlackOutline2.BorderSizePixel = 0
                textbox.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                textbox.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                updateevent.Event:Connect(function(theme)
                    textbox.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                end)
                
                textbox.Outline = Instance.new(""Frame"", textbox.Main)
                textbox.Outline.Name = ""blackline""
                textbox.Outline.ZIndex = 4
                textbox.Outline.Size = textbox.Main.Size + UDim2.fromOffset(4, 4)
                textbox.Outline.BorderSizePixel = 0
                textbox.Outline.BackgroundColor3 = window.theme.outlinecolor
                textbox.Outline.Position = UDim2.fromOffset(-2, -2)
                updateevent.Event:Connect(function(theme)
                    textbox.Outline.BackgroundColor3 = theme.outlinecolor
                end)

                textbox.BlackOutline = Instance.new(""Frame"", textbox.Main)
                textbox.BlackOutline.Name = ""blackline""
                textbox.BlackOutline.ZIndex = 4
                textbox.BlackOutline.Size = textbox.Main.Size + UDim2.fromOffset(2, 2)
                textbox.BlackOutline.BorderSizePixel = 0
                textbox.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                textbox.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                updateevent.Event:Connect(function(theme)
                    textbox.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                end)

                textbox.BlackOutline2.MouseEnter:Connect(function()
                    textbox.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                end)
                textbox.BlackOutline2.MouseLeave:Connect(function()
                    textbox.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                end)

                sector:FixSize()
                table.insert(library.items, textbox)
                return textbox
            end
            
            function sector:AddSlider(text, min, default, max, decimals, callback, flag)
                local slider = { }
                slider.text = text or """"
                slider.callback = callback or function(value) end
                slider.min = min or 0
                slider.max = max or 100
                slider.decimals = decimals or 1
                slider.default = default or slider.min
                slider.flag = flag or text or """"

                slider.value = slider.default
                local dragging = false

                slider.MainBack = Instance.new(""Frame"", sector.Items)
                slider.MainBack.Name = ""MainBack""
                slider.MainBack.ZIndex = 7
                slider.MainBack.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 25)
                slider.MainBack.BorderSizePixel = 0
                slider.MainBack.BackgroundTransparency = 1

                slider.Label = Instance.new(""TextLabel"", slider.MainBack)
                slider.Label.BackgroundTransparency = 1
                slider.Label.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 6)
                slider.Label.Font = window.theme.font
                slider.Label.Text = slider.text .. "":""
                slider.Label.TextColor3 = window.theme.itemscolor
                slider.Label.Position = UDim2.fromOffset(0, 0)
                slider.Label.TextSize = 15
                slider.Label.ZIndex = 4
                slider.Label.TextStrokeTransparency = 1
                slider.Label.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    slider.Label.Font = theme.font
                    slider.Label.TextColor3 = theme.itemscolor
                end)

                local size = textservice:GetTextSize(slider.Label.Text, slider.Label.TextSize, slider.Label.Font, Vector2.new(200,300))
                slider.InputLabel = Instance.new(""TextBox"", slider.MainBack)
                slider.InputLabel.BackgroundTransparency = 1
                slider.InputLabel.ClearTextOnFocus = false
                slider.InputLabel.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - size.X - 15, 12)
                slider.InputLabel.Font = window.theme.font
                slider.InputLabel.Text = ""0""
                slider.InputLabel.TextColor3 = window.theme.itemscolor
                slider.InputLabel.Position = UDim2.fromOffset(size.X + 3, -3)
                slider.InputLabel.TextSize = 15
                slider.InputLabel.ZIndex = 4
                slider.InputLabel.TextStrokeTransparency = 1
                slider.InputLabel.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    slider.InputLabel.Font = theme.font
                    slider.InputLabel.TextColor3 = theme.itemscolor

                    local size = textservice:GetTextSize(slider.Label.Text, slider.Label.TextSize, slider.Label.Font, Vector2.new(200,300))
                    slider.InputLabel.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - size.X - 15, 12)
                end)

                slider.Main = Instance.new(""TextButton"", slider.MainBack)
                slider.Main.Name = ""slider""
                slider.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                slider.Main.Position = UDim2.fromOffset(0, 15)
                slider.Main.BorderSizePixel = 0
                slider.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 12)
                slider.Main.AutoButtonColor = false
                slider.Main.Text = """"
                slider.Main.ZIndex = 5

                slider.BlackOutline2 = Instance.new(""Frame"", slider.Main)
                slider.BlackOutline2.Name = ""blackline""
                slider.BlackOutline2.ZIndex = 4
                slider.BlackOutline2.Size = slider.Main.Size + UDim2.fromOffset(6, 6)
                slider.BlackOutline2.BorderSizePixel = 0
                slider.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                slider.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                updateevent.Event:Connect(function(theme)
                    slider.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                end)
                
                slider.Outline = Instance.new(""Frame"", slider.Main)
                slider.Outline.Name = ""blackline""
                slider.Outline.ZIndex = 4
                slider.Outline.Size = slider.Main.Size + UDim2.fromOffset(4, 4)
                slider.Outline.BorderSizePixel = 0
                slider.Outline.BackgroundColor3 = window.theme.outlinecolor
                slider.Outline.Position = UDim2.fromOffset(-2, -2)
                updateevent.Event:Connect(function(theme)
                    slider.Outline.BackgroundColor3 = theme.outlinecolor
                end)

                slider.BlackOutline = Instance.new(""Frame"", slider.Main)
                slider.BlackOutline.Name = ""blackline""
                slider.BlackOutline.ZIndex = 4
                slider.BlackOutline.Size = slider.Main.Size + UDim2.fromOffset(2, 2)
                slider.BlackOutline.BorderSizePixel = 0
                slider.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                slider.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                updateevent.Event:Connect(function(theme)
                    slider.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                end)

                slider.Gradient = Instance.new(""UIGradient"", slider.Main)
                slider.Gradient.Rotation = 90
                slider.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(41, 41, 41)) })

                slider.SlideBar = Instance.new(""Frame"", slider.Main)
                slider.SlideBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255) --Color3.fromRGB(204, 0, 102)
                slider.SlideBar.ZIndex = 5
                slider.SlideBar.BorderSizePixel = 0
                slider.SlideBar.Size = UDim2.fromOffset(0, slider.Main.Size.Y.Offset)

                slider.Gradient2 = Instance.new(""UIGradient"", slider.SlideBar)
                slider.Gradient2.Rotation = 90
                slider.Gradient2.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, window.theme.accentcolor), ColorSequenceKeypoint.new(1.00, window.theme.accentcolor2) })
                updateevent.Event:Connect(function(theme)
                    slider.Gradient2.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, theme.accentcolor), ColorSequenceKeypoint.new(1.00, theme.accentcolor2) })
                end)

                slider.BlackOutline2.MouseEnter:Connect(function()
                    slider.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                end)
                slider.BlackOutline2.MouseLeave:Connect(function()
                    slider.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                end)

                if slider.flag and slider.flag ~= """" then
                    library.flags[slider.flag] = slider.default or slider.min or 0
                end

                function slider:Get()
                    return slider.value
                end

                function slider:Set(value)
                    slider.value = math.clamp(math.round(value * slider.decimals) / slider.decimals, slider.min, slider.max)
                    local percent = 1 - ((slider.max - slider.value) / (slider.max - slider.min))
                    if slider.flag and slider.flag ~= """" then
                        library.flags[slider.flag] = slider.value
                    end
                    slider.SlideBar:TweenSize(UDim2.fromOffset(percent * slider.Main.AbsoluteSize.X, slider.Main.AbsoluteSize.Y), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.05)
					slider.InputLabel.Text = slider.value
					pcall(slider.callback, slider.value)
				end
                slider:Set(slider.default)

                slider.InputLabel.FocusLost:Connect(function(Return)
                    if not Return then 
                        return 
                    end
                    if (slider.InputLabel.Text:match(""^%d+$"")) then
                        slider:Set(tonumber(slider.InputLabel.Text))
                    else
                        slider.InputLabel.Text = tostring(slider.value)
                    end
                end)

                function slider:Refresh()
                    local mousePos = camera:WorldToViewportPoint(mouse.Hit.p)
                    local percent = math.clamp(mousePos.X - slider.SlideBar.AbsolutePosition.X, 0, slider.Main.AbsoluteSize.X) / slider.Main.AbsoluteSize.X
                    local value = math.floor((slider.min + (slider.max - slider.min) * percent) * slider.decimals) / slider.decimals
                    value = math.clamp(value, slider.min, slider.max)
                    slider:Set(value)
                end

                slider.SlideBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        slider:Refresh()
                    end
                end)

                slider.SlideBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                slider.Main.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        slider:Refresh()
                    end
                end)

                slider.Main.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

				uis.InputChanged:Connect(function(input)
					if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        slider:Refresh()
					end
				end)

                sector:FixSize()
                table.insert(library.items, slider)
                return slider
            end

            function sector:AddColorpicker(text, default, callback, flag)
                local colorpicker = { }

                colorpicker.text = text or """"
                colorpicker.callback = callback or function() end
                colorpicker.default = default or Color3.fromRGB(255, 255, 255)
                colorpicker.value = colorpicker.default
                colorpicker.flag = flag or text or """"

                colorpicker.Label = Instance.new(""TextLabel"", sector.Items)
                colorpicker.Label.BackgroundTransparency = 1
                colorpicker.Label.Size = UDim2.fromOffset(156, 10)
                colorpicker.Label.ZIndex = 4
                colorpicker.Label.Font = window.theme.font
                colorpicker.Label.Text = colorpicker.text
                colorpicker.Label.TextColor3 = window.theme.itemscolor
                colorpicker.Label.TextSize = 15
                colorpicker.Label.TextStrokeTransparency = 1
                colorpicker.Label.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    colorpicker.Label.Font = theme.font
                    colorpicker.Label.TextColor3 = theme.itemscolor
                end)

                colorpicker.Main = Instance.new(""Frame"", colorpicker.Label)
                colorpicker.Main.ZIndex = 6
                colorpicker.Main.BorderSizePixel = 0
                colorpicker.Main.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 29, 0)
                colorpicker.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                colorpicker.Main.Size = UDim2.fromOffset(16, 10)

                colorpicker.Gradient = Instance.new(""UIGradient"", colorpicker.Main)
                colorpicker.Gradient.Rotation = 90

                local clr = Color3.new(math.clamp(colorpicker.value.R / 1.7, 0, 1), math.clamp(colorpicker.value.G / 1.7, 0, 1), math.clamp(colorpicker.value.B / 1.7, 0, 1))
                colorpicker.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, colorpicker.value), ColorSequenceKeypoint.new(1.00, clr) })

                colorpicker.BlackOutline2 = Instance.new(""Frame"", colorpicker.Main)
                colorpicker.BlackOutline2.Name = ""blackline""
                colorpicker.BlackOutline2.ZIndex = 4
                colorpicker.BlackOutline2.Size = colorpicker.Main.Size + UDim2.fromOffset(6, 6)
                colorpicker.BlackOutline2.BorderSizePixel = 0
                colorpicker.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                colorpicker.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                updateevent.Event:Connect(function(theme)
                    colorpicker.BlackOutline2.BackgroundColor3 = window.OpenedColorPickers[colorpicker.MainPicker] and theme.accentcolor or theme.outlinecolor2
                end)
                
                colorpicker.Outline = Instance.new(""Frame"", colorpicker.Main)
                colorpicker.Outline.Name = ""blackline""
                colorpicker.Outline.ZIndex = 4
                colorpicker.Outline.Size = colorpicker.Main.Size + UDim2.fromOffset(4, 4)
                colorpicker.Outline.BorderSizePixel = 0
                colorpicker.Outline.BackgroundColor3 = window.theme.outlinecolor
                colorpicker.Outline.Position = UDim2.fromOffset(-2, -2)
                updateevent.Event:Connect(function(theme)
                    colorpicker.Outline.BackgroundColor3 = theme.outlinecolor
                end)

                colorpicker.BlackOutline = Instance.new(""Frame"", colorpicker.Main)
                colorpicker.BlackOutline.Name = ""blackline""
                colorpicker.BlackOutline.ZIndex = 4
                colorpicker.BlackOutline.Size = colorpicker.Main.Size + UDim2.fromOffset(2, 2)
                colorpicker.BlackOutline.BorderSizePixel = 0
                colorpicker.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                colorpicker.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                updateevent.Event:Connect(function(theme)
                    colorpicker.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                end)

                colorpicker.BlackOutline2.MouseEnter:Connect(function()
                    colorpicker.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                end)
                colorpicker.BlackOutline2.MouseLeave:Connect(function()
                    if not window.OpenedColorPickers[colorpicker.MainPicker] then
                        colorpicker.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    end
                end)

                colorpicker.MainPicker = Instance.new(""TextButton"", colorpicker.Main)
                colorpicker.MainPicker.Name = ""picker""
                colorpicker.MainPicker.ZIndex = 100
                colorpicker.MainPicker.Visible = false
                colorpicker.MainPicker.AutoButtonColor = false
                colorpicker.MainPicker.Text = """"
                window.OpenedColorPickers[colorpicker.MainPicker] = false
                colorpicker.MainPicker.Size = UDim2.fromOffset(180, 196)
                colorpicker.MainPicker.BorderSizePixel = 0
                colorpicker.MainPicker.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                colorpicker.MainPicker.Rotation = 0.000000000000001
                colorpicker.MainPicker.Position = UDim2.fromOffset(-colorpicker.MainPicker.AbsoluteSize.X + colorpicker.Main.AbsoluteSize.X, 15)

                colorpicker.BlackOutline3 = Instance.new(""Frame"", colorpicker.MainPicker)
                colorpicker.BlackOutline3.Name = ""blackline""
                colorpicker.BlackOutline3.ZIndex = 98
                colorpicker.BlackOutline3.Size = colorpicker.MainPicker.Size + UDim2.fromOffset(6, 6)
                colorpicker.BlackOutline3.BorderSizePixel = 0
                colorpicker.BlackOutline3.BackgroundColor3 = window.theme.outlinecolor2
                colorpicker.BlackOutline3.Position = UDim2.fromOffset(-3, -3)
                updateevent.Event:Connect(function(theme)
                    colorpicker.BlackOutline3.BackgroundColor3 = theme.outlinecolor2
                end)
                
                colorpicker.Outline2 = Instance.new(""Frame"", colorpicker.MainPicker)
                colorpicker.Outline2.Name = ""blackline""
                colorpicker.Outline2.ZIndex = 98
                colorpicker.Outline2.Size = colorpicker.MainPicker.Size + UDim2.fromOffset(4, 4)
                colorpicker.Outline2.BorderSizePixel = 0
                colorpicker.Outline2.BackgroundColor3 = window.theme.outlinecolor
                colorpicker.Outline2.Position = UDim2.fromOffset(-2, -2)
                updateevent.Event:Connect(function(theme)
                    colorpicker.Outline2.BackgroundColor3 = theme.outlinecolor
                end)

                colorpicker.BlackOutline3 = Instance.new(""Frame"", colorpicker.MainPicker)
                colorpicker.BlackOutline3.Name = ""blackline""
                colorpicker.BlackOutline3.ZIndex = 98
                colorpicker.BlackOutline3.Size = colorpicker.MainPicker.Size + UDim2.fromOffset(2, 2)
                colorpicker.BlackOutline3.BorderSizePixel = 0
                colorpicker.BlackOutline3.BackgroundColor3 = window.theme.outlinecolor2
                colorpicker.BlackOutline3.Position = UDim2.fromOffset(-1, -1)
                updateevent.Event:Connect(function(theme)
                    colorpicker.BlackOutline3.BackgroundColor3 = theme.outlinecolor2
                end)

                colorpicker.hue = Instance.new(""ImageLabel"", colorpicker.MainPicker)
                colorpicker.hue.ZIndex = 101
                colorpicker.hue.Position = UDim2.new(0,3,0,3)
                colorpicker.hue.Size = UDim2.new(0,172,0,172)
                colorpicker.hue.Image = ""rbxassetid://4155801252""
                colorpicker.hue.ScaleType = Enum.ScaleType.Stretch
                colorpicker.hue.BackgroundColor3 = Color3.new(1,0,0)
                colorpicker.hue.BorderColor3 = window.theme.outlinecolor2
                updateevent.Event:Connect(function(theme)
                    colorpicker.hue.BorderColor3 = theme.outlinecolor2
                end)

                colorpicker.hueselectorpointer = Instance.new(""ImageLabel"", colorpicker.MainPicker)
                colorpicker.hueselectorpointer.ZIndex = 101
                colorpicker.hueselectorpointer.BackgroundTransparency = 1
                colorpicker.hueselectorpointer.BorderSizePixel = 0
                colorpicker.hueselectorpointer.Position = UDim2.new(0, 0, 0, 0)
                colorpicker.hueselectorpointer.Size = UDim2.new(0, 7, 0, 7)
                colorpicker.hueselectorpointer.Image = ""rbxassetid://6885856475""

                colorpicker.selector = Instance.new(""TextLabel"", colorpicker.MainPicker)
                colorpicker.selector.ZIndex = 100
                colorpicker.selector.Position = UDim2.new(0,3,0,181)
                colorpicker.selector.Size = UDim2.new(0,173,0,10)
                colorpicker.selector.BackgroundColor3 = Color3.fromRGB(255,255,255)
                colorpicker.selector.BorderColor3 = window.theme.outlinecolor2
                colorpicker.selector.Text = """"
                updateevent.Event:Connect(function(theme)
                    colorpicker.selector.BorderColor3 = theme.outlinecolor2
                end)
    
                colorpicker.gradient = Instance.new(""UIGradient"", colorpicker.selector)
                colorpicker.gradient.Color = ColorSequence.new({ 
                    ColorSequenceKeypoint.new(0, Color3.new(1,0,0)), 
                    ColorSequenceKeypoint.new(0.17, Color3.new(1,0,1)), 
                    ColorSequenceKeypoint.new(0.33,Color3.new(0,0,1)), 
                    ColorSequenceKeypoint.new(0.5,Color3.new(0,1,1)), 
                    ColorSequenceKeypoint.new(0.67, Color3.new(0,1,0)), 
                    ColorSequenceKeypoint.new(0.83, Color3.new(1,1,0)), 
                    ColorSequenceKeypoint.new(1, Color3.new(1,0,0))
                })

                colorpicker.pointer = Instance.new(""Frame"", colorpicker.selector)
                colorpicker.pointer.ZIndex = 101
                colorpicker.pointer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                colorpicker.pointer.Position = UDim2.new(0,0,0,0)
                colorpicker.pointer.Size = UDim2.new(0,2,0,10)
                colorpicker.pointer.BorderColor3 = Color3.fromRGB(255, 255, 255)

                if colorpicker.flag and colorpicker.flag ~= """" then
                    library.flags[colorpicker.flag] = colorpicker.default
                end

                function colorpicker:RefreshSelector()
                    local pos = math.clamp((mouse.X - colorpicker.hue.AbsolutePosition.X) / colorpicker.hue.AbsoluteSize.X, 0, 1)
                    colorpicker.color = 1 - pos
                    colorpicker.pointer:TweenPosition(UDim2.new(pos, 0, 0, 0), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.05)
                    colorpicker.hue.BackgroundColor3 = Color3.fromHSV(1 - pos, 1, 1)
                end

                function colorpicker:RefreshHue()
                    local x = (mouse.X - colorpicker.hue.AbsolutePosition.X) / colorpicker.hue.AbsoluteSize.X
                    local y = (mouse.Y - colorpicker.hue.AbsolutePosition.Y) / colorpicker.hue.AbsoluteSize.Y
                    colorpicker.hueselectorpointer:TweenPosition(UDim2.new(math.clamp(x * colorpicker.hue.AbsoluteSize.X, 0.5, 0.952 * colorpicker.hue.AbsoluteSize.X) / colorpicker.hue.AbsoluteSize.X, 0, math.clamp(y * colorpicker.hue.AbsoluteSize.Y, 0.5, 0.885 * colorpicker.hue.AbsoluteSize.Y) / colorpicker.hue.AbsoluteSize.Y, 0), Enum.EasingDirection.In, Enum.EasingStyle.Sine, 0.05)
                    colorpicker:Set(Color3.fromHSV(colorpicker.color, math.clamp(x * colorpicker.hue.AbsoluteSize.X, 0.5, 1 * colorpicker.hue.AbsoluteSize.X) / colorpicker.hue.AbsoluteSize.X, 1 - (math.clamp(y * colorpicker.hue.AbsoluteSize.Y, 0.5, 1 * colorpicker.hue.AbsoluteSize.Y) / colorpicker.hue.AbsoluteSize.Y)))
                end

                function colorpicker:Set(value)
                    local color = Color3.new(math.clamp(value.r, 0, 1), math.clamp(value.g, 0, 1), math.clamp(value.b, 0, 1))
                    colorpicker.value = color
                    if colorpicker.flag and colorpicker.flag ~= """" then
                        library.flags[colorpicker.flag] = color
                    end
                    local clr = Color3.new(math.clamp(color.R / 1.7, 0, 1), math.clamp(color.G / 1.7, 0, 1), math.clamp(color.B / 1.7, 0, 1))
                    colorpicker.Gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0.00, color), ColorSequenceKeypoint.new(1.00, clr) })
                    pcall(colorpicker.callback, color)
                end
                function colorpicker:Get()
                    return colorpicker.value
                end
                colorpicker:Set(colorpicker.default)

                function colorpicker:AddDropdown(items, default, multichoice, callback, flag)
                    local dropdown = { }

                    dropdown.defaultitems = items or { }
                    dropdown.default = default
                    dropdown.callback = callback or function() end
                    dropdown.multichoice = multichoice or false
                    dropdown.values = { }
                    dropdown.flag = flag or ((colorpicker.text or """") .. tostring( #(sector.Items:GetChildren()) ))
    
                    dropdown.Main = Instance.new(""TextButton"", sector.Items)
                    dropdown.Main.Name = ""dropdown""
                    dropdown.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    dropdown.Main.BorderSizePixel = 0
                    dropdown.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 16)
                    dropdown.Main.Position = UDim2.fromOffset(0, 0)
                    dropdown.Main.ZIndex = 5
                    dropdown.Main.AutoButtonColor = false
                    dropdown.Main.Font = window.theme.font
                    dropdown.Main.Text = """"
                    dropdown.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
                    dropdown.Main.TextSize = 15
                    dropdown.Main.TextXAlignment = Enum.TextXAlignment.Left
                    updateevent.Event:Connect(function(theme)
                        dropdown.Main.Font = theme.font
                    end)
    
                    dropdown.Gradient = Instance.new(""UIGradient"", dropdown.Main)
                    dropdown.Gradient.Rotation = 90
                    dropdown.Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 39, 39))}
    
                    dropdown.SelectedLabel = Instance.new(""TextLabel"", dropdown.Main)
                    dropdown.SelectedLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    dropdown.SelectedLabel.BackgroundTransparency = 1
                    dropdown.SelectedLabel.Position = UDim2.fromOffset(5, 2)
                    dropdown.SelectedLabel.Size = UDim2.fromOffset(130, 13)
                    dropdown.SelectedLabel.Font = window.theme.font
                    dropdown.SelectedLabel.Text = colorpicker.text
                    dropdown.SelectedLabel.ZIndex = 5
                    dropdown.SelectedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    dropdown.SelectedLabel.TextSize = 15
                    dropdown.SelectedLabel.TextStrokeTransparency = 1
                    dropdown.SelectedLabel.TextXAlignment = Enum.TextXAlignment.Left
                    updateevent.Event:Connect(function(theme)
                        dropdown.SelectedLabel.Font = theme.font
                    end)

                    dropdown.Nav = Instance.new(""ImageButton"", dropdown.Main)
                    dropdown.Nav.Name = ""navigation""
                    dropdown.Nav.BackgroundTransparency = 1
                    dropdown.Nav.LayoutOrder = 10
                    dropdown.Nav.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 26, 5)
                    dropdown.Nav.Rotation = 90
                    dropdown.Nav.ZIndex = 5
                    dropdown.Nav.Size = UDim2.fromOffset(8, 8)
                    dropdown.Nav.Image = ""rbxassetid://4918373417""
                    dropdown.Nav.ImageColor3 = Color3.fromRGB(210, 210, 210)
    
                    dropdown.BlackOutline2 = Instance.new(""Frame"", dropdown.Main)
                    dropdown.BlackOutline2.Name = ""blackline""
                    dropdown.BlackOutline2.ZIndex = 4
                    dropdown.BlackOutline2.Size = dropdown.Main.Size + UDim2.fromOffset(6, 6)
                    dropdown.BlackOutline2.BorderSizePixel = 0
                    dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    dropdown.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                    updateevent.Event:Connect(function(theme)
                        dropdown.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                    end)
    
                    dropdown.Outline = Instance.new(""Frame"", dropdown.Main)
                    dropdown.Outline.Name = ""blackline""
                    dropdown.Outline.ZIndex = 4
                    dropdown.Outline.Size = dropdown.Main.Size + UDim2.fromOffset(4, 4)
                    dropdown.Outline.BorderSizePixel = 0
                    dropdown.Outline.BackgroundColor3 = window.theme.outlinecolor
                    dropdown.Outline.Position = UDim2.fromOffset(-2, -2)
                    updateevent.Event:Connect(function(theme)
                        dropdown.Outline.BackgroundColor3 = theme.outlinecolor
                    end)
    
                    dropdown.BlackOutline = Instance.new(""Frame"", dropdown.Main)
                    dropdown.BlackOutline.Name = ""blackline""
                    dropdown.BlackOutline.ZIndex = 4
                    dropdown.BlackOutline.Size = dropdown.Main.Size + UDim2.fromOffset(2, 2)
                    dropdown.BlackOutline.BorderSizePixel = 0
                    dropdown.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                    dropdown.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                    updateevent.Event:Connect(function(theme)
                        dropdown.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                    end)
    
                    dropdown.ItemsFrame = Instance.new(""ScrollingFrame"", dropdown.Main)
                    dropdown.ItemsFrame.Name = ""itemsframe""
                    dropdown.ItemsFrame.BorderSizePixel = 0
                    dropdown.ItemsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    dropdown.ItemsFrame.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
                    dropdown.ItemsFrame.ScrollBarThickness = 2
                    dropdown.ItemsFrame.ZIndex = 8
                    dropdown.ItemsFrame.ScrollingDirection = ""Y""
                    dropdown.ItemsFrame.Visible = false
                    dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.Main.AbsoluteSize.X, 0)
    
                    dropdown.ListLayout = Instance.new(""UIListLayout"", dropdown.ItemsFrame)
                    dropdown.ListLayout.FillDirection = Enum.FillDirection.Vertical
                    dropdown.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
                    dropdown.ListPadding = Instance.new(""UIPadding"", dropdown.ItemsFrame)
                    dropdown.ListPadding.PaddingTop = UDim.new(0, 2)
                    dropdown.ListPadding.PaddingBottom = UDim.new(0, 2)
                    dropdown.ListPadding.PaddingLeft = UDim.new(0, 2)
                    dropdown.ListPadding.PaddingRight = UDim.new(0, 2)
    
                    dropdown.BlackOutline2Items = Instance.new(""Frame"", dropdown.Main)
                    dropdown.BlackOutline2Items.Name = ""blackline""
                    dropdown.BlackOutline2Items.ZIndex = 7
                    dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                    dropdown.BlackOutline2Items.BorderSizePixel = 0
                    dropdown.BlackOutline2Items.BackgroundColor3 = window.theme.outlinecolor2
                    dropdown.BlackOutline2Items.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-3, -3)
                    dropdown.BlackOutline2Items.Visible = false
                    updateevent.Event:Connect(function(theme)
                        dropdown.BlackOutline2Items.BackgroundColor3 = theme.outlinecolor2
                    end)
                    
                    dropdown.OutlineItems = Instance.new(""Frame"", dropdown.Main)
                    dropdown.OutlineItems.Name = ""blackline""
                    dropdown.OutlineItems.ZIndex = 7
                    dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                    dropdown.OutlineItems.BorderSizePixel = 0
                    dropdown.OutlineItems.BackgroundColor3 = window.theme.outlinecolor
                    dropdown.OutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-2, -2)
                    dropdown.OutlineItems.Visible = false
                    updateevent.Event:Connect(function(theme)
                        dropdown.OutlineItems.BackgroundColor3 = theme.outlinecolor
                    end)
    
                    dropdown.BlackOutlineItems = Instance.new(""Frame"", dropdown.Main)
                    dropdown.BlackOutlineItems.Name = ""blackline""
                    dropdown.BlackOutlineItems.ZIndex = 7
                    dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(-2, -2)
                    dropdown.BlackOutlineItems.BorderSizePixel = 0
                    dropdown.BlackOutlineItems.BackgroundColor3 = window.theme.outlinecolor2
                    dropdown.BlackOutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-1, -1)
                    dropdown.BlackOutlineItems.Visible = false
                    updateevent.Event:Connect(function(theme)
                        dropdown.BlackOutlineItems.BackgroundColor3 = theme.outlinecolor2
                    end)
    
                    dropdown.IgnoreBackButtons = Instance.new(""TextButton"", dropdown.Main)
                    dropdown.IgnoreBackButtons.BackgroundTransparency = 1
                    dropdown.IgnoreBackButtons.BorderSizePixel = 0
                    dropdown.IgnoreBackButtons.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
                    dropdown.IgnoreBackButtons.Size = UDim2.new(0, 0, 0, 0)
                    dropdown.IgnoreBackButtons.ZIndex = 7
                    dropdown.IgnoreBackButtons.Text = """"
                    dropdown.IgnoreBackButtons.Visible = false
                    dropdown.IgnoreBackButtons.AutoButtonColor = false

                    if dropdown.flag and dropdown.flag ~= """" then
                        library.flags[dropdown.flag] = dropdown.multichoice and { dropdown.default or dropdown.defaultitems[1] or """" } or (dropdown.default or dropdown.defaultitems[1] or """")
                    end

                    function dropdown:isSelected(item)
                        for i, v in pairs(dropdown.values) do
                            if v == item then
                                return true
                            end
                        end
                        return false
                    end
    
                    function dropdown:updateText(text)
                        if #text >= 27 then
                            text = text:sub(1, 25) .. ""..""
                        end
                        dropdown.SelectedLabel.Text = text
                    end
    
                    dropdown.Changed = Instance.new(""BindableEvent"")
                    function dropdown:Set(value)
                        if type(value) == ""table"" then
                            dropdown.values = value
                            dropdown:updateText(table.concat(value, "", ""))
                            pcall(dropdown.callback, value)
                        else
                            dropdown:updateText(value)
                            dropdown.values = { value }
                            pcall(dropdown.callback, value)
                        end
                        
                        dropdown.Changed:Fire(value)
                        if dropdown.flag and dropdown.flag ~= """" then
                            library.flags[dropdown.flag] = dropdown.multichoice and dropdown.values or dropdown.values[1]
                        end
                    end
    
                    function dropdown:Get()
                        return dropdown.multichoice and dropdown.values or dropdown.values[1]
                    end
    
                    dropdown.items = { }
                    function dropdown:Add(v)
                        local Item = Instance.new(""TextButton"", dropdown.ItemsFrame)
                        Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                        Item.TextColor3 = Color3.fromRGB(255, 255, 255)
                        Item.BorderSizePixel = 0
                        Item.Position = UDim2.fromOffset(0, 0)
                        Item.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset - 4, 20)
                        Item.ZIndex = 9
                        Item.Text = v
                        Item.Name = v
                        Item.AutoButtonColor = false
                        Item.Font = window.theme.font
                        Item.TextSize = 15
                        Item.TextXAlignment = Enum.TextXAlignment.Left
                        Item.TextStrokeTransparency = 1
                        dropdown.ItemsFrame.CanvasSize = dropdown.ItemsFrame.CanvasSize + UDim2.fromOffset(0, Item.AbsoluteSize.Y)
    
                        Item.MouseButton1Down:Connect(function()
                            if dropdown.multichoice then
                                if dropdown:isSelected(v) then
                                    for i2, v2 in pairs(dropdown.values) do
                                        if v2 == v then
                                            table.remove(dropdown.values, i2)
                                        end
                                    end
                                    dropdown:Set(dropdown.values)
                                else
                                    table.insert(dropdown.values, v)
                                    dropdown:Set(dropdown.values)
                                end
    
                                return
                            else
                                dropdown.Nav.Rotation = 90
                                dropdown.ItemsFrame.Visible = false
                                dropdown.ItemsFrame.Active = false
                                dropdown.OutlineItems.Visible = false
                                dropdown.BlackOutlineItems.Visible = false
                                dropdown.BlackOutline2Items.Visible = false
                                dropdown.IgnoreBackButtons.Visible = false
                                dropdown.IgnoreBackButtons.Active = false
                            end
    
                            dropdown:Set(v)
                            return
                        end)
    
                        runservice.RenderStepped:Connect(function()
                            if dropdown.multichoice and dropdown:isSelected(v) or dropdown.values[1] == v then
                                Item.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
                                Item.TextColor3 = window.theme.accentcolor
                                Item.Text = "" "" .. v
                            else
                                Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                                Item.TextColor3 = Color3.fromRGB(255, 255, 255)
                                Item.Text = v
                            end
                        end)
    
                        table.insert(dropdown.items, v)
                        dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * Item.AbsoluteSize.Y, 20, 156) + 4)
                        dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * Item.AbsoluteSize.Y) + 4)
    
                        dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                        dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
                        dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                        dropdown.IgnoreBackButtons.Size = dropdown.ItemsFrame.Size
                    end
    
                    function dropdown:Remove(value)
                        local item = dropdown.ItemsFrame:FindFirstChild(value)
                        if item then
                            for i,v in pairs(dropdown.items) do
                                if v == value then
                                    table.remove(dropdown.items, i)
                                end
                            end
    
                            dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * item.AbsoluteSize.Y, 20, 156) + 4)
                            dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * item.AbsoluteSize.Y) + 4)
        
                            dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
                            dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                            dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                            dropdown.IgnoreBackButtons.Size = dropdown.ItemsFrame.Size
    
                            item:Remove()
                        end
                    end 
    
                    for i,v in pairs(dropdown.defaultitems) do
                        dropdown:Add(v)
                    end
    
                    if dropdown.default then
                        dropdown:Set(dropdown.default)
                    end
    
                    local MouseButton1Down = function()
                        if dropdown.Nav.Rotation == 90 then
                            dropdown.ItemsFrame.ScrollingEnabled = true
                            sector.Main.Parent.ScrollingEnabled = false
                            tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { Rotation = -90 }):Play()
                            dropdown.ItemsFrame.Visible = true
                            dropdown.ItemsFrame.Active = true
                            dropdown.IgnoreBackButtons.Visible = true
                            dropdown.IgnoreBackButtons.Active = true
                            dropdown.OutlineItems.Visible = true
                            dropdown.BlackOutlineItems.Visible = true
                            dropdown.BlackOutline2Items.Visible = true
                        else
                            dropdown.ItemsFrame.ScrollingEnabled = false
                            sector.Main.Parent.ScrollingEnabled = true
                            tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { Rotation = 90 }):Play()
                            dropdown.ItemsFrame.Visible = false
                            dropdown.ItemsFrame.Active = false
                            dropdown.IgnoreBackButtons.Visible = false
                            dropdown.IgnoreBackButtons.Active = false
                            dropdown.OutlineItems.Visible = false
                            dropdown.BlackOutlineItems.Visible = false
                            dropdown.BlackOutline2Items.Visible = false
                        end
                    end
    
                    dropdown.Main.MouseButton1Down:Connect(MouseButton1Down)
                    dropdown.Nav.MouseButton1Down:Connect(MouseButton1Down)
    
                    dropdown.BlackOutline2.MouseEnter:Connect(function()
                        dropdown.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                    end)
                    dropdown.BlackOutline2.MouseLeave:Connect(function()
                        dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                    end)
    
                    sector:FixSize()
                    table.insert(library.items, dropdown)
                    return dropdown
                end

                local dragging_selector = false
                local dragging_hue = false

                colorpicker.selector.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging_selector = true
                        colorpicker:RefreshSelector()
                    end
                end)

                colorpicker.selector.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging_selector = false
                        colorpicker:RefreshSelector()
                    end
                end)

                colorpicker.hue.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging_hue = true
                        colorpicker:RefreshHue()
                    end
                end)

                colorpicker.hue.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging_hue = false
                        colorpicker:RefreshHue()
                    end
                end)

                uis.InputChanged:Connect(function(input)
                    if dragging_selector and input.UserInputType == Enum.UserInputType.MouseMovement then
                        colorpicker:RefreshSelector()
                    end
                    if dragging_hue and input.UserInputType == Enum.UserInputType.MouseMovement then
                        colorpicker:RefreshHue()
                    end
                end)

                local inputBegan = function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        for i,v in pairs(window.OpenedColorPickers) do
                            if v and i ~= colorpicker.MainPicker then
                                i.Visible = false
                                window.OpenedColorPickers[i] = false
                            end
                        end

                        colorpicker.MainPicker.Visible = not colorpicker.MainPicker.Visible
                        window.OpenedColorPickers[colorpicker.MainPicker] = colorpicker.MainPicker.Visible
                        if window.OpenedColorPickers[colorpicker.MainPicker] then
                            colorpicker.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                        else
                            colorpicker.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                        end
                    end
                end

                colorpicker.Main.InputBegan:Connect(inputBegan)
                colorpicker.Outline.InputBegan:Connect(inputBegan)
                colorpicker.BlackOutline2.InputBegan:Connect(inputBegan)

                sector:FixSize()
                table.insert(library.items, colorpicker)
                return colorpicker
            end

            function sector:AddKeybind(text,default,newkeycallback,callback,flag)
                local keybind = { }

                keybind.text = text or """"
                keybind.default = default or ""None""
                keybind.callback = callback or function() end
                keybind.newkeycallback = newkeycallback or function(key) end
                keybind.flag = flag or text or """"

                keybind.value = keybind.default

                keybind.Main = Instance.new(""TextLabel"", sector.Items)
                keybind.Main.BackgroundTransparency = 1
                keybind.Main.Size = UDim2.fromOffset(156, 10)
                keybind.Main.ZIndex = 4
                keybind.Main.Font = window.theme.font
                keybind.Main.Text = keybind.text
                keybind.Main.TextColor3 = window.theme.itemscolor
                keybind.Main.TextSize = 15
                keybind.Main.TextStrokeTransparency = 1
                keybind.Main.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    keybind.Main.Font = theme.font
                    keybind.Main.TextColor3 = theme.itemscolor
                end)

                keybind.Bind = Instance.new(""TextButton"", keybind.Main)
                keybind.Bind.Name = ""keybind""
                keybind.Bind.BackgroundTransparency = 1
                keybind.Bind.BorderColor3 = window.theme.outlinecolor
                keybind.Bind.ZIndex = 5
                keybind.Bind.BorderSizePixel = 0
                keybind.Bind.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 10, 0)
                keybind.Bind.Font = window.theme.font
                keybind.Bind.TextColor3 = Color3.fromRGB(136, 136, 136)
                keybind.Bind.TextSize = 15
                keybind.Bind.TextXAlignment = Enum.TextXAlignment.Right
                keybind.Bind.MouseButton1Down:Connect(function()
                    keybind.Bind.Text = ""[...]""
                    keybind.Bind.TextColor3 = window.theme.accentcolor
                end)
                updateevent.Event:Connect(function(theme)
                    keybind.Bind.BorderColor3 = theme.outlinecolor
                    keybind.Bind.Font = theme.font
                end)

                if keybind.flag and keybind.flag ~= """" then
                    library.flags[keybind.flag] = keybind.default
                end

                local shorter_keycodes = {
                    [""LeftShift""] = ""LSHIFT"",
                    [""RightShift""] = ""RSHIFT"",
                    [""LeftControl""] = ""LCTRL"",
                    [""RightControl""] = ""RCTRL"",
                    [""LeftAlt""] = ""LALT"",
                    [""RightAlt""] = ""RALT""
                }

                function keybind:Set(value)
                    if value == ""None"" then
                        keybind.value = value
                        keybind.Bind.Text = ""["" .. value .. ""]""
    
                        local size = textservice:GetTextSize(keybind.Bind.Text, keybind.Bind.TextSize, keybind.Bind.Font, Vector2.new(2000, 2000))
                        keybind.Bind.Size = UDim2.fromOffset(size.X, size.Y)
                        keybind.Bind.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 10 - keybind.Bind.AbsoluteSize.X, 0)
                        if keybind.flag and keybind.flag ~= """" then
                            library.flags[keybind.flag] = value
                        end
                        pcall(keybind.newkeycallback, value)
                    end

                    keybind.value = value
                    keybind.Bind.Text = ""["" .. (shorter_keycodes[value.Name or value] or (value.Name or value)) .. ""]""

                    local size = textservice:GetTextSize(keybind.Bind.Text, keybind.Bind.TextSize, keybind.Bind.Font, Vector2.new(2000, 2000))
                    keybind.Bind.Size = UDim2.fromOffset(size.X, size.Y)
                    keybind.Bind.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 10 - keybind.Bind.AbsoluteSize.X, 0)
                    if keybind.flag and keybind.flag ~= """" then
                        library.flags[keybind.flag] = value
                    end
                    pcall(keybind.newkeycallback, value)
                end
                keybind:Set(keybind.default and keybind.default or ""None"")

                function keybind:Get()
                    return keybind.value
                end

                uis.InputBegan:Connect(function(input, gameProcessed)
                    if not gameProcessed then
                        if keybind.Bind.Text == ""[...]"" then
                            keybind.Bind.TextColor3 = Color3.fromRGB(136, 136, 136)
                            if input.UserInputType == Enum.UserInputType.Keyboard then
                                keybind:Set(input.KeyCode)
                            else
                                keybind:Set(""None"")
                            end
                        else
                            if keybind.value ~= ""None"" and input.KeyCode == keybind.value then
                                pcall(keybind.callback)
                            end
                        end
                    end
                end)

                sector:FixSize()
                table.insert(library.items, keybind)
                return keybind
            end

            function sector:AddDropdown(text, items, default, multichoice, callback, flag)
                local dropdown = { }

                dropdown.text = text or """"
                dropdown.defaultitems = items or { }
                dropdown.default = default
                dropdown.callback = callback or function() end
                dropdown.multichoice = multichoice or false
                dropdown.values = { }
                dropdown.flag = flag or text or """"

                dropdown.MainBack = Instance.new(""Frame"", sector.Items)
                dropdown.MainBack.Name = ""backlabel""
                dropdown.MainBack.ZIndex = 7
                dropdown.MainBack.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 34)
                dropdown.MainBack.BorderSizePixel = 0
                dropdown.MainBack.BackgroundTransparency = 1

                dropdown.Label = Instance.new(""TextLabel"", dropdown.MainBack)
                dropdown.Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                dropdown.Label.BackgroundTransparency = 1
                dropdown.Label.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 10)
                dropdown.Label.Position = UDim2.fromOffset(0, 0)
                dropdown.Label.Font = window.theme.font
                dropdown.Label.Text = dropdown.text
                dropdown.Label.ZIndex = 4
                dropdown.Label.TextColor3 = window.theme.itemscolor
                dropdown.Label.TextSize = 15
                dropdown.Label.TextStrokeTransparency = 1
                dropdown.Label.TextXAlignment = Enum.TextXAlignment.Left

                updateevent.Event:Connect(function(theme)
                    dropdown.Label.Font = theme.font
                    dropdown.Label.TextColor3 = theme.itemscolor
                end)

                dropdown.Main = Instance.new(""TextButton"", dropdown.MainBack)
                dropdown.Main.Name = ""dropdown""
                dropdown.Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                dropdown.Main.BorderSizePixel = 0
                dropdown.Main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 16)
                dropdown.Main.Position = UDim2.fromOffset(0, 17)
                dropdown.Main.ZIndex = 5
                dropdown.Main.AutoButtonColor = false
                dropdown.Main.Font = window.theme.font
                dropdown.Main.Text = """"
                dropdown.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
                dropdown.Main.TextSize = 15
                dropdown.Main.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    dropdown.Main.Font = theme.font
                end)

                dropdown.Gradient = Instance.new(""UIGradient"", dropdown.Main)
                dropdown.Gradient.Rotation = 90
                dropdown.Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 39, 39))}

                dropdown.SelectedLabel = Instance.new(""TextLabel"", dropdown.Main)
                dropdown.SelectedLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                dropdown.SelectedLabel.BackgroundTransparency = 1
                dropdown.SelectedLabel.Position = UDim2.fromOffset(5, 2)
                dropdown.SelectedLabel.Size = UDim2.fromOffset(130, 13)
                dropdown.SelectedLabel.Font = window.theme.font
                dropdown.SelectedLabel.Text = dropdown.text
                dropdown.SelectedLabel.ZIndex = 5
                dropdown.SelectedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                dropdown.SelectedLabel.TextSize = 15
                dropdown.SelectedLabel.TextStrokeTransparency = 1
                dropdown.SelectedLabel.TextXAlignment = Enum.TextXAlignment.Left
                updateevent.Event:Connect(function(theme)
                    dropdown.SelectedLabel.Font = theme.font
                end)

                dropdown.Nav = Instance.new(""ImageButton"", dropdown.Main)
                dropdown.Nav.Name = ""navigation""
                dropdown.Nav.BackgroundTransparency = 1
                dropdown.Nav.LayoutOrder = 10
                dropdown.Nav.Position = UDim2.fromOffset(sector.Main.Size.X.Offset - 26, 5)
                dropdown.Nav.Rotation = 90
                dropdown.Nav.ZIndex = 5
                dropdown.Nav.Size = UDim2.fromOffset(8, 8)
                dropdown.Nav.Image = ""rbxassetid://4918373417""
                dropdown.Nav.ImageColor3 = Color3.fromRGB(210, 210, 210)

                dropdown.BlackOutline2 = Instance.new(""Frame"", dropdown.Main)
                dropdown.BlackOutline2.Name = ""blackline""
                dropdown.BlackOutline2.ZIndex = 4
                dropdown.BlackOutline2.Size = dropdown.Main.Size + UDim2.fromOffset(6, 6)
                dropdown.BlackOutline2.BorderSizePixel = 0
                dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                dropdown.BlackOutline2.Position = UDim2.fromOffset(-3, -3)
                updateevent.Event:Connect(function(theme)
                    dropdown.BlackOutline2.BackgroundColor3 = theme.outlinecolor2
                end)

                dropdown.Outline = Instance.new(""Frame"", dropdown.Main)
                dropdown.Outline.Name = ""blackline""
                dropdown.Outline.ZIndex = 4
                dropdown.Outline.Size = dropdown.Main.Size + UDim2.fromOffset(4, 4)
                dropdown.Outline.BorderSizePixel = 0
                dropdown.Outline.BackgroundColor3 = window.theme.outlinecolor
                dropdown.Outline.Position = UDim2.fromOffset(-2, -2)
                updateevent.Event:Connect(function(theme)
                    dropdown.Outline.BackgroundColor3 = theme.outlinecolor
                end)

                dropdown.BlackOutline = Instance.new(""Frame"", dropdown.Main)
                dropdown.BlackOutline.Name = ""blackline""
                dropdown.BlackOutline.ZIndex = 4
                dropdown.BlackOutline.Size = dropdown.Main.Size + UDim2.fromOffset(2, 2)
                dropdown.BlackOutline.BorderSizePixel = 0
                dropdown.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
                dropdown.BlackOutline.Position = UDim2.fromOffset(-1, -1)
                updateevent.Event:Connect(function(theme)
                    dropdown.BlackOutline.BackgroundColor3 = theme.outlinecolor2
                end)

                dropdown.ItemsFrame = Instance.new(""ScrollingFrame"", dropdown.Main)
                dropdown.ItemsFrame.Name = ""itemsframe""
                dropdown.ItemsFrame.BorderSizePixel = 0
                dropdown.ItemsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                dropdown.ItemsFrame.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
                dropdown.ItemsFrame.ScrollBarThickness = 2
                dropdown.ItemsFrame.ZIndex = 8
                dropdown.ItemsFrame.ScrollingDirection = ""Y""
                dropdown.ItemsFrame.Visible = false
                dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.Main.AbsoluteSize.X, 0)

                dropdown.ListLayout = Instance.new(""UIListLayout"", dropdown.ItemsFrame)
                dropdown.ListLayout.FillDirection = Enum.FillDirection.Vertical
                dropdown.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder

                dropdown.ListPadding = Instance.new(""UIPadding"", dropdown.ItemsFrame)
                dropdown.ListPadding.PaddingTop = UDim.new(0, 2)
                dropdown.ListPadding.PaddingBottom = UDim.new(0, 2)
                dropdown.ListPadding.PaddingLeft = UDim.new(0, 2)
                dropdown.ListPadding.PaddingRight = UDim.new(0, 2)

                dropdown.BlackOutline2Items = Instance.new(""Frame"", dropdown.Main)
                dropdown.BlackOutline2Items.Name = ""blackline""
                dropdown.BlackOutline2Items.ZIndex = 7
                dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                dropdown.BlackOutline2Items.BorderSizePixel = 0
                dropdown.BlackOutline2Items.BackgroundColor3 = window.theme.outlinecolor2
                dropdown.BlackOutline2Items.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-3, -3)
                dropdown.BlackOutline2Items.Visible = false
                updateevent.Event:Connect(function(theme)
                    dropdown.BlackOutline2Items.BackgroundColor3 = theme.outlinecolor2
                end)

                dropdown.OutlineItems = Instance.new(""Frame"", dropdown.Main)
                dropdown.OutlineItems.Name = ""blackline""
                dropdown.OutlineItems.ZIndex = 7
                dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                dropdown.OutlineItems.BorderSizePixel = 0
                dropdown.OutlineItems.BackgroundColor3 = window.theme.outlinecolor
                dropdown.OutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-2, -2)
                dropdown.OutlineItems.Visible = false
                updateevent.Event:Connect(function(theme)
                    dropdown.OutlineItems.BackgroundColor3 = theme.outlinecolor
                end)

                dropdown.BlackOutlineItems = Instance.new(""Frame"", dropdown.Main)
                dropdown.BlackOutlineItems.Name = ""blackline""
                dropdown.BlackOutlineItems.ZIndex = 7
                dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(-2, -2)
                dropdown.BlackOutlineItems.BorderSizePixel = 0
                dropdown.BlackOutlineItems.BackgroundColor3 = window.theme.outlinecolor2
                dropdown.BlackOutlineItems.Position = dropdown.ItemsFrame.Position + UDim2.fromOffset(-1, -1)
                dropdown.BlackOutlineItems.Visible = false
                updateevent.Event:Connect(function(theme)
                    dropdown.BlackOutlineItems.BackgroundColor3 = theme.outlinecolor2
                end)

                dropdown.IgnoreBackButtons = Instance.new(""TextButton"", dropdown.Main)
                dropdown.IgnoreBackButtons.BackgroundTransparency = 1
                dropdown.IgnoreBackButtons.BorderSizePixel = 0
                dropdown.IgnoreBackButtons.Position = UDim2.fromOffset(0, dropdown.Main.Size.Y.Offset + 8)
                dropdown.IgnoreBackButtons.Size = UDim2.new(0, 0, 0, 0)
                dropdown.IgnoreBackButtons.ZIndex = 7
                dropdown.IgnoreBackButtons.Text = """"
                dropdown.IgnoreBackButtons.Visible = false
                dropdown.IgnoreBackButtons.AutoButtonColor = false

                if dropdown.flag and dropdown.flag ~= """" then
                    library.flags[dropdown.flag] = dropdown.multichoice and { dropdown.default or dropdown.defaultitems[1] or """" } or (dropdown.default or dropdown.defaultitems[1] or """")
                end

                function dropdown:isSelected(item)
                    for i, v in pairs(dropdown.values) do
                        if v == item then
                            return true
                        end
                    end
                    return false
                end

                function dropdown:GetOptions()
                    return dropdown.values
                end

                function dropdown:updateText(text)
                    if #text >= 27 then
                        text = text:sub(1, 25) .. ""..""
                    end
                    dropdown.SelectedLabel.Text = text
                end

                dropdown.Changed = Instance.new(""BindableEvent"")
                function dropdown:Set(value)
                    if type(value) == ""table"" then
                        dropdown.values = value
                        dropdown:updateText(table.concat(value, "", ""))
                        pcall(dropdown.callback, value)
                    else
                        dropdown:updateText(value)
                        dropdown.values = { value }
                        pcall(dropdown.callback, value)
                    end
                    
                    dropdown.Changed:Fire(value)
                    if dropdown.flag and dropdown.flag ~= """" then
                        library.flags[dropdown.flag] = dropdown.multichoice and dropdown.values or dropdown.values[1]
                    end
                end

                function dropdown:Get()
                    return dropdown.multichoice and dropdown.values or dropdown.values[1]
                end

                dropdown.items = { }
                function dropdown:Add(v)
                    local Item = Instance.new(""TextButton"", dropdown.ItemsFrame)
                    Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    Item.TextColor3 = Color3.fromRGB(255, 255, 255)
                    Item.BorderSizePixel = 0
                    Item.Position = UDim2.fromOffset(0, 0)
                    Item.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset - 4, 20)
                    Item.ZIndex = 9
                    Item.Text = v
                    Item.Name = v
                    Item.AutoButtonColor = false
                    Item.Font = window.theme.font
                    Item.TextSize = 15
                    Item.TextXAlignment = Enum.TextXAlignment.Left
                    Item.TextStrokeTransparency = 1
                    dropdown.ItemsFrame.CanvasSize = dropdown.ItemsFrame.CanvasSize + UDim2.fromOffset(0, Item.AbsoluteSize.Y)

                    Item.MouseButton1Down:Connect(function()
                        if dropdown.multichoice then
                            if dropdown:isSelected(v) then
                                for i2, v2 in pairs(dropdown.values) do
                                    if v2 == v then
                                        table.remove(dropdown.values, i2)
                                    end
                                end
                                dropdown:Set(dropdown.values)
                            else
                                table.insert(dropdown.values, v)
                                dropdown:Set(dropdown.values)
                            end

                            return
                        else
                            dropdown.Nav.Rotation = 90
                            dropdown.ItemsFrame.Visible = false
                            dropdown.ItemsFrame.Active = false
                            dropdown.OutlineItems.Visible = false
                            dropdown.BlackOutlineItems.Visible = false
                            dropdown.BlackOutline2Items.Visible = false
                            dropdown.IgnoreBackButtons.Visible = false
                            dropdown.IgnoreBackButtons.Active = false
                        end

                        dropdown:Set(v)
                        return
                    end)

                    runservice.RenderStepped:Connect(function()
                        if dropdown.multichoice and dropdown:isSelected(v) or dropdown.values[1] == v then
                            Item.BackgroundColor3 = Color3.fromRGB(64, 64, 64)
                            Item.TextColor3 = window.theme.accentcolor
                            Item.Text = "" "" .. v
                        else
                            Item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                            Item.TextColor3 = Color3.fromRGB(255, 255, 255)
                            Item.Text = v
                        end
                    end)

                    table.insert(dropdown.items, v)
                    dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * Item.AbsoluteSize.Y, 20, 156) + 4)
                    dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * Item.AbsoluteSize.Y) + 4)

                    dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                    dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
                    dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                    dropdown.IgnoreBackButtons.Size = dropdown.ItemsFrame.Size
                end

                function dropdown:Remove(value)
                    local item = dropdown.ItemsFrame:FindFirstChild(value)
                    if item then
                        for i,v in pairs(dropdown.items) do
                            if v == value then
                                table.remove(dropdown.items, i)
                            end
                        end

                        dropdown.ItemsFrame.Size = UDim2.fromOffset(dropdown.Main.Size.X.Offset, math.clamp(#dropdown.items * item.AbsoluteSize.Y, 20, 156) + 4)
                        dropdown.ItemsFrame.CanvasSize = UDim2.fromOffset(dropdown.ItemsFrame.AbsoluteSize.X, (#dropdown.items * item.AbsoluteSize.Y) + 4)
    
                        dropdown.OutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(2, 2)
                        dropdown.BlackOutlineItems.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(4, 4)
                        dropdown.BlackOutline2Items.Size = dropdown.ItemsFrame.Size + UDim2.fromOffset(6, 6)
                        dropdown.IgnoreBackButtons.Size = dropdown.ItemsFrame.Size

                        item:Remove()
                    end
                end 

                for i,v in pairs(dropdown.defaultitems) do
                    dropdown:Add(v)
                end

                if dropdown.default then
                    dropdown:Set(dropdown.default)
                end

                local MouseButton1Down = function()
                    if dropdown.Nav.Rotation == 90 then
                        tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { Rotation = -90 }):Play()
                        if dropdown.items and #dropdown.items ~= 0 then
                            dropdown.ItemsFrame.ScrollingEnabled = true
                            sector.Main.Parent.ScrollingEnabled = false
                            dropdown.ItemsFrame.Visible = true
                            dropdown.ItemsFrame.Active = true
                            dropdown.IgnoreBackButtons.Visible = true
                            dropdown.IgnoreBackButtons.Active = true
                            dropdown.OutlineItems.Visible = true
                            dropdown.BlackOutlineItems.Visible = true
                            dropdown.BlackOutline2Items.Visible = true
                        end
                    else
                        tweenservice:Create(dropdown.Nav, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), { Rotation = 90 }):Play()
                        dropdown.ItemsFrame.ScrollingEnabled = false
                        sector.Main.Parent.ScrollingEnabled = true
                        dropdown.ItemsFrame.Visible = false
                        dropdown.ItemsFrame.Active = false
                        dropdown.IgnoreBackButtons.Visible = false
                        dropdown.IgnoreBackButtons.Active = false
                        dropdown.OutlineItems.Visible = false
                        dropdown.BlackOutlineItems.Visible = false
                        dropdown.BlackOutline2Items.Visible = false
                    end
                end

                dropdown.Main.MouseButton1Down:Connect(MouseButton1Down)
                dropdown.Nav.MouseButton1Down:Connect(MouseButton1Down)

                dropdown.BlackOutline2.MouseEnter:Connect(function()
                    dropdown.BlackOutline2.BackgroundColor3 = window.theme.accentcolor
                end)
                dropdown.BlackOutline2.MouseLeave:Connect(function()
                    dropdown.BlackOutline2.BackgroundColor3 = window.theme.outlinecolor2
                end)

                sector:FixSize()
                table.insert(library.items, dropdown)
                return dropdown
            end

            function sector:AddSeperator(text)
                local seperator = { }
                seperator.text = text or """"

                seperator.main = Instance.new(""Frame"", sector.Items)
                seperator.main.Name = ""Main""
                seperator.main.ZIndex = 5
                seperator.main.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 12, 10)
                seperator.main.BorderSizePixel = 0
                seperator.main.BackgroundTransparency = 1

                seperator.line = Instance.new(""Frame"", seperator.main)
                seperator.line.Name = ""Line""
                seperator.line.ZIndex = 7
                seperator.line.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                seperator.line.BorderSizePixel = 0
                seperator.line.Size = UDim2.fromOffset(sector.Main.Size.X.Offset - 26, 1)
                seperator.line.Position = UDim2.fromOffset(7, 5)

                seperator.outline = Instance.new(""Frame"", seperator.line)
                seperator.outline.Name = ""Outline""
                seperator.outline.ZIndex = 6
                seperator.outline.BorderSizePixel = 0
                seperator.outline.BackgroundColor3 = window.theme.outlinecolor2
                seperator.outline.Position = UDim2.fromOffset(-1, -1)
                seperator.outline.Size = seperator.line.Size - UDim2.fromOffset(-2, -2)
                updateevent.Event:Connect(function(theme)
                    seperator.outline.BackgroundColor3 = theme.outlinecolor2
                end)

                seperator.label = Instance.new(""TextLabel"", seperator.main)
                seperator.label.Name = ""Label""
                seperator.label.BackgroundTransparency = 1
                seperator.label.Size = seperator.main.Size
                seperator.label.Font = window.theme.font
                seperator.label.ZIndex = 8
                seperator.label.Text = seperator.text
                seperator.label.TextColor3 = Color3.fromRGB(255, 255, 255)
                seperator.label.TextSize = window.theme.fontsize
                seperator.label.TextStrokeTransparency = 1
                seperator.label.TextXAlignment = Enum.TextXAlignment.Center
                updateevent.Event:Connect(function(theme)
                    seperator.label.Font = theme.font
                    seperator.label.TextSize = theme.fontsize
                end)

                local textSize = textservice:GetTextSize(seperator.text, window.theme.fontsize, window.theme.font, Vector2.new(2000, 2000))
                local textStart = seperator.main.AbsoluteSize.X / 2 - (textSize.X / 2)

                sector.LabelBackFrame = Instance.new(""Frame"", seperator.main)
                sector.LabelBackFrame.Name = ""LabelBack""
                sector.LabelBackFrame.ZIndex = 7
                sector.LabelBackFrame.Size = UDim2.fromOffset(textSize.X + 12, 10)
                sector.LabelBackFrame.BorderSizePixel = 0
                sector.LabelBackFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                sector.LabelBackFrame.Position = UDim2.new(0, textStart - 6, 0, 0)
                updateevent.Event:Connect(function(theme)
                    textSize = textservice:GetTextSize(seperator.text, theme.fontsize, theme.font, Vector2.new(2000, 2000))
                    textStart = seperator.main.AbsoluteSize.X / 2 - (textSize.X / 2)

                    sector.LabelBackFrame.Size = UDim2.fromOffset(textSize.X + 12, 10)
                    sector.LabelBackFrame.Position = UDim2.new(0, textStart - 6, 0, 0)
                end)

                sector:FixSize()
                return seperator
            end

            return sector
        end

        function tab:CreateConfigSystem(side)
            local configSystem = { }

            configSystem.configFolder = window.name .. ""/"" .. tostring(game.PlaceId)
            if (not isfolder(configSystem.configFolder)) then
                makefolder(configSystem.configFolder)
            end

            configSystem.sector = tab:CreateSector(""Configs"", side or ""left"")

            local ConfigName = configSystem.sector:AddTextbox(""Config Name"", """", ConfigName, function() end, """")
            local default = tostring(listfiles(configSystem.configFolder)[1] or """"):gsub(configSystem.configFolder .. ""\\"", """"):gsub("".txt"", """")
            local Config = configSystem.sector:AddDropdown(""Configs"", {}, default, false, function() end, """")
            for i,v in pairs(listfiles(configSystem.configFolder)) do
                if v:find("".txt"") then
                    Config:Add(tostring(v):gsub(configSystem.configFolder .. ""\\"", """"):gsub("".txt"", """"))
                end
            end

            configSystem.Create = configSystem.sector:AddButton(""Create"", function()
                for i,v in pairs(listfiles(configSystem.configFolder)) do
                    Config:Remove(tostring(v):gsub(configSystem.configFolder .. ""\\"", """"):gsub("".txt"", """"))
                end

                if ConfigName:Get() and ConfigName:Get() ~= """" then
                    local config = {}
    
                    for i,v in pairs(library.flags) do
                        if (v ~= nil and v ~= """") then
                            if (typeof(v) == ""Color3"") then
                                config[i] = { v.R, v.G, v.B }
                            elseif (tostring(v):find(""Enum.KeyCode"")) then
                                config[i] = v.Name
                            elseif (typeof(v) == ""table"") then
                                config[i] = { v }
                            else
                                config[i] = v
                            end
                        end
                    end
    
                    writefile(configSystem.configFolder .. ""/"" .. ConfigName:Get() .. "".txt"", httpservice:JSONEncode(config))
    
                    for i,v in pairs(listfiles(configSystem.configFolder)) do
                        if v:find("".txt"") then
                            Config:Add(tostring(v):gsub(configSystem.configFolder .. ""\\"", """"):gsub("".txt"", """"))
                        end
                    end
                end
            end)

            configSystem.Save = configSystem.sector:AddButton(""Save"", function()
                local config = {}
                if Config:Get() and Config:Get() ~= """" then
                    for i,v in pairs(library.flags) do
                        if (v ~= nil and v ~= """") then
                            if (typeof(v) == ""Color3"") then
                                config[i] = { v.R, v.G, v.B }
                            elseif (tostring(v):find(""Enum.KeyCode"")) then
                                config[i] = ""Enum.KeyCode."" .. v.Name
                            elseif (typeof(v) == ""table"") then
                                config[i] = { v }
                            else
                                config[i] = v
                            end
                        end
                    end
    
                    writefile(configSystem.configFolder .. ""/"" .. Config:Get() .. "".txt"", httpservice:JSONEncode(config))
                end
            end)

            configSystem.Load = configSystem.sector:AddButton(""Load"", function()
                local Success = pcall(readfile, configSystem.configFolder .. ""/"" .. Config:Get() .. "".txt"")
                if (Success) then
                    pcall(function() 
                        local ReadConfig = httpservice:JSONDecode(readfile(configSystem.configFolder .. ""/"" .. Config:Get() .. "".txt""))
                        local NewConfig = {}
    
                        for i,v in pairs(ReadConfig) do
                            if (typeof(v) == ""table"") then
                                if (typeof(v[1]) == ""number"") then
                                    NewConfig[i] = Color3.new(v[1], v[2], v[3])
                                elseif (typeof(v[1]) == ""table"") then
                                    NewConfig[i] = v[1]
                                end
                            elseif (tostring(v):find(""Enum.KeyCode."")) then
                                NewConfig[i] = Enum.KeyCode[tostring(v):gsub(""Enum.KeyCode."", """")]
                            else
                                NewConfig[i] = v
                            end
                        end
    
                        library.flags = NewConfig
    
                        for i,v in pairs(library.flags) do
                            for i2,v2 in pairs(library.items) do
                                if (i ~= nil and i ~= """" and i ~= ""Configs_Name"" and i ~= ""Configs"" and v2.flag ~= nil) then
                                    if (v2.flag == i) then
                                        pcall(function() 
                                            v2:Set(v)
                                        end)
                                    end
                                end
                            end
                        end
                    end)
                end
            end)

            configSystem.Delete = configSystem.sector:AddButton(""Delete"", function()
                for i,v in pairs(listfiles(configSystem.configFolder)) do
                    Config:Remove(tostring(v):gsub(configSystem.configFolder .. ""\\"", """"):gsub("".txt"", """"))
                end

                if (not Config:Get() or Config:Get() == """") then return end
                if (not isfile(configSystem.configFolder .. ""/"" .. Config:Get() .. "".txt"")) then return end
                delfile(configSystem.configFolder .. ""/"" .. Config:Get() .. "".txt"")

                for i,v in pairs(listfiles(configSystem.configFolder)) do
                    if v:find("".txt"") then
                        Config:Add(tostring(v):gsub(configSystem.configFolder .. ""\\"", """"):gsub("".txt"", """"))
                    end
                end
            end)

            return configSystem
        end

        --[[ not finished lol
        function tab:CreatePlayerlist(name)
            local list = { }
            list.name = name or """"

            list.Main = Instance.new(""Frame"", tab.TabPage) 
            list.Main.Name = list.name:gsub("" "", """") .. ""Sector""
            list.Main.BorderColor3 = window.theme.outlinecolor
            list.Main.ZIndex = 2
            list.Main.Size = UDim2.fromOffset(window.size.X.Offset - 22, 220)
            list.Main.BackgroundColor3 = window.theme.sectorcolor
            list.Main.Position = UDim2.new(0, 11, 0, 12)

            tab.SectorsLeft[#tab.SectorsLeft + 1] = 220
            --tab.SectorsRight[#tab.SectorsLeft + 1].space = 220

            list.Line = Instance.new(""Frame"", list.Main)
            list.Line.Name = ""line""
            list.Line.ZIndex = 2
            list.Line.Size = UDim2.fromOffset(list.Main.Size.X.Offset + 2, 1)
            list.Line.BorderSizePixel = 0
            list.Line.Position = UDim2.fromOffset(-1, -1)
            list.Line.BackgroundColor3 = window.theme.accentcolor

            list.BlackOutline = Instance.new(""Frame"", list.Main)
            list.BlackOutline.Name = ""blackline""
            list.BlackOutline.ZIndex = 1
            list.BlackOutline.Size = list.Main.Size + UDim2.fromOffset(4, 4)
            list.BlackOutline.BorderSizePixel = 0
            list.BlackOutline.BackgroundColor3 = window.theme.outlinecolor2
            list.BlackOutline.Position = UDim2.fromOffset(-2, -2)

            local size = textservice:GetTextSize(list.name, 13, window.theme.font, Vector2.new(2000, 2000))
            list.Label = Instance.new(""TextLabel"", list.Main)
            list.Label.AnchorPoint = Vector2.new(0,0.5)
            list.Label.Position = UDim2.fromOffset(12, -1)
            list.Label.Size = UDim2.fromOffset(math.clamp(textservice:GetTextSize(list.name, 13, window.theme.font, Vector2.new(200,300)).X + 10, 0, list.Main.Size.X.Offset), size.Y)
            list.Label.BackgroundTransparency = 1
            list.Label.BorderSizePixel = 0
            list.Label.ZIndex = 4
            list.Label.Text = list.name
            list.Label.TextColor3 = Color3.new(1,1,2552/255)
            list.Label.TextStrokeTransparency = 1
            list.Label.Font = window.theme.font
            list.Label.TextSize = 13

            list.LabelBackFrame = Instance.new(""Frame"", list.Label)
            list.LabelBackFrame.Name = ""labelframe""
            list.LabelBackFrame.ZIndex = 3
            list.LabelBackFrame.Size = UDim2.fromOffset(list.Label.Size.X.Offset, 10)
            list.LabelBackFrame.BorderSizePixel = 0
            list.LabelBackFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            list.LabelBackFrame.Position = UDim2.fromOffset(0, 6)

            list.Items = Instance.new(""ScrollingFrame"", list.Main) 
            list.Items.Name = ""items""
            list.Items.ZIndex = 2
            list.Items.ScrollBarThickness = 1
            list.Items.BackgroundTransparency = 1
            list.Items.Size = list.Main.Size - UDim2.fromOffset(10, 15)
            list.Items.ScrollingDirection = ""Y""
            list.Items.BorderSizePixel = 0
            list.Items.Position = UDim2.fromOffset(5, 10)
            list.Items.CanvasSize = list.Items.Size

            list.ListLayout = Instance.new(""UIListLayout"", list.Items)
            list.ListLayout.FillDirection = Enum.FillDirection.Vertical
            list.ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            list.ListLayout.Padding = UDim.new(0, 0)

            list.ListPadding = Instance.new(""UIPadding"", list.Items)
            list.ListPadding.PaddingTop = UDim.new(0, 2)
            list.ListPadding.PaddingLeft = UDim.new(0, 6)
            list.ListPadding.PaddingRight = UDim.new(0, 6)

            list.items = { }
            function list:AddPlayer(Player)
                local player = { }

                player.Main = Instance.new(""Frame"", list.Items)
                player.Main.Name = Player.Name
                player.Main.BorderColor3 = window.theme.outlinecolor
                player.Main.ZIndex = 3
                player.Main.Size = UDim2.fromOffset(list.Items.AbsoluteSize.X - 12, 20)
                player.Main.BackgroundColor3 = window.theme.sectorcolor
                player.Main.Position = UDim2.new(0, 0, 0, 0)

                table.insert(list.items, Player)
                list.Items.CanvasSize = UDim2.fromOffset(list.Items.AbsoluteSize.X, (#list.items * 20))
                list.Items.Size = UDim2.fromOffset(list.Items.AbsoluteSize.X, math.clamp(list.Items.CanvasSize.Y.Offset, 0, 205))
                return player
            end

            function list:RemovePlayer(Player)
                local p = list.Items:FindFirstChild(Player)
                if p then
                    for i,v in pairs(list.items) do
                        if v == Player then
                            table.remove(list.items, i)
                        end
                    end

                    p:Remove()
                    list.Items.CanvasSize = UDim2.fromOffset(list.Items.AbsoluteSize.X, (#list.items * 90))
                end
            end

            for i,v in pairs(game:GetService(""Players""):GetPlayers()) do
                list:AddPlayer(v)
            end
            
            game:GetService(""Players"").PlayerAdded:Connect(function(v)
                list:AddPlayer(v)
            end)
            
            return list
        end
        ]]--

        table.insert(window.Tabs, tab)
        return tab
    end

    return window
end


local Version = {
    Value = ""0.0.1""
}

local target_aim = {
    Aiming = {
        Target = {
            Enabled = nil,
            Key = nil,
            Prediction = nil,
            Radius = nil,
            TargetPart = nil,
            Alerts = nil,
            JumpOffset = nil,
            TargetStats = nil,
            LookAt = nil
        }
    }
}




-- UI Name --

local NotifyLibrary = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua""))()
local Notify = NotifyLibrary.Notify
local Window = library:CreateWindow(""DOA (Dead on Arrival) | Priv V0.0.1"", Vector2.new(492, 592), Enum.KeyCode.RightShift) 

-- Script Tabs --
local LegitTab = Window:CreateTab(""Legit"")
local RageTab = Window:CreateTab(""Rage"")

-- Tabs --
local MovementTab = RageTab:CreateSector(""Movement"", ""left"")
local AASec = RageTab:CreateSector(""Anti Lock"", ""right"")

-- Sections --
local SoftAimSection = LegitTab:CreateSector(""Silent"", ""left"")
local FOVection = LegitTab:CreateSector(""FOV"", ""left"")
local TracerSection = LegitTab:CreateSector(""Tracer"", ""right"")
local ResolverSection = LegitTab:CreateSector(""Resolver"", ""left"")
local CheckSection = LegitTab:CreateSector(""Checks"", ""right"")
local TargetLockSection = RageTab:CreateSector(""Target"", ""left"") 

-- Soft Aim Section --

SoftAimSection:AddToggle(""Soft Aim Enabled"", false, function(boolean)
    getgenv().DOAPriv.Silent.Enabled = boolean
end)

SoftAimSection:AddDropdown(""Chosen Hit Part"", {""Head"", ""UpperTorso"",""HumanoidRootPart"",""LowerTorso""}, ""HumanoidRootPart"", false, function(chosen)
    getgenv().DOAPriv.Silent.AimPart = chosen
end)

SoftAimSection:AddToggle(""Closest Hit Part"", false, function(boolean)
    getgenv().DOAPriv.Silent.ClosestPart = boolean
end)

SoftAimSection:AddTextbox(""Prediction"", nil, function(bool)
    getgenv().DOAPriv.Silent.Prediction = bool
end)

-- FOV Section --

FOVection:AddToggle(""Show Radius"", false, function(boolean)
    getgenv().DOAPriv.FOV.Visible = boolean
end)

FOVection:AddTextbox(""Radius Size"", nil, function(bool)
    getgenv().DOAPriv.FOV.Radius = bool
end)

-- Tracer Section --

TracerSection:AddToggle(""Tracer Enabled"", false, function(parameter)
    aimbotenab = parameter
end)

TracerSection:AddKeybind(""Keybind"",nil,function (val)
    botbindlol = val
end)

TracerSection:AddTextbox(""Pred"", nil, function(State)
    aimbotprediction = State
end)

TracerSection:AddDropdown(""Chosen Hit-Part"", {""Head"", ""HumanoidRootPart"", ""UpperTorso"", ""LowerTorso""}, ""HumanoidRootPart"", false, function(dropdown)
    oldvallol = dropdown
end)

TracerSection:AddToggle(""Smoothness"", false, function(parameter)
    SmoothingEnabLOLL = parameter
end)

TracerSection:AddTextbox(""Smoothing Amount"", nil, function(State)
    SmoothingValIg = State
end)

TracerSection:AddDropdown(""Tracer Style"", {""Linear"", ""Sine"", ""Back"", ""Quad"",""Quart"", ""Quint"", ""Bounce"", ""Elastic"",""Exponential"", ""Circular"", ""Cubic""}, ""Linear"", false, function(dropdown)
    smoothingtypexd = dropdown
end)

TracerSection:AddDropdown(""Tracer Direction"", {""In"", ""Out"", ""InOut""}, ""InOut"", false, function(dropdown)
    easingdirectionxdxlol = dropdown
end)

TracerSection:AddToggle(""Jump Chosen Hit Part"", false, function(parameter)
    jumppartthingy = parameter
end)


TracerSection:AddDropdown(""Jump Chosen Part Value"", {""Head"", ""HumanoidRootPart"", ""UpperTorso"", ""LowerTorso"",""RightUpperLeg"",""RightLowerLeg"",""RightFoot"",""LeftUpperLeg"",""LeftLowerLeg"",""LeftFoot""}, ""RightFoot"", false, function(dropdown)
    jumppartvaluesxd = dropdown
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if AZURE_TmKALxRxSX.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            aimbotpartxd = jumppartvaluesxd
        else
            aimbotpartxd = oldvallol
        end
    end)
end)

spawn(function()
    uis.InputBegan:Connect(function (input)
        if input.KeyCode == botbindlol then
            AimbotBindEnabled = not AimbotBindEnabled   
            if AimbotBindEnabled then
                AZURE_TmKALxRxSX = targetchosen()
            end
        end
    end)
end)

-- Resolvers Section --

ResolverSection:AddToggle(""Auto Resolver"", false, function(boolean)
    getgenv().DOAPriv.Resolver.AutoResolve = boolean
end)

ResolverSection:AddTextbox(""+ Axis"", nil, function(bool)
    getgenv().DOAPriv.Resolver.Positive = bool
end)

ResolverSection:AddTextbox(""- Axis"", nil, function(bool)
    getgenv().DOAPriv.Resolver.Negitive = bool
end)

-- Checks Section --

CheckSection:AddToggle(""Wall Check"", false, function(boolean)
    getgenv().DOAPriv.Extras.WallCheck = boolean
end)

CheckSection:AddToggle(""Unlock On Death Check"", false, function(boolean)
    getgenv().DOAPriv.Extras.UnlockOnDeath = boolean
end)

-- Anti Section --

AASec:AddButton(""Force Reset"",function()
    for _,parts in pairs(player.Character:GetChildren()) do
        if parts:IsA(""BasePart"") then
            parts:Destroy()
        end
    end
end)

local AABindLOL = AASec:AddToggle(""Enable"", false, function(parameter)
    aaenabled = parameter
end)

AABindLOL:AddKeybind()

AASec:AddDropdown(""Mode"", {""Custom"",""Prediction Changer"", ""Prediction Disabler"",""Up"",""Down"",""AirOrthodox"",""Prediction Multiplier"", ""Spinbot Desync""}, ""Custom"", false, function(dropdown)
    aamodex = dropdown
end)

AASec:AddSlider(""Custom X"", -10000,10000,10000,1, function(State)
    x_val = State
end)

AASec:AddSlider(""Custom Y"", -10000,10000,10000,1, function(State)
    y_val = State
end)

AASec:AddSlider(""Custom Z"", -10000,10000,10000,1, function(State)
    z_val = State
end)
AASec:AddLabel""""
AASec:AddSlider(""Prediction Changer"", -20,5,20,1, function(State)
    Custom123 = State
end)

AASec:AddLabel""""

AASec:AddSlider(""Desync Angles"", -1000,1000,1000,1, function(State)
    DesyncAngles = State
end)

AASec:AddToggle(""No Velocity"", false, function(boolean)
    getgenv().VelocityAA = boolean
end)

AASec:AddToggle(""Desync"", false, function(boolean)
    _G.Desync = boolean
end)

AASec:AddToggle(""Legit Desync"", false, function(boolean)
    getgenv().antistomp = boolean
end)

local heartbeat = game:GetService(""RunService"").Heartbeat
local renderstepped = game:GetService(""RunService"").RenderStepped
local stepped = game:GetService(""RunService"").Stepped
local v3 = Vector3.new
local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
local lp = game.Players.LocalPlayer

spawn(function()
    heartbeat:Connect(function()
        if player.Character.Humanoid.Health <= 10 then
            AABindLOL:Set(false)
        end
    end)
end)

spawn(function()
    local hrp, c, vel, movel = nil, nil, nil, 0.1
    c = lp.Character
    hrp = lp.Character.HumanoidRootPart
    while true do
        heartbeat:Wait()
        while aaenabled and not (c and c.Parent and hrp and hrp.Parent) do
            heartbeat:Wait()
            c = lp.Character
            hrp = lp.Character.HumanoidRootPart
        end
        if aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == ""Custom"" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(x_val,y_val,z_val)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
          elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == ""Prediction Changer"" then
            vel = hrp.Velocity
            hrp.Velocity = vel*Custom123+v3(0,0,0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end

        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == ""Prediction Disabler"" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,-0,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == ""Up"" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,10000000000000000000,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == ""Down"" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,-10000000000000000000,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
            elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == ""AirOrthodox"" then
            vel = hrp.Velocity
            hrp.Velocity = vel*1+v3(77,77,77)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
                        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == ""Prediction Multiplier"" then
            vel = hrp.Velocity
            hrp.Velocity = vel*7+v3(0,0,0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == ""Spinbot Desync"" then
            vel = hrp.Velocity
            hrp.Velocity = vel * 0 + v3(0,10000000000000000000,0)
            renderstepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel
            end
            player.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(DesyncAngles), 0)
        end
    end
end)

-- CFrame Section --

local SpeedBindxd = MovementTab:AddToggle(""Speed"", false, function(parameter)
    speedenablelolol = parameter
end)

SpeedBindxd:AddKeybind()

spawn(function()
    runservice.Heartbeat:Connect(function()
        if speedenablelolol == true then
            player.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame + player.Character.Humanoid.MoveDirection * SpeedValue
        end
    end)
end)

MovementTab:AddSlider(""Speed Amount"", 1,1,5000,10, function(State)
    SpeedValue = State/1000
end)

-- Target Aim --

TargetLockSection:AddToggle(""Target Enabled"", false, function(parameter)
    target_aim.Aiming.Target.Enabled = parameter
end)

TargetLockSection:AddKeybind(""Keybind"",nil,function (val)
    target_aim.Aiming.Target.Key = val
end)

TargetLockSection:AddTextbox(""Prediction"", nil, function(State)
    target_aim.Aiming.Target.Prediction = State
end)

TargetLockSection:AddSlider(""Offset"", -3,0,3,100, function(State)
    OriginalOffsetXDZX = State
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if AZURE_TmKALRSX.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            target_aim.Aiming.Target.JumpOffset = OriginalOffsetXDZX
        else
            target_aim.Aiming.Target.JumpOffset = 0
        end
    end)
end)

TargetLockSection:AddDropdown(""Chosen Hit-Part"", {""Head"", ""HumanoidRootPart"", ""UpperTorso"", ""LowerTorso""}, ""HumanoidRootPart"", false, function(dropdown)
    hit_partxd = dropdown
end)

TargetLockSection:AddToggle(""Random Hitbox"", false, function(parameter)
    randomizatxionxd = parameter
end)

TargetLockSection:AddToggle(""Alert"", false, function(parameter)
    target_aim.Aiming.Target.Alerts = parameter
end)

TargetLockSection:AddToggle(""Look At Target"", false, function(parameter)
    target_aim.Aiming.Target.LookAt = parameter
end)

TargetLockSection:AddToggle(""Spectate"", false, function(parameter)
    viewatxd = parameter
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and viewatxd and TargetAimEnabled then
            workspace.CurrentCamera.CameraSubject = AZURE_TmKALRSX.Character.Humanoid
            spawn(function()
                if viewatxd == false then
                    workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
                end
            end)
        else
            workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
        end
    end)
end)

local dotenabled = TargetLockSection:AddToggle(""Dot"", false, function(parameter)
    dotenabledlol = parameter
end)

dotenabled:AddColorpicker(Color3.fromRGB(16,31,78), function(ztx)
    colorxdlololxdxd = ztx
end)

TargetLockSection:AddToggle(""Dot on Cursor"", false, function(parameter)
    dotoncursorx = parameter
end)

local highlighxdxdxd = TargetLockSection:AddToggle(""Target Highlight "", false, function(parameter)
    hightlightendalbed = parameter
end)

highlighxdxdxd:AddColorpicker(Color3.fromRGB(16,31,78), function(ztx)
    fillcolorxd = ztx
end)

highlighxdxdxd:AddColorpicker(Color3.fromRGB(255,255,255), function(ztx)
    outlinecolorxdxdxd = ztx
end)

local highlight_instance = Instance.new(""Highlight"",game.CoreGui)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and hightlightendalbed and TargetAimEnabled then
            highlight_instance.Parent = AZURE_TmKALRSX.Character
            highlight_instance.FillColor = fillcolorxd
            highlight_instance.OutlineColor = outlinecolorxdxdxd
            spawn(function()
                if hightlightendalbed == false then
                    highlight_instance.Parent = game.CoreGui
                end
            end)
        else
            highlight_instance.Parent = game.CoreGui
        end
    end)
end)

TargetLockSection:AddToggle(""Target Stats"", false, function(parameter)
    target_aim.Aiming.Target.TargetStats = parameter
end)



local dotDrawing = Drawing.new(""Circle"")

spawn(function()
    dotDrawing.Filled = true
    dotDrawing.Visible = false
    dotDrawing.Thickness = 2
    dotDrawing.Radius =	7
    dotDrawing.NumSides = 60
end)

local DotParent = Instance.new(""Part"",game.Workspace)
local newBillboard = Instance.new(""BillboardGui"", DotParent)

local newFrame = Instance.new(""Frame"", newBillboard)
local newUiCornor = Instance.new(""UICorner"", newFrame)

task.spawn(function ()
    newBillboard.Name = ""DOAPriv_billboarddot""
    newBillboard.Adornee = DotParent
    newBillboard.Size = UDim2.new(0.6, 0, 0.6, 0)
    newBillboard.AlwaysOnTop = true
    newFrame.Size = UDim2.new(1, 0, 1, 0)
    newFrame.BackgroundTransparency = 0
    newUiCornor.CornerRadius = UDim.new(50, 50)
    DotParent.CanCollide = false
    DotParent.Anchored = true
    DotParent.CFrame = CFrame.new(0,2000,0)
    DotParent.Transparency = 1
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and dotenabledlol then
            dotDrawing.Color = colorxdlololxdxd
            newFrame.BackgroundColor3 = colorxdlololxdxd
            if TargetAimEnabled and dotenabledlol then
                DotParent.CFrame = CFrame.new(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Position+Vector3.new(0,target_aim.Aiming.Target.JumpOffset,0)+(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Velocity*target_aim.Aiming.Target.Prediction))
                dotDrawing.Visible = false
            else
                DotParent.CFrame = CFrame.new(0,9999,0)
                if dotoncursorx then
                    dotDrawing.Visible = true
                    dotDrawing.Position = Vector2.new(mouse.X,mouse.Y + game:GetService(""GuiService""):GetGuiInset().Y)
                    spawn(function()
                        if dotoncursorx == false then
                            dotDrawing.Visible = false
                        end
                    end)
                end
                spawn(function()
                    if dotoncursorx == false then
                        dotDrawing.Visible = false
                    end
                end)
            end
        else
            DotParent.CFrame = CFrame.new(0,9999,0)
            dotDrawing.Visible = false
        end
    end)
end)


spawn(function()
    runservice.Stepped:Connect(function()
        if randomizatxionxd then
            wait(0.6)
            player_gayparts = {""Head"",""UpperTorso"",""LowerTorso"",""HumanoidRootPart"",""RightUpperLeg"",""RightLowerLeg"",""LeftUpperLeg"",""LeftLowerLeg"",""RightUpperArm"",""RightLowerArm"",""LeftLowerArm"",""LeftUpperArm""}
            target_aim.Aiming.Target.TargetPart = player_gayparts[math.random(1,#player_gayparts)]
        else
            target_aim.Aiming.Target.TargetPart = hit_partxd
        end
    end)
end)

spawn(function()
    runservice.RenderStepped:Connect(function()
        if AimbotBindEnabled and aimbotenab and SmoothingEnabLOLL == false then
            local main_cframe = CFrame.new(workspace.CurrentCamera.CFrame.p, AZURE_TmKALxRxSX.Character[aimbotpartxd].Position + AZURE_TmKALxRxSX.Character[aimbotpartxd].Velocity/aimbotprediction)
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(main_cframe, 1, Enum.EasingStyle[smoothingtypexd], Enum.EasingDirection[easingdirectionxdxlol])
        elseif AimbotBindEnabled and aimbotenab and SmoothingEnabLOLL == true then
            local main_cframe = CFrame.new(workspace.CurrentCamera.CFrame.p, AZURE_TmKALxRxSX.Character[aimbotpartxd].Position + AZURE_TmKALxRxSX.Character[aimbotpartxd].Velocity/aimbotprediction)
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(main_cframe, SmoothingValIg, Enum.EasingStyle[smoothingtypexd], Enum.EasingDirection[easingdirectionxdxlol])
        end
    end)
end)

spawn(function()
    runservice.RenderStepped:Connect(function()
        if TargetAimEnabled and target_aim.Aiming.Target.Enabled and AZURE_TmKALRSX.Character:FindFirstChild(""UpperTorso"") then
            if target_aim.Aiming.Target.LookAt then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.CFrame.Position, Vector3.new(AZURE_TmKALRSX.Character.HumanoidRootPart.CFrame.X, player.Character.HumanoidRootPart.CFrame.Position.Y, AZURE_TmKALRSX.Character.HumanoidRootPart.CFrame.Z))
                player.Character.Humanoid.AutoRotate = false
                spawn(function ()
                    if target_aim.Aiming.Target.LookAt == false then
                        player.Character.Humanoid.AutoRotate = true
                    end
                end)
            end
        else
            spawn(function()
                player.Character.Humanoid.AutoRotate = true
            end)
        end
    end)
end)

spawn(function()
    uis.InputBegan:Connect(function (input)
        if input.KeyCode == target_aim.Aiming.Target.Key and target_aim.Aiming.Target.Enabled then
            TargetAimEnabled = not TargetAimEnabled   
            if TargetAimEnabled then
                AZURE_TmKALRSX = targetchosen()
                if target_aim.Aiming.Target.Alerts then
                    Notify({
                        Title = ""DOA Priv [v.""..Version.Value..""]"",
                        Description = ""Locked Onto: "" ..tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName),
                        Duration = 3
                    })
                end
            elseif not TargetAimEnabled then
                if target_aim.Aiming.Target.Alerts then
                    Notify({
                        Title = ""DOA Priv [""..Version.Value..""]"",
                        Description = ""Unlocked Off: "" ..tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName),
                        Duration = 3
                    })
                end
            end
        end
    end)
end)

local mt = getrawmetatable(game)
local old = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(...)
    local args = {...}
    if target_aim.Aiming.Target.Enabled and TargetAimEnabled and getnamecallmethod() == ""FireServer"" and args[2] == ""UpdateMousePos"" then
        args[3] = AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Position+Vector3.new(0.01,target_aim.Aiming.Target.JumpOffset,0.01)+(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Velocity*target_aim.Aiming.Target.Prediction)
        return old(unpack(args))
    end
    return old(...)
end)

local DOAPriv_TargetStats = Instance.new(""ScreenGui"")
local Background = Instance.new(""Frame"")
local Picture = Instance.new(""ImageLabel"")
local Top = Instance.new(""Frame"")
local UIGradient = Instance.new(""UIGradient"")
local UIGradient_2 = Instance.new(""UIGradient"")
local HealthBarBackground = Instance.new(""Frame"")
local UIGradient_3 = Instance.new(""UIGradient"")
local HealthBar = Instance.new(""Frame"")
local UIGradient_4 = Instance.new(""UIGradient"")
local NameOfTarget = Instance.new(""TextLabel"")

spawn(function()
DOAPriv_TargetStats.Name = ""DOAPriv_TargetStats""
DOAPriv_TargetStats.Parent = game.CoreGui
DOAPriv_TargetStats.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Background.Name = ""Background""
Background.Parent = DOAPriv_TargetStats
Background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Background.BorderSizePixel = 0
Background.Position = UDim2.new(0.388957828, 0, 0.700122297, 0)
Background.Size = UDim2.new(0, 358, 0, 71)
Background.Visible = false

Picture.Name = ""Picture""
Picture.Parent = Background
Picture.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Picture.BorderSizePixel = 0
Picture.Position = UDim2.new(0.0279329624, 0, 0.0704225376, 0)
Picture.Size = UDim2.new(0, 59, 0, 59)
Picture.Transparency = 1
Picture.Image = ""rbxasset://textures/ui/GuiImagePlaceholder.png""

Top.Name = ""Top""
Top.Parent = Background
Top.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Top.BorderSizePixel = 0
Top.Position = UDim2.new(0, 0, -0.101449274, 0)
Top.Size = UDim2.new(0, 358, 0, 7)

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(16,31,78)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(102, 88, 156))}
UIGradient.Rotation = 90
UIGradient.Parent = Top

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(52, 52, 52)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient_2.Rotation = 90
UIGradient_2.Parent = Background

HealthBarBackground.Name = ""HealthBarBackground""
HealthBarBackground.Parent = Background
HealthBarBackground.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HealthBarBackground.BorderSizePixel = 0
HealthBarBackground.Position = UDim2.new(0.215083793, 0, 0.348234326, 0)
HealthBarBackground.Size = UDim2.new(0, 270, 0, 19)
HealthBarBackground.Transparency = 1

UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(58, 58, 58)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(30, 30, 30))}
UIGradient_3.Rotation = 90
UIGradient_3.Parent = HealthBarBackground

HealthBar.Name = ""HealthBar""
HealthBar.Parent = HealthBarBackground
HealthBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HealthBar.BorderSizePixel = 0
HealthBar.Position = UDim2.new(-0.00336122862, 0, 0.164894029, 0)
HealthBar.Size = UDim2.new(0, 130, 0, 19)

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(184, 159, 227)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(102, 88, 156))}
UIGradient_4.Rotation = 90
UIGradient_4.Parent = HealthBar

NameOfTarget.Name = ""NameOfTarget""
NameOfTarget.Parent = Background
NameOfTarget.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
NameOfTarget.BackgroundTransparency = 1.000
NameOfTarget.Position = UDim2.new(0.220670387, 0, 0.0704225376, 0)
NameOfTarget.Size = UDim2.new(0, 268, 0, 19)
NameOfTarget.Font = Enum.Font.Code
NameOfTarget.TextColor3 = Color3.fromRGB(255, 255, 255)
NameOfTarget.TextScaled = true
NameOfTarget.TextSize = 14.000
NameOfTarget.TextStrokeTransparency = 0.000
NameOfTarget.TextWrapped = true
end)

local IsAlive = function(GetPlayer)
    return GetPlayer and GetPlayer.Character and GetPlayer.Character:FindFirstChild(""HumanoidRootPart"") ~= nil and GetPlayer.Character:FindFirstChild(""Humanoid"") ~= nil and GetPlayer.Character:FindFirstChild(""Head"") ~= nil and true or false
end

spawn(function()
    while wait() do
        if target_aim.Aiming.Target.TargetStats and target_aim.Aiming.Target.Enabled and TargetAimEnabled then
            if AZURE_TmKALRSX and IsAlive(AZURE_TmKALRSX) then
                Background.Visible = true
                NameOfTarget.Text = tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName).."" [""..tostring(AZURE_TmKALRSX.Name)..""]""
                Picture.Image  = ""rbxthumb://type=AvatarHeadShot&id="" ..AZURE_TmKALRSX.UserId.. ""&w=420&h=420""
                HealthBar:TweenSize(UDim2.new(AZURE_TmKALRSX.Character.Humanoid.Health / AZURE_TmKALRSX.Character.Humanoid.MaxHealth, 0, 1, 0), ""In"", ""Linear"", 0.25)
                spawn(function()
                    if target_aim.Aiming.Target.TargetStats == false then
                        Background.Visible = false
                    end
                end)
            end
        else
            Background.Visible = false
        end
    end
end)

function targetchosen()
    local distance = math.huge
    local zclosest
    local LocalPlayer = game.Players.LocalPlayer
    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild(""Humanoid"") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild(""HumanoidRootPart"") then
            local pos = workspace.CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalPlayer:GetMouse().X, LocalPlayer:GetMouse().Y)).magnitude
            if magnitude < distance then
                zclosest = v
                distance = magnitude
            end
        end
    end
    return zclosest
end

regera = 0

aroundtarget = function(speed, distance,height,target)
    regera = regera + speed
    player.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(regera), 0) * CFrame.new(0, height, distance)
end"
7HKWWM5n,aaaaa,IAmStormAndImFat,Lua,Thursday 18th of May 2023 06:01:39 PM CDT,"-- << Tables >>
local library = {}
library.Windows = {}
library.Constants = {}
library.Controls = {}
library.CustomizableWindows = {}
library.SettingsList = {}
-- << Variables >>
library.MainWindow = nil
library.Arraylist = nil
library.SettingSample = nil
library.Settings = nil
library.Watermark = nil
-- << Global Def >>
getgenv().lua_library = library;--global, so custom modules and stuff can be added !!!!

-- << Functions >>
function library:Setup()
    local Tenacity = Instance.new(""ScreenGui"",game.CoreGui)
    local Arraylist = Instance.new(""Folder"")
	local Sample = Instance.new(""TextLabel"")
    local Settings = Instance.new(""Folder"")
    local SettingFrame = Instance.new(""Folder"")
    local Sample_2 = Instance.new(""Frame"")
    local Frame_3 = Instance.new(""Frame"")
    local TextLabel_10 = Instance.new(""TextLabel"")
    local ImageLabel_2 = Instance.new(""ImageLabel"")
	local UIGradient_9 = Instance.new(""UIGradient"")
    local Watermark = Instance.new(""Frame"")
    local TextLabel = Instance.new(""TextLabel"")
    local UIGradient = Instance.new(""UIGradient"")
    local versionNumber = Instance.new(""TextLabel"")
    local UIGradient_2 = Instance.new(""UIGradient"")
    Watermark.Name = ""Watermark""
    Watermark.Parent = Tenacity
    Watermark.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Watermark.BackgroundTransparency = 1
    Watermark.Position = UDim2.new(-0.00560049713, 0, 0, 0)
    Watermark.Size = UDim2.new(0, 407, 0, 180)

    TextLabel.Parent = Watermark
    TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.BackgroundTransparency = 1.000
    TextLabel.Size = UDim2.new(0, 304, 0, 101)
    TextLabel.Font = Enum.Font.JosefinSans
    TextLabel.Text = ""tenacity""
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextSize = 54.000

    UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 170, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(85, 170, 255))}
    UIGradient.Parent = TextLabel

    versionNumber.Name = ""versionNumber""
    versionNumber.Parent = TextLabel
    versionNumber.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    versionNumber.BackgroundTransparency = 1.000
    versionNumber.Position = UDim2.new(0.519736826, 0, 0, 0)
    versionNumber.Size = UDim2.new(0, 168, 0, 60)
    versionNumber.Font = Enum.Font.GothamBold
    versionNumber.Text = ""4.0""
    versionNumber.TextColor3 = Color3.fromRGB(255, 255, 255)
    versionNumber.TextSize = 15.000

    UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 170, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(85, 170, 255))}
    UIGradient_2.Parent = versionNumber
    local Frame = Instance.new(""Frame"")
    Frame.Parent = Tenacity
    Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Frame.BackgroundTransparency = 1
    Frame.Position = UDim2.new(0.0375830904, 0, 0.0947631747, 0)
    Frame.Size = UDim2.new(0, 208, 0, 611)
    local UIListLayout = Instance.new(""UIListLayout"")
    UIListLayout.Parent = Frame
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

	Tenacity.Name = ""Tenacity""
    library.MainWindow = Tenacity;

    Arraylist.Name = ""Arraylist""
    Arraylist.Parent = Tenacity

    Sample.Name = ""Sample""    
    Sample.Parent = Arraylist
    Sample.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Sample.BackgroundTransparency = 1.000
    Sample.Size = UDim2.new(0, 200, 0, 31)
    Sample.Visible = false
    Sample.Font = Enum.Font.JosefinSans
    Sample.Text = ""Sample""
    Sample.TextColor3 = Color3.fromRGB(255, 255, 255)
    Sample.TextSize = 25.000
    Sample.TextStrokeTransparency = 0.510
    Sample.TextXAlignment = Enum.TextXAlignment.Left

    UIGradient_9.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 170, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(181, 198, 255))}
    UIGradient_9.Parent = Sample
    Settings.Name = ""Settings""
    Settings.Parent = Tenacity
    SettingFrame.Name = ""SettingFrame""
    SettingFrame.Parent = Tenacity

    local Sample = Instance.new(""Frame"")
    local Frame = Instance.new(""Frame"")
    local TextLabel = Instance.new(""TextLabel"")
    local ImageLabel = Instance.new(""ImageLabel"")
    local main = Instance.new(""ScrollingFrame"")
    local UIGridLayout = Instance.new(""UIGridLayout"")
    local UIPadding = Instance.new(""UIPadding"")
    local main2 = Instance.new(""Frame"")
    local LibTitle = Instance.new(""TextLabel"")
    local line = Instance.new(""TextLabel"")
    local Items = Instance.new(""Frame"")
    local UIListLayout = Instance.new(""UIListLayout"")
    local UIPadding_2 = Instance.new(""UIPadding"")
    local PenumbraShadow = Instance.new(""ImageLabel"")
    local PenumbraShadow_2 = Instance.new(""ImageLabel"")



    Sample.Name = ""Sample""
    Sample.Parent = SettingFrame
    Sample.BackgroundColor3 = Color3.fromRGB(42, 43, 46)
    Sample.Position = UDim2.new(0.527691364, 0, 0.133416459, 0)
    Sample.Size = UDim2.new(0, 616, 0, 456)
    Sample.Visible = false;
    Frame.Parent = Sample
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.BorderSizePixel = 0
    Frame.Size = UDim2.new(0, 615, 0, 41)

    TextLabel.Parent = Frame
    TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.BackgroundTransparency = 1.000
    TextLabel.Position = UDim2.new(0.0142364642, 0, -0.111516438, 0)
    TextLabel.Size = UDim2.new(0, 347, 0, 50)
    TextLabel.Font = Enum.Font.GothamBold
    TextLabel.Text = ""Killaura Settings""
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextSize = 32.000
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    ImageLabel.Parent = Frame
    ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ImageLabel.BackgroundTransparency = 1.000
    ImageLabel.BorderSizePixel = 0
    ImageLabel.Position = UDim2.new(0.927965164, 0, 0.107995749, 0)
    ImageLabel.Size = UDim2.new(0, 45, 0, 32)
    ImageLabel.Image = ""http://www.roblox.com/asset/?id=13470361277""
    ImageLabel.ScaleType = Enum.ScaleType.Fit

    main.Name = ""main""
    main.Parent = Sample
    main.Active = true
    main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    main.BackgroundTransparency = 1.000
    main.Position = UDim2.new(-0.000383649545, 0, 0.0879163221, 0)
    main.Size = UDim2.new(0, 616, 0, 413)
    main.ScrollBarThickness = 0

    UIGridLayout.Parent = main
    UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIGridLayout.CellPadding = UDim2.new(0, 10, 0, 5)
    UIGridLayout.CellSize = UDim2.new(0.300000012, 200, 0.200000003, 100)
    UIGridLayout.FillDirectionMaxCells = 5

    UIPadding.Parent = main
    UIPadding.PaddingLeft = UDim.new(0, 10)
    UIPadding.PaddingTop = UDim.new(0, 10)

    main2.Name = ""main2""
    main2.Parent = main
    main2.BackgroundColor3 = Color3.fromRGB(14,14,14)
    main2.BorderSizePixel = 0
    main2.Position = UDim2.new(0.0162338652, 0, 0.0242130756, 0)
    main2.Size = UDim2.new(0, 390, 0, 235)

    LibTitle.Name = ""LibTitle""
    LibTitle.Parent = main2
    LibTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    LibTitle.BackgroundTransparency = 1.000
    LibTitle.Position = UDim2.new(0.0267757438, 0, 0.00985983759, 0)
    LibTitle.Size = UDim2.new(0, 159, 0, 33)
    LibTitle.FontFace = Font.fromId(11702779409)
    LibTitle.Text = ""Settings""
    LibTitle.TextColor3 = Color3.fromRGB(192, 194, 197)
    LibTitle.TextSize = 27.000
    LibTitle.TextWrapped = true
    LibTitle.TextXAlignment = Enum.TextXAlignment.Left

    line.Name = ""line""
    line.Parent = main2
    line.BackgroundColor3 = Color3.fromRGB(63, 90, 106)
    line.BackgroundTransparency = 0.650
    line.Position = UDim2.new(-0.000995894894, 0, 0.131552652, 0)
    line.Size = UDim2.new(1.00099587, 0, 0, 1)
    line.FontFace = Font.fromId(11702779409)
    line.Text = """"
    line.TextColor3 = Color3.fromRGB(63, 90, 106)
    line.TextSize = 12.000
    line.TextXAlignment = Enum.TextXAlignment.Left

    Items.Name = ""Items""
    Items.Parent = main2
    Items.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Items.BackgroundTransparency = 1.000
    Items.Position = UDim2.new(0, 0, 0.183397695, 0)
    Items.Size = UDim2.new(0, 339, 0, 253)

    UIListLayout.Parent = Items
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 15)

    UIPadding_2.Parent = Items
    UIPadding_2.PaddingLeft = UDim.new(0, 10)

    PenumbraShadow.Name = ""PenumbraShadow""
    PenumbraShadow.Parent = main2
    PenumbraShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    PenumbraShadow.BackgroundTransparency = 1.000
    PenumbraShadow.Position = UDim2.new(0.5, 0, 0.496830046, 1)
    PenumbraShadow.Size = UDim2.new(1, 18, 0.993660092, 18)
    PenumbraShadow.ZIndex = 0
    PenumbraShadow.Image = ""rbxassetid://1316045217""
    PenumbraShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    PenumbraShadow.ImageTransparency = 0.700
    PenumbraShadow.ScaleType = Enum.ScaleType.Slice
    PenumbraShadow.SliceCenter = Rect.new(10, 10, 118, 118)

    PenumbraShadow_2.Name = ""PenumbraShadow""
    PenumbraShadow_2.Parent = Sample
    PenumbraShadow_2.AnchorPoint = Vector2.new(0.5, 0.5)
    PenumbraShadow_2.BackgroundTransparency = 1.000
    PenumbraShadow_2.Position = UDim2.new(0.5, 0, 0.496830046, 1)
    PenumbraShadow_2.Size = UDim2.new(1, 18, 0.993660092, 18)
    PenumbraShadow_2.ZIndex = 0
    PenumbraShadow_2.Image = ""rbxassetid://1316045217""
    PenumbraShadow_2.ImageColor3 = Color3.fromRGB(0, 0, 0)
    PenumbraShadow_2.ImageTransparency = 0.700
    PenumbraShadow_2.ScaleType = Enum.ScaleType.Slice
    PenumbraShadow_2.SliceCenter = Rect.new(10, 10, 118, 118)

    library.Arraylist = Frame
    library.SettingSample = SettingFrame
    library.Settings = Settings
    library.Watermark = Watermark
    game:GetService'UserInputService'.InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.V then
            for _,v in next, library.Controls do
                v.Parent.Visible = not v.Parent.Visible
            end
        end
    end)
end

function library:CreateStroke(c, t, p)--i
    local stroke = Instance.new('UIStroke',p)
    stroke.Color = c
    stroke.Thickness = t
end


function library:SetArraylistState(state)
    library.Arraylist.Visible = state;    
end

function library:SetWatermarkState(state)
    library.Watermark.Visible = state;    
end


function library:CreateWindow(tab_name, icon, position)--UDim2.new(0.344741702, 0, 0.0947630927, 0)
    local modified = { real_name = '  '..tab_name };
    local modern = Instance.new(""Frame"")
    modern.Name = tab_name
    modern.Parent = library.MainWindow -- ScreenGui !!!
    modern.BackgroundColor3 = Color3.fromRGB(29,30,32)
    modern.BorderSizePixel = 0
    modern.Position = position
    modern.Size = UDim2.new(0, 240, 0, 365)
    local PenumbraShadow = Instance.new(""ImageLabel"")
    PenumbraShadow.Name = ""PenumbraShadow""
    PenumbraShadow.Parent = modern
    PenumbraShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    PenumbraShadow.BackgroundTransparency = 1.000
    PenumbraShadow.Position = UDim2.new(0.5, 0, 0.496830046, 1)
    PenumbraShadow.Size = UDim2.new(1, 18, 0.993660092, 18)
    PenumbraShadow.ZIndex = 0
    PenumbraShadow.Image = ""rbxassetid://1316045217""
    PenumbraShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    PenumbraShadow.ImageTransparency = 0.700
    PenumbraShadow.ScaleType = Enum.ScaleType.Slice
    PenumbraShadow.SliceCenter = Rect.new(10, 10, 118, 118)
    local ScrollingFrame = Instance.new(""ScrollingFrame"")
    ScrollingFrame.Parent = modern
    ScrollingFrame.Active = true
    ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ScrollingFrame.BackgroundTransparency = 1.000
    ScrollingFrame.BorderSizePixel = 0
    ScrollingFrame.Position = UDim2.new(0, 0, 0.112328768, 0)
    ScrollingFrame.Size = UDim2.new(0, 240, 0, 322)
    ScrollingFrame.ScrollBarThickness = 0
    local Frame_2 = Instance.new(""Frame"")
    Frame_2.Parent = modern
    Frame_2.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame_2.BorderSizePixel = 0
    Frame_2.Size = UDim2.new(0, 239, 0, 41)
    local TextLabel_8 = Instance.new(""TextLabel"")

    TextLabel_8.Parent = Frame_2
    TextLabel_8.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel_8.BackgroundTransparency = 1.000
    TextLabel_8.Position = UDim2.new(-0.00039761886, 0, -0.111516438, 0)
    TextLabel_8.Size = UDim2.new(0, 129, 0, 50)
    TextLabel_8.Font = Enum.Font.GothamBold
    TextLabel_8.Text = tab_name;-- nvm
    TextLabel_8.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel_8.TextSize = 32.000
    local ImageLabel = Instance.new(""ImageLabel"")

    ImageLabel.Parent = Frame_2
    ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ImageLabel.BackgroundTransparency = 1.000
    ImageLabel.BorderSizePixel = 0
    ImageLabel.Position = UDim2.new(0.809520006, 0, 0.107995749, 0)
    ImageLabel.Size = UDim2.new(0, 45, 0, 32)
    ImageLabel.Image = icon -- http://www.roblox.com/asset/?id=13470361277
    ImageLabel.ScaleType = Enum.ScaleType.Fit
    local list = Instance.new('UIListLayout',ScrollingFrame)
    -- so we can add stuff to this thing
    library.Controls[tab_name] = ScrollingFrame;
    local UserInputService = game:GetService(""UserInputService"")
	local runService = (game:GetService(""RunService""));

	local gui = modern

	local dragging
	local dragInput
	local dragStart
	local startPos

	function Lerp(a, b, m)
		return a + (b - a) * m
	end;

	local lastMousePos
	local lastGoalPos
	local DRAG_SPEED = (8); -- // The speed of the UI darg.
	function Update(dt)
		if not (startPos) then return end;
		if not (dragging) and (lastGoalPos) then
			gui.Position = UDim2.new(startPos.X.Scale, Lerp(gui.Position.X.Offset, lastGoalPos.X.Offset, dt * DRAG_SPEED), startPos.Y.Scale, Lerp(gui.Position.Y.Offset, lastGoalPos.Y.Offset, dt * DRAG_SPEED))
			return 
		end;

		local delta = (lastMousePos - UserInputService:GetMouseLocation())
		local xGoal = (startPos.X.Offset - delta.X);
		local yGoal = (startPos.Y.Offset - delta.Y);
		lastGoalPos = UDim2.new(startPos.X.Scale, xGoal, startPos.Y.Scale, yGoal)
		gui.Position = UDim2.new(startPos.X.Scale, Lerp(gui.Position.X.Offset, xGoal, dt * DRAG_SPEED), startPos.Y.Scale, Lerp(gui.Position.Y.Offset, yGoal, dt * DRAG_SPEED))
	end;

	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = gui.Position
			lastMousePos = UserInputService:GetMouseLocation()

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	gui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	runService.Heartbeat:Connect(Update)
    --[[
        table.insert(library.Controls, {
            [tab_name] = {
                Main = Instance.new('Frame',game.CoreGui)
            }
        })--debugging
    ]]
end

function library:Finish()
    for _,v in next, library.Controls do
        for i,val in next, v:GetChildren() do
            if val:FindFirstChild'Configurable' then
                local frame = library.SettingSample.Sample:Clone()
                frame.Frame.TextLabel.Text = '  '..val.Name .. ' Settings'
                frame.Parent = library.Settings
                frame.Visible = false
                frame.Name = val:FindFirstChildOfClass('TextButton').Name;
                frame.BackgroundColor3 = Color3.fromRGB(29,30,32)
                --[[local PenumbraShadow_2 = Instance.new(""ImageLabel"")
                PenumbraShadow_2.Name = ""PenumbraShadow""
                PenumbraShadow_2.Parent = frame
                PenumbraShadow_2.AnchorPoint = Vector2.new(0.5, 0.5)
                PenumbraShadow_2.BackgroundTransparency = 1.000
                PenumbraShadow_2.Position = UDim2.new(0.5, 0, 0.496830046, 1)
                PenumbraShadow_2.Size = UDim2.new(1, 18, 0.993660092, 18)
                PenumbraShadow_2.ZIndex = 0
                PenumbraShadow_2.Image = ""rbxassetid://1316045217""
                PenumbraShadow_2.ImageColor3 = Color3.fromRGB(0, 0, 0)
                PenumbraShadow_2.ImageTransparency = 0.700
                PenumbraShadow_2.ScaleType = Enum.ScaleType.Slice
                PenumbraShadow_2.SliceCenter = Rect.new(10, 10, 118, 118)
                ]]
            end
        end
    end
end

function library:CreateDropdown(items, constant, frame)
    library.Constants[constant] = items[1];
    local object = game:GetObjects(""rbxassetid://13481020329"")[1]
    object.Parent = library.Settings[frame]:FindFirstChild('main').main2.Items;
    local Sample = object.dropFrame.dropScroll.Sample:Clone()
    object.name.Text = items[1];
    
   
    

    for _, v in next, items do 
        local item = Sample:Clone()
        item.Name = v
        item.Text = v
        item.Parent = object.dropFrame.dropScroll
        
        
        item.MouseButton1Click:Connect(function()
            object.name.Text = item.Name
            object.dropFrame.Visible = false
            library.Constants[constant] = item.Name    
        end)
    end
    
    object.Interact.MouseButton1Click:Connect(function()
        object.dropFrame.Visible = not object.dropFrame.Visible
    end)
    object.dropFrame.dropScroll.Sample:Destroy();
end

function library:CreateSlider(namer, frame, constant)
    local succ, err = pcall(function()
        library.Constants[constant]=0
        local WorkSlider = Instance.new(""Frame"")
        local name = Instance.new(""TextLabel"")
        local value = Instance.new(""TextLabel"")
        local fill = Instance.new(""Frame"")
        local UICorner = Instance.new(""UICorner"")
        local Frame = Instance.new(""Frame"")
        local UICorner_2 = Instance.new(""UICorner"")
        local TextButton = Instance.new(""TextButton"")
        local UIGradient = Instance.new(""UIGradient"")
        local UICorner_3 = Instance.new(""UICorner"")
        local UIGradient_2 = Instance.new(""UIGradient"")
        WorkSlider.Name = ""WorkSlider""
        WorkSlider.Parent = library.Settings[frame]:FindFirstChild('main').main2.Items;
        WorkSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        WorkSlider.Position = UDim2.new(0.494812608, 0, 0.433330983, 0)
        WorkSlider.Size = UDim2.new(0, 120, 0, 2)

        name.Name = ""name""
        name.Parent = WorkSlider
        name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        name.BackgroundTransparency = 1.000
        name.Position = UDim2.new(1.31000006, 0, -2.8469696, 0)
        name.Size = UDim2.new(0, 45, 0, 13)
        name.Font = Enum.Font.Code
        name.Text = namer
        name.TextColor3 = Color3.fromRGB(255, 255, 255)
        name.TextScaled = true
        name.TextSize = 12.000
        name.TextWrapped = true
        name.TextXAlignment = Enum.TextXAlignment.Left

        value.Name = ""value""
        value.Parent = WorkSlider
        value.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        value.BackgroundTransparency = 1.000
        value.Position = UDim2.new(1.04866672, 0, -2.79999995, 0)
        value.Size = UDim2.new(0, 23, 0, 12)
        value.FontFace = Font.fromId(11702779409)
        value.Text = ""100""
        value.TextColor3 = Color3.fromRGB(255, 255, 255)
        value.TextScaled = true
        value.TextSize = 12.000
        value.TextStrokeTransparency = 0.000
        value.TextTransparency = 0.500
        value.TextWrapped = true

        fill.Name = ""fill""
        fill.Parent = WorkSlider
        fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        fill.Size = UDim2.new(0, 120, 0, 2)
        fill.ZIndex = 0

        UICorner.CornerRadius = UDim.new(1, 0)
        UICorner.Parent = fill

        Frame.Parent = fill
        Frame.AnchorPoint = Vector2.new(0.5, 0.5)
        Frame.BackgroundColor3 = Color3.fromRGB(61, 133, 224)
        Frame.Position = UDim2.new(1.00999999, 0, 0.5, 0)
        Frame.Size = UDim2.new(0, 8, 0, 8)

        UICorner_2.CornerRadius = UDim.new(1, 0)
        UICorner_2.Parent = Frame

        TextButton.Parent = Frame
        TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TextButton.BackgroundTransparency = 1.000
        TextButton.Position = UDim2.new(0, 0, -0.211742401, 0)
        TextButton.Size = UDim2.new(0, 14, 0, 12)
        TextButton.Font = Enum.Font.SourceSans
        TextButton.Text = """"
        TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
        TextButton.TextSize = 14.000

        UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(170, 85, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(85, 170, 255))}
        UIGradient.Parent = fill

        local uh = UIGradient:Clone();
        uh.Parent = WorkSlider

        UICorner_3.CornerRadius = UDim.new(1, 0)
        UICorner_3.Parent = WorkSlider


        
        local UserInputService = game:GetService(""UserInputService"")
        local Mouse = game:GetService(""Players"").LocalPlayer:GetMouse()
        
        local sliderRange = {0,0} -- min, max (can be 1,0 or -1,2)
        -- ^ Range will be from 0.0000 to 1.000
        
        local function OffsetToScale(offset,parent) 
            return (offset/parent.AbsoluteSize.X) 
        end
        
        local function ConvertRange(oldMin, oldMax, number)
            return sliderRange[1] + (number - oldMin) * (sliderRange[2] - sliderRange[1]) / (oldMax - oldMin)
        end
        
        local slider = WorkSlider
        local slide = fill
        local slideButton = fill
        local slideButtonSize = slideButton.Size.X.Scale
        
        local buttonDown = false
        
        TextButton.MouseButton1Down:Connect(function()
            buttonDown = true
        end)
        
        
        Mouse.Move:Connect(function()
            if not buttonDown then return end
        
            local abspos = OffsetToScale(Mouse.X - slider.AbsolutePosition.X, slider)
            local pos = math.clamp(abspos, slideButtonSize / 2, 1 - slideButtonSize / 2)
            value.Text = tostring(math.floor(slide.Size.X.Scale * 100))
            library.Constants[constant]=math.floor(slide.Size.X.Scale * 100)
            slide:TweenSize(UDim2.new(pos, 0, slide.Size.Y.Scale, 2), ""Out"", ""Sine"", .1, true)
            --ConvertRange(slideButtonSize / 2, 1 - slideButtonSize / 2, pos)
        end)
        
        UserInputService.InputEnded:Connect(function(input,gameProcessed)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                buttonDown = false 
            end
        end)
    end)
    print(err, 'occured');
end



function library:CreateButton(feature_name, tab_name, constant, is_customizable)
    local Killaura = Instance.new(""Frame"")
    Killaura.Name = feature_name
    Killaura.Parent = library.Controls[tab_name];
    Killaura.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Killaura.BackgroundTransparency = 1.000
    Killaura.Size = UDim2.new(0, 239, 0, 35)
    local UIGradient_10 = Instance.new(""UIGradient"")
    UIGradient_10.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(170, 85, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(85, 170, 255))}
    UIGradient_10.Parent = Killaura
    local Killaura_2 = Instance.new(""TextButton"")
    Killaura_2.Name = feature_name
    Killaura_2.Parent = Killaura
    Killaura_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Killaura_2.BackgroundTransparency = 1.000
    Killaura_2.Size = UDim2.new(0, 239, 0, 35)
    Killaura_2.Font = Enum.Font.JosefinSans
    Killaura_2.Text = ""  ""..feature_name -- spacing!
    Killaura_2.TextColor3 = Color3.fromRGB(255, 255, 255)
    Killaura_2.TextSize = 21.000
    Killaura_2.TextXAlignment = Enum.TextXAlignment.Left
    if is_customizable then
        local ImageButton = Instance.new(""ImageButton"")
        ImageButton.Parent = Killaura
        ImageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ImageButton.BackgroundTransparency = 1.000
        ImageButton.Position = UDim2.new(0.887000024, 0, 0.171000004, 0)
        ImageButton.Size = UDim2.new(0, 26, 0, 23)
        ImageButton.Image = ""http://www.roblox.com/asset/?id=278544479""
        ImageButton.ScaleType = Enum.ScaleType.Fit
        local instance = Instance.new('IntValue',Killaura)
        instance.Name = ""Configurable""

        ImageButton.MouseButton1Down:Connect(function()
            local settings = library.Settings[Killaura_2.Name]
            if settings then
                settings.Visible = not settings.Visible
            else
                warn('[Ronacity - Settings Configurator] Unable to find Frame')
            end
	    end)
    end

    Killaura_2.MouseButton1Click:Connect(function()
        local function isEnabled()
			return (Killaura.BackgroundTransparency == 0 and true or false)
		end

        local function addToArraylist(feature)
            local sample = lua_library.MainWindow.Arraylist.Sample:Clone()
            sample.Name = feature;
            sample.Parent = lua_library.Arraylist;
            sample.Visible = true
            sample.Text = feature;
            print('Alright')
            print(sample.Parent, sample.Name, sample.Text, sample.Visible, library.Arraylist)
        end

        local function removeFromArraylist(feature)
            local child = library.Arraylist:FindFirstChild(feature)
            
            if child then
                child:Destroy()
            end
            
            if not child then
                warn('[Ronacity - Arraylist] Child does not exist:', feature)
            end
        end

		if isEnabled() then
        	library.Constants[constant] = false
			local child = game:GetService('CoreGui').Tenacity.Frame:FindFirstChild(Killaura.Name)
            if child then child:Destroy() end
            if not child then warn('[Ronacity - Arraylist] Child does not exist:', Killaura.Name) end
            local Info = TweenInfo.new(.25)
            local Tween = game:GetService(""TweenService""):Create(Killaura,Info,{BackgroundTransparency=1})
            Tween:Play()

			--Killaura.BackgroundTransparency = 1
		else
        	library.Constants[constant] = true
            local sample = game:GetService('CoreGui').Tenacity.Arraylist.Sample:Clone()
            sample.Name = Killaura.Name;
            sample.Parent = game:GetService('CoreGui').Tenacity.Frame;
            sample.Visible = true
            sample.Text = Killaura.Name;
            local Info = TweenInfo.new(.25)
            local Tween = game:GetService(""TweenService""):Create(Killaura,Info,{BackgroundTransparency=0})
            Tween:Play()
			--Killaura.BackgroundTransparency = 0
		end
    end)
end

return library;--b"
KrXc13ub,Untitled,cooldude4232,Lua,Thursday 18th of May 2023 05:31:06 PM CDT,"local monitor = peripheral.find(""monitor"")
print(monitor.getSize())
monitor.setCursorPos(1, 1)
monitor.setTextScale(0.5)
width, height = monitor.getSize()

R = 2
n = 2



function getScaled(x, y)
    return ((x / width) * 3 - 1.5), ((y / height) * 3 - 1.5)
end

while true do
    for angle = 1, 360, 3 do
        sleep(0.05)
        --real component of c
        cx = 0.7*math.sin((angle/180)*math.pi)
        --imaginary component of c
        cy = 0.7*math.cos((angle/180)*math.pi)
        for x = 1, width do
            for y = 1, height do
                monitor.setCursorPos(x, y)
                if (x % 2 == 0) then
                    monitor.setBackgroundColor(colors.green)
                else 
                    monitor.setBackgroundColor(colors.white)
                end

                local iteration = 0
                local max_iteration = 25

                local zx, zy = getScaled(x, y)
                while ((zx * zx + zy * zy < R^2)  and  iteration < max_iteration) do
                    local xtmp = (zx * zx + zy * zy) ^ (n / 2) * math.cos(n * math.atan2(zy, zx)) + cx;
                    zy = (zx * zx + zy * zy) ^ (n / 2) * math.sin(n * math.atan2(zy, zx)) + cy;
                    zx = xtmp;

                    iteration = iteration + 1
                end

                if (iteration == max_iteration) then
                    monitor.setBackgroundColor(colors.white)
                elseif iteration > max_iteration / 2 then
                    monitor.setBackgroundColor(colors.lightBlue)
                elseif iteration > max_iteration / 4 then
                    monitor.setBackgroundColor(colors.cyan)
                elseif iteration > max_iteration / 8 then
                    monitor.setBackgroundColor(colors.blue)
                else
                    monitor.setBackgroundColor(colors.black)
                end

                monitor.write("" "")
            end
        end
	end
end"
HrjenQbE,Jokedex Calc Project (base data),IHATEMICROWAVEOVEN,Lua,Thursday 18th of May 2023 05:20:34 PM CDT,"-- MULTIPLIERS
local N = 2/3
local S = 1.5
local I = 0
local STAB = 1.25


-- DATA DICTS
local types = {
    ""None"",      -- 1
    ""Normal"",    -- 2
    ""Fire"",      -- 3
    ""Water"",     -- 4
    ""Electric"",  -- 5
    ""Grass"",     -- 6
    ""Ice"",       -- 7
    ""Fighting"",  -- 8
    ""Poison"",    -- 9
    ""Ground"",    -- 10
    ""Flying"",    -- 11
    ""Psychic"",   -- 12
    ""Bug"",       -- 13
    ""Rock"",      -- 14
    ""Ghost"",     -- 15
    ""Dragon"",    -- 16
    ""Dark"",      -- 17
    ""Steel"",     -- 18
    ""Fairy""      -- 19
}

local dex = {
    {""Meganium"", 6, 1, 91, 84, ""Absorb"", ""MagicLeaf"", ""MegaDrain"", ""Solarbeam""},
    {""Typhlosion"", 3, 1, 78, 100, ""Tackle"", ""Ember"", ""Flamethrower"", ""FireBlast""},
    {""Feraligatr"", 4, 1, 83, 93, ""Bubble"", ""Bubblebeam"", ""Surf"", ""HydroPump""},
    {""Butterfree"", 13, 11, 58, 73, ""Tackle"", ""Absorb"", ""Confusion"", ""Psychic""},
    {""Gloom"", 6, 9, 60, 72, ""Tackle"", ""RazorLeaf"", ""Absorb"", ""nil""},
    {""Raticate"", 2, 1, 62, 76, ""Tackle"", ""QuickAttack"", ""HyperFang"", ""nil""},
    {""Pikachu"", 5, 1, 46, 61, ""Tackle"", ""Thundershock"", ""Thunderbolt"", ""Thunder""},
    {""Pidgeot"", 11, 2, 80, 80, ""Tackle"", ""Gust"", ""QuickAttack"", ""nil""},
    {""Eevee"", 2, 1, 56, 52, ""Tackle"", ""nil"", ""nil"", ""nil""},
    {""Vaporeon"", 4, 1, 90, 85, ""Bubble"", ""Bubblebeam"", ""Surf"", ""HydroPump""},
    {""Jolteon"", 5, 1, 73, 102, ""Thundershock"", ""Thunderbolt"", ""QuickAttack"", ""Thunder""},
    {""Flareon"", 3, 1, 67, 108, ""Ember"", ""Flamethrower"", ""QuickAttack"", ""FireBlast""},
    {""Espeon"", 12, 1, 67, 108, ""Confusion"", ""Psychic"", ""QuickAttack"", ""Psybeam""},
    {""Umbreon"", 17, 1, 110, 65, ""Bite"", ""ShadowBall"", ""QuickAttack"", ""DarkPulse""},
    {""Leafeon"", 6, 1, 80, 95, ""Absorb"", ""RazorLeaf"", ""MagicLeaf"", ""Solarbeam""},
    {""Glaceon"", 7, 1, 75, 100, ""QuickAttack"", ""Psychic"", ""Surf"", ""AuroraBeam""},
    {""Golem"", 14, 10, 76, 89, ""Tackle"", ""RockThrow"", ""Flamethrower"", ""nil""},
    {""Rhydon"", 14, 10, 75, 87, ""Tackle"", ""RockThrow"", ""nil"", ""nil""},
    {""Golbat"", 9, 11, 75, 77, ""Confusion"", ""Gust"", ""Absorb"", ""Psychic""},
    {""Crobat"", 11, 9, 88, 90, ""AirSlash"", ""LeechLife"", ""Psychic"", ""MegaDrain""},
    {""Onix"", 14, 10, 80, 48, ""Tackle"", ""RockThrow"", ""nil"", ""nil""},
    {""Dewgong"", 4, 7, 89, 70, ""Confusion"", ""Bubblebeam"", ""Psychic"", ""AuroraBeam""},
    {""Piloswine"", 7, 10, 73, 77, ""Tackle"", ""Bubble"", ""Bubblebeam"", ""AuroraBeam""},
    {""Lombre"", 4, 6, 58, 55, ""Tackle"", ""Bubble"", ""Absorb"", ""Bubblebeam""},
    {""Ludicolo"", 4, 6, 79, 89, ""Bubblebeam"", ""MegaDrain"", ""Solarbeam"", ""nil""},
    {""Whiscash"", 4, 10, 84, 72, ""Pound"", ""Tackle"", ""Bubble"", ""Bubblebeam""},
    {""Lapras"", 4, 7, 100, 78, ""Bubblebeam"", ""HyperBeam"", ""HydroPump"", ""Surf""},
    {""Aggron"", 18, 14, 87, 89, ""Tackle"", ""RockThrow"", ""MetalClaw"", ""IronTail""},
    {""Magcargo"", 3, 14, 69, 67, ""Ember"", ""RockThrow"", ""Flamethrower"", ""FireBlast""},
    {""Ninetales"", 3, 1, 84, 84, ""Flamethrower"", ""HyperBeam"", ""FireBlast"", ""SacredFire""},
    {""Gyarados"", 4, 11, 83, 97, ""Bubblebeam"", ""Surf"", ""HydroPump"", ""nil""},
    {""Wailord"", 4, 1, 91, 76, ""Bubblebeam"", ""Surf"", ""HydroPump"", ""nil""},
    {""Electabuzz"", 5, 1, 69, 94, ""Tackle"", ""Thundershock"", ""Thunderbolt"", ""Thunder""},
    {""Electivire"", 5, 1, 71, 109, ""Thundershock"", ""Thunderbolt"", ""Thunder"", ""BodySlam""},
    {""Magneton"", 5, 18, 60, 95, ""Tackle"", ""Thundershock"", ""Thunderbolt"", ""nil""},
    {""Ledian"", 13, 11, 75, 55, ""Confusion"", ""Gust"", ""MegaDrain"", ""nil""},
    {""Heracross"", 13, 8, 74, 93, ""Tackle"", ""MegaDrain"", ""IronTail"", ""Gust""},
    {""Scyther"", 13, 11, 73, 94, ""AirSlash"", ""Solarbeam"", ""FalseSwipe"", ""FuryCutter""},
    {""Haunter"", 15, 9, 44, 91, ""Confusion"", ""Psychic"", ""DarkPulse"", ""ShadowBall""},
    {""Gengar"", 15, 9, 60, 107, ""Confusion"", ""Psychic"", ""DarkPulse"", ""ShadowBall""},
    {""Absol"", 17, 1, 54, 101, ""Psychic"", ""Slash"", ""QuickAttack"", ""DarkPulse""},
    {""Lucario"", 2, 18, 67, 108, ""QuickAttack"", ""DarkPulse"", ""AuraSphere"", ""nil""},
    {""Dragonite"", 16, 11, 86, 114, ""DarkPulse"", ""FireBlast"", ""Solarbeam"", ""Thunderbolt""},
    {""Cresselia"", 12, 1, 125, 75, ""Psybeam"", ""AuroraBeam"", ""Psychic"", ""HyperBeam""},
    {""Darkrai"", 17, 1, 79, 121, ""Psychic"", ""ShadowBall"", ""DarkPulse"", ""DarkVoid""},
    {""Ho-oh"", 3, 11, 108, 119, ""Thunderbolt"", ""Thunder"", ""HyperBeam"", ""SacredFire""},
    {""Jirachi"", 18, 12, 100, 100, ""Confusion"", ""Metronome"", ""Psychic"", ""Thunder""},
    {""Regirock"", 14, 1, 110, 84, ""RockThrow"", ""BodySlam"", ""AncientPower"", ""nil""},
    {""Registeel"", 18, 1, 117, 76, ""Thunderbolt"", ""Thunder"", ""ZapCannon"", ""nil""},
    {""Regice"", 7, 1, 110, 84, ""IcyWind"", ""AuroraBeam"", ""Bubblebeam"", ""nil""},
    {""Shaymin"", 6, 1, 100, 100, ""RazorLeaf"", ""MagicLeaf"", ""Solarbeam"", ""SeedFlare""},
    {""Rayquaza"", 16, 11, 89, 137, ""Thunderbolt"", ""Thunder"", ""Dragonbreath"", ""HyperBeam""},
    {""Mew"", 12, 1, 100, 100, ""Pound"", ""Confusion"", ""Metronome"", ""Psychic""},
    {""Dialga"", 18, 16, 96, 131, ""MetalClaw"", ""RoarOfTime"", ""Dragonbreath"", ""Earthquake""},
    {""Palkia"", 4, 16, 93, 133, ""Dragonbreath"", ""SpatialRend"", ""HydroPump"", ""DragonPulse""},
    {""Giratina"", 16, 15, 130, 96, ""AncientPower"", ""ShadowForce"", ""Earthquake"", ""DracoMeteor""},
    {""Arceus-99"", 2, 1, 120, 120, ""Thunderbolt"", ""Judgment"", ""FireBlast"", ""Recover"", ""TheTruth""},
    {""Arceus-100"", 2, 1, 120, 120, ""Judgment"", ""FireBlast"", ""Recover"", ""TheTruth""},
    {""EndOfDex"", 1, 1, 1, 1, ""nil"", ""nil"", ""nil"", ""nil""},
	{""Bro you are at the end of the dex"", 1, 1, 1, 1, ""nil"", ""nil"", ""nil"", ""nil""}
}

local movedex = {
    [""DracoMeteor""] = {150, 100, 16},
    [""HyperBeam""] = {150, 100, 2},
    [""Judgment""] = {120, 100, 2},
    [""SacredFire""] = {120, 100, 3},
    [""ShadowForce""] = {120, 100, 15},
    [""Solarbeam""] = {120, 100, 6},
    [""DarkVoid""] = {100, 100, 17},
    [""Earthquake""] = {100, 100, 10},
    [""SpatialRend""] = {100, 100, 16},
    [""DragonPulse""] = {90, 100, 16},
    [""Flamethrower""] = {90, 100, 3},
    [""Psychic""] = {90, 100, 12},
    [""Surf""] = {90, 100, 4},
    [""Thunderbolt""] = {90, 100, 5},
    [""AuraSphere""] = {80, 100, 8},
    [""DarkPulse""] = {80, 100, 17},
    [""HyperFang""] = {80, 100, 2},
    [""ShadowBall""] = {80, 100, 15},
    [""AirSlash""] = {75, 100, 11},
    [""Bubblebeam""] = {75, 100, 4},
    [""BodySlam""] = {70, 100, 2},
    [""Slash""] = {70, 100, 2},
    [""AuroraBeam""] = {65, 100, 7},
    [""FalseSwipe""] = {65, 100, 2},
    [""Psybeam""] = {65, 100, 12},
    [""AncientPower""] = {60, 100, 14},
    [""Bite""] = {60, 100, 17},
    [""Dragonbreath""] = {60, 100, 16},
    [""MagicLeaf""] = {60, 1000, 6},
    [""RockThrow""] = {60, 100, 14},
    [""IcyWind""] = {55, 100, 7},
    [""MetalClaw""] = {55, 100, 18},
    [""RazorLeaf""] = {55, 100, 6},
    [""Bubble""] = {40, 100, 4},
    [""Confusion""] = {40, 100, 12},
    [""Ember""] = {40, 100, 3},
    [""Gust""] = {40, 100, 11},
    [""Pound""] = {40, 100, 2},
    [""QuickAttack""] = {40, 100, 2},
    [""Scratch""] = {40, 100, 2},
    [""Tackle""] = {40, 100, 2},
    [""Thundershock""] = {40, 100, 5},
    [""FuryCutter""] = {40, 95, 13},
    [""RoarOfTime""] = {150, 90, 16},
    [""SeedFlare""] = {120, 85, 6},
    [""FireBlast""] = {120, 80, 3},
    [""HydroPump""] = {110, 80, 4},
    [""IronTail""] = {100, 75, 18},
    [""Thunder""] = {110, 70, 5},
    [""ZapCannon""] = {120, 50, 5},
    [""Absorb""] = {25, 100, 6},
    [""LeechLife""] = {25, 100, 13},
    [""Recover""] = {0, 100, 2},
    [""MegaDrain""] = {50, 100, 6},
    [""Metronome""] = {0, 100, 2},
    [""TheTruth""] = {0, 100, 2},
    [""nil""] = {0, 0, 1}
}

local typechart = {
   { -- NONE
        1,    -- None
        1,    -- Normal
        1,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        1,    -- Poison
        1,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        1,    -- Rock
        1,    -- Ghost
        1,    -- Dragon
        1,    -- Dark
        1,    -- Steel
        1,    -- Fairy
    },
    { -- NORMAL
        1,    -- None
        1,    -- Normal
        1,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        1,    -- Poison
        1,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        N,    -- Rock
        I,    -- Ghost
        1,    -- Dragon
        1,    -- Dark
        N,    -- Steel
        1,    -- Fairy
    },
    { -- FIRE
        1,    -- None
        1,    -- Normal
        N,    -- Fire
        N,    -- Water
        1,    -- Electric
        S,    -- Grass
        S,    -- Ice
        1,    -- Fighting
        1,    -- Poison
        1,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        S,    -- Bug
        N,    -- Rock
        1,    -- Ghost
        N,    -- Dragon
        1,    -- Dark
        S,    -- Steel
        1,    -- Fairy
    },
    { -- WATER
        1,    -- None
        1,    -- Normal
        S,    -- Fire
        N,    -- Water
        1,    -- Electric
        N,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        1,    -- Poison
        S,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        S,    -- Rock
        1,    -- Ghost
        N,    -- Dragon
        1,    -- Dark
        1,    -- Steel
        1,    -- Fairy
    },
    { -- ELECTRIC
        1,    -- None
        1,    -- Normal
        1,    -- Fire
        S,    -- Water
        N,    -- Electric
        1,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        1,    -- Poison
        I,    -- Ground
        S,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        1,    -- Rock
        1,    -- Ghost
        N,    -- Dragon
        1,    -- Dark
        1,    -- Steel
        1,    -- Fairy
    },
    { -- GRASS
        1,    -- None
        1,    -- Normal
        N,    -- Fire
        S,    -- Water
        1,    -- Electric
        N,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        N,    -- Poison
        S,    -- Ground
        N,    -- Flying
        1,    -- Psychic
        N,    -- Bug
        S,    -- Rock
        1,    -- Ghost
        N,    -- Dragon
        1,    -- Dark
        N,    -- Steel
        1,    -- Fairy
    },
    { -- ICE
        1,    -- None
        1,    -- Normal
        N,    -- Fire
        N,    -- Water
        1,    -- Electric
        S,    -- Grass
        N,    -- Ice
        1,    -- Fighting
        1,    -- Poison
        S,    -- Ground
        S,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        1,    -- Rock
        1,    -- Ghost
        S,    -- Dragon
        1,    -- Dark
        N,    -- Steel
        1,    -- Fairy
    },
    { -- FIGHTING
        1,    -- None
        S,    -- Normal
        1,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        S,    -- Ice
        1,    -- Fighting
        N,    -- Poison
        1,    -- Ground
        N,    -- Flying
        N,    -- Psychic
        N,    -- Bug
        S,    -- Rock
        I,    -- Ghost
        1,    -- Dragon
        S,    -- Dark
        S,    -- Steel
        N,    -- Fairy
    },
    { -- POISON
        1,    -- None
        1,    -- Normal
        1,    -- Fire
        1,    -- Water
        1,    -- Electric
        S,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        N,    -- Poison
        N,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        N,    -- Rock
        N,    -- Ghost
        1,    -- Dragon
        1,    -- Dark
        I,    -- Steel
        S,    -- Fairy
    },
    { -- GROUND
        1,    -- None
        1,    -- Normal
        S,    -- Fire
        1,    -- Water
        S,    -- Electric
        N,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        S,    -- Poison
        1,    -- Ground
        I,    -- Flying
        1,    -- Psychic
        N,    -- Bug
        S,    -- Rock
        1,    -- Ghost
        1,    -- Dragon
        1,    -- Dark
        S,    -- Steel
        1,    -- Fairy
    },
    { -- FLYING
        1,    -- None
        1,    -- Normal
        1,    -- Fire
        1,    -- Water
        N,    -- Electric
        S,    -- Grass
        1,    -- Ice
        S,    -- Fighting
        1,    -- Poison
        1,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        S,    -- Bug
        N,    -- Rock
        1,    -- Ghost
        1,    -- Dragon
        1,    -- Dark
        N,    -- Steel
        1,    -- Fairy
    },
    { -- PSYCHIC
        1,    -- None
        1,    -- Normal
        1,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        1,    -- Ice
        S,    -- Fighting
        S,    -- Poison
        1,    -- Ground
        1,    -- Flying
        N,    -- Psychic
        N,    -- Bug
        1,    -- Rock
        1,    -- Ghost
        1,    -- Dragon
        I,    -- Dark
        N,    -- Steel
        1,    -- Fairy
    },
    { -- BUG
        1,    -- None
        1,    -- Normal
        N,    -- Fire
        1,    -- Water
        1,    -- Electric
        S,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        N,    -- Poison
        1,    -- Ground
        N,    -- Flying
        S,    -- Psychic
        1,    -- Bug
        1,    -- Rock
        N,    -- Ghost
        1,    -- Dragon
        S,    -- Dark
        N,    -- Steel
        N,    -- Fairy
    },
    { -- ROCK
        1,    -- None
        1,    -- Normal
        S,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        S,    -- Ice
        N,    -- Fighting
        1,    -- Poison
        N,    -- Ground
        S,    -- Flying
        1,    -- Psychic
        S,    -- Bug
        N,    -- Rock
        1,    -- Ghost
        1,    -- Dragon
        1,    -- Dark
        N,    -- Steel
        1,    -- Fairy
    },
    { -- GHOST
        1,    -- None
        I,    -- Normal
        1,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        1,    -- Poison
        1,    -- Ground
        1,    -- Flying
        S,    -- Psychic
        1,    -- Bug
        1,    -- Rock
        S,    -- Ghost
        1,    -- Dragon
        N,    -- Dark
        1,    -- Steel
        1,    -- Fairy
    },
    { -- DRAGON
        1,    -- None
        1,    -- Normal
        1,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        1,    -- Ice
        1,    -- Fighting
        1,    -- Poison
        1,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        1,    -- Rock
        1,    -- Ghost
        S,    -- Dragon
        1,    -- Dark
        N,    -- Steel
        I,    -- Fairy
    },
    { -- DARK
        1,    -- None
        1,    -- Normal
        1,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        1,    -- Ice
        N,    -- Fighting
        1,    -- Poison
        1,    -- Ground
        1,    -- Flying
        S,    -- Psychic
        1,    -- Bug
        1,    -- Rock
        S,    -- Ghost
        1,    -- Dragon
        N,    -- Dark
        1,    -- Steel
        N,    -- Fairy
    },
    { -- STEEL
        1,    -- None
        1,    -- Normal
        N,    -- Fire
        N,    -- Water
        N,    -- Electric
        1,    -- Grass
        S,    -- Ice
        N,    -- Fighting
        1,    -- Poison
        1,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        S,    -- Rock
        1,    -- Ghost
        1,    -- Dragon
        1,    -- Dark
        N,    -- Steel
        S,    -- Fairy
    },
    { -- FAIRY
        1,    -- None
        1,    -- Normal
        N,    -- Fire
        1,    -- Water
        1,    -- Electric
        1,    -- Grass
        1,    -- Ice
        S,    -- Fighting
        N,    -- Poison
        1,    -- Ground
        1,    -- Flying
        1,    -- Psychic
        1,    -- Bug
        1,    -- Rock
        1,    -- Ghost
        S,    -- Dragon
        S,    -- Dark
        N,    -- Steel
        1,    -- Fairy
    }
}









-- Prints the data of every Pokemon (commenting formatting has to be weird sry)
--for n, data in ipairs(dex) do
--    io.write(data[1].."" - ""..types[data[2]])
--    if data[3] ~= 1 then io.write(""/""..types[data[3]]) end
--[[    io.write("" - ""..data[4].."" HP / ""..data[5].."" ATK - "")
    for i = 6, 9 do
        io.write(data[i])
        if i~=9 then io.write("", "") else io.write(""\n"") end
    end
end
print()
--]]


-- Prints the data of every move (commenting formatting has to be weird sry)
--for n, data in ipairs(movedex) do
--    io.write(data[1].."" - ""..types[data[4]].."" - ""..data[2].."" POW, ""..data[3]..""% ACC\n"")
--end


-- Verifies that every move on every Pokemon is a move with data in the movedex (commenting formatting has to be weird sry)
--for n, data in ipairs(dex) do
--    for i = 6, 9 do
--        if not movedex[data[i]] then print(""Error! Move \""""..data[i]..""\"" not found in movedex. This move is on ""..data[1]..""."") end
--[[    end
end
]]


-- Actual calculator code
local unc = ""zxc"" -- only make it 3 characters

-- Prints the data of two given mons and returns move dmg
local function printData(index1, index2)
    local m1 = dex[index1]
    local m2 = dex[index2]
    local s1 = {}
    local s2 = {}
    print(""Monster 1: ""..m1[1].."" - ""..m1[4].."" HP, ""..m1[5].."" ATK"")
    for i = 1, 4 do
        local move = m1[i+5]
        local myType = movedex[move][3]
        local dmg = 0
        if move == ""FoulPlay"" then
          dmg = m2[5]*movedex[move][1]*typechart[myType][m2[2]]*typechart[myType][m2[3]]/400
        else
          dmg = m1[5]*movedex[move][1]*typechart[myType][m2[2]]*typechart[myType][m2[3]]/400
        end
        if myType == m1[2] or myType == m1[3] then dmg=dmg*STAB end
        print(i.."": ""..move.."" - ""..dmg)
        s1[i] = {move, dmg}
    end
    print(""\nMonster 2: ""..m2[1].."" - ""..m2[4].."" HP, ""..m2[5].."" ATK"")
    for i = 1, 4 do
        local move = m2[i+5]
        local myType = movedex[move][3]
        local dmg = m2[5]*movedex[move][1]*typechart[myType][m1[2]]*typechart[myType][m1[3]]/400
        if myType == m2[2] or myType == m2[3] then dmg=dmg*STAB end
        print(i.."": ""..move.."" - ""..dmg.."""")
        s2[i] = {move, dmg}
    end
    print()
    return s1, s2
end

local saveMode = 0  -- 0 is auto, 1 is manual
local printMode = 0 -- 0 is dashes, 1 is brackets, 2 is both
local lotsaData = {}
-- Format of lotsaData (a dictionary):
-- Suppose Ho-oh is me and Lugia and Mewtwo was the enemy
-- [""Lugia""] = {hoohChain, hoohSum, lugiaChain, lugiaSum},
-- [""Mewtwo""] = {hoohChain, hoohSum, mewtwoChain, mewtwoSum}

-- Adds an entry to lotsaData
local function saveTo(myData)
    if not lotsaData[myData[2]] then lotsaData[myData[2]] = {nil, nil, nil, nil} end
    local place = lotsaData[myData[2]]
    local n = 1
    if myData[1] == 2 then n = 3 end
    place[n] = string.sub(myData[3], 3)
    place[n+1] = myData[4]
end

-- Returns damage and formatted string of a move chain
local function printWithMode(chain, moveInfo, nmeI)
    local moveString = """"
    local sum = 0
    if (printMode == 1 or printMode == 2) then moveString = ""["" end
    for i = 1, string.len(chain) do
        if string.sub(chain, i, i) == ""0"" then
            moveString = moveString..""nothing ""
        else
            local place = moveInfo[tonumber(string.sub(chain, i, i))]
            moveString = moveString..place[1].."" ""
            if place[1] == ""SuperFang"" then
                sum = (sum + dex[nmeI][4])/2 
            else
                sum = sum + place[2]
            end
        end
        if (printMode == 0 or printMode == 2) and i<string.len(chain) then
            moveString = moveString..""- ""
        end
    end
    if (printMode == 1 or printMode == 2) then moveString = string.sub(moveString, 1, string.len(moveString)-1)..""]"" end
    return moveString, sum
end


print(""Welcome to the Jokemon Matchup Calc Tool! This tool is for the game \""Pocket Monsters Reborn RPG\"" on Roblox. Try it some time!\nTo start, choose a Pokemon. (no spaces)"")
local myIndex
local oppIndex = 1
repeat
    myIndex = 1
    local m = io.read()
    while dex[myIndex]~=nil and dex[myIndex][1]~=m do myIndex=myIndex+1 end
    if dex[myIndex]==nil then
        print(""not found"")
    end
until dex[myIndex]~=nil
print(""We will begin at ""..dex[1][1].."". Type \""help\"" to see a tutorial.\n"")
local s1, s2 = printData(myIndex, 1)
local toSave = {}
while true do
    local c = string.upper(io.read())
    for n = string.len(c), 1, -1 do
        if string.sub(c, n, n) == "" "" then c = string.sub(c, 1, n-1)..string.sub(c, n+1) end
    end
    if c == ""HELP"" then
        print(""COMMAND LIST\nhelp - Guide on how to use the tool\nn (or next) - Moves to the next mon in the dex\ns (or search) - Sets Monster 2 to an inputted mon\nmode->print - Changes the mode that strings are printed as\nmode->save - Changes the mode between autosave and manual save\nsavehelp - Guide on how to use the save feature"")
        print(""\nTo simulate a move string, use the following format:\n\""M: string of numbers, no spaces\""\nM is either 1 or 2. It is the mon you are using moves as.\nThe string of numbers represents the moves of the mon."")
        print(""Here is an example. Suppose I am Vaporeon (:fearful:). I type this in:\n1: 1421\nThis indicates that Monster 1 uses moves 1, 4, 2, and 1 in that order. In this specific situation, Vaporeon uses Bubble - HydroPump - BubbleBeam - Bubble."")
        print(""\nThe program ignores spaces when receiving command inputs.\nYou can also put 0 in place of a move usage to indicate nothing.\nThe program will error if you reach the end of the dex, but you can just restart it at any time."")
        print(""Hopefully this helped! Match data will be reprinted below.\n"")
        printData(myIndex, oppIndex)
    elseif c == ""SAVEHELP"" then
        print(""COMMAND LIST\nsavehelp - Guide on how to use the save feature\nsave - Manually saves data in the correct place\ndata - Prints all available data\nkey - Generates a save key for you to copy\nload - Asks for a save key, and creates data with it\nmode->save - Changes the mode between autosave and manual save"")
        print(""\nAutosave will automatically save the \""best\"" string available.\nIf you have a string that is a more minimalist way to defeat the opponent (less length and/or closer to an exact kill), it will save it over whatever's there.\nAdditionally, you can manually save when autosave is still on.\nIn a sense, manual save mode is just a no-autosave mode."")
        print(""\nThe save key will keep track of your print mode and save mode."")
        print(""Hopefully this helped! Match data will be reprinted below.\n"")
        printData(myIndex, oppIndex)
    elseif c == ""N"" or c == ""NEXT"" then
        oppIndex = oppIndex+1
        s1, s2 = printData(myIndex, oppIndex)
    elseif c == ""S"" or c == ""SEARCH"" then
        print(""What mon? (no spaces)"")
        local tempMon = io.read()
        local temp = 1
        while dex[temp]~=nil and dex[temp][1]~=tempMon do temp=temp+1 end
        if dex[temp]==nil then
            print(""not found"")
        else
            oppIndex = temp
        end
        s1, s2 = printData(myIndex, oppIndex)
    elseif (string.sub(c, 1, 2) == ""1:"" or string.sub(c, 1, 2) == ""2:"") and tonumber(string.sub(c, 3)) then
        local passable = true
        for i = 3, string.len(c) do
            local f = string.sub(c,i,i)
            if not (f==""1"" or f==""2"" or f==""3"" or f==""4"") then
                passable = false
            end
        end
        if passable then
            local user = s1
            local userI = myIndex
            local nmeI = oppIndex
            if string.sub(c, 1, 1) == ""2"" then user = s2 userI =     oppIndex nmeI = myIndex end
            local moveString, sum = printWithMode(string.sub(c, 3), user, nmeI)
            io.write(moveString..""\n""..sum.."" DMG, "")
            local diff = dex[nmeI][4]-sum
            if diff>0 then
                print(diff.."" HP left"")
            else
                print(""Overkill by ""..diff*-1)
            end
            print(""This number is equal to a move of raw POW ""..math.abs(diff*400/dex[userI][5]))
            toSave = {tonumber(string.sub(c, 1, 1)), dex[oppIndex][1], c, sum}
            local curName = lotsaData[dex[oppIndex][1]]
            local sumSpot = toSave[1]*2
            if diff<=0 and (not curName or not curName[sumSpot] or
              (curName[sumSpot]>=sum and
              string.len(c)-2<=string.len(curName[sumSpot-1]))) then
                print(""Saving the latest movestring."")
                saveTo(toSave)
            end
            print()
        else
            print(""Invalid, try again.\n"")
        end
    elseif c == ""MODE"" then
        print(""What mode to switch? (either print or save)"")
        local took = string.upper(io.read())
        if took == ""PRINT"" then
            print(""To what? (0 is dash, 1 is brackets, 2 is both)"")
            took = tonumber(io.read())
            if took and (took == 0 or took == 1 or took == 2) then
                printMode = took
                print(""Updated successfully."")
            else
                print(""Invalid, try again.\n"")
            end
        elseif took == ""SAVE"" then
            print(""To what? (0 is auto, 1 is manual)"")
            took = tonumber(io.read())
            if took and (took == 0 or took == 1) then
                print(""Updated successfully."")
            else
                print(""Invalid, try again.\n"")
            end
        else
            print(""Invalid, try again.\n"")
        end
    elseif c == ""SAVE"" then
        print(""Saving the latest movestring.\n"")
        saveTo(toSave)
    elseif c == ""DATA"" then
        print(""Printing data now...\n--------------------\n"")
        local i = 1
        local me = dex[myIndex][1]
        local mine = {{dex[myIndex][6], 0}, {dex[myIndex][7], 0}, {dex[myIndex][8], 0}, {dex[myIndex][9], 0}}
        local wins = """"
        local losses = """"
        local ties = """"
        repeat
            local him = dex[i][1]
            if lotsaData[him] then
                local his = {{dex[i][6], 0}, {dex[i][7], 0}, {dex[i][8], 0}, {dex[i][9], 0}}
                local hisLen = math.huge
                local myLen = math.huge
                io.write(me.."" vs ""..him..""\n""..me.."": "")
                local n = ""nil""
                if lotsaData[him][1] then
                    n = printWithMode(lotsaData[him][1], mine, i)
                    myLen = string.len(lotsaData[him][1])
                end
                io.write(n..""\n""..him.."": "")
                n = ""nil""
                if lotsaData[him][3] then
                    n = printWithMode(lotsaData[him][3], his, i)
                    hisLen = string.len(lotsaData[him][3])
                end
                print(n)
                if myLen>hisLen then
                    print(him.."" wins\n"")
                    losses = losses..him.."" ""
                elseif myLen<hisLen then
                    print(me.."" wins\n"")
                    wins = wins..him.."" ""
                else
                    print(""Tie (probably)"")
                    ties = ties..him.."" ""
                end
            end
            i=i+1
        until i>=#dex
        print(""\n""..me..""\'s Counters:\n""..losses..""\n\n""..me..""\'s Equals:\n""..ties..""\n\n""..me..""\'s Victims:\n""..wins)
        print(""\n------------------\nDone printing all the data!\n"")
    elseif c == ""KEY"" then
        local key = unc..saveMode..printMode
        for k, v in pairs(lotsaData) do
            key = key..k..unc
            for i = 1, 4 do
                if v[i] then
                    key = key..v[i]..unc
                else
                    key = key..""nil""..unc
                end
            end
        end
        print(""Key's done making!!! Here you go:\n""..key..""\n"")
    elseif c == ""LOAD"" then
        print(""Got a key?"")
        local key = io.read()
        unc = string.sub(key, 1, 3)
        saveMode = tonumber(string.sub(key, 4, 4))
        printMode = tonumber(string.sub(key, 5, 5))
        key = string.sub(key, 6)
        while string.len(key)>0 do
            local n = 1
            while string.sub(key, n, n+2)~=unc do n=n+1 end
            local theName = string.sub(key, 0, n-1)
            if not lotsaData[theName] then
                lotsaData[theName] = {nil, nil, nil, nil}
            end
            key = string.sub(key, n+3)
            for i = 1, 4 do
                n = 1
                while string.sub(key, n, n+2)~=unc do n=n+1 end
                lotsaData[theName][i] = tonumber(string.sub(key, 0, n-1))
                key = string.sub(key, n+3)
            end
        end
        print(""All loaded!\n"")
    elseif c == ""FUN"" or c == ""TERMINATE"" then
        print(""Connection terminated. I'm sorry to interrupt you, Elizabeth, if you still even remember that name, But I'm afraid you've been misinformed. You are not here to receive a gift, nor have you been called here by the individual you assume, although, you have indeed been called. You have all been called here, into a labyrinth of sounds and smells, misdirection and misfortune. A labyrinth with no exit, a maze with no prize. You don't even realize that you are trapped. Your lust for blood has driven you in endless circles, chasing the cries of children in some unseen chamber, always seeming so near, yet somehow out of reach, but you will never find them. None of you will. This is where your story ends. And to you, my brave volunteer, who somehow found this job listing not intended for you, although there was a way out planned for you, I have a feeling that's not what you want. I have a feeling that you are right where you want to be. I am remaining as well. I am nearby. This place will not be remembered, and the memory of everything that started this can finally begin to fade away. As the agony of every tragedy should. And to you monsters trapped in the corridors, be still and give up your spirits. They don't belong to you. For most of you, I believe there is peace and perhaps more waiting for you after the smoke clears. Although, for one of you, the darkest pit of Hell has opened to swallow you whole, so don't keep the devil waiting, old friend. My daughter, if you can hear me, I knew you would return as well. It's in your nature to protect the innocent. I'm sorry that on that day, the day you were shut out and left to die, no one was there to lift you up into their arms the way you lifted others into yours, and then, what became of you. I should have known you wouldn't be content to disappear, not my daughter. I couldn't save you then, so let me save you now. It's time to rest - for you, and for those you have carried in your arms. This ends for all of us. End communication."")
    else
      print(""Invalid, try again.\n"")
    end 
end"
202RZd5Z,best universe movedex code,IHATEMICROWAVEOVEN,Lua,Thursday 18th of May 2023 05:02:16 PM CDT,"local x = ""DracoMeteor	Dragon	150 RoarOfTime	Dragon	150 HyperBeam	Normal	150 ShadowForce	Ghost	120 FireBlast	Fire	120 SacredFire	Fire	120 SeedFlare	Grass	120 Solarbeam	Grass	120 ZapCannon	Electric	120 Judgment	Normal	120 HydroPump	Water	110 Thunder	Electric	110 DarkVoid	Dark	100 SpatialRend	Dragon	100 Earthquake	Ground	100 IronTail	Steel	100 DragonPulse	Dragon	90 Psychic	Psychic	90 Surf	Water	90 Thunderbolt	Electric	90 AuraSphere	Fighting	80 DarkPulse	Dark	80 HyperFang	Normal	80 ShadowBall	Ghost	80 Bubblebeam	Water	75 AirSlash	Flying	75 BodySlam	Normal	70 Slash	Normal	70 FalseSwipe	Normal	65 AuroraBeam	Ice	65 Psybeam	Psychic	65 AncientPower	Rock	60 Bite	Dark	60 Dragonbreath	Dragon	60 MagicLeaf	Grass	60 RockThrow	Rock	60 IcyWind	Ice	55 MetalClaw	Steel	55 RazorLeaf	Grass	55 MegaDrain	Grass	50 Bubble	Water	40 Confusion	Psychic	40 Ember	Fire	40 FuryCutter	Bug	40 Gust	Flying	40 Pound	Normal	40 QuickAttack	Normal	40 Scratch	Normal	40 Tackle	Normal	40 Absorb	Grass	25 LeechLife	Bug	25 TheTruth	Normal	0 Metronome	Normal	0 Recover	Normal	0""

local types = {
    [""None""] = 1,
    [""Normal""] = 2,
    [""Fire""] = 3,
    [""Water""] = 4,
    [""Electric""] = 5,
    [""Grass""] = 6,
    [""Ice""] = 7,
    [""Fighting""] = 8,
    [""Poison""] = 9,
    [""Ground""] = 10,
    [""Flying""] = 11,
    [""Psychic""]  =12,
    [""Bug""] = 13,
    [""Rock""] = 14,
    [""Ghost""] = 15,
    [""Dragon""] = 16,
    [""Dark""] = 17,
    [""Steel""] = 18,
    [""Fairy""] = 19
}

print(""local movedex = {"")
--for i = 1, 3 do
while string.len(x)>1 do
    io.write(""\t"")
    local i = 1
    while string.sub(x, i+1, i+1)~=""\t"" do i=i+1 end
    local myMove = string.sub(x, 1, i)
    for n = string.len(myMove), 1, -1 do
        if string.sub(myMove, n, n) == "" "" then myMove = string.sub(myMove, 1, n-1)..string.sub(myMove, n+1) end
    end
    io.write(""[\""""..myMove..""\""] = {"")
    
    x = string.sub(x, i+2)
    i = 1
    while string.sub(x, i+1, i+1)~=""\t"" do i=i+1 end
    local myType = types[string.sub(x, 1, i)]
    x = string.sub(x, i+2)
    i = 1
    while string.sub(x, i+1, i+1)~="" "" and string.len(x)>=i+1 do i=i+1 end
    io.write(string.sub(x, 1, i).."", acc, ""..myType..""},\n"")
    x = string.sub(x, i+2)
end
io.write(""}"")"
AsP3tM9X,ler o sensor do lab,orneto,Python,Thursday 18th of May 2023 04:37:25 PM CDT,"import time
import serial
import matplotlib.pyplot as plt
import matplotlib.animation as animation

def animate(i, dataList, ser):
    ser.write(b'g')
    arduinoData_string = ser.readline().decode('ascii')

    try:
        arduinoData_float = float(arduinoData_string)
        dataList.append(arduinoData_float)

    except:
        pass

    dataList = dataList[-50:]

    ax.clear()
    ax.plot(dataList)

    ax.set_ylim([0, 1200])
    ax.set_title(""Leitura do sensor"")
    ax.set_ylabel(""ValorLido"")


dataList = []

fig = plt.figure()
ax = fig.add_subplot(111)

ser = serial.Serial(""COM6"", 9600)
time.sleep(2)

ani = animation.FuncAnimation(fig, animate, frames=100, fargs=(dataList, ser), interval=100)

plt.show()
ser.close()"
77dmSx4C,my algo trading bot (beta vers),xmd79,Python,Thursday 18th of May 2023 04:19:13 PM CDT,"import math
import time
import numpy as np
import requests
import talib
import json
import datetime
from datetime import timedelta
from decimal import Decimal
import decimal
import random
import hmac

# binance module imports
from binance.client import Client as BinanceClient
from binance.exceptions import BinanceAPIException, BinanceOrderException
from binance.enums import *

# Load credentials from file
with open(""credentials.txt"", ""r"") as f:
    lines = f.readlines()
    api_key = lines[0].strip()
    api_secret = lines[1].strip()

# Instantiate Binance client
client = BinanceClient(api_key, api_secret)

# Define a function to get the account balance in BUSD
def get_account_balance():
    accounts = client.futures_account_balance()
    for account in accounts:
        if account['asset'] == 'BUSD':
            bUSD_balance = float(account['balance'])
            return bUSD_balance

# Get the USDT balance of the futures account
bUSD_balance = float(get_account_balance())

# Calculate the trade size based on the USDT balance with 20x leverage
TRADE_SIZE = bUSD_balance * 20

# Global variables
TRADE_SYMBOL = 'BTCBUSD'
TRADE_TYPE = ''
TRADE_LVRG = 20
STOP_LOSS_THRESHOLD = 0.0144 # define 1.44% for stoploss
TAKE_PROFIT_THRESHOLD = 0.0144 # define 1.44% for takeprofit
BUY_THRESHOLD = -10
SELL_THRESHOLD = 10
EMA_SLOW_PERIOD = 56
EMA_FAST_PERIOD = 12
closed_positions = []
OPPOSITE_SIDE = {'long': 'SELL', 'short': 'BUY'}

# Initialize variables for tracking trade state
trade_open = False
trade_side = None
trade_entry_pnl = 0
trade_exit_pnl = 0
trade_entry_time = 0
trade_percentage = 0

print()

# Print account balance
print(""BUSD Futures balance:"", bUSD_balance)

# Define timeframes
timeframes = ['1m', '3m', '5m']
print(timeframes)

print()

# Define start and end time for historical data
start_time = int(time.time()) - (86400 * 30)  # 30 days ago
end_time = int(time.time())

# Fetch historical data for BTCBUSD pair
candles = {}
for interval in timeframes:
    tf_candles = client.futures_klines(symbol=TRADE_SYMBOL, interval=interval, startTime=start_time * 1000, endTime=end_time * 1000)
    candles[interval] = []
    for candle in tf_candles:
        candles[interval].append({
            'timestamp': candle[0],
            'open': float(candle[1]),
            'high': float(candle[2]),
            'low': float(candle[3]),
            'close': float(candle[4]),
            'volume': float(candle[5])
        })

# Print the historical data for BTCUSDT pair
#for interval in timeframes:
#    print(f""Data for {interval} interval:"")
#    print(candles[interval])

print()


# Create close prices array for each time frame
close_prices = {}
for interval in timeframes:
    close_prices[interval] = np.array([c['close'] for c in candles[interval]], dtype=np.double)
    print(f""Close prices for {interval} time frame:"")
    print(close_prices[interval])
    print()

print()

# Global variables
closed_positions = []

print()

def get_mtf_signal(candles, timeframes, percent_to_min=5, percent_to_max=5):
    signals = {}

    # Get the OHLCV data for the 1-minute timeframe
    data = np.array([[c['open'], c['high'], c['low'], c['close'], c['volume']] for c in candles['1m']], dtype=np.double)

    # Get the HT sine wave indicator for the 1-minute timeframe
    sine, leadsine = talib.HT_SINE(data[:, 3])

    # Normalize the HT sine wave indicator to the minimum and maximum prices in the market data
    min_price = np.nanmin(data[:, 3])
    max_price = np.nanmax(data[:, 3])
    norm_sine = (sine - min_price) / (max_price - min_price)

    # Get the minimum and maximum values of the normalized HT Sine Wave indicator
    min_sine = np.nanmin(norm_sine)
    max_sine = np.nanmax(norm_sine)

    # Calculate the percentage distance from the current close on sine to the minimum and maximum values of the normalized HT Sine Wave indicator
    close = data[-1][-2]
    percent_to_min_val = (max_sine - norm_sine[-1]) / (max_sine - min_sine) * 100
    percent_to_max_val = (norm_sine[-1] - min_sine) / (max_sine - min_sine) * 100

    # Print percentages
    print(f""Current close on sine is {percent_to_min_val:.2f}% away from the minimum value"")
    print(f""Current close on sine is {percent_to_max_val:.2f}% away from the maximum value"")
    print()

    # Calculate the distance from the current momentum to the closest reversal keypoint
    if norm_sine[-1] >= max_sine - (max_sine - min_sine) * percent_to_max / 100:
        mtf_signal = ""bearish""
        reversal_keypoint = max_sine
        momentum_distance_min = 100 * ((close - max_sine) / (max_price - min_price))
        momentum_distance_max = 100 * ((close - min_sine) / (max_price - min_price))
    elif norm_sine[-1] <= min_sine + (max_sine - min_sine) * percent_to_min / 100:
        mtf_signal = ""bullish""
        reversal_keypoint = min_sine
        momentum_distance_min = 100 * ((min_sine - close) / (max_price - min_price))
        momentum_distance_max = 100 * ((max_sine - close) / (max_price - min_price))
    else:
        # Calculate the average percentage across all timeframes
        if signals and len(signals) > 0:
            avg_percent = sum([signals[tf] for tf in signals]) / len(signals)
        else:
            avg_percent = 0.0

        # Calculate the distance between the average percentage and the minimum and maximum percentages
        dist_to_min = abs(avg_percent - percent_to_min_val)
        dist_to_max = abs(avg_percent - percent_to_max_val)

        if dist_to_min < dist_to_max:
            mtf_signal = ""bullish""
        else:
            mtf_signal = ""bearish""

        reversal_keypoint = None
        momentum_distance_min = None
        momentum_distance_max = None

    # Store the percentage distance for each timeframe in the signals dictionary
    for tf in timeframes:
        # Get the OHLCV data for the specified timeframe
        tf_data = np.array([[c['open'], c['high'], c['low'], c['close'], c['volume']] for c in candles[tf]], dtype=np.double)

        # Get the HT sine wave indicator for the specified timeframe
        tf_sine, tf_leadsine = talib.HT_SINE(tf_data[:, 3])

        # Normalize the HT sine wave indicator to the minimum and maximum prices in the market data
        tf_min_price = np.nanmin(tf_data[:, 3])
        tf_max_price = np.nanmax(tf_data[:, 3])
        tf_norm_sine = (tf_sine - tf_min_price) / (tf_max_price - tf_min_price)

        # Get the minimum and maximum values of the normalized HT Sine Wave indicator
        tf_min_sine = np.nanmin(tf_norm_sine)
        tf_max_sine = np.nanmax(tf_norm_sine)

        # Calculate the percentage distance from the current close on the sine wave to the minimum and maximum values of the normalized HT Sine Wave indicator
        tf_close = tf_data[-1][-2]
        tf_percent_to_min = (tf_max_sine - tf_norm_sine[-1]) / (tf_max_sine - tf_min_sine) * 100
        tf_percent_to_max = (tf_norm_sine[-1] - tf_min_sine) / (tf_max_sine - tf_min_sine) * 100

        # Store the percentage distance in the signals dictionary
        signals[tf] = tf_percent_to_min if mtf_signal == ""bullish"" else tf_percent_to_max

    return signals, mtf_signal

# Get the MTF signals
signals, mtf_signal = get_mtf_signal(candles, timeframes, percent_to_min=5, percent_to_max=5)

# Print the signals for all timeframes
print(""MTF signals:"")

print()
for tf, signal in signals.items():
    print(f""{tf} - {signal}"")

print()
# Print the buy/sell signal based on the MTF signals
print(""MTF buy/sell signal:"", mtf_signal)

print()

def check_mtf_signal(candles, timeframes, mtf_signal):
    signal = ""No Signal""
    # Get the OHLCV data for the 1-minute timeframe
    data = np.array([[c['open'], c['high'], c['low'], c['close'], c['volume']] for c in candles['1m']], dtype=np.double)

    # Get the HT sine wave indicator for the 1-minute timeframe
    sine, leadsine = talib.HT_SINE(data[:, 3])

    # Normalize the HT sine wave indicator to the minimum and maximum prices in the market data
    min_price = np.nanmin(data[:, 3])
    max_price = np.nanmax(data[:, 3])
    norm_sine = (sine - min_price) / (max_price - min_price)
    norm_leadsine = (leadsine - min_price) / (max_price - min_price)

    # Get the minimum and maximum values of the normalized HT Sine Wave indicator
    min_sine = np.nanmin(norm_sine)
    max_sine = np.nanmax(norm_sine)

    # Calculate the time difference between the minimum and maximum values
    if np.isnan(min_sine) or np.isnan(max_sine):
        cycle_time_str = ""N/A""
    else:
        cycle_time = int(abs(np.nanargmax(norm_sine) - np.nanargmin(norm_sine)) * 0.25)
        cycle_time_str = str(timedelta(minutes=cycle_time, seconds=0)).split(""."")[0]

        # Calculate the time remaining until the cycle completes
        remaining_time = cycle_time % 30
        if remaining_time == 0:
            remaining_time = 30

    # Check if the sine wave fits the market cycle
    close = data[-1][-2]
    if norm_sine[-1] == min_sine and close <= np.nanmin(data[-timeframes['1m']*30:, 3]):
        print(""Close is near the last low on price. Sine wave fits the market cycle."")
    elif norm_sine[-1] == max_sine and close >= np.nanmax(data[-timeframes['1m']*30:, 3]):
        print(""Close is near the last high on price. Sine wave fits the market cycle."")
    else:
        print(""Sine wave momentum 1min tf does not fit the market cycle reversals but in range between key points...seeking reversal"")

    print()

    # Calculate the percentage distance from the current close on sine to the minimum and maximum values of the normalized HT Sine Wave indicator
    percent_to_min = 100 * ((max_sine - norm_sine[-1]) / (max_sine - min_sine))
    percent_to_max = 100 * ((norm_sine[-1] - min_sine) / (max_sine - min_sine))

    # Print percentages
    print(f""Current close on sine is {percent_to_min:.2f}% away from the minimum value"")
    print(f""Current close on sine is {percent_to_max:.2f}% away from the maximum value"")
    print()

    # Calculate the distance from the current momentum to the closest reversal keypoint
    if mtf_signal == ""bearish"":
        reversal_keypoint = max_sine
        momentum_distance_min = 100 * ((close - max_sine) / (max_price - min_price))
        momentum_distance_max = 100 * ((close - min_sine) / (max_price - min_price))
    else:
        reversal_keypoint = min_sine
        momentum_distance_min = 100 * ((min_sine - close) / (max_price - min_price))
        momentum_distance_max = 100 * ((max_sine - close) / (max_price - min_price))

    # Calculate the range between 0 to 100% from close to first reversal incoming closest to current value of close on sine
    if mtf_signal == ""bearish"":
        momentum_range = np.arange(norm_sine[-1], max_sine + 0.0001, (max_sine - norm_sine[-1]) / 100)
    else:
        momentum_range = np.arange(min_sine - 0.0001, norm_sine[-1], (norm_sine[-1] - min_sine) / 100)

    # Determine the trade signal based on momentum and trend signals
    if mtf_signal == ""bearish"" and norm_sine[-1] >= reversal_keypoint:
        signal = ""bearish""
    elif mtf_signal == ""bullish"" and norm_sine[-1] <= reversal_keypoint:
        signal = ""bullish""
    else:
        if percent_to_min > 80:
            signal = ""Momentum Bearish""
        elif percent_to_max > 80:
            signal = ""Momentum Bullish""
    
    print()
    return signal, momentum_distance_min, momentum_distance_max, momentum_range, cycle_time_str, remaining_time, percent_to_min, percent_to_max

mtf = check_mtf_signal(candles, timeframes, mtf_signal)
print(mtf[0])
print()

def get_mtf_signal_v2(candles, timeframes, percent_to_min=5, percent_to_max=5):
    signals = {}
    
    # Get the OHLCV data for the 1-minute timeframe
    data_1m = np.array([[c['open'], c['high'], c['low'], c['close'], c['volume']] for c in candles['1m']], dtype=np.double)
    
    # Get the HT sine wave indicator for the 1-minute timeframe
    sine, leadsine = talib.HT_SINE(data_1m[:, 3])
    
    # Normalize the HT sine wave indicator to the minimum and maximum prices in the market data
    min_price = np.nanmin(data_1m[:, 3])
    max_price = np.nanmax(data_1m[:, 3])
    norm_sine = (sine - min_price) / (max_price - min_price)
    
    # Get the minimum and maximum values of the normalized HT Sine Wave indicator
    min_sine = np.nanmin(norm_sine)
    max_sine = np.nanmax(norm_sine)
    
    # Calculate the percentage distance from the current close on sine to the minimum and maximum values of the normalized HT Sine Wave indicator
    close = data_1m[-1][-2]
    percent_to_min_val = (max_sine - norm_sine[-1]) / (max_sine - min_sine) * 100
    percent_to_max_val = (norm_sine[-1] - min_sine) / (max_sine - min_sine) * 100
    
    for timeframe in timeframes:
        # Get the OHLCV data for the given timeframe
        ohlc_data = np.array([[c['open'], c['high'], c['low'], c['close'], c['volume']] for c in candles[timeframe]], dtype=np.double)
        
        # Calculate the momentum signal for the given timeframe
        close_prices = ohlc_data[:, 3]
        momentum = talib.MOM(close_prices, timeperiod=14)
        
        # Calculate the minimum and maximum values for the momentum signal
        min_momentum = np.nanmin(momentum)
        max_momentum = np.nanmax(momentum)
        
        # Calculate the percentage distance from the current momentum to the minimum and maximum values of the momentum signal
        current_momentum = momentum[-1]
        percent_to_min_momentum = (max_momentum - current_momentum) / (max_momentum - min_momentum) * 100
        percent_to_max_momentum = (current_momentum - min_momentum) / (max_momentum - min_momentum) * 100
        
        # Calculate the new momentum signal based on percentages from the MTF signal and the initial momentum signal
        percent_to_min_combined = (percent_to_min_val + percent_to_min_momentum) / 2
        percent_to_max_combined = (percent_to_max_val + percent_to_max_momentum) / 2
        momentum_signal = percent_to_max_combined - percent_to_min_combined
        
        # Calculate the new average for the MTF signal based on the percentage distance from the current close to the minimum and maximu values of the normalized HT Sine Wave indicator, and the given percentage thresholds
        min_mtf = np.nanmin(ohlc_data[:, 3])
        max_mtf = np.nanmax(ohlc_data[:, 3])
        percent_to_min_custom = percent_to_min / 100
        percent_to_max_custom = percent_to_max / 100
        min_threshold = min_mtf + (max_mtf - min_mtf) * percent_to_min_custom
        max_threshold = max_mtf - (max_mtf - min_mtf) * percent_to_max_custom
        filtered_close = np.where(ohlc_data[:, 3] < min_threshold, min_threshold, ohlc_data[:, 3])
        filtered_close = np.where(filtered_close > max_threshold, max_threshold, filtered_close)
        avg_mtf = np.nanmean(filtered_close)
        
        # Store the signals for the given timeframe
        signals[timeframe] = {'momentum': momentum_signal, 'ht_sine_percent_to_min': percent_to_min_val, 'ht_sine_percent_to_max': percent_to_max_val, 'mtf_average': avg_mtf, 'min_threshold': min_threshold, 'max_threshold': max_threshold}
    
    current_time = datetime.datetime.utcnow() + datetime.timedelta(hours=3)

    # Print the results
    print(""Current time:"", current_time.strftime('%Y-%m-%d %H:%M:%S'))
    print(f""HT Sine Wave Percent to Min: {percent_to_min_val:.2f}%"")
    print(f""HT Sine Wave Percent to Max: {percent_to_max_val:.2f}%"")
    print(f""Momentum Percent to Min: {percent_to_min_momentum:.2f}%"")
    print(f""Momentum Percent to Max: {percent_to_max_momentum:.2f}%"")
    print(f""Combined Percent to Min: {percent_to_min_combined:.2f}%"")
    print(f""Combined Percent to Max: {percent_to_max_combined:.2f}%"")
    print(f""New Momentum Signal: {momentum_signal:.2f}"")
    print(f""New MTF Average:"")
    for timeframe in timeframes:
        print(f""{timeframe}: {signals[timeframe]['mtf_average']:.2f} (min threshold: {signals[timeframe]['min_threshold']:.2f}, max threshold: {signals[timeframe]['max_threshold']:.2f})"")
    print()

    return signals

get_mtf_signal_v2(candles, timeframes, percent_to_min=5, percent_to_max=5)

def get_historical_candles(symbol, start_time, end_time, timeframe):
    candles = client.futures_klines(symbol=symbol, interval=timeframe, startTime=start_time * 1000, endTime=end_time * 1000)
    candles_by_timeframe = {}
    for tf in ['1m', '3m', '5m']:
        if tf == timeframe:
            candles_by_timeframe[tf] = [ {'open': float(candle[1]), 'high': float(candle[2]), 'low': float(candle[3]), 'close': float(candle[4]), 'volume': float(candle[5])} for candle in candles ]
        else:
            resampled_candles = []
            for i in range(0, len(candles), int(tf[:-1])):
                candles_chunk = candles[i:i+int(tf[:-1])]
                if len(candles_chunk) == int(tf[:-1]):
                    open_price = float(candles_chunk[0][1])
                    high_price = max([float(candle[2]) for candle in candles_chunk])
                    low_price = min([float(candle[3]) for candle in candles_chunk])
                    close_price = float(candles_chunk[-1][4])
                    total_volume = sum([float(candle[5]) for candle in candles_chunk])
                    resampled_candles.append({'open': open_price, 'high': high_price, 'low': low_price, 'close': close_price, 'volume': total_volume})
            candles_by_timeframe[tf] = resampled_candles

    return candles_by_timeframe

def get_current_price(symbol):
    ticker = client.futures_symbol_ticker(symbol=symbol)
    return float(ticker['price'])

def get_min_order_quantity(symbol):
    try:
        exchange_info = client.futures_exchange_info()
        symbol_info = next(filter(lambda x: x['symbol'] == symbol, exchange_info['symbols']))
        min_qty = float(symbol_info['filters'][2]['minQty'])
        return min_qty
    except Exception as e:
        print(f""Error getting minimum order quantity for {symbol}: {e}"")
        return None

def entry_long(TRADE_SYMBOL):
    symbol = TRADE_SYMBOL
    side = 'BUY'
    ticker = client.futures_symbol_ticker(symbol=symbol)
    price = float(ticker['price'])
    leverage = 20  # Use 20x leverage
    asset = 'BUSD'
    balance_index = next((index for (index, d) in enumerate(client.futures_account_balance()) if d[""asset""] == asset), None)
    available_balance = float(client.futures_account_balance()[balance_index]['balance'])
    max_position_size = round((available_balance * leverage) / price, 2)  # Calculate max position size based on available balance and leverage
    quantity_percentage = 0.9  # Use 90% of the max position size
    quantity = round(max_position_size * quantity_percentage, 2)  # Calculate order quantity
    timestamp = int(time.time() * 1000)

    try:
        order = client.futures_create_order(symbol=TRADE_SYMBOL, side=side, type='MARKET', quantity=quantity, leverage=leverage, timestamp=timestamp)
        print(f""Entering LONG now...placing BUY order for {TRADE_SYMBOL}"")
        return order
    except BinanceAPIException as e:
        print(f""An error occurred: {e}"")

def entry_short(TRADE_SYMBOL):
    symbol = TRADE_SYMBOL
    side = 'SELL'
    ticker = client.futures_symbol_ticker(symbol=symbol)
    price = float(ticker['price'])
    leverage = 20  # Use 20x leverage
    asset = 'BUSD'
    balance_index = next((index for (index, d) in enumerate(client.futures_account_balance()) if d[""asset""] == asset), None)
    available_balance = float(client.futures_account_balance()[balance_index]['balance'])
    max_position_size = round((available_balance * leverage) / price, 2)  # Calculate max position size based on available balance and leverage
    quantity_percentage = 0.9  # Use 90% of the max position size
    quantity = round(max_position_size * quantity_percentage, 2)  # Calculate order quantity
    timestamp = int(time.time() * 1000)

    try:
        order = client.futures_create_order(symbol=TRADE_SYMBOL, side=side, type='MARKET', quantity=quantity, leverage=leverage, timestamp=timestamp)
        print(f""Entering SHORT now...placing SELL order for {TRADE_SYMBOL}"")
        return order
    except BinanceAPIException as e:
        print(f""An error occurred: {e}"")

def exit_trade():
    # Get all open positions
    positions = client.futures_position_information()
    
    # Loop through each position
    for position in positions:
        symbol = position['symbol']
        position_amount = float(position['positionAmt'])
        
        # Determine order side
        if position['positionSide'] == 'LONG':
            order_side = 'SELL'
        else: 
            order_side = 'BUY'  
            
        # Place order to exit position      
        if position_amount != 0:
            order = client.futures_create_order(
                symbol=symbol,
                side=order_side,
                type='MARKET',
                quantity=abs(position_amount))
                
            print(f""{order_side} order created to exit {abs(position_amount)} {symbol}."")
                
    print(""All positions exited!"")

def calculate_ema(candles, period):
    prices = [float(candle['close']) for candle in candles]
    ema = []
    sma = sum(prices[:period]) / period
    multiplier = 2 / (period + 1)
    ema.append(sma)
    for price in prices[period:]:
        ema.append((price - ema[-1]) * multiplier + ema[-1])
    return ema

print()
print(""Init main() loop: "")
print()

def main():
    # Load credentials from file
    with open(""credentials.txt"", ""r"") as f:
        lines = f.readlines()
        api_key = lines[0].strip()
        api_secret = lines[1].strip()

    # Instantiate Binance client
    client = BinanceClient(api_key, api_secret)

    # Define EM amplitude variables for each quadrant
    em_amp_q1 = 0
    em_amp_q2 = 0
    em_amp_q3 = 0
    em_amp_q4 = 0

    # Define EM phase variables for each quadrant
    em_phase_q1 = 0
    em_phase_q2 = math.pi/2
    em_phase_q3 = math.pi
    em_phase_q4 = 3*math.pi/2

    # Define minimum and maximum values for the sine wave
    sine_wave_min = -1
    sine_wave_max = 1

    # Define min and max values for percentages from close to min and max of talib HT_SINE
    percent_to_min_val = 10
    percent_to_max_val = 10

    trade_open = False
    current_quadrant = None
    trade_entry_pnl = 0
    trade_exit_pnl = 0
    trade_side = None

    # Define constants
    trade_symbol = ""BTCBUSD""
    stop_loss = 0.0144        
    take_profit = 0.0144      
    fast_ema = 12       
    slow_ema = 26         
        
    # Define trade variables    
    position = None   
    trade_open = False       
    trade_side = None
    entry_price = 0
    entry_time = 0

    url = ""https://api.binance.com/api/v3/time""
    while True:       
        try:   
            # Get the server time
            server_time = requests.get('https://api.binance.com/api/v3/time').json()['serverTime']
            
            # Calculate the timestamp of your request       
            timestamp = int(server_time/1000) 

            # Make your request with the adjusted timestamp
            response = requests.get(url, params={'timestamp': timestamp})
            response = requests.get('https://api.binance.com/api/v3/time', auth=(api_key, api_secret))
            print(response.json())

            # Define current_quadrant variable
            current_quadrant = 0

            # Define start and end time for historical data
            start_time = int(time.time()) - (1800 * 4)  # 60-minute interval (4 candles)
            end_time = int(time.time())

            # Define the candles and timeframes to use for the signals
            candles = get_historical_candles(TRADE_SYMBOL, start_time, end_time, '1m')
            timeframes = ['1m', '3m', '5m']

            # Check if candles is empty
            if not candles:
                print(""Error: No historical candles found."")
                continue

            bUSD_balance = float(get_account_balance())
            print(""My BUSD balance from futures wallet is at: "", bUSD_balance)

            # Get the MTF signal
            signals = get_mtf_signal_v2(candles, timeframes, percent_to_min=1, percent_to_max=1)
            print(signals)
            
            print()

            # Check if the '1m' key exists in the signals dictionary
            if '1m' in signals:
                # Check if the percent to min/max signal keys exist in the '1m' dictionary
                if 'ht_sine_percent_to_min' in signals['1m'] and 'ht_sine_percent_to_max' in signals['1m']:
                    percent_to_min_val = signals['1m']['ht_sine_percent_to_min']
                    percent_to_max_val = signals['1m']['ht_sine_percent_to_max']

                    close_prices = np.array([candle['close'] for candle in candles['1m']])
                    print(""Close price:"", close_prices[-1])

                    # Calculate the sine wave using HT_SINE
                    sine_wave, _ = talib.HT_SINE(close_prices)

                    # Replace NaN values with 0 using nan_to_num
                    sine_wave = np.nan_to_num(sine_wave)
                    sine_wave = -sine_wave

                    print(""Current close on Sine wave:"", sine_wave[-1])

                    # Calculate the minimum and maximum values of the sine wave
                    sine_wave_min = np.min(sine_wave)
                    sine_wave_max = np.max(sine_wave)

                    print(""Minimum value of sine wave:"", sine_wave_min)
                    print(""Maximum value of sine wave:"", sine_wave_max)

                    # Calculate the distance from close on sine to min and max as percentages on a scale from 0 to 100%
                    dist_from_close_to_min = ((sine_wave[-1] - sine_wave_min) / (sine_wave_max - sine_wave_min)) * 100
                    dist_from_close_to_max = ((sine_wave_max - sine_wave[-1]) / (sine_wave_max - sine_wave_min)) * 100

                    print(""Distance from close to min:"", dist_from_close_to_min)
                    print(""Distance from close to max:"", dist_from_close_to_max)

                    # Calculate the range of values for each quadrant
                    range_q1 = (sine_wave_max - sine_wave_min) / 4
                    range_q2 = (sine_wave_max - sine_wave_min) / 4
                    range_q3 = (sine_wave_max - sine_wave_min) / 4
                    range_q4 = (sine_wave_max - sine_wave_min) / 4

                    # Set the EM amplitude for each quadrant based on the range of values
                    em_amp_q1 = range_q1 / percent_to_max_val
                    em_amp_q2 = range_q2 / percent_to_max_val
                    em_amp_q3 = range_q3 / percent_to_max_val
                    em_amp_q4 = range_q4 / percent_to_max_val

                    print(""EM amplitude for Q1:"", em_amp_q1)
                    print(""EM amplitude for Q2:"", em_amp_q2)
                    print(""EM amplitude for Q3:"", em_amp_q3)
                    print(""EM amplitude for Q4:"", em_amp_q4)

                    # Calculate the EM phase for each quadrant
                    em_phase_q1 = 0
                    em_phase_q2 = math.pi/2
                    em_phase_q3 = math.pi
                    em_phase_q4 = 3*math.pi/2

                    print(""EM phase for Q1:"", em_phase_q1)
                    print(""EM phase for Q2:"", em_phase_q2)
                    print(""EM phase for Q3:"", em_phase_q3)
                    print(""EM phase for Q4:"", em_phase_q4)

                    # Calculate the current position of the price on the sine wave
                    current_position = (sine_wave[-1] - sine_wave_min) / (sine_wave_max - sine_wave_min)
                    current_quadrant = 0

                    # Determine which quadrant the current position is in
                    if current_position < 0.25:
                        # In quadrant 1
                        em_amp = em_amp_q1
                        em_phase = em_phase_q1
                        current_quadrant = 1
                        print(""Current position is in quadrant 1. Distance from 0% to 25% of range:"", (current_position - 0.0) / 0.25 * 100, ""%"")
                        print(""Current quadrant is: "", current_quadrant)
                    elif current_position < 0.5:
                        # In quadrant 2
                        em_amp = em_amp_q2
                        em_phase = em_phase_q2
                        current_quadrant = 2
                        print(""Current position is in quadrant 2. Distance from 25% to 50% of range:"", (current_position - 0.25) / 0.25 * 100, ""%"")
                        print(""Current quadrant is: "", current_quadrant)
                    elif current_position < 0.75:
                        # In quadrant 3
                        em_amp = em_amp_q3
                        em_phase = em_phase_q3
                        current_quadrant = 3
                        print(""Current position is in quadrant 3. Distance from 50% to 75% of range:"", (current_position - 0.5) / 0.25 * 100, ""%"")
                        print(""Current quadrant is: "", current_quadrant)
                    else:
                        # In quadrant 4
                        em_amp = em_amp_q4
                        em_phase = em_phase_q4
                        current_quadrant = 4
                        print(""Current position is in quadrant 4. Distance from 75% to 100% of range:"", (current_position - 0.75) / 0.25 * 100, ""%"")
                        print(""Current quadrant is: "", current_quadrant)

                    print(""EM amplitude:"", em_amp)
                    print(""EM phase:"", em_phase)

                    # Calculate the EM value
                    em_value = em_amp * math.sin(em_phase)

                    print(""EM value:"", em_value)

                    # Determine the trend direction based on the EM phase differences
                    em_phase_diff_q1_q2 = em_phase_q2 - em_phase_q1
                    em_phase_diff_q2_q3 = em_phase_q3 - em_phase_q2
                    em_phase_diff_q3_q4 = em_phase_q4 - em_phase_q3
                    em_phase_diff_q4_q1 = 2*math.pi - (em_phase_q4 - em_phase_q1)

                    # Check if EMA periods have been defined
                    if EMA_SLOW_PERIOD and EMA_FAST_PERIOD:
                        # Calculate the EMAs
                        ema_slow = talib.EMA(close_prices, timeperiod=EMA_SLOW_PERIOD)[-1]
                        ema_fast = talib.EMA(close_prices, timeperiod=EMA_FAST_PERIOD)[-1]

                        print(""EMA slow:"", ema_slow)
                        print(""EMA fast:"", ema_fast)

                        # Check if the current price is above the EMAs and the percent to min/max signals are above 80%
                        if close_prices[-1] < ema_slow and close_prices[-1] < ema_fast and percent_to_min_val < 20:
                            print(""Buy signal!"")

                        # Check if the current price is below the EMAs and the percent to min/max signals are below 20%
                        elif close_prices[-1] > ema_slow and close_prices[-1] > ema_fast and percent_to_max_val < 20:
                            print(""Sell signal!"")

                        elif percent_to_min_val < 20:
                            print(""Bullish momentum in trend"")
                            if current_quadrant == 1:
                                # In quadrant 1, distance from min to 25% of range
                                print(""Bullish momentum in Q1"")
                            elif current_quadrant == 2:
                                # In quadrant 2, distance from 25% to 50% of range
                                print(""Bullish momentum in Q2"")
                            elif current_quadrant == 3:
                                # In quadrant 3, distance from 50% to 75% of range
                                print(""Bullish momentum in Q3"")
                            elif current_quadrant == 4:
                                # In quadrant 4, distance from 75% to max of range
                                print(""Bullish momentum in Q4"")

                        elif percent_to_max_val < 20:
                            print(""Bearish momentum in trend"")
                            if current_quadrant == 1:
                                # In quadrant 1, distance from min to 25% of range
                                print(""Bearish momentum in Q1"")
                            elif current_quadrant == 2:
                                # In quadrant 2, distance from 25% to 50% of range
                                print(""Bearish momentum in Q2"")
                            elif current_quadrant == 3:
                                # In quadrant 3, distance from 50% to 75% of range
                                print(""Bearish momentum in Q3"")
                            elif current_quadrant == 4:
                                # In quadrant 4, distance from 75% to max of range
                                print(""Bearish momentum in Q4"")

                        # Trading function calls
                        if not trade_open:
                            print(""Not in any trade now...seeking potential entry for new trade"")

                            if close_prices[-1] < signals['1m']['mtf_average'] and percent_to_min_val < 10 and current_quadrant == 1:
                                print(""Entering LONG now...placing BUY order"")
                                entry_long(TRADE_SYMBOL)
                                trade_open = True
                                print(""BUY order was placed...on LONG now"")

                            elif dist_from_close_to_min < 20 and signals['1m']['momentum'] > 0:
                                print(""Entering LONG now...placing BUY order"")
                                entry_long(TRADE_SYMBOL)
                                trade_open = True
                                if trade_open:
                                    print(""BUY order was placed...on LONG now"")

                            elif dist_from_close_to_min < dist_from_close_to_max and signals['1m']['momentum'] > 0:
                                print(""Entering LONG now...placing BUY order"")
                                entry_long(TRADE_SYMBOL)
                                trade_open = True
                                if trade_open:
                                    print(""BUY order was placed...on LONG now"")

                            elif close_prices[-1] > signals['1m']['mtf_average'] and percent_to_max_val < 10 and current_quadrant == 4:
                                print(""Entering SHORT now...placing SELL order"")
                                entry_short(TRADE_SYMBOL)
                                trade_open = True
                                print(""SELL order was placed...on SHORT now"")

                            elif dist_from_close_to_max < 20 and signals['1m']['momentum'] < 0:
                                print(""Entering SHORT now...placing SELL order"")
                                entry_short(TRADE_SYMBOL)
                                trade_open = True
                                if trade_open:
                                    print(""SELL order was placed...on SHORT now"")

                            elif dist_from_close_to_max < dist_from_close_to_min and signals['1m']['momentum'] < 0:
                                print(""Entering SHORT now...placing SELL order"")
                                entry_short(TRADE_SYMBOL)
                                trade_open = True
                                if trade_open:
                                    print(""SELL order was placed...on SHORT now"")

                        elif trade_open:
                            print(""In a trade now...seeking potential exit for this trade"")

                            if abs(float(client.futures_position_information(symbol=TRADE_SYMBOL)[0]['unRealizedProfit'])) >= stop_loss:
                                print(""STOPLOSS was hit! Closing position and exit trade..."")
                                exit_trade()
                                if not trade_open:
                                    trade_open = False

                                print(""Closed position...exit trade done"")

                            elif abs(float(client.futures_position_information(symbol=TRADE_SYMBOL)[0]['unRealizedProfit'])) >= take_profit:
                                print(""TAKEPROFIT was hit! Closing position and exit trade..."")
                                exit_trade()
                                if not trade_open:
                                    trade_open = False

                                print(""Closed position...exit trade done"")


                        else:
                            print(""No signal, seeking local or major reversal"")

                        print()

                    if trade_entry_pnl and trade_open or not trade_open:
                        print(f""Current PNL: {float(client.futures_position_information(symbol=TRADE_SYMBOL)[0]['unRealizedProfit'])}, Entry PNL: {trade_entry_pnl}, Exit PNL: {trade_exit_pnl}"")

                    print()

                else:
                    print(""Error: 'ht_sine_percent_to_min' or 'ht_sine_percent_to_max' keys not found in signals dictionary."")
            else:
                print(""Error: '1m' key not found in signals dictionary."")

            time.sleep(5) # Sleep for 5 seconds      
                
        except BinanceAPIException as e:  
            print(e)

        except Exception as e:      
            print(f""An error occurred: {e}"")    
            time.sleep(5) 

# Run the main function
if __name__ == '__main__':
    main()"
BVNhdWj3,Circular widget in NGUI,ArenMook,C#,Thursday 18th of May 2023 04:05:51 PM CDT,"using System.Collections.Generic;
using UnityEngine;

public class CustomSprite : UISprite
{
	public override void OnFill (List<Vector3> verts, List<Vector2> uvs, List<Color> cols)
	{
		var tex = mainTexture;
		if (tex == null) return;
		if (mSprite == null && GetAtlasSprite() == null) return;

		var outer = new Rect(mSprite.x, mSprite.y, mSprite.width, mSprite.height);
		var inner = new Rect(mSprite.x + mSprite.borderLeft, mSprite.y + mSprite.borderTop,
			mSprite.width - mSprite.borderLeft - mSprite.borderRight,
			mSprite.height - mSprite.borderBottom - mSprite.borderTop);

		outer = NGUIMath.ConvertToTexCoords(outer, tex.width, tex.height);
		inner = NGUIMath.ConvertToTexCoords(inner, tex.width, tex.height);

		var uv0 = new Vector2(inner.xMin, outer.yMin);
		var uv1 = new Vector2(inner.xMax, outer.yMax);

		var offset = verts.Count;
		var po = pivotOffset;
		var x0 = -po.x * mWidth;
		var y0 = -po.y * mHeight;
		var x1 = x0 + mWidth;
		var y1 = y0 + mHeight;

		var v = new Vector4(x0, y0, x1, y1);
		var c = drawingColor;
		var centerV = new Vector3((v.x + v.z) * 0.5f, (v.y + v.w) * 0.5f, 0f);

		const float c_thickness = 0.1f;
		const int c_slices = 90;

		var pi2 = Mathf.PI * 2f;

		for (int i = 0; i < c_slices; ++i)
		{
			var a0 = ((float)i / c_slices) * pi2;
			var a1 = ((float)(i + 1) / c_slices) * pi2;

			var c0 = Mathf.Cos(a0) * 0.5f + 0.5f;
			var c1 = Mathf.Cos(a1) * 0.5f + 0.5f;
			var s0 = Mathf.Sin(a0) * 0.5f + 0.5f;
			var s1 = Mathf.Sin(a1) * 0.5f + 0.5f;

			var v0 = new Vector3(Mathf.Lerp(v.x, v.z, c0), Mathf.Lerp(v.y, v.w, s0), 0f);
			var v1 = new Vector3(Mathf.Lerp(v.x, v.z, c1), Mathf.Lerp(v.y, v.w, s1), 0f);
			var v2 = Vector3.Lerp(v0, centerV, c_thickness);
			var v3 = Vector3.Lerp(v1, centerV, c_thickness);

			verts.Add(v0);
			verts.Add(v2);
			verts.Add(v3);
			verts.Add(v1);

			uvs.Add(uv1);
			uvs.Add(new Vector2(uv1.x, uv0.y));
			uvs.Add(uv0);
			uvs.Add(new Vector2(uv0.x, uv1.y));

			for (int b = 0; b < 4; ++b) cols.Add(c);
		}

		if (onPostFill != null) onPostFill(this, offset, verts, uvs, cols);
	}
}
"
XiZx9Gfh,addRoom2,SethVan,C++,Thursday 18th of May 2023 03:48:45 PM CDT,"#include <a.out.h>
#include <sqlite3.h>
#include <QDebug>
#include <QInputDialog>
#include <QMessageBox>
#include <QString>
#include <QStringList>
#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include <algorithm>

#include ""./ui_widget.h""
#include ""widget.h""

Widget::Widget( QWidget *parent ) : QWidget( parent ), ui( new Ui::Widget )
{
    ui->setupUi( this );
}

Widget::~Widget()
{
    delete ui;
}

void Widget::on_addItemButton_clicked()
{
    addNewRoom();
}

void Widget::on_newItemLineEdit_returnPressed()
{
    addNewRoom();
}

void Widget::on_deleteItemButton_clicked()
{
    if ( ui->listWidget->currentItem() )
    {
       QString room = ui->listWidget->currentItem()->text();
       QString str = ""Are you sure you want to permanently delete this room?:\n\"""" + room + ""\"""";

       if ( QMessageBox::critical( this, ""Deleting room is permanent!"", str, QMessageBox::Yes, QMessageBox::Cancel ) ==
            QMessageBox::Yes )
       {
          delete ui->listWidget->takeItem( ui->listWidget->currentRow() );
       }
    }
}

void Widget::addNewRoom()
{
    if ( ui->newItemLineEdit->text().size() )
    {
        QString room = ui->newItemLineEdit->text();

        auto lastDoubleDotPos = room.lastIndexOf("".."");

        // Inside isNotAPossibleSequenceInput() all non-sequence inputs will be added normally
        if ( isNotAPossibleSequenceInput( lastDoubleDotPos, room ))
        {
           return;
        }

        static const QRegularExpression upperLetterSequence(""^(?<base>.*)(?<start>[A-Z])\\.\\.(?<end>[A-Z])\\s*$"");
        if ( upperLetterSequence.match(room).hasMatch() )
        {
            auto match = upperLetterSequence.match(room);
            addLineEditSequence(match.captured(1), match.captured(2).front().unicode(), match.captured(3).front().unicode(), RoomSequence::Letter);
            return;
        }
        static const QRegularExpression lowerLetterSequence(""^(?<base>.*)(?<start>[a-z])\\.\\.(?<end>[a-z])\\s*$"");
        if ( lowerLetterSequence.match(room).hasMatch() )
        {
            auto match = lowerLetterSequence.match(room);
            addLineEditSequence(match.captured(1), match.captured(2).front().unicode(), match.captured(3).front().unicode(), RoomSequence::Letter);
            return;
        }
        static const QRegularExpression baseToNumberSequence(""^(?<base>.*\\D+)(?<start>[1-9]\\d*)\\.\\.(?<end>[1-9]\\d*)\\s*$"");
        if( baseToNumberSequence.match(room).hasMatch())
        {
            auto match = baseToNumberSequence.match(room);
            addLineEditSequence(match.captured(1), match.captured(2).toInt(), match.captured(3).toInt(), RoomSequence::Number);
            qDebug() << ""\"""" << match.captured(1) << ""\"", \"""" << match.captured(2).toInt() << ""\"", \""""
                                 << match.captured(3).toInt() << ""\"""";
            return;
        }
        static const QRegularExpression pureNumberSequence(""^(?<start>[1-9]\\d*)\\.\\.(?<end>[1-9]\\d*)\\s*$"");
        if( pureNumberSequence.match(room).hasMatch())
        {
            auto match = pureNumberSequence.match(room);
            addLineEditSequence("""", match.captured(1).toInt(), match.captured(2).toInt(), RoomSequence::Number);
//            qDebug() << ""\"""" << match.captured(1) << ""\"", \"""" << match.captured(2).toInt() << ""\"", \""""
//                                 << match.captured(3).toInt() << ""\"""";
            return;
        }
        else
        {
            return ambiguousFormatWarning(room);
        }
    }
}

bool Widget::isNotAPossibleSequenceInput(int pos, const QString& room)
{
    if ( pos == -1 )
    {
        if(room.contains("".""))
        {
            ambiguousFormatWarning(room);
            return true;
        }
        addLineEditText();
        return true;
    }
    if (room.lastIndexOf(""..."") == pos - 1 || pos == room.size() - 2 || pos == 0)
    {
        ambiguousFormatWarning(room);
        return true;
    }
    return false;
}

void Widget::ambiguousFormatWarning(const QString& room)
{
    QString ambigMsgBoxTitle = ""Ambiguous format detected..."";
    QString ambigMsgBoxMsg = ""Ambiguous format detected in inputted room:\n\"""" + room +
            ""\""\nIf you meant to convey a sequence of inputs, then click \'Cancel\'""
            "" and resubmit placing at the end either number(s) or a letter (of matching case) on either side of ""
            ""two dots with the greater value on the right side. Examples:\n\'Suite 100..120\', \'Bungalow 2A..C\'\n""
            ""Otherwise click \'Ignore\' and just one room will be submitted as what was written."";

    if (QMessageBox::warning( this, ambigMsgBoxTitle, ambigMsgBoxMsg, QMessageBox::Ignore, QMessageBox::Cancel )
            == QMessageBox::Cancel )
    {
       return;
    }
    else
    {
         addLineEditText();
         return;
    }
}

void Widget::addLineEditText()
{
    QString addMe = ui->newItemLineEdit->text().trimmed();
    auto existingItems = ui->listWidget->findItems(addMe, Qt::MatchExactly);
    if (existingItems.isEmpty()) {
        // Add the item to the list only if it doesn't exist already
        ui->listWidget->addItem(addMe);
        ui->newItemLineEdit->clear();
    }
    else
    {
        QString msg = ""Room "" + addMe + "" could not be added as it already exists."";
        QMessageBox::information(this, ""Could not add room"", msg);
    }


}

void Widget::addLineEditSequence(const QString& base, int roomNumberStart, int roomNumberEnd, RoomSequence type)
{

    for ( int currentRoom = roomNumberStart; currentRoom < roomNumberEnd + 1; ++currentRoom )
    {
        QString addMe;
        if(type == RoomSequence::Letter)
        {
            addMe = base + QChar(currentRoom);
        }
        else
        {
            addMe = base + QString::number(currentRoom);
        }
        auto trimmed = addMe.trimmed();
        auto existingItems = ui->listWidget->findItems(trimmed, Qt::MatchExactly);
        if (existingItems.isEmpty()) {
            // Add the item to the list only if it doesn't exist already
            ui->listWidget->addItem(addMe);
            ui->newItemLineEdit->clear();
        }
        else
        {
            QString msg = ""Room "" + trimmed + "" could not be added as it already exists."";
            QMessageBox::information(this, ""Could not add room"", msg);
        }

    }
    ui->newItemLineEdit->clear();

}

"
7x0kmqhK,hashcat,fplanzer,Bash,Thursday 18th of May 2023 03:48:17 PM CDT,"#dictionary

hashcat -m 2500 file.hccapx dict.txt --deprecated-check-disable


#bruteforce

hashcat -m 2500 -a 3 file.hccapx ?d?d?d?d?d?d?d? --deprecated-check-disable
"
vA0uAhR2,lavaRefuel,Shadow3641,Lua,Thursday 18th of May 2023 03:45:06 PM CDT,"version = 20230308.1930
--[[
	pastebin get kFZsXu99 lavaRefuel.lua
	Last edited: see version YYYYMMDD.HHMM
	Will auto-download clsTurtle.lua
	Used to refuel a turtle on a lava lake or drain lava
	Use: 'lavaRefuel' in turtle terminal
]]

function clear()
	term.clear()
	term.setCursorPos(1, 1)
end

function checkLibs(libDir, filename)
	local fileExists = false
	if fs.exists(libDir) then
		if not fs.isDir(libDir) then
			fs.move(libDir, libDir..""Renamed"")
			fs.makeDir(libDir)
		end
	else
		fs.makeDir(libDir)
	end
	if fs.exists(fs.combine(libDir, filename)) or fs.exists(fs.combine(libDir, filename.."".lua"")) then
		fileExists = true
	end
	return fileExists
end

function getLavaStrip()
	local block, blockType = T:isWaterOrLava(""down"") -- will automatically fill bucket with lava and refuel
	local start = true
	local length = 0
	local lavaPresent = false
	-- while lava below, just started or moved forward < 3
	while block == ""minecraft:lava"" or block == ""minecraft:flowing_lava"" or start or length < 3 do --will automatically fill bucket with lava
		start = false
		
		if T:forward(1) then
			length = length + 1
		end
		block, blockType = T:isWaterOrLava(""down"")
		print(""In First loop"")
        if turtle.getFuelLevel() >= turtle.getFuelLimit() then
			lavaPresent = false
			print(""Max fuel ""..turtle.getFuelLimit() .. "" achieved"")
            break 
		else
			print(""Block below: ""..tostring(block))
			if block == ""minecraft:lava"" or block == ""minecraft:flowing_lava"" then
				lavaPresent = true
			end
        end
	end
	T:go(""L2F""..length + 1)
	block, blockType = T:isWaterOrLava(""down"")
	while block == ""minecraft:lava"" or block == ""minecraft:flowing_lava"" do
        print(""In Loop 2"")
		T:forward(1)
		block, blockType = T:isWaterOrLava(""down"")
	end
	turtle.back()
	T:go(""L2"")
	return lavaPresent
end

function main()
	local side = ''
	while side == '' do
		clear()
		print(""Place me in front of lava"")
		print(""Which side has more lava? (L C R)"")
		print(""Choose C for a single strip"")
		side = read()
		if side == 'l' or side =='L' then
			side = 'L'
		elseif side == 'r' or side =='R' then
			side = 'R'
		else
			side = 'C'
		end
	end
	local doContinue = true
	if not checkLibs(""lib"", ""clsTurtle"") then
		-- use pastebin get to download clsTurtle to libs folder
		print(""Missing clsTurtle.lua in libs directory"")
		print(""Attempting to obtain from Pastebin..."")
		if shell.run(""pastebin"",""get"",""tvfj90gK"",""lib/clsTurtle.lua"") then
			print(""clsTurtle.lua installed from Pastebin"")
		else
			print(""failed to install clsTurtle.lua from Pastebin"")
			doContinue = false
		end
	end
	sleep(2)
	if doContinue then
		clear()
		print(""Current fuel: ""..turtle.getFuelLevel().."" / ""..turtle.getFuelLimit())
		T = require(""lib.clsTurtle""):new()
		local lavaSlot = T:getItemSlot(""minecraft:lava_bucket"", -1) 
		if lavaSlot > 0 then
			turtle.select(lavaSlot)
			T:refuel(0) -- 0=force refuel
		end
		T:checkInventoryForItem({""minecraft:bucket"", ""minecraft:lava_bucket""}, {1,1}, true)
		T:refuel(0) -- 0=force refuel
		local width = 0
		local lavaPresent = getLavaStrip()
		if side ~= 'C' then -- not a single strip
			while lavaPresent do
				width = width + 1
				if side == 'R' then -- do strip on the right
					T:go(""R1F1L1"")
				else
					T:go(""L1F1R1"")
				end
                print(""Checking fuel"")
				if turtle.getFuelLevel() >= turtle.getFuelLimit() then
					lavaPresent = false
					print(""Max fuel ""..turtle.getFuelLimit() .. "" achieved"")
				else
                    lavaPresent = getLavaStrip()
                end
			end
			if width <= 0 then
				width = 1
			end
			
			if side == 'R' then
				T:go(""L1F""..width..""R1"")
			else
				T:go(""R1F""..width..""L1"")
			end
		end
	else
		print(""Add missing files and restart"")
	end
end

main()"
YHHrDMPG,Memzy Imports,itsWKN,C#,Thursday 18th of May 2023 03:38:19 PM CDT,"[DllImport(""user32.dll"")]
        static extern IntPtr GetDesktopWindow();

        [DllImport(""user32.dll"")]
        static extern IntPtr GetWindowDC(IntPtr hWnd);

        [DllImport(""Shell32.dll"", EntryPoint = ""ExtractIconExW"", CharSet = CharSet.Unicode, ExactSpelling = true,
        CallingConvention = CallingConvention.StdCall)]
        private static extern int ExtractIconEx(string sFile, int iIndex, out IntPtr piLargeVersion,
        out IntPtr piSmallVersion, int amountIcons);

        [DllImport(""user32.dll"")]
        static extern bool InvalidateRect(IntPtr hWnd, IntPtr lpRect, bool bErase);

        [DllImport(""gdi32.dll"")]
        static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest,
        int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc,
        TernaryRasterOperations dwRop);

        public enum TernaryRasterOperations
        {
            SRCCOPY = 0x00CC0020,
            SRCPAINT = 0x00EE0086,
            SRCAND = 0x008800C6,
            SRCINVERT = 0x00660046,
            SRCERASE = 0x00440328,
            NOTSRCCOPY = 0x00330008,
            NOTSRCERASE = 0x001100A6,
            MERGECOPY = 0x00C000CA,
            MERGEPAINT = 0x00BB0226,
            PATCOPY = 0x00F00021,
            PATPAINT = 0x00FB0A09,
            PATINVERT = 0x005A0049,
            DSTINVERT = 0x00550009,
            BLACKNESS = 0x00000042,
            WHITENESS = 0x00FF0062,
        }"
KggZm11s,test,PsychoZZ,C#,Thursday 18th of May 2023 03:29:51 PM CDT,"namespace SomeCode2;

public class TaskManager
{
    private readonly Queue<Action> _actionQueue = new();
    private volatile Task _currentTask = Task.CompletedTask;
    private readonly object _lockObject = new();

    public void AddTask(Action action)
    {
        lock (_lockObject)
        {
            _actionQueue.Enqueue(action);
            if (_currentTask.IsCompleted)
            {
                _currentTask = ProcessTaskAsync();
            }
        }
    }
    
    public async Task WaitForCompletion()
    {
        await _currentTask;
    }

    private async Task ProcessTaskAsync()
    {
        while (true)
        {
            Action action;
            lock (_lockObject)
            {
                if (!_actionQueue.TryDequeue(out action)) 
                    break;
            }
            await Task.Run(action); 
        }
    }
}"
sjbQFUZH,Online Detector,ItsAvyy,Lua,Thursday 18th of May 2023 03:24:41 PM CDT,"local pd = peripheral.wrap(""bottom"")

while true do
	local online = false
	local inRange = true
	local players = pd.getOnlinePlayers()
	
	for _, player in pairs(players) do
		if player == ""ItsAvyy"" then
			online = true
			break
		end
	end
	
	inRange = pd.isPlayerInRange(1000, ""ItsAvyy"")
	
	if online and not inRange then
		redstone.setOutput(""top"", true)
	else 
		redstone.setOutput(""top"", false)
	end
	
	os.sleep(10)
end"
hD1Pyuge,Nigerian scammers [18-5-2/2023],bombaires,HTML,Thursday 18th of May 2023 03:18:06 PM CDT,"<a href=""mailto:charlesrettig28@outlook.com"">charlesrettig28@outlook.com</a>
<a href=""mailto:yagi.kenji@asia.com"">yagi.kenji@asia.com</a>
<a href=""mailto:info@torahblast.com"">info@torahblast.com</a>
<a href=""mailto:murphywalter479@gmail.com"">murphywalter479@gmail.com</a>
<a href=""mailto:m.ur.phy.w.a.lte.r47.9@gmail.com"">m.ur.phy.w.a.lte.r47.9@gmail.com</a>
<a href=""mailto:m.ur.p.hy.wal.t.er4.79@gmail.com"">m.ur.p.hy.wal.t.er4.79@gmail.com</a>
<a href=""mailto:mu.r.phywalt.er4.79@gmail.com"">mu.r.phywalt.er4.79@gmail.com</a>
<a href=""mailto:murp.h.y.w.alt.e.r47.9@gmail.com"">murp.h.y.w.alt.e.r47.9@gmail.com</a>
<a href=""mailto:m.u.rph.ywa.lt.er47.9@gmail.com"">m.u.rph.ywa.lt.er47.9@gmail.com</a>
<a href=""mailto:mu.r.p.hy.w.al.te.r.4.7.9@gmail.com"">mu.r.p.hy.w.al.te.r.4.7.9@gmail.com</a>
<a href=""mailto:mu.rphyw.al.t.e.r.4.7.9@gmail.com"">mu.rphyw.al.t.e.r.4.7.9@gmail.com</a>
<a href=""mailto:m.u.r.p.h.ywal.ter479@gmail.com"">m.u.r.p.h.ywal.ter479@gmail.com</a>
<a href=""mailto:m.u.rphyw.a.lte.r.479@gmail.com"">m.u.rphyw.a.lte.r.479@gmail.com</a>
<a href=""mailto:mu.r.phy.wa.lter.47.9@gmail.com"">mu.r.phy.wa.lter.47.9@gmail.com</a>
<a href=""mailto:mu.rph.y.w.al.t.e.r4.79@gmail.com"">mu.rph.y.w.al.t.e.r4.79@gmail.com</a>
<a href=""mailto:mu.rp.hy.w.a.l.t.e.r47.9@gmail.com"">mu.rp.hy.w.a.l.t.e.r47.9@gmail.com</a>
<a href=""mailto:mur.p.hyw.al.t.er47.9@gmail.com"">mur.p.hyw.al.t.er47.9@gmail.com</a>
<a href=""mailto:m.ur.p.h.ywa.l.t.e.r.4.79@gmail.com"">m.ur.p.h.ywa.l.t.e.r.4.79@gmail.com</a>
<a href=""mailto:m.ur.p.hyw.al.t.e.r.4.7.9@gmail.com"">m.ur.p.hyw.al.t.e.r.4.7.9@gmail.com</a>
<a href=""mailto:mu.r.ph.y.walter4.7.9@gmail.com"">mu.r.ph.y.walter4.7.9@gmail.com</a>
<a href=""mailto:mur.ph.yw.a.lter479@gmail.com"">mur.ph.yw.a.lter479@gmail.com</a>
<a href=""mailto:m.u.rp.h.y.wal.t.er47.9@gmail.com"">m.u.rp.h.y.wal.t.er47.9@gmail.com</a>
<a href=""mailto:mu.rphyw.alte.r.479@gmail.com"">mu.rphyw.alte.r.479@gmail.com</a>
<a href=""mailto:m.u.rph.y.w.a.lter4.7.9@gmail.com"">m.u.rph.y.w.a.lter4.7.9@gmail.com</a>
<a href=""mailto:mur.phy.w.a.l.ter.479@gmail.com"">mur.phy.w.a.l.ter.479@gmail.com</a>
<a href=""mailto:mur.p.hywalter4.7.9@gmail.com"">mur.p.hywalter4.7.9@gmail.com</a>
<a href=""mailto:mu.rp.h.y.w.a.lt.er.47.9@gmail.com"">mu.rp.h.y.w.a.lt.er.47.9@gmail.com</a>
<a href=""mailto:m.ur.phy.w.a.l.t.e.r.4.7.9@gmail.com"">m.ur.phy.w.a.l.t.e.r.4.7.9@gmail.com</a>
<a href=""mailto:m.u.rph.ywalt.er4.79@gmail.com"">m.u.rph.ywalt.er4.79@gmail.com</a>
<a href=""mailto:mu.rp.hy.w.alt.er.4.7.9@gmail.com"">mu.rp.hy.w.alt.er.4.7.9@gmail.com</a>
<a href=""mailto:mu.r.p.hy.walter.47.9@gmail.com"">mu.r.p.hy.walter.47.9@gmail.com</a>
<a href=""mailto:m.u.rph.y.walter479@gmail.com"">m.u.rph.y.walter479@gmail.com</a>
<a href=""mailto:mu.rp.h.yw.a.lte.r.4.7.9@gmail.com"">mu.rp.h.yw.a.lte.r.4.7.9@gmail.com</a>
<a href=""mailto:mu.rphywalte.r.479@gmail.com"">mu.rphywalte.r.479@gmail.com</a>
<a href=""mailto:mu.r.p.h.y.w.a.l.t.er.4.79@gmail.com"">mu.r.p.h.y.w.a.l.t.er.4.79@gmail.com</a>
<a href=""mailto:mu.r.p.hy.wa.l.t.er.4.7.9@gmail.com"">mu.r.p.hy.wa.l.t.er.4.7.9@gmail.com</a>
<a href=""mailto:m.u.r.p.hywa.l.t.er47.9@gmail.com"">m.u.r.p.hywa.l.t.er47.9@gmail.com</a>
<a href=""mailto:murph.y.w.a.l.ter.4.7.9@gmail.com"">murph.y.w.a.l.ter.4.7.9@gmail.com</a>
<a href=""mailto:mu.rp.hyw.a.l.t.e.r.479@gmail.com"">mu.rp.hyw.a.l.t.e.r.479@gmail.com</a>
<a href=""mailto:mu.rph.y.wa.l.t.er4.7.9@gmail.com"">mu.rph.y.wa.l.t.er4.7.9@gmail.com</a>
<a href=""mailto:mu.r.p.hy.w.a.lter47.9@gmail.com"">mu.r.p.hy.w.a.lter47.9@gmail.com</a>
<a href=""mailto:m.urph.ywa.lt.er.4.7.9@gmail.com"">m.urph.ywa.lt.er.4.7.9@gmail.com</a>
<a href=""mailto:mu.r.ph.ywa.l.t.e.r.4.79@gmail.com"">mu.r.ph.ywa.l.t.e.r.4.79@gmail.com</a>
<a href=""mailto:murph.yw.a.l.te.r.4.79@gmail.com"">murph.yw.a.l.te.r.4.79@gmail.com</a>
<a href=""mailto:m.urphy.wal.t.e.r47.9@gmail.com"">m.urphy.wal.t.e.r47.9@gmail.com</a>
<a href=""mailto:mu.rp.h.y.w.a.lt.e.r.4.79@gmail.com"">mu.rp.h.y.w.a.lt.e.r.4.79@gmail.com</a>
<a href=""mailto:m.u.rp.h.y.w.alter.479@gmail.com"">m.u.rp.h.y.w.alter.479@gmail.com</a>
<a href=""mailto:m.u.r.p.hywa.l.te.r.4.79@gmail.com"">m.u.r.p.hywa.l.te.r.4.79@gmail.com</a>
<a href=""mailto:m.urp.h.y.w.alte.r.4.7.9@gmail.com"">m.urp.h.y.w.alte.r.4.7.9@gmail.com</a>
<a href=""mailto:m.urp.hy.wa.l.t.er.479@gmail.com"">m.urp.hy.wa.l.t.er.479@gmail.com</a>
<a href=""mailto:mu.r.ph.yw.a.l.te.r479@gmail.com"">mu.r.ph.yw.a.l.te.r479@gmail.com</a>
<a href=""mailto:m.u.r.p.hy.wa.l.t.er479@gmail.com"">m.u.r.p.hy.wa.l.t.er479@gmail.com</a>
<a href=""mailto:mu.r.p.hy.wa.lte.r.479@gmail.com"">mu.r.p.hy.wa.lte.r.479@gmail.com</a>
<a href=""mailto:mu.r.ph.ywa.l.ter.479@gmail.com"">mu.r.ph.ywa.l.ter.479@gmail.com</a>
<a href=""mailto:m.u.rp.hy.w.a.lter479@gmail.com"">m.u.rp.hy.w.a.lter479@gmail.com</a>
<a href=""mailto:m.u.rphyw.alt.e.r.4.7.9@gmail.com"">m.u.rphyw.alt.e.r.4.7.9@gmail.com</a>
<a href=""mailto:mu.r.ph.yw.alter.4.7.9@gmail.com"">mu.r.ph.yw.alter.4.7.9@gmail.com</a>
<a href=""mailto:m.urph.y.w.a.lt.er.47.9@gmail.com"">m.urph.y.w.a.lt.er.47.9@gmail.com</a>
<a href=""mailto:murp.h.y.wa.l.te.r.47.9@gmail.com"">murp.h.y.wa.l.te.r.47.9@gmail.com</a>
<a href=""mailto:mu.rphy.wa.l.te.r.47.9@gmail.com"">mu.rphy.wa.l.te.r.47.9@gmail.com</a>
<a href=""mailto:m.u.r.p.h.y.wa.lt.e.r.4.79@gmail.com"">m.u.r.p.h.y.wa.lt.e.r.4.79@gmail.com</a>
<a href=""mailto:m.u.r.p.hy.w.al.te.r47.9@gmail.com"">m.u.r.p.hy.w.al.te.r47.9@gmail.com</a>
<a href=""mailto:m.u.rp.hyw.a.l.t.e.r.479@gmail.com"">m.u.rp.hyw.a.l.t.e.r.479@gmail.com</a>
<a href=""mailto:murp.h.yw.a.lt.e.r.47.9@gmail.com"">murp.h.yw.a.lt.e.r.47.9@gmail.com</a>
<a href=""mailto:mu.r.p.h.y.wa.l.ter.4.7.9@gmail.com"">mu.r.p.h.y.wa.l.ter.4.7.9@gmail.com</a>
<a href=""mailto:mu.r.p.hyw.alt.e.r47.9@gmail.com"">mu.r.p.hyw.alt.e.r47.9@gmail.com</a>
<a href=""mailto:mur.p.hy.wa.lt.e.r4.79@gmail.com"">mur.p.hy.wa.lt.e.r4.79@gmail.com</a>
<a href=""mailto:mu.rph.y.w.alt.e.r4.7.9@gmail.com"">mu.rph.y.w.alt.e.r4.7.9@gmail.com</a>
<a href=""mailto:mu.rp.h.yw.a.lt.e.r4.7.9@gmail.com"">mu.rp.h.yw.a.lt.e.r4.7.9@gmail.com</a>
<a href=""mailto:mur.p.h.y.w.alter4.7.9@gmail.com"">mur.p.h.y.w.alter4.7.9@gmail.com</a>
<a href=""mailto:m.ur.p.h.ywal.ter4.7.9@gmail.com"">m.ur.p.h.ywal.ter4.7.9@gmail.com</a>
<a href=""mailto:m.u.rphy.w.a.l.t.er479@gmail.com"">m.u.rphy.w.a.l.t.er479@gmail.com</a>
<a href=""mailto:mu.r.p.h.yw.a.l.t.er.4.7.9@gmail.com"">mu.r.p.h.yw.a.l.t.er.4.7.9@gmail.com</a>
<a href=""mailto:m.u.r.ph.ywalt.e.r4.79@gmail.com"">m.u.r.ph.ywalt.e.r4.79@gmail.com</a>
<a href=""mailto:m.u.rph.ywa.l.t.er.47.9@gmail.com"">m.u.rph.ywa.l.t.er.47.9@gmail.com</a>
<a href=""mailto:m.u.r.phy.w.al.t.er.479@gmail.com"">m.u.r.phy.w.al.t.er.479@gmail.com</a>
<a href=""mailto:mur.phywa.l.t.er.47.9@gmail.com"">mur.phywa.l.t.er.47.9@gmail.com</a>
<a href=""mailto:m.u.r.ph.yw.a.l.t.e.r.47.9@gmail.com"">m.u.r.ph.yw.a.l.t.e.r.47.9@gmail.com</a>
<a href=""mailto:m.u.rphyw.a.l.t.e.r47.9@gmail.com"">m.u.rphyw.a.l.t.e.r47.9@gmail.com</a>
<a href=""mailto:m.urp.hy.wal.t.er47.9@gmail.com"">m.urp.hy.wal.t.er47.9@gmail.com</a>
<a href=""mailto:mur.ph.yw.alt.er4.79@gmail.com"">mur.ph.yw.alt.er4.79@gmail.com</a>
<a href=""mailto:m.u.rp.hywalter.47.9@gmail.com"">m.u.rp.hywalter.47.9@gmail.com</a>
<a href=""mailto:mur.p.h.y.w.alt.e.r479@gmail.com"">mur.p.h.y.w.alt.e.r479@gmail.com</a>
<a href=""mailto:mu.rphy.w.a.lter.4.79@gmail.com"">mu.rphy.w.a.lter.4.79@gmail.com</a>
<a href=""mailto:m.urph.ywa.l.ter.479@gmail.com"">m.urph.ywa.l.ter.479@gmail.com</a>
<a href=""mailto:m.u.r.phywal.te.r4.7.9@gmail.com"">m.u.r.phywal.te.r4.7.9@gmail.com</a>
<a href=""mailto:mu.r.p.h.y.walter.4.7.9@gmail.com"">mu.r.p.h.y.walter.4.7.9@gmail.com</a>
<a href=""mailto:m.u.r.phy.wa.l.te.r47.9@gmail.com"">m.u.r.phy.wa.l.te.r47.9@gmail.com</a>
<a href=""mailto:m.u.rp.hy.wa.l.ter4.7.9@gmail.com"">m.u.rp.hy.wa.l.ter4.7.9@gmail.com</a>
<a href=""mailto:mu.r.phywal.t.e.r4.79@gmail.com"">mu.r.phywal.t.e.r4.79@gmail.com</a>
<a href=""mailto:murp.h.ywa.l.t.e.r.47.9@gmail.com"">murp.h.ywa.l.t.e.r.47.9@gmail.com</a>
<a href=""mailto:m.u.rph.y.w.alt.er479@gmail.com"">m.u.rph.y.w.alt.er479@gmail.com</a>
<a href=""mailto:murp.hy.w.a.l.t.e.r.479@gmail.com"">murp.hy.w.a.l.t.e.r.479@gmail.com</a>
<a href=""mailto:murph.yw.a.lt.er.4.79@gmail.com"">murph.yw.a.lt.er.4.79@gmail.com</a>
<a href=""mailto:m.u.rp.h.yw.al.te.r4.79@gmail.com"">m.u.rp.h.yw.al.te.r4.79@gmail.com</a>
<a href=""mailto:m.u.r.p.hywalt.er.479@gmail.com"">m.u.r.p.hywalt.er.479@gmail.com</a>
<a href=""mailto:murp.hywa.lt.er4.79@gmail.com"">murp.hywa.lt.er4.79@gmail.com</a>
<a href=""mailto:m.u.r.p.hyw.a.lt.e.r.47.9@gmail.com"">m.u.r.p.hyw.a.lt.e.r.47.9@gmail.com</a>
<a href=""mailto:m.u.rp.hyw.al.t.er.47.9@gmail.com"">m.u.rp.hyw.al.t.er.47.9@gmail.com</a>
<a href=""mailto:m.ur.p.hy.w.alt.er.4.7.9@gmail.com"">m.ur.p.hy.w.alt.er.4.7.9@gmail.com</a>
<a href=""mailto:mur.p.hy.w.al.t.er47.9@gmail.com"">mur.p.hy.w.al.t.er47.9@gmail.com</a>
<a href=""mailto:m.ur.p.h.yw.a.lt.e.r.479@gmail.com"">m.ur.p.h.yw.a.lt.e.r.479@gmail.com</a>
<a href=""mailto:mu.rp.h.yw.al.ter4.7.9@gmail.com"">mu.rp.h.yw.al.ter4.7.9@gmail.com</a>
<a href=""mailto:m.u.rphyw.a.lt.e.r.4.7.9@gmail.com"">m.u.rphyw.a.lt.e.r.4.7.9@gmail.com</a>
<a href=""mailto:mu.rp.h.y.wa.l.ter.47.9@gmail.com"">mu.rp.h.y.wa.l.ter.47.9@gmail.com</a>
<a href=""mailto:m.u.r.phy.walt.e.r4.7.9@gmail.com"">m.u.r.phy.walt.e.r4.7.9@gmail.com</a>
<a href=""mailto:murp.h.y.wa.lte.r.47.9@gmail.com"">murp.h.y.wa.lte.r.47.9@gmail.com</a>
<a href=""mailto:mur.p.h.yw.a.lte.r.47.9@gmail.com"">mur.p.h.yw.a.lte.r.47.9@gmail.com</a>
<a href=""mailto:mu.rphy.walt.er.4.7.9@gmail.com"">mu.rphy.walt.er.4.7.9@gmail.com</a>
<a href=""mailto:m.ur.ph.yw.alt.e.r.479@gmail.com"">m.ur.ph.yw.alt.e.r.479@gmail.com</a>
<a href=""mailto:m.urphy.w.a.l.ter4.79@gmail.com"">m.urphy.w.a.l.ter4.79@gmail.com</a>
<a href=""mailto:m.u.r.ph.ywal.t.er.4.7.9@gmail.com"">m.u.r.ph.ywal.t.er.4.7.9@gmail.com</a>
<a href=""mailto:m.u.rph.y.w.a.l.t.er4.79@gmail.com"">m.u.rph.y.w.a.l.t.er4.79@gmail.com</a>
<a href=""mailto:mu.rp.h.ywa.l.t.er47.9@gmail.com"">mu.rp.h.ywa.l.t.er47.9@gmail.com</a>
<a href=""mailto:m.ur.p.hyw.al.t.er4.79@gmail.com"">m.ur.p.hyw.al.t.er4.79@gmail.com</a>
<a href=""mailto:m.urphy.wa.l.t.er.479@gmail.com"">m.urphy.wa.l.t.er.479@gmail.com</a>
<a href=""mailto:m.ur.phy.wal.t.er.4.7.9@gmail.com"">m.ur.phy.wal.t.er.4.7.9@gmail.com</a>
<a href=""mailto:m.urp.hyw.a.lt.e.r47.9@gmail.com"">m.urp.hyw.a.lt.e.r47.9@gmail.com</a>
<a href=""mailto:m.urp.hy.walt.e.r.4.79@gmail.com"">m.urp.hy.walt.e.r.4.79@gmail.com</a>
<a href=""mailto:m.urp.h.y.w.a.l.t.e.r4.7.9@gmail.com"">m.urp.h.y.w.a.l.t.e.r4.7.9@gmail.com</a>
<a href=""mailto:m.ur.ph.yw.a.l.t.er.47.9@gmail.com"">m.ur.ph.yw.a.l.t.er.47.9@gmail.com</a>
<a href=""mailto:mur.phy.w.a.l.t.er.4.7.9@gmail.com"">mur.phy.w.a.l.t.er.4.7.9@gmail.com</a>
<a href=""mailto:m.u.rp.h.yw.alt.er.4.79@gmail.com"">m.u.rp.h.yw.alt.er.4.79@gmail.com</a>
<a href=""mailto:m.u.rp.hy.walt.e.r47.9@gmail.com"">m.u.rp.hy.walt.e.r47.9@gmail.com</a>
<a href=""mailto:mu.rphywalt.e.r4.79@gmail.com"">mu.rphywalt.e.r4.79@gmail.com</a>
<a href=""mailto:m.u.rph.yw.a.lte.r.479@gmail.com"">m.u.rph.yw.a.lte.r.479@gmail.com</a>
<a href=""mailto:m.urphywal.ter479@gmail.com"">m.urphywal.ter479@gmail.com</a>
<a href=""mailto:m.u.r.phyw.alter47.9@gmail.com"">m.u.r.phyw.alter47.9@gmail.com</a>
<a href=""mailto:murphyw.alt.er.4.79@gmail.com"">murphyw.alt.er.4.79@gmail.com</a>
<a href=""mailto:mu.r.p.hy.wa.l.ter.479@gmail.com"">mu.r.p.hy.wa.l.ter.479@gmail.com</a>
<a href=""mailto:mu.r.ph.y.w.a.lt.e.r4.7.9@gmail.com"">mu.r.ph.y.w.a.lt.e.r4.7.9@gmail.com</a>
<a href=""mailto:mu.rp.h.yw.al.te.r.4.79@gmail.com"">mu.rp.h.yw.al.te.r.4.79@gmail.com</a>
<a href=""mailto:mu.r.ph.y.w.alte.r4.79@gmail.com"">mu.r.ph.y.w.alte.r4.79@gmail.com</a>
<a href=""mailto:mu.r.p.hy.walter4.79@gmail.com"">mu.r.p.hy.walter4.79@gmail.com</a>
<a href=""mailto:m.urp.hywa.l.te.r.4.7.9@gmail.com"">m.urp.hywa.l.te.r.4.7.9@gmail.com</a>
<a href=""mailto:mur.p.hy.wa.l.t.er479@gmail.com"">mur.p.hy.wa.l.t.er479@gmail.com</a>
<a href=""mailto:m.u.rp.hywal.te.r.4.79@gmail.com"">m.u.rp.hywal.te.r.4.79@gmail.com</a>
<a href=""mailto:mu.r.phyw.alt.er479@gmail.com"">mu.r.phyw.alt.er479@gmail.com</a>
<a href=""mailto:m.ur.p.h.y.wa.l.ter.4.79@gmail.com"">m.ur.p.h.y.wa.l.ter.4.79@gmail.com</a>
<a href=""mailto:m.ur.phy.w.al.t.e.r47.9@gmail.com"">m.ur.phy.w.al.t.e.r47.9@gmail.com</a>
<a href=""mailto:murphy.wal.te.r.479@gmail.com"">murphy.wal.te.r.479@gmail.com</a>
<a href=""mailto:mu.r.phy.w.a.l.te.r4.7.9@gmail.com"">mu.r.phy.w.a.l.te.r4.7.9@gmail.com</a>
<a href=""mailto:m.u.r.p.h.y.walte.r.4.79@gmail.com"">m.u.r.p.h.y.walte.r.4.79@gmail.com</a>
<a href=""mailto:mu.r.p.hy.w.al.ter.4.7.9@gmail.com"">mu.r.p.hy.w.al.ter.4.7.9@gmail.com</a>
<a href=""mailto:m.ur.p.hy.walter.4.79@gmail.com"">m.ur.p.hy.walter.4.79@gmail.com</a>
<a href=""mailto:m.u.r.p.hy.walter.479@gmail.com"">m.u.r.p.hy.walter.479@gmail.com</a>
<a href=""mailto:m.u.r.phywalt.e.r479@gmail.com"">m.u.r.phywalt.e.r479@gmail.com</a>
<a href=""mailto:mu.r.ph.yw.a.l.ter.4.7.9@gmail.com"">mu.r.ph.yw.a.l.ter.4.7.9@gmail.com</a>
<a href=""mailto:mur.p.hy.w.a.l.te.r.4.79@gmail.com"">mur.p.hy.w.a.l.te.r.4.79@gmail.com</a>
<a href=""mailto:murphyw.al.t.er479@gmail.com"">murphyw.al.t.er479@gmail.com</a>
<a href=""mailto:m.u.rph.ywa.lt.e.r.4.7.9@gmail.com"">m.u.rph.ywa.lt.e.r.4.7.9@gmail.com</a>
<a href=""mailto:m.u.r.ph.y.w.a.lter.4.7.9@gmail.com"">m.u.r.ph.y.w.a.lter.4.7.9@gmail.com</a>
<a href=""mailto:m.u.rphywalt.er.479@gmail.com"">m.u.rphywalt.er.479@gmail.com</a>
<a href=""mailto:mu.r.ph.yw.a.l.t.e.r47.9@gmail.com"">mu.r.ph.yw.a.l.t.e.r47.9@gmail.com</a>
<a href=""mailto:mur.phywal.t.er.47.9@gmail.com"">mur.phywal.t.er.47.9@gmail.com</a>
<a href=""mailto:mu.r.p.hy.w.a.l.ter.479@gmail.com"">mu.r.p.hy.w.a.l.ter.479@gmail.com</a>
<a href=""mailto:murphy.w.a.l.ter.47.9@gmail.com"">murphy.w.a.l.ter.47.9@gmail.com</a>
<a href=""mailto:mu.rp.hy.w.a.lter.4.79@gmail.com"">mu.rp.hy.w.a.lter.4.79@gmail.com</a>
<a href=""mailto:mu.r.p.h.yw.a.lt.er479@gmail.com"">mu.r.p.h.yw.a.lt.er479@gmail.com</a>
<a href=""mailto:m.ur.phy.w.a.l.t.er4.7.9@gmail.com"">m.ur.phy.w.a.l.t.er4.7.9@gmail.com</a>
<a href=""mailto:mu.r.p.hy.wal.t.er4.7.9@gmail.com"">mu.r.p.hy.wal.t.er4.7.9@gmail.com</a>
<a href=""mailto:m.u.rp.h.y.wa.lt.er.4.79@gmail.com"">m.u.rp.h.y.wa.lt.er.4.79@gmail.com</a>
<a href=""mailto:mu.rph.yw.alter.47.9@gmail.com"">mu.rph.yw.alter.47.9@gmail.com</a>
<a href=""mailto:m.u.rphyw.a.lte.r.4.79@gmail.com"">m.u.rphyw.a.lte.r.4.79@gmail.com</a>
<a href=""mailto:m.urph.y.w.a.lt.e.r479@gmail.com"">m.urph.y.w.a.lt.e.r479@gmail.com</a>
<a href=""mailto:m.u.rp.h.yw.a.lter.4.79@gmail.com"">m.u.rp.h.yw.a.lter.4.79@gmail.com</a>
<a href=""mailto:mu.rp.h.yw.alter47.9@gmail.com"">mu.rp.h.yw.alter47.9@gmail.com</a>
<a href=""mailto:mu.rph.y.w.a.l.ter.47.9@gmail.com"">mu.rph.y.w.a.l.ter.47.9@gmail.com</a>
<a href=""mailto:murp.hyw.a.l.ter4.79@gmail.com"">murp.hyw.a.l.ter4.79@gmail.com</a>
<a href=""mailto:m.ur.p.hywa.l.t.er.4.79@gmail.com"">m.ur.p.hywa.l.t.er.4.79@gmail.com</a>
<a href=""mailto:m.urp.hywal.ter.4.7.9@gmail.com"">m.urp.hywal.ter.4.7.9@gmail.com</a>
<a href=""mailto:mu.rphyw.al.te.r.4.79@gmail.com"">mu.rphyw.al.te.r.4.79@gmail.com</a>
<a href=""mailto:m.urph.ywa.l.t.er4.7.9@gmail.com"">m.urph.ywa.l.t.er4.7.9@gmail.com</a>
<a href=""mailto:m.ur.p.h.yw.al.ter.47.9@gmail.com"">m.ur.p.h.yw.al.ter.47.9@gmail.com</a>
<a href=""mailto:murph.ywal.te.r.4.7.9@gmail.com"">murph.ywal.te.r.4.7.9@gmail.com</a>
<a href=""mailto:m.ur.ph.yw.al.t.er.4.79@gmail.com"">m.ur.ph.yw.al.t.er.4.79@gmail.com</a>
<a href=""mailto:m.ur.p.h.y.wal.te.r4.79@gmail.com"">m.ur.p.h.y.wal.te.r4.79@gmail.com</a>
<a href=""mailto:m.urp.hy.w.al.ter4.79@gmail.com"">m.urp.hy.w.al.ter4.79@gmail.com</a>
<a href=""mailto:mur.phy.wa.l.t.er.4.79@gmail.com"">mur.phy.wa.l.t.er.4.79@gmail.com</a>
<a href=""mailto:murph.y.w.a.lte.r479@gmail.com"">murph.y.w.a.lte.r479@gmail.com</a>
<a href=""mailto:m.u.r.p.h.ywa.l.ter.47.9@gmail.com"">m.u.r.p.h.ywa.l.ter.47.9@gmail.com</a>
<a href=""mailto:mur.ph.y.wal.t.er.479@gmail.com"">mur.ph.y.wal.t.er.479@gmail.com</a>
<a href=""mailto:m.ur.p.h.y.w.alter.4.79@gmail.com"">m.ur.p.h.y.w.alter.4.79@gmail.com</a>
<a href=""mailto:murp.hyw.a.l.te.r.4.7.9@gmail.com"">murp.hyw.a.l.te.r.4.7.9@gmail.com</a>
<a href=""mailto:m.ur.p.hy.w.alt.e.r47.9@gmail.com"">m.ur.p.hy.w.alt.e.r47.9@gmail.com</a>
<a href=""mailto:mu.rp.h.yw.al.te.r4.79@gmail.com"">mu.rp.h.yw.al.te.r4.79@gmail.com</a>
<a href=""mailto:mu.rphywa.l.t.er4.7.9@gmail.com"">mu.rphywa.l.t.er4.7.9@gmail.com</a>
<a href=""mailto:m.ur.p.hywal.ter4.79@gmail.com"">m.ur.p.hywal.ter4.79@gmail.com</a>
<a href=""mailto:murph.y.wa.l.ter4.79@gmail.com"">murph.y.wa.l.ter4.79@gmail.com</a>
<a href=""mailto:mur.ph.y.w.a.l.t.er.4.79@gmail.com"">mur.ph.y.w.a.l.t.er.4.79@gmail.com</a>
<a href=""mailto:mur.p.h.y.walt.er.479@gmail.com"">mur.p.h.y.walt.er.479@gmail.com</a>
<a href=""mailto:m.u.r.ph.y.w.a.lter.479@gmail.com"">m.u.r.ph.y.w.a.lter.479@gmail.com</a>
<a href=""mailto:mu.r.p.hyw.a.l.ter4.79@gmail.com"">mu.r.p.hyw.a.l.ter4.79@gmail.com</a>
<a href=""mailto:mu.r.phy.w.a.l.te.r.4.7.9@gmail.com"">mu.r.phy.w.a.l.te.r.4.7.9@gmail.com</a>
<a href=""mailto:m.u.r.phy.w.alt.er47.9@gmail.com"">m.u.r.phy.w.alt.er47.9@gmail.com</a>
<a href=""mailto:m.u.rphy.w.a.lt.er47.9@gmail.com"">m.u.rphy.w.a.lt.er47.9@gmail.com</a>
<a href=""mailto:mu.rph.ywa.lt.er.4.79@gmail.com"">mu.rph.ywa.lt.er.4.79@gmail.com</a>
<a href=""mailto:mur.p.h.y.wa.l.t.e.r4.79@gmail.com"">mur.p.h.y.wa.l.t.e.r4.79@gmail.com</a>
<a href=""mailto:murp.hyw.al.t.er.479@gmail.com"">murp.hyw.al.t.er.479@gmail.com</a>
<a href=""mailto:m.urphy.wa.l.t.e.r479@gmail.com"">m.urphy.wa.l.t.e.r479@gmail.com</a>
<a href=""mailto:m.urph.yw.al.ter.47.9@gmail.com"">m.urph.yw.al.ter.47.9@gmail.com</a>
<a href=""mailto:m.u.r.phywa.l.ter479@gmail.com"">m.u.r.phywa.l.ter479@gmail.com</a>
<a href=""mailto:m.urp.hywal.t.e.r4.7.9@gmail.com"">m.urp.hywal.t.e.r4.7.9@gmail.com</a>
<a href=""mailto:mu.r.p.hy.wa.lter4.79@gmail.com"">mu.r.p.hy.wa.lter4.79@gmail.com</a>
<a href=""mailto:tusiimejumah2@gmail.com"">tusiimejumah2@gmail.com</a>
<a href=""mailto:t.u.si.im.e.j.u.m.ah.2@gmail.com"">t.u.si.im.e.j.u.m.ah.2@gmail.com</a>
<a href=""mailto:tusi.i.mej.umah2@gmail.com"">tusi.i.mej.umah2@gmail.com</a>
<a href=""mailto:t.usii.m.eju.m.ah.2@gmail.com"">t.usii.m.eju.m.ah.2@gmail.com</a>
<a href=""mailto:tu.si.im.ej.u.ma.h.2@gmail.com"">tu.si.im.ej.u.ma.h.2@gmail.com</a>
<a href=""mailto:t.u.sii.m.e.j.um.a.h.2@gmail.com"">t.u.sii.m.e.j.um.a.h.2@gmail.com</a>
<a href=""mailto:tu.si.i.meju.m.a.h2@gmail.com"">tu.si.i.meju.m.a.h2@gmail.com</a>
<a href=""mailto:tu.s.ii.mejum.ah2@gmail.com"">tu.s.ii.mejum.ah2@gmail.com</a>
<a href=""mailto:t.usi.i.meju.m.ah2@gmail.com"">t.usi.i.meju.m.ah2@gmail.com</a>
<a href=""mailto:t.us.iim.ejumah.2@gmail.com"">t.us.iim.ejumah.2@gmail.com</a>
<a href=""mailto:t.u.si.imeju.mah2@gmail.com"">t.u.si.imeju.mah2@gmail.com</a>
<a href=""mailto:tu.s.iim.e.j.u.m.ah.2@gmail.com"">tu.s.iim.e.j.u.m.ah.2@gmail.com</a>
<a href=""mailto:t.u.si.im.ej.u.m.a.h2@gmail.com"">t.u.si.im.ej.u.m.a.h2@gmail.com</a>
<a href=""mailto:t.usii.me.ju.m.a.h2@gmail.com"">t.usii.me.ju.m.a.h2@gmail.com</a>
<a href=""mailto:tu.siime.j.um.a.h.2@gmail.com"">tu.siime.j.um.a.h.2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.e.j.u.m.a.h.2@gmail.com"">tu.s.i.i.m.e.j.u.m.a.h.2@gmail.com</a>
<a href=""mailto:t.usi.im.e.j.u.ma.h.2@gmail.com"">t.usi.im.e.j.u.ma.h.2@gmail.com</a>
<a href=""mailto:tus.iim.e.ju.m.ah2@gmail.com"">tus.iim.e.ju.m.ah2@gmail.com</a>
<a href=""mailto:tu.sii.me.jumah.2@gmail.com"">tu.sii.me.jumah.2@gmail.com</a>
<a href=""mailto:t.usii.mej.u.ma.h.2@gmail.com"">t.usii.mej.u.ma.h.2@gmail.com</a>
<a href=""mailto:t.us.iimejumah.2@gmail.com"">t.us.iimejumah.2@gmail.com</a>
<a href=""mailto:t.u.s.i.ime.j.u.m.a.h.2@gmail.com"">t.u.s.i.ime.j.u.m.a.h.2@gmail.com</a>
<a href=""mailto:t.usii.m.e.j.u.m.a.h2@gmail.com"">t.usii.m.e.j.u.m.a.h2@gmail.com</a>
<a href=""mailto:t.u.si.i.m.ej.u.ma.h.2@gmail.com"">t.u.si.i.m.ej.u.ma.h.2@gmail.com</a>
<a href=""mailto:t.u.s.i.i.m.ejum.ah.2@gmail.com"">t.u.s.i.i.m.ejum.ah.2@gmail.com</a>
<a href=""mailto:tus.i.im.e.ju.m.a.h.2@gmail.com"">tus.i.im.e.ju.m.a.h.2@gmail.com</a>
<a href=""mailto:t.us.i.i.me.jum.ah2@gmail.com"">t.us.i.i.me.jum.ah2@gmail.com</a>
<a href=""mailto:tusi.ime.jum.ah2@gmail.com"">tusi.ime.jum.ah2@gmail.com</a>
<a href=""mailto:t.us.iimej.u.m.ah2@gmail.com"">t.us.iimej.u.m.ah2@gmail.com</a>
<a href=""mailto:tu.sii.m.e.jum.a.h.2@gmail.com"">tu.sii.m.e.jum.a.h.2@gmail.com</a>
<a href=""mailto:t.us.iime.j.u.m.ah2@gmail.com"">t.us.iime.j.u.m.ah2@gmail.com</a>
<a href=""mailto:tu.s.i.imej.um.ah.2@gmail.com"">tu.s.i.imej.um.ah.2@gmail.com</a>
<a href=""mailto:t.usi.im.e.j.uma.h.2@gmail.com"">t.usi.im.e.j.uma.h.2@gmail.com</a>
<a href=""mailto:tu.si.i.mej.um.ah.2@gmail.com"">tu.si.i.mej.um.ah.2@gmail.com</a>
<a href=""mailto:t.u.s.ii.m.ejuma.h2@gmail.com"">t.u.s.ii.m.ejuma.h2@gmail.com</a>
<a href=""mailto:t.u.si.i.m.e.j.um.ah.2@gmail.com"">t.u.si.i.m.e.j.um.ah.2@gmail.com</a>
<a href=""mailto:tus.ii.m.eju.m.a.h.2@gmail.com"">tus.ii.m.eju.m.a.h.2@gmail.com</a>
<a href=""mailto:t.u.si.i.me.ju.ma.h2@gmail.com"">t.u.si.i.me.ju.ma.h2@gmail.com</a>
<a href=""mailto:tusi.im.e.ju.m.a.h2@gmail.com"">tusi.im.e.ju.m.a.h2@gmail.com</a>
<a href=""mailto:t.u.si.i.m.ej.u.m.ah.2@gmail.com"">t.u.si.i.m.ej.u.m.ah.2@gmail.com</a>
<a href=""mailto:tus.i.imeju.m.a.h.2@gmail.com"">tus.i.imeju.m.a.h.2@gmail.com</a>
<a href=""mailto:tus.ii.me.jum.a.h2@gmail.com"">tus.ii.me.jum.a.h2@gmail.com</a>
<a href=""mailto:tus.i.i.me.j.u.m.ah2@gmail.com"">tus.i.i.me.j.u.m.ah2@gmail.com</a>
<a href=""mailto:tus.iim.e.ju.m.a.h2@gmail.com"">tus.iim.e.ju.m.a.h2@gmail.com</a>
<a href=""mailto:tu.sii.me.j.um.ah.2@gmail.com"">tu.sii.me.j.um.ah.2@gmail.com</a>
<a href=""mailto:t.u.siime.j.umah2@gmail.com"">t.u.siime.j.umah2@gmail.com</a>
<a href=""mailto:t.u.s.i.imejum.a.h2@gmail.com"">t.u.s.i.imejum.a.h2@gmail.com</a>
<a href=""mailto:t.us.i.i.mej.um.a.h2@gmail.com"">t.us.i.i.mej.um.a.h2@gmail.com</a>
<a href=""mailto:t.u.s.i.im.e.j.u.ma.h2@gmail.com"">t.u.s.i.im.e.j.u.ma.h2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.ej.um.ah.2@gmail.com"">tu.s.i.i.m.ej.um.ah.2@gmail.com</a>
<a href=""mailto:t.u.s.iim.e.ju.m.a.h.2@gmail.com"">t.u.s.iim.e.ju.m.a.h.2@gmail.com</a>
<a href=""mailto:tusi.ime.j.um.ah.2@gmail.com"">tusi.ime.j.um.ah.2@gmail.com</a>
<a href=""mailto:t.us.iim.e.ju.m.ah2@gmail.com"">t.us.iim.e.ju.m.ah2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.ejum.a.h.2@gmail.com"">tu.s.i.i.m.ejum.a.h.2@gmail.com</a>
<a href=""mailto:tusi.ime.j.u.mah2@gmail.com"">tusi.ime.j.u.mah2@gmail.com</a>
<a href=""mailto:t.usi.i.mejumah2@gmail.com"">t.usi.i.mejumah2@gmail.com</a>
<a href=""mailto:t.u.s.i.ime.j.u.ma.h2@gmail.com"">t.u.s.i.ime.j.u.ma.h2@gmail.com</a>
<a href=""mailto:tu.s.i.i.mejuma.h2@gmail.com"">tu.s.i.i.mejuma.h2@gmail.com</a>
<a href=""mailto:tusiim.ej.umah2@gmail.com"">tusiim.ej.umah2@gmail.com</a>
<a href=""mailto:t.u.s.i.i.m.e.jum.a.h2@gmail.com"">t.u.s.i.i.m.e.jum.a.h2@gmail.com</a>
<a href=""mailto:t.usii.m.e.ju.mah2@gmail.com"">t.usii.m.e.ju.mah2@gmail.com</a>
<a href=""mailto:tu.siimejumah2@gmail.com"">tu.siimejumah2@gmail.com</a>
<a href=""mailto:tu.s.i.ime.juma.h.2@gmail.com"">tu.s.i.ime.juma.h.2@gmail.com</a>
<a href=""mailto:t.usi.i.me.ju.m.ah.2@gmail.com"">t.usi.i.me.ju.m.ah.2@gmail.com</a>
<a href=""mailto:tu.siime.juma.h.2@gmail.com"">tu.siime.juma.h.2@gmail.com</a>
<a href=""mailto:t.u.siimejum.a.h2@gmail.com"">t.u.siimejum.a.h2@gmail.com</a>
<a href=""mailto:tus.i.i.m.e.jum.ah.2@gmail.com"">tus.i.i.m.e.jum.ah.2@gmail.com</a>
<a href=""mailto:tu.s.i.i.me.j.uma.h2@gmail.com"">tu.s.i.i.me.j.uma.h2@gmail.com</a>
<a href=""mailto:t.usii.m.eju.m.a.h2@gmail.com"">t.usii.m.eju.m.a.h2@gmail.com</a>
<a href=""mailto:t.u.sii.m.e.ju.m.a.h2@gmail.com"">t.u.sii.m.e.ju.m.a.h2@gmail.com</a>
<a href=""mailto:t.us.ii.me.j.u.ma.h.2@gmail.com"">t.us.ii.me.j.u.ma.h.2@gmail.com</a>
<a href=""mailto:tu.s.i.im.eju.ma.h.2@gmail.com"">tu.s.i.im.eju.ma.h.2@gmail.com</a>
<a href=""mailto:t.u.siimej.um.a.h2@gmail.com"">t.u.siimej.um.a.h2@gmail.com</a>
<a href=""mailto:t.u.si.imeju.m.a.h2@gmail.com"">t.u.si.imeju.m.a.h2@gmail.com</a>
<a href=""mailto:t.u.siimejumah.2@gmail.com"">t.u.siimejumah.2@gmail.com</a>
<a href=""mailto:t.us.i.imej.uma.h.2@gmail.com"">t.us.i.imej.uma.h.2@gmail.com</a>
<a href=""mailto:t.us.i.im.e.ju.mah2@gmail.com"">t.us.i.im.e.ju.mah2@gmail.com</a>
<a href=""mailto:t.us.i.ime.j.u.m.a.h2@gmail.com"">t.us.i.ime.j.u.m.a.h2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.ej.um.a.h2@gmail.com"">tu.s.i.i.m.ej.um.a.h2@gmail.com</a>
<a href=""mailto:t.us.i.im.e.j.u.m.a.h2@gmail.com"">t.us.i.im.e.j.u.m.a.h2@gmail.com</a>
<a href=""mailto:t.u.s.i.im.e.jumah.2@gmail.com"">t.u.s.i.im.e.jumah.2@gmail.com</a>
<a href=""mailto:t.u.si.im.ej.um.ah2@gmail.com"">t.u.si.im.ej.um.ah2@gmail.com</a>
<a href=""mailto:t.us.i.im.ej.u.m.ah2@gmail.com"">t.us.i.im.ej.u.m.ah2@gmail.com</a>
<a href=""mailto:t.u.s.iimej.um.ah.2@gmail.com"">t.u.s.iimej.um.ah.2@gmail.com</a>
<a href=""mailto:t.u.si.imejum.ah.2@gmail.com"">t.u.si.imejum.ah.2@gmail.com</a>
<a href=""mailto:tus.ii.me.juma.h.2@gmail.com"">tus.ii.me.juma.h.2@gmail.com</a>
<a href=""mailto:t.us.i.i.me.j.u.ma.h.2@gmail.com"">t.us.i.i.me.j.u.ma.h.2@gmail.com</a>
<a href=""mailto:tus.i.i.m.e.j.u.mah2@gmail.com"">tus.i.i.m.e.j.u.mah2@gmail.com</a>
<a href=""mailto:t.u.si.i.mej.um.ah.2@gmail.com"">t.u.si.i.mej.um.ah.2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.ejuma.h.2@gmail.com"">tu.s.i.i.m.ejuma.h.2@gmail.com</a>
<a href=""mailto:tus.ii.m.e.jum.ah2@gmail.com"">tus.ii.m.e.jum.ah2@gmail.com</a>
<a href=""mailto:tus.i.i.me.ju.m.a.h2@gmail.com"">tus.i.i.me.ju.m.a.h2@gmail.com</a>
<a href=""mailto:t.u.s.iim.eju.m.a.h.2@gmail.com"">t.u.s.iim.eju.m.a.h.2@gmail.com</a>
<a href=""mailto:t.us.i.ime.ju.mah.2@gmail.com"">t.us.i.ime.ju.mah.2@gmail.com</a>
<a href=""mailto:tusii.me.jum.a.h.2@gmail.com"">tusii.me.jum.a.h.2@gmail.com</a>
<a href=""mailto:tusi.im.ej.u.mah.2@gmail.com"">tusi.im.ej.u.mah.2@gmail.com</a>
<a href=""mailto:t.u.si.ime.j.um.a.h2@gmail.com"">t.u.si.ime.j.um.a.h2@gmail.com</a>
<a href=""mailto:tusi.i.me.jum.ah2@gmail.com"">tusi.i.me.jum.ah2@gmail.com</a>
<a href=""mailto:t.us.i.i.m.e.j.um.a.h.2@gmail.com"">t.us.i.i.m.e.j.um.a.h.2@gmail.com</a>
<a href=""mailto:tusii.me.j.uma.h2@gmail.com"">tusii.me.j.uma.h2@gmail.com</a>
<a href=""mailto:tu.s.ii.mej.u.m.ah.2@gmail.com"">tu.s.ii.mej.u.m.ah.2@gmail.com</a>
<a href=""mailto:tu.s.ii.mejuma.h2@gmail.com"">tu.s.ii.mejuma.h2@gmail.com</a>
<a href=""mailto:t.us.i.im.e.ju.ma.h2@gmail.com"">t.us.i.im.e.ju.ma.h2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.ej.u.m.a.h2@gmail.com"">tu.s.i.i.m.ej.u.m.a.h2@gmail.com</a>
<a href=""mailto:tus.ii.me.j.um.a.h.2@gmail.com"">tus.ii.me.j.um.a.h.2@gmail.com</a>
<a href=""mailto:t.us.i.im.ej.uma.h.2@gmail.com"">t.us.i.im.ej.uma.h.2@gmail.com</a>
<a href=""mailto:tu.s.i.im.e.j.um.a.h.2@gmail.com"">tu.s.i.im.e.j.um.a.h.2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.ej.uma.h2@gmail.com"">tu.s.i.i.m.ej.uma.h2@gmail.com</a>
<a href=""mailto:t.u.si.ime.ju.m.ah.2@gmail.com"">t.u.si.ime.ju.m.ah.2@gmail.com</a>
<a href=""mailto:t.usiimej.um.a.h2@gmail.com"">t.usiimej.um.a.h2@gmail.com</a>
<a href=""mailto:t.u.sii.m.e.j.u.m.ah.2@gmail.com"">t.u.sii.m.e.j.u.m.ah.2@gmail.com</a>
<a href=""mailto:t.u.s.iime.ju.m.ah2@gmail.com"">t.u.s.iime.ju.m.ah2@gmail.com</a>
<a href=""mailto:t.u.s.i.i.mej.uma.h.2@gmail.com"">t.u.s.i.i.mej.uma.h.2@gmail.com</a>
<a href=""mailto:t.u.si.im.e.jum.ah.2@gmail.com"">t.u.si.im.e.jum.ah.2@gmail.com</a>
<a href=""mailto:tusi.i.m.e.j.u.m.ah2@gmail.com"">tusi.i.m.e.j.u.m.ah2@gmail.com</a>
<a href=""mailto:tusi.i.m.ej.uma.h.2@gmail.com"">tusi.i.m.ej.uma.h.2@gmail.com</a>
<a href=""mailto:t.u.siim.e.ju.ma.h.2@gmail.com"">t.u.siim.e.ju.ma.h.2@gmail.com</a>
<a href=""mailto:tu.sii.m.e.j.u.mah2@gmail.com"">tu.sii.m.e.j.u.mah2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.ej.u.m.ah.2@gmail.com"">tu.s.i.i.m.ej.u.m.ah.2@gmail.com</a>
<a href=""mailto:tus.iimeju.mah2@gmail.com"">tus.iimeju.mah2@gmail.com</a>
<a href=""mailto:tusi.i.me.j.u.m.a.h2@gmail.com"">tusi.i.me.j.u.m.a.h2@gmail.com</a>
<a href=""mailto:t.u.s.iime.jum.ah2@gmail.com"">t.u.s.iime.jum.ah2@gmail.com</a>
<a href=""mailto:t.u.sii.me.j.uma.h2@gmail.com"">t.u.sii.me.j.uma.h2@gmail.com</a>
<a href=""mailto:t.usi.im.ej.uma.h2@gmail.com"">t.usi.im.ej.uma.h2@gmail.com</a>
<a href=""mailto:tus.iim.e.jum.ah2@gmail.com"">tus.iim.e.jum.ah2@gmail.com</a>
<a href=""mailto:tus.ii.m.ej.uma.h2@gmail.com"">tus.ii.m.ej.uma.h2@gmail.com</a>
<a href=""mailto:t.u.siime.j.umah.2@gmail.com"">t.u.siime.j.umah.2@gmail.com</a>
<a href=""mailto:tu.s.i.imej.u.m.ah.2@gmail.com"">tu.s.i.imej.u.m.ah.2@gmail.com</a>
<a href=""mailto:t.u.s.iime.juma.h.2@gmail.com"">t.u.s.iime.juma.h.2@gmail.com</a>
<a href=""mailto:tus.ii.meju.mah.2@gmail.com"">tus.ii.meju.mah.2@gmail.com</a>
<a href=""mailto:tus.ii.m.eju.mah.2@gmail.com"">tus.ii.m.eju.mah.2@gmail.com</a>
<a href=""mailto:t.u.s.ii.me.jum.ah2@gmail.com"">t.u.s.ii.me.jum.ah2@gmail.com</a>
<a href=""mailto:t.u.s.ii.m.ejumah.2@gmail.com"">t.u.s.ii.m.ejumah.2@gmail.com</a>
<a href=""mailto:tusi.ime.ju.mah2@gmail.com"">tusi.ime.ju.mah2@gmail.com</a>
<a href=""mailto:t.u.s.iim.ej.u.m.a.h.2@gmail.com"">t.u.s.iim.ej.u.m.a.h.2@gmail.com</a>
<a href=""mailto:tus.i.ime.j.u.m.ah2@gmail.com"">tus.i.ime.j.u.m.ah2@gmail.com</a>
<a href=""mailto:tu.si.imeju.mah.2@gmail.com"">tu.si.imeju.mah.2@gmail.com</a>
<a href=""mailto:t.usii.m.e.jumah2@gmail.com"">t.usii.m.e.jumah2@gmail.com</a>
<a href=""mailto:tusii.mej.u.m.a.h.2@gmail.com"">tusii.mej.u.m.a.h.2@gmail.com</a>
<a href=""mailto:t.u.s.i.imejumah2@gmail.com"">t.u.s.i.imejumah2@gmail.com</a>
<a href=""mailto:t.u.si.i.m.ej.u.mah2@gmail.com"">t.u.si.i.m.ej.u.mah2@gmail.com</a>
<a href=""mailto:t.usii.m.e.j.u.ma.h2@gmail.com"">t.usii.m.e.j.u.ma.h2@gmail.com</a>
<a href=""mailto:t.u.s.iim.eju.mah2@gmail.com"">t.u.s.iim.eju.mah2@gmail.com</a>
<a href=""mailto:t.usi.imej.uma.h.2@gmail.com"">t.usi.imej.uma.h.2@gmail.com</a>
<a href=""mailto:t.u.si.i.me.ju.mah2@gmail.com"">t.u.si.i.me.ju.mah2@gmail.com</a>
<a href=""mailto:t.us.ii.m.ej.u.ma.h2@gmail.com"">t.us.ii.m.ej.u.ma.h2@gmail.com</a>
<a href=""mailto:t.usiime.j.u.mah.2@gmail.com"">t.usiime.j.u.mah.2@gmail.com</a>
<a href=""mailto:tus.ii.meju.m.a.h.2@gmail.com"">tus.ii.meju.m.a.h.2@gmail.com</a>
<a href=""mailto:t.us.i.i.meju.ma.h2@gmail.com"">t.us.i.i.meju.ma.h2@gmail.com</a>
<a href=""mailto:t.u.si.im.e.j.umah.2@gmail.com"">t.u.si.im.e.j.umah.2@gmail.com</a>
<a href=""mailto:t.u.si.ime.j.uma.h2@gmail.com"">t.u.si.ime.j.uma.h2@gmail.com</a>
<a href=""mailto:t.us.iim.e.j.u.ma.h2@gmail.com"">t.us.iim.e.j.u.ma.h2@gmail.com</a>
<a href=""mailto:tu.siime.j.um.a.h2@gmail.com"">tu.siime.j.um.a.h2@gmail.com</a>
<a href=""mailto:t.u.s.iim.eju.m.ah.2@gmail.com"">t.u.s.iim.eju.m.ah.2@gmail.com</a>
<a href=""mailto:t.usi.i.m.e.j.u.m.ah2@gmail.com"">t.usi.i.m.e.j.u.m.ah2@gmail.com</a>
<a href=""mailto:t.usiim.e.j.um.ah2@gmail.com"">t.usiim.e.j.um.ah2@gmail.com</a>
<a href=""mailto:t.u.siim.ejuma.h2@gmail.com"">t.u.siim.ejuma.h2@gmail.com</a>
<a href=""mailto:tus.iim.eju.m.a.h2@gmail.com"">tus.iim.eju.m.a.h2@gmail.com</a>
<a href=""mailto:tu.si.i.m.ej.u.mah.2@gmail.com"">tu.si.i.m.ej.u.mah.2@gmail.com</a>
<a href=""mailto:tus.iim.ej.u.ma.h2@gmail.com"">tus.iim.ej.u.ma.h2@gmail.com</a>
<a href=""mailto:t.u.s.i.ime.j.uma.h.2@gmail.com"">t.u.s.i.ime.j.uma.h.2@gmail.com</a>
<a href=""mailto:t.us.ii.m.ejuma.h2@gmail.com"">t.us.ii.m.ejuma.h2@gmail.com</a>
<a href=""mailto:tusi.i.m.e.ju.m.a.h2@gmail.com"">tusi.i.m.e.ju.m.a.h2@gmail.com</a>
<a href=""mailto:tu.siimej.uma.h2@gmail.com"">tu.siimej.uma.h2@gmail.com</a>
<a href=""mailto:t.us.i.i.m.e.j.u.ma.h.2@gmail.com"">t.us.i.i.m.e.j.u.ma.h.2@gmail.com</a>
<a href=""mailto:t.usi.im.ej.u.mah2@gmail.com"">t.usi.im.ej.u.mah2@gmail.com</a>
<a href=""mailto:tu.siime.ju.ma.h2@gmail.com"">tu.siime.ju.ma.h2@gmail.com</a>
<a href=""mailto:tu.s.iim.e.ju.ma.h2@gmail.com"">tu.s.iim.e.ju.ma.h2@gmail.com</a>
<a href=""mailto:tusi.im.e.j.um.ah.2@gmail.com"">tusi.im.e.j.um.ah.2@gmail.com</a>
<a href=""mailto:t.us.i.i.m.e.jumah.2@gmail.com"">t.us.i.i.m.e.jumah.2@gmail.com</a>
<a href=""mailto:t.u.si.i.m.ejuma.h.2@gmail.com"">t.u.si.i.m.ejuma.h.2@gmail.com</a>
<a href=""mailto:t.u.siime.j.uma.h2@gmail.com"">t.u.siime.j.uma.h2@gmail.com</a>
<a href=""mailto:t.u.si.i.me.j.u.mah2@gmail.com"">t.u.si.i.me.j.u.mah2@gmail.com</a>
<a href=""mailto:t.us.i.im.e.j.u.mah2@gmail.com"">t.us.i.im.e.j.u.mah2@gmail.com</a>
<a href=""mailto:t.usii.m.e.ju.ma.h2@gmail.com"">t.usii.m.e.ju.ma.h2@gmail.com</a>
<a href=""mailto:tus.i.i.meju.m.ah2@gmail.com"">tus.i.i.meju.m.ah2@gmail.com</a>
<a href=""mailto:tus.ii.m.ej.um.a.h2@gmail.com"">tus.ii.m.ej.um.a.h2@gmail.com</a>
<a href=""mailto:tus.ii.m.e.j.u.m.ah.2@gmail.com"">tus.ii.m.e.j.u.m.ah.2@gmail.com</a>
<a href=""mailto:tusi.i.m.e.jum.ah.2@gmail.com"">tusi.i.m.e.jum.ah.2@gmail.com</a>
<a href=""mailto:tu.s.iim.e.ju.ma.h.2@gmail.com"">tu.s.iim.e.ju.ma.h.2@gmail.com</a>
<a href=""mailto:tu.siim.e.j.u.ma.h.2@gmail.com"">tu.siim.e.j.u.ma.h.2@gmail.com</a>
<a href=""mailto:tusii.me.ju.mah.2@gmail.com"">tusii.me.ju.mah.2@gmail.com</a>
<a href=""mailto:t.usi.imejum.a.h.2@gmail.com"">t.usi.imejum.a.h.2@gmail.com</a>
<a href=""mailto:t.usi.i.m.e.ju.ma.h.2@gmail.com"">t.usi.i.m.e.ju.ma.h.2@gmail.com</a>
<a href=""mailto:tusi.imej.u.m.ah2@gmail.com"">tusi.imej.u.m.ah2@gmail.com</a>
<a href=""mailto:t.usi.ime.j.um.ah2@gmail.com"">t.usi.ime.j.um.ah2@gmail.com</a>
<a href=""mailto:tus.iim.e.j.uma.h.2@gmail.com"">tus.iim.e.j.uma.h.2@gmail.com</a>
<a href=""mailto:tus.iime.j.u.m.ah2@gmail.com"">tus.iime.j.u.m.ah2@gmail.com</a>
<a href=""mailto:tus.i.i.m.eju.ma.h.2@gmail.com"">tus.i.i.m.eju.ma.h.2@gmail.com</a>
<a href=""mailto:tus.i.im.ejum.ah.2@gmail.com"">tus.i.im.ejum.ah.2@gmail.com</a>
<a href=""mailto:t.us.iim.ejumah2@gmail.com"">t.us.iim.ejumah2@gmail.com</a>
<a href=""mailto:tu.s.iim.eju.m.ah2@gmail.com"">tu.s.iim.eju.m.ah2@gmail.com</a>
<a href=""mailto:t.us.i.i.mej.u.mah.2@gmail.com"">t.us.i.i.mej.u.mah.2@gmail.com</a>
<a href=""mailto:t.usiim.e.ju.m.a.h2@gmail.com"">t.usiim.e.ju.m.a.h2@gmail.com</a>
<a href=""mailto:t.u.s.i.i.me.jum.a.h.2@gmail.com"">t.u.s.i.i.me.jum.a.h.2@gmail.com</a>
<a href=""mailto:tu.si.i.meju.mah2@gmail.com"">tu.si.i.meju.mah2@gmail.com</a>
<a href=""mailto:tusiimej.uma.h2@gmail.com"">tusiimej.uma.h2@gmail.com</a>
<a href=""mailto:t.u.s.i.i.m.ej.umah2@gmail.com"">t.u.s.i.i.m.ej.umah2@gmail.com</a>
<a href=""mailto:tu.s.i.i.m.ej.umah.2@gmail.com"">tu.s.i.i.m.ej.umah.2@gmail.com</a>
<a href=""mailto:tus.i.i.m.ej.umah.2@gmail.com"">tus.i.i.m.ej.umah.2@gmail.com</a>
<a href=""mailto:t.us.i.i.m.e.j.umah2@gmail.com"">t.us.i.i.m.e.j.umah2@gmail.com</a>
<a href=""mailto:nachelikita@gmail.com"">nachelikita@gmail.com</a>
<a href=""mailto:nach.e.likit.a@gmail.com"">nach.e.likit.a@gmail.com</a>
<a href=""mailto:na.c.h.elik.it.a@gmail.com"">na.c.h.elik.it.a@gmail.com</a>
<a href=""mailto:na.c.he.l.i.ki.t.a@gmail.com"">na.c.he.l.i.ki.t.a@gmail.com</a>
<a href=""mailto:n.a.c.he.l.i.k.it.a@gmail.com"">n.a.c.he.l.i.k.it.a@gmail.com</a>
<a href=""mailto:na.c.h.el.ik.i.t.a@gmail.com"">na.c.h.el.ik.i.t.a@gmail.com</a>
<a href=""mailto:n.achel.i.k.i.t.a@gmail.com"">n.achel.i.k.i.t.a@gmail.com</a>
<a href=""mailto:n.ac.helik.it.a@gmail.com"">n.ac.helik.it.a@gmail.com</a>
<a href=""mailto:n.a.c.h.el.i.kita@gmail.com"">n.a.c.h.el.i.kita@gmail.com</a>
<a href=""mailto:n.a.ch.eli.k.i.ta@gmail.com"">n.a.ch.eli.k.i.ta@gmail.com</a>
<a href=""mailto:n.ach.e.li.kita@gmail.com"">n.ach.e.li.kita@gmail.com</a>
<a href=""mailto:nach.el.ik.it.a@gmail.com"">nach.el.ik.it.a@gmail.com</a>
<a href=""mailto:na.chel.i.k.i.t.a@gmail.com"">na.chel.i.k.i.t.a@gmail.com</a>
<a href=""mailto:na.c.hel.i.k.i.t.a@gmail.com"">na.c.hel.i.k.i.t.a@gmail.com</a>
<a href=""mailto:n.a.c.h.e.l.ik.it.a@gmail.com"">n.a.c.h.e.l.ik.it.a@gmail.com</a>
<a href=""mailto:n.ac.h.elik.ita@gmail.com"">n.ac.h.elik.ita@gmail.com</a>
<a href=""mailto:n.a.che.l.iki.t.a@gmail.com"">n.a.che.l.iki.t.a@gmail.com</a>
<a href=""mailto:n.ac.h.eliki.t.a@gmail.com"">n.ac.h.eliki.t.a@gmail.com</a>
<a href=""mailto:nach.eli.ki.t.a@gmail.com"">nach.eli.ki.t.a@gmail.com</a>
<a href=""mailto:n.a.cheli.k.i.t.a@gmail.com"">n.a.cheli.k.i.t.a@gmail.com</a>
<a href=""mailto:n.a.c.he.li.kita@gmail.com"">n.a.c.he.li.kita@gmail.com</a>
<a href=""mailto:n.a.c.h.eli.kita@gmail.com"">n.a.c.h.eli.kita@gmail.com</a>
<a href=""mailto:nac.heliki.ta@gmail.com"">nac.heliki.ta@gmail.com</a>
<a href=""mailto:nache.l.i.k.ita@gmail.com"">nache.l.i.k.ita@gmail.com</a>
<a href=""mailto:n.ache.liki.t.a@gmail.com"">n.ache.liki.t.a@gmail.com</a>
<a href=""mailto:na.ch.el.i.k.ita@gmail.com"">na.ch.el.i.k.ita@gmail.com</a>
<a href=""mailto:n.ac.he.li.ki.ta@gmail.com"">n.ac.he.li.ki.ta@gmail.com</a>
<a href=""mailto:n.a.c.hel.i.kita@gmail.com"">n.a.c.hel.i.kita@gmail.com</a>
<a href=""mailto:nache.li.k.ita@gmail.com"">nache.li.k.ita@gmail.com</a>
<a href=""mailto:n.ach.eliki.ta@gmail.com"">n.ach.eliki.ta@gmail.com</a>
<a href=""mailto:nach.e.li.k.i.t.a@gmail.com"">nach.e.li.k.i.t.a@gmail.com</a>
<a href=""mailto:na.c.h.e.lik.i.t.a@gmail.com"">na.c.h.e.lik.i.t.a@gmail.com</a>
<a href=""mailto:na.ch.e.l.i.k.i.ta@gmail.com"">na.ch.e.l.i.k.i.ta@gmail.com</a>
<a href=""mailto:na.c.h.elik.i.t.a@gmail.com"">na.c.h.elik.i.t.a@gmail.com</a>
<a href=""mailto:n.a.che.li.k.it.a@gmail.com"">n.a.che.li.k.it.a@gmail.com</a>
<a href=""mailto:nac.h.el.ikita@gmail.com"">nac.h.el.ikita@gmail.com</a>
<a href=""mailto:nache.likit.a@gmail.com"">nache.likit.a@gmail.com</a>
<a href=""mailto:n.ac.he.l.ikit.a@gmail.com"">n.ac.he.l.ikit.a@gmail.com</a>
<a href=""mailto:n.a.c.heli.k.i.t.a@gmail.com"">n.a.c.heli.k.i.t.a@gmail.com</a>
<a href=""mailto:na.ch.e.likit.a@gmail.com"">na.ch.e.likit.a@gmail.com</a>
<a href=""mailto:nac.he.l.i.k.it.a@gmail.com"">nac.he.l.i.k.it.a@gmail.com</a>
<a href=""mailto:n.ach.e.li.k.i.ta@gmail.com"">n.ach.e.li.k.i.ta@gmail.com</a>
<a href=""mailto:n.a.ch.e.liki.ta@gmail.com"">n.a.ch.e.liki.ta@gmail.com</a>
<a href=""mailto:n.a.c.h.eli.k.i.t.a@gmail.com"">n.a.c.h.eli.k.i.t.a@gmail.com</a>
<a href=""mailto:nac.h.el.i.kita@gmail.com"">nac.h.el.i.kita@gmail.com</a>
<a href=""mailto:n.ac.h.e.lik.i.t.a@gmail.com"">n.ac.h.e.lik.i.t.a@gmail.com</a>
<a href=""mailto:na.ch.eli.kita@gmail.com"">na.ch.eli.kita@gmail.com</a>
<a href=""mailto:n.a.chel.iki.ta@gmail.com"">n.a.chel.iki.ta@gmail.com</a>
<a href=""mailto:na.ch.e.li.ki.t.a@gmail.com"">na.ch.e.li.ki.t.a@gmail.com</a>
<a href=""mailto:n.a.ch.el.i.kit.a@gmail.com"">n.a.ch.el.i.kit.a@gmail.com</a>
<a href=""mailto:nac.h.eli.ki.ta@gmail.com"">nac.h.eli.ki.ta@gmail.com</a>
<a href=""mailto:na.c.heli.k.i.t.a@gmail.com"">na.c.heli.k.i.t.a@gmail.com</a>
<a href=""mailto:nac.helik.i.ta@gmail.com"">nac.helik.i.ta@gmail.com</a>
<a href=""mailto:n.ac.h.el.i.ki.t.a@gmail.com"">n.ac.h.el.i.ki.t.a@gmail.com</a>
<a href=""mailto:n.ach.e.li.ki.ta@gmail.com"">n.ach.e.li.ki.ta@gmail.com</a>
<a href=""mailto:n.ac.heli.k.i.t.a@gmail.com"">n.ac.heli.k.i.t.a@gmail.com</a>
<a href=""mailto:na.ch.eli.k.it.a@gmail.com"">na.ch.eli.k.it.a@gmail.com</a>
<a href=""mailto:nac.h.e.l.ikit.a@gmail.com"">nac.h.e.l.ikit.a@gmail.com</a>
<a href=""mailto:n.a.ch.eli.kit.a@gmail.com"">n.a.ch.eli.kit.a@gmail.com</a>
<a href=""mailto:n.a.chel.i.ki.t.a@gmail.com"">n.a.chel.i.ki.t.a@gmail.com</a>
<a href=""mailto:na.che.l.i.ki.ta@gmail.com"">na.che.l.i.ki.ta@gmail.com</a>
<a href=""mailto:n.ac.hel.i.ki.t.a@gmail.com"">n.ac.hel.i.ki.t.a@gmail.com</a>
<a href=""mailto:n.a.c.h.e.li.k.i.ta@gmail.com"">n.a.c.h.e.li.k.i.ta@gmail.com</a>
<a href=""mailto:n.ac.h.e.l.ikit.a@gmail.com"">n.ac.h.e.l.ikit.a@gmail.com</a>
<a href=""mailto:n.ach.e.l.ikit.a@gmail.com"">n.ach.e.l.ikit.a@gmail.com</a>
<a href=""mailto:nachel.i.k.i.t.a@gmail.com"">nachel.i.k.i.t.a@gmail.com</a>
<a href=""mailto:n.ac.h.el.ik.i.t.a@gmail.com"">n.ac.h.el.ik.i.t.a@gmail.com</a>
<a href=""mailto:n.ach.el.i.k.i.t.a@gmail.com"">n.ach.el.i.k.i.t.a@gmail.com</a>
<a href=""mailto:n.ache.li.k.it.a@gmail.com"">n.ache.li.k.it.a@gmail.com</a>
<a href=""mailto:nach.eliki.ta@gmail.com"">nach.eliki.ta@gmail.com</a>
<a href=""mailto:n.ac.he.lik.i.ta@gmail.com"">n.ac.he.lik.i.ta@gmail.com</a>
<a href=""mailto:n.ac.h.e.lik.i.ta@gmail.com"">n.ac.h.e.lik.i.ta@gmail.com</a>
<a href=""mailto:na.ch.e.l.i.kita@gmail.com"">na.ch.e.l.i.kita@gmail.com</a>
<a href=""mailto:n.a.c.h.e.l.i.ki.t.a@gmail.com"">n.a.c.h.e.l.i.ki.t.a@gmail.com</a>
<a href=""mailto:n.a.c.he.liki.t.a@gmail.com"">n.a.c.he.liki.t.a@gmail.com</a>
<a href=""mailto:n.ach.elikita@gmail.com"">n.ach.elikita@gmail.com</a>
<a href=""mailto:n.a.c.h.el.i.ki.ta@gmail.com"">n.a.c.h.el.i.ki.ta@gmail.com</a>
<a href=""mailto:n.a.c.h.e.l.i.kit.a@gmail.com"">n.a.c.h.e.l.i.kit.a@gmail.com</a>
<a href=""mailto:n.ac.helik.i.t.a@gmail.com"">n.ac.helik.i.t.a@gmail.com</a>
<a href=""mailto:na.c.h.e.li.ki.ta@gmail.com"">na.c.h.e.li.ki.ta@gmail.com</a>
<a href=""mailto:n.ac.h.el.iki.t.a@gmail.com"">n.ac.h.el.iki.t.a@gmail.com</a>
<a href=""mailto:na.che.likita@gmail.com"">na.che.likita@gmail.com</a>
<a href=""mailto:n.a.c.h.elik.ita@gmail.com"">n.a.c.h.elik.ita@gmail.com</a>
<a href=""mailto:na.c.hel.i.k.ita@gmail.com"">na.c.hel.i.k.ita@gmail.com</a>
<a href=""mailto:na.c.he.likita@gmail.com"">na.c.he.likita@gmail.com</a>
<a href=""mailto:na.c.h.eli.ki.ta@gmail.com"">na.c.h.eli.ki.ta@gmail.com</a>
<a href=""mailto:n.a.c.he.li.k.i.ta@gmail.com"">n.a.c.he.li.k.i.ta@gmail.com</a>
<a href=""mailto:n.a.chelik.i.ta@gmail.com"">n.a.chelik.i.ta@gmail.com</a>
<a href=""mailto:n.ac.he.l.i.k.it.a@gmail.com"">n.ac.he.l.i.k.it.a@gmail.com</a>
<a href=""mailto:na.ch.eli.ki.ta@gmail.com"">na.ch.eli.ki.ta@gmail.com</a>
<a href=""mailto:nacheli.k.ita@gmail.com"">nacheli.k.ita@gmail.com</a>
<a href=""mailto:na.c.hel.ik.i.ta@gmail.com"">na.c.hel.ik.i.ta@gmail.com</a>
<a href=""mailto:nac.h.e.l.i.kit.a@gmail.com"">nac.h.e.l.i.kit.a@gmail.com</a>
<a href=""mailto:nac.h.e.lik.i.ta@gmail.com"">nac.h.e.lik.i.ta@gmail.com</a>
<a href=""mailto:n.ac.he.li.k.i.ta@gmail.com"">n.ac.he.li.k.i.ta@gmail.com</a>
<a href=""mailto:n.ac.h.e.liki.ta@gmail.com"">n.ac.h.e.liki.ta@gmail.com</a>
<a href=""mailto:n.ac.he.l.i.k.ita@gmail.com"">n.ac.he.l.i.k.ita@gmail.com</a>
<a href=""mailto:na.c.h.el.i.k.ita@gmail.com"">na.c.h.el.i.k.ita@gmail.com</a>
<a href=""mailto:n.ac.he.l.i.k.i.ta@gmail.com"">n.ac.he.l.i.k.i.ta@gmail.com</a>
<a href=""mailto:na.che.l.ikit.a@gmail.com"">na.che.l.ikit.a@gmail.com</a>
<a href=""mailto:nac.h.eli.kit.a@gmail.com"">nac.h.eli.kit.a@gmail.com</a>
<a href=""mailto:nach.e.liki.ta@gmail.com"">nach.e.liki.ta@gmail.com</a>
<a href=""mailto:na.cheli.k.i.ta@gmail.com"">na.cheli.k.i.ta@gmail.com</a>
<a href=""mailto:nach.e.likita@gmail.com"">nach.e.likita@gmail.com</a>
<a href=""mailto:na.c.he.likit.a@gmail.com"">na.c.he.likit.a@gmail.com</a>
<a href=""mailto:na.ch.e.l.ikit.a@gmail.com"">na.ch.e.l.ikit.a@gmail.com</a>
<a href=""mailto:n.ache.l.i.kita@gmail.com"">n.ache.l.i.kita@gmail.com</a>
<a href=""mailto:na.ch.e.li.k.ita@gmail.com"">na.ch.e.li.k.ita@gmail.com</a>
<a href=""mailto:nac.he.l.iki.t.a@gmail.com"">nac.he.l.iki.t.a@gmail.com</a>
<a href=""mailto:n.ac.h.e.l.i.k.it.a@gmail.com"">n.ac.h.e.l.i.k.it.a@gmail.com</a>
<a href=""mailto:n.a.c.he.l.i.kita@gmail.com"">n.a.c.he.l.i.kita@gmail.com</a>
<a href=""mailto:na.c.h.el.i.kit.a@gmail.com"">na.c.h.el.i.kit.a@gmail.com</a>
<a href=""mailto:n.a.c.h.eli.k.i.ta@gmail.com"">n.a.c.h.eli.k.i.ta@gmail.com</a>
<a href=""mailto:na.c.h.e.likit.a@gmail.com"">na.c.h.e.likit.a@gmail.com</a>
<a href=""mailto:n.a.c.he.li.k.it.a@gmail.com"">n.a.c.he.li.k.it.a@gmail.com</a>
<a href=""mailto:nach.eli.k.ita@gmail.com"">nach.eli.k.ita@gmail.com</a>
<a href=""mailto:n.ach.e.liki.ta@gmail.com"">n.ach.e.liki.ta@gmail.com</a>
<a href=""mailto:na.c.h.el.i.ki.ta@gmail.com"">na.c.h.el.i.ki.ta@gmail.com</a>
<a href=""mailto:nach.e.li.k.ita@gmail.com"">nach.e.li.k.ita@gmail.com</a>
<a href=""mailto:nacheli.kit.a@gmail.com"">nacheli.kit.a@gmail.com</a>
<a href=""mailto:na.c.hel.i.k.i.ta@gmail.com"">na.c.hel.i.k.i.ta@gmail.com</a>
<a href=""mailto:n.a.ch.eli.k.it.a@gmail.com"">n.a.ch.eli.k.it.a@gmail.com</a>
<a href=""mailto:n.ache.liki.ta@gmail.com"">n.ache.liki.ta@gmail.com</a>
<a href=""mailto:nachelikita@gmail.com"">nachelikita@gmail.com</a>
<a href=""mailto:n.ach.eliki.t.a@gmail.com"">n.ach.eliki.t.a@gmail.com</a>
<a href=""mailto:nachelik.i.t.a@gmail.com"">nachelik.i.t.a@gmail.com</a>
<a href=""mailto:na.c.h.e.li.k.i.t.a@gmail.com"">na.c.h.e.li.k.i.t.a@gmail.com</a>
<a href=""mailto:n.ach.el.iki.t.a@gmail.com"">n.ach.el.iki.t.a@gmail.com</a>
<a href=""mailto:na.chel.iki.ta@gmail.com"">na.chel.iki.ta@gmail.com</a>
<a href=""mailto:nac.he.likit.a@gmail.com"">nac.he.likit.a@gmail.com</a>
<a href=""mailto:nac.hel.ikit.a@gmail.com"">nac.hel.ikit.a@gmail.com</a>
<a href=""mailto:nac.he.l.ik.i.ta@gmail.com"">nac.he.l.ik.i.ta@gmail.com</a>
<a href=""mailto:nac.he.l.iki.ta@gmail.com"">nac.he.l.iki.ta@gmail.com</a>
<a href=""mailto:na.c.h.e.lik.i.ta@gmail.com"">na.c.h.e.lik.i.ta@gmail.com</a>
<a href=""mailto:na.chel.ik.i.ta@gmail.com"">na.chel.ik.i.ta@gmail.com</a>
<a href=""mailto:n.a.c.heliki.t.a@gmail.com"">n.a.c.heliki.t.a@gmail.com</a>
<a href=""mailto:n.ac.h.e.li.kit.a@gmail.com"">n.ac.h.e.li.kit.a@gmail.com</a>
<a href=""mailto:na.chel.ik.i.t.a@gmail.com"">na.chel.ik.i.t.a@gmail.com</a>
<a href=""mailto:nac.h.e.l.i.ki.ta@gmail.com"">nac.h.e.l.i.ki.ta@gmail.com</a>
<a href=""mailto:n.a.ch.e.li.kit.a@gmail.com"">n.a.ch.e.li.kit.a@gmail.com</a>
<a href=""mailto:n.a.c.he.l.iki.t.a@gmail.com"">n.a.c.he.l.iki.t.a@gmail.com</a>
<a href=""mailto:na.ch.e.l.i.ki.ta@gmail.com"">na.ch.e.l.i.ki.ta@gmail.com</a>
<a href=""mailto:n.a.c.h.e.l.i.k.ita@gmail.com"">n.a.c.h.e.l.i.k.ita@gmail.com</a>
<a href=""mailto:na.ch.el.ik.ita@gmail.com"">na.ch.el.ik.ita@gmail.com</a>
<a href=""mailto:n.a.che.likit.a@gmail.com"">n.a.che.likit.a@gmail.com</a>
<a href=""mailto:nac.helikita@gmail.com"">nac.helikita@gmail.com</a>
<a href=""mailto:na.ch.e.liki.t.a@gmail.com"">na.ch.e.liki.t.a@gmail.com</a>
<a href=""mailto:nac.h.el.ik.i.t.a@gmail.com"">nac.h.el.ik.i.t.a@gmail.com</a>
<a href=""mailto:na.c.heli.k.i.ta@gmail.com"">na.c.heli.k.i.ta@gmail.com</a>
<a href=""mailto:n.a.cheli.kita@gmail.com"">n.a.cheli.kita@gmail.com</a>
<a href=""mailto:nac.hel.i.k.i.ta@gmail.com"">nac.hel.i.k.i.ta@gmail.com</a>
<a href=""mailto:n.ac.h.el.i.k.i.t.a@gmail.com"">n.ac.h.el.i.k.i.t.a@gmail.com</a>
<a href=""mailto:na.ch.el.i.k.i.t.a@gmail.com"">na.ch.el.i.k.i.t.a@gmail.com</a>
<a href=""mailto:na.c.h.eli.kit.a@gmail.com"">na.c.h.eli.kit.a@gmail.com</a>
<a href=""mailto:na.chelik.it.a@gmail.com"">na.chelik.it.a@gmail.com</a>
<a href=""mailto:nac.he.l.i.ki.ta@gmail.com"">nac.he.l.i.ki.ta@gmail.com</a>
<a href=""mailto:n.ache.lik.i.ta@gmail.com"">n.ache.lik.i.ta@gmail.com</a>
<a href=""mailto:n.ac.h.el.ikit.a@gmail.com"">n.ac.h.el.ikit.a@gmail.com</a>
<a href=""mailto:nach.elik.ita@gmail.com"">nach.elik.ita@gmail.com</a>
<a href=""mailto:n.a.ch.el.ik.ita@gmail.com"">n.a.ch.el.ik.ita@gmail.com</a>
<a href=""mailto:nach.e.li.k.i.ta@gmail.com"">nach.e.li.k.i.ta@gmail.com</a>
<a href=""mailto:n.a.ch.el.iki.ta@gmail.com"">n.a.ch.el.iki.ta@gmail.com</a>
<a href=""mailto:na.che.l.i.k.it.a@gmail.com"">na.che.l.i.k.it.a@gmail.com</a>
<a href=""mailto:na.cheliki.t.a@gmail.com"">na.cheliki.t.a@gmail.com</a>
<a href=""mailto:nach.e.l.i.ki.ta@gmail.com"">nach.e.l.i.ki.ta@gmail.com</a>
<a href=""mailto:na.c.h.el.i.ki.t.a@gmail.com"">na.c.h.el.i.ki.t.a@gmail.com</a>
<a href=""mailto:nache.l.ik.i.t.a@gmail.com"">nache.l.ik.i.t.a@gmail.com</a>
<a href=""mailto:na.chelikit.a@gmail.com"">na.chelikit.a@gmail.com</a>
<a href=""mailto:nac.he.l.i.k.i.ta@gmail.com"">nac.he.l.i.k.i.ta@gmail.com</a>
<a href=""mailto:nac.h.e.liki.ta@gmail.com"">nac.h.e.liki.ta@gmail.com</a>
<a href=""mailto:nachel.ik.it.a@gmail.com"">nachel.ik.it.a@gmail.com</a>
<a href=""mailto:n.a.c.h.eli.ki.ta@gmail.com"">n.a.c.h.eli.ki.ta@gmail.com</a>
<a href=""mailto:n.a.c.he.l.iki.ta@gmail.com"">n.a.c.he.l.iki.ta@gmail.com</a>
<a href=""mailto:n.ache.l.i.ki.t.a@gmail.com"">n.ache.l.i.ki.t.a@gmail.com</a>
<a href=""mailto:na.ch.e.liki.ta@gmail.com"">na.ch.e.liki.ta@gmail.com</a>
<a href=""mailto:n.ach.e.li.ki.t.a@gmail.com"">n.ach.e.li.ki.t.a@gmail.com</a>
<a href=""mailto:nachel.ikita@gmail.com"">nachel.ikita@gmail.com</a>
<a href=""mailto:n.ach.el.i.k.it.a@gmail.com"">n.ach.el.i.k.it.a@gmail.com</a>
<a href=""mailto:na.ch.el.ikit.a@gmail.com"">na.ch.el.ikit.a@gmail.com</a>
<a href=""mailto:n.ac.h.e.li.k.i.t.a@gmail.com"">n.ac.h.e.li.k.i.t.a@gmail.com</a>
<a href=""mailto:nac.h.e.l.i.k.i.ta@gmail.com"">nac.h.e.l.i.k.i.ta@gmail.com</a>
<a href=""mailto:n.a.c.h.e.l.ikit.a@gmail.com"">n.a.c.h.e.l.ikit.a@gmail.com</a>
<a href=""mailto:na.ch.el.ik.it.a@gmail.com"">na.ch.el.ik.it.a@gmail.com</a>
<a href=""mailto:n.a.ch.e.liki.t.a@gmail.com"">n.a.ch.e.liki.t.a@gmail.com</a>
<a href=""mailto:n.ac.heliki.t.a@gmail.com"">n.ac.heliki.t.a@gmail.com</a>
<a href=""mailto:na.c.helik.i.t.a@gmail.com"">na.c.helik.i.t.a@gmail.com</a>
<a href=""mailto:nach.el.i.k.ita@gmail.com"">nach.el.i.k.ita@gmail.com</a>
<a href=""mailto:n.ach.el.ikit.a@gmail.com"">n.ach.el.ikit.a@gmail.com</a>
<a href=""mailto:nac.h.e.li.k.ita@gmail.com"">nac.h.e.li.k.ita@gmail.com</a>
<a href=""mailto:n.a.ch.el.ik.it.a@gmail.com"">n.a.ch.el.ik.it.a@gmail.com</a>
<a href=""mailto:n.ach.e.l.i.k.it.a@gmail.com"">n.ach.e.l.i.k.it.a@gmail.com</a>
<a href=""mailto:n.ac.he.liki.ta@gmail.com"">n.ac.he.liki.ta@gmail.com</a>
<a href=""mailto:n.a.cheli.ki.ta@gmail.com"">n.a.cheli.ki.ta@gmail.com</a>
<a href=""mailto:nac.h.el.ik.it.a@gmail.com"">nac.h.el.ik.it.a@gmail.com</a>
<a href=""mailto:n.achel.ikit.a@gmail.com"">n.achel.ikit.a@gmail.com</a>
<a href=""mailto:nac.he.lik.i.t.a@gmail.com"">nac.he.lik.i.t.a@gmail.com</a>
<a href=""mailto:n.a.c.h.el.i.ki.t.a@gmail.com"">n.a.c.h.el.i.ki.t.a@gmail.com</a>
<a href=""mailto:nach.el.i.ki.ta@gmail.com"">nach.el.i.ki.ta@gmail.com</a>
<a href=""mailto:n.a.c.hel.i.ki.t.a@gmail.com"">n.a.c.hel.i.ki.t.a@gmail.com</a>
<a href=""mailto:na.c.he.l.i.k.i.ta@gmail.com"">na.c.he.l.i.k.i.ta@gmail.com</a>
<a href=""mailto:n.ac.h.el.i.kita@gmail.com"">n.ac.h.el.i.kita@gmail.com</a>
<a href=""mailto:sabragitelmandxg15@gmail.com"">sabragitelmandxg15@gmail.com</a>
<a href=""mailto:s.abr.a.g.it.el.mand.x.g15@gmail.com"">s.abr.a.g.it.el.mand.x.g15@gmail.com</a>
<a href=""mailto:sabr.agi.t.e.l.m.an.d.x.g.15@gmail.com"">sabr.agi.t.e.l.m.an.d.x.g.15@gmail.com</a>
<a href=""mailto:s.a.b.ra.gite.lm.a.ndxg.15@gmail.com"">s.a.b.ra.gite.lm.a.ndxg.15@gmail.com</a>
<a href=""mailto:sab.rag.ite.l.m.a.n.dx.g15@gmail.com"">sab.rag.ite.l.m.a.n.dx.g15@gmail.com</a>
<a href=""mailto:s.ab.r.agi.t.elm.a.n.dxg15@gmail.com"">s.ab.r.agi.t.elm.a.n.dxg15@gmail.com</a>
<a href=""mailto:sabr.ag.i.tel.mand.xg.1.5@gmail.com"">sabr.ag.i.tel.mand.xg.1.5@gmail.com</a>
<a href=""mailto:s.ab.rag.i.te.lman.d.x.g15@gmail.com"">s.ab.rag.i.te.lman.d.x.g15@gmail.com</a>
<a href=""mailto:s.a.b.ra.gi.te.lm.a.n.dx.g1.5@gmail.com"">s.a.b.ra.gi.te.lm.a.n.dx.g1.5@gmail.com</a>
<a href=""mailto:sab.r.a.gi.tel.ma.n.d.xg.15@gmail.com"">sab.r.a.gi.tel.ma.n.d.xg.15@gmail.com</a>
<a href=""mailto:s.ab.r.ag.itelm.an.dxg.1.5@gmail.com"">s.ab.r.ag.itelm.an.dxg.1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.a.g.i.te.l.ma.n.dxg1.5@gmail.com"">s.a.b.r.a.g.i.te.l.ma.n.dxg1.5@gmail.com</a>
<a href=""mailto:s.a.b.rag.it.elmand.x.g.15@gmail.com"">s.a.b.rag.it.elmand.x.g.15@gmail.com</a>
<a href=""mailto:s.abragi.te.l.m.a.n.dxg1.5@gmail.com"">s.abragi.te.l.m.a.n.dxg1.5@gmail.com</a>
<a href=""mailto:sa.br.agitel.m.a.n.dx.g1.5@gmail.com"">sa.br.agitel.m.a.n.dx.g1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.a.gi.t.elma.nd.x.g1.5@gmail.com"">s.a.b.r.a.gi.t.elma.nd.x.g1.5@gmail.com</a>
<a href=""mailto:sabra.git.elmandxg1.5@gmail.com"">sabra.git.elmandxg1.5@gmail.com</a>
<a href=""mailto:sa.br.ag.i.te.l.m.a.ndxg1.5@gmail.com"">sa.br.ag.i.te.l.m.a.ndxg1.5@gmail.com</a>
<a href=""mailto:s.a.b.ra.g.i.t.elm.a.nd.xg.1.5@gmail.com"">s.a.b.ra.g.i.t.elm.a.nd.xg.1.5@gmail.com</a>
<a href=""mailto:sa.b.ra.g.it.elma.n.dx.g1.5@gmail.com"">sa.b.ra.g.it.elma.n.dx.g1.5@gmail.com</a>
<a href=""mailto:sa.b.ra.git.el.m.a.n.d.xg15@gmail.com"">sa.b.ra.git.el.m.a.n.d.xg15@gmail.com</a>
<a href=""mailto:sa.br.a.gi.tel.m.a.nd.xg.15@gmail.com"">sa.br.a.gi.tel.m.a.nd.xg.15@gmail.com</a>
<a href=""mailto:sa.b.ra.gi.t.e.l.man.dx.g.15@gmail.com"">sa.b.ra.gi.t.e.l.man.dx.g.15@gmail.com</a>
<a href=""mailto:sab.r.agi.t.e.l.man.dx.g.1.5@gmail.com"">sab.r.agi.t.e.l.man.dx.g.1.5@gmail.com</a>
<a href=""mailto:s.ab.r.agi.t.elm.a.n.d.xg1.5@gmail.com"">s.ab.r.agi.t.elm.a.n.d.xg1.5@gmail.com</a>
<a href=""mailto:s.a.b.ragit.elm.andxg1.5@gmail.com"">s.a.b.ragit.elm.andxg1.5@gmail.com</a>
<a href=""mailto:s.a.bra.gi.t.e.lmand.x.g15@gmail.com"">s.a.bra.gi.t.e.lmand.x.g15@gmail.com</a>
<a href=""mailto:sa.bra.g.ite.lm.andx.g.15@gmail.com"">sa.bra.g.ite.lm.andx.g.15@gmail.com</a>
<a href=""mailto:s.a.b.r.a.g.i.te.lmandxg.1.5@gmail.com"">s.a.b.r.a.g.i.te.lmandxg.1.5@gmail.com</a>
<a href=""mailto:s.abra.git.e.lm.andx.g1.5@gmail.com"">s.abra.git.e.lm.andx.g1.5@gmail.com</a>
<a href=""mailto:sa.b.rag.ite.lmand.xg1.5@gmail.com"">sa.b.rag.ite.lmand.xg1.5@gmail.com</a>
<a href=""mailto:s.abr.ag.it.e.l.ma.n.dxg.15@gmail.com"">s.abr.ag.it.e.l.ma.n.dxg.15@gmail.com</a>
<a href=""mailto:s.abra.g.i.telmand.xg.1.5@gmail.com"">s.abra.g.i.telmand.xg.1.5@gmail.com</a>
<a href=""mailto:sabr.a.gi.te.lman.d.xg.15@gmail.com"">sabr.a.gi.te.lman.d.xg.15@gmail.com</a>
<a href=""mailto:s.a.b.r.agitelmand.xg1.5@gmail.com"">s.a.b.r.agitelmand.xg1.5@gmail.com</a>
<a href=""mailto:sab.r.a.gi.t.el.ma.n.d.x.g.1.5@gmail.com"">sab.r.a.gi.t.el.ma.n.d.x.g.1.5@gmail.com</a>
<a href=""mailto:sa.br.a.git.e.l.man.dx.g.15@gmail.com"">sa.br.a.git.e.l.man.dx.g.15@gmail.com</a>
<a href=""mailto:sa.br.ag.ite.lman.dx.g1.5@gmail.com"">sa.br.ag.ite.lman.dx.g1.5@gmail.com</a>
<a href=""mailto:sab.r.a.gite.l.man.d.xg1.5@gmail.com"">sab.r.a.gite.l.man.d.xg1.5@gmail.com</a>
<a href=""mailto:s.abra.git.el.m.and.xg1.5@gmail.com"">s.abra.git.el.m.and.xg1.5@gmail.com</a>
<a href=""mailto:s.a.b.rag.i.te.lm.and.x.g1.5@gmail.com"">s.a.b.rag.i.te.lm.and.x.g1.5@gmail.com</a>
<a href=""mailto:s.a.b.ra.g.i.t.e.l.m.and.xg.1.5@gmail.com"">s.a.b.ra.g.i.t.e.l.m.and.xg.1.5@gmail.com</a>
<a href=""mailto:sa.b.ragite.lmand.xg15@gmail.com"">sa.b.ragite.lmand.xg15@gmail.com</a>
<a href=""mailto:sa.bra.g.i.te.l.man.d.x.g.15@gmail.com"">sa.bra.g.i.te.l.man.d.x.g.15@gmail.com</a>
<a href=""mailto:s.a.b.ra.gite.lm.a.ndx.g.15@gmail.com"">s.a.b.ra.gite.lm.a.ndx.g.15@gmail.com</a>
<a href=""mailto:sa.b.r.a.gite.l.ma.ndxg.1.5@gmail.com"">sa.b.r.a.gite.l.ma.ndxg.1.5@gmail.com</a>
<a href=""mailto:s.abr.ag.it.elman.dx.g1.5@gmail.com"">s.abr.ag.it.elman.dx.g1.5@gmail.com</a>
<a href=""mailto:sabra.gi.t.el.man.dxg1.5@gmail.com"">sabra.gi.t.el.man.dxg1.5@gmail.com</a>
<a href=""mailto:s.a.br.agitelm.a.n.d.x.g.1.5@gmail.com"">s.a.br.agitelm.a.n.d.x.g.1.5@gmail.com</a>
<a href=""mailto:s.ab.r.ag.itelm.a.ndx.g1.5@gmail.com"">s.ab.r.ag.itelm.a.ndx.g1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.a.g.itelma.ndx.g.1.5@gmail.com"">s.a.b.r.a.g.itelma.ndx.g.1.5@gmail.com</a>
<a href=""mailto:s.abr.ag.itel.m.an.dxg1.5@gmail.com"">s.abr.ag.itel.m.an.dxg1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.a.gi.t.e.lm.an.d.x.g.1.5@gmail.com"">s.a.b.r.a.gi.t.e.lm.an.d.x.g.1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.a.git.elma.nd.xg1.5@gmail.com"">s.a.b.r.a.git.elma.nd.xg1.5@gmail.com</a>
<a href=""mailto:sab.r.ag.i.t.e.lma.n.dx.g1.5@gmail.com"">sab.r.ag.i.t.e.lma.n.dx.g1.5@gmail.com</a>
<a href=""mailto:sa.br.a.g.it.e.lman.d.xg1.5@gmail.com"">sa.br.a.g.it.e.lman.d.xg1.5@gmail.com</a>
<a href=""mailto:sa.br.a.g.it.el.ma.n.d.xg.15@gmail.com"">sa.br.a.g.it.el.ma.n.d.xg.15@gmail.com</a>
<a href=""mailto:sa.br.agit.el.m.andxg.15@gmail.com"">sa.br.agit.el.m.andxg.15@gmail.com</a>
<a href=""mailto:sab.ra.g.it.elma.n.dx.g.15@gmail.com"">sab.ra.g.it.elma.n.dx.g.15@gmail.com</a>
<a href=""mailto:s.abr.ag.itelm.an.d.xg.15@gmail.com"">s.abr.ag.itelm.an.d.xg.15@gmail.com</a>
<a href=""mailto:sa.b.ra.gitelm.andxg.1.5@gmail.com"">sa.b.ra.gitelm.andxg.1.5@gmail.com</a>
<a href=""mailto:sabr.a.g.it.el.ma.n.dxg15@gmail.com"">sabr.a.g.it.el.ma.n.dxg15@gmail.com</a>
<a href=""mailto:s.a.b.r.agit.elm.and.x.g1.5@gmail.com"">s.a.b.r.agit.elm.and.x.g1.5@gmail.com</a>
<a href=""mailto:sab.r.a.gi.tel.m.andxg.1.5@gmail.com"">sab.r.a.gi.tel.m.andxg.1.5@gmail.com</a>
<a href=""mailto:s.ab.r.agit.elm.an.d.x.g.1.5@gmail.com"">s.ab.r.agit.elm.an.d.x.g.1.5@gmail.com</a>
<a href=""mailto:s.ab.r.a.git.e.l.m.a.ndx.g.15@gmail.com"">s.ab.r.a.git.e.l.m.a.ndx.g.15@gmail.com</a>
<a href=""mailto:s.a.brag.itel.mandxg.1.5@gmail.com"">s.a.brag.itel.mandxg.1.5@gmail.com</a>
<a href=""mailto:s.a.bra.git.e.l.m.and.x.g15@gmail.com"">s.a.bra.git.e.l.m.and.x.g15@gmail.com</a>
<a href=""mailto:sab.r.agi.t.el.ma.ndx.g15@gmail.com"">sab.r.agi.t.el.ma.ndx.g15@gmail.com</a>
<a href=""mailto:s.ab.rag.it.el.ma.nd.x.g.1.5@gmail.com"">s.ab.rag.it.el.ma.nd.x.g.1.5@gmail.com</a>
<a href=""mailto:s.a.bragi.te.lm.and.x.g1.5@gmail.com"">s.a.bragi.te.lm.and.x.g1.5@gmail.com</a>
<a href=""mailto:sab.ra.g.it.el.man.dx.g.15@gmail.com"">sab.ra.g.it.el.man.dx.g.15@gmail.com</a>
<a href=""mailto:sa.b.ra.gitelm.a.nd.xg.15@gmail.com"">sa.b.ra.gitelm.a.nd.xg.15@gmail.com</a>
<a href=""mailto:s.ab.r.a.g.itel.ma.nd.xg15@gmail.com"">s.ab.r.a.g.itel.ma.nd.xg15@gmail.com</a>
<a href=""mailto:sa.b.r.a.gitel.m.an.dxg1.5@gmail.com"">sa.b.r.a.gitel.m.an.dxg1.5@gmail.com</a>
<a href=""mailto:s.abra.g.i.tel.man.dxg15@gmail.com"">s.abra.g.i.tel.man.dxg15@gmail.com</a>
<a href=""mailto:s.a.bra.gi.t.e.l.m.a.ndxg.1.5@gmail.com"">s.a.bra.gi.t.e.l.m.a.ndxg.1.5@gmail.com</a>
<a href=""mailto:sab.r.agi.t.e.lma.nd.xg15@gmail.com"">sab.r.agi.t.e.lma.nd.xg15@gmail.com</a>
<a href=""mailto:s.a.br.a.gi.t.e.l.m.an.dxg.1.5@gmail.com"">s.a.br.a.gi.t.e.l.m.an.dxg.1.5@gmail.com</a>
<a href=""mailto:sa.bragi.te.lma.nd.x.g1.5@gmail.com"">sa.bragi.te.lma.nd.x.g1.5@gmail.com</a>
<a href=""mailto:s.ab.ra.g.i.te.lmand.x.g1.5@gmail.com"">s.ab.ra.g.i.te.lmand.x.g1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.a.g.ite.lmandx.g1.5@gmail.com"">s.a.b.r.a.g.ite.lmandx.g1.5@gmail.com</a>
<a href=""mailto:sab.r.a.g.i.t.e.lma.n.dxg.1.5@gmail.com"">sab.r.a.g.i.t.e.lma.n.dxg.1.5@gmail.com</a>
<a href=""mailto:sa.b.r.a.gitel.m.a.n.dx.g1.5@gmail.com"">sa.b.r.a.gitel.m.a.n.dx.g1.5@gmail.com</a>
<a href=""mailto:s.a.br.a.g.i.t.elma.n.d.xg1.5@gmail.com"">s.a.br.a.g.i.t.elma.n.d.xg1.5@gmail.com</a>
<a href=""mailto:sab.r.a.g.i.te.l.m.an.d.xg.15@gmail.com"">sab.r.a.g.i.te.l.m.an.d.xg.15@gmail.com</a>
<a href=""mailto:sabra.gitel.ma.ndx.g1.5@gmail.com"">sabra.gitel.ma.ndx.g1.5@gmail.com</a>
<a href=""mailto:s.ab.ra.git.e.lm.a.n.d.x.g15@gmail.com"">s.ab.ra.git.e.lm.a.n.d.x.g15@gmail.com</a>
<a href=""mailto:sab.r.ag.i.telmandx.g1.5@gmail.com"">sab.r.ag.i.telmandx.g1.5@gmail.com</a>
<a href=""mailto:s.a.bragi.telm.a.n.d.xg.15@gmail.com"">s.a.bragi.telm.a.n.d.xg.15@gmail.com</a>
<a href=""mailto:s.ab.ra.g.i.t.el.mandx.g1.5@gmail.com"">s.ab.ra.g.i.t.el.mandx.g1.5@gmail.com</a>
<a href=""mailto:sabrag.i.te.l.m.a.n.dxg.1.5@gmail.com"">sabrag.i.te.l.m.a.n.dxg.1.5@gmail.com</a>
<a href=""mailto:s.ab.r.ag.it.e.l.m.an.dxg.1.5@gmail.com"">s.ab.r.ag.it.e.l.m.an.dxg.1.5@gmail.com</a>
<a href=""mailto:sab.r.a.g.it.e.l.m.a.ndx.g.1.5@gmail.com"">sab.r.a.g.it.e.l.m.a.ndx.g.1.5@gmail.com</a>
<a href=""mailto:s.a.br.agitel.man.d.xg15@gmail.com"">s.a.br.agitel.man.d.xg15@gmail.com</a>
<a href=""mailto:s.a.brag.i.te.lm.a.n.d.x.g.1.5@gmail.com"">s.a.brag.i.te.lm.a.n.d.x.g.1.5@gmail.com</a>
<a href=""mailto:s.a.br.agit.e.lman.d.x.g1.5@gmail.com"">s.a.br.agit.e.lman.d.x.g1.5@gmail.com</a>
<a href=""mailto:s.a.br.ag.i.te.l.m.an.dx.g.1.5@gmail.com"">s.a.br.ag.i.te.l.m.an.dx.g.1.5@gmail.com</a>
<a href=""mailto:sa.brag.it.e.l.m.a.ndx.g.15@gmail.com"">sa.brag.it.e.l.m.a.ndx.g.15@gmail.com</a>
<a href=""mailto:s.ab.r.ag.it.e.l.m.a.ndx.g.15@gmail.com"">s.ab.r.ag.it.e.l.m.a.ndx.g.15@gmail.com</a>
<a href=""mailto:s.a.br.a.g.i.te.lman.d.xg.1.5@gmail.com"">s.a.br.a.g.i.te.lman.d.xg.1.5@gmail.com</a>
<a href=""mailto:sa.b.ra.g.it.elman.d.x.g.15@gmail.com"">sa.b.ra.g.it.elman.d.x.g.15@gmail.com</a>
<a href=""mailto:sa.b.rag.itel.ma.n.dx.g.15@gmail.com"">sa.b.rag.itel.ma.n.dx.g.15@gmail.com</a>
<a href=""mailto:sabra.g.itel.mand.x.g.1.5@gmail.com"">sabra.g.itel.mand.x.g.1.5@gmail.com</a>
<a href=""mailto:sabrag.i.t.el.ma.ndx.g.15@gmail.com"">sabrag.i.t.el.ma.ndx.g.15@gmail.com</a>
<a href=""mailto:sab.r.agit.el.m.an.dx.g.15@gmail.com"">sab.r.agit.el.m.an.dx.g.15@gmail.com</a>
<a href=""mailto:s.a.bra.gi.telmandx.g.1.5@gmail.com"">s.a.bra.gi.telmandx.g.1.5@gmail.com</a>
<a href=""mailto:sa.b.ragit.e.l.m.a.n.d.x.g.15@gmail.com"">sa.b.ragit.e.l.m.a.n.d.x.g.15@gmail.com</a>
<a href=""mailto:s.a.bra.gi.te.lm.a.ndxg.1.5@gmail.com"">s.a.bra.gi.te.lm.a.ndxg.1.5@gmail.com</a>
<a href=""mailto:s.a.b.rag.it.e.l.m.a.n.d.x.g.15@gmail.com"">s.a.b.rag.it.e.l.m.a.n.d.x.g.15@gmail.com</a>
<a href=""mailto:s.a.b.ra.g.i.t.el.ma.n.dxg15@gmail.com"">s.a.b.ra.g.i.t.el.ma.n.dxg15@gmail.com</a>
<a href=""mailto:sa.bra.gitelm.and.xg.15@gmail.com"">sa.bra.gitelm.and.xg.15@gmail.com</a>
<a href=""mailto:sa.br.agite.l.m.a.n.dxg15@gmail.com"">sa.br.agite.l.m.a.n.dxg15@gmail.com</a>
<a href=""mailto:s.ab.r.a.g.i.t.e.l.m.a.nd.xg1.5@gmail.com"">s.ab.r.a.g.i.t.e.l.m.a.nd.xg1.5@gmail.com</a>
<a href=""mailto:sab.r.a.git.e.l.m.a.nd.x.g15@gmail.com"">sab.r.a.git.e.l.m.a.nd.x.g15@gmail.com</a>
<a href=""mailto:sabragit.el.ma.n.d.xg1.5@gmail.com"">sabragit.el.ma.n.d.xg1.5@gmail.com</a>
<a href=""mailto:s.abrag.i.t.el.m.a.n.dx.g1.5@gmail.com"">s.abrag.i.t.el.m.a.n.dx.g1.5@gmail.com</a>
<a href=""mailto:sa.b.ra.g.i.te.lma.nd.xg1.5@gmail.com"">sa.b.ra.g.i.te.lma.nd.xg1.5@gmail.com</a>
<a href=""mailto:sab.r.agit.e.l.m.a.n.d.xg.1.5@gmail.com"">sab.r.agit.e.l.m.a.n.d.xg.1.5@gmail.com</a>
<a href=""mailto:s.a.br.ag.i.tel.mandx.g.1.5@gmail.com"">s.a.br.ag.i.tel.mandx.g.1.5@gmail.com</a>
<a href=""mailto:sabra.gite.l.m.a.nd.xg.1.5@gmail.com"">sabra.gite.l.m.a.nd.xg.1.5@gmail.com</a>
<a href=""mailto:s.abrag.itelm.andxg.15@gmail.com"">s.abrag.itelm.andxg.15@gmail.com</a>
<a href=""mailto:s.ab.r.a.g.it.elma.n.d.x.g.1.5@gmail.com"">s.ab.r.a.g.it.elma.n.d.x.g.1.5@gmail.com</a>
<a href=""mailto:sabr.agi.te.l.ma.nd.x.g.1.5@gmail.com"">sabr.agi.te.l.ma.nd.x.g.1.5@gmail.com</a>
<a href=""mailto:s.a.bragitelma.n.dxg1.5@gmail.com"">s.a.bragitelma.n.dxg1.5@gmail.com</a>
<a href=""mailto:s.ab.r.a.g.i.t.e.lm.a.ndx.g15@gmail.com"">s.ab.r.a.g.i.t.e.lm.a.ndx.g15@gmail.com</a>
<a href=""mailto:sab.ragite.l.mand.xg1.5@gmail.com"">sab.ragite.l.mand.xg1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.a.g.i.telm.and.x.g15@gmail.com"">s.a.b.r.a.g.i.telm.and.x.g15@gmail.com</a>
<a href=""mailto:sabr.a.g.i.t.e.l.man.d.x.g.15@gmail.com"">sabr.a.g.i.t.e.l.man.d.x.g.15@gmail.com</a>
<a href=""mailto:s.a.bragitelma.ndx.g15@gmail.com"">s.a.bragitelma.ndx.g15@gmail.com</a>
<a href=""mailto:s.abragitelma.n.d.xg.1.5@gmail.com"">s.abragitelma.n.d.xg.1.5@gmail.com</a>
<a href=""mailto:s.a.br.ag.i.t.e.l.m.a.n.dxg15@gmail.com"">s.a.br.ag.i.t.e.l.m.a.n.dxg15@gmail.com</a>
<a href=""mailto:sa.bra.g.it.e.lm.a.ndx.g.1.5@gmail.com"">sa.bra.g.it.e.lm.a.ndx.g.1.5@gmail.com</a>
<a href=""mailto:sabr.a.gi.tel.m.a.n.d.x.g.1.5@gmail.com"">sabr.a.gi.tel.m.a.n.d.x.g.1.5@gmail.com</a>
<a href=""mailto:sabr.agitelman.d.xg1.5@gmail.com"">sabr.agitelman.d.xg1.5@gmail.com</a>
<a href=""mailto:s.a.b.ragite.lman.dxg1.5@gmail.com"">s.a.b.ragite.lman.dxg1.5@gmail.com</a>
<a href=""mailto:s.ab.r.a.g.i.te.l.ma.nd.x.g15@gmail.com"">s.ab.r.a.g.i.te.l.ma.nd.x.g15@gmail.com</a>
<a href=""mailto:s.a.bra.git.el.m.an.d.x.g.1.5@gmail.com"">s.a.bra.git.el.m.an.d.x.g.1.5@gmail.com</a>
<a href=""mailto:s.abr.ag.i.te.l.m.a.nd.x.g1.5@gmail.com"">s.abr.ag.i.te.l.m.a.nd.x.g1.5@gmail.com</a>
<a href=""mailto:s.abra.g.i.te.lm.an.dx.g1.5@gmail.com"">s.abra.g.i.te.lm.an.dx.g1.5@gmail.com</a>
<a href=""mailto:sa.br.a.gi.tel.m.a.nd.xg.1.5@gmail.com"">sa.br.a.gi.tel.m.a.nd.xg.1.5@gmail.com</a>
<a href=""mailto:sa.b.ra.gi.t.el.mandx.g1.5@gmail.com"">sa.b.ra.gi.t.el.mandx.g1.5@gmail.com</a>
<a href=""mailto:s.ab.r.agi.t.e.lm.a.n.d.xg15@gmail.com"">s.ab.r.agi.t.e.lm.a.n.d.xg15@gmail.com</a>
<a href=""mailto:sa.b.rag.it.e.l.m.a.ndx.g.15@gmail.com"">sa.b.rag.it.e.l.m.a.ndx.g.15@gmail.com</a>
<a href=""mailto:sa.bragi.t.e.lmandxg1.5@gmail.com"">sa.bragi.t.e.lmandxg1.5@gmail.com</a>
<a href=""mailto:s.a.br.ag.i.telma.ndx.g1.5@gmail.com"">s.a.br.ag.i.telma.ndx.g1.5@gmail.com</a>
<a href=""mailto:s.abr.a.gitelmand.xg15@gmail.com"">s.abr.a.gitelmand.xg15@gmail.com</a>
<a href=""mailto:s.abra.gi.t.e.l.m.an.dx.g1.5@gmail.com"">s.abra.gi.t.e.l.m.an.dx.g1.5@gmail.com</a>
<a href=""mailto:s.a.b.ragi.t.e.lm.a.n.d.x.g.15@gmail.com"">s.a.b.ragi.t.e.lm.a.n.d.x.g.15@gmail.com</a>
<a href=""mailto:sa.br.a.gi.te.lm.an.dx.g.1.5@gmail.com"">sa.br.a.gi.te.lm.an.dx.g.1.5@gmail.com</a>
<a href=""mailto:s.abrag.it.e.lma.n.dxg.15@gmail.com"">s.abrag.it.e.lma.n.dxg.15@gmail.com</a>
<a href=""mailto:sab.rag.ite.lma.n.d.x.g1.5@gmail.com"">sab.rag.ite.lma.n.d.x.g1.5@gmail.com</a>
<a href=""mailto:s.a.br.a.g.i.te.lm.an.dx.g.15@gmail.com"">s.a.br.a.g.i.te.lm.an.dx.g.15@gmail.com</a>
<a href=""mailto:sab.r.a.g.itel.m.a.n.dxg.15@gmail.com"">sab.r.a.g.itel.m.a.n.dxg.15@gmail.com</a>
<a href=""mailto:sa.b.r.a.gite.lm.a.n.d.x.g.1.5@gmail.com"">sa.b.r.a.gite.lm.a.n.d.x.g.1.5@gmail.com</a>
<a href=""mailto:sa.b.r.agite.lm.a.n.dxg.1.5@gmail.com"">sa.b.r.agite.lm.a.n.dxg.1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.ag.i.telm.a.ndxg.1.5@gmail.com"">s.a.b.r.ag.i.telm.a.ndxg.1.5@gmail.com</a>
<a href=""mailto:s.ab.r.a.g.itel.m.andxg.1.5@gmail.com"">s.ab.r.a.g.itel.m.andxg.1.5@gmail.com</a>
<a href=""mailto:s.a.bra.g.i.t.e.lma.n.d.x.g1.5@gmail.com"">s.a.bra.g.i.t.e.lma.n.d.x.g1.5@gmail.com</a>
<a href=""mailto:s.a.bra.gi.t.el.mand.x.g1.5@gmail.com"">s.a.bra.gi.t.el.mand.x.g1.5@gmail.com</a>
<a href=""mailto:sab.r.a.g.i.te.l.man.d.x.g1.5@gmail.com"">sab.r.a.g.i.te.l.man.d.x.g1.5@gmail.com</a>
<a href=""mailto:sa.b.ragite.l.man.dxg1.5@gmail.com"">sa.b.ragite.l.man.dxg1.5@gmail.com</a>
<a href=""mailto:sa.br.agit.e.lm.a.n.dxg15@gmail.com"">sa.br.agit.e.lm.a.n.dxg15@gmail.com</a>
<a href=""mailto:sa.bra.g.ite.lm.a.ndxg15@gmail.com"">sa.bra.g.ite.lm.a.ndxg15@gmail.com</a>
<a href=""mailto:sa.br.ag.ite.lman.dx.g.15@gmail.com"">sa.br.ag.ite.lman.dx.g.15@gmail.com</a>
<a href=""mailto:sa.br.agi.te.lman.d.x.g.1.5@gmail.com"">sa.br.agi.te.lman.d.x.g.1.5@gmail.com</a>
<a href=""mailto:sa.bragit.elma.n.dx.g.1.5@gmail.com"">sa.bragit.elma.n.dx.g.1.5@gmail.com</a>
<a href=""mailto:s.a.b.ragitelm.a.n.d.xg.15@gmail.com"">s.a.b.ragitelm.a.n.d.xg.15@gmail.com</a>
<a href=""mailto:sabrag.ite.lm.an.dxg.1.5@gmail.com"">sabrag.ite.lm.an.dxg.1.5@gmail.com</a>
<a href=""mailto:s.ab.ra.g.ite.l.mandxg1.5@gmail.com"">s.ab.ra.g.ite.l.mandxg1.5@gmail.com</a>
<a href=""mailto:s.a.b.r.a.g.i.t.el.m.a.nd.x.g.15@gmail.com"">s.a.b.r.a.g.i.t.el.m.a.nd.x.g.15@gmail.com</a>
<a href=""mailto:s.abr.a.g.i.te.l.mand.x.g1.5@gmail.com"">s.abr.a.g.i.te.l.mand.x.g1.5@gmail.com</a>
<a href=""mailto:s.ab.ragi.t.elm.a.n.d.xg1.5@gmail.com"">s.ab.ragi.t.elm.a.n.d.xg1.5@gmail.com</a>
<a href=""mailto:sabra.gite.l.m.a.ndxg.15@gmail.com"">sabra.gite.l.m.a.ndxg.15@gmail.com</a>
<a href=""mailto:sa.br.a.gitel.m.an.dx.g.15@gmail.com"">sa.br.a.gitel.m.an.dx.g.15@gmail.com</a>
<a href=""mailto:s.abrag.it.el.m.a.n.d.x.g15@gmail.com"">s.abrag.it.el.m.a.n.d.x.g15@gmail.com</a>
<a href=""mailto:sab.ragite.lm.a.n.d.x.g.15@gmail.com"">sab.ragite.lm.a.n.d.x.g.15@gmail.com</a>
<a href=""mailto:s.a.br.ag.i.te.l.m.and.xg1.5@gmail.com"">s.a.br.ag.i.te.l.m.and.xg1.5@gmail.com</a>
<a href=""mailto:sab.ragi.t.e.lm.a.ndxg.1.5@gmail.com"">sab.ragi.t.e.lm.a.ndxg.1.5@gmail.com</a>
<a href=""mailto:sab.ra.gi.te.lman.d.xg15@gmail.com"">sab.ra.gi.te.lman.d.xg15@gmail.com</a>
<a href=""mailto:s.ab.ra.g.it.el.m.a.n.d.xg.15@gmail.com"">s.ab.ra.g.it.el.m.a.n.d.xg.15@gmail.com</a>
<a href=""mailto:sa.br.agi.te.lm.a.nd.xg.15@gmail.com"">sa.br.agi.te.lm.a.nd.xg.15@gmail.com</a>
<a href=""mailto:s.a.b.ragi.te.l.m.an.d.x.g15@gmail.com"">s.a.b.ragi.te.l.m.an.d.x.g15@gmail.com</a>
<a href=""mailto:sab.ragit.e.l.m.an.dxg1.5@gmail.com"">sab.ragit.e.l.m.an.dxg1.5@gmail.com</a>
<a href=""mailto:s.abr.a.gitelma.nd.x.g15@gmail.com"">s.abr.a.gitelma.nd.x.g15@gmail.com</a>
<a href=""mailto:s.a.br.ag.itel.ma.nd.x.g.1.5@gmail.com"">s.a.br.ag.itel.ma.nd.x.g.1.5@gmail.com</a>
<a href=""mailto:s.ab.ra.g.itelm.a.ndx.g.15@gmail.com"">s.ab.ra.g.itelm.a.ndx.g.15@gmail.com</a>
<a href=""mailto:s.a.b.r.a.g.i.telma.nd.xg.15@gmail.com"">s.a.b.r.a.g.i.telma.nd.xg.15@gmail.com</a>
<a href=""mailto:sab.ra.git.e.l.m.a.ndx.g15@gmail.com"">sab.ra.git.e.l.m.a.ndx.g15@gmail.com</a>
<a href=""mailto:s.abragite.lm.an.dx.g.15@gmail.com"">s.abragite.lm.an.dx.g.15@gmail.com</a>
<a href=""mailto:s.abr.ag.it.e.lm.a.n.dxg15@gmail.com"">s.abr.ag.it.e.lm.a.n.dxg15@gmail.com</a>
<a href=""mailto:s.a.br.agite.lmand.x.g.15@gmail.com"">s.a.br.agite.lmand.x.g.15@gmail.com</a>
<a href=""mailto:s.a.bra.gite.l.mand.x.g15@gmail.com"">s.a.bra.gite.l.mand.x.g15@gmail.com</a>
<a href=""mailto:sa.bra.g.i.t.e.l.ma.nd.xg.1.5@gmail.com"">sa.bra.g.i.t.e.l.ma.nd.xg.1.5@gmail.com</a>
<a href=""mailto:sabr.a.gite.lman.d.xg.15@gmail.com"">sabr.a.gite.lman.d.xg.15@gmail.com</a>
<a href=""mailto:sa.bra.gi.t.el.m.a.ndx.g1.5@gmail.com"">sa.bra.gi.t.el.m.a.ndx.g1.5@gmail.com</a>
<a href=""mailto:s.abragi.t.e.l.mand.x.g.15@gmail.com"">s.abragi.t.e.l.mand.x.g.15@gmail.com</a>
<a href=""mailto:sab.ragite.l.ma.n.dx.g1.5@gmail.com"">sab.ragite.l.ma.n.dx.g1.5@gmail.com</a>
<a href=""mailto:sab.ra.g.ite.lm.a.n.d.xg.15@gmail.com"">sab.ra.g.ite.lm.a.n.d.xg.15@gmail.com</a>
<a href=""mailto:s.a.bra.git.elm.an.dxg.1.5@gmail.com"">s.a.bra.git.elm.an.dxg.1.5@gmail.com</a>
<a href=""mailto:sa.b.r.ag.itel.mandxg1.5@gmail.com"">sa.b.r.ag.itel.mandxg1.5@gmail.com</a>
<a href=""mailto:v.amstrong48@gmail.com"">v.amstrong48@gmail.com</a>
<a href=""mailto:v...a.mst.ro.n.g4.8@gmail.com"">v...a.mst.ro.n.g4.8@gmail.com</a>
<a href=""mailto:v..a.mstr.o.ng4.8@gmail.com"">v..a.mstr.o.ng4.8@gmail.com</a>
<a href=""mailto:v..am.s.t.ro.n.g.48@gmail.com"">v..am.s.t.ro.n.g.48@gmail.com</a>
<a href=""mailto:v..a.mst.r.ong.48@gmail.com"">v..a.mst.r.ong.48@gmail.com</a>
<a href=""mailto:v..a.mstr.o.n.g.48@gmail.com"">v..a.mstr.o.n.g.48@gmail.com</a>
<a href=""mailto:v..amstr.ong.4.8@gmail.com"">v..amstr.ong.4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.r.on.g.4.8@gmail.com"">v..a.m.s.t.r.on.g.4.8@gmail.com</a>
<a href=""mailto:v...amst.ron.g.48@gmail.com"">v...amst.ron.g.48@gmail.com</a>
<a href=""mailto:v..am.st.ron.g48@gmail.com"">v..am.st.ron.g48@gmail.com</a>
<a href=""mailto:v.a.m.s.t.r.o.n.g4.8@gmail.com"">v.a.m.s.t.r.o.n.g4.8@gmail.com</a>
<a href=""mailto:v...a.mst.r.o.n.g4.8@gmail.com"">v...a.mst.r.o.n.g4.8@gmail.com</a>
<a href=""mailto:v.am.s.tr.o.n.g.4.8@gmail.com"">v.am.s.tr.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.tr.o.n.g4.8@gmail.com"">v..a.m.s.tr.o.n.g4.8@gmail.com</a>
<a href=""mailto:v.am.s.t.ron.g48@gmail.com"">v.am.s.t.ron.g48@gmail.com</a>
<a href=""mailto:v.a.mst.r.o.n.g.4.8@gmail.com"">v.a.mst.r.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v...amstr.on.g.4.8@gmail.com"">v...amstr.on.g.4.8@gmail.com</a>
<a href=""mailto:v...am.s.t.r.o.ng.4.8@gmail.com"">v...am.s.t.r.o.ng.4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.r.on.g.4.8@gmail.com"">v..a.m.s.t.r.on.g.4.8@gmail.com</a>
<a href=""mailto:v...ams.tr.o.n.g.48@gmail.com"">v...ams.tr.o.n.g.48@gmail.com</a>
<a href=""mailto:v...a.m.s.tro.n.g.48@gmail.com"">v...a.m.s.tro.n.g.48@gmail.com</a>
<a href=""mailto:v...a.m.s.t.r.ong4.8@gmail.com"">v...a.m.s.t.r.ong4.8@gmail.com</a>
<a href=""mailto:v.a.ms.tron.g.48@gmail.com"">v.a.ms.tron.g.48@gmail.com</a>
<a href=""mailto:v...amst.ro.ng.48@gmail.com"">v...amst.ro.ng.48@gmail.com</a>
<a href=""mailto:v...a.mstr.on.g.4.8@gmail.com"">v...a.mstr.on.g.4.8@gmail.com</a>
<a href=""mailto:v...a.mst.ro.ng48@gmail.com"">v...a.mst.ro.ng48@gmail.com</a>
<a href=""mailto:v.am.st.ron.g.4.8@gmail.com"">v.am.st.ron.g.4.8@gmail.com</a>
<a href=""mailto:v...a.m.s.t.r.on.g48@gmail.com"">v...a.m.s.t.r.on.g48@gmail.com</a>
<a href=""mailto:v...amstron.g.48@gmail.com"">v...amstron.g.48@gmail.com</a>
<a href=""mailto:v...a.ms.t.ro.ng48@gmail.com"">v...a.ms.t.ro.ng48@gmail.com</a>
<a href=""mailto:v...a.m.s.t.r.o.ng48@gmail.com"">v...a.m.s.t.r.o.ng48@gmail.com</a>
<a href=""mailto:v.am.s.t.r.ong4.8@gmail.com"">v.am.s.t.r.ong4.8@gmail.com</a>
<a href=""mailto:v.am.st.ron.g.48@gmail.com"">v.am.st.ron.g.48@gmail.com</a>
<a href=""mailto:v...ams.t.r.o.n.g48@gmail.com"">v...ams.t.r.o.n.g48@gmail.com</a>
<a href=""mailto:v..am.s.t.r.on.g.48@gmail.com"">v..am.s.t.r.on.g.48@gmail.com</a>
<a href=""mailto:v..am.s.t.r.ong48@gmail.com"">v..am.s.t.r.ong48@gmail.com</a>
<a href=""mailto:v..amstron.g4.8@gmail.com"">v..amstron.g4.8@gmail.com</a>
<a href=""mailto:v...amstr.o.ng48@gmail.com"">v...amstr.o.ng48@gmail.com</a>
<a href=""mailto:v...a.ms.tr.o.n.g48@gmail.com"">v...a.ms.tr.o.n.g48@gmail.com</a>
<a href=""mailto:v.am.s.t.r.o.ng4.8@gmail.com"">v.am.s.t.r.o.ng4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.tro.n.g.48@gmail.com"">v..a.m.s.tro.n.g.48@gmail.com</a>
<a href=""mailto:v..am.str.ong4.8@gmail.com"">v..am.str.ong4.8@gmail.com</a>
<a href=""mailto:v..a.ms.t.ro.n.g.48@gmail.com"">v..a.ms.t.ro.n.g.48@gmail.com</a>
<a href=""mailto:v..am.s.tr.o.n.g4.8@gmail.com"">v..am.s.tr.o.n.g4.8@gmail.com</a>
<a href=""mailto:v.a.mst.r.o.ng48@gmail.com"">v.a.mst.r.o.ng48@gmail.com</a>
<a href=""mailto:v..a.m.s.tro.ng.4.8@gmail.com"">v..a.m.s.tro.ng.4.8@gmail.com</a>
<a href=""mailto:v.am.st.rong.4.8@gmail.com"">v.am.st.rong.4.8@gmail.com</a>
<a href=""mailto:v...ams.tr.o.n.g.4.8@gmail.com"">v...ams.tr.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v...a.ms.t.ron.g.4.8@gmail.com"">v...a.ms.t.ron.g.4.8@gmail.com</a>
<a href=""mailto:v.ams.t.r.on.g.4.8@gmail.com"">v.ams.t.r.on.g.4.8@gmail.com</a>
<a href=""mailto:v...a.ms.t.rong.48@gmail.com"">v...a.ms.t.rong.48@gmail.com</a>
<a href=""mailto:v..a.mst.ron.g48@gmail.com"">v..a.mst.ron.g48@gmail.com</a>
<a href=""mailto:v..am.st.rong48@gmail.com"">v..am.st.rong48@gmail.com</a>
<a href=""mailto:v...am.s.tr.o.n.g.4.8@gmail.com"">v...am.s.tr.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v...a.mst.r.o.n.g.4.8@gmail.com"">v...a.mst.r.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v..amst.ron.g.48@gmail.com"">v..amst.ron.g.48@gmail.com</a>
<a href=""mailto:v..am.str.o.n.g4.8@gmail.com"">v..am.str.o.n.g4.8@gmail.com</a>
<a href=""mailto:v...ams.t.ro.ng48@gmail.com"">v...ams.t.ro.ng48@gmail.com</a>
<a href=""mailto:v..a.mst.ro.n.g4.8@gmail.com"">v..a.mst.ro.n.g4.8@gmail.com</a>
<a href=""mailto:v..a.m.st.ro.n.g.4.8@gmail.com"">v..a.m.st.ro.n.g.4.8@gmail.com</a>
<a href=""mailto:v..ams.t.rong.4.8@gmail.com"">v..ams.t.rong.4.8@gmail.com</a>
<a href=""mailto:v..am.st.ro.ng.4.8@gmail.com"">v..am.st.ro.ng.4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.ron.g.4.8@gmail.com"">v..a.m.s.t.ron.g.4.8@gmail.com</a>
<a href=""mailto:v..a.mst.r.ong.4.8@gmail.com"">v..a.mst.r.ong.4.8@gmail.com</a>
<a href=""mailto:v..am.st.r.o.n.g.48@gmail.com"">v..am.st.r.o.n.g.48@gmail.com</a>
<a href=""mailto:v.a.m.s.t.r.o.n.g.4.8@gmail.com"">v.a.m.s.t.r.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v..a.ms.t.ron.g48@gmail.com"">v..a.ms.t.ron.g48@gmail.com</a>
<a href=""mailto:v..a.mstr.ong.48@gmail.com"">v..a.mstr.ong.48@gmail.com</a>
<a href=""mailto:v..a.ms.t.r.o.n.g4.8@gmail.com"">v..a.ms.t.r.o.n.g4.8@gmail.com</a>
<a href=""mailto:v...a.m.s.t.rong.4.8@gmail.com"">v...a.m.s.t.rong.4.8@gmail.com</a>
<a href=""mailto:v.a.ms.trong4.8@gmail.com"">v.a.ms.trong4.8@gmail.com</a>
<a href=""mailto:v.am.str.o.n.g.48@gmail.com"">v.am.str.o.n.g.48@gmail.com</a>
<a href=""mailto:v..a.m.st.r.o.ng4.8@gmail.com"">v..a.m.st.r.o.ng4.8@gmail.com</a>
<a href=""mailto:v...am.st.rong48@gmail.com"">v...am.st.rong48@gmail.com</a>
<a href=""mailto:v.ams.t.ron.g.48@gmail.com"">v.ams.t.ron.g.48@gmail.com</a>
<a href=""mailto:v..amst.r.on.g48@gmail.com"">v..amst.r.on.g48@gmail.com</a>
<a href=""mailto:v...ams.tro.ng48@gmail.com"">v...ams.tro.ng48@gmail.com</a>
<a href=""mailto:v..a.ms.tr.o.n.g.48@gmail.com"">v..a.ms.tr.o.n.g.48@gmail.com</a>
<a href=""mailto:v.ams.t.r.o.n.g.48@gmail.com"">v.ams.t.r.o.n.g.48@gmail.com</a>
<a href=""mailto:v..a.m.stro.ng4.8@gmail.com"">v..a.m.stro.ng4.8@gmail.com</a>
<a href=""mailto:v...a.ms.t.ro.ng.48@gmail.com"">v...a.ms.t.ro.ng.48@gmail.com</a>
<a href=""mailto:v.a.mst.r.on.g48@gmail.com"">v.a.mst.r.on.g48@gmail.com</a>
<a href=""mailto:v...amst.r.o.n.g.4.8@gmail.com"">v...amst.r.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v..amstrong.4.8@gmail.com"">v..amstrong.4.8@gmail.com</a>
<a href=""mailto:v..a.m.stron.g.4.8@gmail.com"">v..a.m.stron.g.4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.r.ong.48@gmail.com"">v..a.m.s.t.r.ong.48@gmail.com</a>
<a href=""mailto:v...am.str.o.ng.4.8@gmail.com"">v...am.str.o.ng.4.8@gmail.com</a>
<a href=""mailto:v..am.st.r.o.n.g.48@gmail.com"">v..am.st.r.o.n.g.48@gmail.com</a>
<a href=""mailto:v...amstrong4.8@gmail.com"">v...amstrong4.8@gmail.com</a>
<a href=""mailto:v..am.s.t.ron.g.4.8@gmail.com"">v..am.s.t.ron.g.4.8@gmail.com</a>
<a href=""mailto:v..a.m.str.ong4.8@gmail.com"">v..a.m.str.ong4.8@gmail.com</a>
<a href=""mailto:v...a.mst.r.ong4.8@gmail.com"">v...a.mst.r.ong4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.r.on.g48@gmail.com"">v..a.m.s.t.r.on.g48@gmail.com</a>
<a href=""mailto:v..a.m.s.tr.ong.48@gmail.com"">v..a.m.s.tr.ong.48@gmail.com</a>
<a href=""mailto:v..a.m.s.t.r.o.ng.48@gmail.com"">v..a.m.s.t.r.o.ng.48@gmail.com</a>
<a href=""mailto:v..a.ms.t.r.o.n.g4.8@gmail.com"">v..a.ms.t.r.o.n.g4.8@gmail.com</a>
<a href=""mailto:v..a.mstrong48@gmail.com"">v..a.mstrong48@gmail.com</a>
<a href=""mailto:v...am.s.t.r.on.g4.8@gmail.com"">v...am.s.t.r.on.g4.8@gmail.com</a>
<a href=""mailto:v.a.m.st.ro.n.g.48@gmail.com"">v.a.m.st.ro.n.g.48@gmail.com</a>
<a href=""mailto:v..a.m.st.r.ong.4.8@gmail.com"">v..a.m.st.r.ong.4.8@gmail.com</a>
<a href=""mailto:v.a.mstr.o.n.g48@gmail.com"">v.a.mstr.o.n.g48@gmail.com</a>
<a href=""mailto:v.a.ms.t.ro.ng48@gmail.com"">v.a.ms.t.ro.ng48@gmail.com</a>
<a href=""mailto:v...a.m.st.ro.ng.4.8@gmail.com"">v...a.m.st.ro.ng.4.8@gmail.com</a>
<a href=""mailto:v..a.ms.trong.48@gmail.com"">v..a.ms.trong.48@gmail.com</a>
<a href=""mailto:v..am.strong4.8@gmail.com"">v..am.strong4.8@gmail.com</a>
<a href=""mailto:v..a.mstrong.48@gmail.com"">v..a.mstrong.48@gmail.com</a>
<a href=""mailto:v.a.m.s.tro.n.g48@gmail.com"">v.a.m.s.tro.n.g48@gmail.com</a>
<a href=""mailto:v...ams.t.r.o.ng48@gmail.com"">v...ams.t.r.o.ng48@gmail.com</a>
<a href=""mailto:v..a.m.s.tr.on.g48@gmail.com"">v..a.m.s.tr.on.g48@gmail.com</a>
<a href=""mailto:v.ams.tr.o.ng.4.8@gmail.com"">v.ams.tr.o.ng.4.8@gmail.com</a>
<a href=""mailto:v..a.mstron.g48@gmail.com"">v..a.mstron.g48@gmail.com</a>
<a href=""mailto:v..amst.ro.n.g.4.8@gmail.com"">v..amst.ro.n.g.4.8@gmail.com</a>
<a href=""mailto:v.a.m.s.t.ro.n.g48@gmail.com"">v.a.m.s.t.ro.n.g48@gmail.com</a>
<a href=""mailto:v..ams.trong4.8@gmail.com"">v..ams.trong4.8@gmail.com</a>
<a href=""mailto:v..a.mst.r.on.g4.8@gmail.com"">v..a.mst.r.on.g4.8@gmail.com</a>
<a href=""mailto:v..a.m.stro.n.g4.8@gmail.com"">v..a.m.stro.n.g4.8@gmail.com</a>
<a href=""mailto:v.am.s.tr.ong48@gmail.com"">v.am.s.tr.ong48@gmail.com</a>
<a href=""mailto:v.a.m.s.t.r.on.g4.8@gmail.com"">v.a.m.s.t.r.on.g4.8@gmail.com</a>
<a href=""mailto:v.am.s.tro.n.g48@gmail.com"">v.am.s.tro.n.g48@gmail.com</a>
<a href=""mailto:v.a.mst.r.o.n.g4.8@gmail.com"">v.a.mst.r.o.n.g4.8@gmail.com</a>
<a href=""mailto:v..am.s.t.r.o.ng.48@gmail.com"">v..am.s.t.r.o.ng.48@gmail.com</a>
<a href=""mailto:v...am.str.o.n.g4.8@gmail.com"">v...am.str.o.n.g4.8@gmail.com</a>
<a href=""mailto:v.a.mstrong.4.8@gmail.com"">v.a.mstrong.4.8@gmail.com</a>
<a href=""mailto:v..ams.t.r.o.n.g48@gmail.com"">v..ams.t.r.o.n.g48@gmail.com</a>
<a href=""mailto:v.a.m.s.t.ro.ng.4.8@gmail.com"">v.a.m.s.t.ro.ng.4.8@gmail.com</a>
<a href=""mailto:v..a.ms.t.ron.g4.8@gmail.com"">v..a.ms.t.ron.g4.8@gmail.com</a>
<a href=""mailto:v..am.s.tro.n.g.4.8@gmail.com"">v..am.s.tro.n.g.4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.r.o.n.g.4.8@gmail.com"">v..a.m.s.t.r.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v.amstro.ng48@gmail.com"">v.amstro.ng48@gmail.com</a>
<a href=""mailto:v.am.st.r.on.g48@gmail.com"">v.am.st.r.on.g48@gmail.com</a>
<a href=""mailto:v..amstro.n.g.48@gmail.com"">v..amstro.n.g.48@gmail.com</a>
<a href=""mailto:v...amst.ro.n.g4.8@gmail.com"">v...amst.ro.n.g4.8@gmail.com</a>
<a href=""mailto:v..am.s.t.r.o.ng4.8@gmail.com"">v..am.s.t.r.o.ng4.8@gmail.com</a>
<a href=""mailto:v.a.m.s.tr.ong.48@gmail.com"">v.a.m.s.tr.ong.48@gmail.com</a>
<a href=""mailto:v..a.mst.ron.g48@gmail.com"">v..a.mst.ron.g48@gmail.com</a>
<a href=""mailto:v..a.m.st.r.ong4.8@gmail.com"">v..a.m.st.r.ong4.8@gmail.com</a>
<a href=""mailto:v...a.mstr.on.g.48@gmail.com"">v...a.mstr.on.g.48@gmail.com</a>
<a href=""mailto:v..a.mst.ro.ng48@gmail.com"">v..a.mst.ro.ng48@gmail.com</a>
<a href=""mailto:v..a.ms.t.rong4.8@gmail.com"">v..a.ms.t.rong4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.trong.48@gmail.com"">v..a.m.s.trong.48@gmail.com</a>
<a href=""mailto:v...a.m.s.t.r.o.n.g4.8@gmail.com"">v...a.m.s.t.r.o.n.g4.8@gmail.com</a>
<a href=""mailto:v.a.ms.t.ron.g4.8@gmail.com"">v.a.ms.t.ron.g4.8@gmail.com</a>
<a href=""mailto:v...a.ms.tro.n.g.48@gmail.com"">v...a.ms.tro.n.g.48@gmail.com</a>
<a href=""mailto:v.ams.t.r.o.ng.4.8@gmail.com"">v.ams.t.r.o.ng.4.8@gmail.com</a>
<a href=""mailto:v..a.m.str.o.n.g4.8@gmail.com"">v..a.m.str.o.n.g4.8@gmail.com</a>
<a href=""mailto:v...a.ms.tr.o.ng.4.8@gmail.com"">v...a.ms.tr.o.ng.4.8@gmail.com</a>
<a href=""mailto:v..a.m.st.r.o.n.g.4.8@gmail.com"">v..a.m.st.r.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v.a.m.s.tro.n.g4.8@gmail.com"">v.a.m.s.tro.n.g4.8@gmail.com</a>
<a href=""mailto:v..am.s.tr.ong48@gmail.com"">v..am.s.tr.ong48@gmail.com</a>
<a href=""mailto:v..am.s.tro.n.g.48@gmail.com"">v..am.s.tro.n.g.48@gmail.com</a>
<a href=""mailto:v.a.m.str.ong.48@gmail.com"">v.a.m.str.ong.48@gmail.com</a>
<a href=""mailto:v.am.st.r.o.ng48@gmail.com"">v.am.st.r.o.ng48@gmail.com</a>
<a href=""mailto:v...a.ms.t.ro.ng4.8@gmail.com"">v...a.ms.t.ro.ng4.8@gmail.com</a>
<a href=""mailto:v..am.str.o.ng4.8@gmail.com"">v..am.str.o.ng4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.tr.on.g4.8@gmail.com"">v..a.m.s.tr.on.g4.8@gmail.com</a>
<a href=""mailto:v..a.ms.t.ro.ng4.8@gmail.com"">v..a.ms.t.ro.ng4.8@gmail.com</a>
<a href=""mailto:v...am.stron.g.48@gmail.com"">v...am.stron.g.48@gmail.com</a>
<a href=""mailto:v..ams.tr.o.n.g.4.8@gmail.com"">v..ams.tr.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v..a.m.str.o.ng48@gmail.com"">v..a.m.str.o.ng48@gmail.com</a>
<a href=""mailto:v..amstrong.4.8@gmail.com"">v..amstrong.4.8@gmail.com</a>
<a href=""mailto:v..am.s.t.ron.g48@gmail.com"">v..am.s.t.ron.g48@gmail.com</a>
<a href=""mailto:v..amstr.o.ng4.8@gmail.com"">v..amstr.o.ng4.8@gmail.com</a>
<a href=""mailto:v..a.m.stro.n.g48@gmail.com"">v..a.m.stro.n.g48@gmail.com</a>
<a href=""mailto:v..am.st.ro.ng4.8@gmail.com"">v..am.st.ro.ng4.8@gmail.com</a>
<a href=""mailto:v.am.st.ro.n.g4.8@gmail.com"">v.am.st.ro.n.g4.8@gmail.com</a>
<a href=""mailto:v..a.m.st.r.ong48@gmail.com"">v..a.m.st.r.ong48@gmail.com</a>
<a href=""mailto:v..a.m.st.ro.n.g4.8@gmail.com"">v..a.m.st.ro.n.g4.8@gmail.com</a>
<a href=""mailto:v...a.mstr.o.n.g.4.8@gmail.com"">v...a.mstr.o.n.g.4.8@gmail.com</a>
<a href=""mailto:v..am.s.tr.o.ng4.8@gmail.com"">v..am.s.tr.o.ng4.8@gmail.com</a>
<a href=""mailto:v.a.ms.t.r.on.g.4.8@gmail.com"">v.a.ms.t.r.on.g.4.8@gmail.com</a>
<a href=""mailto:v..ams.tr.ong.48@gmail.com"">v..ams.tr.ong.48@gmail.com</a>
<a href=""mailto:v...a.mst.r.o.ng.48@gmail.com"">v...a.mst.r.o.ng.48@gmail.com</a>
<a href=""mailto:v..am.s.tr.o.n.g.48@gmail.com"">v..am.s.tr.o.n.g.48@gmail.com</a>
<a href=""mailto:v..amst.r.ong.48@gmail.com"">v..amst.r.ong.48@gmail.com</a>
<a href=""mailto:v..amst.r.ong.4.8@gmail.com"">v..amst.r.ong.4.8@gmail.com</a>
<a href=""mailto:v.a.m.s.tr.on.g.48@gmail.com"">v.a.m.s.tr.on.g.48@gmail.com</a>
<a href=""mailto:v.a.ms.tro.ng.48@gmail.com"">v.a.ms.tro.ng.48@gmail.com</a>
<a href=""mailto:v..amst.ro.ng.48@gmail.com"">v..amst.ro.ng.48@gmail.com</a>
<a href=""mailto:v..amst.ro.n.g.48@gmail.com"">v..amst.ro.n.g.48@gmail.com</a>
<a href=""mailto:v..amst.r.ong4.8@gmail.com"">v..amst.r.ong4.8@gmail.com</a>
<a href=""mailto:v..am.str.ong48@gmail.com"">v..am.str.ong48@gmail.com</a>
<a href=""mailto:v..a.m.s.trong4.8@gmail.com"">v..a.m.s.trong4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.rong48@gmail.com"">v..a.m.s.t.rong48@gmail.com</a>
<a href=""mailto:v.am.str.o.ng48@gmail.com"">v.am.str.o.ng48@gmail.com</a>
<a href=""mailto:v..am.s.t.ron.g.48@gmail.com"">v..am.s.t.ron.g.48@gmail.com</a>
<a href=""mailto:v.a.m.s.t.ron.g.48@gmail.com"">v.a.m.s.t.ron.g.48@gmail.com</a>
<a href=""mailto:v.ams.tr.on.g.4.8@gmail.com"">v.ams.tr.on.g.4.8@gmail.com</a>
<a href=""mailto:v...amst.r.o.n.g48@gmail.com"">v...amst.r.o.n.g48@gmail.com</a>
<a href=""mailto:v..amstr.on.g48@gmail.com"">v..amstr.on.g48@gmail.com</a>
<a href=""mailto:v..a.ms.tr.on.g.4.8@gmail.com"">v..a.ms.tr.on.g.4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.rong.48@gmail.com"">v..a.m.s.t.rong.48@gmail.com</a>
<a href=""mailto:v...a.m.st.r.o.n.g.48@gmail.com"">v...a.m.st.r.o.n.g.48@gmail.com</a>
<a href=""mailto:v..am.stro.n.g.4.8@gmail.com"">v..am.stro.n.g.4.8@gmail.com</a>
<a href=""mailto:v..ams.t.r.o.ng4.8@gmail.com"">v..ams.t.r.o.ng4.8@gmail.com</a>
<a href=""mailto:v...a.m.s.t.ro.ng.4.8@gmail.com"">v...a.m.s.t.ro.ng.4.8@gmail.com</a>
<a href=""mailto:v.ams.t.r.o.n.g4.8@gmail.com"">v.ams.t.r.o.n.g4.8@gmail.com</a>
<a href=""mailto:v..am.str.o.n.g48@gmail.com"">v..am.str.o.n.g48@gmail.com</a>
<a href=""mailto:v..ams.tr.on.g4.8@gmail.com"">v..ams.tr.on.g4.8@gmail.com</a>
<a href=""mailto:v.a.m.strong4.8@gmail.com"">v.a.m.strong4.8@gmail.com</a>
<a href=""mailto:v..a.m.s.t.ro.ng.4.8@gmail.com"">v..a.m.s.t.ro.ng.4.8@gmail.com</a>
<a href=""mailto:v.ams.trong4.8@gmail.com"">v.ams.trong4.8@gmail.com</a>"
hzE3peRN,Tetris beginning,allenthoe,Java,Thursday 18th of May 2023 03:08:19 PM CDT,"/** login: 2-thoeal
    pwd:  APCS12345
    
    */
int w;
Piece p;
int speed;
int count;

void setup(){
  size(300, 600);
  w = width/10;
  p = new RightL();
  speed = 40;
  count = 1;
}

void draw(){
  background(0);
  grid();
  p.show(); 
  if(count%speed==0){
    p.moveDown();
  }
  count++;
}

void keyPressed(){
  if(keyCode == RIGHT){
    p.moveSideways('r');
  } else if (keyCode == LEFT){
    p.moveSideways('l');
  }
}


void grid(){
  stroke(255);  //white
  for(int i = 0; i < 10; i++){
      line(0,i*w, width, i*w);
      line(0, (10+i)*w, width, (10+i)*w);
      line(i*w, 0, i*w, height);
  }
}



//  NEXT FILE

class Piece {
    int[][] pos;
    String c;  //Color
    boolean canRotate;
    boolean canMove;
    boolean isActive;
    
    void show(){
      stroke(255,0,0);
      for(int i = 0; i < 4; i++){
        rect(pos[i][0]*w, pos[i][1]*w, w, w);  //w = global width of square
      }
      canMove = true;
      isActive = true;
    }
    
    void moveDown(){
      for(int i = 0; i < 4; i++){
        pos[i][1]++;  
      }
    }
    
    void moveSideways(char dir){
      if(dir == 'r'){
        for(int i = 0; i < 4; i++){
          pos[i][0]++;
        }
      } else if (dir == 'l'){
        for(int i = 0; i < 4; i++){
          pos[i][0]--;
        }  
      }
    }
}


//  NEXT FILE

public class RightL extends Piece {
  public RightL() {
    super();
    int[][] newPos = {{0,0}, {1,0}, {2,0}, {2,1}};
    super.pos = newPos;
  }
}
"
Frj2vy7r,RobloxDevTutorials Beginner's Series - Lesson 8: Scoping and Returning,ProDeveloper5876,Lua,Thursday 18th of May 2023 03:07:36 PM CDT,"local function printone ()
	one = 1
	print(one)
end

local function printtwo ()
	print(one)
end


--seperator

local function printfour()
	local four = 4
	local five = 5
	
	print(four)
	return five
end

local thefunction = printfour()
print(thefunction)"
Tk54fTB4,Yahtzee,PrezesSmoku,Python,Thursday 18th of May 2023 03:03:10 PM CDT,"import random
kosci = [2,1,3,6,4]


nazwy_punktow = ['Jedynki', 'Dwójki', 'Trójki', 'Czwórki', 'Piątki', ""Szóstki"",
                 ""3 jednakowe"",""4 jednakowe"",""Full"",""Mały strit"",""Duży strit"",""Generał"",""Szansa""]
punkty = ['3','4','2','1','','','','','','','','','']
def rzuc_koscmi(numery_kosci:str):
    for i in numery_kosci:
        index = int(i) - 1
        kosci[index] = random.randint(1,6)
     
def pokaz_kosci():
    print('_________________________')
    for i in range(len(kosci)):
        print(f'{i+1}. {kosci[i]}')
    print('_________________________')

# def pokaz_kosci():
#     print('_________________________')
#     print(f'Kości: 1.{kosci[0]}/2.{kosci[1]}/3.{kosci[2]}/4.{kosci[3]}/5.{kosci[4]}/')
#     print('_________________________')


def sprawdz_czy_przerzucamy():
    odp = input(""czy chcesz przerzucać kości?(t/n) "")
    if odp == 't' or odp == 'T':
        return True
    else:
        return False

def pokaz_tabele_punktow():
    print('_________________________')
    for i in range(len(punkty)):
        print(f'{i+1}.{nazwy_punktow[i]}\t{punkty[i]}')
    print('_________________________')

def wstaw_w_liczbowym(liczba):
    liczba_punktow = 0
    for kosc in kosci:
        if kosc == liczba:
            liczba_punktow += kosc
    punkty[liczba-1] = liczba_punktow

def wstaw_3i4_jednakowe(pole,ilosc):
    lista_wystapien = [0,0,0,0,0,0]
    for kosc in kosci:
        lista_wystapien[kosc-1] += 1
    if ilosc in lista_wystapien:
        punkty[pole-1] = sum(kosci)
    else:
        punkty[pole-1] = 0

def wstaw_full(pole):
    lista_wystapien = [0,0,0,0,0,0]
    for kosc in kosci:
        lista_wystapien[kosc-1] += 1
    if 3 in lista_wystapien and 2 in lista_wystapien:
        punkty[pole-1] = 25
    else:
        punkty[pole-1] = 0

def wstaw_duzy_strit(pole):
    kosci.sort()
    dlugosc_strita = 0
    for i in range(1,5):
        if kosci[i-1] == kosci[i] - 1:
            dlugosc_strita += 1
        else:
            dlugosc_strita = 0
    if dlugosc_strita == 4:
        punkty[pole-1] = 40
    else:
        punkty[pole-1] = 0

def wstaw_maly_strit(pole):
    kosci.sort()
    dlugosc_strita = 0
    for i in range(1,5):
        if kosci[i-1] == kosci[i] - 1:
            dlugosc_strita += 1
            if dlugosc_strita == 3:
                punkty[pole-1] = 30
                return
        else:
            dlugosc_strita = 0
    punkty[pole-1] = 0

def wstaw_general(pole):
    lista_wystapien = [0,0,0,0,0,0]
    for kosc in kosci:
        lista_wystapien[kosc-1] += 1
    if 5 in lista_wystapien:
        punkty[pole-1] = 50
    else:
        punkty[pole-1] = 0

def wstaw_szansa(pole):
    punkty[pole-1] = sum(kosci)

def wstaw_punkty():
    pole = int(input('Gdzie chcesz wstawić punkty (podaj numer rubryki): '))
    if punkty[pole-1] == '':
        if 1 <= pole <= 6:
            wstaw_w_liczbowym(pole)
        elif pole == 7:
            wstaw_3i4_jednakowe(pole,3)
        elif pole == 8:
            wstaw_3i4_jednakowe(pole,4)
        elif pole == 9:
            wstaw_full(pole)
        elif pole == 10:
            wstaw_maly_strit(pole)
        elif pole == 11:
            wstaw_duzy_strit(pole)
        elif pole == 12:
            wstaw_general(pole)
        elif pole == 13:
            wstaw_szansa(pole)
    else:
        print('Wybrałeś pole w którym już wstawiłeś punkty')
        wstaw_punkty()



for tura in range(13):
    rzuc_koscmi(""12345"")
    pokaz_tabele_punktow()
    pokaz_kosci()
    for i in range(2):
        czy_przerzut = sprawdz_czy_przerzucamy()
        if czy_przerzut:
            kosci_do_przerzutu = input(""Wypisz numery kości, które chcesz przerzucić(bez spacji): "")
            rzuc_koscmi(kosci_do_przerzutu)
            pokaz_kosci()
        else:
            break
    pokaz_tabele_punktow()
    pokaz_kosci()
    wstaw_punkty()
    pokaz_tabele_punktow()

print(f""Twój wynik to: {sum(punkty)}"")




"
xZdezgZY,Bot Yesterday's Breakout,Maurizio-Ciullo,JavaScript,Thursday 18th of May 2023 02:31:25 PM CDT,"// This source code is subject to the terms of the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
// © TheSocialCryptoClub

//@version=5

strategy(""Bot Yesterday's Breakout Yesterday's High"", overlay=true, pyramiding = 1,
         initial_capital=10000, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=10,
         slippage=1, backtest_fill_limits_assumption=1, use_bar_magnifier=true,
         commission_type=strategy.commission.percent, commission_value=0.075
         )

// -----------------------------------------------------------------------------
// ROC Filter
// -----------------------------------------------------------------------------

// f_security function by LucF for PineCoders available here: https://www.tradingview.com/script/cyPWY96u-How-to-avoid-repainting-when-using-security-PineCoders-FAQ/
f_security(_sym, _res, _src, _rep) => request.security(_sym, _res, _src[not _rep and barstate.isrealtime ? 1 : 0])[_rep or barstate.isrealtime ? 0 : 1]
high_daily = f_security(syminfo.tickerid, ""D"", high, false)

roc_enable = input.bool(false, """", group=""ROC Filter from CloseD"", inline=""roc"")
roc_threshold = input.float(1, ""Treshold"", step=0.5, group=""ROC Filter from CloseD"", inline=""roc"")

closed = f_security(syminfo.tickerid,""1D"",close, false)
roc_filter= roc_enable ? (close-closed)/closed*100  > roc_threshold  : true


// -----------------------------------------------------------------------------
// Trigger Point 
// -----------------------------------------------------------------------------

open_session = ta.change(time('D'))
price_session = ta.valuewhen(open_session, open, 0)
tf_session = timeframe.multiplier <= 60

bgcolor(open_session and tf_session ?color.new(color.blue,80):na, title = ""Session"")

first_bar = 0
if open_session
    first_bar := bar_index

var max_today = 0.0
var min_today = 0.0
var high_daily1 = 0.0
var low_daily1 = 0.0
var today_open = 0.0

if first_bar
    high_daily1 := max_today
    low_daily1 := min_today
    today_open := open
    max_today := high
    min_today := low


if high >= max_today
    max_today := high

if low < min_today
    min_today := low


same_day  = today_open == today_open[1]

plot( timeframe.multiplier <= 240 and same_day ? high_daily1 : na, color= color.yellow , style=plot.style_linebr, linewidth=1, title='High line')
plot( timeframe.multiplier <= 240 and same_day ? low_daily1 : na, color= #E8000D , style=plot.style_linebr, linewidth=1, title='Low line')

// -----------------------------------------------------------------------------
// Strategy settings 
// -----------------------------------------------------------------------------

Gap = input.float(1,""Gap%"", step=0.5, tooltip=""Gap di entrata su entry_price -n anticipa entrata, con +n posticipa entrata"", group = ""Entry"")
Gap2 = (high_daily1 * Gap)/100

sl  = input.float(3, ""Stop-loss"", step= 0.5,  group = ""Entry"")
tp  = input.float(9, ""Take-profit"", step= 0.5, group = ""Entry"")
stop_loss_price = strategy.position_avg_price * (1-sl/100)
take_price = strategy.position_avg_price * (1+tp/100)

sl_trl = input.float(2, ""Trailing-stop"", step = 0.5, tooltip = ""Attiva trailing stop dopo che ha raggiunto..."",group = ""Trailing Stop Settings"")//group = ""Trailing Stop Settings"")
Atrl= input.float(1, ""Offset Trailing"", step=0.5,tooltip = ""Distanza dal prezzo"", group = ""Trailing Stop Settings"")
stop_trl_price_cond = sl_trl * high/syminfo.mintick/100
stop_trl_price_offset_cond = Atrl * high/syminfo.mintick/100

stop_tick = sl * high/syminfo.mintick/100
profit_tick = tp * high/syminfo.mintick/100

mess_buy = ""buy""
mess_sell = ""sell""

// -----------------------------------------------------------------------------
// Entry - Exit - Close
// -----------------------------------------------------------------------------

if close < high_daily1 and roc_filter
    strategy.entry(""Entry"", strategy.long, stop = high_daily1 + (Gap2), alert_message = mess_buy)

ts_n  = input.bool(true, ""Trailing-stop"", tooltip = ""Attiva o disattiva trailing-stop"", group = ""Trailing Stop Settings"")
close_ema = input.bool(false, ""Close EMA"", tooltip = ""Attiva o disattiva chiusura su EMA"", group = ""Trailing Stop Settings"")
len1 = input.int(10, ""EMA length"", step=1, group = ""Trailing Stop Settings"")
ma1 = ta.ema(close, len1)

plot(ma1, title='EMA', color=color.new(color.yellow, 0))

if ts_n == true
    strategy.exit(""Trailing-Stop"",""Entry"",loss= stop_tick, stop= stop_loss_price, limit= take_price, trail_points = stop_trl_price_cond, trail_offset = stop_trl_price_offset_cond, comment_loss=""Stop-Loss!!"",comment_profit =""CASH!!"", comment_trailing = ""TRL-Stop!!"", alert_message = mess_sell)
else
    strategy.exit(""TP-SL"", ""Entry"",loss= stop_tick, stop=stop_loss_price, limit= take_price, comment_loss= ""Stop-loss!!!"", comment_profit = ""CASH!!"", alert_message = mess_sell)

if close_ema == true and ta.crossunder(close,ma1)
    strategy.close(""Entry"",comment = ""Close"" , alert_message = mess_sell)"
wAz9tZ5w,Tests,Nastyusha_k,Python,Thursday 18th of May 2023 02:28:32 PM CDT,"#тест для представления поиска заведения по названию
class SearchResultsViewTestCase(TestCase):
    def setUp(self):
        self.client = Client()
        self.street = Street.objects.create(name_street='TestStreet')
        self.type = TypePlace.objects.create(name_type='TestType')
        self.place1 = Place.objects.create(
            name_place='Test1 Restaurant',
            number_phone='+7(927)-690-74-10',
            number_buld='32',
            operating_mode='круглосуточно',
            live_music=True,
            takeaway_food=True,
            delivery=True,
            summer_veranda=True,
            menu_vegan=True,
            visit_pet=True,
            bus_lunch=True,
            child_room=True,
            features=""{караоке:true}"",
            id_street_id=self.street.id_street,
            id_type_id=self.type.id_type
        )
        self.place2 = Place.objects.create(
            name_place='Test2 Caffe',
            number_phone='+7(927)-690-82-81',
            number_buld='34',
            operating_mode='круглосуточно',
            live_music=True,
            takeaway_food=True,
            delivery=True,
            summer_veranda=True,
            menu_vegan=True,
            visit_pet=True,
            bus_lunch=True,
            child_room=True,
            features=""{караоке:true}"",
            id_street_id=self.street.id_street,
            id_type_id=self.type.id_type
        )

    def test_search_results_view_with_results(self):
        response = self.client.get(reverse('search_result'), {'q': 'Test1'})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test1 Restaurant')
        self.assertNotContains(response, 'Test2 Caffe')

    def test_search_results_view_without_results(self):
        response = self.client.get(reverse('search_result'), {'q': 'None'})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Ничего не найдено')
        self.assertQuerysetEqual(response.context['object_list'], [])

    def tearDown(self):
        self.street.delete()
        self.place2.delete()
        self.place1.delete()
        self.type.delete()"
z4KMW7sz,CROSS_ZERO 2.0,MAMKIN_POC,C++,Thursday 18th of May 2023 02:21:31 PM CDT,"//20.08.2022
#include <iostream>
#include <string>
#include <windows.h>
#include <conio.h>
using namespace std;

const int SIZE_MAP = 9;
char map[SIZE_MAP];

void changeColor(int color);

void createMap()
{
	for (int i = 0; i < SIZE_MAP; i++)
	{
		map[i] = '_';
	}
}

void printMap()
{
	system(""cls"");
	cout << ""\n\n\t\t   | "";
	for (int i = 0; i < SIZE_MAP; i++)
	{
		if (map[i] == 'X')
		{
			changeColor(12);
		}
		else if (map[i] == 'O')
		{
			changeColor(11);
		}
		cout << map[i];
		changeColor(7);
		cout << "" | "";
		if ((i + 1) < SIZE_MAP && (i + 1) % 3 == 0)
		{
			cout << ""\n\t\t   | "";
		}
	}
	cout << endl;
}

int gameMenu(const string menu[], const int SIZE_MENU)
{
	enum eDirection { UP = 72, DOWN = 80, ENTER = 13 };
	int choice = 1;
	while (true)
	{
		system(""cls"");
		cout << ""\n\n"";
		for (int i = 0; i < SIZE_MENU; i++)
		{
			cout << ""\t     "" << menu[i];
			if ((i + 1) == choice)
			{
				cout << "" <-"";
			}
			cout << endl;
		}

		switch (_getch())
		{
		case UP:
			if (choice > 1)
			{
				choice--;
			}
			break;
		case DOWN:
			if (choice < SIZE_MENU)
			{
				choice++;
			}
			break;
		case ENTER:
			return choice;
		}
	}
}

void playerMoves(int& motion, const char playerSign)
{
	int num;
	cout << ""\n\t\t      Ходит "" << playerSign << endl
		<< ""\t      Введите номер ячейки: "";
	cin >> num;

	cin.ignore();
	num--;
	if (num >= 0 && num < SIZE_MAP)
	{
		if (map[num] == '_')
		{
			map[num] = playerSign;
		}
		else
		{
			cout << ""\n\t    Нельзя сходить в эту ячейку!\n"";
			motion--;
			cin.get();
		}
	}
	else
	{
		cout << ""\n\t     Вы вышли за пределы поля!\n"";
		motion--;
		cin.get();
	}
}

char gameIsOver(const int motion)
{
	for (int i = 0; i < SIZE_MAP; i += 3) //проверка строк
	{
		if (map[i] == map[i + 1] && map[i + 1] == map[i + 2])
		{
			if (map[i] != '_')
			{
				return map[i];
			}
		}
	}
	for (int i = 0; i < SIZE_MAP / 3; i++) //проверка колонок
	{
		if (map[i] == map[i + 3] && map[i + 3] == map[i + 6])
		{
			if (map[i] != '_')
			{
				return map[i];
			}
		}
	}
	if (map[0] == map[4] && map[4] == map[8]) //проверки наискозь
	{
		if (map[0] != '_')
		{
			return map[0];
		}
	}
	if (map[2] == map[4] && map[4] == map[6])
	{
		if (map[2] != '_')
		{
			return map[2];
		}
	}
	if (motion == 9) //проверка на ничью
	{
		return '_';
	}
	return '0';
}

void computerMoves(const int motion, const char computerSign, const char playerSign)
{
	int bestMove[SIZE_MAP] = { 4, 1, 3, 5, 7, 0, 2, 6, 8 };

	for (int i = 0; i < SIZE_MAP; i++) //ищем победный ход
	{
		if (map[i] == '_')
		{
			map[i] = computerSign;
			if (gameIsOver(motion) != computerSign)
			{
				map[i] = '_';
			}
			else
			{
				return;
			}
		}
	}
	for (int i = 0; i < SIZE_MAP; i++) //ищем победный ход противника и блокируем его
	{
		if (map[i] == '_')
		{
			map[i] = playerSign;
			if (gameIsOver(motion) != playerSign)
			{
				map[i] = '_';
			}
			else
			{
				map[i] = computerSign;
				return;
			}
		}
	}
	for (int i = 0; i < SIZE_MAP; i++) //если предыдущие проверки не дали результата, то делаем наиболее приоритетный ход
	{
		if (map[bestMove[i]] == '_')
		{
			map[bestMove[i]] = computerSign;
			break;
		}
	}
}

void printGameResult(const char winner)
{
	cout << ""\n\n\t     |~~~~~~~~~~~~~~~~~~~~~~~|"" << endl;
	if (winner == 'X')
	{
		cout << ""\t     |    Победил крестик    |"" << endl;
	}
	else if (winner == 'O')
	{
		cout << ""\t     |     Победил нолик     |"" << endl;
	}
	else if(winner == '_')
	{
		cout << ""\t     |    Победила дружба    |"" << endl;
	}
	cout << ""\t     |      Поздравляю!      |"" << endl;
	cout << ""\t     |~~~~~~~~~~~~~~~~~~~~~~~|"" << endl;
}

int main()
{
	setlocale(LC_ALL, ""rus"");

	const int SIZE_MENU = 3;
	const string firstMenu[SIZE_MENU] = { ""Играть против друга"", ""Играть против компьютера"", ""Выйти"" };
	const string secondMenu[SIZE_MENU] = { ""Играть за крестик"", ""Играть за нолик"", ""Выйти"" };

	int choice = 0;
	while (choice != 3)
	{
		int motion = 0;
		char winner = '0';

		createMap();
		choice = gameMenu(firstMenu, SIZE_MENU);
		if (choice == 1)
		{
			while (winner == '0')
			{
				motion++;
				printMap();
				if (motion % 2 != 0)
				{
					playerMoves(motion, 'X');
				}
				else
				{
					playerMoves(motion, 'O');
				}
				winner = gameIsOver(motion);
			}
		}
		else if(choice == 2)
		{
			char playerSign;
			char computerSign;
			int choice2 = gameMenu(secondMenu, SIZE_MENU);

			if (choice2 == 1)
			{
				playerSign = 'X';
				computerSign = 'O';
			}
			else if(choice2 == 2)
			{
				playerSign = 'O';
				computerSign = 'X';
			}
			else
			{
				continue;
			}

			while (winner == '0')
			{
				motion++;
				printMap();
				if (motion % 2 != (choice2 - 1))
				{
					playerMoves(motion, playerSign);
				}
				else
				{
					computerMoves(motion, computerSign, playerSign);
				}
				winner = gameIsOver(motion);
			}
		}

		if (winner != '0')
		{
			printMap();
			printGameResult(winner);
			cin.get();
		}
	}
	return 0;
}

void changeColor(int color)
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}"
Hpz7uMrG,Untitled,Aectan,XML,Thursday 18th of May 2023 02:20:01 PM CDT,"# запрос
<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ext=""https://ExtIntegration.eurasia36.kz/"">
   <soapenv:Header>
      <ext:AuthUserExtIntegration>
         <ext:UserName>OnlineTech</ext:UserName>
         <ext:Password>PASSWORD</ext:Password>
      </ext:AuthUserExtIntegration>
   </soapenv:Header>
   <soapenv:Body>
      <ext:GetOffer>
         <ext:getOffer>
            <Drivers>
               <Driver>
                  <IIN>840629301598</IIN>
                  <AgeExperienceID>4</AgeExperienceID>
               </Driver>
            </Drivers>
            <Vehicles>
               <Vehicle>
                  <RegistrationNumber>554KDA14</RegistrationNumber>
               </Vehicle>
            </Vehicles>
            <Months>12</Months>
         </ext:getOffer>
      </ext:GetOffer>
   </soapenv:Body>
</soapenv:Envelope>

# ответ
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>System.Web.Services.Protocols.SoapException: Policy Error! Policy Error! Неизвестная ошибка. {WebСервис.WebSiteIntegration.Модуль(3001)}: Значение не является значением объектного типа (Количество)
по причине:
{WebСервис.WebSiteIntegration.Модуль(3001)}: Значение не является значением объектного типа (Количество)
   at CabinetIntegrationServices.ExtIntegration.WebServiceExtIntegration.GetOffer(GetOffer getOffer) in C:\Users\Andrey.Matveyev\Desktop\REP_CABINET_PROD\Cabinet_Prod\CabinetIntegrationServices\WebServiceExtIntegration.asmx.cs:line 239</faultstring>
         <detail/>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>"
29vKBXcH,Exercesis_Multidimensional_list,ALEXANDAR_GEORGIEV,Python,Thursday 18th of May 2023 01:48:16 PM CDT,"# Exercesis_Multidimensional_list
# Diagonal_differences
num = int(input())

matrix = [[int(n) for n in input().split()] for row in range(num)]

primary_sum = 0
secondary_sum = 0

for i in range(num):
    primary_sum += matrix[i][i]
    secondary_sum += matrix[i][num - i - 1]

print(abs(primary_sum - secondary_sum))

# Diagonals
n = int(input())

matrix = [[int(x) for x in input().split("", "")] for _ in range(n)]

primary = [matrix[r][r] for r in range(n)]  # взимаме числата от диагонала
secondary = [matrix[r][n - r - 1] for r in range(n)]  # взимаме числата от другия диагонала

print(f""Primary diagonal: {', '.join(str(x) for x in primary)}. Sum: {sum(primary)}"")
print(f""Secondary diagonal: {', '.join(str(x) for x in secondary)}. Sum: {sum(secondary)}"")

# Matrix_of_palindromes
rows, cols = [int(x) for x in input().split()]

start = ord('a')

for row in range(start, start + rows):
    for col in range(start, start + cols):
        print(f""{chr(row)}{chr(row + col - start)}{chr(row)}"", end="" "")

    print() # За да извадим na нов ред

# matrix_shiffling
def check_valid_indices(indices):
    return {indices[0], indices[2]}.issubset(valid_rows) and {indices[1], indices[3]}.issubset(valid_cols)


def swap_command(command: str, indices: list):
    if check_valid_indices(indices) and command == 'swap' and len(indices) == 4:
        row1, col1, row2, col2 = indices

        matrix[row1][col1], matrix[row2][col2] = matrix[row2][col2], matrix[row1][col1] # Разменяме местата

        print(*[' '.join(r) for r in matrix], sep=""\n"")
    else:
        print(""Invalid input!"")


rows, cols = [int(x) for x in input().split()]
matrix = [input().split() for _ in range(rows)]

valid_rows = range(rows)
valid_cols = range(cols)



while True:
    command_type, *info = [int(x) if x.isdigit() else x for x in input().split()]

    if command_type == ""END"":
        break

    swap_command(command_type, inf


# Maximal_sum
rows, cols = [int(x) for x in input().split()]

matrix = [[int(x) for x in input().split()] for row in range(rows)]

max_sum = float(""-inf"")
biggest_matrix = []

for row in range(rows - 2):
    for col in range(cols - 2):
        first_row = matrix[row][col:col + 3]
        second_row = matrix[row + 1][col:col + 3]
        third_row = matrix[row + 2][col:col + 3]

        current_sum = sum(first_row) + sum(second_row) + sum(third_row)

        if current_sum > max_sum:
            max_sum = current_sum
            biggest_matrix = [first_row, second_row, third_row]

print(f""Sum = {max_sum}"")
[print(*row) for row in biggest_matrix]

# radioactive_mutant_vampire_bunnies
def find_player_position():
    for row in range(rows):
        if ""P"" in matrix[row]:
            return row, matrix[row].index(""P"")


def check_valid_index(row, col, player=False):
    global wins # За да можем да променяме wins във функцията

    if 0 <= row < rows and 0 <= col < cols:
        return True
    if player:
        wins = True


def bunnies_positions():
    positions = []

    for row in range(rows):
        for col in range(cols):
            if matrix[row][col] == ""B"":
                positions.append([row, col])
    return positions


def bunnies_move(bunnies_pos):
    for row, col in (bunnies_pos):
        for bunnie_move in direction.values():
            new_row, new_col = row + bunnie_move[0], col + bunnie_move[1]

            if check_valid_index(new_row, new_col):
                matrix[new_row][new_col] = ""B""


def show_resilts(status=""won""):
    [print(*row, sep="""") for row in matrix]
    print(f""{status}: {player_row} {player_col}"")

    raise SystemExit


def check_player_alive(row, col):
    if matrix[row][col] == ""B"":
        show_resilts(""dead"")


rows, cols = [int(x) for x in input().split()]
matrix = [list(input()) for _ in range(rows)]

commands = input()

wins = False
direction = {
    ""U"": (-1, 0),    # Посоката в която се движим
    ""D"": (1, 0),
    ""L"": (0, -1),
    ""R"": (0, 1)
}

player_row, player_col = find_player_position()

matrix[player_row][player_col] = '.'

for command in commands:
    player_movement_row, player_movement_col = player_row + direction[command][0], player_col + direction[command][1]

    if check_valid_index(player_movement_row, player_movement_col, True):
        player_row, player_col = player_movement_row, player_movement_col

    bunnies_move(bunnies_positions())

    if wins:
        show_resilts()

    check_player_alive(player_row, player_col)


# Snake_moves
from collections import deque

rows, cols = [int(x) for x in input().split()]
word = list(input()) # abc -> [""a"", ""b"", ""c""]

word_copy = deque(word)

for row in range(rows):
    while len(word_copy) < cols:
        word_copy.extend(word)

    if row % 2 == 0:
        print(*[word_copy.popleft() for _ in range(cols)], sep="""")
    else:
        print(*[word_copy.popleft() for _ in range(cols)][::-1], sep="""")
        

# Two_by_two_squares_in_matrix
rows, cols = [int(x) for x in input().split()]

matrix = [input().split() for row in range(rows)]

equal_blocks = 0

for row in range(rows - 1):
    for col in range(cols - 1):
        symbol = matrix[row][col]

        if matrix[row][col + 1] == symbol and matrix[row + 1][col] == matrix[row + 1][col + 1] == symbol:
            equal_blocks += 1

print(equal_blocks)

"
meVbX39T,Blue Galaxy REVAMP,Kyrie_,CSS,Thursday 18th of May 2023 01:35:33 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/koi9686hwesopqx/bluegalaxy2.css?dl=0"" />

CSS made to be used on lioden.com by Kyrie (#169252)"
Pd2Y5jTS,DSL_UIPersonnel_StatusSort,RustyDios,UnrealScript,Thursday 18th of May 2023 12:57:45 PM CDT,"
simulated function int SortByStatus(StateObjectReference A, StateObjectReference B)
{
	local XComGameState_Unit UnitA, UnitB;
	local string StatusA, StatusB, TimeLabelA, TimeLabelB, TimeValueA, TimeValueB;
	local int RankA, RankB, iTimeValueA, iTimeValueB;
	local EMentalState CurrentMentalStateA, CurrentMentalStateB;

	UnitA = XComGameState_Unit(`XCOMHISTORY.GetGameStateForObjectID(A.ObjectID));
	UnitB = XComGameState_Unit(`XCOMHISTORY.GetGameStateForObjectID(B.ObjectID));

	//CANNOT USE THIS AS DOES NOT GATHER ENOUGH DATA EG: TIME
	//StatusA = class'UIUtilities_Strategy'.static.GetPersonnelStatus(UnitA);
	//StatusB = class'UIUtilities_Strategy'.static.GetPersonnelStatus(UnitB);

	//THIS GIVES US ALPHABETICAL STATUS, TIME LABEL (DAYS/HRS), VALUE AS AN INT IN HRS?
	UnitA.GetStatusStringsSeparate(StatusA, TimeLabelA, iTimeValueA);
	UnitB.GetStatusStringsSeparate(StatusB, TimeLabelB, iTimeValueB);

	//THIS GIVES THE ABOVE BUT ALSO INCLUDES CHL DATA (TIME VALUE HERE IS A USELESS STRING THAT DOESNT COMPARE CORRECTLY)
	class'UIUtilities_Strategy'.static.GetPersonnelStatusSeparate(UnitA, StatusA, TimeLabelA, TimeValueA, -1, false);
	class'UIUtilities_Strategy'.static.GetPersonnelStatusSeparate(UnitB, StatusB, TimeLabelB, TimeValueB, -1, false);

	//convert STRING time back into an INT for correct comparrisons
	//iTimeValueA = int(TimeValueA);
	//iTimeValueB = int(TimeValueB);

	//GIVES MENTAL STATE AS AN ENUM
	CurrentMentalStateA = UnitA.GetMentalState();
	CurrentMentalStateB = UnitB.GetMentalState();

	//SO AVAILIABLE SORT BY RANK STILL
	RankA = UnitA.GetRank();
	RankB = UnitB.GetRank();

	//sort by Shaken TO BOTTOM
	if (!UnitA.bIsShaken && UnitB.bIsShaken)
	{
		return m_bFlipSort ? -1 : 1;
	}
	else if (UnitA.bIsShaken && !UnitB.bIsShaken)
	{
		return m_bFlipSort ? 1 : -1;
	}

	//sort by status string Alphabetical, A is less than Z
	if( StatusA < StatusB )
	{
		return m_bFlipSort ? -1 : 1;
	}
	else if( StatusA > StatusB )
	{
		return m_bFlipSort ? 1 : -1;
	}

	//sort by mental Ready 2, Tired 1, Shaken 0
	if (CurrentMentalStateA > CurrentMentalStateB)
	{
		return m_bFlipSort ? -1 : 1;
	}
	else if (CurrentMentalStateA < CurrentMentalStateB)
	{
		return m_bFlipSort ? 1 : -1;
	}

	//sort by time ASCENDING
	if( iTimeValueA < iTimeValueB )
	{
		return m_bFlipSort ? -1 : 1;
	}
	else if( iTimeValueA > iTimeValueB )
	{
		return m_bFlipSort ? 1 : -1;
	}

	//sort by rank
	if (class'UISL_SSStatusAutoSort'.default.bSortStatusIncludesRank)
	{
		if( RankA > RankB )
		{
			return m_bFlipSort ? -1 : 1;
		}
		else if( RankA < RankB )
		{
			return m_bFlipSort ? 1 : -1;
		}
	}
	
	return 0;
}
"
DU1F7pHe,Prim algorithm for MST,Lucky_Dummy,Haskell,Thursday 18th of May 2023 12:55:42 PM CDT,"import Data.List

-- В graph на каждом шагу будем хранить ребра, у которых хотя бы одна вершина НЕ содержиться в текущем MST (Minimal Spanning Tree)
-- Также будем поддерживать список ребёр в MST и список неприсоединённых к MST вершин
-- На каждом шагу выбираем ребро минимального веса, среди смежных с текущим MST, за начальное ребро берём наименьшее среди всех
prim :: (Ord c, Eq a) => [(a, a, c)] -> [(a, a, c)]
prim [] = []
prim graph = prim' (tail sortedEdges) mst unvisited where -- Основная функция, подготавливает данные для вспомогательной
  sortedEdges = nub $ sortBy (\(_, _, w1) (_, _, w2) -> compare w1 w2) graph -- Сортируем ребра по весу и удаляем дубликаты
  mst = [head sortedEdges] -- Добавляем первое ребро в MST
  unvisited = foldl (flip delete) (nub $ concatMap getVertices graph) (getVertices $ head mst) -- Создаем список неприсоединённых к MST вершин
  prim' graph mst unvisited -- Вспомогательная функция, рекурсивно выполняет шаги алгоритма
      | null graph = mst
      | null unvisited = mst
      | otherwise = prim' newGraph newMst newUnvisited where
        (from, to, weight) = head (filter (\(x, y, _) -> notElem x unvisited || notElem y unvisited) graph) -- Берём ребро с наименьшим весом, соединённое с MST
        newMst = (from, to, weight) : mst -- Добавляем это ребро в MST
        newUnvisited = foldl (flip delete) unvisited [from, to] -- Удаляем вершину из непосещённых
        newGraph = filter (\(x, y, _) -> elem x newUnvisited || elem y newUnvisited) graph -- Убираем из списка ребёр, те что соединяют вершины из MST
  getVertices (x, y, _) = [x, y] -- Функция для получения списка вершин некоторого ребра  

graph :: [(Int, Int, Int)]
graph = [(1, 2, 2), (1, 3, 5), (2, 3, 1), (2, 4, 6), (2, 5, 3), (3, 5, 1), (4, 5, 3)]

main :: IO ()
main = print $ prim graph"
6eUXTtzk,mining,Shadow3641,Lua,Thursday 18th of May 2023 12:53:56 PM CDT,"--[[
Slot 1: Stone
Slot 2: Dirt
Slot 3: Sand
Slot 4: Gravel
Slot 15: Bucket
Slot 16: Fuel
]]--

local ok, tArgs, ignoredFuel, oldprint, fuelAmount, nSlots = true, { ... }, 0, print, nil

for i = 1, 13 do
	if turtle.getItemCount( i ) == 0 then
		nSlots = i - 1
		print( ""You have ""..nSlots.."" stacks of waste blocks, is this correct? Y/N"" )
		while true do
			local _, char = os.pullEvent( ""char"" )
			if char:lower() == ""n"" then
				error()
			elseif char:lower() == ""y"" then
				break
			end
		end
		break
	end
end

if turtle.getItemCount( 15 ) ~= 1 then
	error( ""Place a single bucket in slot 15"" )
end
if turtle.getItemCount( 16 ) == 0 then
	print( ""Are you sure you wish to continue with no fuel in slot 16? Y/N"" )
	while true do
		local _, char = os.pullEvent( ""char"" )
		if char:lower() == ""n"" then
			error()
		elseif char:lower() == ""y"" then
			break
		end
	end
end

local function print( text )
	oldprint( ""["" .. os.time() .. ""]"" .. text )
	local file = fs.open( ""turtleLog"", ""a"" )
	file.writeLine( ""["" .. os.time() .. ""]"" .. text )
	file.close()
end

function dumpWaste()
	while ok do
		for i = 1, nSlots do
			local count = turtle.getItemCount( i )
			if count > 10 then
				turtle.select( i )
				turtle.drop( count - 10 )
			end
		end
		local id = os.startTimer( 10 )
		while true do
			local _, tid = os.pullEvent( ""timer"" )
			if tid == id then
				break
			end
		end
	end
end

function notwaste( func )
	for i = 1, nSlots do
		turtle.select( i )
		if func() then
			return false
		end
	end
	if func == turtle.compare then
		return turtle.detect()
	elseif func == turtle.compareDown then
		return turtle.detectDown()
	elseif func == turtle.compareUp then
		return turtle.detectUp()
	end
end

function check( nLevel )
	if not nLevel then
		nLevel = 1
	elseif nLevel > 200 then
		return
	end
	if not ok then return end
	--check for lava
	turtle.select( 14 )
	if turtle.getItemCount( 14 ) == 0 and not turtle.compare() and not turtle.detect() then
		turtle.select( 15 )
		if turtle.place() then
			print( ""[check]: Liquid detected!"" )
			if turtle.refuel() then
				print( ""[check]: Refueled using lava source!"" )
				turtle.forward()
				check( nLevel + 1 )
				while not turtle.back() do end
				ignoredFuel = ignoredFuel + 2
			else
				print( ""[check]: Liquid was not lava!"" )
				turtle.place()
			end
		end
	end
	--check for inventories
	if turtle.detect() and turtle.suck() then
		while turtle.suck() do end
	end
	--check for ore
	if notwaste( turtle.compare ) then
		print( ""[check]: Ore Detected!"" )
		repeat turtle.dig() until turtle.forward()
		print( ""[check]: Dug ore!"" )
		check( nLevel + 1 )
		while not turtle.back() do end
		ignoredFuel = ignoredFuel + 2
	end
	if not ok then return end
	turtle.turnLeft()
	--check for lava
	turtle.select( 14 )
	if turtle.getItemCount( 14 ) == 0 and not turtle.compare() and not turtle.detect() then
		turtle.select( 15 )
		if turtle.place() then
			print( ""[check]: Liquid detected!"" )
			if turtle.refuel() then
				print( ""[check]: Refueled using lava source!"" )
				turtle.forward()
				check( nLevel + 1 )
				while not turtle.back() do end
				ignoredFuel = ignoredFuel + 2
			else
				print( ""[check]: Liquid was not lava!"" )
				turtle.place()
			end
		end
	end
	--check for inventories
	if turtle.detect() and turtle.suck() then
		while turtle.suck() do end
	end
	--check for ore
	if notwaste( turtle.compare ) then
		print( ""[check]: Ore Detected!"" )
		repeat turtle.dig() until turtle.forward()
		print( ""[check]: Dug ore!"" )
		check( nLevel + 1 )
		while not turtle.back() do end
		ignoredFuel = ignoredFuel + 2
	end
	turtle.turnRight()
	if not ok then return end
	turtle.turnRight()
	--check for lava
	turtle.select( 14 )
	if turtle.getItemCount( 14 ) == 0 and not turtle.compare() and not turtle.detect() then
		turtle.select( 15 )
		if turtle.place() then
			print( ""[check]: Liquid detected!"" )
			if turtle.refuel() then
				print( ""[check]: Refueled using lava source!"" )
				turtle.forward()
				check( nLevel + 1 )
				while not turtle.back() do end
				ignoredFuel = ignoredFuel + 2
			else
				print( ""[check]: Liquid was not lava!"" )
				turtle.place()
			end
		end
	end
	--check for inventories
	if turtle.detect() and turtle.suck() then
		while turtle.suck() do end
	end
	--check for ore
	if notwaste( turtle.compare ) then
		print( ""[check]: Ore Detected!"" )
		repeat turtle.dig() until turtle.forward()
		print( ""[check]: Dug ore!"" )
		check( nLevel + 1 )
		while not turtle.back() do end
		ignoredFuel = ignoredFuel + 2
	end
	turtle.turnLeft()
	if not ok then return end
	--check for lava
	turtle.select( 14 )
	if turtle.getItemCount( 14 ) == 0 and not turtle.compareUp() and not turtle.detectUp() then
		turtle.select( 15 )
		if turtle.placeUp() then
			print( ""[check]: Liquid detected!"" )
			if turtle.refuel() then
				print( ""[check]: Refueled using lava source!"" )
				turtle.up()
				check( nLevel + 1 )
				while not turtle.down() do end
				ignoredFuel = ignoredFuel + 2
			else
				print( ""[check]: Liquid was not lava!"" )
				turtle.placeUp()
			end
		end
	end
	--check for inventories
	if turtle.detectUp() and turtle.suckUp() then
		while turtle.suckUp() do end
	end
	--check for ore
	if notwaste( turtle.compareUp ) then
		print( ""[check]: Ore Detected!"" )
		repeat turtle.digUp() until turtle.up()
		print( ""[check]: Dug ore!"" )
		check( nLevel + 1 )
		while not turtle.down() do end
		ignoredFuel = ignoredFuel + 2
	end
	if not ok then return end
	--check for lava
	turtle.select( 14 )
	if turtle.getItemCount( 14 ) == 0 and not turtle.compareDown() and not turtle.detectDown() then
		turtle.select( 15 )
		if turtle.placeDown() then
			print( ""[check]: Liquid detected!"" )
			if turtle.refuel() then
				print( ""[check]: Refueled using lava source!"" )
				turtle.down()
				check( nLevel + 1 )
				while not turtle.up() do end
				ignoredFuel = ignoredFuel + 2
			else
				print( ""[check]: Liquid was not lava!"" )
				turtle.placeDown()
			end
		end
	end
	--check for inventories
	if turtle.detectDown() and turtle.suckDown() then
		while turtle.suckDown() do end
	end
	--check for ore
	if notwaste( turtle.compareDown ) then
		print( ""[check]: Ore Detected!"" )
		repeat turtle.digDown() until turtle.down()
		print( ""[check]: Dug ore!"" )
		check( nLevel + 1 )
		while not turtle.up() do end
		ignoredFuel = ignoredFuel + 2
	end
end

function branch()
	local gone = 0
	for i = 1, 15 do
		repeat turtle.dig() until turtle.forward()
		print( ""[branch]: Dug forward!"" )
		gone = gone + 1
		if not ok then break end
		check()
		if not ok then break end
	end
	print( ""[branch]: Returning!"" )
	turtle.turnLeft()
	turtle.turnLeft()
	for i = 1, gone do
		while not turtle.forward() do
			while turtle.dig() do end
			while turtle.attack() do end
		end
	end
	ignoredFuel = ignoredFuel + ( gone * 2 )
	print( ""[branch]: Returned!"" )
end

function main()
	local gone = 0
	while ok do
		for i = 1, 3 do
			repeat turtle.dig() until turtle.forward()
			print( ""[main]: Dug forward!"" )
			gone = gone + 1
			if not ok then break end --not ok, don't keep running
			check()
			if not ok then break end
		end
		if not ok then break end
		turtle.turnLeft()
		print( ""[main]: Initiating branch!"" )
		branch()
		turtle.turnLeft()
		if not ok then break end --not ok, don't run second branch
		turtle.turnRight()
		print( ""[main]: Intiating branch!"" )
		branch()
		turtle.turnRight()
	end
	--not ok, return to base
	print( ""[main]: Returning to base!"" )
	turtle.turnLeft()
	turtle.turnLeft()
	repeat
		while not turtle.forward() do
			while turtle.attack() do end
			while turtle.dig() do end
		end
		gone = gone - 1
	until gone == 0
end


function findMaxLevel()
	local level = turtle.getFuelLevel()
	if turtle.getItemCount( 16 ) > 1 then
		if not fuelAmount then
			turtle.select( 16 )
			turtle.refuel( 1 )
			fuelAmount = turtle.getFuelLevel() - level
			print( ""[findMaxLevel]: Found fuelAmount: ""..fuelAmount)
		end
		print( ""[findMaxLevel]: Found max level: "" .. turtle.getItemCount( 16 ) * fuelAmount + turtle.getFuelLevel() .. ""!"")
		return turtle.getItemCount( 16 ) * fuelAmount + turtle.getFuelLevel()
	else
		print( ""[findMaxLevel]: Found max level: "" .. turtle.getFuelLevel() .. ""!"" )
		return turtle.getFuelLevel()
	end
end

function isOk()
	local okLevel = findMaxLevel() / 2 + 10
	while ok do
		local currentLevel = turtle.getFuelLevel()
		if currentLevel < 100 then --check fuel
			print( ""[isOk]: Fuel Level Low!"" )
			if turtle.getItemCount( 16 ) > 0 then
				print( ""[isOk]: Refueling!"" )
				repeat
					turtle.select( 16 )
				until turtle.refuel( 1 ) or turtle.getSelectedSlot() == 16
				if turtle.getFuelLevel() > currentLevel then
					print( ""[isOk]: Refuel Successful!"" )
				else
					print( ""[isOk]: Refuel Unsuccessful, Initiating return!"" )
					ok = false
				end
			end
		elseif okLevel - ignoredFuel > findMaxLevel()  then
			print(""[isOk]: Fuel Reserves Depleted!  Initiating return!"")
			ok = false
		end
		--make sure turtle can take new items
		local hasSpace = false
		for i = 5, 15 do
			if turtle.getItemCount( i ) == 0 then
				hasSpace = true
			end
		end
		if not hasSpace then
			print( ""[isOk]: Out of space!  Intiating return!"" )
			ok = false
		elseif ok then
			print( ""[isOk]: Everything is OK!"" )
			local id = os.startTimer( 10 )
			while true do
				local _, tid = os.pullEvent( ""timer"" )
				if tid == id then
					break
				end
			end
		end
	end
end


function trackTime()
	local sTime = table.concat( tArgs, "" "" )
	local nSeconds = 0
	for i, period in sTime:gmatch( ""(%d+)%s+(%a+)s?"" ) do
		if period:lower() == ""second"" then
			nSeconds = nSeconds + i
		elseif period:lower() == ""minute"" then
			nSeconds = nSeconds + ( i * 60 )
		elseif period:lower() == ""hour"" then
			nSeconds = nSeconds + ( i * 3600 )
		end
	end
	print( ""[trackTime]: Starting timer for ""..nSeconds.."" seconds!"" )
	local id = os.startTimer( nSeconds )
	while ok do
		local _, tid = os.pullEvent( ""timer"" )
		if id == tid then
			print( ""[trackTime]: End of session reached!  Returning to base!"" )
			ok = false
		end
	end
end

parallel.waitForAll( trackTime, isOk, main, dumpWaste )
for i = 5, 14 do
	turtle.select( i )
	turtle.dropDown()
end"
CJ4qtamU,addRoom,SethVan,C++,Thursday 18th of May 2023 12:50:10 PM CDT,"#include <a.out.h>

#include <QDebug>
#include <QInputDialog>
#include <QMessageBox>
#include <QString>
#include <QStringList>
#include <algorithm>

#include ""./ui_widget.h""
#include ""widget.h""

Widget::Widget( QWidget *parent ) : QWidget( parent ), ui( new Ui::Widget )
{
    ui->setupUi( this );
}

Widget::~Widget()
{
    delete ui;
}

void Widget::on_addItemButton_clicked()
{
    addNewRoom();
}

void Widget::on_newItemLineEdit_returnPressed()
{
    addNewRoom();
}

void Widget::on_deleteItemButton_clicked()
{
    if ( ui->listWidget->currentItem() )
    {
       QString room = ui->listWidget->currentItem()->text();
       QString str = ""Are you sure you want to permanently delete this room?:\n\"""" + room + ""\"""";

       if ( QMessageBox::critical( this, ""Deleting room is permanent!"", str, QMessageBox::Yes, QMessageBox::Cancel ) ==
            QMessageBox::Yes )
       {
          delete ui->listWidget->takeItem( ui->listWidget->currentRow() );
       }
    }
}

void Widget::addNewRoom()
{
    if ( ui->newItemLineEdit->text().size() )
    {
        QString room = ui->newItemLineEdit->text();

        auto lastDoubleDotPos = room.lastIndexOf("".."");

        /* Inside isNotAPossibleSequenceInput() all non-sequence inputs will be added normally and the
         * remainder of addNewRoom() becomes irrelevant. In likewise manner valid sequential inputs are
         * added inside of functions processedAsNumberSequence() and processedAsLetterSequence(). */
        if ( isNotAPossibleSequenceInput( lastDoubleDotPos, room ))
        {
           return;
        }

        QString seqBegin = room.first(lastDoubleDotPos); //left side of ""..""
        QString seqEnd = room.mid(lastDoubleDotPos + 2); //right side of ""..""


        if ( seqEndFormatIsInvalid(seqBegin, seqEnd, room) )
        {
            return;
        }

        if( processedAsNumberSequence(seqBegin, seqEnd, room) )
        {
            return;
        }

        if( processedAsLetterSequence(seqBegin, seqEnd, room) )
        {
            return;
        }
        else
        {
            return ambiguousFormatWarning(room);
        }
    }
}

bool Widget::isNotAPossibleSequenceInput(int pos, const QString& room)
{
    if ( pos == -1 )
    {
        if(room.contains("".""))
        {
            ambiguousFormatWarning(room);
            return true;
        }
        addLineEditText();
        return true;
    }
    if (room.lastIndexOf(""..."") == pos - 1 || pos == room.size() - 2 || pos == 0)
    {
        ambiguousFormatWarning(room);
        return true;
    }
    return false;
}

void Widget::ambiguousFormatWarning(const QString& room)
{
    QString ambigMsgBoxTitle = ""Ambiguous format detected..."";
    QString ambigMsgBoxMsg = ""Ambiguous format detected in inputted room:\n\"""" + room +
            ""\""\nIf you meant to convey a sequence of inputs, then click \'Cancel\'""
            "" and resubmit placing at the end either number(s) or a letter (of matching case) on either side of ""
            ""two dots with the greater value on the right side. Examples:\n\'Suite 100..120\', \'Bungalow 2A..C\'\n""
            ""Otherwise click \'Ignore\' and just one room will be submitted as what was written."";

    if (QMessageBox::warning( this, ambigMsgBoxTitle, ambigMsgBoxMsg, QMessageBox::Ignore, QMessageBox::Cancel )
            == QMessageBox::Cancel )
    {
       return;
    }
    else
    {
         addLineEditText();
         return;
    }
}

void Widget::addLineEditText()
{
   ui->listWidget->addItem( ui->newItemLineEdit->text() );
   ui->newItemLineEdit->clear();
}

bool Widget::seqEndFormatIsInvalid(const QString& seqBegin, const QString& seqEnd, const QString& room)
{
    if ( seqEnd.size() > 1 )
    {
        if (std::any_of( seqEnd.begin(), seqEnd.end(), []( auto c ) { return !c.isDigit(); } ) ||
              !seqBegin.back().isDigit() )
        {
            ambiguousFormatWarning(room);
            return true;
        }
        return false;
    }
}

bool Widget::processedAsNumberSequence(const QString& seqBegin, const QString& seqEnd, const QString& room)
{
    if ( seqEnd.front().isDigit() )
    {
        if ( std::all_of( seqBegin.begin(), seqBegin.end(), []( auto c ) { return c.isDigit(); } ) )
        {
            if (seqBegin.toInt() >= seqEnd.toInt())
            {
                ambiguousFormatWarning(room);
            }
            else
            {
                addLineEditSequence("""", seqBegin.toInt(), seqEnd.toInt(), RoomSequence::Number);
            }
        }
        else
        {
            int i = seqBegin.size() - 1;
            for ( ; seqBegin[ i ].isDigit() && i > -1; --i );
            auto startNumber = seqBegin.last( seqBegin.size() - (i + 1)).toInt();
            auto endNumber = seqEnd.toInt();
            if(startNumber < endNumber)
            {
                addLineEditSequence(seqBegin.first( i + 1 ), startNumber,
                                           endNumber, RoomSequence::Number );
            }
            else
            {
                ambiguousFormatWarning(room);
            }
        }
        return true;
    }
    return false;
}

void Widget::addLineEditSequence(const QString& base, int roomNumberStart, int roomNumberEnd, RoomSequence type)
{
    int currentRoom = roomNumberStart;
    for ( ; currentRoom < roomNumberEnd + 1; ++currentRoom )
    {
        QString addMe;
        if(type == RoomSequence::Letter)
        {
            addMe = base + QChar(currentRoom);
        }
        else
        {
            addMe = base + QString::number(currentRoom);
        }
        ui->listWidget->addItem( addMe );
    }
    ui->newItemLineEdit->clear();

}

bool Widget::processedAsLetterSequence(const QString& seqBegin, const QString& seqEnd, const QString& room)
{
    if ( seqEnd.front().isLetter() && seqBegin.back().isLetter() && seqBegin.back() < seqEnd.front() &&
         seqBegin.back().category() == seqEnd.front().category() ) //category refers to case
    {
        QString base = seqBegin.size() > 1? seqBegin.first(seqBegin.size() - 1) : """";
        addLineEditSequence(base, seqBegin.back().unicode(), seqEnd.front().unicode(), RoomSequence::Letter);
        return true;
    }
    else
    {
        return false;
    }
}
"
dM1e0aZL,123,maxim_shlyahtin,Python,Thursday 18th of May 2023 12:25:08 PM CDT,"import pandas as pd
import numpy as np

path_right = r""C:\Users\Max-13700kf\PycharmProjects\pythonProject\ex.csv""
path_left = r""path to elagin left""

elagin_right_df = pd.read_csv(path_right)
# elagin_left_df = pd.read_csv(path_left)

# 1
print(elagin_right_df.head())

# 2
print(elagin_right_df.isnull().sum(), elagin_right_df.info, sep='\n')


#3
print(elagin_right_df.duplicated())

#4
print(elagin_right_df.n)

#5
elagin_right_df['education'] = None
elagin_right_df['age'] = None
print(elagin_right_df.sort_values(['education', 'age'], ascending=[False, False]).head(20))"
E3pCesLw,archivemodified,studioart,PHP,Thursday 18th of May 2023 11:57:14 AM CDT,"<?php
	if( ! defined( 'ABSPATH' ) ) { die(); }

	global $avia_config, $more;

	/*
	 * get_header is a basic wordpress function, used to retrieve the header.php file in your theme directory.
	 */
	get_header();

	$showheader = true;

			//	get the current taxonomy term
				$term = get_queried_object();
			//	vars - ACF for showing Images and Color in Category Backend
				$image = get_field('image', $term);
				$color = get_field('color', $term);					 
	if( avia_get_option( 'frontpage' ) && $blogpage_id = avia_get_option( 'blogpage' ) )
	{
		if( get_post_meta( $blogpage_id, 'header', true ) == 'no' )
		{
			$showheader = false;
		}
	}

	if( $showheader )
	{
		echo avia_title( array( 'title' => avia_which_archive() ) );
	}

	do_action( 'ava_after_main_title' );

	?>

		<div class='container_wrap container_wrap_first main_color <?php avia_layout_class( 'main' ); ?>'>



<div id=""av_section_2"" class=""category-description-background avia-section main_color avia-section-default avia-shadow avia-bg-style-scroll avia-builder-el-1 el_after_av_section avia-builder-el-last container_wrap sidebar_right"" >

	<style type=""text/css"">

		.entry-content-wrapper .post-title {
			color: <?php echo $color; ?>;
		}
		.blog-categories.minor-meta a {
			color: <?php echo $color; ?>;
			}
		<?php if( $image ): ?>
			.categoryheaderimage {
				background-image: url(<?php echo $image['url']; ?>);
			}
		<?php endif; ?>
	</style>		 

	<div class=""categoryheaderimage"">
			
	</div>
	
	
	<div class=""container"">
		<div class=""template-page content  av-content-small alpha units"">
			<div class=""post-entry post-entry-type-page"">
				<div class=""entry-content-wrapper clearfix"">
					<?php

					$tds = term_description();
					if( $tds )
					{
						echo ""<div class='category-term-description'>{$tds}</div>"";
					}
					?>
				</div>
			</div>
		</div>
	</div>
</div>	

			<div class='container template-blog '>

				<main class='content <?php avia_layout_class( 'content' ); ?> units' <?php avia_markup_helper( array( 'context' => 'content', 'post_type' => 'post' ) );?>>
					<?php  if( is_category() )
						{
						//	echo '<h1>' . 'Kategorie: ' . single_cat_title('',false) . '</h1>';
						}			
					?>
					
					<?php  if( is_tag() )
						{
						//	echo '<h1>' . 'Schlagwort: ' . single_tag_title('',false) . '</h1>';
						}
					?>
				
                    <?php
					$avia_config['blog_style'] = apply_filters( 'avf_blog_style', avia_get_option( 'blog_style', 'multi-big' ), 'archive' );
					if( $avia_config['blog_style'] == 'blog-grid' )
					{
						global $posts;

						$post_ids = array();
						foreach( $posts as $post )
						{
							$post_ids[] = $post->ID;
						}

						if( ! empty( $post_ids ) )
						{
							$atts = array(
										'type'			=> 'grid',
										'items'			=> get_option( 'posts_per_page' ),
										'columns'		=> 3,
										'class'			=> 'avia-builder-el-no-sibling',
										'paginate'		=> 'yes',
										'use_main_query_pagination' => 'yes',
										'contents' 	=> 'excerpt_read_more',  /* weiterlesen-link */
										'custom_query'	=> array(
																'post__in'	=> $post_ids,
																'post_type'	=> get_post_types()
															)
									);

							/**
							 * @since 4.5.5
							 * @return array
							 */
							$atts = apply_filters( 'avf_post_slider_args', $atts, 'archive' );

							$blog = new avia_post_slider( $atts );
							$blog->query_entries();

							echo '<div class=""entry-content-wrapper"">' . $blog->html() . '</div>';
						}
						else
						{
							get_template_part( 'includes/loop', 'index' );
						}
					}
					else
					{
						/* Run the loop to output the posts.
						 * If you want to overload this in a child theme then include a file
						 * called loop-index.php and that will be used instead.
						 */
						$more = 0;
						get_template_part( 'includes/loop', 'index' );
					}
                    ?>

				<!--end content-->
				</main>

				<?php

				//get the sidebar
                if( avia_get_option( 'archive_sidebar' ) == 'archive_sidebar_separate' )
				{
                    $avia_config['currently_viewing'] = 'archive';
                }
                else
				{
                    $avia_config['currently_viewing'] = 'blog';
                }

				get_sidebar();

				?>

			</div><!--end container-->

		</div><!-- close default .container_wrap element -->

<?php
		get_footer();
"
QKWz35Ks,csv reader 2,VioletVi,Python,Thursday 18th of May 2023 11:46:44 AM CDT,"import csv
def read_csv_values(file_path, start_row = 0, end_row = 1e99):
    columns = [] # a list to store the columns in
    onRowNumber = 0 #an integer to track the row number 
    headerList = [] # a list to store the headers in
    with open(file_path, 'r') as csv_file: #open the CSV file, and then close it when we reach the end of this block
        reader = csv.reader(csv_file) #read the file as a CSV file
        for row in reader: # for each row in the file
            colNum = 0 #we are starting at column zero
            if onRowNumber == 0: # if the row is zero...
                for col in row:
                    columns.append([]) # Make empty lists to store each column's data
                    headerList.append(col) #Store the headers from row zero

            if onRowNumber < start_row: #if we are at the not yet at the row the user specified...
                pass # Do nothing

            elif onRowNumber >= end_row: #if we have reached the last row the user asked for
                return columns, headerList # return and end the function

            else: #Otherwise we are in the range the user asked for
                for col in row: #for each column in the row...
                    try:
                        columns[colNum].append(float(col)) #try to convert it into a float
                    except: #if that fails...
                        if col != """": # if its not an empty string
                            columns[colNum].append(col) #add the cell value as a string
                            
                    colNum += 1 # increase colNum by one
            onRowNumber += 1 #increase row number by one
    return columns, headerList


file_path = 'cancer.csv'
values_array, headers = read_csv_values(file_path, 0, 1)

print(headers)
print(values_array)
"
