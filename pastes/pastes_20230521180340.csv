id,title,username,language,date,content
1qHcvLeG,Frustum,OrangoMango,Java,Sunday 21st of May 2023 12:40:29 PM CDT,"import java.util.Arrays;

public class FrustumPlanes {
	public static class Plane {
		public final Point3D point;
		public final Vector3D normal;

		public Plane(Point3D point, Vector3D normal) {
			this.point = point;
			this.normal = normal;
		}
	}

	public static class Point3D {
		public final double x, y, z;

		public Point3D(double x, double y, double z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}
	}

	public static class Vector3D {
		public final double x, y, z;

		public Vector3D(double x, double y, double z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}
	}

	public static Plane[] calculateFrustumPlanes(Point3D cameraPosition, double zNear, double zFar, Vector3D cameraDirection, double fovAngle) {
		// Calculate the half-height and half-width of the near plane
		double nearHeight = 2.0 * Math.tan(Math.toRadians(fovAngle / 2.0)) * zNear;
		double nearWidth = nearHeight;

		// Calculate the center and normal of the near plane
		Point3D nearCenter = new Point3D(
				cameraPosition.x + cameraDirection.x * zNear,
				cameraPosition.y + cameraDirection.y * zNear,
				cameraPosition.z + cameraDirection.z * zNear
		);
		Vector3D nearNormal = new Vector3D(
				cameraDirection.x,
				cameraDirection.y,
				cameraDirection.z
		);

		// Calculate the center and normal of the far plane
		Point3D farCenter = new Point3D(
				cameraPosition.x + cameraDirection.x * zFar,
				cameraPosition.y + cameraDirection.y * zFar,
				cameraPosition.z + cameraDirection.z * zFar
		);
		Vector3D farNormal = new Vector3D(
				-cameraDirection.x,
				-cameraDirection.y,
				-cameraDirection.z
		);

		// Calculate the corners of the near plane
		Point3D nearTopLeft = new Point3D(
				nearCenter.x - cameraDirection.y * nearHeight / 2.0 + cameraDirection.z * nearWidth / 2.0,
				nearCenter.y + cameraDirection.x * nearHeight / 2.0 - cameraDirection.z * nearWidth / 2.0,
				nearCenter.z - cameraDirection.x * nearWidth / 2.0 - cameraDirection.y * nearHeight / 2.0
		);
		Point3D nearTopRight = new Point3D(
				nearCenter.x + cameraDirection.y * nearHeight / 2.0 + cameraDirection.z * nearWidth / 2.0,
				nearCenter.y - cameraDirection.x * nearHeight / 2.0 - cameraDirection.z * nearWidth / 2.0,
				nearCenter.z - cameraDirection.x * nearWidth / 2.0 - cameraDirection.y * nearHeight / 2.0
		);
		Point3D nearBottomLeft = new Point3D(
				nearCenter.x - cameraDirection.y * nearHeight / 2.0 - cameraDirection.z * nearWidth / 2.0,
				nearCenter.y + cameraDirection.x * nearHeight / 2.0 + cameraDirection.z * nearWidth/ 2.0,
				nearCenter.z - cameraDirection.x * nearWidth / 2.0 + cameraDirection.y * nearHeight / 2.0
		);
		Point3D nearBottomRight = new Point3D(
				nearCenter.x + cameraDirection.y * nearHeight / 2.0 - cameraDirection.z * nearWidth / 2.0,
				nearCenter.y - cameraDirection.x * nearHeight / 2.0 + cameraDirection.z * nearWidth / 2.0,
				nearCenter.z - cameraDirection.x * nearWidth / 2.0 + cameraDirection.y * nearHeight / 2.0
		);

		// Calculate the corners of the far plane
		Point3D farTopLeft = new Point3D(
				farCenter.x - cameraDirection.y * nearHeight / 2.0 + cameraDirection.z * nearWidth / 2.0,
				farCenter.y + cameraDirection.x * nearHeight / 2.0 - cameraDirection.z * nearWidth / 2.0,
			   	farCenter.z - cameraDirection.x * nearWidth / 2.0 - cameraDirection.y * nearHeight / 2.0
  		);
   		Point3D farTopRight = new Point3D(
				farCenter.x + cameraDirection.y * nearHeight / 2.0 + cameraDirection.z * nearWidth / 2.0,
				farCenter.y - cameraDirection.x * nearHeight / 2.0 - cameraDirection.z * nearWidth / 2.0,
				farCenter.z - cameraDirection.x * nearWidth / 2.0 - cameraDirection.y * nearHeight / 2.0
		);
		Point3D farBottomLeft = new Point3D(
				farCenter.x - cameraDirection.y * nearHeight / 2.0 - cameraDirection.z * nearWidth / 2.0,
				farCenter.y + cameraDirection.x * nearHeight / 2.0 + cameraDirection.z * nearWidth / 2.0,
				farCenter.z - cameraDirection.x * nearWidth / 2.0 + cameraDirection.y * nearHeight / 2.0
		);
		Point3D farBottomRight = new Point3D(
				farCenter.x + cameraDirection.y * nearHeight / 2.0 - cameraDirection.z * nearWidth / 2.0,
				farCenter.y - cameraDirection.x * nearHeight / 2.0 + cameraDirection.z * nearWidth / 2.0,
				farCenter.z - cameraDirection.x * nearWidth / 2.0 + cameraDirection.y * nearHeight / 2.0
		);

		// Create the planes using the corner points and normals
		Plane[] planes = new Plane[6];
		planes[0] = new Plane(nearTopLeft, calculatePlaneNormal(nearTopLeft, nearTopRight, nearBottomRight)); // Near plane
		planes[1] = new Plane(farTopRight, calculatePlaneNormal(farTopRight, farTopLeft, farBottomLeft)); // Far plane
		planes[2] = new Plane(nearTopRight, calculatePlaneNormal(nearTopRight, farTopRight, farBottomRight)); // Right plane
		planes[3] = new Plane(nearTopLeft, calculatePlaneNormal(nearTopLeft, farTopLeft, farBottomLeft)); // Left plane
		planes[4] = new Plane(nearTopLeft, calculatePlaneNormal(nearTopLeft, nearTopRight, farTopRight)); // Top plane
		planes[5] = new Plane(nearBottomRight, calculatePlaneNormal(nearBottomRight, nearBottomLeft, farBottomLeft)); // Bottom plane

		return planes;
	}

	private static Vector3D calculatePlaneNormal(Point3D p1, Point3D p2, Point3D p3) {
		// Calculate the vectors for two sides of the plane
		double v1x = p2.x - p1.x;
		double v1y = p2.y - p1.y;
		double v1z = p2.z - p1.z;
		double v2x = p3.x - p1.x;
		double v2y = p3.y - p1.y;
		double v2z = p3.z - p1.z;

		// Calculate the cross product of the two vectors
		double nx = v1y * v2z - v1z * v2y;
		double ny = v1z * v2x - v1x * v2z;
		double nz = v1x * v2y - v1y * v2x;

		// Normalize the cross product vector
		double magnitude = Math.sqrt(nx * nx + ny * ny + nz * nz);
		nx /= magnitude;
		ny /= magnitude;
		nz /= magnitude;

		return new Vector3D(nx, ny, nz);
	}

	public static void main(String[] args) {
		// Example usage
		Point3D cameraPosition = new Point3D(0, 0, 0);
		double zNear = 1.0;
		double zFar = 10.0;
		Vector3D cameraDirection = new Vector3D(0, 0, -1);
		double fovAngle = 60.0;

		Plane[] frustumPlanes = calculateFrustumPlanes(cameraPosition, zNear, zFar, cameraDirection, fovAngle);

		for (Plane plane : frustumPlanes) {
			System.out.println(""Point: ("" + plane.point.x + "", "" + plane.point.y + "", "" + plane.point.z + "")"");
			System.out.println(""Normal: ("" + plane.normal.x + "", "" + plane.normal.y + "", "" + plane.normal.z + "")"");
			System.out.println();
		}
	}
}


"
m7CqeFiU,Untitled,westor,mIRC,Sunday 21st of May 2023 11:51:06 AM CDT,"alias _unicode {
  var -s %read = $read(Unicode.txt, nw, $+(*,$_chr2uni($1),$chr(59),*))

  if ($gettok(%read,2,59) == <control>) { var %result = $gettok(%read,7,59) }
  else { var %result = $gettok(%read,2,59) }

  $iif($isid,return,echo -at) U+ $+ $_chr2uni($1-) %result ( $+ $1 $+ )
}

alias _chr2uni { 
  var %r = $iif($isid,return,echo -at)

  if ($len($1) == 2) { %r $base($calc(($asc($mid($1,1,1)) - 55296) * 1024 + $asc($mid($1,2,1)) - 56320 + 65536),10,16,4) | return } 

  %r $base($asc($1),10,16,4)
}
"
Ne2MDp7u,flutter_put,yudiwibisono,Dart,Sunday 21st of May 2023 11:30:44 AM CDT,"import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() => runApp(MaterialApp(home: MyApp()));

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  MyAppState createState() => MyAppState();
}

class MyAppState extends State<MyApp> {
  late Future<int> respPost; //201 artinya berhasil
  String url = ""http://127.0.0.1:8000/tambah_mhs/"";

  Future<int> fetchData() async {
    //data disimpan di body
    final response = await http.post(Uri.parse(url), headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8'
    }, body: """"""
      {""nim"": ""13594022"",
      ""nama"": ""Sandra Permana"",
      ""id_prov"": ""12"",
      ""angkatan"": ""2020"",
      ""tinggi_badan"": 190} """""");
    return response.statusCode; //sukses kalau 201
  }

  @override
  void initState() {
    super.initState();
    respPost = Future.value(0); //init
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My App',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('My App'),
        ),
        body: Center(
            child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ElevatedButton(
              onPressed: () {
                setState(() {
                  respPost = fetchData();
                });
              },
              child: const Text('Klik Untuk Insert data (POST)'),
            ),
            Text(""Hasil:""),
            FutureBuilder<int>(
                future: respPost,
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    if (snapshot.data! == 201) {
                      return Text(""Proses Insert Berhasil!"");
                    }
                    if (snapshot.data! == 0) {
                      return Text("""");
                    } else {
                      return Text(""Proses insert gagal"");
                    }
                  }
                  // default: loading spinner.
                  return const CircularProgressIndicator();
                })
          ],
        )), //column center
      ), //Scaffold
    ); //Material APP
  }
}
"
KNDdHB2H,asd,rejcsibejcsi,PL/SQL,Sunday 21st of May 2023 11:24:54 AM CDT,"CREATE OR REPLACE TRIGGER constraint_trigger
  BEFORE INSERT ON reviews
  FOR EACH ROW
BEGIN
   IF :NEW.rating > 10 THEN
      RAISE_APPLICATION_ERROR(-20000, 'Rating cannot be higher than 10');
   END IF;
END;

"
QnM8FcNA,Untitled,0andrejj0,C++,Sunday 21st of May 2023 11:07:18 AM CDT,"#include ""api.hpp""
#include <ostream>
#include <string>
#include <vector>
#include <map>
#include <queue>
#include <iostream>

using std::cout;

DFA dfa_minim(DFA &d) {

    std::cout << ""ABOB\n"" << std::endl;

    int n = d.size() + 1;
    int npos = d.size();
    std::vector<std::vector<std::pair<int, char> > > g(n);
    std::vector<int> term(n);
    std::map<std::string, int> numOfState;
    {
        int i = 0;
        for (auto& state : d.get_states()) {
            if (numOfState.find(state) == numOfState.end()) {
                numOfState[state] = i++;
            }
            term[numOfState[state]] = d.is_final(state);
        }
    }
    {
        for (auto& from : d.get_states()) {
            for (char c : d.get_alphabet()) {
                if (d.has_trans(from, c)) {
                    g[numOfState[from]].push_back({numOfState[d.get_trans(from, c)], c});
                } else {
                    g[numOfState[from]].push_back({npos, c});
                }
            }
        }
    }
    {
        for (char c: d.get_alphabet()) {
            g[npos].push_back({npos, c});
        }
    }

    int startPos = numOfState[d.get_initial_state()];

    cout << ""graph:\n"";
    for (int i = 0; i < n; ++i) {
        for (auto [nxt, c]: g[i]) {
            cout << i << ' ' << nxt << ' ' << c << '\n';
        }
    }
    cout << ""term:\n"";
    for (int i = 0; i < n; ++i)
        if (term[i])
            cout << i << ' ';
    cout << '\n';
    cout << ""start:"" << ' ' << startPos << '\n'; 
    std::cout << ""kok\n"";


    std::vector<std::map<char, std::vector<int> > > inv(n);
    for (int i = 0; i < n; ++i) {
        for (auto&& [nxt, c]: g[i]) {
            inv[nxt][c].push_back(i);
        }
    }

    std::vector<std::set<int> > classes(2);
    std::vector<int> invSize(2);
    std::vector<int> twin(2, -1);
    std::vector<int> numOfClass(n);

    for (int i = 0; i < n; ++i) {
        if (term[i]) {
            classes[0].insert(i);
            numOfClass[i] = 0;
        } else { 
            classes[1].insert(i);
            numOfClass[i] = 1;
        }
    }


    std::queue<std::pair<int, char> > q;
    for (char c : d.get_alphabet()) {
        q.push({1, c});
        q.push({0, c});
    }

    cout << ""lol\n"";
    while (!q.empty()) {

        auto [curClassIdx, c] = q.front();
        std::set<int>& curClass = classes[curClassIdx];
        q.pop();

        cout << ""try split: "" << c << ' ' << curClassIdx << '\n';
        for (int cur: curClass)
            cout << cur << ' ';
        cout << '\n';

        cout << ""before split: \n"";
        for (int i = 0; i < n; ++i)
            cout << numOfClass[i] << ' ';
        cout << '\n';

        std::map<int, std::set<int> > involved;

        for (int cur : curClass) {
            for (int from : inv[cur][c]) {
                int i = numOfClass[from];
                involved[i].insert(from);
            }
        }

        for (auto& [i, arr]: involved) {
            if (arr.size() < classes[i].size()) {
                cout << ""need split: "" << i << "" sz: "" << classes[i].size() << '\n';
                for (int k : arr)
                    cout << k << ' ';
                cout << '\n';
                classes.emplace_back();
                int j = classes.size() - 1;

                for (int r : arr) {
                    classes[i].erase(r);
                    classes[j].insert(r);
                }

                if (classes[i].size() < classes[j].size()) {
                    std::swap(classes[i], classes[j]);
                }

                for (int r : classes[j]) {
                    numOfClass[r] = j;
                }

                for (int r : classes[i]) {
                    numOfClass[r] = i;
                }

                for (char c : d.get_alphabet()) {
                    q.push({j, c});
                }
            }
        }
        cout << ""after split: \n"";
        for (int i = 0; i < n; ++i)
            cout << numOfClass[i] << ' ';
        cout << '\n';
    }

    std::vector<int> used(n);
    std::queue<int> qq;
    qq.push(startPos);
    used[startPos] = 1;
    while (!qq.empty()) {
        int cur = qq.front();
        qq.pop();
        for (auto p : g[cur]) {
            if (!used[p.first]) {
                used[p.first] = 1;
                qq.push(p.first);
            }
        }
    }

    std::vector<int> u(n);
    for (int i = 0; i < n; ++i)
        if (term[i]) {
            qq.push(i);
            u[i] = true;
        }

    while (!qq.empty()) {
        int cur = qq.front();
        qq.pop();
        for (char c: d.get_alphabet())
            for (int nxt:inv[cur][c]) {
                if (u[nxt])
                    continue;
                u[nxt] = 1;
                qq.push(nxt);
            }
    }

    for (int i = 0; i < n; ++i) {
        std::cout << i << ' ' << numOfClass[i] <<  "":\n"";
        for (auto [j, c]: g[i]) {
            std::cout << c << ' ' << j << '\n';
        }
    }

    for (int i = 0; i < n; ++i)
        cout << used[i] << ' ';
    cout << '\n';
    for (int i = 0; i < n; ++i)
        cout << u[i] << ' ';
    cout << '\n';


    DFA ans(d.get_alphabet());

    for (int i = 0; i < n; ++i) {
        if (!used[i] || i == npos)
            continue;
        if (!u[i])
            continue;

        cout << ""st in ans: "" << i << ' ' << numOfClass[i] << '\n';
        if (!ans.has_state(std::to_string(numOfClass[i]))) {
            ans.create_state(std::to_string(numOfClass[i]));
            if (term[i])
                ans.make_final(std::to_string(numOfClass[i]));
        }
    }

    ans.set_initial(std::to_string(numOfClass[startPos]));

    for (int i = 0; i < n; ++i) {
        if (!used[i] || i == npos)
            continue;
        if (!u[i])
            continue;
        int from = numOfClass[i];
        for (auto [nxt, c]: g[i]) {
            if (nxt == npos)
                continue;
            if (!u[nxt])
                continue;
            int to = numOfClass[nxt];
            ans.set_trans(std::to_string(from), c, std::to_string(to));
        }
    }

    return ans;
}
"
T1sPGBEP,plsql2,rejcsibejcsi,PL/SQL,Sunday 21st of May 2023 10:19:54 AM CDT,"-- create table about director
CREATE TABLE directors ( id INT NOT NULL PRIMARY KEY, name VARCHAR2(255) NOT NULL, born NUMERIC(4) NOT NULL CHECK (born BETWEEN 1900 AND 2022), gender VARCHAR2(255) NOT NULL, country VARCHAR2(255) NOT NULL );
CREATE SEQUENCE directors_sequence;
CREATE 
OR replace TRIGGER directors_on_insert BEFORE INSERT 
ON directors FOR EACH ROW 
BEGIN
   SELECT
      directors_sequence.NEXTVAL INTO :new.id 
   FROM
      dual;
END
;
-- create table about studios
CREATE TABLE studios ( id INT NOT NULL PRIMARY KEY, name VARCHAR2(255) NOT NULL, founded NUMERIC(4) NOT NULL CHECK (founded BETWEEN 1800 AND 2022), country VARCHAR2(255) NOT NULL );
CREATE SEQUENCE studios_sequence;
CREATE 
OR replace TRIGGER studios_on_insert BEFORE INSERT 
ON studios FOR EACH ROW 
BEGIN
   SELECT
      studios_sequence.NEXTVAL INTO :new.id 
   FROM
      dual;
END
;
-- create table about movies
CREATE TABLE movies ( id INT NOT NULL PRIMARY KEY, title VARCHAR2(255) NOT NULL, year NUMERIC(4) NOT NULL CHECK (year BETWEEN 1900 AND 2022), director NUMERIC(10) NOT NULL, genre VARCHAR2(255) NOT NULL, rating NUMERIC(2) NOT NULL CHECK (rating BETWEEN 0 AND 10), studio NUMERIC(10) NOT NULL, FOREIGN KEY (studio) REFERENCES studios(id), FOREIGN KEY (director) REFERENCES directors(id) );
CREATE SEQUENCE movies_sequence;
CREATE 
OR replace TRIGGER movies_on_insert BEFORE INSERT 
ON movies FOR EACH ROW 
BEGIN
   SELECT
      movies_sequence.NEXTVAL INTO :new.id 
   FROM
      dual;
END
;
-- mysql create table about actors
CREATE TABLE actors ( id INT NOT NULL PRIMARY KEY, name VARCHAR2(255) NOT NULL, born NUMERIC(4) NOT NULL CHECK (born BETWEEN 1900 AND 2022), gender VARCHAR2(255) NOT NULL, country VARCHAR2(255) NOT NULL );
CREATE SEQUENCE actors_sequence;
CREATE 
OR replace TRIGGER actors_on_insert BEFORE INSERT 
ON actors FOR EACH ROW 
BEGIN
   SELECT
      actors_sequence.NEXTVAL INTO :new.id 
   FROM
      dual;
END
;
-- create table about movieActors
CREATE TABLE movieactors ( id INT NOT NULL PRIMARY KEY, movie_id INT, actor_id INT, FOREIGN KEY (actor_id) REFERENCES actors(id), FOREIGN KEY (movie_id) REFERENCES movies(id) );
CREATE SEQUENCE movieactors_sequence;
CREATE 
OR replace TRIGGER movieactors_on_insert BEFORE INSERT 
ON movieactors FOR EACH ROW 
BEGIN
   SELECT
      movieactors_sequence.NEXTVAL INTO :new.id 
   FROM
      dual;
END
;
-- create table about reviews
CREATE TABLE reviews ( id INT NOT NULL PRIMARY KEY, movie_id NUMERIC(10) NOT NULL, review VARCHAR2(255), rating NUMERIC(2) NOT NULL CHECK (rating BETWEEN 0 AND 10), date_r DATE, FOREIGN KEY (movie_id) REFERENCES movies(id) );
CREATE SEQUENCE reviews_sequence;
CREATE 
OR replace TRIGGER reviews_on_insert BEFORE INSERT 
ON reviews FOR EACH ROW 
BEGIN
   SELECT
      reviews_sequence.NEXTVAL INTO :new.id 
   FROM
      dual;
END
;
-- INSERTS
-- inserts for directors
INSERT INTO
   directors ( name, born, gender, country ) 
VALUES
   (
      'Frank Darabont',
      1959,
      'male',
      'France' 
   )
;
INSERT INTO
   directors ( name, born, gender, country ) 
VALUES
   (
      'Francis Ford Coppola',
      1939,
      'male',
      'USA' 
   )
;
INSERT INTO
   directors ( name, born, gender, country ) 
VALUES
   (
      'Christopher Nolan',
      1970,
      'male',
      'UK' 
   )
;
-- inserts for studios
INSERT INTO
   studios ( name, founded, country ) 
VALUES
   (
      'Castle Rock Entertainment',
      1987,
      'USA' 
   )
;
INSERT INTO
   studios ( name, founded, country ) 
VALUES
   (
      'Paramount Pictures',
      1912,
      'USA' 
   )
;
INSERT INTO
   studios ( name, founded, country ) 
VALUES
   (
      'Warner Bros.',
      1923,
      'USA' 
   )
;
-- inserts for movies
INSERT INTO
   movies ( title, year, director, genre, rating, studio ) 
VALUES
   (
      'The Shawshank Redemption',
      1994,
      1,
      'Drama',
      9.2,
      1 
   )
;
INSERT INTO
   movies ( title, year, director, genre, rating, studio ) 
VALUES
   (
      'The Godfather',
      1972,
      2,
      'Crime',
      9.2,
      2 
   )
;
INSERT INTO
   movies ( title, year, director, genre, rating, studio ) 
VALUES
   (
      'The Godfather: Part II',
      1974,
      2,
      'Crime',
      9.0,
      2 
   )
;
INSERT INTO
   movies ( title, year, director, genre, rating, studio ) 
VALUES
   (
      'The Dark Knight',
      2008,
      3,
      'Action',
      9.0,
      3 
   )
;
INSERT INTO
   movies ( title, year, director, genre, rating, studio ) 
VALUES
   (
      'The Green Mile',
      1999,
      1,
      'Drama',
      8.6,
      1 
   )
;
BEGIN
   -- inserts for actors
   -- The Shawshank Redemption
   INSERT INTO
      actors ( name, born, gender, country ) 
   VALUES
      (
         'Tim Robbins',
         1958,
         'male',
         'USA' 
      )
;
INSERT INTO
   actors ( name, born, gender, country ) 
VALUES
   (
      'Morgan Freeman',
      1937,
      'male',
      'USA' 
   )
;
-- The Godfather
INSERT INTO
   actors ( name, born, gender, country ) 
VALUES
   (
      'Marlon Brando',
      1924,
      'male',
      'USA' 
   )
;
INSERT INTO
   actors ( name, born, gender, country ) 
VALUES
   (
      'Al Pacino',
      1940,
      'male',
      'USA' 
   )
;
-- The Godfather: Part II  alpacino
INSERT INTO
   actors ( name, born, gender, country ) 
VALUES
   (
      'Robert De Niro',
      1943,
      'male',
      'USA' 
   )
;
-- The Dark Knight
INSERT INTO
   actors ( name, born, gender, country ) 
VALUES
   (
      'Christian Bale',
      1974,
      'male',
      'UK' 
   )
;
INSERT INTO
   actors ( name, born, gender, country ) 
VALUES
   (
      'Heath Ledger',
      1979,
      'male',
      'Australia' 
   )
;
-- The Green Mile
INSERT INTO
   actors ( name, born, gender, country ) 
VALUES
   (
      'Tom Hanks',
      1956,
      'male',
      'USA' 
   )
;
INSERT INTO
   actors ( name, born, gender, country ) 
VALUES
   (
      'Michael Clarke Duncan',
      1957,
      'male',
      'USA' 
   )
;
END
;
BEGIN
   -- inserts for reviews
   INSERT INTO
      reviews ( movie_id, review, rating, date_r ) 
   VALUES
      (
         1,
         'Great movie!',
         9,
         to_date('2019-01-01', 'YYYY-MM-DD') 
      )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      1,
      'Awesome!',
      10,
      to_date('2019-01-02', 'YYYY-MM-DD') 
   )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      2,
      'Pretty good!',
      9,
      to_date( '2010-11-22', 'YYYY-MM-DD') 
   )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      2,
      'I liked it!',
      8,
      to_date( '2010-11-23', 'YYYY-MM-DD') 
   )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      3,
      'Great movie!',
      9,
      to_date('2019-01-01', 'YYYY-MM-DD') 
   )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      3,
      'Awesome!',
      10,
      to_date('2019-01-02', 'YYYY-MM-DD') 
   )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      4,
      'Pretty good!',
      9,
      to_date( '2010-11-22', 'YYYY-MM-DD') 
   )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      4,
      'I liked it!',
      8,
      to_date( '2010-11-23', 'YYYY-MM-DD') 
   )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      5,
      'Great movie!',
      9,
      to_date( '2019-01-01', 'YYYY-MM-DD') 
   )
;
INSERT INTO
   reviews ( movie_id, review, rating, date_r ) 
VALUES
   (
      5,
      'Awesome!',
      10,
      to_date('2019-01-02', 'YYYY-MM-DD') 
   )
;
-- inserts for movieActors
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      1,
      1 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      1,
      2 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      2,
      3 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      2,
      4 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      3,
      4 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      3,
      5 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      4,
      6 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      4,
      7 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      5,
      8 
   )
;
INSERT INTO
   movieactors ( movie_id, actor_id ) 
VALUES
   (
      5,
      9 
   )
;
END
;
-- TRIGGERS
-- insert, update, delete triggers
CREATE 
OR replace TRIGGER movies_log AFTER INSERT 
OR 
UPDATE
   OR 
   DELETE
      ON movies FOR EACH ROW 
      BEGIN
         IF inserting 
      THEN
         INSERT INTO
            log ( table_name, action, date_l ) 
         VALUES
            (
               'movies', 'insert', SYSDATE 
            )
;
ELSIF updating 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'movies', 'update', SYSDATE 
      )
;
ELSIF deleting 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'movies', 'delete', SYSDATE 
      )
;
      END
      IF;
END
;
CREATE 
OR replace TRIGGER actors_log AFTER INSERT 
OR 
UPDATE
   OR 
   DELETE
      ON actors FOR EACH ROW 
      BEGIN
         IF inserting 
      THEN
         INSERT INTO
            log ( table_name, action, date_l ) 
         VALUES
            (
               'actors', 'insert', SYSDATE 
            )
;
ELSIF updating 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'actors', 'update', SYSDATE 
      )
;
ELSIF deleting 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'actors', 'delete', SYSDATE 
      )
;
      END
      IF;
END
;
CREATE 
OR replace TRIGGER studios_log AFTER INSERT 
OR 
UPDATE
   OR 
   DELETE
      ON studios FOR EACH ROW 
      BEGIN
         IF inserting 
      THEN
         INSERT INTO
            log ( table_name, action, date_l ) 
         VALUES
            (
               'studios', 'insert', SYSDATE 
            )
;
ELSIF updating 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'studios', 'update', SYSDATE 
      )
;
ELSIF deleting 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'studios', 'delete', SYSDATE 
      )
;
      END
      IF;
END
;
CREATE 
OR replace TRIGGER reviews_log AFTER INSERT 
OR 
UPDATE
   OR 
   DELETE
      ON reviews FOR EACH ROW 
      BEGIN
         IF inserting 
      THEN
         INSERT INTO
            log ( table_name, action, date_l ) 
         VALUES
            (
               'reviews', 'insert', SYSDATE 
            )
;
ELSIF updating 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'reviews', 'update', SYSDATE 
      )
;
ELSIF deleting 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'reviews', 'delete', SYSDATE 
      )
;
      END
      IF;
END
;
CREATE 
OR replace TRIGGER movieactors_log AFTER INSERT 
OR 
UPDATE
   OR 
   DELETE
      ON movieactors FOR EACH ROW 
      BEGIN
         IF inserting 
      THEN
         INSERT INTO
            log ( table_name, action, date_l ) 
         VALUES
            (
               'movieActors', 'insert', SYSDATE 
            )
;
ELSIF updating 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'movieActors', 'update', SYSDATE 
      )
;
ELSIF deleting 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'movieActors', 'delete', SYSDATE 
      )
;
      END
      IF;
END
;
CREATE 
OR replace TRIGGER directors_log AFTER INSERT 
OR 
UPDATE
   OR 
   DELETE
      ON directors FOR EACH ROW 
      BEGIN
         IF inserting 
      THEN
         INSERT INTO
            log ( table_name, action, date_l ) 
         VALUES
            (
               'directors', 'insert', SYSDATE 
            )
;
ELSIF updating 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'directors', 'update', SYSDATE 
      )
;
ELSIF deleting 
THEN
   INSERT INTO
      log ( table_name, action, date_l ) 
   VALUES
      (
         'directors', 'delete', SYSDATE 
      )
;
      END
      IF;
END
;
-- create sequence
CREATE SEQUENCE log_sequence;
-- create trigger
CREATE 
OR replace TRIGGER log_trigger BEFORE INSERT 
ON log FOR EACH ROW 
BEGIN
   SELECT
      log_sequence.NEXTVAL INTO :new.id 
   FROM
      dual;
END
;
-- CSOMAGOK
--egy csomag ami a módosítókat tartalmazza, insert, update, delete
CREATE 
OR replace PACKAGE modifiers AS FUNCTION berak(table_name VARCHAR2, micsoda VARCHAR2) RETURN NUMBER;
FUNCTION frissit(table_name VARCHAR2, micsoda VARCHAR2) RETURN NUMBER;
FUNCTION kivesz(table_name VARCHAR2, micsoda VARCHAR2) RETURN NUMBER;
END
;
CREATE 
OR replace PACKAGE BODY modifiers AS FUNCTION berak(table_name VARCHAR2, micsoda VARCHAR2) RETURN NUMBER IS sql0 VARCHAR2(1000);
BEGIN
   sql0 := 'insert into ' || table_name || ' values (' || micsoda || ')';
EXECUTE IMMEDIATE sql0;
RETURN SQL % rowcount;
END
;
FUNCTION frissit(table_name VARCHAR2, micsoda VARCHAR2) RETURN NUMBER IS sql0 VARCHAR2(1000);
BEGIN
   sql0 := 'update ' || table_name || ' set ' || micsoda;
EXECUTE IMMEDIATE sql0;
RETURN SQL % rowcount;
END
;
FUNCTION kivesz(table_name VARCHAR2, micsoda VARCHAR2) RETURN NUMBER IS sql0 VARCHAR2(1000);
BEGIN
   sql0 := 'delete from ' || table_name || ' where ' || micsoda;
EXECUTE IMMEDIATE sql0;
RETURN SQL % rowcount;
END
;
END
;
-- például
BEGIN
   dbms_output.put_line(modifiers.berak('movies', '1, 1, 1, 1, 1, 1, 1, 1, 1, 1'));
dbms_output.put_line(modifiers.frissit('movies', 'id = 1, title = ''asd'''));
dbms_output.put_line(modifiers.kivesz('reviews', 'id = 5'));
END
;
-- egy csomag ami mindenféle selecteket tartalmaz
CREATE 
OR replace PACKAGE queries AS PROCEDURE dynamic_select_5(table_name2 VARCHAR2);
PROCEDURE directormovies(director_name CHAR);
PROCEDURE movie_count_with_higher_rating(rating_be NUMBER);
END
;
CREATE 
OR replace PACKAGE BODY queries AS PROCEDURE dynamic_select_5( table_name2 VARCHAR2) IS TYPE cur_typ IS ref CURSOR;
c CUR_TYP;
query_str CHAR(2000);
str_1 VARCHAR2(200);
str_2 VARCHAR2(200);
str_3 VARCHAR2(200);
str_4 VARCHAR2(200);
str_5 VARCHAR2(200);
sql_all VARCHAR2(1000);
sql_5 VARCHAR2(1000);
BEGIN
   SELECT
      listagg(column_name , ', ') INTO sql_all 
   FROM
      user_tab_columns 
   WHERE
      table_name = table_name2;
SELECT
   regexp_substr(sql_all, '[^,]+,[^,]+,[^,]+,[^,]+,[^,]+') ""REGEXP_SUBSTR"" INTO sql_5 
FROM
   dual;
dbms_output.Put_line(sql_5);
query_str := 'SELECT ' || sql_5 || ' FROM ' || table_name2;
OPEN c FOR query_str;
LOOP FETCH c INTO str_1,
str_2,
str_3,
str_4,
str_5;
EXIT 
WHEN
   c % NOTFOUND;
dbms_output.Put_line(str_1 || ' ' || str_2 || ' ' || str_3 || ' ' || str_4 || ' ' || str_5);
END
LOOP;
CLOSE c;
EXCEPTION 
WHEN
   OTHERS 
THEN
   dbms_output.Put_line('Error, nincs ilyen tabla');
END
;
PROCEDURE directormovies (director_name IN CHAR) AS CURSOR cur IS 
SELECT
   title,
   year 
FROM
   movies 
   inner join
      directors 
      ON movies.director = directors.id 
WHERE
   directors.name LIKE director_name || '%';
cv cur % ROWTYPE;
BEGIN
   OPEN cur;
FETCH cur INTO cv;
IF cur % NOTFOUND 
THEN
   dbms_output.Put_line('Nincs ' || director_name || ' rendezoju film!');
ELSE
   dbms_output.put_line('Cim: ' || cv.title || ' Ev: ' || cv.year);
LOOP FETCH cur INTO cv;
EXIT 
WHEN
   cur % NOTFOUND;
dbms_output.put_line('Cim: ' || cv.title || ' Ev: ' || cv.year);
END
LOOP;
END
IF;
CLOSE cur;
EXCEPTION 
WHEN
   OTHERS 
THEN
   dbms_output.Put_line('Error, nincs ilyen rendezo');
END
;
PROCEDURE movie_count_with_higher_rating (rating_be IN NUMBER) AS CURSOR cur IS 
SELECT
   count(*) AS db 
FROM
   movies 
WHERE
   rating > rating_be;
cv cur % ROWTYPE;
BEGIN
   OPEN cur;
FETCH cur INTO cv;
IF (cv.db = 0) 
THEN
   dbms_output.Put_line('Nincs olyan film ami ' || rating_be || ' pontal tobbet kapott volna!');
ELSE
   dbms_output.Put_line('Ennel magasabb ratingu filmek szama: ' || cv.db);
END
IF;
CLOSE cur;
EXCEPTION 
WHEN
   OTHERS 
THEN
   dbms_output.Put_line('Error');
END
;
END
;
--Például
BEGIN
   queries.directormovies('Frank Darabont');
END
;

"
Y1cMzzeV,Untitled,Derga,C++,Sunday 21st of May 2023 10:12:43 AM CDT,"//Билет 7
//Перегрузка операторов <<, >>, []
/*
Язык C++ имеет широкие возможности для перегрузки большинства операторов. 
Перегрузка оператора означает использование оператора для оперирования определенными объектами классов.  
При перегрузке оператора в классе вызывается соответствующая операторная функция (operator function), 
которая выполняет действия, которые касаются данного класса.
*/

// Класс, который реализует точку на координатной плоскости
// класс содержит две операторные функции

#include <iostream>

using namespace std;

class Point {
private:
    int x, y; // координаты точки

public:
    // конструкторы класса
    Point() {
        x = 0;
        y = 0;
    }

    Point(int nx, int ny) {
        x = nx;
        y = ny;
    }

    // методы доступа к членам класса
    int GetX(void) const { return x; }
    int GetY(void) const { return y; }
    void SetX(int new_x) { x = new_x; }
    void SetY(int new_y) { y = new_y; }

    // перегруженный бинарный оператор '+'
    Point operator+(const Point& pt) {
        // p - временный объект, который создается с помощью конструктора без параметров
        Point p;
        p.x = x + pt.x;
        p.y = y + pt.y;
        return p;
    }

    // перегруженный унарный оператор '-'
    Point operator-(const Point& pt) {
        Point p;
        p.x = x - pt.x;
        p.y = y - pt.y;
        return p;
    }

    friend istream& operator>>(istream&, Point&);

    int& operator[](int index) {
        if (index == 0) {
            return x;
        }
        else {
            return y;
        }
    }
};

istream& operator>>(istream& in, Point& p) {
    int x, y;
    in >> x >> y;
    p.SetX(x);
    p.SetY(y);
    return in;
}

ostream& operator<<(ostream& out, const Point& p) {
    out << p.GetX() << ' ' << p.GetY();
    return out;
}

int main() {
    // объявление переменных - объектов класса CPoint
    Point P1(3, 4);
    Point P2(5, 7);
   
    // 1. Использование перегруженного бинарного оператора '+'
    Point P3 = P1 + P2; // объект P1 вызывает операторную функцию
    //std::cout << P3.GetX() << ' ' << P3.GetY() << '\n';
    cout << P3 << '\n';
    
    // 2. Использование перегруженного унарного оператора '-'
    Point P4 = P1 - P2;
    //std::cout << P3.GetX() << ' ' << P3.GetY() << '\n';
    cout << P4 << '\n';

    Point P5;
    cin >> P5;
    cout << P5 << '\n';

    P5[0] = 21;
    P5[1] = 42;
    int p5_x = P5[0];
    int p5_y = P5[1];
    cout << P5 << '\n' << p5_x << ' ' << p5_y;

    return 0;
}"
M1VdeCAh,Untitled,Derga,C++,Sunday 21st of May 2023 09:56:57 AM CDT,"//Билет 6
//операторная функция, перегрузка операторов

/*
Язык C++ имеет широкие возможности для перегрузки большинства операторов. 
Перегрузка оператора означает использование оператора для оперирования определенными объектами классов.  
При перегрузке оператора в классе вызывается соответствующая операторная функция (operator function), 
которая выполняет действия, которые касаются данного класса.
*/

// Класс, который реализует точку на координатной плоскости
// класс содержит две операторные функции
class Point {
private:
    int x, y; // координаты точки

public:
    // конструкторы класса
    Point() {
        x = 0;
        y = 0;
    }

    Point(int nx, int ny) {
        x = nx;
        y = ny;
    }

    // методы доступа к членам класса
    int GetX(void) const { return x; }
    int GetY(void) const { return y; }
    void SetX(int new_x) { x = new_x; }
    void Set(int new_y) { y = new_y; }

    // перегруженный бинарный оператор '+'
    Point operator+(const Point& pt) {
        // p - временный объект, который создается с помощью конструктора без параметров
        Point p;
        p.x = x + pt.x;
        p.y = y + pt.y;
        return p;
    }

    // перегруженный унарный оператор '-'
    Point operator-(const Point& pt) {
        Point p;
        p.x = x - pt.x;
        p.y = y - pt.y;
        return p;
    }
};

#include <iostream>

int main() {
    // объявление переменных - объектов класса CPoint
    Point P1(3, 4);
    Point P2(5, 7);
    Point P3;
    int x, y; // дополнительные переменные

    // 1. Использование перегруженного бинарного оператора '+'
    P3 = P1 + P2; // объект P1 вызывает операторную функцию
    std::cout << P3.GetX() << ' ' << P3.GetY() << '\n';
    
    // 2. Использование перегруженного унарного оператора '-'
    P3 = P1 - P2;
    std::cout << P3.GetX() << ' ' << P3.GetY() << '\n';

    return 0;
}"
MiEbKkXA,Untitled,Derga,C++,Sunday 21st of May 2023 09:27:59 AM CDT,"//Билет 5
//Целочисленные константы класса

//Инициализация констант в классе. Примеры
class MyClass1 {
    const int val = 50;
    //const int val;
public:
    MyClass1() = default;
    /*
    MyClass(int new_val) {
        val = new_val; // ошибка. Поле val в этот момент уже создано и 
                       //так как оно константное - его нельзя менять
    }
    */

    //тут мы инициализируем val в момент создания, через лист инициализации, ""налету""
    MyClass1(int new_val) : val(new_val) {} 

    /*
     Поэтому либо используйте статическую константу, которая сто процентов не изменится, 
     либо используйте константу + динамический массив.
    */
    int GetVal() const {
        return val;
    }

    //так как val можно изменить - можно создать динамический массив, а статический нельзя
    int* pointer_i = new int[val]; //можно
    //нельзя
    //int a[val];
};

class MyClass2 {
    static const int val = 50;
public:
    //так сделать уже нельзя
    //MyClass2(int new_val) : val(new_val) {}

    int GetVal() const {
        return val;
    }

    //так как val - невозможно изменить - можно создать и динамический и статический массивы размера val
    int* pointer_i = new int[val];
    int a[val];
};

#include <iostream>

int main() {
    //Тут пример, как можно в констаное поле класса записать значение.
    MyClass1 a;
    std::cout << a.GetVal() << '\n';

    MyClass1 b(100);
    std::cout << b.GetVal() << '\n';

    //Тут пример класса, константное поле котороего переписать не получится

}"
BAXX8Eqz,Upskill Password,Paceusa,JavaScript,Sunday 21st of May 2023 09:25:38 AM CDT,21mei2023
MfacZpEq,邀您一起看：「精品美女吧.dy」,xiaomianao666,JavaScript,Sunday 21st of May 2023 09:19:27 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥「精品美女吧.dy」@@
DyaHzC2X,QueueSpinLock,ludaludaed,C++,Sunday 21st of May 2023 09:19:20 AM CDT,"//
// Created by ludaludaed on 08.05.2023.
//

#ifndef ALLIGATOR_SPIN_LOCK_H
#define ALLIGATOR_SPIN_LOCK_H

#include <thread>

namespace lu {
    class QueueSpinLock {
        struct Node {
            Node *next;
            bool value;

            Node() : next(nullptr), value(false) {}
        };

        friend class QueueSpinLockGuard;

    private:
        void lock(Node *node) {
            Node *prev_tail = tail_.exchange(node);
            if (prev_tail != nullptr) {
                prev_tail->next = node;
                while (!node->value) {
                    std::this_thread::yield();
                }
            }
        }

    public:
        QueueSpinLock() : tail_(nullptr) {}

    private:
        std::atomic<Node *> tail_;
    };

    class QueueSpinLockGuard {
    public:
        explicit QueueSpinLockGuard(QueueSpinLock &lock) : lock_(lock) {
            lock_.lock(&node_);
        }

        ~QueueSpinLockGuard() {
            if (node_.next != nullptr) {
                node_.next->value = true;
            }
        }

    private:
        QueueSpinLock &lock_;
        QueueSpinLock::Node node_;
    };
}

#endif //ALLIGATOR_SPIN_LOCK_H
"
YGapJFUh,lb3,maxim_shlyahtin,Python,Sunday 21st of May 2023 09:16:06 AM CDT,"from sklearn.datasets import load_iris
from sklearn.cluster import MiniBatchKMeans


def load():
    X, y = load_iris(return_X_y=True)
    return X[:100]


def train_and_predict(X, n_clusters=1, random_state=42):
    model = MiniBatchKMeans(n_clusters=n_clusters, random_state=random_state)
    model.fit(X)
    preds = model.predict(X)
    return preds


def optimal_n_clusters(X, с_clusters=1, random_state=42):
    model = MiniBatchKMeans(n_clusters=с_clusters, random_state=random_state)
    model.fit(X)
    return model.inertia_
"
Uc7FHP5n,Untitled,Derga,C++,Sunday 21st of May 2023 09:01:17 AM CDT,"//Билет 6
//Дружетвенные функции
/*
Дружественные функции - это функции, которые не являются членами класса, 
однако имеют доступ к его закрытым членам - переменным и функциям, которые имеют спецификатор private.
Для определения дружественных функций используется ключевое слово friend.
*/

#include <iostream>

class Auto {
    friend void drive(const Auto&);
    friend void setPrice(Auto&, unsigned);
public:
    Auto(std::string autoName, unsigned autoPrice) {
        name = autoName;
        price = autoPrice;
    }

    void print() {
        std::cout << name << "" : "" << price << std::endl;
    }

private:
    std::string name;   // название автомобиля
    unsigned price;  // цена автомобиля
};

void drive(const Auto& car) {
    std::cout << car.name << "" is driven"" << std::endl;
}

void setPrice(Auto& car, unsigned price) {
    car.price = price;
}

int main() {
    Auto tesla(""Tesla"", 5000);
    tesla.print();
    drive(tesla);
    setPrice(tesla, 4000);
    tesla.print();
}"
rXRAr0XH,Untitled,Arexils,YAML,Sunday 21st of May 2023 08:53:59 AM CDT,"publish:
  stage: publish
  needs: [ pytest ]
  image: docker:latest
  only:
    - master
  services:
    - docker:dind
  script:
    - docker build -t $TAG_LATEST .
    - docker login -u gitlab-ci-token --password-stdin $CI_BUILD_TOKEN $TAG_LATEST
    - printf ""${ENV}"" > .env
    - docker push $TAG_LATEST
"
nkvT7EHm,E - Crested Ibis vs Monster,Patrickmeme,C++,Sunday 21st of May 2023 08:45:27 AM CDT,"#include <iostream>
using namespace std;
 
unsigned long long INF=999999999999999999;
 
unsigned long long v[20001];
unsigned long long a[1001],b[1001];
 
int main()
{
    unsigned long long h,n,i,j,cnt,min1;
    cin>>h>>n;
    for(i=1;i<=n;i++){
        cin>>a[i]>>b[i];
    }
    for(j=0;j<=2*h;j++){
        v[j]=INF;
    }
    v[0]=0;
    for(i=1;i<=n;i++){
        for(j=0;j<=h;j++){
            cnt=0;
            if(v[j]!=INF){
                while(j+cnt*a[i]<h){
                    v[j+cnt*a[i]]=min(v[j+cnt*a[i]],v[j]+cnt*b[i]);
                    cnt++;
                }
                v[j+cnt*a[i]]=min(v[j+cnt*a[i]],v[j]+cnt*b[i]);
            }
 
        }
    }
    min1=INF;
    for(i=h;i<=2*h;i++){
        min1=min(min1,v[i]);
    }
    cout<<min1;
    return 0;
}"
SAscErEZ,Cuburi3,Patrickmeme,C++,Sunday 21st of May 2023 08:43:54 AM CDT,"#include <fstream>
#include <algorithm>
using namespace std;

ifstream cin(""cuburi3.in"");
ofstream cout(""cuburi3.out"");

struct cub{
    int lat,gre,dp,sum,vin,ind;
}v[10000];

int rasp[10000];

bool cmp(cub a,cub b){
    if(a.lat>b.lat)
        return 1;
    else if(b.lat<a.lat)
        return 0;
    else{
        if(a.gre>b.gre)
            return 1;
        else
            return 0;
    }
}

int main()
{
    int n,i,j,max1,nr,ci,l;
    cin>>n;
    for(i=0;i<n;i++){
        cin>>v[i].lat>>v[i].gre;
        v[i].ind=i+1;
    }
    sort(v,v+n,cmp);
    v[0].dp=1;v[0].sum=v[0].lat;v[0].vin=-1;
    for(i=1;i<n;i++){
        max1=v[i].lat;nr=1;
        for(j=i-1;j>=0;j--){
            if(v[j].gre>=v[i].gre && v[j].sum>max1){
                max1=v[j].sum+v[i].lat;
                nr=v[j].dp+1;
                v[i].vin=j;
            }
        }
        if(max1==v[i].lat)
            v[i].vin=-1;
        v[i].sum=max1;
        v[i].dp=nr;
    }
    max1=ci=0;
    for(i=n-1;i>=0;i--){
        if(v[i].sum>max1){
            max1=v[i].sum;
            ci=i;
        }
    }
    cout<<v[ci].dp<<"" ""<<max1<<""\n"";
    l=ci;
    i=0;
    while(l!=-1){
        rasp[i]=v[l].ind;
        i++;
        l=v[l].vin;
    }
    i--;
    while(i>=0){
        cout<<rasp[i]<<""\n"";
        i--;
    }

    return 0;
}"
NjEtQzNt,Carte2- 88 p,Patrickmeme,C++,Sunday 21st of May 2023 08:41:19 AM CDT,"#include <fstream>
#include <string>
using namespace std;

ifstream cin(""carte.in"");
ofstream cout(""carte.out"");

#define MAXSUM 1050000

int conv[128],frv[MAXSUM+1];

void atribuire(){
    string s=""0123456789abcdefghij"";
    int put=1,i;
    for(i=0;i<s.size();i++){
        conv[(int)s[i]]=put;
        put*=2;
    }
}
string v[100000];

bool ver(int i,int n,int sum){
    int cnt,j;
    cnt=0;
    if(v[i].size()==v[n-1].size()){
        cnt=0;
        for(j=0;j<v[i].size();j++){
            if((sum/conv[(int)v[i][j]])%2==0)
                cnt++;

        }
    }
    if(cnt==1)
        return 1;
    else
        return 0;
}

int main()
{
    int cer,n,i,j,max1,cnt,sum;
    string s;
    cin>>cer>>n;
    atribuire();
    if(cer==1){
        for(i=0;i<n;i++){
            cin>>s;
            sum=0;
            for(j=0;j<s.size();j++){
                sum+=conv[s[j]];
            }
            frv[sum]++;
        }
        max1=cnt=0;
        for(i=1;i<=MAXSUM;i++){
            if(frv[i]>max1){
                max1=frv[i];
                cnt=1;
            }else if(frv[i]==max1)
                cnt++;
        }
        cout<<max1<<""\n""<<cnt;
    }else{
        for(i=0;i<n;i++){
            cin>>v[i];
        }
        sum=cnt=0;
        for(j=0;j<v[n-1].size();j++){
            sum+=conv[(int)v[n-1][j]];
        }
        for(i=0;i<n-1;i++){
            cnt+=ver(i,n,sum);
        }
        cout<<cnt;
    }
    return 0;
}"
5yek1BNC,Untitled,Derga,C++,Sunday 21st of May 2023 08:31:53 AM CDT,"/*
Билет 5
  статические поля и методы класса.
  Если у нас в классе есть статическая переменная - она будет общей для всех объектов класса.
  Например с помощью статической переменной можно вести подсчет числа созданных объектов нашего класса.
*/
#include <iostream>

class Point {
public:
    Point() {
        points_counter++;
    }
    ~Point() {
        points_counter--;
    }
    double x, y;
    static int points_counter;

    static int GetPointsCount() {
        return points_counter;
    }

    
    /*
    В статическом методе класса нельзя обращаться к не статическим полям и к объекут this
    static void DoSomthing(){
    this->x = 10;
    y = 11; //тут не понятно к какому объекту класса Point мы обращаемся.
    }
    */

    static void ChangePoint(Point& point, int x, int y) {
        //тут понятно к какому объъекту класса point мы обращаемся, мы получили этот объект в качестве аргумета
        point.x = x;
        point.y = y;
    }

};

int Point::points_counter = 0;

int main(){
    Point a;
    std::cout << Point::points_counter << '\n';
    Point b;
    std::cout << Point::points_counter << '\n';
    Point c;
    std::cout << Point::points_counter << '\n';

    /*
    Так как наша переменная points_counter лежит в public области видимости - мы можем обратиться к ней напрямую и 
    поменять значение. Так мы испортим ее смысл (поэтому ее следовало бы держать в области видимости private), но 
    проиллюстрируем, что такое static переменная.
    запишем в нее другое значение в объекте с именем - a, 
    затем выведем значение этого поля в других объектах класса Point
    */
    a.points_counter = 10;
    std::cout << b.points_counter << ' ' << c.points_counter << '\n';

    /*
    Статичесие методы - методы, это например методы, 
    которые работают со статическими переменными класса или 
    вызывают внутри себя другие статические методы класса. 
    Например метод GetPointsCount() - работает со статической переменной класса Point
    Можновызывать его нессколькими способами
    */
    std::cout << Point::GetPointsCount() << '\n';
    std::cout << a.GetPointsCount() << '\n';

    //ниже два способа работы со статическим методом. Один через объект класса, другой через namespace класса
    std::cout << a.x << ' ' << a.y << '\n';
    a.ChangePoint(a, 0, 0);
    std::cout << a.x << ' ' << a.y << '\n';
    Point::ChangePoint(a, 1, 1);
    std::cout << a.x << ' ' << a.y << '\n';

    return 0;
}"
6UhX5DbZ,Starter wisielca,PrezesSmoku,Python,Sunday 21st of May 2023 08:29:08 AM CDT,"rysunki_wisielca = ["""",'''
  +---+
  |   |
      |
      |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========''']"
ku5fvijt,Wisielec,PrezesSmoku,Python,Sunday 21st of May 2023 08:28:34 AM CDT,"rysunki_wisielca = ["""",'''
  +---+
  |   |
      |
      |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========''']

#print(rysunki_wisielca[2])
import random
lista_hasel = [""programista"", ""obóz"", ""zakopane"",""język programowania""]

#losowanie hasła z listy
wylosowany_numer_hasla = random.randint(0, len(lista_hasel)-1)
print(wylosowany_numer_hasla)

wylosowane_haslo = lista_hasel[wylosowany_numer_hasla]
print(wylosowane_haslo)

#Wyświetlanie zakrytego hasła
liczba_nie_liter = 0
haslo_do_wyswietlenia = []
for litera in wylosowane_haslo:
    if litera.isalpha():
        haslo_do_wyswietlenia.append(""_"")
    else:
        haslo_do_wyswietlenia.append(litera)
        liczba_nie_liter += 1

#print(''.join(haslo_do_wyswietlenia))

#odgadywanie hasła
liczba_pomylek = 0
liczba_odslonietych_liter = 0
uzyte_litery = []

while liczba_odslonietych_liter < len(wylosowane_haslo)-liczba_nie_liter:
    print(''.join(haslo_do_wyswietlenia))
    print(rysunki_wisielca[liczba_pomylek])
    print(f'Użyte litery: {"","".join(uzyte_litery)}')
    wpisana_litera = input(""podaj literę: "")
    uzyte_litery.append(wpisana_litera)
    if wpisana_litera in wylosowane_haslo and not wpisana_litera in haslo_do_wyswietlenia:
        for i in range(len(wylosowane_haslo)):
            if wpisana_litera == wylosowane_haslo[i]:
                haslo_do_wyswietlenia[i] = wpisana_litera
                liczba_odslonietych_liter += 1
    else:
        liczba_pomylek+=1
        if liczba_pomylek == 7:
            print(rysunki_wisielca[liczba_pomylek])
            break

if(liczba_pomylek < 7):
    print(f""Brawo wygrałeś!!! Hasłem do zgadnięcia było '{wylosowane_haslo}'"")
else:
    print(f""Niestety przegrałeś!!! Hasłem do zgadnięcia było '{wylosowane_haslo}'"")"
qKi0Df8g,邀您一起看：我的书架-,xiaomianao666,JavaScript,Sunday 21st of May 2023 08:13:30 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥我的书架-@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS+nei1luaWh+S7tlwiLFwicGF0aFwiOlwiY29uZmlnXCIsXCJydWxlXCI6XCJqczpcXG5sZXQgbWV0aG9kO1xcbmxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxuICAgIGV2YWwoXFxcImxldCBKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFwi5L6d6LWWXFxcIl07XFxufVxcbiQuZXhwb3J0cy5tZXRob2QgPSBtZXRob2Q7XFxuJC5leHBvcnRzLnZlcnNpb24gPSAxMDtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaOpeWPo+e8k+WtmFwiLFwicGF0aFwiOlwiamlla291XCIsXCJydWxlXCI6XCJqczpcXG5sZXQgbWV0aG9kO1xcbmxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxuICAgIGV2YWwoXFxcImxldCBKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFwi5L6d6LWWXFxcIl0ucmVwbGFjZShcXFwiLmpzXFxcIixcXFwiMi5qc1xcXCIpO1xcbn1cXG5yZXF1aXJlKG1ldGhvZCk7XFxuXFxuJC5leHBvcnRzID0ge1xcbiAgICDkuIDnuqc6IOS4gOe6pyxcXG4gICAg5LqM57qnOiDkuoznuqcsXFxuICAgIOWFrOWFsTog5YWs5YWxLFxcbiAgICDlsZ7mgKc6IOWxnuaAp1xcbn1cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS6keWPo+S7pOWvvOWFpVwiLFwicGF0aFwiOlwiaW1wb3J0XCIsXCJydWxlXCI6XCJqczpcXG5mdW5jdGlvbiBjbG91ZGltcG9ydCgpIHtcXG4gICAgbGV0IHJlbW90ZWZpbGU7XFxuICAgIGxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG4gICAgaWYgKGZpbGVFeGlzdChjZmdmaWxlKSkge1xcbiAgICAgICAgZXZhbChcXFwibGV0IEp1Y29uZmlnPVxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgICAgICByZW1vdGVmaWxlID0gSnVjb25maWdbXFxcIuS+nei1llxcXCJdLm1hdGNoKC9odHRwKHMpPzpcXFxcL1xcXFwvLipcXFxcLy8pWzBdICsgJ1NyY0p1U2V0LmpzJztcXG4gICAgfVxcbiAgICBpZihyZW1vdGVmaWxlKXtcXG4gICAgICAgIHJlcXVpcmUocmVtb3RlZmlsZSk7XFxuICAgICAgICByZXR1cm4gSllpbXBvcnQoaW5wdXQpO1xcbiAgICB9ZWxzZXtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/msqHmnInnlKjov4fogZrpmIXiiJrlsI/nqIvluo/vvJ9cXFwiO1xcbiAgICB9XFxufVxcbiQuZXhwb3J0cyA9IGNsb3VkaW1wb3J0KCk7XCJ9XSxcInBhcmFtc1wiOlwie1xcXCJjbHNcXFwiOlxcXCJjYXNlbGlzdFxcXCIsXFxcImltZ1xcXCI6XFxcImh0dHBzOi8vbGFubWVpZ3VvamlhbmcuY29tL3R1Ymlhby9tb3JlLzEyOS5wbmdcXFwiLFxcXCJsaW5lVmlzaWJsZVxcXCI6ZmFsc2V9XCIsXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIuiBmumYheKImlwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vZW1wdHkjaW1tZXJzaXZlVGhlbWUjI2F1dG9DYWNoZSM7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjDvvJvvvJsgV2luNjTvvJvvvJsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA1LjAuMC4wIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczooXFxuKCkgPT4ge1xcbiAgICByZXF1aXJlKGNvbmZpZy7kvp3otZYpO1xcbiAgICBlcmppKCk7XFxuICAgIHB1dE15VmFyKFxcXCJTcmNCb29rQ2FzZVxcXCIsIFxcXCIxXFxcIik7XFxufVxcbikoKVwiLFwiZ3JvdXBcIjpcIumYheivu1wiLFwidWFcIjpcInBjXCIsXCJwcmVSdWxlXCI6XCJpZiAoIWNvbmZpZy7kvp3otZYpIHtcXG4gICAgLy/ov5znqIvkvp3otZbntKLlvJXmlofku7bku6PnkIblnLDlnYDliJfooahcXG4gICAgbGV0IHJlcXVpcmVsaXN0ID0gWydodHRwczovL3Jhdy5pcWlxLmlvLycsICdodHRwczovL2docHJveHkubmV0L2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8nLCAnaHR0cHM6Ly9naHByb3h5LmNvbS9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vJywgJ2h0dHBzOi8vY2RuLnN0YXRpY2FseS5jb20vZ2gvJywgJ2h0dHBzOi8vZ2l0aHViLmpldm9ucy52aXAvaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLyddXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxdWlyZWxpc3QubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIHRyeSB7IC8v6L+c56iL5L6d6LWW57Si5byVXFxuICAgICAgICAgICAgcmVxdWlyZShyZXF1aXJlbGlzdFtpXSArICdzcmM0ODU5Nzk2Mi9oay9KdS9yZXF1aXJlLmpzJyk7XFxuICAgICAgICAgICAgaWYgKHJlbHlmaWxlKSB7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coZS5tZXNzYWdlKTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBpbml0Q29uZmlnKHtcXG4gICAgICAgIOS+nei1ljogcmVseWZpbGVcXG4gICAgfSk7XFxuICAgIGxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG4gICAgaWYgKGZpbGVFeGlzdChjZmdmaWxlKSkge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICBldmFsKFxcXCJsZXQgSnVjb25maWc9XFxcIiArIGZldGNoKGNmZ2ZpbGUpICsgXFxcIjtcXFwiKTtcXG4gICAgICAgICAgICBKdWNvbmZpZ1tcXFwi5L6d6LWWXFxcIl0gPSByZWx5ZmlsZS5tYXRjaCgvaHR0cChzKT86XFxcXC9cXFxcLy4qXFxcXC8vKVswXSArICdTcmNKdU1ldGhvZC5qcyc7XFxuICAgICAgICAgICAgd3JpdGVGaWxlKGNmZ2ZpbGUsIEpTT04uc3RyaW5naWZ5KEp1Y29uZmlnKSk7XFxuICAgICAgICB9IGNhdGNoIChlKSB7fVxcbiAgICB9XFxufVxcbi8vYnku5biF4oiaYOS6uuaJjSDogZrmqKHmnb/vvIFcIixcInBhZ2VzXCI6XCJbe1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5L6d6LWW5paH5Lu2XFxcIixcXFwicGF0aFxcXCI6XFxcImNvbmZpZ1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCBtZXRob2Q7XFxcXG5sZXQgY2ZnZmlsZSA9IFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9TcmMvSnUvY29uZmlnLmpzb25cXFxcXFxcIjtcXFxcbmlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXFxcbiAgICBldmFsKFxcXFxcXFwibGV0IEp1Y29uZmlnPVxcXFxcXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFxcXFxcIjtcXFxcXFxcIik7XFxcXG4gICAgbWV0aG9kID0gSnVjb25maWdbXFxcXFxcXCLkvp3otZZcXFxcXFxcIl07XFxcXG59XFxcXG4kLmV4cG9ydHMubWV0aG9kID0gbWV0aG9kO1xcXFxuJC5leHBvcnRzLnZlcnNpb24gPSAxMDtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLmjqXlj6PnvJPlrZhcXFwiLFxcXCJwYXRoXFxcIjpcXFwiamlla291XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxubGV0IG1ldGhvZDtcXFxcbmxldCBjZmdmaWxlID0gXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL1NyYy9KdS9jb25maWcuanNvblxcXFxcXFwiO1xcXFxuaWYgKGZpbGVFeGlzdChjZmdmaWxlKSkge1xcXFxuICAgIGV2YWwoXFxcXFxcXCJsZXQgSnVjb25maWc9XFxcXFxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXFxcXFwiO1xcXFxcXFwiKTtcXFxcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFxcXFxcIuS+nei1llxcXFxcXFwiXS5yZXBsYWNlKFxcXFxcXFwiLmpzXFxcXFxcXCIsXFxcXFxcXCIyLmpzXFxcXFxcXCIpO1xcXFxufVxcXFxucmVxdWlyZShtZXRob2QpO1xcXFxuXFxcXG4kLmV4cG9ydHMgPSB7XFxcXG4gICAg5LiA57qnOiDkuIDnuqcsXFxcXG4gICAg5LqM57qnOiDkuoznuqcsXFxcXG4gICAg5YWs5YWxOiDlhazlhbEsXFxcXG4gICAg5bGe5oCnOiDlsZ7mgKdcXFxcbn1cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLkupHlj6Pku6Tlr7zlhaVcXFwiLFxcXCJwYXRoXFxcIjpcXFwiaW1wb3J0XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuZnVuY3Rpb24gY2xvdWRpbXBvcnQoKSB7XFxcXG4gICAgbGV0IHJlbW90ZWZpbGU7XFxcXG4gICAgbGV0IGNmZ2ZpbGUgPSBcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcXFxcXCI7XFxcXG4gICAgaWYgKGZpbGVFeGlzdChjZmdmaWxlKSkge1xcXFxuICAgICAgICBldmFsKFxcXFxcXFwibGV0IEp1Y29uZmlnPVxcXFxcXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFxcXFxcIjtcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlbW90ZWZpbGUgPSBKdWNvbmZpZ1tcXFxcXFxcIuS+nei1llxcXFxcXFwiXS5tYXRjaCgvaHR0cChzKT86XFxcXFxcXFwvXFxcXFxcXFwvLipcXFxcXFxcXC8vKVswXSArICdTcmNKdVNldC5qcyc7XFxcXG4gICAgfVxcXFxuICAgIGlmKHJlbW90ZWZpbGUpe1xcXFxuICAgICAgICByZXF1aXJlKHJlbW90ZWZpbGUpO1xcXFxuICAgICAgICByZXR1cm4gSllpbXBvcnQoaW5wdXQpO1xcXFxuICAgIH1lbHNle1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ayoeacieeUqOi/h+iBmumYheKImuWwj+eoi+W6j++8n1xcXFxcXFwiO1xcXFxuICAgIH1cXFxcbn1cXFxcbiQuZXhwb3J0cyA9IGNsb3VkaW1wb3J0KCk7XFxcIn1dXCJ9IiwicGljVXJsIjoiaHR0cHM6Ly9sYW5tZWlndW9qaWFuZy5jb20vdHViaWFvL21vcmUvMTI5LnBuZyIsInRpdGxlIjoi5oiR55qE5Lmm5p62LSJ9
ETNu2uFG,game_finish.py,DrAungWinHtut,Python,Sunday 21st of May 2023 08:10:34 AM CDT,"import random

coin = 0  # global variable,


def SaveFile():
    global coin
    game_file = open('gamedata.txt', 'w')  # w - write (override) , a - append
    game_file.write('\n'+str(coin))  # str - string - text
    game_file.close()


def LoadFile():
    global coin
    game_file = open('gamedata.txt', 'r')  # r - read only
    data = game_file.read().rstrip()
    coin = eval(data)
    game_file.close()
    Game()
# Program Start Here


def Menu():
    global coin
    coin = eval(input('how much coin?: '))
    while (1):
        print('0-Exit')
        print('1-Play Game')
        print('2-Save Game')
        print('3-Load saved Game')
        ans = input('please enter your choice: ')
        if ans == '0':
            exit()
        elif ans == '1':
            print('Playing Game now...')
            Game()
        elif ans == '2':
            print('Saving now....')
            SaveFile()
        elif ans == '3':
            print('Loading Game...')
            LoadFile()
        else:
            print('Wrong choice, only (0,1,2), please try again: ')


def Game():
    global coin
    print(f'\n\nYou have {coin} coins')
    bet = eval(input('how much coin to bet: '))

    if bet > coin:
        bet = coin
        print('you cannot bet more than you have')
        print(f'your bet become: {bet}')

    input('press ENTER to roll the dice for PLAYER: ')
    player = random.randint(1, 6)
    print(f'your number is : {player}')

    input('press ENTER to roll the dice for COMPUTER: ')
    computer = random.randint(1, 6)
    print(f'computer number is : {computer}')

    if computer > player:
        coin = coin - bet
        print('Computer wins')
        print(f'Your coin is: {coin}')
        if coin == 0:
            ans1 = input('you lost everything! want to buy more coin: y\\n: ')
            if ans1 == 'y':
                coin = eval(input('how much coin?: '))
            else:
                print('No money: No more game! Bye bye')
                exit()

    elif player > computer:
        coin = coin + bet
        print('Player wins')
        print(f'Your coin is: {coin}')

    else:
        print('Draw')
        print(f'Your coin is: {coin}')


# Program Start Here
Menu()
"
A1chLjQc,Untitled,Derga,C++,Sunday 21st of May 2023 07:48:42 AM CDT,"/*
Билет 5
  this

С помощью этого слова можно присваивать значения переменным внутри класса. Дальше пример
*/

class MyClass {
    int x;

    void foo() {
        x = 6;       //эти две строки делают одно и то же
        this->x = 5; 
    }

    void foo() const {
         x = 7; // тут ошибка, почему?
    }

    void foo(int x) {// тут совпадает имя аргумента функции - x и поля класса x. 
        this->x = x; // использование this-> позволяет устранить неоднозначность
    }

    MyClass& operator=(const MyClass& b) {
        x = b.x;
        return *this; // многе перегруженные операторы возвращают *this, например оператор копирующего присваивания
        //Тут мы находимся внутри объекта класса MyClass, инициализируем его поле x и затем
        //возвращаем разыменованный указатель на объект класса MyClass внутри которого мы находимся. 
    }
};"
AgZ5QM5e,Untitled,Derga,C++,Sunday 21st of May 2023 07:35:22 AM CDT,"/*
Билет 5
  Константные методы

Методом класса называют функцию из класса. 
Ниже класс Time - в нем хранится время - часы, минуты, секунды.
Константный метод не меняет состояние класса. Это добавляет удобства и безопасности в работе с классами.

Например - в классе Time есть константные методы GetHours() const, GetMinutes() const -
они не меняют оюъект класса, а только возвращают значения из соответствующих полей.

Также в классе есть метод AddSeconds(int s) - этот метод меняет состояние объекта класса, 
добавляет секунды в поле seconds. Так как этот метод меняет состояние - он не может быть константным 
и также не может работать с константными объектами класса.
*/

class Time {
private:
    int hours, minutes, seconds;

public:
    Time(int h, int m, int s) : hours(h), minutes(m), seconds(s) {}

    int GetHours() const {
        return hours;
    }
    int GetMinutes() const {
        return minutes;
    }
    int GetSeconds() const {
        return seconds;
    }

    void AddSeconds(int s) {
        seconds += s; //понятно, что секунд не может быть больше 60, 
                      //не настраиваем этот нюанс, так как разбираем тут другую тему - константность методов
    }
};

#include <iostream>

int main() {
    Time t(10, 8, 0);  // 10:08:00
    t.AddSeconds(40);  // 10:08:40

    // Константная ссылка: через псевдоним cref объект нельзя изменять
    const Time& cref = t;

    // Константную функцию из класса вызвать можно
    std::cout << cref.GetHours() << ""\n"";  // OK

    // Неконстантную функцию из класса нельзя вызвать у константной сущности
    cref.AddSeconds(20);  // ошибка компиляции
}"
2AsZb032,Untitled,JackOUT,Java,Sunday 21st of May 2023 07:34:12 AM CDT,"package games.coob.portals.model;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.bukkit.block.Block;
import org.mineacademy.fo.ReflectionUtil;

import java.lang.reflect.Constructor;

@RequiredArgsConstructor
public enum PortalType {

	TARGETED(Targeted.class),
	COSMIC(Cosmic.class),
	ROULETTE(Roulette.class);

	@Getter
	private final Class<? extends PortalData> instanceClass;

	protected <T extends PortalData> T instantiate(final String id, final Block block) {
		final Constructor<?> constructor = ReflectionUtil.getConstructor(this.instanceClass, String.class, Block.class, PortalType.class);

		return (T) ReflectionUtil.instantiate(constructor, id, block, this);
	}
}
"
MqL5i0k9,Untitled,JackOUT,Java,Sunday 21st of May 2023 07:33:39 AM CDT,"package games.coob.portals;

import games.coob.portals.model.PortalData;
import games.coob.portals.settings.Settings;
import games.coob.portals.task.CosmicTeleportTask;
import games.coob.portals.task.HologramTask;
import games.coob.portals.task.RouletteTeleportTask;
import games.coob.portals.task.TargetedTeleportTask;
import org.bukkit.Bukkit;
import org.mineacademy.fo.Common;
import org.mineacademy.fo.MinecraftVersion;
import org.mineacademy.fo.plugin.SimplePlugin;

/**
 * PluginTemplate is a simple template you can use every time you make
 * a new plugin. This will save you time because you no longer have to
 * recreate the same skeleton and features each time.
 * <p>
 * It uses Foundation for fast and efficient development process.
 */
public final class AnchorPortals extends SimplePlugin {

	/**
	 * Automatically perform login ONCE when the plugin starts.
	 */
	@Override
	protected void onPluginStart() {
		Common.setLogPrefix(""[AnchorPortals]"");

		if (!MinecraftVersion.atLeast(MinecraftVersion.V.v1_16)) {
			Common.log(""Disabled because the version you are using is too old."");
			this.setEnabled(false);
		}

		if (!Bukkit.getPluginManager().isPluginEnabled(""DecentHolograms"")) {
			Common.log(""Disabled do to DecentHolograms not being installed or not enabled."");
			this.setEnabled(false);
		}
	}

	@Override
	protected void onPluginStop() {
		//	Hologram.deleteAll();
	}

	@Override
	protected void onPluginReload() {
		//	Hologram.deleteAll();
	}

	/**
	 * Automatically perform login when the plugin starts and each time it is reloaded.
	 */
	@Override
	protected void onReloadablesStart() {
		// You can check for necessary plugins and disable loading if they are missing
		PortalData.loadPortals();

		Common.runTimer(Settings.PortalSection.CHARGE_SPEED, new HologramTask());
		Common.runTimer(5, new RouletteTeleportTask());
		Common.runTimer(5, new CosmicTeleportTask());
		Common.runTimer(5, new TargetedTeleportTask());

		for (final PortalData portalData : PortalData.getPortals()) {
			portalData.setChargePercentage(100);
		}

		// Uncomment to load variables
		// Variable.loadVariables();

		//
		// Add your own plugin parts to load automatically here
		// Please see @AutoRegister for parts you do not have to register manually
		//
	}

	/* ------------------------------------------------------------------------------- */
	/* Static */
	/* ------------------------------------------------------------------------------- */

	/**
	 * Return the instance of this plugin, which simply refers to a static
	 * field already created for you in SimplePlugin but casts it to your
	 * specific plugin instance for your convenience.
	 *
	 * @return
	 */
	public static AnchorPortals getInstance() {
		return (AnchorPortals) SimplePlugin.getInstance();
	}
}
"
AUL0Knac,DBManager.java,Vitrecan,Java,Sunday 21st of May 2023 07:25:17 AM CDT,"package uts.isd.model.dao;

import uts.isd.model.User;
import java.util.ArrayList;
import java.sql.*;
import java.util.List;
import uts.isd.model.Order;
import uts.isd.model.Staff;
import uts.isd.model.Product;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Richard Renshaw, Vincent Tran
 */

public class DBManager {

    private Statement st;
    private Connection conn;

    public DBManager(Connection conn) throws SQLException {
        st = conn.createStatement();
    }

    public User findUser(String email, String password) throws SQLException {
        String fetch = ""SELECT * FROM APP.Users WHERE Email = '"" + email + ""' AND Password = '"" + password + ""'"";
        ResultSet rs = st.executeQuery(fetch);

        while (rs.next()) {
            String userEmail = rs.getString(""Email"");
            String userPassword = rs.getString(""Password"");

            if (userEmail.equals(email) && userPassword.equals(password)) {
                String userFirstName = rs.getString(""FirstName"");
                String userLastName = rs.getString(""LastName"");
                String userMobile = rs.getString(""MobileNumber"");
                return new User(userFirstName, userLastName, userMobile, userEmail, userPassword);
            }
        }

        return null;
    }

    public void addUser(String firstName, String lastName, String mobileNumber, String email, String password) throws SQLException {
        String insertQuery = ""INSERT INTO APP.Users (FirstName, LastName, MobileNumber, Email, Password) ""
                + ""VALUES ('"" + firstName + ""', '"" + lastName + ""', "" + Integer.parseInt(mobileNumber) + "", '"" + email + ""', '"" + password + ""')"";

        st.executeUpdate(insertQuery);
    }

    public void updateUser(String firstName, String lastName, String mobileNumber, String email, String password) throws SQLException {
        st.executeUpdate(""UPDATE APP.Users SET FIRST_NAME='"" + firstName + ""', LAST_NAME='"" + lastName + ""', MOBILE_NUMBER='"" + mobileNumber + ""', PASSWORD='"" + password + ""' WHERE EMAIL='"" + email + ""'"");
    }

    public void deleteUser(String email) throws SQLException {
        st.executeUpdate(""DELETE FROM APP.Users WHERE EMAIL='"" + email + ""'"");
    }

    public ArrayList<User> fetchUsers() throws SQLException {
        String fetch = ""select * from APP.Users"";

        ResultSet rs = st.executeQuery(fetch);
        ArrayList<User> temp = new ArrayList();

        while (rs.next()) {
            String firstName = rs.getString(1);
            String lastName = rs.getString(2);
            String mobileNumber = rs.getString(3);
            String email = rs.getString(4);
            String password = rs.getString(5);
            temp.add(new User(firstName, lastName, mobileNumber, email, password));
        }
        return temp;
    }

    public boolean checkUser(String email, String password) throws SQLException {
        String fetch = ""select * from APP.Users WHERE EMAIL = '"" + email + ""' AND PASSWORD='"" + password + ""'"";
        ResultSet rs = st.executeQuery(fetch);

        while (rs.next()) {
            String userEmail = rs.getString(4);
            String userPassword = rs.getString(5);
            if (userEmail.equals(email) && userPassword.equals(password)) {
                return true;
            }
        }
        return false;
    }

    public Staff findStaff(String name, String position) throws SQLException {
        String fetch = ""select * from App.Staffs Where name = '"" + name + ""' and position='"" + position + ""'"";
        ResultSet rs = st.executeQuery(fetch);

        while (rs.next()) {
            String staffName = rs.getString(1);
            String staffPosition = rs.getString(3);

            if (staffName.equals(name) && staffPosition.equals(position)) {
                String staffEmail = rs.getString(2);
                String staffAddress = rs.getString(4);
                return new Staff(staffName, staffEmail, staffPosition, staffAddress);
            }
        }

        return null;
    }

    public void addStaff(String name, String email, String position, String address) throws SQLException {
        st.executeUpdate(""Insert into App.Staffs "" + ""values ( '"" + name + ""','"" + email + ""','"" + position + ""','"" + address + ""')"");
    }

    public void updateStaff(String name, String email, String position, String address) throws SQLException {
        st.executeUpdate(""Update App.Staffs Set staff_name= '"" + name + ""', email='"" + email + ""', staff_position='"" + position + ""', staff_addres='"" + address + ""'"");
    }

    public void deleteStaff(String name) throws SQLException {
        st.executeUpdate(""Delete From APP.Staffs Where staff_name='"" + name + ""'"");
    }

    public ArrayList<Staff> fetchStaffs() throws SQLException {
        String fetch = ""select * from APP.Staffs"";

        ResultSet rs = st.executeQuery(fetch);
        ArrayList<Staff> temp = new ArrayList();

        while (rs.next()) {
            String name = rs.getString(1);
            String email = rs.getString(2);
            String position = rs.getString(3);
            String address = rs.getString(4);
            temp.add(new Staff(name, email, position, address));
        }
        return temp;
    }

    public void addProduct(Product product) throws SQLException {
        String query = ""INSERT INTO APP.PRODUCTS (productID, supplierEmail, productName, productType, productPrice, productStock) ""
                + ""VALUES ("" + product.getProductID() + "", '"" + product.getSupplierEmail() + ""', '"" + product.getProductName() + ""', '"" + product.getProductType() + ""', "" + product.getProductPrice() + "", "" + product.getProductStock() + "")"";
        st.executeUpdate(query);
    }
    
    public List<Order> getOrders() throws SQLException {
        String sql = ""SELECT * FROM APP.ORDERS"";
        PreparedStatement ps = st.getConnection().prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        List<Order> orders = new ArrayList<>();
        while (rs.next()) {
            int orderNumber = rs.getInt(""ORDERID"");
            String device = rs.getString(""DEVICE"");
            int quantity = rs.getInt(""ORDERAMOUNT"");
            java.util.Date date = new java.util.Date(rs.getDate(""DATE"").getTime());
            orders.add(new Order(orderNumber, device, quantity, new java.sql.Date(date.getTime())));
        }
        return orders;
    }
    
    public void createOrder(Order order) throws SQLException {
        String checkSql = ""SELECT ORDERAMOUNT FROM APP.ORDERS WHERE DEVICE = ?"";
        PreparedStatement checkPs = st.getConnection().prepareStatement(checkSql);
        checkPs.setString(1, order.getDevice());
        ResultSet rs = checkPs.executeQuery();
        if (rs.next()) {
            int stock = rs.getInt(""ORDERAMOUNT"");
            if (stock < order.getQuantity()) {
                throw new SQLException(""Not enough stock for device: "" + order.getDevice());
            }
        } else {
            throw new SQLException(""Device not found: "" + order.getDevice());
        }

        String sql = ""INSERT INTO APP.ORDERS (DEVICE, ORDERAMOUNT, DATE) VALUES (?, ?, ?)"";
        PreparedStatement ps = st.getConnection().prepareStatement(sql);
        ps.setString(1, order.getDevice());
        ps.setInt(2, order.getQuantity());
        ps.setDate(3, new java.sql.Date(order.getDate().getTime()));
        ps.executeUpdate();

        sql = ""UPDATE APP.ORDERS SET ORDERAMOUNT = ORDERAMOUNT - ? WHERE DEVICE = ?"";
        ps = st.getConnection().prepareStatement(sql);
        ps.setInt(1, order.getQuantity());
        ps.setString(2, order.getDevice());
        ps.executeUpdate();
    }

    public void updateOrder(Order order) throws SQLException {
        String sql = ""UPDATE APP.ORDERS SET DEVICE=?, ORDERAMOUNT=?, DATE=? WHERE ORDERID=?"";
        PreparedStatement ps = st.getConnection().prepareStatement(sql);
        ps.setString(1, order.getDevice());
        ps.setInt(2, order.getQuantity());
        ps.setDate(3, new java.sql.Date(order.getDate().getTime()));
        ps.setInt(4, order.getOrderNumber());
        ps.executeUpdate();
    }
    
    public void cancelOrder(int orderNumber) throws SQLException {
        String sql = ""UPDATE APP.ORDERS SET ORDERSTATUS='Cancelled' WHERE ORDERID=?"";
        PreparedStatement ps = st.getConnection().prepareStatement(sql);
        ps.setInt(1, orderNumber);
        ps.executeUpdate();

        sql = ""SELECT DEVICE, ORDERAMOUNT FROM APP.ORDERS WHERE ORDERID=?"";
        ps = st.getConnection().prepareStatement(sql);
        ps.setInt(1, orderNumber);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            String device = rs.getString(""DEVICE"");
            int quantity = rs.getInt(""ORDERAMOUNT"");

            sql = ""UPDATE APP.ORDERS SET ORDERAMOUNT = ORDERAMOUNT + ? WHERE DEVICE = ?"";
            ps = st.getConnection().prepareStatement(sql);
            ps.setInt(1, quantity);
            ps.setString(2, device);
            ps.executeUpdate();
        }
    }
    
    public void submitOrder(int orderNumber) throws SQLException {
        String sql = ""UPDATE APP.ORDERS SET ORDERSTATUS='Submitted' WHERE ORDERID=?"";
        PreparedStatement ps = st.getConnection().prepareStatement(sql);
        ps.setInt(1, orderNumber);
        ps.executeUpdate();
    }
    
    public List<Order> searchOrders(String orderNumber, String date) throws SQLException {
        String sql = ""SELECT * FROM APP.ORDERS WHERE ORDERID=? OR DATE=?"";
        PreparedStatement ps = st.getConnection().prepareStatement(sql);
        ps.setString(1, orderNumber);
        ps.setString(2, date);
        ResultSet rs = ps.executeQuery();
        List<Order> orders = new ArrayList<>();
        while (rs.next()) {
            int orderNum = rs.getInt(""ORDERID"");
            String device = rs.getString(""DEVICE"");
            int quantity = rs.getInt(""ORDERAMOUNT"");
            java.util.Date orderDate = new java.util.Date(rs.getDate(""DATE"").getTime());
            orders.add(new Order(orderNum, device, quantity, new java.sql.Date(orderDate.getTime())));
        }
        return orders;
    }

    public Product findProductByID(int productID) throws SQLException {
        String query = ""SELECT * FROM APP.Products WHERE productID = "" + productID;
        ResultSet rs = st.executeQuery(query);

        Product product = null;
        if (rs.next()) {
            String productName = rs.getString(""productName"");
            String supplierEmail = rs.getString(""supplierEmail"");
            double productPrice = rs.getDouble(""productPrice"");
            String productType = rs.getString(""productType"");
            int productStock = rs.getInt(""productStock"");

            product = new Product(productID, productName, supplierEmail, productPrice, productType, productStock);
        }

        return product;
    }

    public List<Product> getAllProducts() throws SQLException {
        List<Product> products = new ArrayList<>();
        String query = ""SELECT * FROM APP.Products"";
        ResultSet rs = st.executeQuery(query);

        while (rs.next()) {
            int productID = rs.getInt(""productID"");
            String productName = rs.getString(""productName"");
            String supplierEmail = rs.getString(""supplierEmail"");
            double productPrice = rs.getDouble(""productPrice"");
            String productType = rs.getString(""productType"");
            int productStock = rs.getInt(""productStock"");

            Product product = new Product(productID, productName, supplierEmail, productPrice, productType, productStock);
            products.add(product);
        }

        return products;
    }
}"
UVh0rmWx,Untitled,askador,YAML,Sunday 21st of May 2023 07:23:28 AM CDT,"apiVersion: apps/v1
kind: Deployment
metadata:
  name: achievementsbot-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: achievementsbot
  template:
    metadata:
      labels:
        app: achievementsbot
    spec:
      containers:

        - name: achievementsbot
          image: achievementsbot
          imagePullPolicy: Never
          ports:
            - containerPort: 80

        - name: dbpostgre
          image: postgres:14.1
          env:
            - name: POSTGRES_DB
              value: ${DB_NAME}
            - name: POSTGRES_USER
              value: ${DB_USER}
            - name: POSTGRES_PASSWORD
              value: ${DB_PASSWORD}
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: pg-data
              mountPath: /var/lib/postgresql/data

        - name: dbredis
          image: redis:6.2-alpine
          env:
            - name: REDIS_HOST
              value: ${REDIS_HOST}
            - name: REDIS_PASSWORD
              value: ${REDIS_PASSWORD}
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: pg-data
          emptyDir: {}
        - name: redis-data
          emptyDir: {}"
dPwheSBW,Order.java,Vitrecan,Java,Sunday 21st of May 2023 07:23:24 AM CDT,"/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uts.isd.model;

/**
 *
 * @author Vincent Tran
 */
import java.sql.Date;

    public class Order {
    private int orderNumber;
    private String device;
    private int quantity;
    private Date date;

    public Order(int orderNumber, String device, int quantity, Date date) {
        this.orderNumber = orderNumber;
        this.device = device;
        this.quantity = quantity;
        this.date = date;
    }

    public int getOrderNumber() {
    	return orderNumber;
    }

    public void setOrderNumber(int orderNumber) {
    	this.orderNumber = orderNumber;
    }

    public String getDevice() {
    	return device;
    }

    public void setDevice(String device) {
    	this.device = device;
    }

    public int getQuantity() {
    	return quantity;
    }

    public void setQuantity(int quantity) {
    	this.quantity = quantity;
    }

    public Date getDate() {
    	return date;
    }

    public void setDate(Date date) {
    	this.date = date;
    }
}"
AtftrDsj,UpdateOrderServlet.java,Vitrecan,Java,Sunday 21st of May 2023 07:22:38 AM CDT,"/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uts.isd.controller;

/**
 *
 * @author Vincent Tran
 */
import uts.isd.model.Order;
import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.DBManager;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class UpdateOrderServlet extends HttpServlet {
    private DBManager dbManager;

    @Override
    public void init() {
        try {
            DBConnector db = new DBConnector();
            Connection conn = db.openConnection();
            dbManager = new DBManager(conn);
        } catch (ClassNotFoundException | SQLException e) {
            Logger.getLogger(UpdateOrderServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int orderNumber = Integer.parseInt(request.getParameter(""orderNumber""));
        String device = request.getParameter(""device"");
        int quantity = Integer.parseInt(request.getParameter(""quantity""));
        Order order = new Order(orderNumber, device, quantity, null);
        try {
            dbManager.updateOrder(order);
            request.getSession().setAttribute(""order"", order);
            response.sendRedirect(""order.jsp"");
        } catch (IOException | SQLException e) {
            Logger.getLogger(UpdateOrderServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}"
pYq0RRtY,SubmitOrderServlet.java,Vitrecan,Java,Sunday 21st of May 2023 07:21:45 AM CDT,"/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uts.isd.controller;

/**
 *
 * @author Vincent Tran
 */
import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.DBManager;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SubmitOrderServlet extends HttpServlet {
    private DBManager dbManager;

    @Override
    public void init() {
        try {
            DBConnector db = new DBConnector();
            Connection conn = db.openConnection();
            dbManager = new DBManager(conn);
        } catch (ClassNotFoundException | SQLException e) {
            Logger.getLogger(SubmitOrderServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int orderNumber = Integer.parseInt(request.getParameter(""orderNumber""));
        try {
            dbManager.submitOrder(orderNumber);
            request.getSession().removeAttribute(""order"");
            response.sendRedirect(""order.jsp"");
        } catch (SQLException e) {
            Logger.getLogger(SubmitOrderServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}

"
ngCdAKyX,SearchOrdersServlet.java,Vitrecan,Java,Sunday 21st of May 2023 07:20:53 AM CDT,"/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uts.isd.controller;

/**
 *
 * @author Vincent Tran
 */
import uts.isd.model.Order;
import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.DBManager;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SearchOrdersServlet extends HttpServlet {
    private DBManager dbManager;

    @Override
    public void init() {
        try {
            DBConnector db = new DBConnector();
            Connection conn = db.openConnection();
            dbManager = new DBManager(conn);
        } catch (ClassNotFoundException | SQLException e) {
            Logger.getLogger(SearchOrdersServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String orderNumber = request.getParameter(""orderNumber"");
        String date = request.getParameter(""date"");
        try {
            List<Order> orders = dbManager.searchOrders(orderNumber, date);
        	request.getSession().setAttribute(""orders"", orders);
            response.sendRedirect(""order.jsp"");
        } catch (Exception e) {
            Logger.getLogger(SearchOrdersServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}"
K9wqUQed,CreateOrderServlet.java,Vitrecan,Java,Sunday 21st of May 2023 07:19:58 AM CDT,"/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uts.isd.controller;

/**
 *
 * @author Vincent Tran
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import uts.isd.model.Order;
import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.DBManager;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class CreateOrderServlet extends HttpServlet {
    private DBManager dbManager;

    @Override
    public void init() {
        try {
            DBConnector db = new DBConnector();
            Connection conn = db.openConnection();
            dbManager = new DBManager(conn);
        } catch (ClassNotFoundException | SQLException e) {
            Logger.getLogger(CreateOrderServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String device = request.getParameter(""device"");
        int quantity = Integer.parseInt(request.getParameter(""quantity""));
        java.sql.Date date = new java.sql.Date(new java.util.Date().getTime());
        Order order = new Order(0, device, quantity, date);
        try {
            dbManager.createOrder(order);
            request.getSession().setAttribute(""order"", order);
            response.sendRedirect(""order.jsp"");
        } catch (IOException | SQLException e) {
            Logger.getLogger(CreateOrderServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}"
bTCaS7xq,WirelesComputerSend,robkatt,Lua,Sunday 21st of May 2023 07:19:37 AM CDT,"term.clear ()
term.setCursorPos(1,1)

local modem = peripheral.find(""modem"")

modem.open(69)
while true do

    input = read()
    
    modem.transmit(69,69,read)
    print(""Sent!"")
   
end"
JGGFZLgV,CancelOrderServlet.java,Vitrecan,Java,Sunday 21st of May 2023 07:18:07 AM CDT,"/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uts.isd.controller;

/**
 *
 * @author Vincent Tran
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.DBManager;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class CancelOrderServlet extends HttpServlet {
    private DBManager dbManager;

    @Override
    public void init() {
        try {
            DBConnector db = new DBConnector();
            Connection conn = db.openConnection();
            dbManager = new DBManager(conn);
        } catch (ClassNotFoundException | SQLException e) {
            Logger.getLogger(CancelOrderServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int orderNumber = Integer.parseInt(request.getParameter(""orderNumber""));
        try {
            dbManager.cancelOrder(orderNumber);
            request.getSession().removeAttribute(""order"");
            response.sendRedirect(""order.jsp"");
        } catch (IOException | SQLException e) {
            Logger.getLogger(CancelOrderServlet.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}"
aMEh1e9J,Untitled,iko1133,JavaScript,Sunday 21st of May 2023 06:58:56 AM CDT,"{
	""config"": {
		""adapter"": [Function xhrAdapter],
		""baseURL"": ""https://sss.self.ge/api/"",
		""data"": ""DomainName=td.self.ge"",
		""headers"": {
			""Accept"": ""application/json"",
			""Content-Type"": ""application/x-www-form-urlencoded""
		},
		""maxBodyLength"": -1,
		""maxContentLength"": -1,
		""method"": ""post"",
		""timeout"": 0,
		""transformRequest"": [
			[Function transformRequest]
		],
		""transformResponse"": [
			[Function transformResponse]
		],
		""transitional"": {
			""clarifyTimeoutError"": false,
			""forcedJSONParsing"": true,
			""silentJSONParsing"": true
		},
		""url"": ""InitDomain"",
		""validateStatus"": [Function validateStatus],
		""xsrfCookieName"": ""XSRF-TOKEN"",
		""xsrfHeaderName"": ""X-XSRF-TOKEN""
	},
	""data"": {},
	""duration"": 60,
	""headers"": {
		""access-control-allow-origin"": ""*"",
		""connection"": ""close"",
		""content-length"": ""2"",
		""content-type"": ""application/json"",
		""date"": ""Sun, 21 May 2023 11:55:02 GMT"",
		""server"": ""Apache"",
		""x-frame-options"": ""sameorigin""
	},
	""ok"": false,
	""originalError"": [Error: Request failed with status code 400],
	""problem"": ""CLIENT_ERROR"",
	""status"": 400
}"
3RS50GcZ,Untitled,nnv-nick,C++,Sunday 21st of May 2023 06:48:51 AM CDT,"#include <bits/stdc++.h>
#define pb push_back
#define sz(a) (int)a.size()
#define x first
#define y second
#define ll long long
#define ull unsigned long long

using namespace std;

const int MAX_N = 605;

const ll H1 = 997;
const ll H2 = 1187;
const ll MOD = 1e9 + 7;
const ll MOD2 = 998244353;
const ll MOD3 = 1000000123;

ll h1[MAX_N];
ll h2[MAX_N];
ll h12[MAX_N];
ll h22[MAX_N];
ll h13[MAX_N];
ll h23[MAX_N];
ull h14[MAX_N];
ull h24[MAX_N];
ll dp[MAX_N][MAX_N];
ll dp2[MAX_N][MAX_N];
ll dp3[MAX_N][MAX_N];
ull dp4[MAX_N][MAX_N];


char c[MAX_N][MAX_N];

int n, m, k;

ll get1(int x1, int y1, int x2, int y2) {
    ll sum = (dp[x2][y2] - dp[x2][y1 - 1] - dp[x1 - 1][y2] + dp[x1 - 1][y1 - 1] + MOD + MOD) % MOD;
    return (sum * ((h1[n - x2] * h2[m - y2]) % MOD)) % MOD;
}

ll get2(int x1, int y1, int x2, int y2) {
    ll sum = (dp2[x2][y2] - dp2[x2][y1 - 1] - dp2[x1 - 1][y2] + dp2[x1 - 1][y1 - 1] + MOD2 + MOD2) % MOD2;
    return (sum * ((h12[n - x2] * h22[m - y2]) % MOD2)) % MOD2;
}

ll get3(int x1, int y1, int x2, int y2) {
    ll sum = (dp3[x2][y2] - dp3[x2][y1 - 1] - dp3[x1 - 1][y2] + dp3[x1 - 1][y1 - 1] + MOD3 + MOD3) % MOD3;
    return (sum * ((h13[n - x2] * h23[m - y2]) % MOD3)) % MOD3;
}

ll get4(int x1, int y1, int x2, int y2) {
    ll sum = dp4[x2][y2] - dp4[x2][y1 - 1] - dp4[x1 - 1][y2] + dp4[x1 - 1][y1 - 1];
    return sum * h14[n - x2] * h24[m - y2];
}


bool check(int f) {
    map<pair<pair<ll, ll>, pair<ll, ll>>, int> cnt;
    for (int i = 1; i <= n - f + 1; ++i) {
        for (int j = 1; j <= m - f + 1; ++j) {
            ll cur1 = get1(i, j, i + f - 1, j + f - 1);
            ll cur2 = get2(i, j, i + f - 1, j + f - 1);
            ll cur3 = get3(i, j, i + f - 1, j + f - 1);
            ll cur4 = get4(i, j, i + f - 1, j + f - 1);
            cnt[{{cur1, cur2}, {cur3, cur4}}]++;
            if (cnt[{{cur1, cur2}, {cur3, cur4}}] >= k)
                return true;
        }
    }
    return false;
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    h1[0] = h2[0] = h12[0] = h22[0] = h13[0] = h23[0] = h14[0] = h24[0] = 1;
    for (int i = 1; i < MAX_N; ++i) {
        h1[i] = (h1[i - 1] * H1) % MOD;
        h2[i] = (h2[i - 1] * H2) % MOD;
        h12[i] = (h12[i - 1] * H1) % MOD2;
        h22[i] = (h22[i - 1] * H2) % MOD2;
        h13[i] = (h13[i - 1] * H1) % MOD3;
        h23[i] = (h23[i - 1] * H2) % MOD3;
        h14[i] = (h14[i - 1] * H1);
        h24[i] = (h24[i - 1] * H2);
    }

    cin >> n >> m >> k;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            cin >> c[i][j];
        }
    }
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + (c[i][j] * ((h1[i] * h2[j]) % MOD)) % MOD + MOD) % MOD;
            dp2[i][j] = (dp2[i - 1][j] + dp2[i][j - 1] - dp2[i - 1][j - 1] + (c[i][j] * ((h12[i] * h22[j]) % MOD2)) % MOD2 + MOD2) % MOD2;
            dp3[i][j] = (dp3[i - 1][j] + dp3[i][j - 1] - dp3[i - 1][j - 1] + (c[i][j] * ((h13[i] * h23[j]) % MOD3)) % MOD3 + MOD3) % MOD3;
            dp4[i][j] = dp4[i - 1][j] + dp4[i][j - 1] - dp4[i - 1][j - 1] + (c[i][j] * ((h14[i] * h24[j])));
        }
    }

    int l = 0;
    int r = min(n, m) + 1;
    while (r - l > 1) {
        int f = (l + r) / 2;
        if (check(f)) {
            l = f;
        } else {
            r = f;
        }
    }
    if (l == 0) {
        cout << ""-1\n"";
    } else {
        cout << l << endl;
    }
    return 0;
}

"
avSNceAU,cntCredits,cleverus,JavaScript,Sunday 21st of May 2023 06:27:18 AM CDT,"/* This is your custom Javascript */
jQuery(document).ready(function ($) {
    $(""#header-aside .signin-button"").attr(""href"", '//earn.community/login');
    setLoginLink();

    $("".kv-login-link"").click(function (event) {
        if ( $(""body"").hasClass(""logged-in"") ) {
      $('.bb-mobile-header-wrapper .header-aside .sub-menu').toggleClass('active');      
        }
        else {
            window.location.href = ""https://earn.community/login"";
        }
    });

	$('.user-wrap .sub-menu').clone(true).insertAfter('.bb-mobile-header-wrapper .kv-login-link');  

	var cntCredits;

	if($('body').hasClass('logged-in')){
		if ($('.gamipress-user-points-amount').length > 0) {
			cntCredits = $(""span.gamipress-user-points-amount"").html();
			localStorage.setItem('credits', cntCredits);
			
			console.log('источник есть-' + cntCredits);
		} else {
			cntCredits = localStorage.getItem('credits');
			
			console.log('источника нет- ' + cntCredits);
		}		

		$('<div class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></div>').insertBefore($('.header-aside .header-aside-inner'));
		 
		$('<div class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></div>').insertBefore($('.header-aside .kv-login-link'));	
	}
});


function setLoginLink() {
    jQuery("".bb-mobile-header .header-search-link"").addClass(""kv-login-link"");
    jQuery("".bb-mobile-header .kv-login-link"").removeClass(""header-search-link"");
    jQuery("".bb-mobile-header .kv-login-link"").attr(""data-balloon"", """");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").removeClass(""bb-icon-search"");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").addClass(""bb-icon-key"");
}
"
pNhAw0MX,cntCredits,cleverus,JavaScript,Sunday 21st of May 2023 06:06:31 AM CDT,"/* This is your custom Javascript */
jQuery(document).ready(function ($) {
    $(""#header-aside .signin-button"").attr(""href"", '//earn.community/login');
    setLoginLink();

    $("".kv-login-link"").click(function (event) {
        if ( $(""body"").hasClass(""logged-in"") ) {
      $('.bb-mobile-header-wrapper .header-aside .sub-menu').toggleClass('active');      
        }
        else {
            window.location.href = ""https://earn.community/login"";
        }
    });

	$('.user-wrap .sub-menu').clone(true).insertAfter('.bb-mobile-header-wrapper .kv-login-link');  

	if($('body').hasClass('logged-in')){
		if ($('.gamipress-user-points-amount').length > 0) {
			var cntCredits = $(""span.gamipress-user-points-amount"").html();
			localStorage.setItem('credits', cntCredits);
		} else {
			var cntCredits = localStorage.getItem('credits');
		}		

		$('<div class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></div>').insertBefore($('.header-aside .header-aside-inner'));
		 
		$('<div class=""kv-menu-credits""> <div class=""kv-menu-credits__ico""> <img src=""/wp-content/uploads/2022/11/Untitled-design-2022-11-07T151629.047.png"" alt=""""> </div> <div class=""kv-menu-credits__counter"">' + cntCredits + '</div></div>').insertBefore($('.header-aside .kv-login-link'));	
	}
});


function setLoginLink() {
    jQuery("".bb-mobile-header .header-search-link"").addClass(""kv-login-link"");
    jQuery("".bb-mobile-header .kv-login-link"").removeClass(""header-search-link"");
    jQuery("".bb-mobile-header .kv-login-link"").attr(""data-balloon"", """");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").removeClass(""bb-icon-search"");
    jQuery("".bb-mobile-header .kv-login-link .bb-icon-l"").addClass(""bb-icon-key"");
}"
VVFtiCCa,data579,TestGuy1,JSON,Sunday 21st of May 2023 06:00:10 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '985c599236bef5915a64069e9014d09fe445aed621c6e427083b826db097b64af961cec0d43c6caf8410f2837bebda32de60228141b0a3f68d7ecd515cfdbcf16d62d4fc0d7a78c474ef3f44dab9fdbb04e161b4351de042789b6c0889af399e2f9eed30f9bd49e19941f3909480bc3c20c45fea7d14706f9d310ec629a89a87',
  otherdata: [
    '576e14a2afdcca23b3231b2087d78ad4',
    'bd298e92f53a888af646bc7dc6ba7424',
    '93025138d5213e54646d2f4ff86180b6',
    '8dffce9a364da97b34feffa817928aae',
    'e5fcf95df144889b7e761699fbd30a20',
    '077dff3a83de4d056be17a22e0c636a7',
    'c82c6f943558827770ed15d01c113dc6',
    '28203210d4e41f2a33c539648d45a76f'
  ]
}"
Cabjybq8,Untitled,pasholnahuy,C++,Sunday 21st of May 2023 05:44:51 AM CDT,"#include <iostream>
#include <tuple>
#include <random>

using std::pair;
using std::cin;
using std::cout;
using std::vector;
using int64 = int64_t;
using std::max;
using std::min;

class SegmentTree {
public:
    int64 log_size;
    vector<int64> nodes = std::vector<int64>((2 << log_size) - 1);
    vector<int> SubtreeAdd;

    static int64 IntLog(int64 n) {
        int64 temp = 1;
        int64 ans = 0;
        while (temp < n) {
            temp *= 2;
            ++ans;
        }
        return ans;
    }

    static int64 Pow2(int64 n) {
        return 1 << n;
    }

    explicit SegmentTree(const vector<int64> &vec) : log_size(IntLog(vec.size())) {
        std::copy(vec.begin(), vec.end(), nodes.begin() + (1 << log_size) - 1);
        SubtreeAdd.assign(IntLog(vec.size()), 0);
        for (int64 i = Pow2(log_size) - 2; i >= 0; --i) {
            nodes[i] = nodes[2 * i + 1] + nodes[2 * i + 2];
        }
    }

    void Modify(int64 l, int64 r, int64 val) {
        Modify(l, r, 0, 0, Pow2(log_size) - 1, val);
    }

    int64 GetSum(int64 l, int64 r) {
        return GetSum(l, r, 0, 0, Pow2(log_size) - 1);
    }

private:

    int64 GetSum(int64 l, int64 r, int64 n, int64 nl, int64 nr) {
        if (l > r) {
            return 0;
        }
        if (l == nl && r == nr) {
            return nodes[n];
        }
        int64 mid = (nl + nr) / 2;
        return GetSum(l, min(r, mid), n * 2 + 1, nl, mid) +
               GetSum(max(l, mid + 1), r, n * 2 + 2, mid + 1, nr);
    }

    void push(int64 v, int64 vl, int64 vr) {
        if (SubtreeAdd[v]) {
            nodes[v] += SubtreeAdd[v] * (vr - vl + 1);
            if (vl != vr) {
                SubtreeAdd[2 * v + 1] += SubtreeAdd[v];
                SubtreeAdd[2 * v + 2] += SubtreeAdd[v];
            }
            SubtreeAdd[v] = 0;
        }
    }

    void Modify(int64 l, int64 r, int64 n, int64 nl, int64 nr, int64 val) {
        push(n, nl, nr);
        if (l > nr || r < nl) {
            return;
        }
        if (l <= nl && r >= nr) {
            nodes[n] += val;
            push(n, nl, nr);
            return;
        } else {
            int64 mid = (nl + nr) / 2;
            Modify(l, r, n * 2 + 1, nl, mid, val);
            Modify(l, r, n * 2 + 2, mid + 1, nr, val);
            nodes[n] = nodes[2 * n + 1] + nodes[2 * n + 2];
        }
    }


};

int main() {
    int64 n;
    cin >> n;
    vector<int64> vec(n);
    for (size_t i = 0; i < n; ++i) {
        cin >> vec[i];
    }
    SegmentTree st(vec);
    int k;
    cin >> k;
    for (size_t i = 0; i < k; ++i) {
        int num;
        cin >> num;
        if (num == 1) {
            int64 l, r;
            cin >> l >> r;
            cout << st.GetSum(l, r) << '\n';
        } else {
            int64 l, r, x;
            cin >> l >> r >> x;
            st.Modify(l, r, x);
        }
    }
    return 0;
}"
tBYxCig6,08. Tennis Ranklist,myrdok123,Java,Sunday 21st of May 2023 05:38:28 AM CDT,"package L04_ForLoop;

import java.util.Scanner;

public class P08_TennisRanklist {


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        int countTournaments = Integer.parseInt(scanner.nextLine());
        int startingPoints = Integer.parseInt(scanner.nextLine());

        //правим фор цикъл -> като броя на повторенията трябва да е равен на броя турнири

        int countWins = 0;
        int allTournamentsPoints = 0;
        for (int i = 1; i <= countTournaments ; i++) {

            //прочитаме до кой етап на турнира е достигнал
            String currentStage = scanner.nextLine();

            //правим проверка до какъв етап е достигнал -> прибавим необходимите точки
            if (currentStage.equals(""W"")){
                countWins++;
                allTournamentsPoints += 2000;

            } else if (currentStage.equals(""F"")) {
                allTournamentsPoints += 1200;
                
            } else if (currentStage.equals(""SF"")) {
                allTournamentsPoints += 720;
            }

        }

        //пресмятаме общия брой точки
        int finalPoints = allTournamentsPoints + startingPoints;

        //пресмятаме средно колко точки печели за турнир
        int averagePoints = allTournamentsPoints / countTournaments;

        double percentWins = (countWins * 1.0 / countTournaments) * 100;

        System.out.printf(""Final points: %d%n"", finalPoints);
        System.out.printf(""Average points: %d%n"", averagePoints);
        System.out.printf(""%.2f%%"", percentWins);




    }
}
"
hRKvtSRU,06. Oscars,myrdok123,Java,Sunday 21st of May 2023 05:37:46 AM CDT,"package L04_ForLoop;

import java.util.Scanner;

public class P06_Oscars {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        String actorName = scanner.nextLine();
        double academyPoints = Double.parseDouble(scanner.nextLine());
        int countExaminers = Integer.parseInt(scanner.nextLine());

        double sumAllPoint = academyPoints;

        //правим цикъл за всечки оценяващи
        for (int i = 1; i <= countExaminers ; i++) {
            //прочитаме име и точки, които е дал конкретният оценяващ
            String examinerName = scanner.nextLine();
            double currentPoints = Double.parseDouble(scanner.nextLine());

            //пресмятаме колко точки трябва да прибавим към общият брой точки
            sumAllPoint += (examinerName.length() * currentPoints) / 2;

            //проверяваме дали сме достигнали 1250.5 -> ако сме ги достиганали -> принтираме и прекратяваме програмата

            if(sumAllPoint >= 1250.5){
                System.out.printf(""Congratulations, %s got a nominee for leading role with %.1f!"", actorName, sumAllPoint);
                break;
            }

        }


        //проверяваме дали точките са под 1250.5
        if(sumAllPoint < 1250.5){

            System.out.printf(""Sorry, %s you need %.1f more!"", actorName, 1250.5 - sumAllPoint);
        }
    }
}
"
yEL41VCY,05. Salary,myrdok123,Java,Sunday 21st of May 2023 05:36:24 AM CDT,"package L04_ForLoop;

import java.util.Scanner;

public class P05_Salary {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int tabs = Integer.parseInt(scanner.nextLine());
        int salary = Integer.parseInt(scanner.nextLine());

        for (int i = 1; i <=tabs ; i++) {

            String websiteName = scanner.nextLine();


            //todo -> проверка за име на сайта - намалене на заплата

            if(salary <= 0){
                System.out.println(""You have lost your salary."");
                break;
            }

        }

        //todo -> проверка дали заплатата е над -> 0


    }
}
"
VTNpE2Sw,04. Clever Lily,myrdok123,Java,Sunday 21st of May 2023 05:35:29 AM CDT,"package L04_ForLoop;

import java.util.Scanner;

public class P04_CleverLily {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);



        int age = Integer.parseInt(scanner.nextLine());
        double priceWashingMachine = Double.parseDouble(scanner.nextLine());
        int priceToy = Integer.parseInt(scanner.nextLine());

        double sum = 0;
        int countToys = 0;

        // for -> минавеме през всяка от годините(рождените дни) -> за четните получава пари, а за нечетните получава играчка

        //int moneyEvenAge = 10;

        for (int currentAge = 1; currentAge <= age ; currentAge++) {

            //проверка дали годината е четна или нечетна
            if (currentAge % 2 == 0){
                /*sum += moneyEvenAge;
                moneyEvenAge += 10;
                sum--;*/

                //парите, които получава
                sum = sum + (currentAge * 5 - 1);// sum += currentAge * 5 - 1

            }else {
                //нечетна година/рожден ден -> увеличаваме броя на играчките
                countToys++;
            }


        }


        //към досегашната сума прибавяме и парите от играчките
        sum += countToys * priceToy;

        double diff = Math.abs(priceWashingMachine - sum);

        if (sum >= priceWashingMachine){

            System.out.printf(""Yes! %.2f"", diff);
        }else {
            System.out.printf(""No! %.2f"", diff);
        }


    }
}
"
n9gFau2e,03. Histogram,myrdok123,Java,Sunday 21st of May 2023 05:34:54 AM CDT,"package L04_ForLoop;

import java.util.Scanner;

public class P03_Histogram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        int n = Integer.parseInt(scanner.nextLine());

        //създаваме променливи за броя числа в конкретен диапазон

        int countP1 = 0;
        int countP2 = 0;
        int countP3 = 0;
        int countP4 = 0;
        int countP5 = 0;

        //правим цикъл и прочитаме n на брой числа



        for (int i = 1; i <= n ; i++) {

            int currentNum = Integer.parseInt(scanner.nextLine());

            //проверяваме в кой диапазон попада текущото число
            if (currentNum < 200){
                countP1++;
            } else if (currentNum < 400) {
                countP2++;
            } else if (currentNum < 600) {
                countP3++;
            } else if (currentNum < 800) {
                countP4++;
            }else {
                countP5++;
            }

        }

        double p1Percent = (countP1 * 1.0 / n) * 100;
        double p2Percent = (countP2 * 1.0 / n) * 100;
        double p3Percent = (countP3 * 1.0 / n) * 100;
        double p4Percent = (countP4 * 1.0 / n) * 100;
        double p5Percent = (countP5 * 1.0 / n) * 100;


        System.out.printf(""%.2f%%%n"", p1Percent);
        System.out.printf(""%.2f%%%n"", p2Percent);
        System.out.printf(""%.2f%%%n"", p3Percent);
        System.out.printf(""%.2f%%%n"", p4Percent);
        System.out.printf(""%.2f%%%n"", p5Percent);
    }
}
"
WFPigb9R,02. Half Sum Element,myrdok123,Java,Sunday 21st of May 2023 05:34:11 AM CDT,"package L04_ForLoop;

import java.util.Scanner;

public class P02_HalfSumElement {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        int n = Integer.parseInt(scanner.nextLine());

        int maxNumber = Integer.MIN_VALUE;

        int sum = 0;

        for (int i = 1; i <= n ; i++) {

            int currentNumber = Integer.parseInt(scanner.nextLine());
            sum += currentNumber;


            if(currentNumber > maxNumber){
                maxNumber = currentNumber;
            }


        }

        int sumWithoutMaxNumber = sum - maxNumber;

        if (sumWithoutMaxNumber == maxNumber){
            System.out.println(""Yes"");
            System.out.printf(""Sum = %d"", sumWithoutMaxNumber);
        }else {
            int diff = Math.abs(sumWithoutMaxNumber - maxNumber);
            System.out.println(""No"");
            System.out.printf(""Diff = %d"", diff);

        }


    }
}
"
LTgHYkvL,01. Numbers Ending in 7,myrdok123,Java,Sunday 21st of May 2023 05:33:31 AM CDT,"package L04_ForLoop;

public class P01_NumbersEnding7 {

    public static void main(String[] args) {


        for (int i = 7; i <= 997 ; i+=10) {

            System.out.println(i);


        }
    }
}
"
hndHe2uc,Untitled,DFNNOT,Python,Sunday 21st of May 2023 05:21:57 AM CDT,"import requests
import time

def search_free_limiteds(search_terms):
    while True:
        for term in search_terms:
            try:
                # Search on RblxTrade API
                rblxtrade_url = f""https://rblxtrade.com/api/trades/search?query={term}&limit=10&sort=desc""
                rblxtrade_response = requests.get(rblxtrade_url)
                
                if rblxtrade_response.status_code == 200:
                    rblxtrade_results = rblxtrade_response.json()
                    for item in rblxtrade_results:
                        print(""---------------------"")
                        print(f""Item Name: {item['name']}"")
                        print(f""Item Price: {item['price']}"")
                        print(f""Item URL: {item['url']}"")
                        print(""---------------------"")
                        
                        # Auto-buy if item is listed for free and for sale
                        if item['free'] and item['canBuy']:
                            item_id = item['assetId']
                            buy_url = f""https://www.roblox.com/Trade/TradeHandler.ashx?ep=buyitem&tradeid={item_id}""
                            
                            while True:
                                try:
                                    response = requests.get(buy_url)
                                    response.raise_for_status()
                                    
                                    result = response.json()
                                    if result['status'] == 'ok':
                                        print(f""Item {item_id} successfully purchased!"")
                                        break
                                    elif result['status'] == 'error':
                                        print(f""Failed to purchase item {item_id}: {result['message']}"")
                                        break
                                except requests.exceptions.RequestException as e:
                                    print(f""Error occurred during purchase attempt for item {item_id}: {str(e)}"")
                                time.sleep(0.45)  # Wait for 0.45 seconds before retrying the purchase

                else:
                    print(f""No results found for search term: {term} (RblxTrade API)"")
            except requests.exceptions.RequestException as e:
                print(f""Error occurred while searching for search term: {term} (RblxTrade API): {str(e)}"")

            try:
                # Search on Rolimon's Marketplace API
                rolimons_url = f""https://www.rolimons.com/api/trades?searchQuery={term}&resultLimit=10""
                rolimons_response = requests.get(rolimons_url)
                
                if rolimons_response.status_code == 200:
                    rolimons_results = rolimons_response.json()
                    if rolimons_results:
                        for item in rolimons_results:
                            print(""---------------------"")
                            print(f""Item Name: {item['name']}"")
                            print(f""Item Price: {item['price']}"")
                            print(f""Item URL: {item['tradeId']}"")
                            print(""---------------------"")
                            
                            # Auto-buy if item is listed for free and for sale
                            if item['free'] and item['canBuy']:
                                item_id = item['tradeId']
                                buy_url = f""https://www.roblox.com/Trade/TradeHandler.ashx?ep=buyitem&tradeid={item_id}""
                                
                                while True:
                                    try:
                                        response = requests.get(buy_url)
                                        response.raise_for_status()
                                        
                                        result = response.json()
                                        if result['status'] == 'ok':
                                            print(f""Item {item_id} successfully purchased!"")
                                            break
                                        elif result['status'] == 'error':
                                            print(f""Failed to purchase item {item_id}: {result['message']}"")
                                            break
                                    except requests.exceptions.RequestException as e:
                                        print(f""Error occurred during purchase attempt for item {item_id}: {str(e)}"")
                                    time.sleep(0.45)  # Wait for 0.45 seconds before retrying the purchase
                    else:
                        print(f""No results found for search term: {term} (Rolimon's Marketplace API)"")
                else:
                    print(f""Error occurred while searching for search term: {term} (Rolimon's Marketplace API): {rolimons_response.status_code}"")
            except requests.exceptions.RequestException as e:
                print(f""Error occurred while searching for search term: {term} (Rolimon's Marketplace API): {str(e)}"")

        time.sleep(0.75)  # Wait for 0.75 seconds before performing the next search

# Example usage
search_terms = [""limited item 1"", ""rare item 2"", ""special item 3""]
search_free_limiteds(search_terms)
"
