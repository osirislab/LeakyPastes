id,title,username,language,date,content
F5aGcMHX,postcomponent1,torokt21,TypeScript,Monday 29th of May 2023 12:53:38 PM CDT,"import {Component, OnInit} from '@angular/core';
import {Post} from ""../../_models/post"";
import {PostService} from ""../../post.service"";

@Component({
  selector: 'app-list-posts',
  templateUrl: './list-posts.component.html',
  styleUrls: ['./list-posts.component.scss']
})
export class ListPostsComponent implements  OnInit{

  subjectId:string=''
  posts: Post[]
  constructor(private postService: PostService) {
  }

  ngOnInit(): void {
// Post id megszerzése a route-ból, ezt már egyszer megcsináltuk a projekt munkában
	this.subjectId = ....
    this.postService.getPosts(this.subjectId).subscribe(posts => this.posts = posts)
  }
}
"
CFupRXKp,Database connection using PHP,Rejuan706,PHP,Monday 29th of May 2023 12:53:20 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Practice 1</title>
</head>
<body>
    <h1>Practice Form</h1>
    <form action=""#"" method='POST'>
        <label for=""Name"">Name</label>
        <input type=""text"" name= ""Name""> <br>

        <label for=""Email"">Email</label>
        <input type=""email"" name= ""Email""> <br>

        <label for=""Mobile"">Mobile</label>
        <input type=""number"" name= ""Mobile""> <br><br>

        <button name =""submit"">Submit</button>
        <button name =""update"">Update</button>
        <button name =""delete"">Delete</button>
    </form>
</body>
</html>

<?php
if(isset($_POST['submit']))
{
    $host = 'Localhost';
    $db = 'test';
    $user = 'root';
    $pass = '';

    $dsn = ""mysql:host =$host;dbname=$db"";
    $psd= new PDO($dsn, $user, $pass);

        $name = $_POST['Name'];
        $email = $_POST['Email'];
        $mobile = $_POST['Mobile'];

        $sql = ""INSERT INTO user1(Name, Email, Mobile) Value(:Name, :Email, :Mobile)"";
        $stm = $psd -> prepare($sql);
        $stm -> execute ([""Name"" => $name, ""Email"" => $email, ""Mobile"" => $mobile]);

        if($stm)
        {
            echo ""<br>Data Insert Succesfull  "";
        }
        else
        {
            echo ""<br>Data Insert Error"".$psd->error;
        }

}
if(isset($_POST['update']))
{
    $host = 'Localhost';
    $db = 'test';
    $user = 'root';
    $pass = '';

    $dsn = ""mysql:host =$host;dbname=$db"";
    $psd= new PDO($dsn, $user, $pass);

        $name = $_POST['Name'];
        $email = $_POST['Email'];
        $mobile = $_POST['Mobile'];

        $sql = ""UPDATE user1 SET Email = 'mn@12123' WHERE Sl= '2'"" ;
        $stm = $psd -> query($sql);
        if($stm)
        {
            echo ""<br>Data Update Succesfull  <br>"";
        }
        else
        {
            echo ""<br>Data Update Error"".$psd->error;
        }

}

if(isset($_POST['delete']))
{
    $host = 'Localhost';
    $db = 'test';
    $user = 'root';
    $pass = '';

    $dsn = ""mysql:host =$host;dbname=$db"";
    $psd= new PDO($dsn, $user, $pass);

        $name = $_POST['Name'];
        $email = $_POST['Email'];
        $mobile = $_POST['Mobile'];

        $sql = ""DELETE FROM user1 WHERE Sl= '3'"" ;
        $stm = $psd -> query($sql);
        if($stm==TRUE)
        {
            echo ""<br>Data Delete Succesfull  <br>"";
        }
        else
        {
            echo ""<br>Data Delete Error"";
        }

}
?>"
hnau2jNK,DanceController,DarielDev,Lua,Monday 29th of May 2023 12:52:44 PM CDT,"--//Services//--

local Players = game:GetService(""Players"")

--//--//--//--//--

local DanceController = {Catalog = {}}
DanceController.__index = DanceController

function DanceController.new(Player : Player)
	local self = setmetatable({}, DanceController)
	self.Player = Player
	self.Animator = nil
	self.PlayingDance = nil
	self.SynchronizedTo = nil
	self.Connections = {}
	self.SynchronizedPlayers = {}
	
	Player.CharacterAdded:Connect(function(Character)
		self:setEvents(Character)
	end)
	
	Player.CharacterRemoving:Connect(function() 
		for _, Controller in pairs(self.SynchronizedPlayers) do
			Controller:stopPlayingDance()
		end
	end)
	
	local OnPlayerRemoving;
	OnPlayerRemoving = Players.PlayerRemoving:Connect(function(Player)
		if not (Player == self.Player) then return end;
		OnPlayerRemoving:Disconnect()
		
		for _, Controller in pairs(self.SynchronizedPlayers) do
			Controller:unsync()
		end
		
		self = nil
	end)
	
	DanceController.Catalog[self.Player] = self
	return self
end

function DanceController:setEvents(Character)
	for _, Connection in pairs(self.Connections) do 
		Connection:Disconnect()
	end
	table.clear(self.Connections)
	
	self.Animator = Character:WaitForChild(""Humanoid""):WaitForChild(""Animator"")
	
	table.insert(self.Connections, self.Animator.AnimationPlayed:Connect(function(LTrack : AnimationTrack)
		if not LTrack:GetAttribute(""CanSync"") then return end;
		
		for _, Controller in pairs(self.SynchronizedPlayers) do 
			if not Controller.Animator then return end;
			
			Controller:stopPlayingDance()
			
			local Track : AnimationTrack = Controller.Animator:LoadAnimation(LTrack.Animation)
			Controller.PlayingDance = Track
			Track:SetAttribute(""CanSync"", true)
			Track:Play()
			
			local OnTrackStopped;
			OnTrackStopped = LTrack.Stopped:Connect(function()
				OnTrackStopped:Disconnect()
				
				if Controller.PlayingDance == Track then 
					Controller:stopPlayingDance()
					
				else
					Track:Stop()
					Track:Destroy()
				end
			end)
		end
	end))
end

function DanceController:playDance(Animation)
	self:stopPlayingDance()

	local Track = self.Animator:LoadAnimation(Animation)
	Track:SetAttribute(""CanSync"", true)
	Track:Play()

	self.PlayingDance = Track
end

function DanceController:stopPlayingDance()
	if not self.PlayingDance then return end;
	self.PlayingDance:Stop()
	self.PlayingDance:Destroy()
	self.PlayingDance = nil
end

function DanceController:sync(Player)
	if Player == self.Player then return end;
	local Leader = DanceController.getLeaderFromPlayer(Player)
	local Controller = DanceController.getDanceControllerFromPlayer(Player)
	
	if not Controller or Controller.SynchronizedPlayers[self.Player] or Leader == self or Controller.SynchronizedTo == self.Player then return end;
	
	self:stopPlayingDance()
	if self.SynchronizedTo then self:unsync() end;
	self.Player:SetAttribute(""Synchronized"", true)
	self.SynchronizedTo = Player
	
	Controller.SynchronizedPlayers[self.Player] = self

	if Leader.PlayingDance then Leader.PlayingDance:Stop() Leader.PlayingDance:Play() end;
	
	return true
end

function DanceController:unsync()
	if not self.SynchronizedTo then return end;
	local Controller = DanceController.getDanceControllerFromPlayer(self.SynchronizedTo)
	Controller.SynchronizedPlayers[self.Player] = nil
	self.SynchronizedTo = nil
	
	self.Player:SetAttribute(""Synchronized"", nil)
	self:stopPlayingDance()
end

function DanceController.getDanceControllerFromPlayer(Player : Player)
	return DanceController.Catalog[Player]
end

function DanceController.getLeaderFromPlayer(Player : Player)
	local Controller = DanceController.getDanceControllerFromPlayer(Player)
	if not Controller.SynchronizedTo then return Controller end

	return DanceController.getLeaderFromPlayer(Controller.SynchronizedTo)
end

return DanceController"
VqKBtNFt,Cheese Board,Rejuan706,OpenGL Shading,Monday 29th of May 2023 12:47:41 PM CDT,"#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <cmath>

#define white 1
#define black 0

void reshape(int w, int h)
{
    glClearColor(0.0, 0.5, 0.0, 0.0f);
    glViewport(0, 0 ,w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    float h2w= (float)h / (float) w;
    float w2h= (float)w / (float) h;

    if(w<=h)
    {
        gluOrtho2D(0.0, 80.0, 0.0, 80.0*h2w);
    }
    else
    {
        gluOrtho2D(0.0*w2h, 80.0, 0.0, 80.0);
    }
    glMatrixMode(GL_MODELVIEW);
}

//void init()
//{
//    glClearColor(0.0, 0.5, 0.0, 0.0f);
//    glMatrixMode(GL_PROJECTION);
//    glLoadIdentity();
//    gluOrtho2D(0.0, 80.0, 0.0, 80.0 );
//    glMatrixMode(GL_MODELVIEW);
//}

void drawboard()
{
    bool state = white;
    for (int i = 0; i<=80; i+=10)
    {
        for (int j = 0; j<=80; j+=10)
        {
            if (state==white)
            {
            glColor3ub(255,255,255);
            state = black;
            }
            else
            {
            glColor3ub(0,0,0);
            state = white;
            }
            glRecti(i,j, i+10,j+10);
        }
    }
}


void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    drawboard();

    glFlush();

}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB);

    glutInitWindowPosition(300,200);
    glutInitWindowSize(500,500);

    glutCreateWindow(""Cheese Board"");
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
//    init();
    glutMainLoop();

    return 0;

}
"
z91U6NKF,Moving Bus,Rejuan706,OpenGL Shading,Monday 29th of May 2023 12:46:56 PM CDT,"#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <cmath>

void reshape(int w, int h)
{
    glClearColor(255,255,255, 0);
    glViewport(0, 0 ,w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    float h2w= (float)h / (float) w;
    float w2h= (float)w / (float) h;

    if(w<=h)
    {
        gluOrtho2D(0.0, 80.0, 0.0, 80.0*h2w);
    }
    else
    {
        gluOrtho2D(0.0*w2h, 80.0, 0.0, 80.0);
    }
    glMatrixMode(GL_MODELVIEW);
}

//void init()
//{
//    glClearColor(0.0, 0.5, 0.0, 0.0f);
//    glMatrixMode(GL_PROJECTION);
//    glLoadIdentity();
//    gluOrtho2D(0.0, 80.0, 0.0, 80.0 );
//    glMatrixMode(GL_MODELVIEW);
//}
void drawCircle(int r, int x_center, int y_center)
{
    int deg =0;
    double theta, x, y;

    glBegin(GL_POLYGON);
    while (deg<360)
    {
        theta = (deg*M_PI)/180;

        x = r*cos(theta) + x_center;
        y = r*sin(theta) + y_center;
        deg++;

        glVertex2d(x , y);
    }
    glEnd();
}
bool ismoving = true;
float bus_pos = 0.0;
int wheelangle = 0;
float bus1=0.0, bus2=-50.0;
void drawbus( float x, float y)
{
    glColor3ub(200, 100, 10);
    glPushMatrix();
    glTranslatef(x, y, 0.0f);
    glTranslatef(bus_pos, 0.0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2i(10,15);
    glVertex2i(10,30);
    glVertex2i(20,30 );
    glVertex2i(20,31);
    glVertex2i(30,31);
    glVertex2i(30,30);
    glVertex2i(39, 30);
    glVertex2i(45, 27);
    glVertex2i(45,15);
    glEnd();

    glColor3ub(100, 100, 100);
    glRecti(16,20, 22,25);
    glRecti(24,20, 30,25);
    glRecti(32,20, 38,25);

    glPushMatrix();

    glTranslatef(18,15 ,0);
    glRotatef(wheelangle, 0, 0, 1);
    glTranslatef(-18, -15, 0);
    glColor3ub(0, 0, 0);
    drawCircle(3, 18,15);

    glColor3ub(255,255,255);
    glBegin(GL_LINES);
    glVertex2i(15,15);
    glVertex2i(21,15);
    glVertex2i(18,12);
    glVertex2i(18,18);
    glEnd();

    glPopMatrix();

    glPushMatrix();

    glTranslatef(36,15 ,0);
    glRotatef(wheelangle, 0, 0, 1);
    glTranslatef(-36, -15, 0);
    glColor3ub(0, 0, 0);
    drawCircle(3, 36,15);
    glColor3ub(255,255,255);
    glLineWidth(2);
    glBegin(GL_LINES);
    glVertex2i(33,15);
    glVertex2i(39,15);
    glVertex2i(36,12);
    glVertex2i(36,18);
    glEnd();
    glPopMatrix();

    glPopMatrix();


}

void timer(int value)
{
    if(ismoving)
    {
        bus_pos +=0.1;
        if(bus_pos>130)
        (bus_pos = -40);
        wheelangle -=10;
    }

    glutPostRedisplay();
    glutTimerFunc(10, timer, 0);
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    //glLoadIdentity();

    drawbus(bus1, 0.0);
    drawbus(bus2, 0.0);

    glFlush();

}

void keyboard(unsigned char key, int x, int y)
{
    switch(key)
    {
        case 'a':

            ismoving= false;
            glutPostRedisplay();
            break;

        case 's':

            ismoving = true;
            glutPostRedisplay();
            break;

    }
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB);

    glutInitWindowPosition(200,0);
    glutInitWindowSize(1000,700);

    glutCreateWindow(""Bus"");
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutTimerFunc(0, timer, 0);
//    init();
    glutMainLoop();

    return 0;

}"
h8br8tXx,Draw moving Circle,Rejuan706,OpenGL Shading,Monday 29th of May 2023 12:45:55 PM CDT,"#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <cmath>

void init()
{
    glClearColor(0, 0 , 0 , 0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0.0, 20.0, 0.0, 20.0 );
    glMatrixMode(GL_MODELVIEW);
}

void drawCircle(int r, int x_center, int y_center)
{
    int deg =0;
    double theta, x, y;

    glBegin(GL_POLYGON);
    while (deg<360)
    {
        theta = (deg*M_PI)/180;

        x = r*cos(theta) + x_center;
        y = r*sin(theta) + y_center;
        deg++;

        glVertex2d(x , y);
    }
    glEnd();
}

int angle= 0;
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3ub(255,255,255);
    drawCircle(3, 5, 5);

    glPushMatrix();
    glColor3ub(0,0,0);
    glTranslatef(5,5,0);
    glRotatef(angle, 0, 0, 1);
    glTranslatef(-5,-5,0);
    glLineWidth(2.0);
    glBegin(GL_LINES);
    glVertex2i(2,5);
    glVertex2i(8,5);

    glVertex2i(5,2);
    glVertex2i(5,8);
    glEnd();
    glPopMatrix();

    glFlush();

}
void update(int value)
{
    angle -= 10;

    glutPostRedisplay();
    glutTimerFunc(50,update, 0);
}


int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB);

    glutInitWindowPosition(300,200);
    glutInitWindowSize(500,500);

    glutCreateWindow(""Circle"");
    glutDisplayFunc(display);
    glutTimerFunc(0,update, 0);
    init();
    glutMainLoop();

    return 0;

}
"
pGukhw3M,BigInt,Seredenko-V,C++,Monday 29th of May 2023 12:37:20 PM CDT,"#include <iostream>
#include <vector>
#include <stdexcept>

using namespace std;

namespace big_int {

	class BigInt {
	public:
		BigInt() = default;

		BigInt(const vector<int16_t>& digits)
			: digits_(digits.size()) {
			// цифра должна состоять из одной цифры (с) Конфуций
			for (size_t i = 0; i < digits.size(); ++i) {

			}
		}

		BigInt& operator*=(const BigInt& other) {
			// реализация
			*this;
		}

		const vector<int16_t>& GetDigits() const {
			return digits_;
		}

	private:
		vector<int16_t> digits_{ 0 };
		bool natural_ = true;
	};

	BigInt operator+(const BigInt& lhs, const BigInt& rhs);
	BigInt operator-(const BigInt& lhs, const BigInt& rhs);
	BigInt operator*(const BigInt& lhs, const BigInt& rhs);
	BigInt operator/(const BigInt& lhs, const BigInt& rhs);

	ostream& operator<<(ostream& out, const BigInt& value) {
		for (const int& digit : value.GetDigits()) {
			out << digit;
		}
		return out;
	}

	// возведение в степень exp
	BigInt Pow(const BigInt& value, int exp);

	namespace tests {
		void TestConstuctor();
		void TestOperatorSum();
		void TestPow();
		void AllTests();
	} // namespace tests

} // namespace big_int

int main() {
	using namespace big_int;
	int16_t value = 48;
	cout << value << endl;
	BigInt first({1,5,7,6,6,7,7,8,8,8,4,3,5,6,3});
	cout << first << endl;
	return 0;
}"
b768nFwE,postcomponent1,kklevi,TypeScript,Monday 29th of May 2023 12:36:21 PM CDT,"import {Component, OnInit} from '@angular/core';
import {Post} from ""../../_models/post"";
import {PostService} from ""../../post.service"";

@Component({
  selector: 'app-list-posts',
  templateUrl: './list-posts.component.html',
  styleUrls: ['./list-posts.component.scss']
})
export class ListPostsComponent implements  OnInit{

  subjectId:string=''
  posts: Post[]
  constructor(private postService: PostService, posts:Post[], subjectId:string) {
    this.posts=[];
  }

  ngOnInit(): void {
    this.postService.getPosts(this.subjectId)
  }
}
"
6h81agRu,Untitled,dllbridge,C,Monday 29th of May 2023 12:29:24 PM CDT,"

//  Все значения в числовом ряду (массиве) различны и > 0. 
//                                            
//  Ноль - это признак завершения последовательности данных в массиве.
//
//  Функция не должна изменять содержимоt массива ai[],
//
//  Требуется проинициализировать массив указателей pai[] адресами элементов 
//                    ai[] в порядке их (значений эл-тов ai[] ) возрастания.                                                                         
//   
//  Код файла ""main.c"" можно форматировать ""под себя"", но смысл желательно 
//    оставить прежним, чтобы убедиться в работоспособности Вашего варианта 
//                                                         функции ""FindMAX"".  


#include   <stdio.h>
#include  ""secret.h""  // здесь прототип функции int FindMAX(int *, int **);  


////////////////////////////////////////////////////////////////////
int main()                                                        // 
{
	
	int *pai[23],
          ai[23] = {33, 22, 7, 99922222, 1, 334, 2, 777777, 55, 
	                61, 17, 72, 8, 11, 34, 4, 111000222, 12, 0},
               i,  cnt = FindMAX(ai, pai);                                              
	for(i = 0; i < cnt; i++)
	{

		printf(""  ai[%2d] = %9d  "", i,   ai[i]); 			
		printf(""*pai[%2d] = %9d\n"", i, *pai[i]); 		

    }   getchar(); 
}






"
62S9kPTh,Untitled,dllbridge,C,Monday 29th of May 2023 12:23:17 PM CDT,"

#include   <stdio.h>




int nArr[12];



////////////////////////////////////////////////////
int main()                                        // 
{
	

	
	int *p = nArr;
	
	printf(""%d\n"",  nArr);
	printf(""%d\n"",  p   );	
	
	nArr[7] = 17;
	
	for(int i = 0; i < 12; i++) printf(""%2d\n"",   p[i] );
	
}






















/*
#include   <stdio.h>





int foo();

int (*f)() = foo;


////////////////////////////////////////////////////
int main()                                        // 
{
	
 
	printf(""%d\n"",   f() );
	printf(""%d\n"", foo   );

}





/////////////////////////////////////////////////////////////
int foo()
{
	
return 7 + 3;	
}

*/









/*

#include   <stdio.h>









////////////////////////////////////////////////////
int main()                                        // 
{
	
	int   n = 77,
	     *p = &n;
	     
	int  &a =  n;      
	
	
	printf(""%d\n"", n );
	
	printf("" p = %d\n"",  p );
	printf(""*p = %d\n"", *p );
	printf(""&a = %d\n"", &a );
}



*/











/*

#include   <stdio.h>





 __int16   n;

float f;


////////////////////////////////////////////////////
int main()                                        // 
{

    n = 32760;
    
    printf(""%d\n"", sizeof(n) );
    
    
    
    for(int i = 32760; i < 32790; i++ )
    {
		printf(""%d\n"", n++);
	}
}

*/



"
EgxqeXqr,Untitled,MELAMOURI,C,Monday 29th of May 2023 12:16:32 PM CDT,"#include <Wire.h>
#include <BH1750.h>
#include <LiquidCrystal_I2C.h>

BH1750 lightMeter;
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  Wire.begin();
  lightMeter.begin();
  lcd.begin();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print(""BH1750 Test"");
  lcd.setCursor(0, 1);
  lcd.print(""Please wait..."");
  delay(3000);
  lcd.clear();
}

void loop() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Light Intensity "");
  lcd.setCursor(5, 1);
  float lux = lightMeter.readLightLevel();
  lcd.print(lux);
  lcd.print("" Lux"");
  delay(2000);
}
"
X3LKc6mb,Untitled,torokt21,TypeScript,Monday 29th of May 2023 12:13:38 PM CDT,"import { Injectable } from '@angular/core';
import {HttpClient} from ""@angular/common/http"";
import {Post} from ""./_models/post"";
 
@Injectable({
  providedIn: 'root'
})
export class PostService {
  backendUrl: string = 'https://localhost:7015';

  constructor(private http: HttpClient) {
  }
 
  getPosts(subjectId: string): void {
    return this.http.get<Post[]>('https://localhost:7015/api/PostsApi/Details/' + subjectId);
  }
}
 "
46WXYCJD,Untitled,MELAMOURI,C,Monday 29th of May 2023 12:11:50 PM CDT,"#include <LiquidCrystal.h>
#include <Wire.h>

LiquidCrystal lcd(2, 3, 4, 5, 6, 7);
int BH1750address = 0x23;
byte buff[2];

void setup() {
  Wire.begin();
  lcd.begin(16, 2);
  lcd.print(""  BH1750 Light  "");
  lcd.setCursor(0, 1);
  lcd.print(""Intensity Sensor"");
  delay(2000);
  lcd.clear();
}

void loop() {
  int i;
  uint16_t value = 0;
  BH1750_Init(BH1750address);
  delay(200);

  if (2 == BH1750_Read(BH1750address)) {
    value = ((buff[0] << 8) | buff[1]) / 1.2;
    lcd.setCursor(0, 0);
    lcd.print(""Intensity in LUX"");
    lcd.setCursor(6, 1);
    lcd.print(value);
    lcd.print(""   "");
  }
  delay(150);
}

int BH1750_Read(int address) {
  int i = 0;
  Wire.beginTransmission(address);
  Wire.requestFrom(address, 2);
  while (Wire.available()) {
    buff[i] = Wire.read();
    i++;
  }
  Wire.endTransmission();
  return i;
}

void BH1750_Init(int address) {
  Wire.beginTransmission(address);
  Wire.write(0x10);  // Power on the sensor
  Wire.endTransmission();

  Wire.beginTransmission(address);
  Wire.write(0x11);  // Set measurement mode to continuous high-resolution mode
  Wire.endTransmission();
}
"
AVm8rQRx,postservice,kklevi,TypeScript,Monday 29th of May 2023 12:07:43 PM CDT,"import { Injectable } from '@angular/core';
import {HttpClient} from ""@angular/common/http"";
import {Post} from ""./_models/post"";

@Injectable({
  providedIn: 'root'
})
export class PostService {
  http: HttpClient
  backendUrl: string = 'https://localhost:7015';
  posts: Post[]
  id: string
  constructor(http: HttpClient, id:string) {
    this.http=http
    this.posts=[];
    this.id=id;
  }

  getPosts(): void {
    this.http
      .get<Post[]>('https://localhost:7015/api/PostsApi/GetPostsofSubject/' + this.id)
      .subscribe(resp => {
        resp.map(x => {
          let p = new Post()
          p.subjectCode = x.subjectCode
          p.id = x.id
          p.content = x.content
          p.editCount = x.editCount
          p.lastEdited = x.lastEdited
          p.siteUserId = x.siteUserId
          p.timestamp = x.timestamp

          this.posts.push(p)
        })
        console.log(this.posts)
      })
  }

}
"
yBjrQiM7,lambda,Seredenko-V,C++,Monday 29th of May 2023 11:50:11 AM CDT,"#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <numeric>
#include <algorithm>
#include <execution>
#include <ctime>
#include <functional>

using namespace std;

int main() {

	vector<int> v{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int sum = accumulate(v.begin(), v.end(), 0);
	cout << sum << endl;
	map<string, int> peoples{{""First""s, 2}, {""Second""s, 8}, {""Ivan""s, 35}};
	int result = accumulate(peoples.begin(), peoples.end(), 0, [](int sum, pair<string, int> people) {
		return sum += people.second;
	});
	cout << result << endl;
	cout << ""=========================""s << endl;
	vector<int> elements(100'000'000u);
	iota(elements.begin(), elements.end(), 0);
	clock_t begin = clock();
	for_each(execution::par, elements.begin(), elements.end(), [](int& elem) {
		elem *= 10;
	});
	clock_t end = clock();
	cout << ""time for_each ""s << end - begin << "" ms""s << endl;

	const double PI = 3.14;
	int value = 5;


	function<void(int&)> func = [&value](int& elem) {
		value = 10;
		//elem = 16;
	};


	func(value);

	cout << value << endl;
	return 0;
}"
iQv1fH42,Crop_Bot_1s,Swat99,Lua,Monday 29th of May 2023 11:37:20 AM CDT,"--Скрипт для робота, для поднятия статов у кропсов или разведения дубликатов (режим задается константой mode)
--Автор: aka_zaratustra осень 2020
local ver = ""1.1.3"" -- версия программы
--Историю версий см. в конце файла

-- схема грядки
--|C1|M1|C2
--|M2|C3|M3
--|C4|M4|C5
--|CH|P0|BR

-- P0 - исходное положение робота. Робот находится на 1 блок выше кропсов (чтобы мог летать над ними), смотрит на север (в сторону грядок). В руках у робота должна быть лопатка Spade. В первом слоте инвентори робота или должны быть палки или он должен быть пустой (робот сам возьмет и положет туда палки)
-- С[n] - дочерние (разводимые) растения
-- M[n] - материнские растения
-- СН - chest, сундук, куда будут помещаться мешочки с семечками и урожай
-- BR - барель с кропсами(палками)

-- В начале работы материнские кропсы должны быть высажены на грядку. Дочерние (разводимые) могут быть высажены, а может быть голая земля.
-- У робота должны в обязательном порядке присутстовать компоненты: Geolyzer, Inventory Upgrade, Inventory Controller Upgrade
-- Рекомендуется для удобства поместить файл с этим скриптом в папку /home/ , а имя файла скрипта добавить в файл /home/.shrc - тогда скрипт будет запускаться при включении робота автоматически
-- Если в бочке кончаются кропсы(палки), робот сломает пустые палки, если они есть на поле и завершит свою работу с ошибкой (чтобы всё поле не сожрали сорняки)
-- Максимальные статы кропсов, выше которых робот поднимать статы выводимых кропсов не будет, задаются константами max_grow и max_gain
-- Стат resistans робот не поднимает, а при возможости опускает до 0
-- Начиная с версии 1.1.3 робот перестал быть уязвим к коллизиям. Нахождение игрока на пути следования робота больше не приводит к потере роботом маршрута. Робот после столкновения с игроком замирает на секунду, после чего продолжает попытку движения.
-- Механизм оценки приемлемости (качества) полученного растения менять в функции howInterestingIsThisCrop(с)
-- При наличии интернет карты в роботе, скрипт в робота можно загрузить командой `pastebin get cZY3P7As -f crop_stats.lua`

-- mode:
-- 1 - режим поднятия статов кропсов
-- 2 - режим разведения дубликатов кропсов (НЕ ТЕСТИРОВАЛСЯ! НЕ ИСПОЛЬЗОВАТЬ!)
local mode = 1
-- выше заданных здесь значений робот понимать статы не будет
local max_grow = 20 -- если больше 23, то кроп начинает вести себя как сорняк
local max_gain = 28
local grow_kill = 24 -- значение стата grow, при котором и выше которого робот будет убивать растение на корню

local robot = require(""robot"") 
local computer = require(""computer"") 
local component = require(""component"") 
local geo = component.geolyzer
local cropname

local c_cropname = {} --имена дочерних кропов
--статы дочерних кропов
local c_gain = {}
local c_grow = {}
local c_resistans = {} 
local c_size = {} 
local c_maxSize = {} 

-- статус может принимать значения:
-- ""unknown"" - неисследованный. назначается при старте, дальше не используется
-- ""double crop"" - жердочки
-- ""growing"" - растущий кроп, у которого статы или дошли до целевых или лучше материнских. после вырастания или отправится в сундук или может заменить собой материнский кроп
local c_status = {""unknown"", ""unknown"", ""unknown"", ""unknown"", ""unknown""} -- ""unknown"" для всех пяти дочерних кропов


local m_gain = {}
local m_grow = {}
local m_resistans = {}

local error_string
local bestSeedsSlot --слот в инвентори робота с семенами с лучшими статами
local robotLocation -- текущее местонаходение робота. значение из списка: {""С1"", ""С2"", ... , ""С5"", ""M1"", ""M2"", ""M3"", ""M4"", ""P0""}


function robot_error(msg)
	print(""Ошибка: "", msg)
	computer.beep(1000,0.3)
	computer.beep(1000,0.3)
	computer.beep(1000,0.3)
	os.exit()
end

function robotTryForward() -- роботы пытается сделать шаг вперед, до тех пор, пока ему это не удастся
	while robot.forward() == nil do
		print(""Робот столкнулся с препятствием."")
		os.sleep(1) -- останавливаем робота на 1 секунду
	end
end
--------------------------------------
function get_crop_stat(analyze_result, stat_name) --функция - просматривает таблицу скана блока и возвращает значение поля, имя которого передано в stat_name. если не находит, то возвращает nil

	--file = io.open(""log.txt"", ""a"") --файл для лога	

	found = false
	for name, v in pairs(analyze_result) do --просмотрим таблицу реультата анализа кропса
		
		pos = string.find(name, stat_name) 
		--print(pos)
		if pos ~=  nil then -- если строку в метадате нашли
			found = true
			--print(v)
			return v
		end
	end

end

function robotMove_P0_M1()
	--исходное положение P0 смотрит вверх
	robotTryForward()
	robotTryForward()
	robotTryForward()
	--конечное положение M1 смотрит вверх
end
function robotMove_M1_M2()
	--начальное положение M1 смотрит вверх
	robot.turnLeft()
	robotTryForward()
	robot.turnLeft()
	robotTryForward()
	--конечное положение M2 смотрит вниз
end
function robotMove_M2_M3()
    --начальное положение M2 смотрит вниз
    robot.turnLeft()
    robotTryForward()
    robotTryForward()
    --конечное положение M3 смотрит вправо
end
function robotMove_M3_M4()
    --начальное положение M3 смотрит вправо
    robot.turnRight()
    robotTryForward()
    robot.turnRight()
    robotTryForward()
    --конечное положение M4 смотрит влево
end
function robotMove_M4_P0()
    --начальное положение M4 смотрит влево
    robot.turnLeft()
    robotTryForward()
    robot.turnAround()
    --конечное положение P0 смотрит вверх
end
function robotMove_P0_C1()
    --начальное положение P0 смотрит вверх
    robotTryForward()
    robotTryForward()
    robotTryForward()
    robot.turnLeft()
    robotTryForward()
    --конечное положение C1 смотрит влево
end
function robotMove_C1_C4()
    --начальное положение C1 смотрит влево
    robot.turnLeft()
    robotTryForward()
    robotTryForward()
    --конечное положение C4 смотрит вниз
end
function robotMove_C4_C5()
    --начальное положение C4 смотрит вниз
    robot.turnLeft()
    robotTryForward()
    robotTryForward()
    --конечное положение C5 смотрит вправо
end
function robotMove_C5_C2()
    --начальное положение C5 смотрит вправо
    robot.turnLeft()
    robotTryForward()
    robotTryForward()
    --конечное положение C2 смотрит вверх
end
function robotMove_C2_C3()
    --начальное положение C2 смотрит вверх
    robot.turnLeft()
    robotTryForward()
    robot.turnLeft()
    robotTryForward()
    --конечное положение C3 смотрит вниз
end
function robotMove_C3_P0()
    --начальное положение C3 смотрит вниз
    robotTryForward()
    robotTryForward()
	robot.turnAround()
    --конечное положение P0 смотрит вверх
end
function robotGoToParkFrom_M_Crop(m) --едем на парковку. ""m"" - номер материнского кропа с которого мы едем
	if m == 1 then
		--начальное положение M1 смотрит вверх
		robot.turnAround()
		robotTryForward()
		robotTryForward()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрит вверх
	end
	if m == 2 then
		--начальное положение M2 смотрит влево
		robot.turnAround()
		robotTryForward()
		robot.turnRight()
		robotTryForward()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрит вверх
	end
	if m == 3 then
		--начальное положение M3 смотрит вправо
		robot.turnAround()
		robotTryForward()
		robot.turnLeft()
		robotTryForward()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрит вверх
	end
	if m == 4 then
		--начальное положение M4 смотрит влево
		robot.turnLeft()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрит вверх	
	end
end
function robotGoToPark(c) --едем на парковку. ""с"" - номер дочернего кропа с которого мы едем
	if c == 1 then
		--начальное положение C1 смотрит влево
		robot.turnAround()
		robotTryForward()
		robot.turnRight()
		robotTryForward()
		robotTryForward()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрим вверх
	end
	if c == 2 then
		--начальное положение C2 смотрит вверх
		robot.turnLeft()
		robotTryForward()
		robot.turnLeft()
		robotTryForward()
		robotTryForward()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрим вверх
	end
	if c == 3 then
		--начальное положение C3 смотрит вниз
		robotTryForward()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрим вверх
	end
	if c == 4 then
		--начальное положение C4 смотрит вниз
		robot.turnLeft()
		robotTryForward()
		robot.turnRight()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрим вверх
	end
	if c == 5 then
		--начальное положение C5 смотрит вправо
		robot.turnAround()
		robotTryForward()
		robot.turnLeft()
		robotTryForward()
		robot.turnAround()
		--конечное положение P0 смотрим вверх
	end

end
function robotGoTo_M_Crop_FromPark(m) --едем с парковки P0 к материнскому кропу. ""m"" - номер кропа к которому мы едем
	if m==1 then
		--исходное положение P0 смотрит вверх
		robotTryForward()
		robotTryForward()
		robotTryForward()
		--конечное положение M1 смотрит вверх
	end
	if m==2 then
		--начальное положение P0 смотрит вверх
		robotTryForward()
		robotTryForward()
		robot.turnLeft()
		robotTryForward()
		--конечное положение M2 смотрит влево
	end
	if m==3 then
		--начальное положение P0 смотрит вверх
		robotTryForward()
		robotTryForward()
		robot.turnRight()
		robotTryForward()
		--конечное положение M3 смотрит вправо
	end
	if m==4 then
		--начальное положение P0 смотрит вверх
		robotTryForward()
		robot.turnLeft()		
		--конечное положение M4 смотрит влево
	end
end
function robotGoTo_C_Crop_FromPark(c) --едем с парковки P0 к дочернему кропу. ""с"" - номер кропа к которому мы едем
	if c == 1 then
		--начальное положение P0 смотрим вверх
		robotTryForward()
		robotTryForward()
		robotTryForward()
		robot.turnLeft()
		robotTryForward()
		--конечное положение C1 смотрит влево
	end
	if c == 2 then
		--начальное положение P0 смотрим вверх
		robotTryForward()
		robotTryForward()
		robotTryForward()
		robot.turnRight()
		robotTryForward()
		robot.turnLeft()
		--конечное положение C2 смотрит вверх
	end
	if c == 3 then
		--начальное положение P0 смотрим вверх
		robotTryForward()
		robotTryForward()
		robot.turnAround()
		--конечное положение C3 смотрит вниз
	end
	if c == 4 then
		--начальное положение P0 смотрим вверх
		robotTryForward()
		robot.turnLeft()
		robotTryForward()
		robot.turnLeft()
		--конечное положение C4 смотрит вниз
	end
	if c == 5 then
		--начальное положение P0 смотрим вверх
		robotTryForward()
		robot.turnRight()
		robotTryForward()
		--конечное положение C5 смотрит вправо
	end

end
function grabCropsFromBarrel() --пополняем запас палок в роботе из бочки. 
	--возвращает true если после попытки взять палки, есть хотя бы одна палка в роботе
	--возвращает false если палки в роботе и в бочке кончились
	cropsStackSize = 62 --размер стака палок, который робот возит с собой. 62 потому что при уничтожения кропса робот выдерает из земли и палки, и они могут попасть в нецелевой слот
	
	--палки лежат в первом слоте
	returnValue = true
	itemCount = robot.count(1)
	if itemCount < cropsStackSize then --если палок неполный стак, до доберем из бочки
		robot.select(1) --активизируем слот, в котором лежат палки
		robot.turnRight() --повернемся к бочке
		--добираем палок до полного стака
		robot.suck(cropsStackSize-itemCount)
		itemCount = robot.count(1) --смотрим сколько палок в роботе
		if itemCount == 0 then --если палки в роботе кончились
			returnValue = false --возвращаем признак, что ПАЛКИ В РОБОТЕ И БОЧКЕ КОНЧИЛИСЬ
		elseif itemCount < cropsStackSize then --если после попытки взять палки из бочки, мы имеем меньше стака палок в роботе
			print(""В бочке закончились палки!"")
			computer.beep(1000,1)
			returnValue = true
		else
			returnValue = true
		end
		robot.turnLeft() --повернемся обратно к кропсам
	end
	return returnValue
end
function dropToChest() --все что есть в инвентори, скидываем в сундук
	--начальная позиция - P0 смотрим вверх
	robot.turnLeft()
	for i=2,16 do 
		item = component.inventory_controller.getStackInInternalSlot(i)
		if item then --если в слоте что-то есть
			robot.select(i)
			robot.drop() --сдаем все из текущего слота в сундук
		end
	end
	robot.turnRight() --поворачиваемся к с0
	robot.select(1)
end
function destroyAllDoubleCrops() --уничтожим все двойные кропсы
	--пройдемся по массиву статусов кропсов и у всех кропсов, у которых статус = ""жердочки"", съездим к ним и сломаем их
	for c=1,5 do
		if c_status[c] == ""double crop"" then
			robotGoTo_C_Crop_FromPark(c)
			robot.swingDown() --ломаем кропсы
			robotGoToPark(c)
		end
	end
	
end
function howInterestingIsThisCrop(c) --оценивает полезность нового растения сравнивая статы дочернего ростения [с] со статами материнский растений . тип растения во внимание не принимается
--возвращает: 0 - негодное
--            -1 - годно для сохранения
--            m - превосходит материнское, где 1<m<4 - номер материнского кропа, который нужно заменить новым растением 

	if c_grow[c] >= grow_kill then --если grow у дочернего растения достигло опасного значения, то это растение считаем негодным
		return 0
	end
	
	--если статы нового растения больше максимально разрешенных
	if (c_gain[c] > max_gain) or (c_grow[c] > max_grow) then
		--то считаем это растение приемлемым
		print(""Полученое растение, превышает максимальные статы."")
		return -1
	end

	--сравним статы нового растения со статами материнских растений
	maxDifference = 0 --самая лучшая разница в качестве
	m_crop_maxDifference = 0 --материнский кроп с самой лучшей разницей в качестве
	for m = 1, 4 do
		--сравниваем статы полученного растения со статами материнских растений
		difference = (c_gain[c] + c_grow[c] - c_resistans[c]) - (m_gain[m] + m_grow[m] - m_resistans[m])
		if (difference > 0) and (difference > maxDifference) then --если растение лучше и это лучшая разница в качестве
			maxDifference = difference --обновим лучшую разницу в качестве
			m_crop_maxDifference = m --материнский кроп с самой лучшей разницей в качестве
		end
	end
	if maxDifference>0 then
		--полученное растение лучше чем одно из материнских, а значит нужно пересадить (на самый слабый материнский кроп)
		return m_crop_maxDifference --возвращаем материнский кроп с самой лучшей разницей в качестве
	end
	
	--если мы здесь, значит новое растение не привысило максимальные статы и не лучше чем материнские растения
	--а занчит 	РАСТЕНИЕ ПЛОХОЕ
	return 0

end
function placeDoubleCrops() --ставит новые палки
	component.inventory_controller.equip() --экипируем кропсы(палки)
	robot.useDown() --ставим палку на землю
	robot.useDown() --ставим палку (получаются жердочки для скрещивания)
	component.inventory_controller.equip() --возвращаем в руки лопатку
end
function findSeedsInRobotInventory() --возвращает номер слота в инвентори робота с семечками, если нет семечек, то возвращает 0, а если вообще ничего нет, то возвращает -1
	foundAnything = false
	for i=2,16 do 
		item = component.inventory_controller.getStackInInternalSlot(i)
		if item then --если в слоте что-то есть
			foundAnything = true
			if item.name == ""IC2:itemCropSeed"" then --если в слоте семена
				return i --возвращаем номер слота, в котором семена
			end
		end
	end
	if foundAnything then --если что-то нашли (обычно это урожай), но семян не было
		return 0
	end
	return -1 --вообще ничего нет
end
function analizeAndProceed(c) --функция анализа и обработки кропа. с - номер кропа.

	
	analyze_result = geo.analyze(0) --анализируем блок под роботом	
	c_cropname[c] = get_crop_stat(analyze_result, ""crop:name"")
	if c_cropname[c] ~= nil then -- если перед нами что-то вывелось, а не пустые палки
		
		
		--получаем остальные статы кропа
		c_gain[c] = get_crop_stat(analyze_result, ""crop:gain"")
		c_grow[c] = get_crop_stat(analyze_result, ""crop:grow"")
		c_resistans[c] = get_crop_stat(analyze_result, ""crop:resistance"")
		c_size[c] = get_crop_stat(analyze_result, ""crop:size"")
		c_maxSize[c] = get_crop_stat(analyze_result, ""crop:maxSize"")

		if c_status[c] == ""double crop"" or c_status[c] == ""unknown"" then  --если статус растения был двойные палки, значит появилось новое растение
			print(""Новый кроп С""..c.."": ""..c_cropname[c]..""  ""..c_grow[c]..""  ""..c_gain[c]..""  ""..c_resistans[c]) -- ""Новый кроп С1:    reed""
			--print(c_grow[c], c_gain[c], c_resistans[c], ""size: ""..c_size[c]..""/""..c_maxSize[c]) --""23   31   0   size: 2/3""
		end
		
		--если прокнуло растение другого вида, выкапываем его лопаткой и отвозим в сундук
		if c_cropname[c] ~= cropname then
			robot.useDown()--по умолчанию у нас в руках лопатка, юзаем ее
			component.inventory_controller.equip() --экипируем кропсы(палки)
			robot.useDown() --ставим палку (получаются жердочки для скрещивания)
			component.inventory_controller.equip() --возвращаем в руки лопатку
			c_status[c] = ""double crop"" --устанавливаем статус растения - жердочки
			
			--после копки проверим инвентори робота
			foundAnything = false
			for i=2,16 do 
				item = component.inventory_controller.getStackInInternalSlot(i)
				if item then --если в слоте что-то есть
					foundAnything = true
				end
			end
			
			if foundAnything or robot.count(1) == 0 then --если что-то выкопалось от этого непрофильного растения или закончились палки
				robotGoToPark(c) --едем на парковку	
				if foundAnything then --если есть в инветори что-то выкопанное, сдаем в сундук
					dropToChest()
				end
				--пополняем запас палок в роботе
				if grabCropsFromBarrel() then 
				else --если палки кончились
					destroyAllDoubleCrops() --уничтожим все двойные кропсы
					robot_error(""ПАЛКИ КОНЧИЛИСЬ!"") --заканчиваем работу с ошибкой
				end
				robotGoTo_C_Crop_FromPark(c)
			end
		else--если растение нужного типа
			if c_status[c] == ""double crop"" or c_status[c] == ""unknown"" then  --если статус растения был двойные палки, значит появилось новое растение
				--оценим полезность нового растения
				interest = howInterestingIsThisCrop(c)
				
				--выведем инфу о новом кропе
				interestString = """"
				if interest == 0 then
					interestString = ""негодное""
				elseif interest == -1 then
					interestString = ""годное, статы дошли до целевых""
				else
					interestString = ""превосходит материнское М""..interest
				end
				print(""Полезность:""..interestString)
				
				if interest == 0 then -- растение с плохими статами
					--уничтожаем растение
					robot.swingDown() --ломаем кропсы
					placeDoubleCrops() --ставим новые палки
					c_status[c] = ""double crop"" --устанавливаем статус растения - жердочки
					--посмотрим, попали ли семечки в инвентори
					seedSlot = findSeedsInRobotInventory() --находим слот с семечками
					if seedSlot > 0 then --если семечки есть
						--отвезем эти семечки домой
						robotGoToPark(c) --едем на парковку
						dropToChest() --сбрасываем всё в сундук
						grabCropsFromBarrel() --добираем палок из бочки
						robotGoTo_C_Crop_FromPark(c) --возвращаемся на кроп
					end
				else --растение со статами превышающими материнские или статы дошли до целевых
					c_status[c] = ""growing"" --устанавливаем статус растущего кропа
					--оставляем его в покое, пусть растет
				end
			
			else -- c_status[c] == ""growing"" --растение уже ранее сканировалось
				
				if c_size[c] == c_maxSize[c] then --если растение доросло
					robot.swingDown() --ломаем кропсы, собираем урожай
					placeDoubleCrops() --ставим новые палки
					c_status[c] = ""double crop"" --устанавливаем статус растения - жердочки
					
					--посмотрим, попали ли семечки в инвентори
					seedSlot = findSeedsInRobotInventory() --находим слот с семечками
					if seedSlot > 0 then --если семечки есть
						--делаем повторную оценку полезности
						interest = howInterestingIsThisCrop(c)
						if interest == -1 then --годное, статы дошли до целевых
							--везем в сундук
							robotGoToPark(c) --едем на парковку
							dropToChest() --сбрасываем всё в сундук
							grabCropsFromBarrel() --добираем палок из бочки
							robotGoTo_C_Crop_FromPark(c) --возвращаемся на кроп
							
						elseif interest > 0 then --превосходит материнское
							--меняем материнское ростение на текущее дочернее
							print(""Заменяем кроп М""..interest.."":  ""..m_grow[interest]..""  ""..m_gain[interest]..""  ""..m_resistans[interest].."" -> ""..c_grow[c]..""  ""..c_gain[c]..""  ""..c_resistans[c])
							--обновляем статы материнского растения
							m_grow[interest] = c_grow[c]
							m_gain[interest] = c_gain[c]
							m_resistans[interest] = c_resistans[c]
							--едем менять материнское растение
							robotGoToPark(c) --едем через паркинг. прямых маршрутов от С до M робот не знает
							robotGoTo_M_Crop_FromPark(interest) --едем на материнский кропс, который будем менять
							robot.swingDown() --ломаем кропсы, собираем урожай
							component.inventory_controller.equip() --экипируем кропсы(палки)
							robot.useDown() --ставим палку на землю
							component.inventory_controller.equip() --возвращаем в руки лопатку
							robot.select(seedSlot) --делаем активным слот с семенами, которые мы собираемся сажать
							component.inventory_controller.equip() -- берем семена в руки
							robot.useDown() --сажаем
							component.inventory_controller.equip() -- берем обратно лопатку в руки
							robot.select(1)
							robotGoToParkFrom_M_Crop(interest) --едем на паркинг
							dropToChest() --сбрасываем всё в сундук
							grabCropsFromBarrel() --добираем палок из бочки
							robotGoTo_C_Crop_FromPark(c) --возвращаемся на кроп
						end
					end
					
					
				end
			end
		
		
		end	
		
		
			
		
		

	
	else -- если перед нами или пустые палки или воздух
		if c_status[c] == ""unknown"" then -- если мы сканируем этот кроп впервые
			if get_crop_stat(analyze_result, ""name"") == ""IC2:blockCrop"" then --если перед нами двойные палки
				c_status[c] = ""double crop""
			else --перед нами не растение и не двойные палки. значит перед нами воздух
				--ставим палки
				component.inventory_controller.equip() --экипируем кропсы(палки)
				robot.useDown() --ставим палку на землю
				robot.useDown() --ставим палку (получаются жердочки для скрещивания)
				component.inventory_controller.equip() --возвращаем в руки лопатку
				c_status[c] = ""double crop"" --устанавливаем статус растения - жердочки
			end
			
		end
		
	end	

end



----------------------------------------------------
--Шаг 1
--Начинаем работать 
print(""--------------------------------------""); --выводим приветствие
print(""Скрипт для робота, для поднятия статов у кропсов или разведения дубликатов запущен."");
print(""Версия: ""..ver)
if mode == 1 then -- 1 - режим поднятия статов кропсов
	print(""Выбран режим поднятия статов кропсов."");
else -- 2 - режим разведения дубликатов кропсов
	print(""Выбран режим разведения дубликатов кропсов."");
end
print(""Шаг 1. Проверка входящих условий.""); 

-- проверяем правильность входящий условий

--В руках должна быть лопатка
robot.select(1) --выбираем первый слот инвентори, на случай если при начале работы был выбран другой слот
component.inventory_controller.equip() --убираем лопатку к себе в инвентори и смотрим, лопатка ли это?
item = component.inventory_controller.getStackInInternalSlot(1)
if item == nil then --если в слоте ничего нет
	robot_error(""Нет лопатки в слоте для инструмента!"")
end
if item.name ~= ""berriespp:itemSpade"" then --если в слоте что-то есть, но это не лопатка
	robot_error(""Нет лопатки в слоте для инструмента!"")
end
component.inventory_controller.equip() --лопатку возвращаем в слот для инструмента

--print(""Входящие условия соблюдены."")

----------------------------------------------------
--Шаг 2
if mode == 1 then -- 1 - режим поднятия статов кропсов
	print(""Шаг 2. Сканируем материнские кропсы и запоминаем их статы."")

	--Сканируем материнские кропсы и запоминаем их статы
	--Исходная позиция - робот стоит на P0

	-- кроп M1
	robotMove_P0_M1()
	analyze_result = geo.analyze(0)
	cropname = get_crop_stat(analyze_result, ""crop:name"")
	m_gain[1] = get_crop_stat(analyze_result, ""crop:gain"")
	m_grow[1] = get_crop_stat(analyze_result, ""crop:grow"")
	m_resistans[1] = get_crop_stat(analyze_result, ""crop:resistance"")
	print(""M1:"", cropname, m_grow[1], m_gain[1], m_resistans[1])

	-- кроп M2
	robotMove_M1_M2()
	analyze_result = geo.analyze(0)
	cropname = get_crop_stat(analyze_result, ""crop:name"")
	m_gain[2] = get_crop_stat(analyze_result, ""crop:gain"")
	m_grow[2] = get_crop_stat(analyze_result, ""crop:grow"")
	m_resistans[2] = get_crop_stat(analyze_result, ""crop:resistance"")
	print(""M2:"", cropname, m_grow[2], m_gain[2], m_resistans[2])
	
	-- кроп M3
	robotMove_M2_M3()
	analyze_result = geo.analyze(0)
	cropname = get_crop_stat(analyze_result, ""crop:name"")
	m_gain[3] = get_crop_stat(analyze_result, ""crop:gain"")
	m_grow[3] = get_crop_stat(analyze_result, ""crop:grow"")
	m_resistans[3] = get_crop_stat(analyze_result, ""crop:resistance"")
	print(""M3:"", cropname, m_grow[3], m_gain[3], m_resistans[3])

	-- кроп M4
	robotMove_M3_M4()
	analyze_result = geo.analyze(0)
	cropname = get_crop_stat(analyze_result, ""crop:name"")
	m_gain[4] = get_crop_stat(analyze_result, ""crop:gain"")
	m_grow[4] = get_crop_stat(analyze_result, ""crop:grow"")
	m_resistans[4] = get_crop_stat(analyze_result, ""crop:resistance"")
	print(""M4:"", cropname, m_grow[4], m_gain[4], m_resistans[4])

	
	robotMove_M4_P0() --возвращаем робота в исходное положение

end
----------------------------------------------------
--Шаг 3
if mode == 1 then -- 1 - режим поднятия статов кропсов
	print(""Шаг 3. Приступаем к поднятию статов."");
else -- 2 - режим разведения дубликатов кропсов
	print(""Шаг 2. Приступаем к разведению дубликатов кропсов."");
end

while true do --главный цикл
	
	--пополняем запас палок в роботе
	if grabCropsFromBarrel() then 
	else --если палки кончились
		destroyAllDoubleCrops() --уничтожим все двойные кропсы
		robot_error(""ПАЛКИ КОНЧИЛИСЬ!"")
	end
	
	--едем сканить дочерние кропсы
	robotMove_P0_C1()
	analizeAndProceed(1)
	robotMove_C1_C4()
	analizeAndProceed(4)
	robotMove_C4_C5()
	analizeAndProceed(5)
	robotMove_C5_C2()
	analizeAndProceed(2)
	robotMove_C2_C3()
	analizeAndProceed(3)
	robotMove_C3_P0() --конечное положение P0 смотрим вверх
	
	--os.exit()
	

	os.sleep(1)
end

os.exit()

--История версий:

--Версия 1.1.3
--Устранена уязвимость к коллизиям. Нахождение игрока на пути следования робота больше не приводит к потере роботом маршрута. Робот после столкновения с игроком замирает на секунду, после чего продолжает попытку движения
--Добавлена история версий в файл скрипта робота"
B1ERTyn3,kispython11,Te4nick,Python,Monday 29th of May 2023 11:34:26 AM CDT,"from struct import unpack_from, calcsize


class Types:
    char = 'c'
    int8 = 'b'
    uint8 = 'B'
    int16 = 'h'
    uint16 = 'H'
    int32 = 'i'
    uint32 = 'I'
    int64 = 'q'
    uint64 = 'Q'
    float = 'f'
    double = 'd'


class BinaryReader:
    def __init__(self, stream, offset, order="">""):
        self.stream = stream
        self.offset = offset
        self.order = order

    def jump(self, offset):
        reader = BinaryReader(self.stream, offset, self.order)
        return reader

    def read(self, pattern):
        size = calcsize(pattern)
        data = unpack_from(self.order + pattern, self.stream, self.offset)
        self.offset += size
        return data[0]


def read_d(reader):
    d1 = reader.read(Types.int8)
    d2 = reader.read(Types.int8)
    d3 = reader.read(Types.int8)
    d4 = reader.read(Types.uint64)
    return dict(D1=d1, D2=d2, D3=d3, D4=d4)


def read_c(reader):
    c1 = reader.read(Types.int32)
    c2 = reader.read(Types.int8)
    d_arr_size = reader.read(Types.uint32)
    d_arr_address = reader.read(Types.uint32)
    d_arr_reader = reader.jump(d_arr_address)
    d_arr_addresses = \
        [d_arr_reader.read(Types.uint32) for _ in range(d_arr_size)]
    c3 = [read_d(d_arr_reader.jump(d_addr)) for d_addr in d_arr_addresses]
    int32_arr_size = reader.read(Types.uint32)
    int32_arr_address = reader.read(Types.uint32)
    int32_arr_reader = reader.jump(int32_arr_address)
    c4 = [int32_arr_reader.read(Types.int32) for _ in range(int32_arr_size)]
    c5 = reader.read(Types.int8)
    c6 = reader.read(Types.uint64)
    c7 = [reader.read(Types.uint8) for i in range(7)]
    c8 = reader.read(Types.int32)
    return dict(C1=c1, C2=c2, C3=c3, C4=c4, C5=c5, C6=c6, C7=c7, C8=c8)


def read_b(reader):  # NOTE: DONE
    c_offset = reader.read(Types.uint16)
    c_reader = reader.jump(c_offset)
    b1 = read_c(c_reader)
    b2 = reader.read(Types.uint16)
    return dict(B1=b1, B2=b2)


def read_a(reader):
    a1 = read_b(reader)
    a2 = reader.read(Types.uint8)
    a3 = reader.read(Types.int32)
    arr_size = reader.read(Types.uint32)
    arr_address = reader.read(Types.uint32)
    arr_reader = reader.jump(arr_address)
    a4 = [arr_reader.read(Types.uint64) for _ in range(arr_size)]
    a5 = reader.read(Types.int8)
    return dict(A1=a1, A2=a2, A3=a3, A4=a4, A5=a5)


def main(stream):
    return read_a(BinaryReader(stream, 5))
"
JAZxB71v,邀您一起看：云口令,xiaomianao666,JavaScript,Monday 29th of May 2023 11:32:52 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥云口令@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5LqR5Y+j5LukXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8vd3d3LjEyM3Bhbi5jb20vcy9mYWpBLWhncVFoLmh0bWxcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLkupHlj6Pku6QifQ==
GHpkPrB9,first - array and function,Radotsveta,C,Monday 29th of May 2023 11:18:32 AM CDT,"#include <stdio.h>
#include <string.h>

/*Student:
- name (string)
- id (string)
- age (int)
- grades (int array)
*/

typedef struct
{
    char name[50];
    char id[10];
    int age;
    int grades[5];
}Student;

typedef struct
{
    int x;
    int y;
} Point;

void print_student(Student student);

void print_points(Point points[]);
//void print_points(Point points[10]);
//void print_points(Point *points);

int main(void)
  {
    Student kevin;

    strcpy(kevin.name, ""Kevin"");
    strcpy(kevin.id, ""16805632"");
    kevin.age = 40;
    kevin.grades[0] = 2;
    kevin.grades[1] = 3;
    kevin.grades[2] = 4;
    kevin.grades[3] = 5;
    kevin.grades[4] = 6;

    print_student(kevin);
    printf(""\n"");

    Point p1 =
        {
        .x = 5,
        .y = 10
        };
    Point p2 =
        {
            .x = 11,
            .y = 2
            };
    Point p3 =
        {
        .x = 14,
        .y = 15
        };

    printf(""p1.x: %d\n"", p1.x);
    printf(""p1.y: %d\n"", p1.y);
    printf(""p2.x: %d\n"", p2.x);
    printf(""p2.y: %d\n"", p2.y);
    printf(""p3.x: %d\n"", p3.x);
    printf(""p3.y: %d\n"", p3.y);

    Point points[10];

    for (int i = 0; i < 10; i++)
    {
        points[i].x = i;
        points[i].y = 10 - i;
    }

    printf(""\n"");
    print_points(points);

    return 0;
}

void print_points(Point points[])
{
    for (int i = 0; i < 10; i++)
        printf(""p%d = (%d, %d)\n"", i, points[i].x,
                                   points[i].y);
}

void print_student(Student student)
{
    printf(""Name: %s\n"", student.name);
    printf(""ID: %s\n"", student.id);
    printf(""Age: %d\n"", student.age);
    printf(""Grade1: %d\n"", student.grades[0]);
    printf(""Grade2: %d\n"", student.grades[1]);
    printf(""Grade3: %d\n"", student.grades[2]);
    printf(""Grade4: %d\n"", student.grades[3]);
    printf(""Grade5: %d\n"", student.grades[4]);
}"
RQxr6mS6,Inforisk API Request,brindsoft,Python,Monday 29th of May 2023 10:56:59 AM CDT,"import requests

url = ""http://inforisk-api.infomarket.ma/api/login""
login_data = {
    ""cliLogin"": ""odoo_sonic_test"",
    ""cliPasswordClair"": ""128738720927""
}

response = requests.post(url, json=login_data)

if response.status_code == 200:
    print(""Login successful!"")
    print(""Response:"")
    print(response.json())
else:
    print(""Login failed. Status code:"", response.status_code)

















{
	""info"": {
		""_postman_id"": ""1e1b9b1e-71ef-4c70-9dd7-a934241a2330"",
		""name"": ""Inforisk API"",
		""schema"": ""https://schema.getpostman.com/json/collection/v2.1.0/collection.json""
	},
	""item"": [
		{
			""name"": ""http://inforisk-api.infomarket.ma/api/login"",
			""request"": {
				""method"": ""POST"",
				""header"": [
					{
						""key"": ""content-type"",
						""value"": ""text/plain;charset=UTF-8"",
						""type"": ""default""
					}
				],
				""body"": {
					""mode"": ""raw"",
					""raw"": ""{\n  \""cliLogin\"": \""odoo_sonic_test\"",\n  \""cliPasswordClair\"": \""128738720927\""\n}"",
					""options"": {
						""raw"": {
							""language"": ""json""
						}
					}
				},
				""url"": {
					""raw"": ""http://inforisk-api.infomarket.ma/api/login"",
					""protocol"": ""http"",
					""host"": [
						""inforisk-api"",
						""infomarket"",
						""ma""
					],
					""path"": [
						""api"",
						""login""
					]
				}
			},
			""response"": []
		},
		{
			""name"": ""http://inforisk-api.infomarket.ma/api/public/entreprise"",
			""request"": {
				""auth"": {
					""type"": ""bearer"",
					""bearer"": [
						{
							""key"": ""token"",
							""value"": ""eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJPZG9vIEJpbE1TIE90aG1hbmUgUmVyaGF5ZSIsImV4cCI6MTY2MzI1ODk3NSwiYXV0aG9yaXRpZXMiOltdLCJjbGlJZCI6MTAwMDAwMCwiY2xpRW1haWwiOiJzdC5zb25pY0BnbWFpbC5jb20iLCJjbGlzb2NJZCI6MTAwMDAwMH0.It9aquNk4dhGMn8Yi0BppgxxzFmWmiJ6VVwu5oc_Zm0"",
							""type"": ""string""
						}
					]
				},
				""method"": ""POST"",
				""header"": [
					{
						""warning"": ""This is a duplicate header and will be overridden by the Authorization header generated by Postman."",
						""key"": ""Authorization"",
						""value"": ""Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJPZG9vIEJpbE1TIE90aG1hbmUgUmVyaGF5ZSIsImV4cCI6MTY2MzMyMTgwNCwiYXV0aG9yaXRpZXMiOltdLCJjbGlJZCI6MTAwMDAwMCwiY2xpRW1haWwiOiJzdC5zb25pY0BnbWFpbC5jb20iLCJjbGlzb2NJZCI6MTAwMDAwMH0.1tmpyv0_FeRKILjTIObxMnDyosPb6MDq8JiHkqGqvxI"",
						""type"": ""default""
					}
				],
				""body"": {
					""mode"": ""raw"",
					""raw"": ""{\n  \""denomination\"" : \""inforisk\""\n}"",
					""options"": {
						""raw"": {
							""language"": ""json""
						}
					}
				},
				""url"": {
					""raw"": ""http://inforisk-api.infomarket.ma/api/public/entreprise"",
					""protocol"": ""http"",
					""host"": [
						""inforisk-api"",
						""infomarket"",
						""ma""
					],
					""path"": [
						""api"",
						""public"",
						""entreprise""
					]
				}
			},
			""response"": []
		}
	]
}"
dvHC2RDT,first - array and loop,Radotsveta,C,Monday 29th of May 2023 10:56:40 AM CDT,"#include <stdio.h>
#include <string.h>

/*Student:
- name (string)
- id (string)
- age (int)
- grades (int array)
*/

typedef struct
{
    char name[50];
    char id[10];
    int age;
    int grades[5];
}Student;

typedef struct
{
    int x;
    int y;
} Point;

void print_student(Student student);

int main(void)
  {
    Student kevin;

    strcpy(kevin.name, ""Kevin"");
    strcpy(kevin.id, ""16805632"");
    kevin.age = 40;
    kevin.grades[0] = 2;
    kevin.grades[1] = 3;
    kevin.grades[2] = 4;
    kevin.grades[3] = 5;
    kevin.grades[4] = 6;

    print_student(kevin);
    printf(""\n"");

    Point p1 =
        {
        .x = 5,
        .y = 10
        };
    Point p2 =
        {
            .x = 11,
            .y = 2
            };
    Point p3 =
        {
        .x = 14,
        .y = 15
        };

    printf(""p1.x: %d\n"", p1.x);
    printf(""p1.y: %d\n"", p1.y);
    printf(""p2.x: %d\n"", p2.x);
    printf(""p2.y: %d\n"", p2.y);
    printf(""p3.x: %d\n"", p3.x);
    printf(""p3.y: %d\n"", p3.y);

    Point points[10];

    for (int i = 0; i < 10; i++)
    {
        points[i].x = i;
        points[i].y = 10 - i;
    }

    return 0;
}

void print_student(Student student)
{
    printf(""Name: %s\n"", student.name);
    printf(""ID: %s\n"", student.id);
    printf(""Age: %d\n"", student.age);
    printf(""Grade1: %d\n"", student.grades[0]);
    printf(""Grade2: %d\n"", student.grades[1]);
    printf(""Grade3: %d\n"", student.grades[2]);
    printf(""Grade4: %d\n"", student.grades[3]);
    printf(""Grade5: %d\n"", student.grades[4]);
}"
scd0GikY,hotel 29-05-2023,kagurasuki,JavaScript,Monday 29th of May 2023 10:36:44 AM CDT,"class Hotel {
  constructor (name, room, stay, member){
    this.rooms = {
      linux: {
        standard: 150000,
        medium: 200000,
        vip: 300000
    },
      windows: {
        standard: 200000,
        medium: 250000,
        vip: 350000
      },
      mac: {
        standard: 250000,
        medium: 300000,
        vip: 1000000
      }}
    this.name = name;
    this.room = room;
    this.stay = stay;
    this.member = member;

    this.getRates = () => this.rooms[this.room][this.roomType];
  }
  setRoomType(roomType){
    this.roomType = roomType;
  }
}

                                                                                         let fancyBorder = [];                                                                    do {                                                                                       fancyBorder.push(""="");
}
while (fancyBorder.length < 30);
fancyBorder = fancyBorder.join("" "");

const linus = new Hotel(""linus"", ""windows"", 3, true);
linus.setRoomType(""vip"");

const mark = new Hotel(""mark"", ""mac"", 8, false);
mark.setRoomType(""standard"");

const gates = new Hotel(""gates"", ""linux"", 3, true);
gates.setRoomType(""medium"");


function getPayment(customer){
  const {name, room, stay, member, roomType} = customer;
  const rates = customer.getRates();

  const subTotal = stay * rates;
  const memberDiscount = (member) ? .10 * subTotal : 0;
  const stayDiscount = (stay > 3) ? .5 * (subTotal - memberDiscount) : 0;
  const total = subTotal - memberDiscount - stayDiscount;

  console.log(`\n${fancyBorder}\nInformasi pelanggan hotel\n\nnama pelanggan: ${name}\nkamar: ${room}\nlama tinggal: ${stay} hari\nmember: ${member}\ntipe kamar: ${roomType}\ntarif: ${rates}\nsub total bayar: ${subTotal}\ndiskon member: ${memberDiscount}\ndiskon menginap: ${stayDiscount}\n\ntotal bayar: ${total}\n${fancyBorder}`);
}


getPayment(linus);
getPayment(mark);
getPayment(gates);"
knMtkf96,M31,tlse72,JavaScript,Monday 29th of May 2023 10:15:38 AM CDT,"//M31 probing macro

double probeX = 200;
double probeY = 300;
double Zmin = -100;
double FeedrateFast = 1000;
double FeedrateSlow = 100;
double SafeZ = 100;
double retractheight = 5;
double retractforsecondmeasurement = 5;
double offsetGivareZ = -2.0;

bool domoveXY = false; //Enable XY movement
bool dodualcycle = true; //Do probing from 2 cycles, first with Fast and second with Slow feedrates

if(!exec.GetLED(56)||!exec.GetLED(57)||!exec.GetLED(58)) // If machine was not homed then it is unsafe to move in machine coordinates, stop here...
{
  MessageBox.Show(""The machine was not yet homed, home the machine before run to parking position!"");
  exec.Stop();
  return;
}

while(exec.IsMoving()){}

double Xoriginalpos = exec.GetXmachpos(); // Get the current machine coordinates
double Yoriginalpos = exec.GetYmachpos(); // Get the current machine coordinates

if(domoveXY) // Make XY movement only if enabled
{
  exec.Code(""G80 G00 G53 Z"" + SafeZ); // Move Z up first
  while(exec.IsMoving()){}

  exec.Code(""G80 G00 G53 X"" + probeX +"" Y"" + probeY); // Move to the probe sensor position in XY
  while(exec.IsMoving()){}
}

if(dodualcycle)
{
  exec.Code(""G31 Z"" + Zmin + ""F"" + FeedrateFast); // Do the Z probing with Fast feedrate first
  while(exec.IsMoving()){}

  exec.Code(""G91 G80 G0 Z"" + retractforsecondmeasurement);
  exec.Code(""G90""); 
}

while(exec.IsMoving()){}
exec.Code(""G31 Z"" + Zmin + ""F"" + FeedrateSlow); // Do the Z probing again with Slow Feedrate to get a more accurate reading
while(exec.IsMoving()){}

if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
 exec.mainform.sumoffsetcontrol1.G54.newCzinput(offsetGivareZ);  // Set G54 to new Zzero
	exec.mainform.sumoffsetcontrol1.G55.newCzinput(offsetGivareZ);  // Set G55 to new Zzero	
	exec.mainform.sumoffsetcontrol1.G56.newCzinput(offsetGivareZ);  // Set G56 to new Zzero
	exec.mainform.sumoffsetcontrol1.G57.newCzinput(offsetGivareZ);  // Set G57 to new Zzero
	exec.mainform.sumoffsetcontrol1.G58.newCzinput(offsetGivareZ);  // Set G58 to new Zzero
	exec.mainform.sumoffsetcontrol1.G59.newCzinput(offsetGivareZ);  // Set G59 to new Zzero
	while(exec.IsMoving()){}
	exec.Wait(200);

 //double Zup = exec.GetZmachpos() + retractheight;

 //if(Zup > SafeZ)
 //{
 //  Zup = SafeZ;
 //}
 
 exec.Code(""G80 G00 G54 Z"" + retractheight); // Move 10mm above probe plate
 while(exec.IsMoving()){}

if(domoveXY) // Make XY movement back to start position only if XY movement is enabled
{
  exec.Code(""G80 G00 G53 X"" + Xoriginalpos +"" Y"" + Yoriginalpos); // Move back to the original XY position
  while(exec.IsMoving()){}
}

}

"
rqgZVWGw,Simple Spy,DarkHorse89,Lua,Monday 29th of May 2023 09:45:52 AM CDT,"--[[
    SimpleSpy v2.2 SOURCE

    SimpleSpy is a lightweight penetration testing tool that logs remote calls.

    Credits:
        exx - basically everything
        Frosty - GUI to Lua
]]

-- shuts down the previous instance of SimpleSpy
if _G.SimpleSpyExecuted and type(_G.SimpleSpyShutdown) == ""function"" then
	print(pcall(_G.SimpleSpyShutdown))
end

local Players = game:GetService(""Players"")
local CoreGui = game:GetService(""CoreGui"")
local Highlight =
	loadstring(
		game:HttpGet(""https://github.com/exxtremestuffs/SimpleSpySource/raw/master/highlight.lua"")
	)()

---- GENERATED (kinda sorta mostly) BY GUI to LUA ----

-- Instances:

local SimpleSpy2 = Instance.new(""ScreenGui"")
local Background = Instance.new(""Frame"")
local LeftPanel = Instance.new(""Frame"")
local LogList = Instance.new(""ScrollingFrame"")
local UIListLayout = Instance.new(""UIListLayout"")
local RemoteTemplate = Instance.new(""Frame"")
local ColorBar = Instance.new(""Frame"")
local Text = Instance.new(""TextLabel"")
local Button = Instance.new(""TextButton"")
local RightPanel = Instance.new(""Frame"")
local CodeBox = Instance.new(""Frame"")
local ScrollingFrame = Instance.new(""ScrollingFrame"")
local UIGridLayout = Instance.new(""UIGridLayout"")
local FunctionTemplate = Instance.new(""Frame"")
local ColorBar_2 = Instance.new(""Frame"")
local Text_2 = Instance.new(""TextLabel"")
local Button_2 = Instance.new(""TextButton"")
local TopBar = Instance.new(""Frame"")
local Simple = Instance.new(""TextButton"")
local CloseButton = Instance.new(""TextButton"")
local ImageLabel = Instance.new(""ImageLabel"")
local MaximizeButton = Instance.new(""TextButton"")
local ImageLabel_2 = Instance.new(""ImageLabel"")
local MinimizeButton = Instance.new(""TextButton"")
local ImageLabel_3 = Instance.new(""ImageLabel"")
local ToolTip = Instance.new(""Frame"")
local TextLabel = Instance.new(""TextLabel"")

--Properties:

SimpleSpy2.Name = ""SimpleSpy2""
SimpleSpy2.ResetOnSpawn = false

Background.Name = ""Background""
Background.Parent = SimpleSpy2
Background.BackgroundColor3 = Color3.new(1, 1, 1)
Background.BackgroundTransparency = 1
Background.Position = UDim2.new(0, 500, 0, 200)
Background.Size = UDim2.new(0, 450, 0, 268)

LeftPanel.Name = ""LeftPanel""
LeftPanel.Parent = Background
LeftPanel.BackgroundColor3 = Color3.fromRGB(53, 52, 55)
LeftPanel.BorderSizePixel = 0
LeftPanel.Position = UDim2.new(0, 0, 0, 19)
LeftPanel.Size = UDim2.new(0, 131, 0, 249)

LogList.Name = ""LogList""
LogList.Parent = LeftPanel
LogList.Active = true
LogList.BackgroundColor3 = Color3.new(1, 1, 1)
LogList.BackgroundTransparency = 1
LogList.BorderSizePixel = 0
LogList.Position = UDim2.new(0, 0, 0, 9)
LogList.Size = UDim2.new(0, 131, 0, 232)
LogList.CanvasSize = UDim2.new(0, 0, 0, 0)
LogList.ScrollBarThickness = 4

UIListLayout.Parent = LogList
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

RemoteTemplate.Name = ""RemoteTemplate""
RemoteTemplate.Parent = LogList
RemoteTemplate.BackgroundColor3 = Color3.new(1, 1, 1)
RemoteTemplate.BackgroundTransparency = 1
RemoteTemplate.Size = UDim2.new(0, 117, 0, 27)

ColorBar.Name = ""ColorBar""
ColorBar.Parent = RemoteTemplate
ColorBar.BackgroundColor3 = Color3.fromRGB(255, 242, 0)
ColorBar.BorderSizePixel = 0
ColorBar.Position = UDim2.new(0, 0, 0, 1)
ColorBar.Size = UDim2.new(0, 7, 0, 18)
ColorBar.ZIndex = 2

Text.Name = ""Text""
Text.Parent = RemoteTemplate
Text.BackgroundColor3 = Color3.new(1, 1, 1)
Text.BackgroundTransparency = 1
Text.Position = UDim2.new(0, 12, 0, 1)
Text.Size = UDim2.new(0, 105, 0, 18)
Text.ZIndex = 2
Text.Font = Enum.Font.SourceSans
Text.Text = ""TEXT""
Text.TextColor3 = Color3.new(1, 1, 1)
Text.TextSize = 14
Text.TextXAlignment = Enum.TextXAlignment.Left
Text.TextWrapped = true

Button.Name = ""Button""
Button.Parent = RemoteTemplate
Button.BackgroundColor3 = Color3.new(0, 0, 0)
Button.BackgroundTransparency = 0.75
Button.BorderColor3 = Color3.new(1, 1, 1)
Button.Position = UDim2.new(0, 0, 0, 1)
Button.Size = UDim2.new(0, 117, 0, 18)
Button.AutoButtonColor = false
Button.Font = Enum.Font.SourceSans
Button.Text = """"
Button.TextColor3 = Color3.new(0, 0, 0)
Button.TextSize = 14

RightPanel.Name = ""RightPanel""
RightPanel.Parent = Background
RightPanel.BackgroundColor3 = Color3.fromRGB(37, 36, 38)
RightPanel.BorderSizePixel = 0
RightPanel.Position = UDim2.new(0, 131, 0, 19)
RightPanel.Size = UDim2.new(0, 319, 0, 249)

CodeBox.Name = ""CodeBox""
CodeBox.Parent = RightPanel
CodeBox.BackgroundColor3 = Color3.new(0.0823529, 0.0745098, 0.0784314)
CodeBox.BorderSizePixel = 0
CodeBox.Size = UDim2.new(0, 319, 0, 119)

ScrollingFrame.Parent = RightPanel
ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.new(1, 1, 1)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.Position = UDim2.new(0, 0, 0.5, 0)
ScrollingFrame.Size = UDim2.new(1, 0, 0.5, -9)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.ScrollBarThickness = 4

UIGridLayout.Parent = ScrollingFrame
UIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIGridLayout.CellPadding = UDim2.new(0, 0, 0, 0)
UIGridLayout.CellSize = UDim2.new(0, 94, 0, 27)

FunctionTemplate.Name = ""FunctionTemplate""
FunctionTemplate.Parent = ScrollingFrame
FunctionTemplate.BackgroundColor3 = Color3.new(1, 1, 1)
FunctionTemplate.BackgroundTransparency = 1
FunctionTemplate.Size = UDim2.new(0, 117, 0, 23)

ColorBar_2.Name = ""ColorBar""
ColorBar_2.Parent = FunctionTemplate
ColorBar_2.BackgroundColor3 = Color3.new(1, 1, 1)
ColorBar_2.BorderSizePixel = 0
ColorBar_2.Position = UDim2.new(0, 7, 0, 10)
ColorBar_2.Size = UDim2.new(0, 7, 0, 18)
ColorBar_2.ZIndex = 3

Text_2.Name = ""Text""
Text_2.Parent = FunctionTemplate
Text_2.BackgroundColor3 = Color3.new(1, 1, 1)
Text_2.BackgroundTransparency = 1
Text_2.Position = UDim2.new(0, 19, 0, 10)
Text_2.Size = UDim2.new(0, 69, 0, 18)
Text_2.ZIndex = 2
Text_2.Font = Enum.Font.SourceSans
Text_2.Text = ""TEXT""
Text_2.TextColor3 = Color3.new(1, 1, 1)
Text_2.TextSize = 14
Text_2.TextStrokeColor3 = Color3.new(0.145098, 0.141176, 0.14902)
Text_2.TextXAlignment = Enum.TextXAlignment.Left
Text_2.TextWrapped = true

Button_2.Name = ""Button""
Button_2.Parent = FunctionTemplate
Button_2.BackgroundColor3 = Color3.new(0, 0, 0)
Button_2.BackgroundTransparency = 0.69999998807907
Button_2.BorderColor3 = Color3.new(1, 1, 1)
Button_2.Position = UDim2.new(0, 7, 0, 10)
Button_2.Size = UDim2.new(0, 80, 0, 18)
Button_2.AutoButtonColor = false
Button_2.Font = Enum.Font.SourceSans
Button_2.Text = """"
Button_2.TextColor3 = Color3.new(0, 0, 0)
Button_2.TextSize = 14

TopBar.Name = ""TopBar""
TopBar.Parent = Background
TopBar.BackgroundColor3 = Color3.fromRGB(37, 35, 38)
TopBar.BorderSizePixel = 0
TopBar.Size = UDim2.new(0, 450, 0, 19)

Simple.Name = ""Simple""
Simple.Parent = TopBar
Simple.BackgroundColor3 = Color3.new(1, 1, 1)
Simple.AutoButtonColor = false
Simple.BackgroundTransparency = 1
Simple.Position = UDim2.new(0, 5, 0, 0)
Simple.Size = UDim2.new(0, 57, 0, 18)
Simple.Font = Enum.Font.SourceSansBold
Simple.Text = ""SimpleSpy""
Simple.TextColor3 = Color3.new(1, 1, 1)
Simple.TextSize = 14
Simple.TextXAlignment = Enum.TextXAlignment.Left

CloseButton.Name = ""CloseButton""
CloseButton.Parent = TopBar
CloseButton.BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902)
CloseButton.BorderSizePixel = 0
CloseButton.Position = UDim2.new(1, -19, 0, 0)
CloseButton.Size = UDim2.new(0, 19, 0, 19)
CloseButton.Font = Enum.Font.SourceSans
CloseButton.Text = """"
CloseButton.TextColor3 = Color3.new(0, 0, 0)
CloseButton.TextSize = 14

ImageLabel.Parent = CloseButton
ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0, 5, 0, 5)
ImageLabel.Size = UDim2.new(0, 9, 0, 9)
ImageLabel.Image = ""http://www.roblox.com/asset/?id=5597086202""

MaximizeButton.Name = ""MaximizeButton""
MaximizeButton.Parent = TopBar
MaximizeButton.BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902)
MaximizeButton.BorderSizePixel = 0
MaximizeButton.Position = UDim2.new(1, -38, 0, 0)
MaximizeButton.Size = UDim2.new(0, 19, 0, 19)
MaximizeButton.Font = Enum.Font.SourceSans
MaximizeButton.Text = """"
MaximizeButton.TextColor3 = Color3.new(0, 0, 0)
MaximizeButton.TextSize = 14

ImageLabel_2.Parent = MaximizeButton
ImageLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel_2.BackgroundTransparency = 1
ImageLabel_2.Position = UDim2.new(0, 5, 0, 5)
ImageLabel_2.Size = UDim2.new(0, 9, 0, 9)
ImageLabel_2.Image = ""http://www.roblox.com/asset/?id=5597108117""

MinimizeButton.Name = ""MinimizeButton""
MinimizeButton.Parent = TopBar
MinimizeButton.BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Position = UDim2.new(1, -57, 0, 0)
MinimizeButton.Size = UDim2.new(0, 19, 0, 19)
MinimizeButton.Font = Enum.Font.SourceSans
MinimizeButton.Text = """"
MinimizeButton.TextColor3 = Color3.new(0, 0, 0)
MinimizeButton.TextSize = 14

ImageLabel_3.Parent = MinimizeButton
ImageLabel_3.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel_3.BackgroundTransparency = 1
ImageLabel_3.Position = UDim2.new(0, 5, 0, 5)
ImageLabel_3.Size = UDim2.new(0, 9, 0, 9)
ImageLabel_3.Image = ""http://www.roblox.com/asset/?id=5597105827""

ToolTip.Name = ""ToolTip""
ToolTip.Parent = SimpleSpy2
ToolTip.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
ToolTip.BackgroundTransparency = 0.1
ToolTip.BorderColor3 = Color3.new(1, 1, 1)
ToolTip.Size = UDim2.new(0, 200, 0, 50)
ToolTip.ZIndex = 3
ToolTip.Visible = false

TextLabel.Parent = ToolTip
TextLabel.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel.BackgroundTransparency = 1
TextLabel.Position = UDim2.new(0, 2, 0, 2)
TextLabel.Size = UDim2.new(0, 196, 0, 46)
TextLabel.ZIndex = 3
TextLabel.Font = Enum.Font.SourceSans
TextLabel.Text = ""This is some slightly longer text.""
TextLabel.TextColor3 = Color3.new(1, 1, 1)
TextLabel.TextSize = 14
TextLabel.TextWrapped = true
TextLabel.TextXAlignment = Enum.TextXAlignment.Left
TextLabel.TextYAlignment = Enum.TextYAlignment.Top

-------------------------------------------------------------------------------
-- init
local RunService = game:GetService(""RunService"")
local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")
local ContentProvider = game:GetService(""ContentProvider"")
local TextService = game:GetService(""TextService"")
local Mouse

local selectedColor = Color3.new(0.321569, 0.333333, 1)
local deselectedColor = Color3.new(0.8, 0.8, 0.8)
--- So things are descending
local layoutOrderNum = 999999999
--- Whether or not the gui is closing
local mainClosing = false
--- Whether or not the gui is closed (defaults to false)
local closed = false
--- Whether or not the sidebar is closing
local sideClosing = false
--- Whether or not the sidebar is closed (defaults to true but opens automatically on remote selection)
local sideClosed = false
--- Whether or not the code box is maximized (defaults to false)
local maximized = false
--- The event logs to be read from
local logs = {}
--- The event currently selected.Log (defaults to nil)
local selected = nil
--- The blacklist (can be a string name or the Remote Instance)
local blacklist = {}
--- The block list (can be a string name or the Remote Instance)
local blocklist = {}
--- Whether or not to add getNil function
local getNil = false
--- Array of remotes (and original functions) connected to
local connectedRemotes = {}
--- True = hookfunction, false = namecall
local toggle = true
local gm
local original
--- used to prevent recursives
local prevTables = {}
--- holds logs (for deletion)
local remoteLogs = {}
--- used for hookfunction
local remoteEvent = Instance.new(""RemoteEvent"")
--- used for hookfunction
local remoteFunction = Instance.new(""RemoteFunction"")
local originalEvent = remoteEvent.FireServer
local originalFunction = remoteFunction.InvokeServer
--- the maximum amount of remotes allowed in logs
_G.SIMPLESPYCONFIG_MaxRemotes = 500
--- how many spaces to indent
local indent = 4
--- used for task scheduler
local scheduled = {}
--- RBXScriptConnect of the task scheduler
local schedulerconnect
local SimpleSpy = {}
local topstr = """"
local bottomstr = """"
local remotesFadeIn
local rightFadeIn
local codebox
local p
local getnilrequired = false

-- autoblock variables
local autoblock = false
local history = {}
local excluding = {}

-- function info variables
local funcEnabled = true

-- remote hooking/connecting api variables
local remoteSignals = {}
local remoteHooks = {}

-- original mouse icon
local oldIcon

-- if mouse inside gui
local mouseInGui = false

-- handy array of RBXScriptConnections to disconnect on shutdown
local connections = {}

-- whether or not SimpleSpy uses 'getcallingscript()' to get the script (default is false because detection)
local useGetCallingScript = false

--- used to enable/disable SimpleSpy's keyToString for remotes
local keyToString = false

-- determines whether return values are recorded
local recordReturnValues = false

-- functions

--- Converts arguments to a string and generates code that calls the specified method with them, recommended to be used in conjunction with ValueToString (method must be a string, e.g. `game:GetService(""ReplicatedStorage"").Remote.remote:FireServer`)
--- @param method string
--- @param args any[]
--- @return string
function SimpleSpy:ArgsToString(method, args)
	assert(typeof(method) == ""string"", ""string expected, got "" .. typeof(method))
	assert(typeof(args) == ""table"", ""table expected, got "" .. typeof(args))
	return v2v({ args = args }) .. ""\n\n"" .. method .. ""(unpack(args))""
end

--- Converts a value to variables with the specified index as the variable name (if nil/invalid then the name will be assigned automatically)
--- @param t any[]
--- @return string
function SimpleSpy:TableToVars(t)
	assert(typeof(t) == ""table"", ""table expected, got "" .. typeof(t))
	return v2v(t)
end

--- Converts a value to a variable with the specified `variablename` (if nil/invalid then the name will be assigned automatically)
--- @param value any
--- @return string
function SimpleSpy:ValueToVar(value, variablename)
	assert(variablename == nil or typeof(variablename) == ""string"", ""string expected, got "" .. typeof(variablename))
	if not variablename then
		variablename = 1
	end
	return v2v({ [variablename] = value })
end

--- Converts any value to a string, cannot preserve function contents
--- @param value any
--- @return string
function SimpleSpy:ValueToString(value)
	return v2s(value)
end

--- Generates the simplespy function info
--- @param func function
--- @return string
function SimpleSpy:GetFunctionInfo(func)
	assert(typeof(func) == ""function"", ""Instance expected, got "" .. typeof(func))
	warn(""Function info currently unavailable due to crashing in Synapse X"")
	return v2v({ functionInfo = {
		info = debug.getinfo(func),
		constants = debug.getconstants(func),
	} })
end

--- Gets the ScriptSignal for a specified remote being fired
--- @param remote Instance
function SimpleSpy:GetRemoteFiredSignal(remote)
	assert(typeof(remote) == ""Instance"", ""Instance expected, got "" .. typeof(remote))
	if not remoteSignals[remote] then
		remoteSignals[remote] = newSignal()
	end
	return remoteSignals[remote]
end

--- Allows for direct hooking of remotes **THIS CAN BE VERY DANGEROUS**
--- @param remote Instance
--- @param f function
function SimpleSpy:HookRemote(remote, f)
	assert(typeof(remote) == ""Instance"", ""Instance expected, got "" .. typeof(remote))
	assert(typeof(f) == ""function"", ""function expected, got "" .. typeof(f))
	remoteHooks[remote] = f
end

--- Blocks the specified remote instance/string
--- @param remote any
function SimpleSpy:BlockRemote(remote)
	assert(
		typeof(remote) == ""Instance"" or typeof(remote) == ""string"",
		""Instance | string expected, got "" .. typeof(remote)
	)
	blocklist[remote] = true
end

--- Excludes the specified remote from logs (instance/string)
--- @param remote any
function SimpleSpy:ExcludeRemote(remote)
	assert(
		typeof(remote) == ""Instance"" or typeof(remote) == ""string"",
		""Instance | string expected, got "" .. typeof(remote)
	)
	blacklist[remote] = true
end

--- Creates a new ScriptSignal that can be connected to and fired
--- @return table
function newSignal()
	local connected = {}
	return {
		Connect = function(self, f)
			assert(connected, ""Signal is closed"")
			connected[tostring(f)] = f
			return {
				Connected = true,
				Disconnect = function(self)
					if not connected then
						warn(""Signal is already closed"")
					end
					self.Connected = false
					connected[tostring(f)] = nil
				end,
			}
		end,
		Wait = function(self)
			local thread = coroutine.running()
			local connection
			connection = self:Connect(function()
				connection:Disconnect()
				if coroutine.status(thread) == ""suspended"" then
					coroutine.resume(thread)
				end
			end)
			coroutine.yield()
		end,
		Fire = function(self, ...)
			for _, f in pairs(connected) do
				coroutine.wrap(f)(...)
			end
		end,
	}
end

--- Prevents remote spam from causing lag (clears logs after `_G.SIMPLESPYCONFIG_MaxRemotes` or 500 remotes)
function clean()
	local max = _G.SIMPLESPYCONFIG_MaxRemotes
	if not typeof(max) == ""number"" and math.floor(max) ~= max then
		max = 500
	end
	if #remoteLogs > max then
		for i = 100, #remoteLogs do
			local v = remoteLogs[i]
			if typeof(v[1]) == ""RBXScriptConnection"" then
				v[1]:Disconnect()
			end
			if typeof(v[2]) == ""Instance"" then
				v[2]:Destroy()
			end
		end
		local newLogs = {}
		for i = 1, 100 do
			table.insert(newLogs, remoteLogs[i])
		end
		remoteLogs = newLogs
	end
end

--- Scales the ToolTip to fit containing text
function scaleToolTip()
	local size = TextService:GetTextSize(
		TextLabel.Text,
		TextLabel.TextSize,
		TextLabel.Font,
		Vector2.new(196, math.huge)
	)
	TextLabel.Size = UDim2.new(0, size.X, 0, size.Y)
	ToolTip.Size = UDim2.new(0, size.X + 4, 0, size.Y + 4)
end

--- Executed when the toggle button (the SimpleSpy logo) is hovered over
function onToggleButtonHover()
	if not toggle then
		TweenService:Create(Simple, TweenInfo.new(0.5), { TextColor3 = Color3.fromRGB(252, 51, 51) }):Play()
	else
		TweenService:Create(Simple, TweenInfo.new(0.5), { TextColor3 = Color3.fromRGB(68, 206, 91) }):Play()
	end
end

--- Executed when the toggle button is unhovered over
function onToggleButtonUnhover()
	TweenService:Create(Simple, TweenInfo.new(0.5), { TextColor3 = Color3.fromRGB(255, 255, 255) }):Play()
end

--- Executed when the X button is hovered over
function onXButtonHover()
	TweenService:Create(CloseButton, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(255, 60, 60) }):Play()
end

--- Executed when the X button is unhovered over
function onXButtonUnhover()
	TweenService:Create(CloseButton, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(37, 36, 38) }):Play()
end

--- Toggles the remote spy method (when button clicked)
function onToggleButtonClick()
	if toggle then
		TweenService:Create(Simple, TweenInfo.new(0.5), { TextColor3 = Color3.fromRGB(252, 51, 51) }):Play()
	else
		TweenService:Create(Simple, TweenInfo.new(0.5), { TextColor3 = Color3.fromRGB(68, 206, 91) }):Play()
	end
	toggleSpyMethod()
end

--- Reconnects bringBackOnResize if the current viewport changes and also connects it initially
function connectResize()
	local lastCam = workspace.CurrentCamera:GetPropertyChangedSignal(""ViewportSize""):Connect(bringBackOnResize)
	workspace:GetPropertyChangedSignal(""CurrentCamera""):Connect(function()
		lastCam:Disconnect()
		if workspace.CurrentCamera then
			lastCam = workspace.CurrentCamera:GetPropertyChangedSignal(""ViewportSize""):Connect(bringBackOnResize)
		end
	end)
end

--- Brings gui back if it gets lost offscreen (connected to the camera viewport changing)
function bringBackOnResize()
	validateSize()
	if sideClosed then
		minimizeSize()
	else
		maximizeSize()
	end
	local currentX = Background.AbsolutePosition.X
	local currentY = Background.AbsolutePosition.Y
	local viewportSize = workspace.CurrentCamera.ViewportSize
	if (currentX < 0) or (currentX > (viewportSize.X - (sideClosed and 131 or Background.AbsoluteSize.X))) then
		if currentX < 0 then
			currentX = 0
		else
			currentX = viewportSize.X - (sideClosed and 131 or Background.AbsoluteSize.X)
		end
	end
	if (currentY < 0) or (currentY > (viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - 36)) then
		if currentY < 0 then
			currentY = 0
		else
			currentY = viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - 36
		end
	end
	TweenService.Create(
		TweenService,
		Background,
		TweenInfo.new(0.1),
		{ Position = UDim2.new(0, currentX, 0, currentY) }
	):Play()
end

--- Drags gui (so long as mouse is held down)
--- @param input InputObject
function onBarInput(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		local lastPos = UserInputService.GetMouseLocation(UserInputService)
		local mainPos = Background.AbsolutePosition
		local offset = mainPos - lastPos
		local currentPos = offset + lastPos
		RunService.BindToRenderStep(RunService, ""drag"", 1, function()
			local newPos = UserInputService.GetMouseLocation(UserInputService)
			if newPos ~= lastPos then
				local currentX = (offset + newPos).X
				local currentY = (offset + newPos).Y
				local viewportSize = workspace.CurrentCamera.ViewportSize
				if
					(currentX < 0 and currentX < currentPos.X)
					or (
						currentX > (viewportSize.X - (sideClosed and 131 or TopBar.AbsoluteSize.X))
						and currentX > currentPos.X
					)
				then
					if currentX < 0 then
						currentX = 0
					else
						currentX = viewportSize.X - (sideClosed and 131 or TopBar.AbsoluteSize.X)
					end
				end
				if
					(currentY < 0 and currentY < currentPos.Y)
					or (
						currentY > (viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - 36)
						and currentY > currentPos.Y
					)
				then
					if currentY < 0 then
						currentY = 0
					else
						currentY = viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - 36
					end
				end
				currentPos = Vector2.new(currentX, currentY)
				lastPos = newPos
				TweenService.Create(
					TweenService,
					Background,
					TweenInfo.new(0.1),
					{ Position = UDim2.new(0, currentPos.X, 0, currentPos.Y) }
				):Play()
			end
			-- if input.UserInputState ~= Enum.UserInputState.Begin then
			--     RunService.UnbindFromRenderStep(RunService, ""drag"")
			-- end
		end)
		table.insert(
			connections,
			UserInputService.InputEnded:Connect(function(inputE)
				if input == inputE then
					RunService:UnbindFromRenderStep(""drag"")
				end
			end)
		)
	end
end

--- Fades out the table of elements (and makes them invisible), returns a function to make them visible again
function fadeOut(elements)
	local data = {}
	for _, v in pairs(elements) do
		if typeof(v) == ""Instance"" and v:IsA(""GuiObject"") and v.Visible then
			coroutine.wrap(function()
				data[v] = {
					BackgroundTransparency = v.BackgroundTransparency,
				}
				TweenService:Create(v, TweenInfo.new(0.5), { BackgroundTransparency = 1 }):Play()
				if v:IsA(""TextBox"") or v:IsA(""TextButton"") or v:IsA(""TextLabel"") then
					data[v].TextTransparency = v.TextTransparency
					TweenService:Create(v, TweenInfo.new(0.5), { TextTransparency = 1 }):Play()
				elseif v:IsA(""ImageButton"") or v:IsA(""ImageLabel"") then
					data[v].ImageTransparency = v.ImageTransparency
					TweenService:Create(v, TweenInfo.new(0.5), { ImageTransparency = 1 }):Play()
				end
				wait(0.5)
				v.Visible = false
				for i, x in pairs(data[v]) do
					v[i] = x
				end
				data[v] = true
			end)()
		end
	end
	return function()
		for i, _ in pairs(data) do
			coroutine.wrap(function()
				local properties = {
					BackgroundTransparency = i.BackgroundTransparency,
				}
				i.BackgroundTransparency = 1
				TweenService
					:Create(i, TweenInfo.new(0.5), { BackgroundTransparency = properties.BackgroundTransparency })
					:Play()
				if i:IsA(""TextBox"") or i:IsA(""TextButton"") or i:IsA(""TextLabel"") then
					properties.TextTransparency = i.TextTransparency
					i.TextTransparency = 1
					TweenService
						:Create(i, TweenInfo.new(0.5), { TextTransparency = properties.TextTransparency })
						:Play()
				elseif i:IsA(""ImageButton"") or i:IsA(""ImageLabel"") then
					properties.ImageTransparency = i.ImageTransparency
					i.ImageTransparency = 1
					TweenService
						:Create(i, TweenInfo.new(0.5), { ImageTransparency = properties.ImageTransparency })
						:Play()
				end
				i.Visible = true
			end)()
		end
	end
end

--- Expands and minimizes the gui (closed is the toggle boolean)
function toggleMinimize(override)
	if mainClosing and not override or maximized then
		return
	end
	mainClosing = true
	closed = not closed
	if closed then
		if not sideClosed then
			toggleSideTray(true)
		end
		LeftPanel.Visible = true
		TweenService:Create(LeftPanel, TweenInfo.new(0.5), { Size = UDim2.new(0, 131, 0, 0) }):Play()
		wait(0.5)
		remotesFadeIn = fadeOut(LeftPanel:GetDescendants())
		wait(0.5)
	else
		TweenService:Create(LeftPanel, TweenInfo.new(0.5), { Size = UDim2.new(0, 131, 0, 249) }):Play()
		wait(0.5)
		if remotesFadeIn then
			remotesFadeIn()
			remotesFadeIn = nil
		end
		bringBackOnResize()
	end
	mainClosing = false
end

--- Expands and minimizes the sidebar (sideClosed is the toggle boolean)
function toggleSideTray(override)
	if sideClosing and not override or maximized then
		return
	end
	sideClosing = true
	sideClosed = not sideClosed
	if sideClosed then
		rightFadeIn = fadeOut(RightPanel:GetDescendants())
		wait(0.5)
		minimizeSize(0.5)
		wait(0.5)
		RightPanel.Visible = false
	else
		if closed then
			toggleMinimize(true)
		end
		RightPanel.Visible = true
		maximizeSize(0.5)
		wait(0.5)
		if rightFadeIn then
			rightFadeIn()
		end
		bringBackOnResize()
	end
	sideClosing = false
end

--- Expands code box to fit screen for more convenient viewing
function toggleMaximize()
	if not sideClosed and not maximized then
		maximized = true
		local disable = Instance.new(""TextButton"")
		local prevSize = UDim2.new(0, CodeBox.AbsoluteSize.X, 0, CodeBox.AbsoluteSize.Y)
		local prevPos = UDim2.new(0, CodeBox.AbsolutePosition.X, 0, CodeBox.AbsolutePosition.Y)
		disable.Size = UDim2.new(1, 0, 1, 0)
		disable.BackgroundColor3 = Color3.new()
		disable.BorderSizePixel = 0
		disable.Text = 0
		disable.ZIndex = 3
		disable.BackgroundTransparency = 1
		disable.AutoButtonColor = false
		CodeBox.ZIndex = 4
		CodeBox.Position = prevPos
		CodeBox.Size = prevSize
		TweenService
			:Create(
				CodeBox,
				TweenInfo.new(0.5),
				{ Size = UDim2.new(0.5, 0, 0.5, 0), Position = UDim2.new(0.25, 0, 0.25, 0) }
			)
			:Play()
		TweenService:Create(disable, TweenInfo.new(0.5), { BackgroundTransparency = 0.5 }):Play()
		disable.MouseButton1Click:Connect(function()
			if
				UserInputService:GetMouseLocation().Y + 36 >= CodeBox.AbsolutePosition.Y
				and UserInputService:GetMouseLocation().Y + 36 <= CodeBox.AbsolutePosition.Y + CodeBox.AbsoluteSize.Y
				and UserInputService:GetMouseLocation().X >= CodeBox.AbsolutePosition.X
				and UserInputService:GetMouseLocation().X <= CodeBox.AbsolutePosition.X + CodeBox.AbsoluteSize.X
			then
				return
			end
			TweenService:Create(CodeBox, TweenInfo.new(0.5), { Size = prevSize, Position = prevPos }):Play()
			TweenService:Create(disable, TweenInfo.new(0.5), { BackgroundTransparency = 1 }):Play()
			maximized = false
			wait(0.5)
			disable:Destroy()
			CodeBox.Size = UDim2.new(1, 0, 0.5, 0)
			CodeBox.Position = UDim2.new(0, 0, 0, 0)
			CodeBox.ZIndex = 0
		end)
	end
end

--- Checks if cursor is within resize range
--- @param p Vector2
function isInResizeRange(p)
	local relativeP = p - Background.AbsolutePosition
	local range = 5
	if
		relativeP.X >= TopBar.AbsoluteSize.X - range
		and relativeP.Y >= Background.AbsoluteSize.Y - range
		and relativeP.X <= TopBar.AbsoluteSize.X
		and relativeP.Y <= Background.AbsoluteSize.Y
	then
		return true, ""B""
	elseif relativeP.X >= TopBar.AbsoluteSize.X - range and relativeP.X <= Background.AbsoluteSize.X then
		return true, ""X""
	elseif relativeP.Y >= Background.AbsoluteSize.Y - range and relativeP.Y <= Background.AbsoluteSize.Y then
		return true, ""Y""
	end
	return false
end

--- Checks if cursor is within dragging range
--- @param p Vector2
function isInDragRange(p)
	local relativeP = p - Background.AbsolutePosition
	if
		relativeP.X <= TopBar.AbsoluteSize.X - CloseButton.AbsoluteSize.X * 3
		and relativeP.X >= 0
		and relativeP.Y <= TopBar.AbsoluteSize.Y
		and relativeP.Y >= 0
	then
		return true
	end
	return false
end

--- Called when mouse enters SimpleSpy
function mouseEntered()
	local existingCursor = SimpleSpy2:FindFirstChild(""Cursor"")
	while existingCursor do
		existingCursor:Destroy()
		existingCursor = SimpleSpy2:FindFirstChild(""Cursor"")
	end
	local customCursor = Instance.new(""ImageLabel"")
	customCursor.Name = ""Cursor""
	customCursor.Size = UDim2.fromOffset(200, 200)
	customCursor.ZIndex = 1e5
	customCursor.BackgroundTransparency = 1
	customCursor.Image = """"
	customCursor.Parent = SimpleSpy2
	UserInputService.OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.ForceHide
	RunService:BindToRenderStep(""SIMPLESPY_CURSOR"", 1, function()
		if mouseInGui and _G.SimpleSpyExecuted then
			local mouseLocation = UserInputService:GetMouseLocation() - Vector2.new(0, 36)
			customCursor.Position = UDim2.fromOffset(
				mouseLocation.X - customCursor.AbsoluteSize.X / 2,
				mouseLocation.Y - customCursor.AbsoluteSize.Y / 2
			)
			local inRange, type = isInResizeRange(mouseLocation)
			if inRange and not sideClosed and not closed then
				customCursor.Image = type == ""B"" and ""rbxassetid://6065821980""
					or type == ""X"" and ""rbxassetid://6065821086""
					or type == ""Y"" and ""rbxassetid://6065821596""
			elseif inRange and not closed and type == ""Y"" or type == ""B"" then
				customCursor.Image = ""rbxassetid://6065821596""
			elseif customCursor.Image ~= ""rbxassetid://6065775281"" then
				customCursor.Image = ""rbxassetid://6065775281""
			end
		else
			UserInputService.OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.None
			customCursor:Destroy()
			RunService:UnbindFromRenderStep(""SIMPLESPY_CURSOR"")
		end
	end)
end

--- Called when mouse moves
function mouseMoved()
	local mousePos = UserInputService:GetMouseLocation() - Vector2.new(0, 36)
	if
		not closed
		and mousePos.X >= TopBar.AbsolutePosition.X
		and mousePos.X <= TopBar.AbsolutePosition.X + TopBar.AbsoluteSize.X
		and mousePos.Y >= Background.AbsolutePosition.Y
		and mousePos.Y <= Background.AbsolutePosition.Y + Background.AbsoluteSize.Y
	then
		if not mouseInGui then
			mouseInGui = true
			mouseEntered()
		end
	else
		mouseInGui = false
	end
end

--- Adjusts the ui elements to the 'Maximized' size
function maximizeSize(speed)
	if not speed then
		speed = 0.05
	end
	TweenService
		:Create(
			LeftPanel,
			TweenInfo.new(speed),
			{ Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y) }
		)
		:Play()
	TweenService
		:Create(RightPanel, TweenInfo.new(speed), {
			Size = UDim2.fromOffset(
				Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X,
				Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y
			),
		})
		:Play()
	TweenService
		:Create(
			TopBar,
			TweenInfo.new(speed),
			{ Size = UDim2.fromOffset(Background.AbsoluteSize.X, TopBar.AbsoluteSize.Y) }
		)
		:Play()
	TweenService
		:Create(ScrollingFrame, TweenInfo.new(speed), {
			Size = UDim2.fromOffset(Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X, 110),
			Position = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y),
		})
		:Play()
	TweenService
		:Create(CodeBox, TweenInfo.new(speed), {
			Size = UDim2.fromOffset(
				Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X,
				Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y
			),
		})
		:Play()
	TweenService
		:Create(
			LogList,
			TweenInfo.new(speed),
			{ Size = UDim2.fromOffset(LogList.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y - 18) }
		)
		:Play()
end

--- Adjusts the ui elements to close the side
function minimizeSize(speed)
	if not speed then
		speed = 0.05
	end
	TweenService
		:Create(
			LeftPanel,
			TweenInfo.new(speed),
			{ Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y) }
		)
		:Play()
	TweenService
		:Create(
			RightPanel,
			TweenInfo.new(speed),
			{ Size = UDim2.fromOffset(0, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y) }
		)
		:Play()
	TweenService
		:Create(
			TopBar,
			TweenInfo.new(speed),
			{ Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, TopBar.AbsoluteSize.Y) }
		)
		:Play()
	TweenService
		:Create(ScrollingFrame, TweenInfo.new(speed), {
			Size = UDim2.fromOffset(0, 119),
			Position = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y),
		})
		:Play()
	TweenService
		:Create(
			CodeBox,
			TweenInfo.new(speed),
			{ Size = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y) }
		)
		:Play()
	TweenService
		:Create(
			LogList,
			TweenInfo.new(speed),
			{ Size = UDim2.fromOffset(LogList.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y - 18) }
		)
		:Play()
end

--- Ensures size is within screensize limitations
function validateSize()
	local x, y = Background.AbsoluteSize.X, Background.AbsoluteSize.Y
	local screenSize = workspace.CurrentCamera.ViewportSize
	if x + Background.AbsolutePosition.X > screenSize.X then
		if screenSize.X - Background.AbsolutePosition.X >= 450 then
			x = screenSize.X - Background.AbsolutePosition.X
		else
			x = 450
		end
	elseif y + Background.AbsolutePosition.Y > screenSize.Y then
		if screenSize.X - Background.AbsolutePosition.Y >= 268 then
			y = screenSize.Y - Background.AbsolutePosition.Y
		else
			y = 268
		end
	end
	Background.Size = UDim2.fromOffset(x, y)
end

--- Called on user input while mouse in 'Background' frame
--- @param input InputObject
function backgroundUserInput(input)
	local mousePos = UserInputService:GetMouseLocation() - Vector2.new(0, 36)
	local inResizeRange, type = isInResizeRange(mousePos)
	if input.UserInputType == Enum.UserInputType.MouseButton1 and inResizeRange then
		local lastPos = UserInputService:GetMouseLocation()
		local offset = Background.AbsoluteSize - lastPos
		local currentPos = lastPos + offset
		RunService:BindToRenderStep(""SIMPLESPY_RESIZE"", 1, function()
			local newPos = UserInputService:GetMouseLocation()
			if newPos ~= lastPos then
				local currentX = (newPos + offset).X
				local currentY = (newPos + offset).Y
				if currentX < 450 then
					currentX = 450
				end
				if currentY < 268 then
					currentY = 268
				end
				currentPos = Vector2.new(currentX, currentY)
				Background.Size = UDim2.fromOffset(
					(not sideClosed and not closed and (type == ""X"" or type == ""B"")) and currentPos.X
						or Background.AbsoluteSize.X,
					(--[[(not sideClosed or currentPos.X <= LeftPanel.AbsolutePosition.X + LeftPanel.AbsoluteSize.X) and]]not closed and (type == ""Y"" or type == ""B""))
							and currentPos.Y
						or Background.AbsoluteSize.Y
				)
				validateSize()
				if sideClosed then
					minimizeSize()
				else
					maximizeSize()
				end
				lastPos = newPos
			end
		end)
		table.insert(
			connections,
			UserInputService.InputEnded:Connect(function(inputE)
				if input == inputE then
					RunService:UnbindFromRenderStep(""SIMPLESPY_RESIZE"")
				end
			end)
		)
	elseif isInDragRange(mousePos) then
		onBarInput(input)
	end
end

--- Gets the player an instance is descended from
function getPlayerFromInstance(instance)
	for _, v in pairs(Players:GetPlayers()) do
		if v.Character and (instance:IsDescendantOf(v.Character) or instance == v.Character) then
			return v
		end
	end
end

--- Runs on MouseButton1Click of an event frame
function eventSelect(frame)
	if selected and selected.Log and selected.Log.Button then
		TweenService
			:Create(selected.Log.Button, TweenInfo.new(0.5), { BackgroundColor3 = Color3.fromRGB(0, 0, 0) })
			:Play()
		selected = nil
	end
	for _, v in pairs(logs) do
		if frame == v.Log then
			selected = v
		end
	end
	if selected and selected.Log then
		TweenService
			:Create(frame.Button, TweenInfo.new(0.5), { BackgroundColor3 = Color3.fromRGB(92, 126, 229) })
			:Play()
		codebox:setRaw(selected.GenScript)
	end
	if sideClosed then
		toggleSideTray()
	end
end

--- Updates the canvas size to fit the current amount of function buttons
function updateFunctionCanvas()
	ScrollingFrame.CanvasSize = UDim2.fromOffset(UIGridLayout.AbsoluteContentSize.X, UIGridLayout.AbsoluteContentSize.Y)
end

--- Updates the canvas size to fit the amount of current remotes
function updateRemoteCanvas()
	LogList.CanvasSize = UDim2.fromOffset(UIListLayout.AbsoluteContentSize.X, UIListLayout.AbsoluteContentSize.Y)
end

--- Allows for toggling of the tooltip and easy setting of le description
--- @param enable boolean
--- @param text string
function makeToolTip(enable, text)
	if enable then
		if ToolTip.Visible then
			ToolTip.Visible = false
			RunService:UnbindFromRenderStep(""ToolTip"")
		end
		local first = true
		RunService:BindToRenderStep(""ToolTip"", 1, function()
			local topLeft = Vector2.new(Mouse.X + 20, Mouse.Y + 20)
			local bottomRight = topLeft + ToolTip.AbsoluteSize
			if topLeft.X < 0 then
				topLeft = Vector2.new(0, topLeft.Y)
			elseif bottomRight.X > workspace.CurrentCamera.ViewportSize.X then
				topLeft = Vector2.new(workspace.CurrentCamera.ViewportSize.X - ToolTip.AbsoluteSize.X, topLeft.Y)
			end
			if topLeft.Y < 0 then
				topLeft = Vector2.new(topLeft.X, 0)
			elseif bottomRight.Y > workspace.CurrentCamera.ViewportSize.Y - 35 then
				topLeft = Vector2.new(topLeft.X, workspace.CurrentCamera.ViewportSize.Y - ToolTip.AbsoluteSize.Y - 35)
			end
			if topLeft.X <= Mouse.X and topLeft.Y <= Mouse.Y then
				topLeft = Vector2.new(Mouse.X - ToolTip.AbsoluteSize.X - 2, Mouse.Y - ToolTip.AbsoluteSize.Y - 2)
			end
			if first then
				ToolTip.Position = UDim2.fromOffset(topLeft.X, topLeft.Y)
				first = false
			else
				ToolTip:TweenPosition(UDim2.fromOffset(topLeft.X, topLeft.Y), ""Out"", ""Linear"", 0.1)
			end
		end)
		TextLabel.Text = text
		ToolTip.Visible = true
	else
		if ToolTip.Visible then
			ToolTip.Visible = false
			RunService:UnbindFromRenderStep(""ToolTip"")
		end
	end
end

--- Creates new function button (below codebox)
--- @param name string
---@param description function
---@param onClick function
function newButton(name, description, onClick)
	local button = FunctionTemplate:Clone()
	button.Text.Text = name
	button.Button.MouseEnter:Connect(function()
		makeToolTip(true, description())
	end)
	button.Button.MouseLeave:Connect(function()
		makeToolTip(false)
	end)
	button.AncestryChanged:Connect(function()
		makeToolTip(false)
	end)
	button.Button.MouseButton1Click:Connect(function(...)
		onClick(button, ...)
	end)
	button.Parent = ScrollingFrame
	updateFunctionCanvas()
end

--- Adds new Remote to logs
--- @param name string The name of the remote being logged
--- @param type string The type of the remote being logged (either 'function' or 'event')
--- @param args any
--- @param remote any
--- @param function_info string
--- @param blocked any
function newRemote(type, name, args, remote, function_info, blocked, src, returnValue)
	local remoteFrame = RemoteTemplate:Clone()
	remoteFrame.Text.Text = string.sub(name, 1, 50)
	remoteFrame.ColorBar.BackgroundColor3 = type == ""event"" and Color3.new(255, 242, 0) or Color3.fromRGB(99, 86, 245)
	local id = Instance.new(""IntValue"")
	id.Name = ""ID""
	id.Value = #logs + 1
	id.Parent = remoteFrame
	local weakRemoteTable = setmetatable({ remote = remote }, { __mode = ""v"" })
	local log = {
		Name = name,
		Function = function_info,
		Remote = weakRemoteTable,
		Log = remoteFrame,
		Blocked = blocked,
		Source = src,
		GenScript = ""-- Generating, please wait... (click to reload)\n-- (If this message persists, the remote args are likely extremely long)"",
		ReturnValue = returnValue,
	}
	logs[#logs + 1] = log
	schedule(function()
		log.GenScript = genScript(remote, args)
		if blocked then
			logs[#logs].GenScript = ""-- THIS REMOTE WAS PREVENTED FROM FIRING THE SERVER BY SIMPLESPY\n\n""
				.. logs[#logs].GenScript
		end
	end)
	local connect = remoteFrame.Button.MouseButton1Click:Connect(function()
		eventSelect(remoteFrame)
	end)
	if layoutOrderNum < 1 then
		layoutOrderNum = 999999999
	end
	remoteFrame.LayoutOrder = layoutOrderNum
	layoutOrderNum = layoutOrderNum - 1
	remoteFrame.Parent = LogList
	table.insert(remoteLogs, 1, { connect, remoteFrame })
	clean()
	updateRemoteCanvas()
end

--- Generates a script from the provided arguments (first has to be remote path)
function genScript(remote, args)
	prevTables = {}
	local gen = """"
	if #args > 0 then
		if not pcall(function()
			gen = v2v({ args = args }) .. ""\n""
		end) then
			gen = gen
				.. ""-- TableToString failure! Reverting to legacy functionality (results may vary)\nlocal args = {""
			if
				not pcall(function()
					for i, v in pairs(args) do
						if type(i) ~= ""Instance"" and type(i) ~= ""userdata"" then
							gen = gen .. ""\n    [object] = ""
						elseif type(i) == ""string"" then
							gen = gen .. '\n    [""' .. i .. '""] = '
						elseif type(i) == ""userdata"" and typeof(i) ~= ""Instance"" then
							gen = gen .. ""\n    ["" .. string.format(""nil --[[%s]]"", typeof(v)) .. "")] = ""
						elseif type(i) == ""userdata"" then
							gen = gen .. ""\n    [game."" .. i:GetFullName() .. "")] = ""
						end
						if type(v) ~= ""Instance"" and type(v) ~= ""userdata"" then
							gen = gen .. ""object""
						elseif type(v) == ""string"" then
							gen = gen .. '""' .. v .. '""'
						elseif type(v) == ""userdata"" and typeof(v) ~= ""Instance"" then
							gen = gen .. string.format(""nil --[[%s]]"", typeof(v))
						elseif type(v) == ""userdata"" then
							gen = gen .. ""game."" .. v:GetFullName()
						end
					end
					gen = gen .. ""\n}\n\n""
				end)
			then
				gen = gen .. ""}\n-- Legacy tableToString failure! Unable to decompile.""
			end
		end
		if not remote:IsDescendantOf(game) and not getnilrequired then
			gen = ""function getNil(name,class) for _,v in pairs(getnilinstances())do if v.ClassName==class and v.Name==name then return v;end end end\n\n""
				.. gen
		end
		if remote:IsA(""RemoteEvent"") then
			gen = gen .. v2s(remote) .. "":FireServer(unpack(args))""
		elseif remote:IsA(""RemoteFunction"") then
			gen = gen .. v2s(remote) .. "":InvokeServer(unpack(args))""
		end
	else
		if remote:IsA(""RemoteEvent"") then
			gen = gen .. v2s(remote) .. "":FireServer()""
		elseif remote:IsA(""RemoteFunction"") then
			gen = gen .. v2s(remote) .. "":InvokeServer()""
		end
	end
	gen = ""-- Script generated by SimpleSpy - credits to exx#9394\n\n"" .. gen
	prevTables = {}
	return gen
end

--- value-to-string: value, string (out), level (indentation), parent table, var name, is from tovar
function v2s(v, l, p, n, vtv, i, pt, path, tables, tI)
	if not tI then
		tI = { 0 }
	else
		tI[1] += 1
	end
	if typeof(v) == ""number"" then
		if v == math.huge then
			return ""math.huge""
		elseif tostring(v):match(""nan"") then
			return ""0/0 --[[NaN]]""
		end
		return tostring(v)
	elseif typeof(v) == ""boolean"" then
		return tostring(v)
	elseif typeof(v) == ""string"" then
		return formatstr(v, l)
	elseif typeof(v) == ""function"" then
		return f2s(v)
	elseif typeof(v) == ""table"" then
		return t2s(v, l, p, n, vtv, i, pt, path, tables, tI)
	elseif typeof(v) == ""Instance"" then
		return i2p(v)
	elseif typeof(v) == ""userdata"" then
		return ""newproxy(true)""
	elseif type(v) == ""userdata"" then
		return u2s(v)
	elseif type(v) == ""vector"" then
		return string.format(""Vector3.new(%s, %s, %s)"", v2s(v.X), v2s(v.Y), v2s(v.Z))
	else
		return ""nil --[["" .. typeof(v) .. ""]]""
	end
end

--- value-to-variable
--- @param t any
function v2v(t)
	topstr = """"
	bottomstr = """"
	getnilrequired = false
	local ret = """"
	local count = 1
	for i, v in pairs(t) do
		if type(i) == ""string"" and i:match(""^[%a_]+[%w_]*$"") then
			ret = ret .. ""local "" .. i .. "" = "" .. v2s(v, nil, nil, i, true) .. ""\n""
		elseif tostring(i):match(""^[%a_]+[%w_]*$"") then
			ret = ret
				.. ""local ""
				.. tostring(i):lower()
				.. ""_""
				.. tostring(count)
				.. "" = ""
				.. v2s(v, nil, nil, tostring(i):lower() .. ""_"" .. tostring(count), true)
				.. ""\n""
		else
			ret = ret
				.. ""local ""
				.. type(v)
				.. ""_""
				.. tostring(count)
				.. "" = ""
				.. v2s(v, nil, nil, type(v) .. ""_"" .. tostring(count), true)
				.. ""\n""
		end
		count = count + 1
	end
	if getnilrequired then
		topstr = ""function getNil(name,class) for _,v in pairs(getnilinstances())do if v.ClassName==class and v.Name==name then return v;end end end\n""
			.. topstr
	end
	if #topstr > 0 then
		ret = topstr .. ""\n"" .. ret
	end
	if #bottomstr > 0 then
		ret = ret .. bottomstr
	end
	return ret
end

--- table-to-string
--- @param t table
--- @param l number
--- @param p table
--- @param n string
--- @param vtv boolean
--- @param i any
--- @param pt table
--- @param path string
--- @param tables table
--- @param tI table
function t2s(t, l, p, n, vtv, i, pt, path, tables, tI)
	local globalIndex = table.find(getgenv(), t) -- checks if table is a global
	if type(globalIndex) == ""string"" then
		return globalIndex
	end
	if not tI then
		tI = { 0 }
	end
	if not path then -- sets path to empty string (so it doesn't have to manually provided every time)
		path = """"
	end
	if not l then -- sets the level to 0 (for indentation) and tables for logging tables it already serialized
		l = 0
		tables = {}
	end
	if not p then -- p is the previous table but doesn't really matter if it's the first
		p = t
	end
	for _, v in pairs(tables) do -- checks if the current table has been serialized before
		if n and rawequal(v, t) then
			bottomstr = bottomstr
				.. ""\n""
				.. tostring(n)
				.. tostring(path)
				.. "" = ""
				.. tostring(n)
				.. tostring(({ v2p(v, p) })[2])
			return ""{} --[[DUPLICATE]]""
		end
	end
	table.insert(tables, t) -- logs table to past tables
	local s = ""{"" -- start of serialization
	local size = 0
	l = l + indent -- set indentation level
	for k, v in pairs(t) do -- iterates over table
		size = size + 1 -- changes size for max limit
		if size > (_G.SimpleSpyMaxTableSize or 1000) then
			s = s
				.. ""\n""
				.. string.rep("" "", l)
				.. ""-- MAXIMUM TABLE SIZE REACHED, CHANGE '_G.SimpleSpyMaxTableSize' TO ADJUST MAXIMUM SIZE ""
			break
		end
		if rawequal(k, t) then -- checks if the table being iterated over is being used as an index within itself (yay, lua)
			bottomstr = bottomstr
				.. ""\n""
				.. tostring(n)
				.. tostring(path)
				.. ""[""
				.. tostring(n)
				.. tostring(path)
				.. ""]""
				.. "" = ""
				.. (
					rawequal(v, k) and tostring(n) .. tostring(path)
					or v2s(v, l, p, n, vtv, k, t, path .. ""["" .. tostring(n) .. tostring(path) .. ""]"", tables)
				)
			size -= 1
			continue
		end
		local currentPath = """" -- initializes the path of 'v' within 't'
		if type(k) == ""string"" and k:match(""^[%a_]+[%w_]*$"") then -- cleanly handles table path generation (for the first half)
			currentPath = ""."" .. k
		else
			currentPath = ""["" .. k2s(k, l, p, n, vtv, k, t, path .. currentPath, tables, tI) .. ""]""
		end
		if size % 100 == 0 then
			scheduleWait()
		end
		-- actually serializes the member of the table
		s = s
			.. ""\n""
			.. string.rep("" "", l)
			.. ""[""
			.. k2s(k, l, p, n, vtv, k, t, path .. currentPath, tables, tI)
			.. ""] = ""
			.. v2s(v, l, p, n, vtv, k, t, path .. currentPath, tables, tI)
			.. "",""
	end
	if #s > 1 then -- removes the last comma because it looks nicer (no way to tell if it's done 'till it's done so...)
		s = s:sub(1, #s - 1)
	end
	if size > 0 then -- cleanly indents the last curly bracket
		s = s .. ""\n"" .. string.rep("" "", l - indent)
	end
	return s .. ""}""
end

--- key-to-string
function k2s(v, ...)
	if keyToString then
		if typeof(v) == ""userdata"" and getrawmetatable(v) then
			return string.format(
				'""<void> (%s)"" --[[Potentially hidden data (tostring in SimpleSpy:HookRemote/GetRemoteFiredSignal at your own risk)]]',
				safetostring(v)
			)
		elseif typeof(v) == ""userdata"" then
			return string.format('""<void> (%s)""', safetostring(v))
		elseif type(v) == ""userdata"" and typeof(v) ~= ""Instance"" then
			return string.format('""<%s> (%s)""', typeof(v), tostring(v))
		elseif type(v) == ""function"" then
			return string.format('""<Function> (%s)""', tostring(v))
		end
	end
	return v2s(v, ...)
end

--- function-to-string
function f2s(f)
	for k, x in pairs(getgenv()) do
		local isgucci, gpath
		if rawequal(x, f) then
			isgucci, gpath = true, """"
		elseif type(x) == ""table"" then
			isgucci, gpath = v2p(f, x)
		end
		if isgucci and type(k) ~= ""function"" then
			if type(k) == ""string"" and k:match(""^[%a_]+[%w_]*$"") then
				return k .. gpath
			else
				return ""getgenv()["" .. v2s(k) .. ""]"" .. gpath
			end
		end
	end
	if funcEnabled and debug.getinfo(f).name:match(""^[%a_]+[%w_]*$"") then
		return ""function()end --[["" .. debug.getinfo(f).name .. ""]]""
	end
	return ""function()end --[["" .. tostring(f) .. ""]]""
end

--- instance-to-path
--- @param i userdata
function i2p(i)
	local player = getplayer(i)
	local parent = i
	local out = """"
	if parent == nil then
		return ""nil""
	elseif player then
		while true do
			if parent and parent == player.Character then
				if player == Players.LocalPlayer then
					return 'game:GetService(""Players"").LocalPlayer.Character' .. out
				else
					return i2p(player) .. "".Character"" .. out
				end
			else
				if parent.Name:match(""[%a_]+[%w+]*"") ~= parent.Name then
					out = "":FindFirstChild("" .. formatstr(parent.Name) .. "")"" .. out
				else
					out = ""."" .. parent.Name .. out
				end
			end
			parent = parent.Parent
		end
	elseif parent ~= game then
		while true do
			if parent and parent.Parent == game then
				local service = game:FindService(parent.ClassName)
				if service then
					if parent.ClassName == ""Workspace"" then
						return ""workspace"" .. out
					else
						return 'game:GetService(""' .. service.ClassName .. '"")' .. out
					end
				else
					if parent.Name:match(""[%a_]+[%w_]*"") then
						return ""game."" .. parent.Name .. out
					else
						return ""game:FindFirstChild("" .. formatstr(parent.Name) .. "")"" .. out
					end
				end
			elseif parent.Parent == nil then
				getnilrequired = true
				return ""getNil("" .. formatstr(parent.Name) .. ', ""' .. parent.ClassName .. '"")' .. out
			elseif parent == Players.LocalPlayer then
				out = "".LocalPlayer"" .. out
			else
				if parent.Name:match(""[%a_]+[%w_]*"") ~= parent.Name then
					out = "":FindFirstChild("" .. formatstr(parent.Name) .. "")"" .. out
				else
					out = ""."" .. parent.Name .. out
				end
			end
			parent = parent.Parent
		end
	else
		return ""game""
	end
end

--- userdata-to-string: userdata
--- @param u userdata
function u2s(u)
	if typeof(u) == ""TweenInfo"" then
		-- TweenInfo
		return ""TweenInfo.new(""
			.. tostring(u.Time)
			.. "", Enum.EasingStyle.""
			.. tostring(u.EasingStyle)
			.. "", Enum.EasingDirection.""
			.. tostring(u.EasingDirection)
			.. "", ""
			.. tostring(u.RepeatCount)
			.. "", ""
			.. tostring(u.Reverses)
			.. "", ""
			.. tostring(u.DelayTime)
			.. "")""
	elseif typeof(u) == ""Ray"" then
		-- Ray
		return ""Ray.new("" .. u2s(u.Origin) .. "", "" .. u2s(u.Direction) .. "")""
	elseif typeof(u) == ""NumberSequence"" then
		-- NumberSequence
		local ret = ""NumberSequence.new(""
		for i, v in pairs(u.KeyPoints) do
			ret = ret .. tostring(v)
			if i < #u.Keypoints then
				ret = ret .. "", ""
			end
		end
		return ret .. "")""
	elseif typeof(u) == ""DockWidgetPluginGuiInfo"" then
		-- DockWidgetPluginGuiInfo
		return ""DockWidgetPluginGuiInfo.new(Enum.InitialDockState"" .. tostring(u) .. "")""
	elseif typeof(u) == ""ColorSequence"" then
		-- ColorSequence
		local ret = ""ColorSequence.new(""
		for i, v in pairs(u.KeyPoints) do
			ret = ret .. ""Color3.new("" .. tostring(v) .. "")""
			if i < #u.Keypoints then
				ret = ret .. "", ""
			end
		end
		return ret .. "")""
	elseif typeof(u) == ""BrickColor"" then
		-- BrickColor
		return ""BrickColor.new("" .. tostring(u.Number) .. "")""
	elseif typeof(u) == ""NumberRange"" then
		-- NumberRange
		return ""NumberRange.new("" .. tostring(u.Min) .. "", "" .. tostring(u.Max) .. "")""
	elseif typeof(u) == ""Region3"" then
		-- Region3
		local center = u.CFrame.Position
		local size = u.CFrame.Size
		local vector1 = center - size / 2
		local vector2 = center + size / 2
		return ""Region3.new("" .. u2s(vector1) .. "", "" .. u2s(vector2) .. "")""
	elseif typeof(u) == ""Faces"" then
		-- Faces
		local faces = {}
		if u.Top then
			table.insert(faces, ""Enum.NormalId.Top"")
		end
		if u.Bottom then
			table.insert(faces, ""Enum.NormalId.Bottom"")
		end
		if u.Left then
			table.insert(faces, ""Enum.NormalId.Left"")
		end
		if u.Right then
			table.insert(faces, ""Enum.NormalId.Right"")
		end
		if u.Back then
			table.insert(faces, ""Enum.NormalId.Back"")
		end
		if u.Front then
			table.insert(faces, ""Enum.NormalId.Front"")
		end
		return ""Faces.new("" .. table.concat(faces, "", "") .. "")""
	elseif typeof(u) == ""EnumItem"" then
		return tostring(u)
	elseif typeof(u) == ""Enums"" then
		return ""Enum""
	elseif typeof(u) == ""Enum"" then
		return ""Enum."" .. tostring(u)
	elseif typeof(u) == ""RBXScriptSignal"" then
		return ""nil --[[RBXScriptSignal]]""
	elseif typeof(u) == ""Vector3"" then
		return string.format(""Vector3.new(%s, %s, %s)"", v2s(u.X), v2s(u.Y), v2s(u.Z))
	elseif typeof(u) == ""CFrame"" then
		local xAngle, yAngle, zAngle = u:ToEulerAnglesXYZ()
		return string.format(
			""CFrame.new(%s, %s, %s) * CFrame.Angles(%s, %s, %s)"",
			v2s(u.X),
			v2s(u.Y),
			v2s(u.Z),
			v2s(xAngle),
			v2s(yAngle),
			v2s(zAngle)
		)
	elseif typeof(u) == ""DockWidgetPluginGuiInfo"" then
		return string.format(
			""DockWidgetPluginGuiInfo(%s, %s, %s, %s, %s, %s, %s)"",
			""Enum.InitialDockState.Right"",
			v2s(u.InitialEnabled),
			v2s(u.InitialEnabledShouldOverrideRestore),
			v2s(u.FloatingXSize),
			v2s(u.FloatingYSize),
			v2s(u.MinWidth),
			v2s(u.MinHeight)
		)
	elseif typeof(u) == ""PathWaypoint"" then
		return string.format(""PathWaypoint.new(%s, %s)"", v2s(u.Position), v2s(u.Action))
	elseif typeof(u) == ""UDim"" then
		return string.format(""UDim.new(%s, %s)"", v2s(u.Scale), v2s(u.Offset))
	elseif typeof(u) == ""UDim2"" then
		return string.format(
			""UDim2.new(%s, %s, %s, %s)"",
			v2s(u.X.Scale),
			v2s(u.X.Offset),
			v2s(u.Y.Scale),
			v2s(u.Y.Offset)
		)
	elseif typeof(u) == ""Rect"" then
		return string.format(""Rect.new(%s, %s)"", v2s(u.Min), v2s(u.Max))
	else
		return string.format(""nil --[[%s]]"", typeof(u))
	end
end

--- Gets the player an instance is descended from
function getplayer(instance)
	for _, v in pairs(Players:GetPlayers()) do
		if v.Character and (instance:IsDescendantOf(v.Character) or instance == v.Character) then
			return v
		end
	end
end

--- value-to-path (in table)
function v2p(x, t, path, prev)
	if not path then
		path = """"
	end
	if not prev then
		prev = {}
	end
	if rawequal(x, t) then
		return true, """"
	end
	for i, v in pairs(t) do
		if rawequal(v, x) then
			if type(i) == ""string"" and i:match(""^[%a_]+[%w_]*$"") then
				return true, (path .. ""."" .. i)
			else
				return true, (path .. ""["" .. v2s(i) .. ""]"")
			end
		end
		if type(v) == ""table"" then
			local duplicate = false
			for _, y in pairs(prev) do
				if rawequal(y, v) then
					duplicate = true
				end
			end
			if not duplicate then
				table.insert(prev, t)
				local found
				found, p = v2p(x, v, path, prev)
				if found then
					if type(i) == ""string"" and i:match(""^[%a_]+[%w_]*$"") then
						return true, ""."" .. i .. p
					else
						return true, ""["" .. v2s(i) .. ""]"" .. p
					end
				end
			end
		end
	end
	return false, """"
end

--- format s: string, byte encrypt (for weird symbols)
function formatstr(s, indentation)
	if not indentation then
		indentation = 0
	end
	local handled, reachedMax = handlespecials(s, indentation)
	return '""'
		.. handled
		.. '""'
		.. (
			reachedMax
				and "" --[[ MAXIMUM STRING SIZE REACHED, CHANGE '_G.SimpleSpyMaxStringSize' TO ADJUST MAXIMUM SIZE ]]""
			or """"
		)
end

--- Adds \'s to the text as a replacement to whitespace chars and other things because string.format can't yayeet
function handlespecials(value, indentation)
	local buildStr = {}
	local i = 1
	local char = string.sub(value, i, i)
	local indentStr
	while char ~= """" do
		if char == '""' then
			buildStr[i] = '\\""'
		elseif char == ""\\"" then
			buildStr[i] = ""\\\\""
		elseif char == ""\n"" then
			buildStr[i] = ""\\n""
		elseif char == ""\t"" then
			buildStr[i] = ""\\t""
		elseif string.byte(char) > 126 or string.byte(char) < 32 then
			buildStr[i] = string.format(""\\%d"", string.byte(char))
		else
			buildStr[i] = char
		end
		i = i + 1
		char = string.sub(value, i, i)
		if i % 200 == 0 then
			indentStr = indentStr or string.rep("" "", indentation + indent)
			table.move({ '""\n', indentStr, '... ""' }, 1, 3, i, buildStr)
			i += 3
		end
	end
	return table.concat(buildStr)
end

-- safe (ish) tostring
function safetostring(v: any)
	if typeof(v) == ""userdata"" or type(v) == ""table"" then
		local mt = getrawmetatable(v)
		local badtostring = mt and rawget(mt, ""__tostring"")
		if mt and badtostring then
			rawset(mt, ""__tostring"", nil)
			local out = tostring(v)
			rawset(mt, ""__tostring"", badtostring)
			return out
		end
	end
	return tostring(v)
end

--- finds script from 'src' from getinfo, returns nil if not found
--- @param src string
function getScriptFromSrc(src)
	local realPath
	local runningTest
	--- @type number
	local s, e
	local match = false
	if src:sub(1, 1) == ""="" then
		realPath = game
		s = 2
	else
		runningTest = src:sub(2, e and e - 1 or -1)
		for _, v in pairs(getnilinstances()) do
			if v.Name == runningTest then
				realPath = v
				break
			end
		end
		s = #runningTest + 1
	end
	if realPath then
		e = src:sub(s, -1):find(""%."")
		local i = 0
		repeat
			i += 1
			if not e then
				runningTest = src:sub(s, -1)
				local test = realPath.FindFirstChild(realPath, runningTest)
				if test then
					realPath = test
				end
				match = true
			else
				runningTest = src:sub(s, e)
				local test = realPath.FindFirstChild(realPath, runningTest)
				local yeOld = e
				if test then
					realPath = test
					s = e + 2
					e = src:sub(e + 2, -1):find(""%."")
					e = e and e + yeOld or e
				else
					e = src:sub(e + 2, -1):find(""%."")
					e = e and e + yeOld or e
				end
			end
		until match or i >= 50
	end
	return realPath
end

--- schedules the provided function (and calls it with any args after)
function schedule(f, ...)
	table.insert(scheduled, { f, ... })
end

--- yields the current thread until the scheduler gives the ok
function scheduleWait()
	local thread = coroutine.running()
	schedule(function()
		coroutine.resume(thread)
	end)
	coroutine.yield()
end

--- the big (well tbh small now) boi task scheduler himself, handles p much anything as quicc as possible
function taskscheduler()
	if not toggle then
		scheduled = {}
		return
	end
	if #scheduled > 1000 then
		table.remove(scheduled, #scheduled)
	end
	if #scheduled > 0 then
		local currentf = scheduled[1]
		table.remove(scheduled, 1)
		if type(currentf) == ""table"" and type(currentf[1]) == ""function"" then
			pcall(unpack(currentf))
		end
	end
end

--- Handles remote logs
function remoteHandler(hookfunction, methodName, remote, args, funcInfo, calling, returnValue)
	local validInstance, validClass = pcall(function()
		return remote:IsA(""RemoteEvent"") or remote:IsA(""RemoteFunction"")
	end)
	if validInstance and validClass then
		local func = funcInfo.func
		if not calling then
			_, calling = pcall(getScriptFromSrc, funcInfo.source)
		end
		coroutine.wrap(function()
			if remoteSignals[remote] then
				remoteSignals[remote]:Fire(args)
			end
		end)()
		if autoblock then
			if excluding[remote] then
				return
			end
			if not history[remote] then
				history[remote] = { badOccurances = 0, lastCall = tick() }
			end
			if tick() - history[remote].lastCall < 1 then
				history[remote].badOccurances += 1
				return
			else
				history[remote].badOccurances = 0
			end
			if history[remote].badOccurances > 3 then
				excluding[remote] = true
				return
			end
			history[remote].lastCall = tick()
		end
		local functionInfoStr
		local src
		if func and islclosure(func) then
			local functionInfo = {}
			functionInfo.info = funcInfo
			pcall(function()
				functionInfo.constants = debug.getconstants(func)
			end)
			pcall(function()
				functionInfoStr = v2v({ functionInfo = functionInfo })
			end)
			pcall(function()
				if type(calling) == ""userdata"" then
					src = calling
				end
			end)
		end
		if methodName:lower() == ""fireserver"" then
			newRemote(
				""event"",
				remote.Name,
				args,
				remote,
				functionInfoStr,
				(blocklist[remote] or blocklist[remote.Name]),
				src
			)
		elseif methodName:lower() == ""invokeserver"" then
			newRemote(
				""function"",
				remote.Name,
				args,
				remote,
				functionInfoStr,
				(blocklist[remote] or blocklist[remote.Name]),
				src,
				returnValue
			)
		end
	end
end

--- Used for hookfunction
function hookRemote(remoteType, remote, ...)
	if typeof(remote) == ""Instance"" then
		local args = { ... }
		local validInstance, remoteName = pcall(function()
			return remote.Name
		end)
		if validInstance and not (blacklist[remote] or blacklist[remoteName]) then
			local funcInfo = {}
			local calling
			if funcEnabled then
				funcInfo = debug.getinfo(4) or funcInfo
				calling = useGetCallingScript and getcallingscript() or nil
			end
			if recordReturnValues and remoteType == ""RemoteFunction"" then
				local thread = coroutine.running()
				local args = { ... }
				task.defer(function()
					local returnValue
					if remoteHooks[remote] then
						args = { remoteHooks[remote](unpack(args)) }
						returnValue = originalFunction(remote, unpack(args))
					else
						returnValue = originalFunction(remote, unpack(args))
					end
					schedule(
						remoteHandler,
						true,
						remoteType == ""RemoteEvent"" and ""fireserver"" or ""invokeserver"",
						remote,
						args,
						funcInfo,
						calling,
						returnValue
					)
					if blocklist[remote] or blocklist[remoteName] then
						coroutine.resume(thread)
					else
						coroutine.resume(thread, unpack(returnValue))
					end
				end)
			else
				schedule(
					remoteHandler,
					true,
					remoteType == ""RemoteEvent"" and ""fireserver"" or ""invokeserver"",
					remote,
					args,
					funcInfo,
					calling
				)
				if blocklist[remote] or blocklist[remoteName] then
					return
				end
			end
		end
	end
	if recordReturnValues and remoteType == ""RemoteFunction"" then
		return coroutine.yield()
	elseif remoteType == ""RemoteEvent"" then
		if remoteHooks[remote] then
			return originalEvent(remote, remoteHooks[remote](...))
		end
		return originalEvent(remote, ...)
	else
		if remoteHooks[remote] then
			return originalFunction(remote, remoteHooks[remote](...))
		end
		return originalFunction(remote, ...)
	end
end

local newnamecall = newcclosure(function(remote, ...)
	if typeof(remote) == ""Instance"" then
		local args = { ... }
		local methodName = getnamecallmethod()
		local validInstance, remoteName = pcall(function()
			return remote.Name
		end)
		if
			validInstance
			and (methodName == ""FireServer"" or methodName == ""fireServer"" or methodName == ""InvokeServer"" or methodName == ""invokeServer"")
			and not (blacklist[remote] or blacklist[remoteName])
		then
			local funcInfo = {}
			local calling
			if funcEnabled then
				funcInfo = debug.getinfo(3) or funcInfo
				calling = useGetCallingScript and getcallingscript() or nil
			end
			if recordReturnValues and (methodName == ""InvokeServer"" or methodName == ""invokeServer"") then
				local namecallThread = coroutine.running()
				local args = { ... }
				task.defer(function()
					local returnValue
					setnamecallmethod(methodName)
					if remoteHooks[remote] then
						args = { remoteHooks[remote](unpack(args)) }
						returnValue = { original(remote, unpack(args)) }
					else
						returnValue = { original(remote, unpack(args)) }
					end
					coroutine.resume(namecallThread, unpack(returnValue))
					coroutine.wrap(function()
						schedule(remoteHandler, false, methodName, remote, args, funcInfo, calling, returnValue)
					end)()
				end)
			else
				coroutine.wrap(function()
					schedule(remoteHandler, false, methodName, remote, args, funcInfo, calling)
				end)()
			end
		end
		if recordReturnValues and (methodName == ""InvokeServer"" or methodName == ""invokeServer"") then
			return coroutine.yield()
		elseif
			validInstance
			and (methodName == ""FireServer"" or methodName == ""fireServer"" or methodName == ""InvokeServer"" or methodName == ""invokeServer"")
			and (blocklist[remote] or blocklist[remoteName])
		then
			return nil
		elseif
			(not recordReturnValues or methodName ~= ""InvokeServer"" or methodName ~= ""invokeServer"")
			and validInstance
			and (methodName == ""FireServer"" or methodName == ""fireServer"" or methodName == ""InvokeServer"" or methodName == ""invokeServer"")
			and remoteHooks[remote]
		then
			return original(remote, remoteHooks[remote](...))
		else
			return original(remote, ...)
		end
	end
	return original(remote, ...)
end, original)

local newFireServer = newcclosure(function(...)
	return hookRemote(""RemoteEvent"", ...)
end, originalEvent)

local newInvokeServer = newcclosure(function(...)
	return hookRemote(""RemoteFunction"", ...)
end, originalFunction)

--- Toggles on and off the remote spy
function toggleSpy()
	if not toggle then
		if hookmetamethod then
			local oldNamecall = hookmetamethod(game, ""__namecall"", newnamecall)
			original = original or function(...)
				return oldNamecall(...)
			end
			_G.OriginalNamecall = original
		else
			gm = gm or getrawmetatable(game)
			original = original or function(...)
				return gm.__namecall(...)
			end
			setreadonly(gm, false)
			if not original then
				warn(""SimpleSpy: namecall method not found!"")
				onToggleButtonClick()
				return
			end
			gm.__namecall = newnamecall
			setreadonly(gm, true)
		end
		originalEvent = hookfunction(remoteEvent.FireServer, newFireServer)
		originalFunction = hookfunction(remoteFunction.InvokeServer, newInvokeServer)
	else
		if hookmetamethod then
			if original then
				hookmetamethod(game, ""__namecall"", original)
			end
		else
			gm = gm or getrawmetatable(game)
			setreadonly(gm, false)
			gm.__namecall = original
			setreadonly(gm, true)
		end
		hookfunction(remoteEvent.FireServer, originalEvent)
		hookfunction(remoteFunction.InvokeServer, originalFunction)
	end
end

--- Toggles between the two remotespy methods (hookfunction currently = disabled)
function toggleSpyMethod()
	toggleSpy()
	toggle = not toggle
end

--- Shuts down the remote spy
function shutdown()
	if schedulerconnect then
		schedulerconnect:Disconnect()
	end
	for _, connection in pairs(connections) do
		coroutine.wrap(function()
			connection:Disconnect()
		end)()
	end
	SimpleSpy2:Destroy()
	hookfunction(remoteEvent.FireServer, originalEvent)
	hookfunction(remoteFunction.InvokeServer, originalFunction)
	if hookmetamethod then
		if original then
			hookmetamethod(game, ""__namecall"", original)
		end
	else
		gm = gm or getrawmetatable(game)
		setreadonly(gm, false)
		gm.__namecall = original
		setreadonly(gm, true)
	end
	_G.SimpleSpyExecuted = false
end

-- main
if not _G.SimpleSpyExecuted then
	local succeeded, err = pcall(function()
		if not RunService:IsClient() then
			error(""SimpleSpy cannot run on the server!"")
		end
		if
			not hookfunction
			or not getrawmetatable
			or getrawmetatable and not getrawmetatable(game).__namecall
			or not setreadonly
		then
			local missing = {}
			if not hookfunction then
				table.insert(missing, ""hookfunction"")
			end
			if not getrawmetatable then
				table.insert(missing, ""getrawmetatable"")
			end
			if getrawmetatable and not getrawmetatable(game).__namecall then
				table.insert(missing, ""getrawmetatable(game).__namecall"")
			end
			if not setreadonly then
				table.insert(missing, ""setreadonly"")
			end
			shutdown()
			error(
				""This environment does not support method hooks!\n(Your exploit is not capable of running SimpleSpy)\nMissing: ""
					.. table.concat(missing, "", "")
			)
		end
		_G.SimpleSpyShutdown = shutdown
		ContentProvider:PreloadAsync({
			""rbxassetid://6065821980"",
			""rbxassetid://6065774948"",
			""rbxassetid://6065821086"",
			""rbxassetid://6065821596"",
			ImageLabel,
			ImageLabel_2,
			ImageLabel_3,
		})
		-- if gethui then funcEnabled = false end
		onToggleButtonClick()
		RemoteTemplate.Parent = nil
		FunctionTemplate.Parent = nil
		codebox = Highlight.new(CodeBox)
		codebox:setRaw("""")
		getgenv().SimpleSpy = SimpleSpy
		getgenv().getNil = function(name, class)
			for _, v in pairs(getnilinstances()) do
				if v.ClassName == class and v.Name == name then
					return v
				end
			end
		end
		TextLabel:GetPropertyChangedSignal(""Text""):Connect(scaleToolTip)
		-- TopBar.InputBegan:Connect(onBarInput)
		MinimizeButton.MouseButton1Click:Connect(toggleMinimize)
		MaximizeButton.MouseButton1Click:Connect(toggleSideTray)
		Simple.MouseButton1Click:Connect(onToggleButtonClick)
		CloseButton.MouseEnter:Connect(onXButtonHover)
		CloseButton.MouseLeave:Connect(onXButtonUnhover)
		Simple.MouseEnter:Connect(onToggleButtonHover)
		Simple.MouseLeave:Connect(onToggleButtonUnhover)
		CloseButton.MouseButton1Click:Connect(shutdown)
		table.insert(connections, UserInputService.InputBegan:Connect(backgroundUserInput))
		connectResize()
		SimpleSpy2.Enabled = true
		coroutine.wrap(function()
			wait(1)
			onToggleButtonUnhover()
		end)()
		schedulerconnect = RunService.Heartbeat:Connect(taskscheduler)
		if syn and syn.protect_gui then
			pcall(syn.protect_gui, SimpleSpy2)
		end
		bringBackOnResize()
		SimpleSpy2.Parent = --[[gethui and gethui() or]]
			CoreGui
		_G.SimpleSpyExecuted = true
		if not Players.LocalPlayer then
			Players:GetPropertyChangedSignal(""LocalPlayer""):Wait()
		end
		Mouse = Players.LocalPlayer:GetMouse()
		oldIcon = Mouse.Icon
		table.insert(connections, Mouse.Move:Connect(mouseMoved))
	end)
	if not succeeded then
		warn(
			""A fatal error has occured, SimpleSpy was unable to launch properly.\nPlease DM this error message to @exx#9394:\n\n""
				.. tostring(err)
		)
		SimpleSpy2:Destroy()
		hookfunction(remoteEvent.FireServer, originalEvent)
		hookfunction(remoteFunction.InvokeServer, originalFunction)
		if hookmetamethod then
			if original then
				hookmetamethod(game, ""__namecall"", original)
			end
		else
			setreadonly(gm, false)
			gm.__namecall = original
			setreadonly(gm, true)
		end
		return
	end
else
	SimpleSpy2:Destroy()
	return
end

----- ADD ONS ----- (easily add or remove additonal functionality to the RemoteSpy!)
--[[
    Some helpful things:
        - add your function in here, and create buttons for them through the 'newButton' function
        - the first argument provided is the TextButton the player clicks to run the function
        - generated scripts are generated when the namecall is initially fired and saved in remoteFrame objects
        - blacklisted remotes will be ignored directly in namecall (less lag)
        - the properties of a 'remoteFrame' object:
            {
                Name: (string) The name of the Remote
                GenScript: (string) The generated script that appears in the codebox (generated when namecall fired)
                Source: (Instance (LocalScript)) The script that fired/invoked the remote
                Remote: (Instance (RemoteEvent) | Instance (RemoteFunction)) The remote that was fired/invoked
                Log: (Instance (TextButton)) The button being used for the remote (same as 'selected.Log')
            }
        - globals list: (contact @exx#9394 for more information or if you have suggestions for more to be added)
            - closed: (boolean) whether or not the GUI is currently minimized
            - logs: (table[remoteFrame]) full of remoteFrame objects (properties listed above)
            - selected: (remoteFrame) the currently selected remoteFrame (properties listed above)
            - blacklist: (string[] | Instance[] (RemoteEvent) | Instance[] (RemoteFunction)) an array of blacklisted names and remotes
            - codebox: (Instance (TextBox)) the textbox that holds all the code- cleared often
]]
-- Copies the contents of the codebox
newButton(""Copy Code"", function()
	return ""Click to copy code""
end, function()
	setclipboard(codebox:getString())
	TextLabel.Text = ""Copied successfully!""
end)

--- Copies the source script (that fired the remote)
newButton(""Copy Remote"", function()
	return ""Click to copy the path of the remote""
end, function()
	if selected then
		setclipboard(v2s(selected.Remote.remote))
		TextLabel.Text = ""Copied!""
	end
end)

-- Executes the contents of the codebox through loadstring
newButton(""Run Code"", function()
	return ""Click to execute code""
end, function()
	local orText = ""Click to execute code""
	TextLabel.Text = ""Executing...""
	local succeeded = pcall(function()
		return loadstring(codebox:getString())()
	end)
	if succeeded then
		TextLabel.Text = ""Executed successfully!""
	else
		TextLabel.Text = ""Execution error!""
	end
end)

--- Gets the calling script (not super reliable but w/e)
newButton(""Get Script"", function()
	return ""Click to copy calling script to clipboard\nWARNING: Not super reliable, nil == could not find""
end, function()
	if selected then
		setclipboard(SimpleSpy:ValueToString(selected.Source))
		TextLabel.Text = ""Done!""
	end
end)

--- Decompiles the script that fired the remote and puts it in the code box
newButton(""Function Info"", function()
	return ""Click to view calling function information""
end, function()
	if selected then
		if selected.Function then
			codebox:setRaw(
				""-- Calling function info\n-- Generated by the SimpleSpy serializer\n\n"" .. tostring(selected.Function)
			)
		end
		TextLabel.Text = ""Done! Function info generated by the SimpleSpy Serializer.""
	end
end)

--- Clears the Remote logs
newButton(""Clr Logs"", function()
	return ""Click to clear logs""
end, function()
	TextLabel.Text = ""Clearing...""
	logs = {}
	for _, v in pairs(LogList:GetChildren()) do
		if not v:IsA(""UIListLayout"") then
			v:Destroy()
		end
	end
	codebox:setRaw("""")
	selected = nil
	TextLabel.Text = ""Logs cleared!""
end)

--- Excludes the selected.Log Remote from the RemoteSpy
newButton(""Exclude (i)"", function()
	return ""Click to exclude this Remote.\nExcluding a remote makes SimpleSpy ignore it, but it will continue to be usable.""
end, function()
	if selected then
		blacklist[selected.Remote.remote] = true
		TextLabel.Text = ""Excluded!""
	end
end)

--- Excludes all Remotes that share the same name as the selected.Log remote from the RemoteSpy
newButton(""Exclude (n)"", function()
	return ""Click to exclude all remotes with this name.\nExcluding a remote makes SimpleSpy ignore it, but it will continue to be usable.""
end, function()
	if selected then
		blacklist[selected.Name] = true
		TextLabel.Text = ""Excluded!""
	end
end)

--- clears blacklist
newButton(""Clr Blacklist"", function()
	return ""Click to clear the blacklist.\nExcluding a remote makes SimpleSpy ignore it, but it will continue to be usable.""
end, function()
	blacklist = {}
	TextLabel.Text = ""Blacklist cleared!""
end)

--- Prevents the selected.Log Remote from firing the server (still logged)
newButton(""Block (i)"", function()
	return ""Click to stop this remote from firing.\nBlocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server.""
end, function()
	if selected then
		if selected.Remote.remote then
			blocklist[selected.Remote.remote] = true
			TextLabel.Text = ""Excluded!""
		else
			TextLabel.Text = ""Error! Instance may no longer exist, try using Block (n).""
		end
	end
end)

--- Prevents all remotes from firing that share the same name as the selected.Log remote from the RemoteSpy (still logged)
newButton(""Block (n)"", function()
	return ""Click to stop remotes with this name from firing.\nBlocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server.""
end, function()
	if selected then
		blocklist[selected.Name] = true
		TextLabel.Text = ""Excluded!""
	end
end)

--- clears blacklist
newButton(""Clr Blocklist"", function()
	return ""Click to stop blocking remotes.\nBlocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server.""
end, function()
	blocklist = {}
	TextLabel.Text = ""Blocklist cleared!""
end)

--- Attempts to decompile the source script
newButton(""Decompile"", function()
	return ""Attempts to decompile source script\nWARNING: Not super reliable, nil == could not find""
end, function()
	if selected then
		if selected.Source then
			codebox:setRaw(decompile(selected.Source))
			TextLabel.Text = ""Done!""
		else
			TextLabel.Text = ""Source not found!""
		end
	end
end)

newButton(""Disable Info"", function()
	return string.format(
		""[%s] Toggle function info (because it can cause lag in some games)"",
		funcEnabled and ""ENABLED"" or ""DISABLED""
	)
end, function()
	funcEnabled = not funcEnabled
	TextLabel.Text = string.format(
		""[%s] Toggle function info (because it can cause lag in some games)"",
		funcEnabled and ""ENABLED"" or ""DISABLED""
	)
end)

newButton(""Autoblock"", function()
	return string.format(
		""[%s] [BETA] Intelligently detects and excludes spammy remote calls from logs"",
		autoblock and ""ENABLED"" or ""DISABLED""
	)
end, function()
	autoblock = not autoblock
	TextLabel.Text = string.format(
		""[%s] [BETA] Intelligently detects and excludes spammy remote calls from logs"",
		autoblock and ""ENABLED"" or ""DISABLED""
	)
	history = {}
	excluding = {}
end)

newButton(""CallingScript"", function()
	return string.format(
		""[%s] [UNSAFE] Uses 'getcallingscript' to get calling script for Decompile and GetScript. Much more reliable, but opens up SimpleSpy to detection and/or instability."",
		useGetCallingScript and ""ENABLED"" or ""DISABLED""
	)
end, function()
	useGetCallingScript = not useGetCallingScript
	TextLabel.Text = string.format(
		""[%s] [UNSAFE] Uses 'getcallingscript' to get calling script for Decompile and GetScript. Much more reliable, but opens up SimpleSpy to detection and/or instability."",
		useGetCallingScript and ""ENABLED"" or ""DISABLED""
	)
end)

newButton(""KeyToString"", function()
	return string.format(
		""[%s] [BETA] Uses an experimental new function to replicate Roblox's behavior when a non-primitive type is used as a key in a table. Still in development and may not properly reflect tostringed (empty) userdata."",
		keyToString and ""ENABLED"" or ""DISABLED""
	)
end, function()
	keyToString = not keyToString
	TextLabel.Text = string.format(
		""[%s] [BETA] Uses an experimental new function to replicate Roblox's behavior when a non-primitive type is used as a key in a table. Still in development and may not properly reflect tostringed (empty) userdata."",
		keyToString and ""ENABLED"" or ""DISABLED""
	)
end)

newButton(""ToggleReturnValues"", function()
	return string.format(
		""[%s] [EXPERIMENTAL] Enables recording of return values for 'GetReturnValue'\n\nUse this method at your own risk, as it could be detectable."",
		recordReturnValues and ""ENABLED"" or ""DISABLED""
	)
end, function()
	recordReturnValues = not recordReturnValues
	TextLabel.Text = string.format(
		""[%s] [EXPERIMENTAL] Enables recording of return values for 'GetReturnValue'\n\nUse this method at your own risk, as it could be detectable."",
		recordReturnValues and ""ENABLED"" or ""DISABLED""
	)
end)

newButton(""GetReturnValue"", function()
	return ""[Experimental] If 'ReturnValues' is enabled, this will show the recorded return value for the RemoteFunction (if available).""
end, function()
	if selected then
		codebox:setRaw(SimpleSpy:ValueToVar(selected.ReturnValue, ""returnValue""))
	end
end)"
G9MLBjHE,Untitled,Zer0Div,Python,Monday 29th of May 2023 09:45:28 AM CDT,"class GameSprite(sprite.Sprite):
   def __init__(self, player_image, player_x, 
                player_y, player_speed, 
                wight, height):
       super().__init__()
       self.image = transform.scale(image.load(
           player_image), 
        (wight, height)) 
       self.speed = player_speed
       self.rect = self.image.get_rect()
       self.rect.x = player_x
       self.rect.y = player_y"
n0FfVeeZ,Baby Simulator,LuaXe,Lua,Monday 29th of May 2023 09:44:21 AM CDT,"function C()
    spawn(function ()
        while getgenv().C do
            if game.Players.LocalPlayer.Character:FindFirstChildWhichIsA(""Tool"") then 
                game.Players.LocalPlayer.Character:FindFirstChildWhichIsA(""Tool""):Activate()
            end wait()
        end
    end)
end
function R()
    spawn(function ()
        while getgenv().R do
game:GetService(""ReplicatedStorage"").Remotes.Rebirth:FireServer() wait()
        end
    end)
end
function HE() spawn(function () while getgenv().H do local args = {[1] = E}game:GetService(""ReplicatedStorage"").Remotes.OpenEgg:InvokeServer(unpack(args)) if E == ""Common"" then local args = {[1] = ""Basic""}game:GetService(""ReplicatedStorage"").Remotes.OpenEgg:InvokeServer(unpack(args)) end if E == ""Rainbow"" then local args = {[1] = ""Gold""}game:GetService(""ReplicatedStorage"").Remotes.OpenEgg:InvokeServer(unpack(args)) end wait() end end) end
function HC() spawn(function () while getgenv().H do local args = {[1] = C}game:GetService(""ReplicatedStorage"").Remotes.OpenCrate:InvokeServer(unpack(args)) wait() end end) end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow(""Baby Simulator"")

local b = w:CreateFolder(""Main"")

b:Button(""TP To The Game"",function() game:GetService(""TeleportService""):Teleport(2823503928) end)

b:Button(""Size Reverse"",function() game:GetService(""ReplicatedStorage"").Remotes.CharacterSize:InvokeServer() end)

b:Toggle(""Inf. Happiness"",function(val) getgenv().C = val C() end)
b:Toggle(""Inf. Rebirths"",function(val) getgenv().R = val R() end)

b:Toggle(""Hatch an Egg"",function(val) getgenv().H = val HE() end)
b:Toggle(""Hatch a Crate"",function(val) getgenv().H = val HC() end)

b:Dropdown(""Choose an Egg"",{""Common"",""Striped"",""Spotted"",""Amethyst"",""Faberge"",""Rainbow""},true,function(val) E = val end)
b:Dropdown(""Choose a Crate"",{""Common"",""Uncommon"",""Rare"",""Epic"",""Legendary"",""Mythic""},true,function(val) C = val end)

b:Label(""Made by X_LuaF#0705"",{TextSize = 21; TextColor = Color3.fromRGB(255,255,255); BgColor = Color3.fromRGB(38, 38, 38);})

local w = library:CreateWindow(""LocalPlayer"")

local b = w:CreateFolder(""LP"")

b:DestroyGui()

b:Button(""Discord"",function() setclipboard(""workink.co/2GQ/LTD"") end)
b:Button(""Full Version"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/GphZf9Xe"", true))() end)
b:Button(""Rejoin"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/mM7JBG5h"", true))() end)
b:Button(""Reset"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/EEY6SATj"", true))() end)

b:Box(""Speed"",""number"",function(val) S = val end)
b:Box(""Jump"",""number"",function(val) J = val end)
b:Box(""Hip Height"",""number"",function(val) H = val end)
b:Box(""Gravity"",""number"",function(val) G = val end)
 
b:Toggle(""Speed"",function(bool) getgenv().Speed = bool Speed(S) end)
b:Toggle(""Jump"",function(bool) getgenv().Jump = bool Jump(J) end)
b:Toggle(""Hip Height"",function(bool) getgenv().Hip = bool Hip(H) end)
b:Toggle(""Gravity"",function(bool) getgenv().Grav = bool Grav(G) end)
 
b:Slider(""FOV (Default is 70)"",{min = 0;max = 120;precise = true;},function(val) game.workspace.CurrentCamera.FieldOfView = val end)

function TPCFrame(Player_CFrame) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Player_CFrame end end
function TPVector3(Player_Position) game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Player_Position.Position end
function PHP(Player_HP) game.Players.LocalPlayer.Character.Humanoid.Health = Player_HP end

function Chat(Mes, Freq) spawn(function () while getgenv().Chat do local args = {[1] = Mes,[2] = ""All""} game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args)) wait(Freq) end end) end
function Speed(Nume) spawn(function () while getgenv().Speed do game:GetService(""Players"").LocalPlayer.Character.Humanoid.WalkSpeed = Nume if not getgenv().Speed then game:GetService(""Players"").LocalPlayer.Character.Humanoid.WalkSpeed = 16 end wait() end end) end
function Jump(Nume) spawn(function () while getgenv().Jump do game:GetService(""Players"").LocalPlayer.Character.Humanoid.JumpPower = Nume if not getgenv().Jump then game:GetService(""Players"").LocalPlayer.Character.Humanoid.JumpPower = 50 end wait() end end) end
function Hip(Nume) spawn(function () while getgenv().Hip do game:GetService(""Players"").LocalPlayer.Character.Humanoid.HipHeight = Nume if not getgenv().Hip then game:GetService(""Players"").LocalPlayer.Character.Humanoid.HipHeight = 0.1 end wait() end end) end
function Grav(Nume) spawn(function () while getgenv().Grav do game:GetService(""Workspace"").Gravity = Nume if not getgenv().Grav then game:GetService(""Workspace"").Gravity = 196.2 end wait() end end) end"
q51nLhuv,Урок 8 свой препроцессор,kutuzzzov,C++,Monday 29th of May 2023 09:41:34 AM CDT,"#include <cassert>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <regex>
#include <sstream>
#include <string>
#include <string_view>
#include <vector>

using namespace std;
using filesystem::path;

path operator""""_p(const char* data, std::size_t sz) {
    return path(data, data + sz);
}

void PrintError(const string& dest, const string& src, int string_number) {
    cout << ""unknown include file ""s << dest
        << "" at file "" << src << "" at line ""s << string_number << endl;
}

// напишите эту функцию
bool Preprocess(istream& input, ostream& output, const path& file_name, const vector<path>& include_directories) {
    static regex local_reg (R""/(\s*#\s*include\s*""([^""]*)""\s*)/"");
    static regex remote_reg (R""/(\s*#\s*include\s*<([^>]*)>\s*)/"");
    smatch matched;
    int string_counter = 0;
    for (string str; getline(input, str); ) {
        ++string_counter;
        bool outside_find = false;
        path next_path;
        if (regex_match(str, matched, local_reg)) {
            next_path = file_name.parent_path() / string(matched[1]);
            if (filesystem::exists(next_path)) {
                ifstream in(next_path.string(), ios::in);
                if (in.is_open()) {
                    if (!Preprocess(in, output, next_path.string(), include_directories)) {
                        return false;
                    }
                    continue;
                }
                else {
                    PrintError(next_path.filename().string(), file_name.string(), string_counter);
                    return false;
                }
            }
            else {
                outside_find = true;
            }
        }
        if (outside_find || regex_match(str, matched, remote_reg)) {
            bool finded = false;
            for (const auto& dir : include_directories) {
                next_path = dir / string(matched[1]);
                if (filesystem::exists(next_path)) {
                    ifstream in(next_path.string(), ios::in);
                    if (in.is_open()) {
                        if (!Preprocess(in, output, next_path.string(), include_directories)) {
                            return false;
                        }
                        finded = true;
                        break;
                    }
                    else {
                        PrintError(next_path.filename().string(), file_name.string(), string_counter);
                        return false;
                    }
                }
            }
            if (!finded) {
                PrintError(next_path.filename().string(), file_name.string(), string_counter);
                return false;
            }
            continue;
        }
        output << str << endl;
    }
    return true;
}

bool Preprocess(const path& in_file, const path& out_file, const vector<path>& include_directories) {
    if (!filesystem::exists(in_file)) {
        return false;
    }
    ifstream in(in_file.string(), ios::in);
    if (!in) {
        return false;
    }
    ofstream out(out_file, ios::out);
    return Preprocess(in, out, in_file, include_directories);
}

string GetFileContents(string file) {
    ifstream stream(file);

    // конструируем string по двум итераторам
    return {(istreambuf_iterator<char>(stream)), istreambuf_iterator<char>()};
}

void Test() {
    error_code err;
    filesystem::remove_all(""sources""_p, err);
    filesystem::create_directories(""sources""_p / ""include2""_p / ""lib""_p, err);
    filesystem::create_directories(""sources""_p / ""include1""_p, err);
    filesystem::create_directories(""sources""_p / ""dir1""_p / ""subdir""_p, err);

    {
        ofstream file(""sources/a.cpp"");
        file << ""// this comment before include\n""
                ""#include \""dir1/b.h\""\n""
                ""// text between b.h and c.h\n""
                ""#include \""dir1/d.h\""\n""
                ""\n""
                ""int SayHello() {\n""
                ""    cout << \""hello, world!\"" << endl;\n""
                ""#   include<dummy.txt>\n""
                ""}\n""sv;
    }
    {
        ofstream file(""sources/dir1/b.h"");
        file << ""// text from b.h before include\n""
                ""#include \""subdir/c.h\""\n""
                ""// text from b.h after include""sv;
    }
    {
        ofstream file(""sources/dir1/subdir/c.h"");
        file << ""// text from c.h before include\n""
                ""#include <std1.h>\n""
                ""// text from c.h after include\n""sv;
    }
    {
        ofstream file(""sources/dir1/d.h"");
        file << ""// text from d.h before include\n""
                ""#include \""lib/std2.h\""\n""
                ""// text from d.h after include\n""sv;
    }
    {
        ofstream file(""sources/include1/std1.h"");
        file << ""// std1\n""sv;
    }
    {
        ofstream file(""sources/include2/lib/std2.h"");
        file << ""// std2\n""sv;
    }

    assert((!Preprocess(""sources""_p / ""a.cpp""_p, ""sources""_p / ""a.in""_p,
                                  {""sources""_p / ""include1""_p,""sources""_p / ""include2""_p})));

    ostringstream test_out;
    test_out << ""// this comment before include\n""
                ""// text from b.h before include\n""
                ""// text from c.h before include\n""
                ""// std1\n""
                ""// text from c.h after include\n""
                ""// text from b.h after include\n""
                ""// text between b.h and c.h\n""
                ""// text from d.h before include\n""
                ""// std2\n""
                ""// text from d.h after include\n""
                ""\n""
                ""int SayHello() {\n""
                ""    cout << \""hello, world!\"" << endl;\n""sv;

    assert(GetFileContents(""sources/a.in""s) == test_out.str());
}

int main() {
    Test();
}
"
M4TtucPi,Coordinates Grabber By Juice,DarkHorse89,Lua,Monday 29th of May 2023 09:40:49 AM CDT,"local coordgui = Instance.new(""ScreenGui"")
local main = Instance.new(""Frame"")
local title = Instance.new(""TextLabel"")
local grab = Instance.new(""TextButton"")
local copy = Instance.new(""TextButton"")
local teleport = Instance.new(""TextButton"")
local close = Instance.new(""TextButton"")
local cords = Instance.new(""TextLabel"")
--Properties:
coordgui.Name = ""coordgui""
coordgui.Parent = game.CoreGui

main.Name = ""main""
main.Parent = coordgui
main.BackgroundColor3 = Color3.new(1, 1, 1)
main.Position = UDim2.new(0.352638364, 0, 0.405797124, 0)
main.Size = UDim2.new(0, 228, 0, 170)
main.Style = Enum.FrameStyle.DropShadow
main.Active = true
main.Draggable = true

title.Name = ""title""
title.Parent = main
title.BackgroundColor3 = Color3.new(0, 0, 0)
title.Position = UDim2.new(-0.0517418832, 0, -0.054933358, 0)
title.Size = UDim2.new(0, 235, 0, 19)
title.Font = Enum.Font.SciFi
title.Text = ""Coordinates Grabber Gui""
title.TextColor3 = Color3.new(1, 1, 1)
title.TextSize = 14

grab.Name = ""grab""
grab.Parent = main
grab.BackgroundColor3 = Color3.new(0, 0, 0)
grab.Position = UDim2.new(0.0381504558, 0, 0.500263834, 0)
grab.Size = UDim2.new(0, 128, 0, 31)
grab.Font = Enum.Font.SciFi
grab.Text = ""Grab Coordinates""
grab.TextColor3 = Color3.new(1, 1, 1)
grab.TextSize = 14

copy.Name = ""copy""
copy.Parent = main
copy.BackgroundColor3 = Color3.new(0, 0, 0)
copy.Position = UDim2.new(0.697107434, 0, 0.495215261, 0)
copy.Size = UDim2.new(0, 52, 0, 32)
copy.Font = Enum.Font.SciFi
copy.Text = ""Copy""
copy.TextColor3 = Color3.new(1, 1, 1)
copy.TextSize = 14

teleport.Name = ""teleport""
teleport.Parent = main
teleport.BackgroundColor3 = Color3.new(0, 0, 0)
teleport.Position = UDim2.new(0.25, 0, 0.75, 0)
teleport.Size = UDim2.new(0, 60, 0, 32)
teleport.Font = Enum.Font.SciFi
teleport.Text = ""Teleport""
teleport.TextColor3 = Color3.new(1, 1, 1)
teleport.TextSize = 14

close.Name = ""close""
close.Parent = main
close.BackgroundColor3 = Color3.new(0, 0, 0)
close.Position = UDim2.new(0.55, 0, 0.75, 0)
close.Size = UDim2.new(0, 52, 0, 32)
close.Font = Enum.Font.SciFi
close.Text = ""Close""
close.TextColor3 = Color3.new(1, 1, 1)
close.TextSize = 14

cords.Name = ""cords""
cords.Parent = main
cords.BackgroundColor3 = Color3.new(0, 0, 0)
cords.Position = UDim2.new(0.0420129336, 0, 0.199266031, 0)
cords.Size = UDim2.new(0, 194, 0, 37)
cords.Font = Enum.Font.SciFi
cords.Text = """"
cords.TextColor3 = Color3.new(1, 1, 1)
cords.TextSize = 14

game:GetService(""UserInputService"").InputBegan:connect(onKeyPress)

grab.MouseButton1Down:Connect(function()
    cords.Text = tostring(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
    wait(0.25)
    print(''..tostring(game.Players.LocalPlayer.Character.HumanoidRootPart.Position))
end)

close.MouseButton1Down:Connect(function()
    coordgui:Destroy()
end)

function mysplit(inputstr, sep)
    if sep == nil then
        sep = ""%s""
    end
    local t={}
    for str in string.gmatch(inputstr, ""([^""..sep..""]+)"") do
        table.insert(t, str)
    end
    return t
end

teleport.MouseButton1Down:Connect(function()
    teleportTo = cords.Text
    if teleportTo and teleportTo ~= """" and teleportTo ~= "" "" then
        teleportTo = tostring(teleportTo)
        coordsToTeleport = mysplit(teleportTo, "", "")
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(coordsToTeleport[1], coordsToTeleport[2], coordsToTeleport[3])
    end
end)

copy.MouseButton1Down:Connect(function()
    setclipboard(""""..cords.Text)
end)"
G3BvKyqP,TOI19 Merge,MAGCARI,C++,Monday 29th of May 2023 09:27:37 AM CDT,"/*
	Task	: _example
	Author	: Phumipat C. [MAGCARI]
	Language: C++
	Created	: 29 May 2023 [19:56]
*/
#include<bits/stdc++.h>
using namespace std;
struct A{
	int pos,num;
	bool operator < (const A&o){
		if(pos != o.pos)	return pos < o.pos;
		else				return num < o.num;
	}
};
A a[100010],b[100010]; 
int main(){
	cin.tie(0)->sync_with_stdio(0);
	cin.exceptions(cin.failbit);
	int n,m,q;
	cin >> n >> m >> q;
	for(int i=1;i<=n;i++)
		cin >> a[i].pos;
	for(int i=1;i<=n;i++)
		cin >> a[i].num,a[i].num+=a[i-1].num;
	for(int i=1;i<=m;i++)
		cin >> b[i].pos;
	for(int i=1;i<=m;i++)
		cin >> b[i].num,b[i].num+=b[i-1].num;

	while(q--){
		int alpha,beta,k;
		cin >> alpha >> beta >> k;
		int l = min(a[1].pos,b[1].pos * alpha + beta);
		int r = max(a[n].pos,b[m].pos * alpha + beta);
		while(l<r){
			int mid = floor((l+r)/2.0);
			A temp = {mid,(int )1e9};
			int idxA = upper_bound(a+1,a+n+1,temp)-a-1;
			temp.pos = (mid-beta)/alpha;
			int idxB = upper_bound(b+1,b+m+1,temp)-b-1;
			if(a[idxA].num + b[idxB].num < k)
				l = mid+1;
			else
				r = mid;
		}
		cout << l << '\n';
	}
	return 0;
}"
BTi5PeBs,first - pointer 3.2,Radotsveta,C,Monday 29th of May 2023 09:21:55 AM CDT,"#include <stdio.h>
#include <string.h>

/*Student:
- name (string)
- id (string)
- age (int)
- grades (int array)
*/

typedef struct
{
    char name[50];
    char id[10];
    int age;
    int grades[5];
}Student;

typedef struct
{
    int x;
    int y;
} Point;

void print_student(Student student);

int main(void)
  {
    Student kevin;

    strcpy(kevin.name, ""Kevin"");
    strcpy(kevin.id, ""16805632"");
    kevin.age = 40;
    kevin.grades[0] = 2;
    kevin.grades[1] = 3;
    kevin.grades[2] = 4;
    kevin.grades[3] = 5;
    kevin.grades[4] = 6;

    print_student(kevin);
    printf(""\n"");

    Point p1 =
        {
        .x = 5,
        .y = 10
        };
    Point p2 =
        {
            .x = 11,
            .y = 2
            };
    Point p3 =
        {
        .x = 14,
        .y = 15
        };

    printf(""p1.x: %d\n"", p1.x);
    printf(""p1.y: %d\n"", p1.y);
    printf(""p2.x: %d\n"", p2.x);
    printf(""p2.y: %d\n"", p2.y);
    printf(""p3.x: %d\n"", p3.x);
    printf(""p3.y: %d\n"", p3.y);

    return 0;
}

void print_student(Student student)
{
    printf(""Name: %s\n"", student.name);
    printf(""ID: %s\n"", student.id);
    printf(""Age: %d\n"", student.age);
    printf(""Grade1: %d\n"", student.grades[0]);
    printf(""Grade2: %d\n"", student.grades[1]);
    printf(""Grade3: %d\n"", student.grades[2]);
    printf(""Grade4: %d\n"", student.grades[3]);
    printf(""Grade5: %d\n"", student.grades[4]);
}"
ixPJDNJ5,ddd,moldovexc,C,Monday 29th of May 2023 08:45:22 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <ucontext.h>
#include <signal.h>
#include <sys/time.h>

typedef struct task_t task_t;
struct task_t {
    ucontext_t context;
    void (*func)();
    task_t *next;
};

task_t TaskQueue; // опашка от готови задачи
task_t *RunningTask; // текуща изпълнителна задача

void add_task_to_queue(task_t *new_task) {
    new_task->next = NULL;

    if (TaskQueue.next == NULL) {
        TaskQueue.next = new_task;
    } else {
        task_t *last_task = TaskQueue.next;
        while (last_task->next != NULL) {
            last_task = last_task->next;
        }
        last_task->next = new_task;
    }
}

task_t* get_next_task() {
    if (TaskQueue.next == NULL) {
        return NULL;
    }

    task_t *next_task = TaskQueue.next;
    TaskQueue.next = next_task->next;
    next_task->next = NULL;
    return next_task;
}

void task1() {
    while (1) {
        printf(""+"");
        swapcontext(&RunningTask->context, &TaskQueue.context);
    }
}

void task2() {
    while (1) {
        printf(""-"");
        swapcontext(&RunningTask->context, &TaskQueue.context);
    }
}

void timer_handler(int signal) {
    swapcontext(&RunningTask->context, &TaskQueue.context);
}

void setup_timer() {
    struct sigaction sa;
    struct itimerval timer;

    // Init signal handler
    sa.sa_handler = timer_handler;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_RESTART;
    if (sigaction(SIGALRM, &sa, NULL) == -1) {
        perror(""Could not set up signal handler"");
        exit(1);
    }

    // Init timer
    timer.it_value.tv_sec = 0;      // Задаваме времето
    timer.it_value.tv_usec = 10000; // 10 милисекунди (10000 микросекунди)
    timer.it_interval.tv_sec = 0;   // Периодичност на таймера
    timer.it_interval.tv_usec = 10000;
    if (setitimer(ITIMER_REAL, &timer, NULL) == -1) {
        perror(""Could not set up timer"");
        exit(1);
    }
}

void *initlibrary() {
    TaskQueue.next = NULL;
    RunningTask = NULL;
    return NULL;
}

int create_task(void (*start_routine)()) {
    task_t *new_task = (task_t*) malloc(sizeof(task_t));
    if (new_task == NULL) {
        return 1;
    }

    getcontext(&new_task->context);
    new_task->context.uc_stack.ss_sp = malloc(SIGSTKSZ);
    new_task->context.uc_stack.ss_size = SIGSTKSZ;
    new_task->context.uc_link = &TaskQueue.context;

    new_task->func = start_routine;

    makecontext(&new_task->context, (void (*)())start_routine, 0);

    add_task_to_queue(new_task);

    return 0;
}

int main(int argc, char *argv[]) {
    initlibrary();

    if (argc != 3) {
        printf(""Usage: %s <task1> <task2>\n"", argv[0]);
        return 1;
    }

    if (create_task(task1) != 0) {
        printf(""Failed to create task1\n"");
        return 1;
    }

    if (create_task(task2) != 0) {
        printf(""Failed to create task2\n"");
        return 1;
    }

    RunningTask = get_next_task();

    setup_timer();

    while (1) {
        if (RunningTask == NULL) {
            printf(""\nAll tasks completed!\n"");
            exit(0);
        }

        task_t *next_task = get_next_task();
        if (next_task != NULL) {
            add_task_to_queue(RunningTask);
            RunningTask = next_task;
        }

        swapcontext(&TaskQueue.context, &RunningTask->context);
    }

    return 0;
}
"
FriEDWyQ,Untitled,mattnguyen,C#,Monday 29th of May 2023 08:20:23 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace _01.BaristaContest
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            char[,] field = new char[n, n];

            int moleRow = -1;
            int moleCol = -1;

            int points = 0;

            for (int i = 0; i < n; i++)
            {
                string row = Console.ReadLine();

                for (int j = 0; j < n; j++)
                {
                    field[i, j] = row[j];
                    if (field[i, j] == 'M')
                    {
                        moleRow = i;
                        moleCol = j;
                        field[i, j] = '-';
                    }
                }
            }

            string command = Console.ReadLine();

            while (command != ""End"")
            {
                if (points >= 25)
                {
                    break;
                }

                if ((command == ""left"" && moleCol == 0) ||
                    (command == ""right"" && moleCol == field.GetLength(1) - 1) ||
                    (command == ""up"" && moleRow == 0) ||
                    (command == ""down"" && moleRow == field.GetLength(0) - 1))
                {
                    Console.WriteLine(""Don't try to escape the playing field!"");
                    continue;
                }

                if (field[moleRow, moleCol] == 'S')
                {
                    points -= 3;
                    field[moleRow, moleCol] = '-';
                    bool teleportation = false;

                    for (int i = 0; i < n; i++)
                    {
                        for (int j = 0; j < n; j++)
                        {
                            if (field[i, j] == 'S')
                            {
                                teleportation = true;
                                moleRow = i;
                                moleCol = j;
                                field[moleRow, moleCol] = '-';
                            }
                        }
                    }

                }
                else if (char.IsDigit(field[moleRow, moleCol]))
                {
                    field[moleRow, moleCol] = '-';
                    points += int.Parse(field[moleRow, moleCol].ToString()); // pishe che input string not in a correct format
                    field[moleRow, moleCol] = 'M';
                }
                else if (field[moleRow, moleCol] == '-') 
                {
                    field[moleRow, moleCol] = '-';
                }

                switch (command)
                {
                    case ""left"":
                        moleCol--;
                        break;
                    case ""right"":
                        moleCol++;
                        break;
                    case ""up"":
                        moleRow--;
                        break;
                    case ""down"":
                        moleRow++;
                        break;

                }
            }

            field[moleRow, moleCol] = 'M';

            if (points < 25)
            {
                Console.WriteLine(""Too bad! The Mole lost this battle!"");
                Console.WriteLine($""The Mole lost the game with a total of {points} points."");
            }
            else
            {
                Console.WriteLine(""Yay! The Mole survived another game!"");
                Console.WriteLine($""The Mole managed to survive with a total of {points} points."");
            }

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(field[i, j]);
                }
                Console.WriteLine();
            }
        }
    }
}
"
Ja4jqSeS,💪 Strongest Man Simulator 🔥,LuaXe,Lua,Monday 29th of May 2023 07:49:35 AM CDT,"if not game.workspace:FindFirstChild(""PFA"") then local part = Instance.new(""Part"") part.Name = ""PFA"" part.Parent = game.workspace part.CFrame = CFrame.new(-1087, -40, 1670) part.Size = Vector3.new(50, 0, 50) part.Anchored = 1 part.Reflectance = 1 end

function C() spawn(function () while getgenv().C do
            for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do TPCFrame(CFrame.new(-1087, -35, 1670))
if v.ToolTip == ""Weight"" then v.Parent = game.Players.LocalPlayer.Character end
if game.Players.LocalPlayer.Character:FindFirstChildWhichIsA(""Tool"") then game.Players.LocalPlayer.Character:FindFirstChildWhichIsA(""Tool""):Activate() end
            end wait()
        end
    end)
end
function U() spawn(function () while getgenv().U do
local args = {[1] = ""S_Controller_Upgrades_Upgrade"",[2] = {[1] = ""Damage_Multiplier""}}game:GetService(""ReplicatedStorage"").Shared.Services:FindFirstChild(""3 | Network"").RemoteEvent:FireServer(unpack(args))
local args = {[1] = ""S_Controller_Upgrades_Upgrade"",[2] = {[1] = ""Health_Multiplier""}}game:GetService(""ReplicatedStorage"").Shared.Services:FindFirstChild(""3 | Network"").RemoteEvent:FireServer(unpack(args))
local args = {[1] = ""S_Controller_Upgrades_Upgrade"",[2] = {[1] = ""Jump_Power""}}game:GetService(""ReplicatedStorage"").Shared.Services:FindFirstChild(""3 | Network"").RemoteEvent:FireServer(unpack(args))
local args = {[1] = ""S_Controller_Upgrades_Upgrade"",[2] = {[1] = ""Walk_Speed""}}game:GetService(""ReplicatedStorage"").Shared.Services:FindFirstChild(""3 | Network"").RemoteEvent:FireServer(unpack(args))
local args = {[1] = ""S_Controller_Upgrades_Upgrade"",[2] = {[1] = ""Pet_Space""}}game:GetService(""ReplicatedStorage"").Shared.Services:FindFirstChild(""3 | Network"").RemoteEvent:FireServer(unpack(args))
local args = {[1] = ""S_Controller_Upgrades_Upgrade"",[2] = {[1] = ""Pet_Inventory""}}game:GetService(""ReplicatedStorage"").Shared.Services:FindFirstChild(""3 | Network"").RemoteEvent:FireServer(unpack(args)) wait()
            end
        end)
    end
function R() spawn(function () while getgenv().R do
local args = {[1] = ""S_Controller_Rebirth_Rebirth"",[2] = {}}game:GetService(""ReplicatedStorage"").Shared.Services:FindFirstChild(""3 | Network"").RemoteEvent:FireServer(unpack(args)) wait()
        end
    end)
end
function H(E) spawn(function () while getgenv().H do
local args = {[1] = ""S_Controller_Eggs_Buy"",[2] = {[1] = E}}game:GetService(""ReplicatedStorage"").Shared.Services:FindFirstChild(""3 | Network"").RemoteFunction:InvokeServer(unpack(args)) wait()
        end
    end)
end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow(""Strongest Man Simulator"")

local b = w:CreateFolder(""Main"")

b:Button(""TP To The Game"",function() game:GetService(""TeleportService""):Teleport(11224587399) end)

b:Button(""Remove Useless UI"",function()
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""AutoClicker"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""AutoClicker""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited1"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited1""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited2"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited2""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited3"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited3""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited4"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited4""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited5"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Limited5""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Right"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Right""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""FloppaBtn"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""FloppaBtn""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""HalloBtn"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""HalloBtn""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Group"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Group""):Destroy() end
if game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Store"") then game:GetService(""Players"").LocalPlayer.PlayerGui.Main:FindFirstChild(""Store""):Destroy() end
if game:GetService(""Players"").asyesast.PlayerGui.Main.Rebirth:FindFirstChild(""Auto_Rebirth"") then game:GetService(""Players"").asyesast.PlayerGui.Main.Rebirth:FindFirstChild(""Auto_Rebirth""):Destroy() end
if game:GetService(""Players"").asyesast.PlayerGui.Main.Rebirth:FindFirstChild(""x2_Rebirth"") then game:GetService(""Players"").asyesast.PlayerGui.Main.Rebirth:FindFirstChild(""x2_Rebirth""):Destroy() end
if game:GetService(""Players"").asyesast.PlayerGui.Items:FindFirstChild(""Santa_Weight"") then game:GetService(""Players"").asyesast.PlayerGui.Items:FindFirstChild(""Santa_Weight""):Destroy() end
end)

b:Toggle(""Inf. Strength"",function(val)
getgenv().C = val
C()
end)

b:Toggle(""Inf. Rebirth"",function(val)
getgenv().R = val
R()
end)

b:Toggle(""Upgrade"",function(val)
getgenv().U = val
U()
end)

b:Toggle(""Hatch"",function(val)
getgenv().H = val
H(E)
end)

b:Dropdown(""Choose"",{""Earth Egg"",""Alien Egg"",""Dominus Egg"",""Ice Egg"",""Lava Egg"",""Heavens Egg"",""Toy Egg"",""Mine Egg""},true,function(val)
E = val
end)

b:Label(""Made by X_LuaF#0705"",{TextSize = 21; TextColor = Color3.fromRGB(255,255,255); BgColor = Color3.fromRGB(38, 38, 38);})

local w = library:CreateWindow(""LocalPlayer"")

local b = w:CreateFolder(""LP"")

b:DestroyGui()

b:Button(""Discord"",function() setclipboard(""workink.co/2GQ/LTD"") end)
b:Button(""Full Version"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/GphZf9Xe"", true))() end)
b:Button(""Rejoin"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/mM7JBG5h"", true))() end)
b:Button(""Reset"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/EEY6SATj"", true))() end)

b:Box(""Speed"",""number"",function(val) S = val end)
b:Box(""Jump"",""number"",function(val) J = val end)
b:Box(""Hip Height"",""number"",function(val) H = val end)
b:Box(""Gravity"",""number"",function(val) G = val end)
 
b:Toggle(""Speed"",function(bool) getgenv().Speed = bool Speed(S) end)
b:Toggle(""Jump"",function(bool) getgenv().Jump = bool Jump(J) end)
b:Toggle(""Hip Height"",function(bool) getgenv().Hip = bool Hip(H) end)
b:Toggle(""Gravity"",function(bool) getgenv().Grav = bool Grav(G) end)
 
b:Slider(""FOV (Default is 70)"",{min = 0;max = 120;precise = true;},function(val) game.workspace.CurrentCamera.FieldOfView = val end)

function TPCFrame(Player_CFrame) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Player_CFrame end end
function TPVector3(Player_Position) game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Player_Position.Position end
function PHP(Player_HP) game.Players.LocalPlayer.Character.Humanoid.Health = Player_HP end

function Chat(Mes, Freq) spawn(function () while getgenv().Chat do local args = {[1] = Mes,[2] = ""All""} game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args)) wait(Freq) end end) end
function Speed(Nume) spawn(function () while getgenv().Speed do game:GetService(""Players"").LocalPlayer.Character.Humanoid.WalkSpeed = Nume if not getgenv().Speed then game:GetService(""Players"").LocalPlayer.Character.Humanoid.WalkSpeed = 16 end wait() end end) end
function Jump(Nume) spawn(function () while getgenv().Jump do game:GetService(""Players"").LocalPlayer.Character.Humanoid.JumpPower = Nume if not getgenv().Jump then game:GetService(""Players"").LocalPlayer.Character.Humanoid.JumpPower = 50 end wait() end end) end
function Hip(Nume) spawn(function () while getgenv().Hip do game:GetService(""Players"").LocalPlayer.Character.Humanoid.HipHeight = Nume if not getgenv().Hip then game:GetService(""Players"").LocalPlayer.Character.Humanoid.HipHeight = 0.1 end wait() end end) end
function Grav(Nume) spawn(function () while getgenv().Grav do game:GetService(""Workspace"").Gravity = Nume if not getgenv().Grav then game:GetService(""Workspace"").Gravity = 196.2 end wait() end end) end"
Ab5SKJMN,# Tk_torus_ani.py,here2share,Python,Monday 29th of May 2023 07:40:31 AM CDT,"# Tk_torus_ani.py

from tkinter import *
from math import sqrt, sin, cos, pi

rgb = [i for i in range(0, 256, 28)]
colors = ['#{:02x}{:02x}{:02x}'.format(r,g,b) for r in rgb for g in rgb for b in rgb][::-1]

# Define the torus parameters
R = 250	 # Major radius
r = 50	# Minor radius
poly_count = 30	 # Number of polygons to approximate the torus surface
theta_step = 2 * pi / poly_count  # Angle increment for the azimuthal direction
phi_step = 2 * pi / poly_count	# Angle increment for the polar direction
xA, yA = 450, 320

# Define the initial rotation angles
x_rotate, y_rotate, z_rotate = 0, 0, 0

ww = 900
hh = 640

# Create the window and canvas
root = Tk() 
root.title(""TORUS"")
root.geometry(""%dx%d+0+0""%(ww,hh))
canvas = Canvas(root, bg=""grey"", width=ww, height=hh)
canvas.grid(row=1, column=1)
btn = Button(root, text='Quit', width=8, command=root.destroy).place(x=ww-80, y=hh-40)

# Define the function for updating the torus animation
while 1:
	canvas.delete(""all"")
	# Update the rotation angles
	x_rotate = (x_rotate + 0.07) % 360
	y_rotate = (y_rotate + 0.05) % 360
	z_rotate = (z_rotate + 0.02) % 360
	# Calculate the torus vertices using its parametric equations
	vertices = []
	for i in range(poly_count):
		theta = i * theta_step
		for j in range(poly_count):
			phi = j * phi_step
			x = (R + r * cos(phi)) * cos(theta)
			y = (R + r * cos(phi)) * sin(theta)
			z = r * sin(phi)
			# Apply the rotation transformations
			x1 = x * cos(y_rotate) - z * sin(y_rotate)
			z1 = z * cos(y_rotate) + x * sin(y_rotate)
			y1 = y * cos(x_rotate) - z1 * sin(x_rotate)
			z2 = z1 * cos(x_rotate) + y * sin(x_rotate)
			x2 = x1 * cos(z_rotate) + y1 * sin(z_rotate)
			y2 = y1 * cos(z_rotate) - x1 * sin(z_rotate)
			vertices.append((x2+xA, y2+yA))
	# Draw the torus using the vertices
	for i in range(poly_count):
		for j in range(poly_count):
			v1 = vertices[i*poly_count+j]
			v2 = vertices[((i+1)%poly_count)*poly_count+j]
			v3 = vertices[((i+1)%poly_count)*poly_count+(j+1)%poly_count]
			v4 = vertices[i*poly_count+(j+1)%poly_count]
			color = colors[(i * poly_count) + j]
			canvas.create_polygon(v1, v2, v3, v4, fill=color, outline=color)
	canvas.create_text(200, 100, text='TORUS', fill='white', font='Arial 60 bold')
	root.update()

root.mainloop()"
8H4Q2H8Y,mpv.conf for mpv android v2,neil_tohno,INI file,Monday 29th of May 2023 06:37:31 AM CDT,"# You need Qualcomm Snapdragon 870 soc.
profile=gpu-hq

#fullscreen=yes

# LOW LATENCY PLAYBACK
video-latency-hacks=yes
#framedrop=no
speed=1.00
#force-seekable=yes

# Decode
vd-lavc-threads=12
ad-lavc-threads=8
fbo-format=auto
cache=yes
demuxer-readahead-secs=10
cache-secs=20
#demuxer-max-bytes=256M
demuxer-max-bytes=128M
gpu-shader-cache-dir=""/sdcard/download/mpv/shaders_cache""
stream-buffer-size=512KiB
deband=no
vd-lavc-dr=yes
opengl-pbo=yes


# Fix1
dither-depth=8
#gpu-dumb-mode=yes

# Scale
blend-subtitles=no
scale=spline36
dscale=mitchell
cscale=sinc
cscale-window=blackman
cscale-radius=3

# Audio
#af=lavfi=""loudnorm=I=-17:TP=-1:LRA=11""
#audio-format=s24
audio-buffer=0.7
alang=jpn,ja,eng,en

# Sub
sub-auto=fuzzy
#sub-file-paths=subs
slang=chi,zh-CN,sc,chs
#sub-font-size=35

#video-aspect-override=4:3
#video-aspect-override=16:9

#log-file=""/sdcard/download/mpv/mpv_1.log"""
mm8ASVEs,Tree of Thought - 3x3 sudoku experiment,jarekmor,Bash,Monday 29th of May 2023 06:27:28 AM CDT,"(.venv) jarekmor@DESKTOP-JVA0A1H:~/python_projects/tree-of-thought-puzzle-solver$ python run_tot.py ""please solve this 3x3 sudoku puzzle [[1, *, *], [*, 1, *], [*, 2, *]] where * represents a cell to be filled in.""

LLM Query: [{'role': 'user', 'content': 'The user is asking ""please solve this 3x3 sudoku puzzle [[1, *, *], [*, 1, *], [*, 2, *]] where * represents a cell to be filled in."". What type of problem the user wants to solve? Please give the answer in the following JSON format: { ""problem_type"": ""<problem_type>"" } where <problem_type> can only be ""sudoku"", ""3sat"", or ""others"".'}]
LLM Reply: { ""problem_type"": ""sudoku"" }

LLM Query: [{'role': 'user', 'content': 'please solve this 3x3 sudoku puzzle [[1, *, *], [*, 1, *], [*, 2, *]] where * represents a cell to be filled in. Before solving this Sudoku puzzle, please return its initial board configuration in the following JSON format: { ""rows"": [] }. Please use ""*"" to represent the missing values. Do not provide a solution yet.'}]
LLM Reply: { ""rows"": [[""1"", ""*"", ""*""], [""*"", ""1"", ""*""], [""*"", ""2"", ""*""]] }

State History:
        State: [[""1"", ""*"", ""*""], [""*"", ""1"", ""*""], [""*"", ""2"", ""*""]]
max_rollback_steps: 0
parent_state_visit_count: 0
ROLLBACK STEPS: 0

LLM Query: [{'role': 'user', 'content': '""Here is an example showing how to solve a 3x3 Sudoku puzzle [[*, 3, 1], [*, 2, 3], [3, *, 2]]. First, notice that the only missing number in the first row is 2, so we can fill in the first cell in the first row with 2.\\n\\nSimilarly, the first cell in the second row should be 2. Finally, the only missing number in the second column is 1. Hence, we can fill that cell with 1.In conclusion, the puzzle solution is [[2, 3, 1], [1, 2, 3], [3, 1, 2]].\\n\\n"" Please try to solve this Sudoku puzzle [[\'1\', \'*\', \'*\'], [\'*\', \'1\', \'*\'], [\'*\', \'2\', \'*\']]. In the next solution you return, please just fill in a few cells since we will work together to solve the puzzle in multiple rounds of conversation. Please return your solution in the following JSON format: { ""rows"": [] }'}]
LLM Reply: {
  ""rows"": [
    [""1"", ""3"", ""2""],
    [""2"", ""1"", ""3""],
    [""3"", ""2"", ""1""]
  ]
}


VISIT COUNT for [[""1"", ""*"", ""*""], [""*"", ""1"", ""*""], [""*"", ""2"", ""*""]]: 1

State History:
        State: [[""1"", ""*"", ""*""], [""*"", ""1"", ""*""], [""*"", ""2"", ""*""]]
        State: [[""1"", ""3"", ""2""], [""2"", ""1"", ""3""], [""3"", ""2"", ""1""]]
max_rollback_steps: 1
parent_state_visit_count: 1
ROLLBACK STEPS: 1

[{'role': None, 'content': 'Fantastic! You have found the solution [[""1"", ""3"", ""2""], [""2"", ""1"", ""3""], [""3"", ""2"", ""1""]]!'}]

Success : True
Solution: [['1', '3', '2'], ['2', '1', '3'], ['3', '2', '1']]"
zeXh5cUV,2-SAT,peltorator,C++,Monday 29th of May 2023 06:18:46 AM CDT,"struct SAT_2 {
    int n;
    vector<vector<int>> g, grev;

    SAT_2(int n = 0) : n(n) {
        g.assign(2 * n, {});
        grev.assign(2 * n, {});
    };

    void add_clause(bool positive_x, int x, bool positive_y, int y) { // (x v !y) -> (true, x, false, y)
        assert(0 <= x && x < n);
        assert(0 <= y && y < n);
        int vx = 2 * x + (positive_x ? 0 : 1);
        int vy = 2 * y + (positive_y ? 0 : 1);
        g[vx ^ 1].push_back(vy);
        grev[vy].push_back(vx ^ 1);
        g[vy ^ 1].push_back(vx);
        grev[vx].push_back(vy ^ 1);
    }

    vector<int> solve() { // return.empty() -> no solution, o/w -> x_i = bool(return[i])
        vector<int> used(2 * n, 0), topsort;
        function<void(int)> dfs_topsort = [&](int v) {
            used[v] = 1;
            for (int u : g[v]) {
                if (!used[u]) {
                    dfs_topsort(u);
                }
            }
            topsort.push_back(v);
        };
        for (int v = 0; v < 2 * n; v++) {
            if (!used[v]) {
                dfs_topsort(v);
            }
        }
        reverse(topsort.begin(), topsort.end());
        vector<int> cols(2 * n, -1);
        function<void(int, int)> dfs_color = [&](int v, int color) {
            cols[v] = color;
            for (int u : grev[v]) {
                if (cols[u] == -1) {
                    dfs_color(u, color);
                }
            }
        };
        int curcol = 0;
        for (int v : topsort) {
            if (cols[v] == -1) {
                dfs_color(v, curcol++);
            }
        }
        for (int v = 0; v < 2 * n; v += 2) {
            if (cols[v] == cols[v + 1]) {
                return {};
            }
        }
        vector<int> solution(n, 0);
        for (int v = 0; v < 2 * n; v += 2) {
            solution[v >> 1] = (cols[v] > cols[v + 1] ? 1 : 0);
        }
        return solution;
    }
};"
nad0LUx0,measure_response_time,Profesorek,Python,Monday 29th of May 2023 06:18:16 AM CDT,"import time

def measure_response_time():
    start_time = time.time()

    # Pytanie do użytkownika
    input(""Wprowadź odpowiedź: "")

    end_time = time.time()
    response_time = end_time - start_time

    return response_time

# Wywołanie funkcji i pomiar czasu odpowiedzi użytkownika
response_time = measure_response_time()
print(f""Czas odpowiedzi: {response_time:.2f} sekund"")"
W1P9bBHK,merge_sort,Profesorek,Python,Monday 29th of May 2023 06:15:21 AM CDT,"def merge_sort(lst):
    if len(lst) <= 1:
        return lst

    # Divide the list into two halves
    mid = len(lst) // 2
    left_half = lst[:mid]
    right_half = lst[mid:]

    # Recursively sort the two halves
    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)

    # Merge the sorted halves
    sorted_lst = merge(left_half, right_half)
    return sorted_lst

def merge(left, right):
    merged = []
    left_index = 0
    right_index = 0

    # Compare elements from both halves and merge them
    while left_index < len(left) and right_index < len(right):
        if left[left_index] <= right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1

    # Append the remaining elements from either left or right sublist
    while left_index < len(left):
        merged.append(left[left_index])
        left_index += 1

    while right_index < len(right):
        merged.append(right[right_index])
        right_index += 1

    return merged

# Test the function
numbers = [9, 5, 2, 8, 1, 3]
print(""Original list:"", numbers)

sorted_list = merge_sort(numbers)

print(""Sorted list:"", sorted_list)
"
qmr7JJf7,data587,TestGuy1,JSON,Monday 29th of May 2023 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '2e4c58157a1550f40456ff8b64c233f53af5d83fb189724f4654d666ba44a88139b046404cb765158b65e0008a5c35335db0ea3331fedb1c63f28b22fecda01cf70c07f6bc2ea21c55dfed43fa9aaaf94e5723c812d97f3875f33fc34d500e2ba1a7a074b7fb1027d9af0a9ce338d8723073c6fad2680d8c512bee4f331d1f6c',
  otherdata: [
    '5063b841da3221cba152d5597e0f9f55',
    'e1f4dd7e9b30b9b6d24e76aecb5c7216',
    'd37c922e38f156533e7252041d653302',
    '6485a51599d896a4f9a8ae6b9c7d2862',
    '535be368c4087b8e1c914e89bdca6399',
    'ae3ecba990ec67ceaeaa05dfdf48978b',
    'ef6fc375ba6af74796efa94aa018aa95',
    '92086331a85b78c033e4937265a50ef7'
  ]
}"
SdKzgV2B,imagine.js,Sadman_11,JavaScript,Monday 29th of May 2023 05:58:52 AM CDT,"module.exports = {
  config: {
    name: ""imagine"",
    aliases: [""aiimg""],
    version: ""1.1"",
    author: ""Sadman Anik"",
    countDown: 10,
    role: 0,
    shortDescription: {
      en: 'Text to Image'
    },
    longDescription: {
      en: ""Text to image""
    },
    category: ""image"",
    guide: {
      en: '{pn} your prompt | Type'
        + '\n here are supported models:'
        + `\n
    1: Imagine V4 Beta,
    2: Imagine V4 Creative,
    3: Imagine V3,
    4: Imagine V1,
    5: Portrait,
    6: Realistic,
    7: Anime,
    8: Surrealism,
    9: Anime V2,
    10: Marble,
    11: Cosmic,
    12: Minecraft,
    13: Disney,
    14: GTA,
    15: Macro,
    16: Studio Ghibli,
    17: Dystopian,
    18: Gothic`
    }
  },

  onStart: async function({ message, args }) {
    const text = args.join("" "");
    if (!text) return message.reply(""Add something"");
    let prompt, model, id;
    if (text.includes(""|"")) {
      const [promptText, modelText] = text.split(""|"").map((str) => str.trim());
      prompt = promptText;
      model = modelText;
    } else {
      prompt = text;
      model = 1;
    }
    message.reply(""✅| Creating your Imagination..."", (err, info) => { id = info.messageID })
    try {
      message.reply({
        attachment: await global.utils.getStreamFromURL(`https://sadman.misfitsdev.xyz/art?prompt=${prompt}&type=${model}`)
      }, () => {
        message.unsend(id)
      })
    } catch (error) {
      console.log(error)
      message.reply(""Failed"", () => {
        message.unsend(id)
      })
    }
  }
}"
Giqt1YGL,Sword Swing Simulator - Auto Open Eggs,Gur0v,Lua,Monday 29th of May 2023 05:56:11 AM CDT,"--[[                                             
                                              
VVVVVVVV           VVVVVVVV555555555555555555 
V::::::V           V::::::V5::::::::::::::::5 
V::::::V           V::::::V5::::::::::::::::5 
V::::::V           V::::::V5:::::555555555555 
 V:::::V           V:::::V 5:::::5            
  V:::::V         V:::::V  5:::::5            
   V:::::V       V:::::V   5:::::5555555555   
    V:::::V     V:::::V    5:::::::::::::::5  
     V:::::V   V:::::V     555555555555:::::5 
      V:::::V V:::::V                  5:::::5
       V:::::V:::::V                   5:::::5
        V:::::::::V        5555555     5:::::5
         V:::::::V         5::::::55555::::::5
          V:::::V           55:::::::::::::55 
           V:::V              55:::::::::55   
            VVV                 555555555     
                                              
]]


local waitTime = 3.5 -- [[ Anything Below 3.5 Won't Change Opening Speed ]]
local eggName = ""NarutoEgg"" -- [[ You Can Use Simple/Turtle Spy To Get The Egg Name ]]
local logMsg = ""Opened 1 Egg"" -- [[ Leave Blank If You Dont Need Logs ]]
local openingMethod = 1 -- [[ 1 For Single Opening, 2 For Triple Opening (Must Have The Gamepass) ]]

while wait(waitTime) do -- [[ Looping The Script ]]
local args = {
    [1] = openingMethod,
    [2] = eggName
}
print(logMsg) -- [[ Press F9 To See Logs ]]
game:GetService(""ReplicatedStorage""):WaitForChild(""Events""):WaitForChild(""Eggs""):WaitForChild(""OpenEggWithMode""):InvokeServer(unpack(args)) -- [[ Remotes ]]
end"
t6q0KwpA,Books,SkillPlay,C#,Monday 29th of May 2023 05:33:06 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SkillPlay
{
    public class Program
    {
        static void Main(string[] args)
        {
            BookStorage bookStorage = new BookStorage();
            bool isWork = true;

            while (isWork == true)
            {
                Console.WriteLine(""Меню: \n1. Показать все книги в хранилище \n2. Добавить книгу \n3. Убрать книгу \n4. Поиск книги \n5. Выход"");
                switch (Console.ReadLine())
                {
                    case ""1"":
                        bookStorage.ShowAllBook();
                        break;

                    case ""2"":
                        bookStorage.Add();
                        break;

                    case ""3"":
                        bookStorage.Delete();
                        break;

                    case ""4"":
                        bookStorage.Search();
                        break;

                    case ""5"":
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine(""Неккоректный ввод\n"");
                        break;
                }
            }
        }
    }

    class Book
    {
        public string _title { get; private set; }
        public string _author { get; private set; }
        public int _yearRelease { get; private set; }

        public Book(string title, string author, int yearRelease)
        {
            _title = title;
            _author = author;
            _yearRelease = yearRelease;
        }

        public void ShowInfo()
        {
            Console.WriteLine($""Название книги: {_title} \nАвтор: {_author} \nГод издания: {_yearRelease}\n"");
        }
    }

    class BookStorage
    {
        private List<Book> _books = new List<Book>();

        public void Add()
        {
            Console.WriteLine(""Введите название книги\n"");
            string title = Console.ReadLine();

            Console.WriteLine(""Введите автора книги: \n"");
            string author = Console.ReadLine();

            Console.WriteLine(""Введите год релиза книги: \n"");
            bool isNumber = int.TryParse(Console.ReadLine(), out int yearRelease);

            if (isNumber != false)
            {
                Book book = new Book(title, author, yearRelease);
                _books.Add(book);

                Console.WriteLine(""Книга добавлена!\n"");
            }
            else
            {
                Console.WriteLine(""Неккоректный ввод\n"");
            }
        }

        public void Delete()
        {
            if (_books.Count != 0)
            {
                bool isFound = false;
                bool isWork;
                Console.WriteLine(""Введите полное название книги\n"");
                string input = Console.ReadLine();

                for (int i = 0; i < _books.Count; i++)
                {
                    if (_books[i]._title == input)
                    {
                        isWork = true;
                        isFound = true;
                        Console.WriteLine(""Найдена книга\n"");
                        _books[i].ShowInfo();

                        while (isWork == true)
                        {
                            Console.WriteLine(""Удалить данную книгу ?\n1. Да \n2. Нет и продолжить поиск"");
                            string input2 = Console.ReadLine();

                            switch (input2)
                            {
                                case ""1"":
                                    DeleteBook(i, ref isWork);
                                    break;

                                case ""2"":
                                    isWork = false;
                                    break;

                                default:
                                    Console.WriteLine(""Неккоректный ввод\n"");
                                    break;
                            }
                        }
                    }
                    else if (isFound == false)
                    {
                        Console.WriteLine(""Книги с данным названием не найдено\n"");
                    }
                }
            }
            else
            {
                Console.WriteLine(""В хранилище ещё нет книг\n"");
            }
        }

        private void DeleteBook(int key, ref bool isWork)
        {
            _books.RemoveAt(key);
            isWork = false;
            Console.WriteLine(""Книга удалена!\n"");
        }

        public void ShowAllBook()
        {
            if (_books.Count > 0)
            {
                foreach (Book book in _books)
                {
                    book.ShowInfo();
                }
            }
            else
            {
                Console.WriteLine(""В хранилище ещё нет книг\n"");
            }
        }

        public void Search()
        {
            if (_books.Count > 0)
            {
                bool isWork = true;
                while (isWork == true)
                {
                    Console.WriteLine(""1. По названию \n2. По автору \n3. По году релиза \n4. Выход"");
                    switch (Console.ReadLine())
                    {
                        case ""1"":
                            SearchTitle();
                            break;

                        case ""2"":
                            SearchAuthor();
                            break;

                        case ""3"":
                            SearchYearRelease();
                            break;

                        case ""4"":
                            isWork = false;
                            break;

                        default:
                            Console.WriteLine(""Неккоректный ввод\n"");
                            break;
                    }
                }
            }
            else
            {
                Console.WriteLine(""В хранилище ещё нет книг\n"");
            }
        }

        private void SearchTitle()
        {
            bool isFound = false;
            Console.WriteLine(""Введите полное название книги\n"");
            string input = Console.ReadLine();

            foreach (Book book in _books)
            {
                if (book._title == input)
                {
                    if (isFound == false)
                    {
                        Console.WriteLine(""Результаты поиска\n"");
                    }
                    book.ShowInfo();
                    isFound = true;
                }
            }

            if (isFound == false)
            {
                Console.WriteLine(""Книга с данным названием не найдена\n"");
            }
        }

        private void SearchAuthor()
        {
            bool isFound = false;
            Console.WriteLine(""Введите автора\n"");
            string input = Console.ReadLine();

            foreach (Book book in _books)
            {
                if (book._author == input)
                {
                    if (isFound == false)
                    {
                        Console.WriteLine(""Результаты поиска\n"");
                    }
                    book.ShowInfo();
                    isFound = true;
                }
            }

            if (isFound == false)
            {
                Console.WriteLine(""Книга от данного автора не найдена\n"");
            }
        }

        private void SearchYearRelease()
        {
            bool isFound = false;
            Console.WriteLine(""Введите год релиза\n"");
            bool isNumber = int.TryParse(Console.ReadLine(), out int input);

            if (isNumber != false)
            {
                foreach (Book book in _books)
                {
                    if (book._yearRelease == input)
                    {
                        if (isFound == false)
                        {
                            Console.WriteLine(""Результаты поиска\n"");
                        }
                        book.ShowInfo();
                        isFound = true;
                    }
                }

                if (isFound == false)
                {
                    Console.WriteLine(""Книга данного года релиза не найдена\n"");
                }
            }
            else
            {
                Console.WriteLine(""Неккоректный ввод\n"");
            }
        }
    }
}"
64rP4KDV,Untitled,wclovers,PHP,Monday 29th of May 2023 05:05:00 AM CDT,"if (apply_filters('wcfm_is_allow_wc_chained_product', true)) {
    if (WCFMph_Dependencies::wc_chained_product_plugin_active_check()) {
        // Chained Product options
        add_filter('wcfm_product_manage_fields_linked', function( $fields, $product_id ) {
            global $WCFMph;

            remove_filter('wcfm_product_manage_fields_linked', [$WCFMph->frontend, 'wcfm_chained_product_product_manage_fields'], 200, 3);

            $chained_product_detail = array();
            $chained_product_manage_stock = '';
            $product_arr = [];
            if ($product_id) {
                $chained_product_details	= get_post_meta($product_id, '_chained_product_detail', true);
                $chained_product_details	= $chained_product_details ? (array)$chained_product_details : [];
                $chained_product_ids        = get_post_meta($product_id, '_chained_product_ids', true);
                $chained_product_ids	    = $chained_product_ids ? (array)$chained_product_ids : [];

                if (!empty($chained_product_details)) {
                    foreach ($chained_product_details as $id => $chained_product_data) {
                        $chained_product_detail[] = array('product_id' => $id, 'unit' => $chained_product_data['unit'], 'priced_individually' => $chained_product_data['priced_individually']);
                        $product_arr[$id] = $chained_product_data['product_name'];
                    }
                }

                $chained_product_manage_stock  = get_post_meta($product_id, '_chained_product_manage_stock', true);

                $chained_product_detail = array_filter($chained_product_detail);
            }

            $chained_product_fields = array(
                ""_chained_product_detail"" => array('label' => __('Chained Products', 'woocommerce-chained-products'), 'type' => 'multiinput', 'class' => 'wcfm_ele simple', 'label_class' => 'wcfm_title wcfm_ele simple', 'value' => $chained_product_detail, 'options' =>
                array(
                    ""product_id"" => array('label' => __('Product', 'wc-frontend-manager'), 'type' => 'select', 'custom_attributes' => array('placeholder' => __('Search for a product...', 'woocommerce-chained-products')), 'attributes' => array('style' => 'width: 60%;'), 'class' => 'wcfm-select wcfm_ele simple', 'label_class' => 'wcfm_title', 'options' => $product_arr),
                    ""unit"" => array('label' => __('Qty', 'woocommerce-chained-products'), 'type' => 'number', 'attributes' => array('step' => 1, 'min' => 1), 'class' => 'wcfm-text wcfm_ele simple', 'label_class' => 'wcfm_title'),
                    ""priced_individually"" => array('label' => __('Priced Individually', 'woocommerce-chained-products'), 'type' => 'checkbox', 'class' => 'wcfm-checkbox wcfm_ele simple', 'label_class' => 'wcfm_title checkbox_title wcfm_ele simple', 'value' => 'yes', 'hints' => __('Check to manage stock for products listed in chained products, uncheck otherwise.', 'woocommerce-chained-products'))
                )),
                ""_chained_product_manage_stock"" => array('label' => __('Manage stock?', 'woocommerce-chained-products'), 'type' => 'checkbox', 'class' => 'wcfm-checkbox wcfm_ele simple', 'label_class' => 'wcfm_title checkbox_title wcfm_ele simple', 'value' => 'yes', 'dfvalue' => $chained_product_manage_stock, 'hints' => __('Check to manage stock for products listed in chained products, uncheck otherwise.', 'woocommerce-chained-products'))
            );

            $fields = array_merge($fields, $chained_product_fields);

            return $fields;
        }, 199, 2);
    }
}"
SjYRH7iX,WPFtoPS-GUI-Template.ps1,Combreal,PowerShell,Monday 29th of May 2023 04:50:27 AM CDT,"<#
    XAML GUI Template
#>

Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Windows.Forms

[xml]$XAML = @""

<-- PASTE VISUAL STUDIO XML CODE HERE -->

""@
$XAML.Window.RemoveAttribute('x:Class')
$XAML.Window.RemoveAttribute('mc:Ignorable')
$XAMLReader = New-Object System.Xml.XmlNodeReader $XAML
$MainWindow = [Windows.Markup.XamlReader]::Load($XAMLReader)

$namenodes = $XAML.SelectNodes(""//*[@*[contains(translate(name(.),'n','N'),'Name')]]"")
$wpf =@{}
$namenodes | ForEach-Object{$wpf.add($_.Name,$MainWindow.FindName($_.Name))}

#$wpf.Button.Add_Click({
#    Write-Host ""Hello World""
#})

$MainWindow.ShowDialog() | Out-Null"
sMHf8yKY,Untitled,dllbridge,C,Monday 29th of May 2023 04:30:38 AM CDT,"

#include  <stdio.h>
#include <stdlib.h>
#include <locale.h>


int      M,   //  Кол-во строк   
         N,   //  ... столбцов
       *pA,   //  Указатель на массив ""A""
       *pB;   //  Указатель на массив ""B""

void   initMatrix();  
void   convertArray_1D_to2D(int *p, int n1, int n2);








///////////////////////////////////////////////////////////
int main()                                               //
{
	
	
	
	
    setlocale(LC_ALL, ""RUS"");
    printf(""Введите размер матрицы M строк и N столбцов: ""); scanf(""%d%d"", &M, &N); printf(""\n"");
    
    //M = 3; N = 5;                                //  Можете закомментировать строку выше, а эту раскомментировать.
    
    int nSize = 2 * N * M * sizeof(int);                     //                Размер СРАЗУ! двух матриц (в байтах)
    
    pA = (int*)malloc(nSize);  
	                              //  Резервируем в памяти место сразу для двух массивов
    pB = &pA[N * M]; 
	
	
	initMatrix(); 
	
	printf(""\t\t\tВид матрицы A:\n"");    convertArray_1D_to2D(pA, M, N);
	printf(""\t\t\tВид матрицы B:\n"");    convertArray_1D_to2D(pB, M, N);
	
	free(pA);                                      //  Освободим память, которая выделялась сразу для двух массивов.
	
return 0;
}


//  Инициализируем массивы без преобразования их в двумерные.
//////////////////////////////////////////////////////////////
void initMatrix()                                           //  
{
    	
	int i,  j,
        n = 1;
        
    for(i = 0; i < M; i++)
    {
        for(j = 0; j < N; j++)  pA[i*N + j] = n++;       
    }
	                                        n = 1;
    for(j = 0; j < N; j++)     
    for(i = 0; i < M; i++)      pB[i*N + j] = n++;  
}
 

//  n1 - это количество строк
//  n2 -     кол-во  столбцов 
//////////////////////////////////////////////////////////////
void convertArray_1D_to2D(int *p, int n1, int n2)           //  
{
	
	int *a[n1],                                             //                              Создаём массив указателей.
	        i ,                                             //                             Счётчик строк от 0 до n1-1
		    j ;                                             //                  Счётчик позицый в строке от 0 до n2-1            
    
    for(i = 0; i < n1; i++)  a[i] = &p[i*n2];	            //                               Завершили преобразование
    
                                       // - - - - - - - - - //
    
    for(i = 0; i < n1; i++) 
	{                                //    строки    
	    for(j = 0; j < n2; j++)  {
	            
	        printf(""%3d"", a[i][j]);
	    }   printf(""\n"");
    }
} 
 

"
vfyZAjw9,Untitled,kamiakze,PHP,Monday 29th of May 2023 04:14:15 AM CDT,"<?php 
  
 include_once(""config.php""); 
 //---Author : [Clinche] 
 //---Date 14/10/2022 
 //TODO: wait for 42 to fix client_credentials 
 function        api42_get_bot_token(){ 
         global $ft_uid, $ft_secret; 
  
         $url = ""https://api.intra.42.fr/oauth/token""; 
         $postParams = [ 
                 'grant_type' => ""client_credentials"", 
                 'client_id' => $ft_uid, 
                 'client_secret' => $ft_secret 
         ]; 
  
         $ch = curl_init(); 
  
         curl_setopt($ch, CURLOPT_URL, $url); 
         curl_setopt($ch, CURLOPT_POST, 1); 
         curl_setopt($ch, CURLOPT_POSTFIELDS, $postParams); 
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
         curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json')); 
  
         $reponse = curl_exec($ch); 
         curl_close($ch); 
  
         $data = json_decode($reponse); 
         var_dump($data); 
         $token = $data->access_token; 
         return ($token); 
 } 
  
 function        api42_get_tokens($code, $discorduid){ 
         global $ft_uid, $ft_secret, $ft_url; 
  
         $ft_url = $ft_url.""?uid="".$discorduid; 
         $url = ""https://api.intra.42.fr/oauth/token""; 
  
         $postParams = [ 
                 'grant_type' => ""authorization_code"", 
                 'client_id' => $ft_uid, 
                 'client_secret' => $ft_secret, 
                 'code' => $code, 
                 'redirect_uri'=> $ft_url 
         ]; 
  
         $ch = curl_init(); 
  
         curl_setopt($ch, CURLOPT_URL, $url); 
         curl_setopt($ch, CURLOPT_POST, 1); 
         curl_setopt($ch, CURLOPT_POSTFIELDS, $postParams); 
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
         curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json')); 
  
         $reponse = curl_exec($ch); 
         curl_close($ch); 
  
         $data = json_decode($reponse); 
  
         $token = $data->access_token; 
         $sectoken = $data->refresh_token; 
  
         $tokens = array( 'token' => $token, 'refresh_token' => $sectoken ); 
         return ($tokens); 
 } 
  
 function        api42_ref_tokens($reftoken, $discorduid){ 
         global $ft_uid, $ft_secret, $ft_url; 
  
         $ft_url = $ft_url.""?uid="".$discorduid; 
         $url = ""https://api.intra.42.fr/oauth/token""; 
  
         $postParams = [ 
                 'grant_type' => ""refresh_token"", 
                 'client_id' => $ft_uid, 
                 'client_secret' => $ft_secret, 
                 'refresh_token' => $reftoken, 
                 'redirect_uri'=> $ft_url 
         ]; 
  
         $ch = curl_init(); 
  
         curl_setopt($ch, CURLOPT_URL, $url); 
         curl_setopt($ch, CURLOPT_POST, 1); 
         curl_setopt($ch, CURLOPT_POSTFIELDS, $postParams); 
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
         curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json')); 
  
         $reponse = curl_exec($ch); 
         curl_close($ch); 
  
         $data = json_decode($reponse); 
  
         $token = $data->access_token; 
         $sectoken = $data->refresh_token; 
  
         $tokens = array( 'token' => $token, 'refresh_token' => $sectoken ); 
         return ($tokens); 
 } 
  
 function        api42_do_request($endpoint, $token) 
 { 
         $url = ""https://api.intra.42.fr{$endpoint}""; 
  
         $curl = curl_init($url); 
         curl_setopt($curl, CURLOPT_URL, $url); 
         curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); 
  
         $headers = array( 
                         ""Authorization: Bearer "".$token, 
                         ); 
  
         curl_setopt($curl, CURLOPT_HTTPHEADER, $headers); 
         curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false); 
         curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); 
  
         $resp = curl_exec($curl); 
         curl_close($curl); 
  
         $data = json_decode($resp); 
          
         return ($data); 
 } 
  
 function        extract_cursus_from_api($apireq){ 
          
         foreach ($apireq->cursus_users as $item) 
         { 
                 if ($item->cursus->id == 21) 
                         return $item; 
         } 
         error_log('error while fetching cursuses'); 
         echo('oops'); 
         die(); 
 } 
 ?>"
5J2cdALt,Dice 10000,PrezesSmoku,Python,Monday 29th of May 2023 04:07:52 AM CDT,"import random

lista_opcji = [""100 punktów za 1"", ""50 punktów za 5"",""Punkty za 3 kości""]
trzy_kosci = 0
liczba_kosci = 5
mozliwe_opcje = []
wyrzucone_kosci = []
punkty = [0,0]
punkty_tury = 0
gracz = 0
def rzut_koscmi(ile_kosci):
    wyrzucone_kosci.clear()
    for i in range(ile_kosci):
        wyrzucone_kosci.append(random.randint(1,6))
    pokaz_kosci()
    
def pokaz_kosci():
    print(""____________________"")
    print(""Wyniki rzutu koścmi:"")
    for i in range(len(wyrzucone_kosci)):
        print(f""Kość {i+1}: {wyrzucone_kosci[i]} oczek "")

def mozliwe_punktowania():
    mozliwe_opcje.clear()
    if 1 in wyrzucone_kosci:
        mozliwe_opcje.append(0)
    if 5 in wyrzucone_kosci:
        mozliwe_opcje.append(1)
    if len(wyrzucone_kosci) >= 3:
        for i in range(1,7):
            if wyrzucone_kosci.count(i) >= 3:
                global trzy_kosci
                trzy_kosci = i
                mozliwe_opcje.append(2)
                break

def kontynuacja_tury():
    global liczba_kosci
    while liczba_kosci > 0:
        pokaz_kosci()
        mozliwe_punktowania()
        if len(mozliwe_opcje) >=1:
            print(""0. Przydziel więcej punktów z tego rzutu"")
        print(""1. Przerzuć niezapunktowane kości, jeśli wykorzystałeś wszystkie to rzuć ponownie wszystkimi"")
        print(""2. Zakończ ture i dopisz punkty"")
        
        wybor = int(input(""Podaj wybor:""))
        if wybor == 0:
            przydziel_punkty()
        elif wybor == 1:
            if liczba_kosci == 0:
                liczba_kosci = 5
            return True
        elif wybor == 2:
            return False

def przydziel_punkty():
    i = 1
    global liczba_kosci
    global punkty_tury
    
    for opcja in mozliwe_opcje:
        tekst = lista_opcji[opcja]
        print(f""{i}. {tekst}"")
        i += 1

    wpisany_wybor = 0
    while not 0 < wpisany_wybor <= len(mozliwe_opcje):
        wpisany_wybor = int(input(""Podaj wybor: ""))
    wpisany_wybor -= 1

    if mozliwe_opcje[wpisany_wybor] == 0:
        liczba_kosci -= 1
        punkty_tury += 100
        wyrzucone_kosci.remove(1)
    elif mozliwe_opcje[wpisany_wybor] == 1:
        liczba_kosci -= 1
        punkty_tury += 50
        wyrzucone_kosci.remove(5)
    elif mozliwe_opcje[wpisany_wybor] == 2:
        liczba_kosci -= 3
        if trzy_kosci == 1:
            punkty_tury += 1000
        else:
            punkty_tury += trzy_kosci*100
        for i in range(3):
            wyrzucone_kosci.remove(trzy_kosci)
      
czy_ktos_wygral = False

while not czy_ktos_wygral:
    liczba_kosci = 5
    punkty_tury = 0
    czy_kontynuowac = True
    print(f""Punkty: gracz 1 - {punkty[0]}| gracz 2 - {punkty[1]}"")
    print(f""Tura Gracza {gracz+1}"")
    while czy_kontynuowac:
        rzut_koscmi(liczba_kosci)
        mozliwe_punktowania()
        if len(mozliwe_opcje) == 0:
            print(""Niestety nie możesz zdobyć punktów. Twoja tura kończy się"")
            punkty_tury = 0
            break
        else:
            przydziel_punkty()
        print(f""Punkty zdobyte w tej turze: {punkty_tury}"")
        czy_kontynuowac = kontynuacja_tury()
    punkty[gracz] += punkty_tury
    if punkty[gracz] >= 10000:
        print(""Wygrałeś!!!"")
        czy_ktos_wygral = True
    if gracz == 0:
        gracz = 1
    else:
        gracz = 0

    "
8QMEGjZW,邀您一起看：魔方栈,xiaomianao666,JavaScript,Monday 29th of May 2023 03:59:54 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥魔方栈@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuabtOaWsOaVsOaNrlwiLFwicGF0aFwiOlwidXBkYXRlXCIsXCJydWxlXCI6XCJ2YXIgY2xvdWQgPSBiYXNlNjREZWNvZGUoZmV0Y2hDYWNoZShcXFwiaHR0cHM6Ly9naHByb3h5LmNvbS9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veGl4aWZyZWUvSGlrZXIvbWFpbi95eGouanNvblxcXCIsMjQpKTtcXG5pZihjbG91ZC5pbmNsdWRlcyhcXFwi5ZCI6ZuGXFxcIikpe1xcbiAgICB3cml0ZUZpbGUoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvSG9vZC95eGouanNvblxcXCIsY2xvdWQpO1xcbiAgICB3cml0ZUZpbGUoXFxcImhpa2VyOi8vZmlsZXMvY2FjaGUvdXBkYXRlL3l4ai50eHRcXFwiLG5ldyBEYXRlKCkrJycpO1xcbn1cIn1dLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLmuLjmiI/pm4bwnZSlXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaHR0cHM6Ly9odWF6aGVjaGVuLmdpdGVlLmlvL2N1YmVyI2dhbWVUaGVtZSM7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChMaW51eO+8m++8myBBbmRyb2lkIDEx77yb77ybIE1pIDEwIFBybykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xNTIgTW9iaWxlIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfMVwiLFwiZmluZF9ydWxlXCI6XCJqczpcXG5zZXRSZXN1bHQoW3tcXG4gICAgY29sX3R5cGU6ICd4NV93ZWJ2aWV3X3NpbmdsZScsXFxuICAgIHVybDogTVlfVVJMLFxcbiAgICBkZXNjOiBcXFwiYXV0byYmZmxvYXRcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgY2FuQmFjazogdHJ1ZVxcbiAgICB9XFxufV0pXCIsXCJncm91cFwiOlwi4pGg5o6o6I2QXCIsXCJ1YVwiOlwibW9iaWxlXCIsXCJwcmVSdWxlXCI6XCIvL+iHquWKqOabtOaWsO+8nzHlkK/nlKgsIDDlhbPpl61cXG52YXIgdXBkYXRlID0gMDtcXG5cXG4vL+abtOaWsOmXtOmalCwg5Y2V5L2N5Li65aSpXFxudmFyIHVwdGltZSA9IDM7XFxuXFxudmFyIGxvY2FsID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvSG9vZC95eGouanNvblxcXCI7XFxudmFyIGRhdGVfdHh0ID0gXFxcImhpa2VyOi8vZmlsZXMvY2FjaGUvdXBkYXRlL3l4ai50eHRcXFwiO1xcblxcbi8v6K6h566X5pe26Ze06Ze06ZqUXFxudmFyIHN0YXJ0ID0gbmV3IERhdGUoZmV0Y2goZGF0ZV90eHQpKTsgXFxudmFyIG5vdyA9IG5ldyBEYXRlKCk7IFxcbnZhciBEX1QgPSBub3cuZ2V0VGltZSgpIC0gc3RhcnQuZ2V0VGltZSgpOyBcXG52YXIgRF9EID0gRF9UIC8gKDEwMDAgKiAzNjAwICogMjQpO1xcbnZhciBteXRpbWU9cGFyc2VJbnQoRF9EKSsnJztcXG5cXG5pZighZmV0Y2goZGF0ZV90eHQpIHx8ICFmZXRjaChsb2NhbCkgfHwgKHVwZGF0ZT09MSYmbXl0aW1lPj11cHRpbWUpKXtcXG4gICAgdHJ5e1xcbiAgICAgICAgdmFyIGNsb3VkID0gYmFzZTY0RGVjb2RlKGZldGNoKFxcXCJodHRwczovL2docHJveHkuY29tL2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS94aXhpZnJlZS9IaWtlci9tYWluL3l4ai5qc29uXFxcIix7fSkpO1xcbiAgICAgICAgaWYoY2xvdWQuaW5jbHVkZXMoXFxcIuWQiOmbhlxcXCIpKXtcXG4gICAgICAgICAgICB3cml0ZUZpbGUobG9jYWwsY2xvdWQpO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShkYXRlX3R4dCxuZXcgRGF0ZSgpKycnKTtcXG4gICAgICAgIH1cXG4gICAgfWNhdGNoKGUpe31cXG59XCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuabtOaWsOaVsOaNrlxcXCIsXFxcInBhdGhcXFwiOlxcXCJ1cGRhdGVcXFwiLFxcXCJydWxlXFxcIjpcXFwidmFyIGNsb3VkID0gYmFzZTY0RGVjb2RlKGZldGNoQ2FjaGUoXFxcXFxcXCJodHRwczovL2docHJveHkuY29tL2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS94aXhpZnJlZS9IaWtlci9tYWluL3l4ai5qc29uXFxcXFxcXCIsMjQpKTtcXFxcbmlmKGNsb3VkLmluY2x1ZGVzKFxcXFxcXFwi5ZCI6ZuGXFxcXFxcXCIpKXtcXFxcbiAgICB3cml0ZUZpbGUoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL0hvb2QveXhqLmpzb25cXFxcXFxcIixjbG91ZCk7XFxcXG4gICAgd3JpdGVGaWxlKFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9jYWNoZS91cGRhdGUveXhqLnR4dFxcXFxcXFwiLG5ldyBEYXRlKCkrJycpO1xcXFxufVxcXCJ9XVwifSIsInBpY1VybCI6Imh0dHBzOi8vcGljMS5pbWdkYi5jbi9pdGVtLzYzNDM4YjJiMTZmMmMyYmViMTQ4ZjBiMi5wbmdAUmVmZXJlcj0iLCJ0aXRsZSI6IumtlOaWueagiCJ9
wFbd6nmE,20230527收款单-信用额度对比,Pandaaaa906,T-SQL,Monday 29th of May 2023 03:53:09 AM CDT,"with closebill_summary as (
	-- 销售收款单，根据客户编码汇总
	SELECT 
	SUM( CASE WHEN cVouchType = N'48' THEN - iRAmt ELSE iRAmt END ) AS iAmount,
		isnull( cCusVen, '' ) AS cDwCode,
	-- 	isnull( cDepCode, '' ) AS cDeptCode,
	-- 	isnull( cPersonCode, '' ) AS cPerson,
		0 AS bVouchZZ,
		count(*) c
	-- 	INTO #creditTmp 
	FROM Ap_CloseBills
	INNER JOIN ap_closebill ON ap_closebills.iid= ap_closebill.iid 

	WHERE
		isnull( cCancelNo, '' ) NOT LIKE 'XJ%' 
		AND iType < 2 
	-- 	AND ap_closebills.iid= 1000038132 
	GROUP BY
		cCusVen
	-- 	cDepCode,
	-- 	cPersonCode

-- 	ORDER BY cDwCode
)

SELECT
credit_sum.*,
closebill_summary.*
FROM SA_CreditSum credit_sum

LEFT JOIN closebill_summary
ON closebill_summary.cDwCode = credit_sum.cCusCode

WHERE credit_sum.iType = 1
AND coalesce(credit_sum.farsum, 0) != COALESCE(closebill_summary.iAmount, 0)"
