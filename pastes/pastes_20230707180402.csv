id,title,username,language,date,content
BQHmCC9c,BTC Wallet Credentials have been reset,spectpsych_18,GetText,Friday 7th of July 2023 12:52:56 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials are embriagoit:r6Cs7G on 45.9.148.244
You can connect via SSH.
Regards"
s1L8Qp4X,Untitled,Yuvraj9886,Python,Friday 7th of July 2023 12:35:55 PM CDT,"import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.compose import ColumnTransformer
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler
from sklearn.feature_selection import RFE, f_regression
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.model_selection import GridSearchCV, KFold
from sklearn import utils
from mlxtend.feature_selection import SequentialFeatureSelector as SFS
from sklearn.model_selection import  cross_val_score
from sklearn.feature_selection import  SelectKBest
from sklearn.metrics import r2_score, mean_squared_error


# Display Pipeline

from sklearn import set_config
set_config(display='diagram')



df = pd.read_csv('CAR DETAILS FROM CAR DEKHO.csv')



#EDA and Preprocessing

# Displaying all columns
pd.set_option('display.max_columns', None)


# print(df.isnull().sum())
# print(df.dtypes)
# print(y.shape)
# print(df['transmission'].value_counts(), end='\n')
# print(df['fuel'].value_counts(), end='\n')
# print(df['seller_type'].value_counts(), end='\n')
# print(df['owner'].value_counts(), end='\n')
# print(df.duplicated(subset=None, keep='first'))

df = df.drop_duplicates()                                                           
# print(df.shape, df_new.shape)
df.drop('name', axis=1, inplace=True)
# print(df_new)

# df['owner'] = df['owner'].apply(lambda s: s.split()[0])

# print(df['owner'].head(10))
# print(df.head(10))

target = 'selling_price'

X = df.loc[:, df.columns != target]

y = df[target]


X_train , X_test, y_train , y_test  = train_test_split(X , y, test_size=0.3, random_state=42)





# i) Preprocessing-> Encoding

# Encoding Owner column-


# X_train = X_train.replace(to_replace='First Owner', value=0)
# X_train = X_train.replace(to_replace='Second Owner', value=1)
# X_train = X_train.replace(to_replace='Third Owner', value=2)
# X_train = X_train.replace(to_replace='Fourth & Above Owner', value=3)
# X_train = X_train.replace(to_replace='Test Drive Car', value=-1)
#
# X_test = X_test.replace(to_replace='First Owner', value=0)
# X_test = X_test.replace(to_replace='Second Owner', value=1)
# X_test = X_test.replace(to_replace='Third Owner', value=2)
# X_test = X_test.replace(to_replace='Fourth & Above Owner', value=3)
# X_test = X_test.replace(to_replace='Test Drive Car', value=-1)

trnf = ColumnTransformer(transformers=[
            ('trnf1', OrdinalEncoder(categories=[['Electric', 'LPG', 'CNG', 'Petrol', 'Diesel']]), ['fuel']),
            ('trnf2', OrdinalEncoder(categories=[['Test Drive Car', 'Fourth & Above Owner', 'Third Owner', 'Second Owner', 'First Owner']]), ['owner']),
            ('trnf3', OrdinalEncoder(categories=[['Individual', 'Dealer', 'Trustmark Dealer']]), ['seller_type']),
            ('trnf4', OneHotEncoder(sparse_output=False), ['transmission'])
        ], remainder='passthrough')

X_train = pd.DataFrame(trnf.fit_transform(X_train), columns=trnf.get_feature_names_out())
X_test = pd.DataFrame(trnf.transform(X_test), columns=trnf.get_feature_names_out())



#Feature Scalling

scaler = StandardScaler()

# X_train_scaled = pd.DataFrame(scaler.fit_transform(X_train), columns=scaler.get_feature_names_out())
# X_test_scaled = pd.DataFrame(scaler.transform(X_test), columns=scaler.get_feature_names_out())

X_train = pd.DataFrame(scaler.fit_transform(X_train), columns=scaler.get_feature_names_out())
X_test = pd.DataFrame(scaler.transform(X_test), columns=scaler.get_feature_names_out())
# print(scaler.get_feature_names_out())





##Comparing Scalling Effect
# fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))
#
#
# ax1.set_title('Before Scaling')
# sns.kdeplot(X_train['remainder__year'], ax=ax1)
# sns.kdeplot(X_train['remainder__km_driven'], ax=ax1)
#
# ax2.set_title('After Standard Scaling')
# sns.kdeplot(X_train_scaled['remainder__year'], ax=ax2)
# sns.kdeplot(X_train_scaled['remainder__km_driven'], ax=ax2)
# plt.show()
#
#




#Outlier Detection

##KDE Plot

# features = X_train.columns
# print(features)
# for col in features:
#     plt.figure(figsize=(16,5))
#     sns.distplot(X_train[col], kde=True)
#     plt.show()


##Using in-built function
# print(X_train[features].skew(), end='\n')



##Boxplot
# sns.boxplot(X_train)
# X_train.boxplot()
# plt.show()



#Removal of outliers(Using IQR method since skewed graph)

#IOR

###for km _driven

percentile_25 = X_train['remainder__km_driven'].quantile(0.25)
percentile_75 = X_train['remainder__km_driven'].quantile(0.75)
IQR = percentile_75-percentile_25

max = percentile_75 + 1.5*IQR
min = percentile_25 - 1.5*IQR


#Capping

X_train['remainder__km_driven'] = np.where(
    X_train['remainder__km_driven'] > max,
    max,
    np.where(
        X_train['remainder__km_driven'] < min,
        min,
        X_train['remainder__km_driven']
    )
)

# X_train = X_train[X_train['remainder__km_driven'] < max]
# X_train = X_train[X_train['remainder__km_driven'] > min]
# sns.boxplot(X_train)
# plt.show()


### for year


percentile_25 = X_train['remainder__year'].quantile(0.25)
percentile_75 = X_train['remainder__year'].quantile(0.75)
IQR = percentile_75-percentile_25

max = percentile_75 + 1.5*IQR
min = percentile_25 - 1.5*IQR


#Capping
X_train['remainder__year'] = np.where(
    X_train['remainder__year'] > max,
    max,
    np.where(
        X_train['remainder__year'] < min,
        min,
        X_train['remainder__year']
    )
)

# sns.boxplot(X_train)
# plt.show()



### for fuel


percentile_25 = X_train['trnf1__fuel'].quantile(0.25)
percentile_75 = X_train['trnf1__fuel'].quantile(0.75)
IQR = percentile_75-percentile_25

max = percentile_75 + 1.5*IQR
min = percentile_25 - 1.5*IQR


#Capping
X_train['trnf1__fuel'] = np.where(
    X_train['trnf1__fuel'] > max,
    max,
    np.where(
        X_train['trnf1__fuel'] < min,
        min,
        X_train['trnf1__fuel']
    )
)
# sns.boxplot(X_train)
# plt.show()



### for owner


percentile_25 = X_train['trnf2__owner'].quantile(0.25)
percentile_75 = X_train['trnf2__owner'].quantile(0.75)
IQR = percentile_75-percentile_25

max = percentile_75 + 1.5*IQR
min = percentile_25 - 1.5*IQR


#Capping
X_train['trnf2__owner'] = np.where(
    X_train['trnf2__owner'] > max,
    max,
    np.where(
        X_train['trnf2__owner'] < min,
        min,
        X_train['trnf2__owner']
    )
)
# X_train.boxplot()
# sns.boxplot(X_train)
# plt.show()


### for selley type


percentile_25 = X_train['trnf3__seller_type'].quantile(0.25)
percentile_75 = X_train['trnf3__seller_type'].quantile(0.75)
IQR = percentile_75-percentile_25

max = percentile_75 + 1.5*IQR
min = percentile_25 - 1.5*IQR


#Capping
X_train['trnf3__seller_type'] = np.where(
    X_train['trnf3__seller_type'] > max,
    max,
    np.where(
        X_train['trnf3__seller_type'] < min,
        min,
        X_train['trnf3__seller_type']
    )
)
# sns.boxplot(X_train)
# plt.show()


### for automatic


percentile_25 = X_train['trnf4__transmission_Automatic'].quantile(0.25)
percentile_75 = X_train['trnf4__transmission_Automatic'].quantile(0.75)
IQR = percentile_75-percentile_25

max = percentile_75 + 1.5*IQR
min = percentile_25 - 1.5*IQR


#Capping
X_train['trnf4__transmission_Automatic'] = np.where(
    X_train['trnf4__transmission_Automatic'] > max,
    max,
    np.where(
        X_train['trnf4__transmission_Automatic'] < min,
        min,
        X_train['trnf4__transmission_Automatic']
    )
)
# X_train.boxplot()
# sns.boxplot(X_train)
# plt.show()



### for manual
'''
Helpul Outlier in prediction
'''



# ii) Plotting


#Correlation Matrix

### With independent features

# sns.set(font_scale = 1)
# plt.figure(figsize=(3,3))
# cor = X_train.corr()
# sns.heatmap(cor, annot=True, cmap=""YlGnBu"", xticklabels=True, yticklabels=True, annot_kws={'fontsize': 8, 'fontweight': 'bold'})
# plt.show()


### With Dependent feature

# sns.set(font_scale = 1)
# plt.figure(figsize=(3,3))
# df_new = pd.concat([X, y], axis=1)
# cor = df_new.corr()
# print(df_new)
# sns.heatmap(cor, annot=True, cmap=""YlGnBu"", xticklabels=True, yticklabels=True, annot_kws={'fontsize': 8, 'fontweight': 'bold'})
# plt.show()



# ScatterPlot
# plt.scatter(X_train['remainder__km_driven'], y_train)
# plt.show()



#VIF

# vif_data = pd.DataFrame()
# vif_data[""features""] = X_train.columns
# vif_data[""VIF""] = [variance_inflation_factor(X_train.values, i)
#                    for i in range(len(X_train.columns))]

# print(vif_data)

X_train.drop(columns='trnf4__transmission_Automatic' , axis=1, inplace=True)

X_test.drop(columns='trnf4__transmission_Automatic' , axis=1, inplace=True)

# X_train.drop(columns='trnf4__transmission_Manual' , axis=1, inplace=True)

# X_test.drop(columns='trnf4__transmission_Manual' , axis=1, inplace=True)


# X_train.reset_index(drop=True)
# X_test.reset_index(drop=True)
# y_train.reset_index(drop=True)
# y_test.reset_index(drop=True)



##Again Plotting


##Boxplot

# for col in df.columns:
#     plt.subplots(figsize=(10,7))
#     ax=sns.boxplot(x=col,y=target,data=df)
#     ax.set_xticklabels(ax.get_xticklabels(),rotation=70,ha='right')
#     plt.show()

##Distplot
# features = X_train.columns
# print(features)
# for col in features:
#     plt.figure(figsize=(16,5))
#     sns.distplot(X_train[col], kde=True)
#     plt.show()



#Feature Selection

pipe = Pipeline([#('rfe', RFE(estimator=RandomForestClassifier(),step=1)),
                ('kbest', SelectKBest(k=5, score_func=f_regression)),
                ('lr', LinearRegression())])

#
# pipe = Pipeline([('sfs', SFS(estimator=RandomForestClassifier(), cv=5, n_jobs=-1)),
#                  ('lr', LinearRegression())])

grid = {
    # 'sfs__k_features': [int (i) for i in range(1, 7)],
    'kbest__k':[int (i) for i in range(1, 7)],
    # 'sfs__estimator__n_estimators': [int (i) for i in range (100, 1000, 100)]

}

##Hyper Parameter Tuning

# lr_gs = GridSearchCV(pipe, grid, cv=5, n_jobs=-1, verbose=2)
# lr_gs.fit(X_train, y_train)

# print('Best accuracy: ', lr_gs.best_score_, end='\n')
# print('Params: ', lr_gs.best_params_)

pipe.fit(X_train, y_train)

#Regression Metrics


#R^2

y_pred = pipe.predict(X_test)

# pred_train = pipe.predict(X_train)
# test = r2_score(y_test, y_pred)
# train = r2_score(y_train, pred_train)
# print(""R^2: "", ""Test: "", test, ""Train: "",train)

#MSE (Overfitting or underfitting)

pred_train = pipe.predict(X_train)
test = mean_squared_error(y_test, y_pred)
train = mean_squared_error(y_train, pred_train)
print(""MSE: "", ""Test: "", test, ""Train: "", train, end=""\n"")
print()


#Validation

kfold_validation = KFold(10)
results = cross_val_score(pipe, X_train, y_train, cv=kfold_validation)

print(""Results KFoldCrossValidation: "", results, end='\n')
acc = np.mean(results)
print()
print(""Accuracy KFoldCrossValidation: "", acc*100, end='\n')


#Plotting Graph b/w Predictied and Actual Values for LR

# plt.scatter(y_test, y_pred)
# plt.xlabel('True Quality')
# plt.ylabel('Predicted Quality')
# plt.title('Predicted Quality Against True Quality')
# plt.show()


# label = ""remainder__year""
# a = X_test[label]
# b = y_test
# c = X_test[label]
# d = y_pred
#
# plt.scatter(a,b)
# plt.scatter(c,d)
#
# plt.title(f""Age VS {label}: Test, Pred"",font= 'Times New Roman', fontsize = 16)
# plt.xlabel(""Age"", font= 'Times New Roman', fontsize = 14)
# plt.ylabel(""Selling_Price"", font= 'Times New Roman', fontsize = 14)
# plt.legend(handles = [plt.scatter(a,b, color='b'), plt.scatter(c,d, color='r')],
#            labels  = ['Test', 'Pred'])
# plt.grid()
#
# plt.show()


#Regularization

ridge = Ridge()
# ridge.fit(X_train, y_train)



#Hyper Parameter Tuning (Ridge)

# grid = {
#     ""alpha"": [1e-15, 1e-10, 1e-5, 1, 10, 25, 30, 45, 55, 100]
# }
#
# ridge_gs = GridSearchCV(ridge, grid, cv=5, n_jobs=-1)
# ridge_gs.fit(X_train, y_train)
#
#
# print('Best accuracy: ', ridge_gs.best_score_, end='\n')
# print('Params: ', ridge_gs.best_params_)
#





#Prection on Test Data

# y_pred = np.array(y_pred)
# y_test = np.array(y_test)
# for i in range(len(y_pred)):
#     print(""Actual: "", y_test[i])
#     print(""Prediction: "", y_pred[i], end='\n')
    # print(i)

"
S2w0xZiy,gh api test,vpeter,Bash,Friday 7th of July 2023 12:29:45 PM CDT,"   repo url: https://api.github.com/repos/CoreELEC/addons-archive-ce-20
repo folder: Amlogic-ne/20.1/arm

  addon name: audiodecoder.2sf
    folder exists, skipping github update
  addon name: audiodecoder.asap
    folder exists, skipping github update

............................................

  addon name: pvr.iptvsimple
    adding addon.xml pvr.iptvsimple-20.10.0.1.zip
    adding addon.xml pvr.iptvsimple-20.6.1.1.zip
    adding addon.xml pvr.iptvsimple-20.7.0.1.zip
    adding addon.xml pvr.iptvsimple-20.8.1.1.zip
    adding addon.xml pvr.iptvsimple-20.8.1.2.zip
    adding addon.xml pvr.iptvsimple-20.9.1.1.zip

............................................

  addon name: visualization.waveform
    folder exists, skipping github update

processing: Amlogic-ne/20.1/arm/service.prometheus-node-exporter/service.prometheus-node-exporter-20.1.0.zip.addon.xml
processing: Amlogic-ne/20.1/arm/game.libretro.mame2003/game.libretro.mame2003-0.78.0.49.1.zip.addon.xml
processing: Amlogic-ne/20.1/arm/game.libretro.mame2003/game.libretro.mame2003-0.78.0.50.1.zip.addon.xml
processing: Amlogic-ne/20.1/arm/game.libretro.mame2003/game.libretro.mame2003-0.78.0.47.2.zip.addon.xml

............................................

processing: Amlogic-ne/20.1/arm/screensaver.asteroids/screensaver.asteroids-20.1.0.3.zip.addon.xml
processing: Amlogic-ne/20.1/arm/screensaver.asteroids/screensaver.asteroids-20.2.0.2.zip.addon.xml
processing: Amlogic-ne/20.1/arm/screensaver.asteroids/screensaver.asteroids-20.2.0.3.zip.addon.xml
"
Z5GZ6T3X,Skript-Reflect ✎ Eigene Achievements (1/2) #05 Tutorial,L0v0lup,Java,Friday 7th of July 2023 12:23:46 PM CDT,"import:
	org.bukkit.event.inventory.InventoryClickEvent
	org.bukkit.event.player.PlayerLoginEvent
	org.bukkit.event.block.BlockBreakEvent	

options:
	Slot_0_Head: ""{SkullOwner:{Id:""""ee81faf1-e1f2-49f6-a034-6148217ba388"""",Properties:{textures:[{Value:""""eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvM2YyZDM4ZWZhZTFlMGE1ODFmMjU4YWEwOWNhNjEwNzQ5ZDNlZmRkZjU4NjUzMDRmMmZhMThiN2ExYTBjM2JjZCJ9fX0=""""}]}}}""
	Slot_1_Head: ""{SkullOwner:{Id:""""ee81faf1-e1f2-49f6-a034-6148217ba388"""",Properties:{textures:[{Value:""""eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMzVmMzcxYWNhYTQ5YWI5YmMxZmQ3ZmU5ZTVjOGIxYTM1MTUxYTZiN2ZhZTc5OGM3YTg0MTE3OWVlODU3YmRjZCJ9fX0=""""}]}}}""

function Achievements(p: player):
	open chest inventory with 6 rows named ""&6Achievements"" to {_p}
	set {_UUID} to {_p}'s uuid

	set slot 0 of {_p}'s current inventory to player head with nbt compound from {@Slot_0_Head} named ""&6Mining/Building""
	
	if {Achievements::1::%{_UUID}%::Tier} = 1:
		set slot 1 of {_p}'s current inventory to player head with nbt compound from {@Slot_1_Head} named ""&6Profi Miner 1"" with lore ""&fAufgabe: Farme 20 Stein"", """", ""&fFortschritt: %{Achievements::1::%{_UUID}%::Tier::Progress}%/20""
	else if {Achievements::1::%{_UUID}%::Tier} = 2:	
		set slot 1 of {_p}'s current inventory to player head with nbt compound from {@Slot_1_Head} named ""&6Profi Miner 2"" with lore ""&fAufgabe: Farme 500 Stein"", """", ""&fFortschritt: %{Achievements::1::%{_UUID}%::Tier::Progress}%/500""

command a:
	trigger:
		Achievements(player)

on InventoryClickEvent:

	set {_p} to event.getWhoClicked()
	set {_slot} to event.getSlot()
	set {_UUID} to {_p}.getUniqueId()
	{_slot} != -999

	set {_invname} to event.getView().getTitle()
	#event.getClickedInventory() != {_p}.getInventory()
	{_invname} = ""&6Achievements""
	event.setCancelled(true)"
9Nz8bc7L,Untitled,Houge_Langley,Bash,Friday 7th of July 2023 12:19:38 PM CDT,"[28965.617351] rcu: INFO: rcu_sched detected stalls on CPUs/tasks:
[28965.623289] rcu:     40-...0: (0 ticks this GP) idle=7564/1/0x4000000000000000 softirq=21359/21359 fqs=3000
[28965.632770] rcu:     41-...0: (0 ticks this GP) idle=b4b4/1/0x4000000000000000 softirq=5243/5243 fqs=3001
[28965.642072] rcu:     46-...0: (4 GPs behind) idle=c31c/1/0x4000000000000000 softirq=17661/17662 fqs=3001
[28965.651287] rcu:     58-...0: (1 GPs behind) idle=e7ac/1/0x4000000000000000 softirq=11682/11682 fqs=3001
[28965.660501] rcu:     62-...0: (1 GPs behind) idle=73e4/1/0x4000000000000000 softirq=11308/11310 fqs=3001
[28965.669728]  (detected by 15, t=6007 jiffies, g=426025, q=105 ncpus=64)
[28965.676341] Task dump for CPU 40:
[28965.679654] task:Xorg            state:R  running task     stack:0     pid:899   ppid:892    flags:0x00000008
[28965.689569] Call Trace:
[28965.692015] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[28965.697251] Task dump for CPU 41:
[28965.700564] task:firefox         state:R  running task     stack:0     pid:1571  ppid:966    flags:0x00000008
[28965.710476] Call Trace:
[28965.712920] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[28965.718143] Task dump for CPU 46:
[28965.721456] task:IPDL Background state:R  running task     stack:0     pid:1586  ppid:966    flags:0x00000008
[28965.731366] Call Trace:
[28965.733811] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[28965.739036] Task dump for CPU 58:
[28965.742346] task:Renderer        state:R  running task     stack:0     pid:1625  ppid:966    flags:0x00000008
[28965.752257] Call Trace:
[28965.754702] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[28965.759925] Task dump for CPU 62:
[28965.763237] task:firefox:gdrv0   state:R  running task     stack:0     pid:1642  ppid:966    flags:0x00000008
[28965.773147] Call Trace:
[28965.775591] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[28965.780814] [<ffffffff80c648d6>] schedule+0x4e/0xd0
[28965.785690] [<ffffffff800c5a0e>] futex_wait_queue+0x9a/0xc0
[28965.791261] [<ffffffff800c5fbc>] futex_wait+0xec/0x170
[28965.796396] [<ffffffff800c2d08>] do_futex+0xd6/0x13a
[28965.801363] [<ffffffff800c2e44>] sys_futex+0xd8/0x156
[28965.806414] [<ffffffff80003c8e>] ret_from_syscall+0x0/0x2
[29128.285474] systemd[1]: systemd-logind.service: Watchdog timeout (limit 3min)!
[29128.292868] systemd[1]: systemd-logind.service: Killing process 872 (systemd-logind) with signal SIGABRT.
[29145.860442] rcu: INFO: rcu_sched detected stalls on CPUs/tasks:
[29145.866376] rcu:     40-...0: (0 ticks this GP) idle=7564/1/0x4000000000000000 softirq=21359/21359 fqs=11811
[29145.875945] rcu:     41-...0: (0 ticks this GP) idle=b4b4/1/0x4000000000000000 softirq=5243/5243 fqs=11811
[29145.885334] rcu:     46-...0: (4 GPs behind) idle=c31c/1/0x4000000000000000 softirq=17661/17662 fqs=11811
[29145.894636] rcu:     58-...0: (1 GPs behind) idle=e7ac/1/0x4000000000000000 softirq=11682/11682 fqs=11811
[29145.903936] rcu:     62-...0: (1 GPs behind) idle=73e4/1/0x4000000000000000 softirq=11308/11310 fqs=11811
[29145.913247]  (detected by 21, t=24031 jiffies, g=426025, q=144 ncpus=64)
[29145.919948] Task dump for CPU 40:
[29145.923261] task:Xorg            state:R  running task     stack:0     pid:899   ppid:892    flags:0x00000008
[29145.933175] Call Trace:
[29145.935621] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[29145.940857] Task dump for CPU 41:
[29145.944170] task:firefox         state:R  running task     stack:0     pid:1571  ppid:966    flags:0x00000008
[29145.954081] Call Trace:
[29145.956526] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[29145.961750] Task dump for CPU 46:
[29145.965062] task:IPDL Background state:R  running task     stack:0     pid:1586  ppid:966    flags:0x00000008
[29145.974971] Call Trace:
[29145.977416] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[29145.982640] Task dump for CPU 58:
[29145.985951] task:Renderer        state:R  running task     stack:0     pid:1625  ppid:966    flags:0x00000008
[29145.995861] Call Trace:
[29145.998305] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[29146.003529] Task dump for CPU 62:
[29146.006841] task:firefox:gdrv0   state:R  running task     stack:0     pid:1642  ppid:966    flags:0x00000008
[29146.016751] Call Trace:
[29146.019195] [<ffffffff80c642b2>] __schedule+0x312/0x8e8
[29146.024417] [<ffffffff80c648d6>] schedule+0x4e/0xd0
[29146.029293] [<ffffffff800c5a0e>] futex_wait_queue+0x9a/0xc0
[29146.034865] [<ffffffff800c5fbc>] futex_wait+0xec/0x170
[29146.040001] [<ffffffff800c2d08>] do_futex+0xd6/0x13a
[29146.044968] [<ffffffff800c2e44>] sys_futex+0xd8/0x156
[29146.050018] [<ffffffff80003c8e>] ret_from_syscall+0x0/0x2"
ntb7A7fB,JMS Exp Table,Riremito,Java,Friday 7th of July 2023 12:03:47 PM CDT,"    // v131 or older?
    private static final int v131Table[]
            = {
                0,
                15,
                34,
                57,
                92,
                135,
                372,
                560,
                840,
                1242,
                1716,
                2360,
                3216,
                4200,
                5460,
                7050,
                8840,
                11040,
                13716,
                16680,
                20216,
                24402,
                28980,
                34320,
                40512,
                47216,
                54900,
                63666,
                73080,
                83720,
                95700,
                108480,
                122760,
                138666,
                155540,
                174216,
                194832,
                216600,
                240500,
                266682,
                294216,
                324240,
                356916,
                391160,
                428280,
                468450,
                510420,
                555680,
                604416,
                655200,
                709716,
                748608,
                789631,
                832902,
                878545,
                926689,
                977471,
                1031036,
                1087536,
                1147132,
                1209994,
                1276301,
                1346242,
                1420016,
                1497832,
                1579913,
                1666492,
                1757815,
                1854143,
                1955750,
                2062925,
                2175973,
                2295216,
                2420993,
                2553663,
                2693603,
                2841212,
                2996910,
                3161140,
                3334370,
                3517093,
                3709829,
                3913127,
                4127566,
                4353756,
                4592341,
                4844001,
                5109452,
                5389449,
                5684790,
                5996316,
                6324914,
                6671519,
                7037118,
                7422752,
                7829518,
                8258575,
                8711144,
                9188514,
                9692044,
                10223168,
                10783397,
                11374327,
                11997640,
                12655110,
                13348610,
                14080113,
                14851703,
                15665576,
                16524049,
                17429566,
                18384706,
                19392187,
                20454878,
                21575805,
                22758159,
                24005306,
                25320796,
                26708375,
                28171993,
                29715818,
                31344244,
                33061908,
                34873700,
                36784778,
                38800583,
                40926854,
                43169645,
                45535341,
                48030677,
                50662758,
                53439077,
                56367538,
                59456479,
                62714694,
                66151459,
                69776558,
                73600313,
                77633610,
                81887931,
                86375389,
                91108760,
                96101520,
                101367883,
                106922842,
                112782213,
                118962678,
                125481832,
                132358236,
                139611467,
                147262175,
                155332142,
                163844343,
                172823012,
                182293713,
                192283408,
                202820538,
                213935103,
                225658746,
                238024845,
                251068606,
                264827165,
                279339693,
                294647508,
                310794191,
                327825712,
                345790561,
                364739883,
                384727628,
                405810702,
                428049128,
                451506220,
                476248760,
                502347192,
                529875818,
                558913012,
                589541445,
                621848316,
                655925603,
                691870326,
                729784819,
                769777027,
                811960808,
                856456260,
                903390063,
                952895838,
                1005114529,
                1060194805,
                1118293480,
                1179575962,
                1244216724,
                1312399800,
                1384319309,
                1460180007,
                1540197871,
                1624600714,
                1713628833,
                1807535693,
                1906588648,
                2011069705
            };

    // v188+ BIGBANG
    private static final int v194Table[]
            = {
                0,
                15,
                34,
                57,
                92,
                135,
                372,
                560,
                840,
                1242,
                1242,
                1242,
                1242,
                1242,
                1242,
                1490,
                1788,
                2146,
                2575,
                3090,
                3708,
                4450,
                5340,
                6408,
                7690,
                9228,
                11074,
                13289,
                15947,
                19136,
                19136,
                19136,
                19136,
                19136,
                19136,
                22963,
                27556,
                33067,
                39680,
                47616,
                51425,
                55539,
                59982,
                64781,
                69963,
                75560,
                81605,
                88133,
                95184,
                102799,
                111023,
                119905,
                129497,
                139857,
                151046,
                163130,
                176180,
                190274,
                205496,
                221936,
                239691,
                258866,
                279575,
                301941,
                326096,
                352184,
                380359,
                410788,
                443651,
                479143,
                479143,
                479143,
                479143,
                479143,
                479143,
                512683,
                548571,
                586971,
                628059,
                672023,
                719065,
                769400,
                823258,
                880886,
                942548,
                1008526,
                1079123,
                1154662,
                1235488,
                1321972,
                1414510,
                1513526,
                1619473,
                1732836,
                1854135,
                1983924,
                2122799,
                2271395,
                2430393,
                2600521,
                2782557,
                2977336,
                3185750,
                3408753,
                3647366,
                3902682,
                4175870,
                4468181,
                4780954,
                5115621,
                5473714,
                5856874,
                6266855,
                6705535,
                7174922,
                7677167,
                8214569,
                8789589,
                9404860,
                10063200,
                10063200,
                10063200,
                10063200,
                10063200,
                10063200,
                10767624,
                11521358,
                12327853,
                13190803,
                14114159,
                15102150,
                16159301,
                17290452,
                18500784,
                19795839,
                21181548,
                22664256,
                24250754,
                25948307,
                27764688,
                29708216,
                31787791,
                34012936,
                36393842,
                38941411,
                41667310,
                44584022,
                47704904,
                51044247,
                54617344,
                58440558,
                62531397,
                66908595,
                71592197,
                76603651,
                81965907,
                87703520,
                93842766,
                100411760,
                107440583,
                113887018,
                120720239,
                127963453,
                135641260,
                143779736,
                152406520,
                161550911,
                171243966,
                181518604,
                192409720,
                203954303,
                216191561,
                229163055,
                242912838,
                257487608,
                272936864,
                289313076,
                306671861,
                325072173,
                344576503,
                365251093,
                387166159,
                410396129,
                435019897,
                461121091,
                488788356,
                518115657,
                549202596,
                582154752,
                617084037,
                654109079,
                693355624,
                734956961,
                779054379,
                825797642,
                875345501,
                927866231,
                983538205,
                1042550497,
                1105103527
            };"
fCZVSarK,asdas,cosenza987,C++,Friday 7th of July 2023 11:49:38 AM CDT,"// Date / Time: 2023-07-07 11:54:23

//Слава Україні, Героям слава

#include <bits/stdc++.h>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    unordered_set<long long> st;
    for(long long i = 2; i <= (int)1e6; i++) {
        long long cur = i * i, s = 1 + i + i * i;
        while(true) {
            long long tmp = cur * i;
            if(cur != tmp / i) break;
            cur = tmp;
            if(s > (long long)1e18 - cur) break;
            s += cur;
            st.insert(s);
        }
    }
    int t;
    cin >> t;
    while(t--) {
        long long n;
        cin >> n;
        if(n < 7) {
            cout << ""NO\n"";
            continue;
        }
        long long k = sqrtl(n);
        if(k * (k + 1) == n - 1) {
            cout << ""YES\n"";
            continue;
        }
        if(st.find(n) != st.end()) {
            cout << ""YES\n"";
        } else {
            cout << ""NO\n"";
        }
    }
    return 0;
}"
SY3UfjPs,Asyncio Problem,Nicky-Lalrochhara,Python,Friday 7th of July 2023 11:46:36 AM CDT,"Traceback (most recent call last):
  File ""/home/ubuntu/.local/lib/python3.10/site-packages/aiorun.py"", line 237, in new_coro
    await coro
  File ""/home/ubuntu/anjani/anjani/core/anjani_bot.py"", line 65, in init_and_run
    await anjani.run()
  File ""/home/ubuntu/anjani/anjani/core/telegram_bot.py"", line 261, in run
    await self.stop()
  File ""/home/ubuntu/anjani/anjani/core/anjani_bot.py"", line 71, in stop
    if not self.client.is_connected:
AttributeError: 'anjani' object has no attribute 'client'
  ERROR     |  asyncio          |  Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7feadc42d240>"
m08XdVKK,Untitled,Farhana_Zaman,6502 Kick Assembler,Friday 7th of July 2023 11:41:17 AM CDT,".MODEL SMALL
.STACK 100H 
.DATA

MSG1 DB 'ENTER THE WORD: $'

.CODE

MAIN PROC
    
    MOV AX,@DATA  ;initializes the data
    MOV DS,AX
    
    MOV AH,9      ;reads the text
    LEA DX,MSG1
    INT 21h       ;display the msg
    
    XOR CX,CX     ;count=0
    
    MOV AH,1      ;prepare to read
    INT 21H       ;read a character
    
 WHILE_:     
    
    CMP AL,0DH    ;is AL greater than 0DH?
    JE END_WHILE  ;yes, exit loop
    
    PUSH AX       ;push it on stack
    INC CX        ;count = count + 1
    
    INT 21H       ;read character
    JMP WHILE_    ;loop back
    
 END_WHILE:
    
    MOV AH,2      ;display character function
    MOV DL,0DH    ;carriage return?
    INT 21H       ;execute
    MOV DL,0AH    ;LF
    INT 21H       ;execute
    JCXZ EXIT     ;exit if no characters read
    
 TOP:
    
    POP DX        ;get a character from stack
    INT 21H       ;display it 
    LOOP TOP    ;
    
 EXIT:
    
    MOV AH,4CH  ;
    INT 21H
    MAIN ENDP
END MAIN"
nwpVLG2s,Source code for CreateProcessInternalW @ kernel32.dll,RusNuker,C,Friday 7th of July 2023 11:29:39 AM CDT,"BOOL
WINAPI
CreateProcessInternalW(
    HANDLE hUserToken,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation,
    PHANDLE hRestrictedUserToken
    )

/*++

Routine Description:

    This is the worker routine for CreateProcess and CreateProcessAsUser.
    CreateProcessAsUser supplies a User token to be stamped on the new process.
    CreateProcess supplies NULL and the current process token is used.

    A process and thread object are created and a handle opened to each
    object using CreateProcessInternal.  Note that WinExec and LoadModule are
    still supported, but are implemented as a call to CreateProcess.

Arguments:

    hUserToken - Supplies an optional token handle to be set on the new process.
        Process token is used is this parameter is NULL.

    lpApplicationName - Supplies an optional pointer to a null terminated
        character string that contains the name of the image file to
        execute.  This is a fully qualified DOS path name.  If not
        specified, then the image file name is the first whitespace
        delimited token on the command line.

    lpCommandLine - Supplies a null terminated character string that
        contains the command line for the application to be executed.
        The entire command line is made available to the new process
        using GetCommandLine.  If the lpApplicationName parameter was
        not specified, then the first token of the command line
        specifies file name of the application (note that this token
        begins at the beginning of the command line and ends at the
        first ""white space"" character).  If the file name does not
        contain an extension (the presence of a "".""), then .EXE is
        assumed.  If the file name does not contain a directory path,
        Windows will search for the executable file in:

          - The current directory

          - The windows directory

          - The windows system directory

          - The directories listed in the path environment variable

        This parameter is optional onlu if the lpApplicationName
        parameter is specified.  In this case the command line the
        application receives will be the application name.

    lpProcessAttributes - An optional parameter that may be used to
        specify the attributes of the new process.  If the parameter is
        not specified, then the process is created without a security
        descriptor, and the resulting handle is not inherited on process
        creation:

        SECURITY_ATTRIBUTES Structure:

        DWORD nLength - Specifies the length of this structure.  Must be
            set to sizeof( SECURITY_ATTRUBUTES ).

        LPVOID lpSecurityDescriptor - Points to a security descriptor for
            the object (must be NULL for Win32, used on NT/Win32). The
            security descriptor controls the sharing of an object.

        BOOL bInheritHandle - Supplies a flag that indicates whether
            or not the returned handle is to be inherited by a new
            process during process creation.  A value of TRUE
            indicates that the new process will inherit the handle.

    lpThreadAttributes - An optional parameter that may be used to specify
        the attributes of the new thread.  If the parameter is not
        specified, then the thread is created without a security
        descriptor, and the resulting handle is not inherited on
        process creation.

    dwCreationFlags - Supplies additional flags that control the creation
        of the process.

        dwCreationFlags Flags:

        DEBUG_PROCESS - If this flag bit is set, then the creating
            process is treated as a debugger, and the process being
            created is created as a debugee.  All debug events occuring
            in the debugee are reported to the debugger.  If this bit is
            clear, but the calling process is a debugee, then the
            process becomes a debugee of the calling processes debugger.
            If this bit is clear and the calling processes is not a
            debugee then no debug related actions occur.

        DEBUG_ONLY_THIS_PROCESS - If this flag is set, then the
            DEBUG_PROCESS flag bit must also be set.  The calling
            process is is treated as a debugger, and the new process is
            created as its debuggee.  If the new process creates
            additional processes, no debug related activities (with
            respect to the debugger) occur.

        CREATE_SUSPENDED - The process is created, but the initial thread
            of the process remains suspended. The creator can resume this
            thread using ResumeThread. Until this is done, code in the
            process will not execute.

        CREATE_UNICODE_ENVIRONMENT - If set, the environment pointer
            points to a Unicode environment block.  Otherwise, the
            block is ANSI (actually OEM.)

    bInheritHandles - Supplies a flag that specifies whether or not the
        new process is to inherit handles to objects visible to the
        calling process.  A value of TRUE causes handles to be inherited
        by the new process.  If TRUE was specified, then for each handle
        visible to the calling process, if the handle was created with
        the inherit handle option, the handle is inherited to the new
        process.  The handle has the same granted access in the new
        process as it has in the calling process, and the value of the
        handle is the same.

    lpEnvironment - An optional parameter, that if specified, supplies a
        pointer to an environment block.  If the parameter is not
        specified, the environment block of the current process is used.
        This environment block is made available to the new process
        using GetEnvironmentStrings.

    lpCurrentDirectory - An optional parameter, that if specified,
        supplies a string representing the current drive and directory
        for the new process.  The string must be a fully qualified
        pathname that includes a drive letter.  If the parameter is not
        specified, then the new process is created with the same current
        drive and directory as the calling process.  This option is
        provided primarily for shells that want to start an application
        and specify its initial drive and working directory.

    lpStartupInfo - Supplies information that specified how the
        applications window is to be shown. This structure is described
        in the Win32 User Interface API Book.

    lpProcessInformation - Returns identification information about the
        new process.

    PROCESS_INFORMATION Structure:

        HANDLE hProcess - Returns a handle to the newly created process.
            Through the handle, all operations on process objects are
            allowed.

        HANDLE hThread - Returns a handle to the newly created thread.
            Through the handle, all operations on thread objects are
            allowed.

        DWORD dwProcessId - Returns a global process id that may be used
            to identify a process.  The value is valid from the time the
            process is created until the time the process is terminated.

        DWORD dwThreadId - Returns a global thread id that may be used
            to identify a thread.  The value is valid from the time the
            thread is created until the time the thread is terminated.

    hRestrictedUserToken - Returns a restricted token if a UsetToken was
        supplied. This is applicable for the CreateProcessAsUser case.
        The token is released by CreateProcessAsUser.

Return Value:

    TRUE - The operation was successful

    FALSE/NULL - The operation failed. Extended error status is available
        using GetLastError.

--*/

{
    NTSTATUS Status;
    OBJECT_ATTRIBUTES Obja;
    POBJECT_ATTRIBUTES pObja;
    HANDLE ProcessHandle, ThreadHandle, VdmWaitHandle = NULL;
    HANDLE FileHandle, SectionHandle;
    CLIENT_ID ClientId;
    UNICODE_STRING PathName;
    IO_STATUS_BLOCK IoStatusBlock;
    BOOLEAN TranslationStatus;
    RTL_RELATIVE_NAME RelativeName;
    PVOID FreeBuffer;
    LPWSTR NameBuffer;
    LPWSTR WhiteScan;
    ULONG Length,i;
    PROCESS_BASIC_INFORMATION ProcessInfo;
    SECTION_IMAGE_INFORMATION ImageInformation;
    NTSTATUS StackStatus;
    BOOLEAN bStatus;
    INITIAL_TEB InitialTeb;
    CONTEXT ThreadContext;
    PPEB Peb;
    BASE_API_MSG m;
    PBASE_CREATEPROCESS_MSG a = &m.u.CreateProcess;
    PBASE_CHECKVDM_MSG b = &m.u.CheckVDM;
    PWCH TempNull = NULL;
    WCHAR TempChar;
    UNICODE_STRING VdmNameString;
    PVOID BaseAddress;
    ULONG VdmReserve;
    SIZE_T BigVdmReserve;
    ULONG iTask=0;
    LPWSTR CurdirBuffer, CurdirFilePart;
    DWORD CurdirLength,CurdirLength2;
    ULONG VDMCreationState=0;
    ULONG VdmBinaryType = 0;
    BOOL  bMeowBinary = FALSE;
    UNICODE_STRING  SubSysCommandLine;
    PIMAGE_NT_HEADERS NtHeaders;
    DWORD dwNoWindow = (dwCreationFlags & CREATE_NO_WINDOW);
    ANSI_STRING AnsiStringVDMEnv;
    UNICODE_STRING UnicodeStringVDMEnv;
    WCHAR ImageFileDebuggerCommand[ MAX_PATH ];
    LPWSTR QuotedBuffer;
    BOOLEAN QuoteInsert;
    BOOLEAN QuoteCmdLine = FALSE;
    BOOLEAN QuoteFound;
    BOOL bSaferChecksNeeded = FALSE;
    BOOLEAN SearchRetry;
    BOOLEAN IsWowBinary = FALSE;
    STARTUPINFOW StartupInfo;
    DWORD LastError;
    DWORD fileattr;
    PROCESS_PRIORITY_CLASS PriClass;
    PVOID State;
    HANDLE DebugPortHandle = NULL;
    PVOID pAppCompatDataTemp;
    PVOID pAppCompatData  = NULL;
    DWORD cbAppCompatData = 0;    // for the future
    BOOLEAN bVdmRetry = FALSE;
    DWORD Flags;
    PVOID pAppCompatSxsData = NULL;
    DWORD cbAppCompatSxsData = 0;
    SXS_OVERRIDE_STREAM AppCompatSxsManifest;
    PCSR_CAPTURE_HEADER CaptureBuffer = NULL;
    SIZE_T SxsConglomeratedBufferSizeBytes;
    PBYTE SxsConglomeratedByteBuffer = NULL; // this contains all the of the below in one large right-sized heap allocation
                            // if we compute its size wrong, other code (if it gets it right..) should
                            // do more heap allocation
    ULONG sxsi; // for loop counter
    RTL_UNICODE_STRING_BUFFER SxsWin32ManifestPathBuffer;
    RTL_UNICODE_STRING_BUFFER SxsWin32PolicyPathBuffer;
    RTL_UNICODE_STRING_BUFFER SxsWin32AssemblyDirectoryBuffer;
    RTL_UNICODE_STRING_BUFFER SxsNtManifestPathBuffer;
    RTL_UNICODE_STRING_BUFFER SxsNtPolicyPathBuffer;
    const PRTL_UNICODE_STRING_BUFFER SxsStringBuffers[] = {
        // The order here does not matter.
        &SxsWin32ManifestPathBuffer,
        &SxsWin32PolicyPathBuffer,
        &SxsWin32AssemblyDirectoryBuffer,
        &SxsNtManifestPathBuffer,
        &SxsNtPolicyPathBuffer
    };
    UNICODE_STRING SxsWin32ExePath;
    UNICODE_STRING SxsNtExePath;
    BASE_MSG_SXS_HANDLES SxsExeHandles = {0};
    BASE_MSG_SXS_HANDLES SxsManifestFileHandles = {0};
    CONST SXS_CONSTANT_WIN32_NT_PATH_PAIR SxsExePathPair = { &SxsWin32ExePath, &SxsNtExePath };
    CONST SXS_WIN32_NT_PATH_PAIR SxsManifestPathPair = { &SxsWin32ManifestPathBuffer, &SxsNtManifestPathBuffer };
    CONST SXS_WIN32_NT_PATH_PAIR SxsPolicyPathPair = { &SxsWin32PolicyPathBuffer, &SxsNtPolicyPathBuffer };
    BASE_MSG_SXS_HANDLES SxsPolicyHandles = {0};
    PWSTR ExePathFullBuffer = NULL;

    DWORD dwJobMemberLevel = 0;
    HANDLE hSaferAssignmentJob = NULL;
    HANDLE hSaferRestrictedToken = NULL;

    DWORD dwBasePushProcessParametersFlags = 0;

#if defined(BUILD_WOW6432) || defined(_WIN64)
    BOOLEAN ComPlusILImage;
    LPCWSTR lpOriginalApplicationName = lpApplicationName;
    LPWSTR lpOriginalCommandLine = lpCommandLine;
#endif

#if defined(WX86)
    HANDLE Wx86Info = NULL;
#endif

#if defined WX86
    BOOLEAN UseKnownWx86Dll;
    UseKnownWx86Dll = NtCurrentTeb()->Wx86Thread.UseKnownWx86Dll;
    NtCurrentTeb()->Wx86Thread.UseKnownWx86Dll = FALSE;
#endif

    RtlZeroMemory(&a->Sxs, sizeof(a->Sxs));
    RtlZeroMemory(lpProcessInformation,sizeof(*lpProcessInformation));

    if (ARGUMENT_PRESENT( hRestrictedUserToken )) {
        *hRestrictedUserToken = NULL;
        }

    // Private VDM flag should be ignored; Its meant for internal use only.
    dwCreationFlags &= (ULONG)~CREATE_NO_WINDOW;

    if ((dwCreationFlags & (DETACHED_PROCESS | CREATE_NEW_CONSOLE)) ==
        (DETACHED_PROCESS | CREATE_NEW_CONSOLE)) {

        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
        }

    AnsiStringVDMEnv.Buffer = NULL;
    UnicodeStringVDMEnv.Buffer = NULL;

    //
    // the lowest specified priority class is used.
    //

    if (dwCreationFlags & IDLE_PRIORITY_CLASS ) {
        PriClass.PriorityClass = PROCESS_PRIORITY_CLASS_IDLE;
        }
    else if (dwCreationFlags & BELOW_NORMAL_PRIORITY_CLASS ) {
        PriClass.PriorityClass = PROCESS_PRIORITY_CLASS_BELOW_NORMAL;
        }
    else if (dwCreationFlags & NORMAL_PRIORITY_CLASS ) {
        PriClass.PriorityClass = PROCESS_PRIORITY_CLASS_NORMAL;
        }
    else if (dwCreationFlags & ABOVE_NORMAL_PRIORITY_CLASS ) {
        PriClass.PriorityClass = PROCESS_PRIORITY_CLASS_ABOVE_NORMAL;
        }
    else if (dwCreationFlags & HIGH_PRIORITY_CLASS ) {
        PriClass.PriorityClass =  PROCESS_PRIORITY_CLASS_HIGH;
        }
    else if (dwCreationFlags & REALTIME_PRIORITY_CLASS ) {
        if ( BasepIsRealtimeAllowed(FALSE) ) {
            PriClass.PriorityClass =  PROCESS_PRIORITY_CLASS_REALTIME;
            }
        else {
            PriClass.PriorityClass =  PROCESS_PRIORITY_CLASS_HIGH;
            }
        }
    else {
        PriClass.PriorityClass = PROCESS_PRIORITY_CLASS_UNKNOWN;
        }
    PriClass.Foreground = FALSE;

    dwCreationFlags = (dwCreationFlags & ~PRIORITY_CLASS_MASK );

    //
    // Default separate/shared VDM option if not explicitly specified.
    //

    if (dwCreationFlags & CREATE_SEPARATE_WOW_VDM) {
        if (dwCreationFlags & CREATE_SHARED_WOW_VDM) {
            SetLastError(ERROR_INVALID_PARAMETER);

            return FALSE;
            }
        }
    else
    if ((dwCreationFlags & CREATE_SHARED_WOW_VDM) == 0) {
        if (BaseStaticServerData->DefaultSeparateVDM) {
            dwCreationFlags |= CREATE_SEPARATE_WOW_VDM;
            }
        }

    if ((dwCreationFlags & CREATE_SEPARATE_WOW_VDM) == 0) {
        //
        // If the creator is running inside a job object, always
        // set SEPERATE_WOW_VDM so the VDM is part of the job.
        //
        JOBOBJECT_BASIC_UI_RESTRICTIONS UiRestrictions;

        Status = NtQueryInformationJobObject(NULL,
                                             JobObjectBasicUIRestrictions,
                                             &UiRestrictions,
                                             sizeof(UiRestrictions),
                                             NULL);
        if (Status != STATUS_ACCESS_DENIED) {
            //
            // Anything other than STATUS_ACCESS_DENIED indicates the
            // current process is inside a job.
            //
            dwCreationFlags = (dwCreationFlags & (~CREATE_SHARED_WOW_VDM)) |
                                  CREATE_SEPARATE_WOW_VDM;
            }
        }


    //
    //  If ANSI environment, convert to Unicode
    //

    if (lpEnvironment && !(dwCreationFlags & CREATE_UNICODE_ENVIRONMENT) ) {
        PUCHAR s;
        STRING Ansi;
        UNICODE_STRING Unicode;
        MEMORY_BASIC_INFORMATION MemoryInformation;

        Ansi.Buffer = s = lpEnvironment;
        while (*s || *(s+1))            // find end of block
            s++;

        Ansi.Length = (USHORT)(s - Ansi.Buffer) + 1;
        Ansi.MaximumLength = Ansi.Length + 1;
        MemoryInformation.RegionSize = Ansi.MaximumLength * sizeof(WCHAR);
        Unicode.Buffer = NULL;
        Status = NtAllocateVirtualMemory( NtCurrentProcess(),
                                          &Unicode.Buffer,
                                          0,
                                          &MemoryInformation.RegionSize,
                                          MEM_COMMIT,
                                          PAGE_READWRITE
                                        );
        if (!NT_SUCCESS(Status) ) {
            BaseSetLastNTError(Status);

            return FALSE;
            }

        Unicode.MaximumLength = (USHORT)MemoryInformation.RegionSize;
        Status = RtlAnsiStringToUnicodeString(&Unicode, &Ansi, FALSE);
        if (!NT_SUCCESS(Status) ) {
            NtFreeVirtualMemory( NtCurrentProcess(),
                                 &Unicode.Buffer,
                                 &MemoryInformation.RegionSize,
                                 MEM_RELEASE
                               );
            BaseSetLastNTError(Status);

            return FALSE;
            }
        lpEnvironment = Unicode.Buffer;
        }

    FileHandle = NULL;
    SectionHandle = NULL;
    ProcessHandle = NULL;
    ThreadHandle = NULL;
    FreeBuffer = NULL;
    NameBuffer = NULL;
    VdmNameString.Buffer = NULL;
    BaseAddress = (PVOID)1;
    VdmReserve = 0;
    CurdirBuffer = NULL;
    CurdirFilePart = NULL;
    SubSysCommandLine.Buffer = NULL;
    QuoteFound = FALSE;
    QuoteInsert = FALSE;
    QuotedBuffer = NULL;

    try {

        //
        // Make a copy of the startup info so we can change it.
        //

        StartupInfo = *lpStartupInfo;

        //
        // STARTF_USEHOTKEY means hStdInput is really the hotkey value.
        // STARTF_HASSHELLDATA means std handles are used for shell-private
        // data.  This flag is used if an icon is passed to ShellExecuteEx.
        // As a result they cannot be specified with STARTF_USESTDHANDLES.
        // Consistent with Win95, USESTDHANDLES is ignored.
        //

        if (StartupInfo.dwFlags & STARTF_USESTDHANDLES &&
            StartupInfo.dwFlags & (STARTF_USEHOTKEY | STARTF_HASSHELLDATA)) {

            StartupInfo.dwFlags &= ~STARTF_USESTDHANDLES;
            }

VdmRetry:
        //
        // None of this cleanup/reinit occurs for launching a Win32 or Win64 .exe,
        // but they generally do occur for launching 16bit, .bat, etc.
        //
        if (NameBuffer) {
            RtlFreeHeap(RtlProcessHeap(), 0, NameBuffer);
            NameBuffer = NULL;
        }
        if (FreeBuffer) {
            RtlFreeHeap(RtlProcessHeap(), 0, FreeBuffer);
            FreeBuffer = NULL;
        }
        if (FileHandle) {
            NtClose(FileHandle);
            FileHandle = NULL;
        }

        LastError = 0;
        SearchRetry = TRUE;
        QuoteInsert = FALSE;
        QuoteCmdLine = FALSE;
        if (!ARGUMENT_PRESENT( lpApplicationName )) {

            //
            // Locate the image
            //

            // forgot to free NameBuffer before goto VdmRetry???
            ASSERT(NameBuffer == NULL);

            NameBuffer = RtlAllocateHeap( RtlProcessHeap(),
                                          MAKE_TAG( TMP_TAG ),
                                          MAX_PATH * sizeof( WCHAR ));
            if ( !NameBuffer ) {
                BaseSetLastNTError(STATUS_NO_MEMORY);
                return FALSE;
                }
            lpApplicationName = lpCommandLine;
            TempNull = (PWCH)lpApplicationName;
            WhiteScan = (LPWSTR)lpApplicationName;

            //
            // check for lead quote
            //
            if ( *WhiteScan == L'\""' ) {
                SearchRetry = FALSE;
                WhiteScan++;
                lpApplicationName = WhiteScan;
                while(*WhiteScan) {
                    if ( *WhiteScan == (WCHAR)'\""' ) {
                        TempNull = (PWCH)WhiteScan;
                        QuoteFound = TRUE;
                        break;
                        }
                    WhiteScan++;
                    TempNull = (PWCH)WhiteScan;
                    }
                }
            else {
retrywsscan:
                lpApplicationName = lpCommandLine;
                while(*WhiteScan) {
                    if ( *WhiteScan == (WCHAR)' ' ||
                         *WhiteScan == (WCHAR)'\t' ) {
                        TempNull = (PWCH)WhiteScan;
                        break;
                        }
                    WhiteScan++;
                    TempNull = (PWCH)WhiteScan;
                    }
                }
            TempChar = *TempNull;
            *TempNull = UNICODE_NULL;

#ifdef WX86

            //
            // Wx86 applications must use x86 version of known exes
            // for compatibility.
            //

            if (UseKnownWx86Dll) {
               LPWSTR KnownName;

               NtCurrentTeb()->Wx86Thread.UseKnownWx86Dll = FALSE;

               KnownName = BasepWx86KnownExe(lpApplicationName);
               if (KnownName) {
                  lpApplicationName = KnownName;
                  }
               }
#endif


            Length = SearchPathW(
                        NULL,
                        lpApplicationName,
                        L"".exe"",
                        MAX_PATH,
                        NameBuffer,
                        NULL
                        )*2;

            if (Length != 0 && Length < MAX_PATH * sizeof( WCHAR )) {
                //
                // SearchPathW worked, but file might be a directory
                // if this happens, we need to keep trying
                //
                fileattr = GetFileAttributesW(NameBuffer);
                if ( fileattr != 0xffffffff &&
                     (fileattr & FILE_ATTRIBUTE_DIRECTORY) ) {
                    Length = 0;
                } else {
                    Length++;
                    Length++;
                }
            }

            if ( !Length || Length >= MAX_PATH<<1 ) {

                //
                // If we search pathed, then return file not found.
                // otherwise, try to be more specific.
                //
                RTL_PATH_TYPE PathType;
                HANDLE hFile;

                PathType = RtlDetermineDosPathNameType_U(lpApplicationName);
                if ( PathType != RtlPathTypeRelative ) {

                    //
                    // The failed open should set get last error properly.
                    //

                    hFile = CreateFileW(
                                lpApplicationName,
                                GENERIC_READ,
                                FILE_SHARE_READ | FILE_SHARE_WRITE,
                                NULL,
                                OPEN_EXISTING,
                                FILE_ATTRIBUTE_NORMAL,
                                NULL
                                );
                    if ( hFile != INVALID_HANDLE_VALUE ) {
                        CloseHandle(hFile);
                        BaseSetLastNTError(STATUS_OBJECT_NAME_NOT_FOUND);
                        }
                    }
                else {
                    BaseSetLastNTError(STATUS_OBJECT_NAME_NOT_FOUND);
                    }

                //
                // remember initial last error value for the retry scan path
                //

                if ( LastError ) {
                    SetLastError(LastError);
                    }
                else {
                    LastError = GetLastError();
                    }

                //
                // restore the command line
                //

                *TempNull = TempChar;
                lpApplicationName = NameBuffer;

                //
                // If we still have command line left, then keep going
                // the point is to march through the command line looking
                // for whitespace so we can try to find an image name
                // launches of things like:
                // c:\word 95\winword.exe /embedding -automation
                // require this. Our first iteration will stop at c:\word, our next
                // will stop at c:\word 95\winword.exe
                //
                if (*WhiteScan && SearchRetry) {
                    WhiteScan++;
                    TempNull = WhiteScan;
                    QuoteInsert = TRUE;
                    QuoteFound = TRUE;
                    goto retrywsscan;
                }

                return FALSE;
                }
            //
            // restore the command line
            //

            *TempNull = TempChar;
            lpApplicationName = NameBuffer;

            //
            // check whether it is setup.exe started by winlogon.exe
            //
            if (BasepIsSetupInvokedByWinLogon(lpApplicationName))
            {
                // validate the flag 
                if (!(dwCreationFlags & CREATE_IGNORE_SYSTEM_DEFAULT))
                {
                    //
                    // BUGBUBGUBGUBUGBUGBUGUBGBUGUBGUB
                    //    Winlogon does not set the flag correctly
                    //    in phase1, ignore it(now)
                    //    in phase2, ASSERT it
                    // BUGBUBGUBGUBUGBUGBUGUBGBUGUBGUB
                    //
                    dwCreationFlags |= CREATE_IGNORE_SYSTEM_DEFAULT;
                }
            }
            
        }
        else
        if (!ARGUMENT_PRESENT( lpCommandLine ) || *lpCommandLine == UNICODE_NULL ) {
            QuoteCmdLine = TRUE;
            lpCommandLine = (LPWSTR)lpApplicationName;
            }


#ifdef WX86

       //
       // Wx86 applications must use x86 version of known exes
       // for compatibility.
       //

       if (UseKnownWx86Dll) {
           LPWSTR KnownName;

           NtCurrentTeb()->Wx86Thread.UseKnownWx86Dll = FALSE;

           KnownName = BasepWx86KnownExe(lpApplicationName);
           if (KnownName) {

               RtlFreeHeap(RtlProcessHeap(), 0, NameBuffer);
               NameBuffer = KnownName;
               lpApplicationName = KnownName;
               }
           }

#endif

        //
        // Translate to an NT name.
        //

        TranslationStatus = RtlDosPathNameToNtPathName_U(
                                lpApplicationName,
                                &PathName,
                                NULL,
                                &RelativeName
                                );

        if ( !TranslationStatus ) {
            SetLastError(ERROR_PATH_NOT_FOUND);

            return FALSE;
            }

        // forgot to free FreeBuffer before goto VdmRetry????
        ASSERT(FreeBuffer == NULL);
        FreeBuffer = PathName.Buffer;

        RtlInitUnicodeString(&SxsWin32ExePath, lpApplicationName);

        {
            RTL_PATH_TYPE SxsWin32ExePathType = RtlDetermineDosPathNameType_U(lpApplicationName);

            if ((SxsWin32ExePathType != RtlPathTypeDriveAbsolute) &&
                (SxsWin32ExePathType != RtlPathTypeUncAbsolute)) {
                if (ExePathFullBuffer == NULL) {
                    // It seems that with VDM things, we can rerun this code with a new lpApplication, so
                    // we protect against double-allocating the buffer and just allocate a big
                    // MAX_PATH one the first time through, assuming it's good enough for the 2ndary times
                    // too.
                    ExePathFullBuffer = RtlAllocateHeap(RtlProcessHeap(), 0, (MAX_PATH + 1) * sizeof(WCHAR));
                    if (ExePathFullBuffer == NULL) {
                        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
                        return FALSE;
                    }
                }

                RtlGetFullPathName_U(lpApplicationName, (MAX_PATH + 1) * sizeof(WCHAR), ExePathFullBuffer, NULL);

                RtlInitUnicodeString(&SxsWin32ExePath, ExePathFullBuffer);
            }
        }


        SxsNtExePath = PathName;

        if ( RelativeName.RelativeName.Length ) {
            PathName = *(PUNICODE_STRING)&RelativeName.RelativeName;
            }
        else {
            RelativeName.ContainingDirectory = NULL;
            }

        InitializeObjectAttributes(
            &Obja,
            &PathName,
            OBJ_CASE_INSENSITIVE,
            RelativeName.ContainingDirectory,
            NULL
            );

        //
        // Open the file for red and execute access
        //

        Status = NtOpenFile(
                    &FileHandle,
                    SYNCHRONIZE | FILE_EXECUTE | FILE_READ_ATTRIBUTES | FILE_READ_DATA,
                    &Obja,
                    &IoStatusBlock,
                    FILE_SHARE_READ | FILE_SHARE_DELETE,
                    FILE_SYNCHRONOUS_IO_NONALERT | FILE_NON_DIRECTORY_FILE
                    );

        if (!NT_SUCCESS(Status) ) {

            //
            // We failed. Open the file for lesser access.
            //

            Status = NtOpenFile(
                        &FileHandle,
                        SYNCHRONIZE | FILE_EXECUTE,
                        &Obja,
                        &IoStatusBlock,
                        FILE_SHARE_READ | FILE_SHARE_DELETE,
                        FILE_SYNCHRONOUS_IO_NONALERT | FILE_NON_DIRECTORY_FILE
                        );

            if (!NT_SUCCESS(Status) ) {
                //
                // if we failed, see if this is a device. If it is a device,
                // then just return invalid image format
                //

                if ( RtlIsDosDeviceName_U(RTL_CONST_CAST(PWSTR)(lpApplicationName)) ) {
                    SetLastError(ERROR_BAD_DEVICE);
                    }
                else {
                    BaseSetLastNTError(Status);
                    }

                return FALSE;
            }

        }

        //
        // If no desktop has been specified, use the caller's
        // desktop.
        //

        if (StartupInfo.lpDesktop == NULL) {
            StartupInfo.lpDesktop =
                    (LPWSTR)((PRTL_USER_PROCESS_PARAMETERS)NtCurrentPeb()->
                        ProcessParameters)->DesktopInfo.Buffer;
            }

        //
        // Create a section object backed by the file
        //

        Status = NtCreateSection(
                    &SectionHandle,
                    SECTION_ALL_ACCESS,
                    NULL,
                    NULL,
                    PAGE_EXECUTE,
                    SEC_IMAGE,
                    FileHandle
                    );

        //
        // App Certification DLL
        //

        if (NT_SUCCESS(Status)) {
            Status = BasepIsProcessAllowed(lpApplicationName);

            if (!NT_SUCCESS(Status)) {
                BaseSetLastNTError(Status);
                NtClose(SectionHandle);
                return FALSE;
            }


       
          //
          // If Meow subsystem is enabled and caller specified CREATE_FORECEDOS for a win32 image
          // push it into the meow subsystem
          //

          if ((dwCreationFlags & CREATE_FORCEDOS) && BaseStaticServerData->ForceDos) {
               dwCreationFlags &= ~(CREATE_SHARED_WOW_VDM | CREATE_FORCEDOS);
               dwCreationFlags |= CREATE_SEPARATE_WOW_VDM;
               Status = STATUS_INVALID_IMAGE_WIN_16;
               bMeowBinary = TRUE;

               NtClose(SectionHandle);
               SectionHandle = NULL;
          }


       }

        //
        // check appcompat (aka apphelp)
        //
        // if we are running under debugger, bVdmRetry will be FALSE
        // yet pAppCompatData may have some data (from the app itself)
        // debugger will do a separate CreateProcess on debugee
        //
        // apphelp gets called if it is win32 app or if it is a .bat or .cmd 

       if(!bVdmRetry &&
          (NT_SUCCESS(Status) ||
           (Status == STATUS_INVALID_IMAGE_NOT_MZ && !BaseIsDosApplication(&PathName,Status)))
         ) {
            NTSTATUS BadAppStatus;

            if (NULL != pAppCompatData) {
                RtlFreeHeap(RtlProcessHeap(), 0, pAppCompatData);
                pAppCompatData = NULL;
                }
              
            if (NULL != pAppCompatSxsData) {
                RtlFreeHeap(RtlProcessHeap(), 0, pAppCompatSxsData);
                pAppCompatSxsData = NULL;
                }
             
            //
            // we only check ONCE --
            // the second time around is rather meaningless - to check for posix/ntvdm/os2 emulation
            //
            BadAppStatus = BasepCheckBadapp(FileHandle,
                                            PathName.Buffer,
                                            (WCHAR*)lpEnvironment,
                                            &pAppCompatData,
                                            &cbAppCompatData,
                                            &pAppCompatSxsData,
                                            &cbAppCompatSxsData);
                    
            if (!NT_SUCCESS(BadAppStatus)) {
                if (BadAppStatus == STATUS_ACCESS_DENIED) {
                    SetLastError(ERROR_CANCELLED);
                    }
                else {
                    BaseSetLastNTError(BadAppStatus);
                    }

                if (SectionHandle) {
                    NtClose(SectionHandle);
                    SectionHandle = NULL;
                    }
                return FALSE;
                }
            }

       //
       // Winsafer code
       //
       // If this is the first time then we will have to do Safer checks.
       // Note that we do not impose any restrictions on the interpreter
       // itself since it is part of OS.
       //


       if ((!bVdmRetry) &&
           ( (dwCreationFlags & CREATE_PRESERVE_CODE_AUTHZ_LEVEL) == 0 )) {

           NTSTATUS SaferStatus;

 
           {

               //
               // WinSafer process sandbox restrictions handling.
               // Should be done for non .NET images only.
               //

               SaferStatus = BasepCheckWinSaferRestrictions(
                                                      hUserToken,
                                                      lpApplicationName,   // same as PathName.Buffer
                                                      FileHandle,
                                                      &dwJobMemberLevel,
                                                      &hSaferRestrictedToken,
                                                      &hSaferAssignmentJob);
               if (SaferStatus == -1) {
                   SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);
                   bStatus =  FALSE;
                   leave;
               } else if (!NT_SUCCESS(SaferStatus)) {
                   BaseSetLastNTError(SaferStatus);
                   bStatus = FALSE;
                   leave;
               }
           }
       }


        if (!NT_SUCCESS(Status)) {
            switch (Status) {
                // 16 bit OS/2 exe
                case STATUS_INVALID_IMAGE_NE_FORMAT:
#if defined(i386) && defined(OS2_SUPPORT_ENABLED)
                //
                // Use OS/2 if x86 (OS/2 not supported on risc),
                //    and CreationFlags don't have forcedos bit
                //    and Registry didn't specify ForceDos
                //
                // else execute as a DOS bound app.
                //
                //

                if (!(dwCreationFlags & CREATE_FORCEDOS) &&
                    !BaseStaticServerData->ForceDos)
                  {

                    if ( !BuildSubSysCommandLine( L""OS2 /P "",
                                                  lpApplicationName,
                                                  lpCommandLine,
                                                  &SubSysCommandLine
                                                ) ) {
                        return FALSE;
                        }

                    lpCommandLine = SubSysCommandLine.Buffer;

                    lpApplicationName = NULL;

                    bVdmRetry = TRUE;
                    goto VdmRetry;
                    }
#endif
                    // Falls into Dos case, so that stub message will be
                    // printed, and bound apps will run w/o OS/2 subsytem

                // Dos .exe or .com

                case STATUS_INVALID_IMAGE_PROTECT:
                case STATUS_INVALID_IMAGE_NOT_MZ:
ForceDos:
                    {
                    ULONG BinarySubType;

                    BinarySubType = BINARY_TYPE_DOS_EXE;
                    if (Status == STATUS_INVALID_IMAGE_PROTECT   ||
                        Status == STATUS_INVALID_IMAGE_NE_FORMAT ||
                       (BinarySubType = BaseIsDosApplication(&PathName,Status)) )
                       {
#if defined(_WIN64) || defined(BUILD_WOW6432)
                        //
                        // If this a DOS application, then we need to pop up a dialog
                        // saying that this an invalid win32 application.
                        //
                        goto RaiseInvalidWin32Error;
#endif
                        VdmBinaryType = BINARY_TYPE_DOS;

                        // create the environment before going to the
                        // server. This was done becuase we want NTVDM
                        // to have the new environment when it gets
                        // created.
                        if (!BaseCreateVDMEnvironment(
                                    lpEnvironment,
                                    &AnsiStringVDMEnv,
                                    &UnicodeStringVDMEnv
                                    )) {
                            return FALSE;
                        }

                        if(!BaseCheckVDM(VdmBinaryType | BinarySubType,
                                         lpApplicationName,
                                         lpCommandLine,
                                         lpCurrentDirectory,
                                         &AnsiStringVDMEnv,
                                         &m,
                                         &iTask,
                                         dwCreationFlags,
                                         &StartupInfo
                                         )) {

                            return FALSE;
                        }

                        // Check the return value from the server
                        switch (b->VDMState & VDM_STATE_MASK) {
                            case VDM_NOT_PRESENT:
                                // mark this so the server can undo
                                // creation if something goes wrong.
                                // We marked it ""partially created"" because
                                // the NTVDM has yet not been fully created.
                                // a call to UpdateVdmEntry to update
                                // process handle will signal the NTVDM
                                // process completed creation
                                VDMCreationState = VDM_PARTIALLY_CREATED;
                                // fail the call if NTVDM process is being
                                // created DETACHED.
                                // note that, we let it go if NTVDM process
                                // is already running.
                                if (dwCreationFlags & DETACHED_PROCESS) {
                                    SetLastError(ERROR_ACCESS_DENIED);
                                    return FALSE;
                                    }
                                if (!BaseGetVdmConfigInfo(lpCommandLine,
                                                          iTask,
                                                          VdmBinaryType,
                                                          &VdmNameString,
                                                          &VdmReserve)) {
                                    BaseSetLastNTError(Status);
                                    return FALSE;
                                    }

                                lpCommandLine = VdmNameString.Buffer;
                                lpApplicationName = NULL;

                                break;

                            case VDM_PRESENT_NOT_READY:
                                SetLastError (ERROR_NOT_READY);
                                return FALSE;

                            case VDM_PRESENT_AND_READY:
                                VDMCreationState = VDM_BEING_REUSED;
                                VdmWaitHandle = b->WaitObjectForParent;
                                break;
                            }
                         VdmReserve--;               // we reserve from addr 1
                         if(VdmWaitHandle)
                            goto VdmExists;
                         else{
                            bInheritHandles = FALSE;
                            if (lpEnvironment &&
                                !(dwCreationFlags & CREATE_UNICODE_ENVIRONMENT)){
                                RtlDestroyEnvironment(lpEnvironment);
                                }
                            lpEnvironment = UnicodeStringVDMEnv.Buffer;
                            bVdmRetry = TRUE;
                            goto VdmRetry;
                            }
                        }
                    else {

                        //
                        //  must be a .bat or .cmd file
                        //

                        static PWCHAR CmdPrefix = L""cmd /c "";
                        PWCHAR NewCommandLine;
                        ULONG Length;
                        PWCHAR Last4 = &PathName.Buffer[PathName.Length / sizeof( WCHAR )-4];

                        if ( PathName.Length < 8 ) {
                            SetLastError(ERROR_BAD_EXE_FORMAT);
                            return FALSE;
                            }

                        if (_wcsnicmp( Last4, L"".bat"", 4 ) && _wcsnicmp( Last4, L"".cmd"", 4 )) {
                            SetLastError(ERROR_BAD_EXE_FORMAT);
                            return FALSE;
                        }

                        Length = wcslen( CmdPrefix )
                                 + (QuoteCmdLine || QuoteFound )
                                 + wcslen( lpCommandLine )
                                 + (QuoteCmdLine || QuoteFound)
                                 + 1;

                        NewCommandLine = RtlAllocateHeap( RtlProcessHeap( ),
                                                          MAKE_TAG( TMP_TAG ),
                                                          Length * sizeof( WCHAR ) );

                        if (NewCommandLine == NULL) {
                            BaseSetLastNTError(STATUS_NO_MEMORY);
                            return FALSE;
                        }

                        wcscpy( NewCommandLine, CmdPrefix );
                        if (QuoteCmdLine || QuoteFound) {
                            wcscat( NewCommandLine, L""\"""" );
                        }
                        wcscat( NewCommandLine, lpCommandLine );
                        if (QuoteCmdLine || QuoteFound) {
                            wcscat( NewCommandLine, L""\"""" );
                        }

                        RtlInitUnicodeString( &SubSysCommandLine, NewCommandLine );

                        lpCommandLine = SubSysCommandLine.Buffer;

                        lpApplicationName = NULL;

                        bVdmRetry = TRUE;
                        goto VdmRetry;

                        }

                    }

                // 16 bit windows exe
                case STATUS_INVALID_IMAGE_WIN_16:
#if defined(BUILD_WOW6432) || defined(_WIN64)
                   if (lpOriginalApplicationName == NULL) {
                       // pass in the part of the command line after the exe name
                       // including whitespace
                       lpCommandLine = ((*TempNull == '\""') ? TempNull + 1 : TempNull);
                   } else {
                       lpCommandLine = lpOriginalCommandLine;
                   }

                   return NtVdm64CreateProcess(lpOriginalApplicationName == NULL,
                                               lpApplicationName,             // this is now the real file name we've loaded
                                               lpCommandLine,
                                               lpProcessAttributes,
                                               lpThreadAttributes,
                                               bInheritHandles,
                                               (dwCreationFlags & ~CREATE_UNICODE_ENVIRONMENT),  // the environment has already been converted to unicode
                                               lpEnvironment,
                                               lpCurrentDirectory,
                                               lpStartupInfo,
                                               lpProcessInformation
                                               );
#endif
                   if (dwCreationFlags & CREATE_FORCEDOS) {
                       goto ForceDos;
                       }

                    IsWowBinary = TRUE;
                    if (!BaseCreateVDMEnvironment(lpEnvironment,
                                                  &AnsiStringVDMEnv,
                                                  &UnicodeStringVDMEnv)) {
                        return FALSE;
                        }

RetrySepWow:
                    VdmBinaryType = dwCreationFlags & CREATE_SEPARATE_WOW_VDM
                                     ? BINARY_TYPE_SEPWOW : BINARY_TYPE_WIN16;

                    if (!BaseCheckVDM(VdmBinaryType,
                                      lpApplicationName,
                                      lpCommandLine,
                                      lpCurrentDirectory,
                                      &AnsiStringVDMEnv,
                                      &m,
                                      &iTask,
                                      dwCreationFlags,
                                      &StartupInfo
                                      ))
                       {
                        //
                        // If we failed with access denied, caller may not
                        // be allowed allowed to access the shared wow's
                        // desktop, so retry as a separate wow
                        //
                        if (VdmBinaryType == BINARY_TYPE_WIN16 &&
                            GetLastError() == ERROR_ACCESS_DENIED)
                          {
                           dwCreationFlags |= CREATE_SEPARATE_WOW_VDM;
                           }
                        else {
                            return FALSE;
                            }
                        goto RetrySepWow;
                        }

                    // Check the return value from the server
                    switch (b->VDMState & VDM_STATE_MASK){
                        case VDM_NOT_PRESENT:
                            // mark this so the server can undo
                            // creation if something goes wrong.
                            // We marked it ""partitially created"" because
                            // the NTVDM has yet not been fully created.
                            // a call to UpdateVdmEntry to update
                            // process handle will signal the NTVDM
                            // process completed creation

                            VDMCreationState = VDM_PARTIALLY_CREATED;

                            // jarbats: 1/8/2001
                            // Tell BaseGetVdmConfigInfo to create
                            // vdm commandline for meow
                            //

                            if (bMeowBinary)
                               {
                               VdmReserve = 1;
                               }

                            if (!BaseGetVdmConfigInfo(
                                    lpCommandLine,
                                    iTask,
                                    VdmBinaryType,
                                    &VdmNameString,
                                    &VdmReserve
                                    )) {
                                BaseSetLastNTError(Status);
                                return FALSE;
                                }

                            lpCommandLine = VdmNameString.Buffer;
                            lpApplicationName = NULL;


                            //
                            // Wow must have a hidden console
                            // Throw away DETACHED_PROCESS flag which isn't
                            // meaningful for Win16 apps.
                            //

                            dwCreationFlags |= CREATE_NO_WINDOW;
                            dwCreationFlags &= ~(CREATE_NEW_CONSOLE | DETACHED_PROCESS);


                            //
                            // We're starting a WOW VDM, turn on feedback unless
                            // the creator passed STARTF_FORCEOFFFEEDBACK.
                            //

                            StartupInfo.dwFlags |= STARTF_FORCEONFEEDBACK;

                            break;

                        case VDM_PRESENT_NOT_READY:
                            SetLastError (ERROR_NOT_READY);
                            return FALSE;

                        case VDM_PRESENT_AND_READY:
                            VDMCreationState = VDM_BEING_REUSED;
                            VdmWaitHandle = b->WaitObjectForParent;
                            break;
                        }

                    VdmReserve--;               // we reserve from addr 1
                    if(VdmWaitHandle)
                        goto VdmExists;
                    else {
                        bInheritHandles = FALSE;
                        // replace the environment with ours
                        if (lpEnvironment &&
                            !(dwCreationFlags & CREATE_UNICODE_ENVIRONMENT)) {
                            RtlDestroyEnvironment(lpEnvironment);
                            }
                        lpEnvironment = UnicodeStringVDMEnv.Buffer;
                        bVdmRetry = TRUE;
                        goto VdmRetry;
                        }

                case STATUS_FILE_IS_OFFLINE:
                    SetLastError(ERROR_FILE_OFFLINE);
                    break;

                default :
                    SetLastError(ERROR_BAD_EXE_FORMAT);
                    return FALSE;
            }
        }

        //
        // Make sure only WOW apps can have the CREATE_SEPARATE_WOW_VDM flag.
        //

        if (!IsWowBinary && (dwCreationFlags & CREATE_SEPARATE_WOW_VDM)) {
            dwCreationFlags &= ~CREATE_SEPARATE_WOW_VDM;
        }

        //
        // Query the section to determine the stack parameters and
        // image entrypoint.
        //

        Status = NtQuerySection(
                    SectionHandle,
                    SectionImageInformation,
                    &ImageInformation,
                    sizeof( ImageInformation ),
                    NULL
                    );

        if (!NT_SUCCESS( Status )) {
            BaseSetLastNTError(Status);
            return FALSE;
            }

        if (ImageInformation.ImageCharacteristics & IMAGE_FILE_DLL) {
            SetLastError(ERROR_BAD_EXE_FORMAT);
            return FALSE;
            }

        ImageFileDebuggerCommand[ 0 ] = UNICODE_NULL;
        if (!(dwCreationFlags & (DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS)) ||
            NtCurrentPeb()->ReadImageFileExecOptions
           ) {
            LdrQueryImageFileExecutionOptions( &PathName,
                                               L""Debugger"",
                                               REG_SZ,
                                               ImageFileDebuggerCommand,
                                               sizeof( ImageFileDebuggerCommand ),
                                               NULL
                                             );
            }


        if ((ImageInformation.Machine < USER_SHARED_DATA->ImageNumberLow) ||
            (ImageInformation.Machine > USER_SHARED_DATA->ImageNumberHigh)) {
#if defined(_WIN64) || defined(BUILD_WOW6432)
            if (ImageInformation.Machine == IMAGE_FILE_MACHINE_I386) {
               // Fall through since this is a valid machine type.
                }
             else
#endif
                {
                ULONG_PTR ErrorParameters[2];
                ULONG ErrorResponse;

#if defined(_WIN64) || defined(BUILD_WOW6432)
RaiseInvalidWin32Error:
#endif
                ErrorResponse = ResponseOk;
                ErrorParameters[0] = (ULONG_PTR)&PathName;

                NtRaiseHardError( STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE,
                                  1,
                                  1,
                                  ErrorParameters,
                                  OptionOk,
                                  &ErrorResponse
                                );
                if ( NtCurrentPeb()->ImageSubsystemMajorVersion <= 3 ) {
                    SetLastError(ERROR_BAD_EXE_FORMAT);
                    }
                else {
                    SetLastError(ERROR_EXE_MACHINE_TYPE_MISMATCH);
                    }
                return FALSE;
                }
            }

        if ( ImageInformation.SubSystemType != IMAGE_SUBSYSTEM_WINDOWS_GUI &&
             ImageInformation.SubSystemType != IMAGE_SUBSYSTEM_WINDOWS_CUI ) {

            // POSIX exe

            NtClose(SectionHandle);
            SectionHandle = NULL;

            if ( ImageInformation.SubSystemType == IMAGE_SUBSYSTEM_POSIX_CUI ) {

                if ( !BuildSubSysCommandLine( L""POSIX /P "",
                                              lpApplicationName,
                                              lpCommandLine,
                                              &SubSysCommandLine
                                            ) ) {
                    return FALSE;
                }

                lpCommandLine = SubSysCommandLine.Buffer;

                lpApplicationName = NULL;
                bVdmRetry = TRUE;
                goto VdmRetry;
                }
            else {
                SetLastError(ERROR_CHILD_NOT_COMPLETE);
                return FALSE;
                }
            }
        else {
            if (!BasepIsImageVersionOk( ImageInformation.SubSystemMajorVersion,
                                        ImageInformation.SubSystemMinorVersion) ) {
                SetLastError(ERROR_BAD_EXE_FORMAT);
                return FALSE;
                }
            }

        if (ImageFileDebuggerCommand[ 0 ] != UNICODE_NULL) {
            SIZE_T n;

            n = wcslen( lpCommandLine );
            if (n == 0) {
                lpCommandLine = (LPWSTR)lpApplicationName;
                n = wcslen( lpCommandLine );
                }

            n += wcslen( ImageFileDebuggerCommand ) + 1 + 2;
            n *= sizeof( WCHAR );

            SubSysCommandLine.Buffer = RtlAllocateHeap( RtlProcessHeap(), MAKE_TAG( TMP_TAG ), n );
            SubSysCommandLine.Length = 0;
            SubSysCommandLine.MaximumLength = (USHORT)n;
            RtlAppendUnicodeToString( &SubSysCommandLine, ImageFileDebuggerCommand );
            RtlAppendUnicodeToString( &SubSysCommandLine, L"" "" );
            RtlAppendUnicodeToString( &SubSysCommandLine, lpCommandLine );
#if DBG
            DbgPrint( ""BASE: Calling debugger with '%wZ'\n"", &SubSysCommandLine );
#endif
            lpCommandLine = SubSysCommandLine.Buffer;
            lpApplicationName = NULL;
            NtClose(SectionHandle);
            SectionHandle = NULL;
            RtlFreeHeap(RtlProcessHeap(), 0, NameBuffer);
            NameBuffer = NULL;
            RtlFreeHeap(RtlProcessHeap(), 0, FreeBuffer);
            FreeBuffer = NULL;
            goto VdmRetry;
            }

        //
        // Create the process object
        //

        pObja = BaseFormatObjectAttributes(&Obja,lpProcessAttributes,NULL);

        Flags = 0;
        if (dwCreationFlags & CREATE_BREAKAWAY_FROM_JOB ) {
            Flags |= PROCESS_CREATE_FLAGS_BREAKAWAY;
        }

        if ( dwCreationFlags & (DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS) ) {
            Status = DbgUiConnectToDbg();
            if ( !NT_SUCCESS(Status) ) {
                BaseSetLastNTError(Status);
                return FALSE;
            }
            DebugPortHandle = DbgUiGetThreadDebugObject ();
            if (dwCreationFlags & DEBUG_ONLY_THIS_PROCESS) {
                Flags |= PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT;
            }
        }

        if (bInheritHandles) {
            Flags |= PROCESS_CREATE_FLAGS_INHERIT_HANDLES;
        }

        if (((ImageInformation.LoaderFlags & IMAGE_LOADER_FLAGS_COMPLUS) != 0)) {

#if defined(_WIN64) || defined(BUILD_WOW6432)

            //
            // Check if this is a 32-bit IL_ONLY COM+ image that needs to run natively
            // on Win64.
            //

            if ( ImageInformation.Machine == IMAGE_FILE_MACHINE_I386 ) {

                Status = BasepIsComplusILImage(
                                              SectionHandle,
                                              &ImageInformation,
                                              &ComPlusILImage
                                              );

                if ((NT_SUCCESS (Status)) && (ComPlusILImage != FALSE)) {
                    Flags |= PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE;
                }
            }

#endif
        } 
            
        //
        // This is temporary till we get Shim dlls support for native Win64 applications.
        //

        if (ImageInformation.Machine != IMAGE_FILE_MACHINE_I386) {
            pAppCompatDataTemp = NULL;
        } else {
            pAppCompatDataTemp = pAppCompatData;
        }

        Status = NtCreateProcessEx(
                    &ProcessHandle,
                    PROCESS_ALL_ACCESS,
                    pObja,
                    NtCurrentProcess(),
                    Flags,
                    SectionHandle,
                    DebugPortHandle,
                    NULL,
                    dwJobMemberLevel         // Job member level
                    );
        if ( !NT_SUCCESS(Status) ) {
            BaseSetLastNTError(Status);
            return FALSE;
        }

        //
        // NtCreateProcess will set to normal OR inherit if parent is IDLE or Below
        // only override if a mask is given during the create.
        //

        if ( PriClass.PriorityClass != PROCESS_PRIORITY_CLASS_UNKNOWN ) {
            State = NULL;
            if ( PriClass.PriorityClass ==  PROCESS_PRIORITY_CLASS_REALTIME ) {
                State = BasepIsRealtimeAllowed(TRUE);
                }
            Status = NtSetInformationProcess(
                        ProcessHandle,
                        ProcessPriorityClass,
                        (PVOID)&PriClass,
                        sizeof(PriClass)
                        );
            if ( State ) {
                BasepReleasePrivilege( State );
                }

            if ( !NT_SUCCESS(Status) ) {
                BaseSetLastNTError(Status);
                return FALSE;
                }
            }

        if (dwCreationFlags & CREATE_DEFAULT_ERROR_MODE) {
            UINT NewMode;
            NewMode = SEM_FAILCRITICALERRORS;
            NtSetInformationProcess(
                ProcessHandle,
                ProcessDefaultHardErrorMode,
                &NewMode,
                sizeof(NewMode)
                );
            }

        //
        // If the process is being created for a VDM call the server with
        // process handle.
        //

        if (VdmBinaryType) {
            VdmWaitHandle = ProcessHandle;
            if (!BaseUpdateVDMEntry(UPDATE_VDM_PROCESS_HANDLE,
                                    &VdmWaitHandle,
                                    iTask,
                                    VdmBinaryType
                                    ))
                {
                //make sure we don't close the handle twice --
                //(VdmWaitHandle == ProcessHandle) if we don't do this.
                VdmWaitHandle = NULL;
                return FALSE;
                }

            //
            // For Sep wow the VdmWaitHandle = NULL (there is none!)
            //

            VDMCreationState |= VDM_FULLY_CREATED;
            }


#if defined(i386)
        //
        // Reserve memory in the new process' address space if necessary
        // (for vdms). This is required only for x86 system.
        //

    if ( VdmReserve ) {
            BigVdmReserve = VdmReserve;
            Status = NtAllocateVirtualMemory(
                        ProcessHandle,
                        &BaseAddress,
                        0L,
                        &BigVdmReserve,
                        MEM_RESERVE,
                        PAGE_EXECUTE_READWRITE
                        );
            if ( !NT_SUCCESS(Status) ){
                BaseSetLastNTError(Status);
                return FALSE;
            }
    }
#endif

        //
        // Abuse the StaticSize fields temporarily.
        // They are somewhat private, but we are using them for temporary space, sort of.
        // These are the right values for them, but we need to call the proper initialization function,
        // which will store the values a second time (possibly optimized away).
        //
        SxsWin32ManifestPathBuffer.ByteBuffer.StaticSize = SxsWin32ExePath.Length + sizeof(SXS_MANIFEST_SUFFIX);
        SxsWin32PolicyPathBuffer.ByteBuffer.StaticSize = SxsWin32ExePath.Length + sizeof(SXS_POLICY_SUFFIX);
        SxsWin32AssemblyDirectoryBuffer.ByteBuffer.StaticSize = SxsWin32ExePath.Length + sizeof(WCHAR); // Win32AssemblyDirectory overestimate
        SxsNtManifestPathBuffer.ByteBuffer.StaticSize = SxsNtExePath.Length + sizeof(SXS_MANIFEST_SUFFIX);
        SxsNtPolicyPathBuffer.ByteBuffer.StaticSize = SxsNtExePath.Length + sizeof(SXS_POLICY_SUFFIX);
        //
        // now add them up as BYTE sizes
        //
        SxsConglomeratedBufferSizeBytes = 0;
        for (sxsi = 0 ; sxsi != RTL_NUMBER_OF(SxsStringBuffers) ; ++sxsi) {
            SxsConglomeratedBufferSizeBytes += SxsStringBuffers[sxsi]->ByteBuffer.StaticSize;
        }
#if DBG
        DbgPrintEx(
            DPFLTR_SXS_ID,
            DPFLTR_INFO_LEVEL,
            ""SXS: SxsConglomeratedBufferSizeBytes:%Id\n"",
            SxsConglomeratedBufferSizeBytes
            );
#endif
        //
        // one honking heap allocation
        //
        SxsConglomeratedByteBuffer = (PBYTE)RtlAllocateHeap(RtlProcessHeap(), 0, SxsConglomeratedBufferSizeBytes);
        if (SxsConglomeratedByteBuffer == NULL) {
            BaseSetLastNTError(STATUS_NO_MEMORY);
            return FALSE;
        }
        //
        // now dole out pieces, calling the proper initialization function
        //
        for (sxsi= 0 ; sxsi != RTL_NUMBER_OF(SxsStringBuffers) ; ++sxsi) {
            RtlInitUnicodeStringBuffer(
                SxsStringBuffers[sxsi],
                (sxsi != 0) ? SxsStringBuffers[sxsi - 1]->ByteBuffer.Buffer + SxsStringBuffers[sxsi- 1]->ByteBuffer.StaticSize
                         : SxsConglomeratedByteBuffer,
                SxsStringBuffers[sxsi]->ByteBuffer.StaticSize
                );
        }

        SxsExeHandles.Process = ProcessHandle;
        SxsExeHandles.File = FileHandle;
         // The 1 bit here means something different than in the loader.
        ASSERT((((ULONG_PTR)SectionHandle) & (ULONG_PTR)1) == 0);
        SxsExeHandles.Section = SectionHandle;

        // if we have an override stream, use it
        if (NULL != pAppCompatSxsData) {
            AppCompatSxsManifest.Name    = SxsWin32ExePath;     // unicode string
            AppCompatSxsManifest.Address = pAppCompatSxsData;   // pointer to unicode manifest
            AppCompatSxsManifest.Size    = cbAppCompatSxsData;  // byte count
        }

        Status = BasepSxsCreateProcessCsrMessage(
            (NULL != pAppCompatSxsData) ? &AppCompatSxsManifest : NULL, // override manifest (appcompat hook)
            NULL, // override policy (appcompat hook)
            &SxsManifestPathPair,
            &SxsManifestFileHandles,
            &SxsExePathPair,
            &SxsExeHandles,
            &SxsPolicyPathPair,
            &SxsPolicyHandles,
            &SxsWin32AssemblyDirectoryBuffer,
            &a->Sxs
            );
#if DBG
        // verify the buffer size calculation
        for (sxsi = 0 ; sxsi != RTL_NUMBER_OF(SxsStringBuffers) ; ++sxsi)
        {
            if (SxsStringBuffers[sxsi]->ByteBuffer.Buffer != SxsStringBuffers[sxsi]->ByteBuffer.StaticBuffer)
            {
                DbgPrintEx(
                    DPFLTR_SXS_ID,
                    DPFLTR_WARNING_LEVEL,
                    ""SXS: SxsStringBuffers[%lu]'s StaticSize was computed too small (%Id, %Id)\n"",
                    sxsi,
                    SxsStringBuffers[sxsi]->ByteBuffer.StaticSize,
                    SxsStringBuffers[sxsi]->ByteBuffer.Size
                    );
            }
        }
#endif
        if ( !NT_SUCCESS( Status ) ) {
            BaseSetLastNTError(Status);
            return FALSE;
            }

        //
        // Determine the location of the
        // processes PEB.
        //

        Status = NtQueryInformationProcess(
                    ProcessHandle,
                    ProcessBasicInformation,
                    &ProcessInfo,
                    sizeof( ProcessInfo ),
                    NULL
                    );
        if ( !NT_SUCCESS( Status ) ) {
            BaseSetLastNTError(Status);
            return FALSE;
            }

        Peb = ProcessInfo.PebBaseAddress;

        //
        // Push the parameters into the address space of the new process
        //

        if ( ARGUMENT_PRESENT(lpCurrentDirectory) ) {
            CurdirBuffer = RtlAllocateHeap( RtlProcessHeap(),
                                            MAKE_TAG( TMP_TAG ),
                                            (MAX_PATH + 1) * sizeof( WCHAR ) );
            if ( !CurdirBuffer ) {
                BaseSetLastNTError(STATUS_NO_MEMORY);
                return FALSE;
                }
            CurdirLength2 = GetFullPathNameW(
                                lpCurrentDirectory,
                                MAX_PATH,
                                CurdirBuffer,
                                &CurdirFilePart
                                );
            if ( CurdirLength2 > MAX_PATH ) {
                SetLastError(ERROR_DIRECTORY);
                return FALSE;
                }

            //
            // now make sure the directory exists
            //

            CurdirLength = GetFileAttributesW(CurdirBuffer);
            if ( (CurdirLength == 0xffffffff) ||
                 !(CurdirLength & FILE_ATTRIBUTE_DIRECTORY) ) {
                SetLastError(ERROR_DIRECTORY);
                return FALSE;
                }
            }


        if ( QuoteInsert || QuoteCmdLine) {
            QuotedBuffer = RtlAllocateHeap(RtlProcessHeap(),0,wcslen(lpCommandLine)*2+6);

            if ( QuotedBuffer ) {
                wcscpy(QuotedBuffer,L""\"""");

                if ( QuoteInsert ) {
                    TempChar = *TempNull;
                    *TempNull = UNICODE_NULL;
                    }

                wcscat(QuotedBuffer,lpCommandLine);
                wcscat(QuotedBuffer,L""\"""");

                if ( QuoteInsert ) {
                    *TempNull = TempChar;
                    wcscat(QuotedBuffer,TempNull);
                    }

                }
            else {
                if ( QuoteInsert ) {
                    QuoteInsert = FALSE;
                    }
                if ( QuoteCmdLine ) {
                    QuoteCmdLine = FALSE;
                    }
                }
            }


        // If we found a manifest, we want to push that fact to the new process.
        if (a->Sxs.Flags & BASE_MSG_SXS_MANIFEST_PRESENT)
            dwBasePushProcessParametersFlags |= BASE_PUSH_PROCESS_PARAMETERS_FLAG_APP_MANIFEST_PRESENT;

        if (!BasePushProcessParameters(
                dwBasePushProcessParametersFlags,
                ProcessHandle,
                Peb,
                lpApplicationName,
                CurdirBuffer,
                QuoteInsert || QuoteCmdLine ? QuotedBuffer : lpCommandLine,
                lpEnvironment,
                &StartupInfo,
                dwCreationFlags | dwNoWindow,
                bInheritHandles,
                IsWowBinary ? IMAGE_SUBSYSTEM_WINDOWS_GUI : 0,
                pAppCompatDataTemp,
                cbAppCompatData
                ) ) {
            return FALSE;
            }


        RtlFreeUnicodeString(&VdmNameString);
        VdmNameString.Buffer = NULL;

        //
        // Stuff in the standard handles if needed
        //
        if (!VdmBinaryType &&
            !bInheritHandles &&
            !(StartupInfo.dwFlags & STARTF_USESTDHANDLES) &&
            !(dwCreationFlags & (DETACHED_PROCESS | CREATE_NEW_CONSOLE | CREATE_NO_WINDOW)) &&
            ImageInformation.SubSystemType == IMAGE_SUBSYSTEM_WINDOWS_CUI
           ) {
            PRTL_USER_PROCESS_PARAMETERS ParametersInNewProcess;

            Status = NtReadVirtualMemory( ProcessHandle,
                                          &Peb->ProcessParameters,
                                          &ParametersInNewProcess,
                                          sizeof( ParametersInNewProcess ),
                                          NULL
                                        );
            if (NT_SUCCESS( Status )) {
                if (!CONSOLE_HANDLE( NtCurrentPeb()->ProcessParameters->StandardInput )) {
                    StuffStdHandle( ProcessHandle,
                                    NtCurrentPeb()->ProcessParameters->StandardInput,
                                    &ParametersInNewProcess->StandardInput
                                  );
                    }
                if (!CONSOLE_HANDLE( NtCurrentPeb()->ProcessParameters->StandardOutput )) {
                    StuffStdHandle( ProcessHandle,
                                    NtCurrentPeb()->ProcessParameters->StandardOutput,
                                    &ParametersInNewProcess->StandardOutput
                                  );
                    }
                if (!CONSOLE_HANDLE( NtCurrentPeb()->ProcessParameters->StandardError )) {
                    StuffStdHandle( ProcessHandle,
                                    NtCurrentPeb()->ProcessParameters->StandardError,
                                    &ParametersInNewProcess->StandardError
                                  );
                    }
                }
            }

        //
        // Create the thread...
        //

        //
        // Allocate a stack for this thread in the address space of the target
        // process.
        //

        StackStatus = BaseCreateStack(
                        ProcessHandle,
                        ImageInformation.CommittedStackSize,
                        (ImageInformation.MaximumStackSize < 256*1024) ? 256*1024 : ImageInformation.MaximumStackSize,
                        &InitialTeb
                        );

        if ( !NT_SUCCESS(StackStatus) ) {
            BaseSetLastNTError(StackStatus);
            return FALSE;
            }


        //
        // Create an initial context for the new thread.
        //

        BaseInitializeContext(
            &ThreadContext,
            Peb,
            ImageInformation.TransferAddress,
            InitialTeb.StackBase,
            BaseContextTypeProcess
            );


        //
        // Create the actual thread object
        //

        pObja = BaseFormatObjectAttributes(&Obja,lpThreadAttributes,NULL);

        Status = NtCreateThread(
                    &ThreadHandle,
                    THREAD_ALL_ACCESS,
                    pObja,
                    ProcessHandle,
                    &ClientId,
                    &ThreadContext,
                    &InitialTeb,
                    TRUE
                    );

        if (!NT_SUCCESS(Status) ) {
            BaseSetLastNTError(Status);
            return FALSE;
            }

        a->Peb = (ULONGLONG) Peb;

        //
        // From here on out, do not modify the address space of the
        // new process.  WOW64's implementation of NtCreateThread()
        // reshuffles the new process' address space if the current
        // process is 32-bit and the new process is 64-bit.
        //
#if DBG
        Peb = NULL;
#endif

#if defined(WX86)

        //
        // if this is a Wx86 Process, setup for a Wx86 emulated Thread
        //

        if (Wx86Info) {

            //
            // create a WX86Tib and initialize it's Teb->Vdm.
            //
            Status = BaseCreateWx86Tib(ProcessHandle,
                                       ThreadHandle,
                                       (ULONG)((ULONG_PTR)ImageInformation.TransferAddress),
                                       (ULONG)ImageInformation.CommittedStackSize,
                                       (ULONG)ImageInformation.MaximumStackSize,
                                       TRUE
                                       );

            if (!NT_SUCCESS(Status)) {
                BaseSetLastNTError(Status);
                return( FALSE );
                }


            //
            // Mark Process as WX86
            //
            Status = NtSetInformationProcess (ProcessHandle,
                                              ProcessWx86Information,
                                              &Wx86Info,
                                              sizeof(Wx86Info)
                                              );

            if (!NT_SUCCESS(Status)) {
                BaseSetLastNTError(Status);
                return( FALSE );
                }
            }
#endif


        //
        // Call the Windows server to let it know about the
        // process.
        //

        a->ProcessHandle = ProcessHandle;
        a->ThreadHandle = ThreadHandle;
        a->ClientId = ClientId;

        switch (ImageInformation.Machine) {
        case IMAGE_FILE_MACHINE_I386:
#if defined(_WIN64) || defined(BUILD_WOW6432)
            a->ProcessorArchitecture = PROCESSOR_ARCHITECTURE_IA32_ON_WIN64;
#else
            a->ProcessorArchitecture = PROCESSOR_ARCHITECTURE_INTEL;
#endif
            break;

        case IMAGE_FILE_MACHINE_IA64:
            a->ProcessorArchitecture = PROCESSOR_ARCHITECTURE_IA64;
            break;

        case IMAGE_FILE_MACHINE_AMD64:
            a->ProcessorArchitecture = PROCESSOR_ARCHITECTURE_AMD64;
            break;

        default:
            DbgPrint(""kernel32: No mapping for ImageInformation.Machine == %04x\n"", ImageInformation.Machine);
            a->ProcessorArchitecture = PROCESSOR_ARCHITECTURE_UNKNOWN;
            break;
        }

        //
        // remove debug flags now its not being done by CSR
        //
        a->CreationFlags = dwCreationFlags & ~ (DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS);
        a->DebuggerClientId.UniqueProcess = NULL;
        a->DebuggerClientId.UniqueThread = NULL;


        //
        // Set the 2 bit if a gui app is starting. The window manager needs to
        // know this so it can synchronize the startup of this app
        // (WaitForInputIdle api). This info is passed using the process
        // handle tag bits.  The 1 bit asks the window manager to turn on
        // or turn off the application start cursor (hourglass/pointer).
        //
        // When starting a WOW process, lie and tell UserSrv NTVDM.EXE is a GUI
        // process.  We also turn on bit 0x8 so that UserSrv can ignore the
        // UserNotifyConsoleApplication call made by the console during startup.
        //

        if ( ImageInformation.SubSystemType == IMAGE_SUBSYSTEM_WINDOWS_GUI ||
             IsWowBinary ) {

            a->ProcessHandle = (HANDLE)((ULONG_PTR)a->ProcessHandle | 2);

            //
            // If the creating process is a GUI app, turn on the app. start cursor
            // by default.  This can be overridden by STARTF_FORCEOFFFEEDBACK.
            //

            NtHeaders = RtlImageNtHeader((PVOID)GetModuleHandle(NULL));
            if ( NtHeaders
                 && (NtHeaders->OptionalHeader.Subsystem
                     == IMAGE_SUBSYSTEM_WINDOWS_GUI ) ) {
                a->ProcessHandle = (HANDLE)((ULONG_PTR)a->ProcessHandle | 1);
                }
            }


        //
        // If feedback is forced on, turn it on. If forced off, turn it off.
        // Off overrides on.
        //

        if (StartupInfo.dwFlags & STARTF_FORCEONFEEDBACK)
            a->ProcessHandle = (HANDLE)((ULONG_PTR)a->ProcessHandle | 1);
        if (StartupInfo.dwFlags & STARTF_FORCEOFFFEEDBACK)
            a->ProcessHandle = (HANDLE)((ULONG_PTR)a->ProcessHandle & ~1);

        a->VdmBinaryType = VdmBinaryType; // just tell server the truth

        if (VdmBinaryType){
           a->hVDM    = iTask ? 0 : NtCurrentPeb()->ProcessParameters->ConsoleHandle;
           a->VdmTask = iTask;
        }

#if defined(BUILD_WOW6432)
        m.ReturnValue = CsrBasepCreateProcess(a);
#else
        m.u.CreateProcess = *a;
        if (m.u.CreateProcess.Sxs.Flags != 0)
        {
            const PUNICODE_STRING StringsToCapture[] =
            {
                &m.u.CreateProcess.Sxs.Manifest.Path,
                    &m.u.CreateProcess.Sxs.Policy.Path,
                    &m.u.CreateProcess.Sxs.AssemblyDirectory
            };

            Status =
                CsrCaptureMessageMultiUnicodeStringsInPlace(
                &CaptureBuffer,
                RTL_NUMBER_OF(StringsToCapture),
                StringsToCapture
                );
            if (!NT_SUCCESS(Status)) {
                BaseSetLastNTError(Status);
                return FALSE;
            }
        }

        CsrClientCallServer( (PCSR_API_MSG)&m,
                             CaptureBuffer,
                             CSR_MAKE_API_NUMBER( BASESRV_SERVERDLL_INDEX,
                                                  BasepCreateProcess
                                                ),
                             sizeof( *a )
                           );

        if ( CaptureBuffer ) {
            CsrFreeCaptureBuffer( CaptureBuffer );
            CaptureBuffer = NULL;
        }

#endif

        if (!NT_SUCCESS((NTSTATUS)m.ReturnValue)) {
            BaseSetLastNTError((NTSTATUS)m.ReturnValue);
            NtTerminateProcess(ProcessHandle, (NTSTATUS)m.ReturnValue);
            return FALSE;
            }



        //
        // If the WinSafer sandboxing policy indicates that the
        // process needs to be run with a restricted token or placed
        // into a restricted job object, then do those actions now.
        // Do not replace the token if the restricted token was created
        // from a caller supplied token i.e. the CreateProcessAsUser case.
        //
        if ((hSaferRestrictedToken != NULL) && (hUserToken == NULL)) {
            Status = BasepReplaceProcessThreadTokens(
                    hSaferRestrictedToken,
                    ProcessHandle,
                    ThreadHandle);
            if (!NT_SUCCESS(Status)) {
                // kill and cleanup.
                NtTerminateProcess(ProcessHandle, Status);
                BaseSetLastNTError(Status);
                return FALSE;
            }
        }
        if (hSaferAssignmentJob != NULL) {
            Status = NtAssignProcessToJobObject(
                    hSaferAssignmentJob, ProcessHandle);
            if (!NT_SUCCESS(Status)) {
                // kill and cleanup.
                NtTerminateProcess(ProcessHandle, STATUS_ACCESS_DENIED);
                BaseSetLastNTError(Status);
                return FALSE;
            }
        }


        //
        // Make the thread start execution if we are allowed to.
        //
        if (!( dwCreationFlags & CREATE_SUSPENDED) ) {
            NtResumeThread(ThreadHandle,&i);
            }

VdmExists:
        bStatus = TRUE;
        if (VDMCreationState)
            VDMCreationState |= VDM_CREATION_SUCCESSFUL;

        try {
            if (VdmWaitHandle) {

                //
                // tag Shared WOW VDM handles so that wait for input idle has a
                // chance to work.  Shared WOW VDM ""process"" handles are actually
                // event handles,  Separate WOW VDM handles are real process
                // handles. Also mark DOS handles with 0x1 so WaitForInputIdle
                // has a way to distinguish DOS apps and not block forever.
                //

                if (VdmBinaryType == BINARY_TYPE_WIN16)  {
                    lpProcessInformation->hProcess =
                            (HANDLE)((ULONG_PTR)VdmWaitHandle | 0x2);

                    //
                    // Shared WOW doesn't always start a process, so
                    // we don't have a process ID or thread ID to
                    // return if the VDM already existed.
                    //
                    // Separate WOW doesn't hit this codepath
                    // (no VdmWaitHandle).
                    //

                    if (VDMCreationState & VDM_BEING_REUSED) {
                        ClientId.UniqueProcess = 0;
                        ClientId.UniqueThread = 0;
                        }

                    }
                else  {
                    lpProcessInformation->hProcess =
                            (HANDLE)((ULONG_PTR)VdmWaitHandle | 0x1);
                    }


                //
                // Close the ProcessHandle, since we are returning the
                // VdmProcessHandle instead.
                //

                if (ProcessHandle != NULL)
                    NtClose(ProcessHandle);
                }
            else{
                lpProcessInformation->hProcess = ProcessHandle;
                }

            lpProcessInformation->hThread = ThreadHandle;
            lpProcessInformation->dwProcessId = HandleToUlong(ClientId.UniqueProcess);
            lpProcessInformation->dwThreadId = HandleToUlong(ClientId.UniqueThread);
            ProcessHandle = NULL;
            ThreadHandle = NULL;
            }
        __except ( EXCEPTION_EXECUTE_HANDLER ) {
            NtClose( ProcessHandle );
            NtClose( ThreadHandle );
            ProcessHandle = NULL;
            ThreadHandle = NULL;
            if (VDMCreationState)
                VDMCreationState &= ~VDM_CREATION_SUCCESSFUL;
            }
        }
    __finally {

        if (ExePathFullBuffer != NULL) {
            SxsWin32ExePath.Buffer = NULL;
            SxsWin32ExePath.Length = 0;
            SxsWin32ExePath.MaximumLength = 0;
            RtlFreeHeap(RtlProcessHeap(), 0, ExePathFullBuffer);
            ExePathFullBuffer = NULL;
        }

        if (!VdmBinaryType) {
            NTSTATUS Status1;

            BasepSxsCloseHandles(&SxsManifestFileHandles);
            BasepSxsCloseHandles(&SxsPolicyHandles);
            //
            // don't close SxsExeHandles, they are
            // aliases of other variables that are either closed
            // or returned to the caller
            //

            //
            // This loop only really frees any memory if our computation
            // of the overall buffer size was too low, which it is not supposed to be.
            //
            if (SxsConglomeratedByteBuffer != NULL) {
                for (sxsi= 0 ; sxsi != RTL_NUMBER_OF(SxsStringBuffers) ; ++sxsi) {
                    RtlFreeUnicodeStringBuffer(SxsStringBuffers[sxsi]);
                    }
                RtlFreeHeap(RtlProcessHeap(), 0,SxsConglomeratedByteBuffer);
                }
            }
        if (lpEnvironment && !(dwCreationFlags & CREATE_UNICODE_ENVIRONMENT) ) {
            RtlDestroyEnvironment(lpEnvironment);
            lpEnvironment = NULL;
            }
        RtlFreeHeap(RtlProcessHeap(), 0,QuotedBuffer);
        RtlFreeHeap(RtlProcessHeap(), 0,NameBuffer);
        RtlFreeHeap(RtlProcessHeap(), 0,CurdirBuffer);
        RtlFreeHeap(RtlProcessHeap(), 0,FreeBuffer);
        if ( FileHandle ) {
            NtClose(FileHandle);
            }
        if ( SectionHandle ) {
            NtClose(SectionHandle);
            }
        if ( ThreadHandle ) {
            NtTerminateProcess(ProcessHandle,STATUS_SUCCESS);
            NtClose(ThreadHandle);
            }
        if ( ProcessHandle ) {
            NtClose(ProcessHandle);
            }
        if ( hSaferAssignmentJob ) {
            NtClose(hSaferAssignmentJob);
            }
        if ( hSaferRestrictedToken ) {
            if (hUserToken == NULL) {
                // CreateProcess case
                NtClose(hSaferRestrictedToken);
                }
            else{
                // CreateProcessAsUser case
                *hRestrictedUserToken = hSaferRestrictedToken;
                }
            }

        if (NULL != pAppCompatData) {
            RtlFreeHeap(RtlProcessHeap(), 0, pAppCompatData);
            }

        if (NULL != pAppCompatSxsData) {
            RtlFreeHeap(RtlProcessHeap(), 0, pAppCompatSxsData);
            }

        RtlFreeUnicodeString(&VdmNameString);
        RtlFreeUnicodeString(&SubSysCommandLine);
        if (AnsiStringVDMEnv.Buffer || UnicodeStringVDMEnv.Buffer)
            BaseDestroyVDMEnvironment(&AnsiStringVDMEnv, &UnicodeStringVDMEnv);

        if (VDMCreationState && !(VDMCreationState & VDM_CREATION_SUCCESSFUL)){
            BaseUpdateVDMEntry (
                UPDATE_VDM_UNDO_CREATION,
                (HANDLE *)&iTask,
                VDMCreationState,
                VdmBinaryType
                );
            if(VdmWaitHandle) {
                NtClose(VdmWaitHandle);
                }
            }
        }

    if (lpEnvironment && !(dwCreationFlags & CREATE_UNICODE_ENVIRONMENT) ) {
        RtlDestroyEnvironment(lpEnvironment);
        }
    return bStatus;
}
"
vNMswr6E,Tool,A_GUES,JavaScript,Friday 7th of July 2023 11:25:00 AM CDT,"javascript:(function() {
    var url = window.location.host + window.location.pathname;
    var newUrl = url.replace(/\./g, '-');
    window.location = 'https://'+ newUrl + '.proxy.wichita.edu' + window.location.search;
})()"
UjexJtig,mymal theme by 5cm,argui,CSS,Friday 7th of July 2023 11:21:03 AM CDT,"/* Theme Customiser Settings
https://github.com/ValerioLyndon/Theme-Customiser
^TC{""data"":""https://valeriolyndon.github.io/Theme-Customiser-Json/5cm/Sailor Moon.json"",""mods"":{""restore-more-info"":{}},""theme"":""Sailor Moon""}TC$*/

/*        List design by 5cm         Inspiration from SolitarySetsuna */
/*     Render by ElysionsGarden       Background by Adrian Pelletier  */
/* https://myanimelist.net/forum/?topicid=1099375&show=350#msg57006432 */
/* Modified by Valerio Lyndon
 * Last modified: 2022-SEP-10 */
@\import ""https://fonts.googleapis.com/css?family=Open+Sans:400,700,800"";
body {
  background: #dfd1e0 repeat-x center/cover fixed
    url(https://i.imgur.com/aoFpxkK.jpg)!important;
  font: 11px Open Sans; color: #ccc; letter-spacing: 1px; text-transform: uppercase;}
.header .header-title, .header .header-menu, .header .header-info, #header-menu-button,
i.fa, [data-owner=""""] .list-menu-float, .icon-menu:not(.profile), .cover-block, #cover-image-container,
.status-menu-container .status-menu .status-button::after, .status-menu-container .search-container,
.list-unit .list-status-title .stats,
.icon-watch.ml4, .more,
.list-table .list-table-data .tags .edit {
  display: none;}
.header {
  position: fixed; width: 300px; height: 480px; left: calc(50% + 250px); top: 100px; z-index: 1;
	pointer-events: none;
}
.header a {
	pointer-events: auto;
}
.header:before {
  content: url(https://i.imgur.com/L3i5SP8.png);
  display: block; text-align: right;}
.header .header-menu.other {
  display: block; top: unset; bottom: 98px; left: -10px;}
.header .header-menu .btn-menu {
  font-size: 0; text-align: center;}
.header a.username {
  background: center/150px;
  font: 800 20px Open Sans; color: rgba(255,255,255,.7); letter-spacing: 2px; padding: 5px 0;}
.list-menu-float {
  top: 450px; left: calc(50% + 250px); width: 300px; border: 0; z-index: 1;}
.icon-menu.profile {
  background: none!important; display: inline-block; width: auto; height: auto;}
.icon-menu.profile:after {content: attr(href);
  background: center/120px;
  font: 800 20px Open Sans; color: rgba(255,255,255,.7); letter-spacing: 2px; padding: 5px;
  display: inline-block; white-space: nowrap; text-indent: -443px; overflow: hidden;}
.icon-menu.profile:hover:after, .header a:hover,
.list-table .list-table-data a:not(.edit-disabled):hover,
.status-menu-container .status-menu .status-button:not(.on):hover,
#recaptcha-terms a:hover {
  color: white !important; text-decoration: none;}
.list-container {
  width: 1000px; top: 100px; background: none!important; border: 0;}
#status-menu {
  position: fixed; width: auto; height: 0; top: 495px; left: calc(50% + 300px); border: 0}
#status-menu .status-menu {
  display: flex; flex-flow: column; align-items: center;}
.status-menu-container .status-menu .status-button {
  order: 2; width: 170px; background: rgba(255,255,255,.2); padding: 2px 0;
  font: bold 11px Open Sans; color: rgba(67,72,104,.7); transition: all .2s ease-in-out;}
.status-menu-container .status-menu .status-button.on {order: 1;
  background: rgba(92,99,145,.2); color: #e8e8e8!important;
  padding: 10px; border-radius: 20px; border: 1px solid #e8e8e8;}
.status-menu-container .status-menu .status-button:not(.on) {
  margin-top: -16px; opacity: 0;}
.status-menu-container .status-menu:hover .status-button:not(.on),
.list-block, .status-menu-container.fixed + div.list-block {
  margin: 0; opacity: 1;}
.list-unit {
  width: 600px; margin-left: 60px;}
.list-unit .list-status-title {
  background: none; width: 600px; position: absolute; top: -12px;}
.list-unit .list-status-title .text {
  font: 800 25px Open Sans; color: rgba(255,255,255,.6); letter-spacing: 3px; text-align: left;}
.list-table {
  border: 0; border-collapse: separate; border-spacing: 0 2px;}
.list-table > tbody:nth-of-type(2n+1):first-child, .list-table .list-table-header .header-title {
  background: none; border: 0; height: 18px;}
.list-table .list-table-header .header-title .sort-icon {
	color: #ccc;
}
.list-item, .list-table > tbody:nth-of-type(2n+1) {
  background: rgba(0,0,0,.2);}
.list-table .list-table-header .header-title.title {
  visibility: hidden;}
.list-table .list-table-header .header-title .link.sort, .list-table .list-table-data .data a,
.list-table .list-table-data a.edit-disabled {
  color: #ccc!important;}
.list-table .list-table-data .data {
  height: 30px; border: 0;}
.list-table .list-table-data:hover {
  background: rgba(0,0,0,.1);}
.list-table .list-table-data .data.status {
  background: none!important; font: 13px FontAwesome; padding: 0 5px;}
.data.status.watching:before {
  content: '\f005';}
.data.status.completed:before {
  content: '\f058';}
.data.status.onhold:before {
  content: '\f06a'}
.data.status.dropped:before {
  content: '\f05e'}
.data.status.plantowatch:before {
  content: '\f017';}
.list-table .list-table-header .header-title.image,
.list-table .list-table-data .data.image {
	width: 0;
	padding: 0;
}
.list-table .list-table-header .header-title.image .link {
	display: none;
}
.list-table .list-table-data .data.image .link {
	position: absolute;
	left: -100px;
	z-index: -1;
	width: 120px;
	height: 180px;
	margin-top: -90px;
	border-radius: 7px;
	overflow: hidden;
	box-shadow: 0px 4px 10px rgba(0,0,0,.4);
	opacity: 0;
	transition: all .5s ease-in-out;
}
.list-table .list-table-data:hover .data.image .link {
	opacity: .8;
}
.list-table .list-table-data .data.image .image {
	width: 100%;
	height: 100%;
	border: none;
	object-fit: cover;
}
.list-table .list-table-header .header-title.number {
  position: absolute; visibility: hidden;}
.list-table .list-table-data .data.number {
  position: absolute; left: 12px; margin-top: 3px; font: 800 19px Open Sans; letter-spacing: 0;
  color: rgba(0,0,0,.3); text-align: right; width: 40px; z-index: -2;}
.data.number ~ .data.title .link:before {
  left: -100px;}
.list-table .list-table-data .data.title {
  padding-left: 0;}
.list-table .list-table-data .data.title .link {
  font-size: 1em; line-height: 1em; color: white!important; display: inline-block;
  max-width: 270px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;}
.list-table .list-table-data .data.title .notes .text {
	color: #ccc
}
.content-status {
	display: inline-block;
  background: rgba(0,0,0,.2); padding: 1px 4px 2px 4px;
  border-radius: 10px; position: relative; top: -1px;}
.list-table .list-table-data .data.title .add-edit-more {
  float: none; display: inline; font-size: 0; line-height: 0; opacity: 0;
  position: relative; top: -2px; left: 3px;}
.list-table-data:hover .data.title .add-edit-more {
  opacity: 1;}
.add, .edit, .data.tags {
  font-size: 8px; line-height: 1em;}
#footer-block {
  background: none; position: relative; top: 90px;}
#copyright, #recaptcha-terms, #recaptcha-terms a {
  font: 8px Open Sans; color: rgba(0,0,0,.6)}

/* 2022-09-10 streaming popup - credit to lifeiscrazy for initial design */

[class^=""icon-watch""] .malicon {
  color: #ccc !important;
}
.mal-modal .mal-modal-dialog .mal-modal-content {
  background-color: #8783b366 !important
}
.mal-modal .mal-modal-dialog .mal-modal-content a, .mal-modal .mal-modal-dialog .mal-modal-content button.btn-close {color: white !important}
.mal-modal .mal-modal-dialog .mal-modal-content a:hover {
  color: #ccc !important;
  background-color: unset !important;
}

.mal-modal .mal-modal-dialog .mal-modal-content .mal-modal-header {
	color: #ccc;
	border-color: transparent;
}
.mal-modal .mal-modal-dialog .mal-modal-content .mal-modal-header .row.reverse {
	text-align: left;
}

/* More Info - credit to lifeiscrazy */

.more {
	display: inline;
}

.list-table .list-table-data .data.title .add-edit-more {
  font-size: 8px !important;
  line-height: 1em !important;
  position:relative;
  top:2px;
  display: block !important;
}
.borderRBL, .borderRBL *
{font-size: 10px !important;}
.borderRBL a {color: white !important}
.borderRBL a:hover {color: #ccc !important}"
qt99GR2Q,Untitled,Nicky-Lalrochhara,Python,Friday 7th of July 2023 10:34:25 AM CDT,"  File ""/home/ubuntu/.local/lib/python3.10/site-packages/pyrogram/methods/utilities/start.py"", line 58, in start
    is_authorized = await self.connect()
  File ""/home/ubuntu/.local/lib/python3.10/site-packages/pyrogram/methods/auth/connect.py"", line 40, in connect
    await self.load_session()
  File ""/home/ubuntu/.local/lib/python3.10/site-packages/pyrogram/client.py"", line 593, in load_session
    await self.storage.open()
  File ""/home/ubuntu/.local/lib/python3.10/site-packages/pyrogram/storage/file_storage.py"", line 62, in open
    await self.update()
  File ""/home/ubuntu/.local/lib/python3.10/site-packages/pyrogram/storage/file_storage.py"", line 39, in update
    version = await self.version()
  File ""/home/ubuntu/.local/lib/python3.10/site-packages/pyrogram/storage/sqlite_storage.py"", line 218, in version
    return (await q.fetchone())[0]
TypeError: 'NoneType' object is not subscriptable
  ERROR     |  asyncio          |  Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7f02a0038f70>
"
YwRgNVz0,Untitled,manav_06,C++,Friday 7th of July 2023 10:33:59 AM CDT,"#include ""bits/stdc++.h""

using namespace std;

#define int long long

#define fastio                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL)
#define pb push_back
#define pii pair<int, int>
#define vi vector<int>
#define vvi vector<vi>
#define rep(i, a, b) for (int (i) = (a); (i) < (b); ++(i))
const int mod = 1e9 + 7;

void test_case() {
    int n, m;
    cin >> n >> m;

    vvi g(n + 1);


    rep(i, 0, m) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }


    int q;
    cin >> q;

    while (q--) {

        int a, b;
        cin >> a >> b;

        bool valid = false;

        for (int x: g[a]) {
            if (x == b) {
                valid = true;
                break;
            }
        }
        if (valid) {
            cout << ""YES\n"";
        } else {
            cout << ""NO\n"";
        }

    }
}

signed main() {
    fastio;
    int t = 1;
//    cin >> t;
    for (int i = 1; i <= t; i++) {
        test_case();
    }
}"
vs99MUx5,Untitled,manav_06,C++,Friday 7th of July 2023 10:32:36 AM CDT,"#include ""bits/stdc++.h""

using namespace std;

#define int long long

#define fastio                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL)
#define pb push_back
#define pii pair<int, int>
#define vi vector<int>
#define vvi vector<vi>
#define rep(i, a, b) for (int (i) = (a); (i) < (b); ++(i))
const int mod = 1e9 + 7;

void test_case() {
    int n, m;
    cin >> n >> m;

    vvi g(n + 1, vi(n + 1));

    rep(i, 0, m) {
        int u, v;
        cin >> u >> v;
        g[u][v] = 1;
        g[v][u] = 1;
    }


    int q;
    cin >> q;

    while (q--) {

        int a, b;
        cin >> a >> b;
        if (g[a][b] == 1) {
            cout << ""YES\n"";
        } else {
            cout << ""NO\n"";
        }
    }
}

signed main() {
    fastio;
    int t = 1;
//    cin >> t;
    for (int i = 1; i <= t; i++) {
        test_case();
    }
}"
AuWYXuxd,Underground_mapgroupproto.xml,iKurdo,XML,Friday 7th of July 2023 10:15:46 AM CDT,"		<group name=""Land_Underground_Storage_Barracks"" lootmax=""20"">
				<value name=""Tier1"" />
				<usage name=""Military"" />
				<usage name=""Underground"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""containers"" />
						<category name=""clothes"" />
						<tag name=""floor"" />
						<tag name=""ground"" />
						<point pos=""-3.064941 0.479675 -3.885498"" range=""0.203125"" height=""0.507813"" />
						<point pos=""-0.017579 1.215576 -5.425171"" range=""0.203125"" height=""0.507813"" />
						<point pos=""-0.890016 0.410583 3.420654"" range=""0.237500"" height=""0.593750"" />
						<point pos=""-2.343750 0.479675 -4.011719"" range=""0.271875"" height=""0.679688"" />
						<point pos=""-2.284302 0.798462 0.318360"" range=""0.271875"" height=""0.679688"" />
						<point pos=""-4.997681 0.423523 -3.846559"" range=""0.275940"" height=""0.689850"" />
						<point pos=""-7.490235 1.214661 4.595335"" range=""0.306250"" height=""0.765625"" />
						<point pos=""0.389649 1.214722 -4.682007"" range=""0.306250"" height=""0.765625"" />
						<point pos=""0.356810 0.424866 -4.719604"" range=""0.340625"" height=""0.532429"" />
						<point pos=""-9.225708 1.215820 3.444581"" range=""0.340625"" height=""0.851563"" />
						<point pos=""-1.282349 0.797058 0.330444"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-4.100708 0.795105 0.216308"" range=""0.375000"" height=""0.937500"" />
						<point pos=""0.966797 0.795349 0.370361"" range=""0.409375"" height=""1.023438"" />
						<point pos=""1.742187 0.797729 0.061035"" range=""0.409375"" height=""1.023438"" />
						<point pos=""-7.381960 0.424866 4.666745"" range=""0.409375"" height=""0.532450"" />
						<point pos=""-9.307616 0.424866 3.638550"" range=""0.443750"" height=""0.533289"" />
						<point pos=""-5.377931 1.215576 4.962768"" range=""0.478125"" height=""1.195313"" />
						<point pos=""2.948608 1.215515 -5.370728"" range=""0.512500"" height=""1.281250"" />
				</container>
				<container name=""lootWeapons"" lootmax=""10"">
						<category name=""weapons"" />
						<point pos=""-0.267823 0.408752 3.066895"" range=""0.134375"" height=""0.335938"" />
						<point pos=""-1.465333 0.412659 3.611694"" range=""0.168750"" height=""0.421875"" />
						<point pos=""-6.660279 0.424072 -3.371827"" range=""0.237549"" height=""0.593872"" />
						<point pos=""-6.100341 0.424072 -1.781493"" range=""0.252994"" height=""0.632486"" />
						<point pos=""7.171264 1.216309 -6.062134"" range=""0.266846"" height=""0.667114"" />
						<point pos=""6.871826 0.424866 -4.518554"" range=""0.306250"" height=""0.532127"" />
						<point pos=""4.617065 1.215942 -4.808594"" range=""0.306250"" height=""0.765625"" />
						<point pos=""-1.391114 1.215088 4.906860"" range=""0.340625"" height=""0.851555"" />
						<point pos=""-2.848998 1.215881 4.665405"" range=""0.340625"" height=""0.851563"" />
						<point pos=""7.566285 1.216064 4.547118"" range=""0.375000"" height=""0.937500"" />
						<point pos=""6.852783 1.214539 -4.588868"" range=""0.375000"" height=""0.937500"" />
						<point pos=""2.348510 1.215332 4.633667"" range=""0.375000"" height=""0.937500"" />
						<point pos=""5.743530 1.215210 5.091919"" range=""0.409375"" height=""1.023438"" />
						<point pos=""4.508300 0.424866 -5.005737"" range=""0.409375"" height=""0.533388"" />
						<point pos=""4.162598 1.215271 5.252929"" range=""0.409375"" height=""1.023438"" />
				</container>
		</group>
		<group name=""Land_Underground_Floor_Comms"" lootmax=""10"">
				<usage name=""Military"" />
				<value name=""Tier1"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""containers"" />
						<category name=""clothes"" />
						<tag name=""floor"" />
						<tag name=""ground"" />
						<point pos=""-2.110840 0.993164 -7.196350"" range=""0.443750"" height=""1.109375"" flags=""16"" />
						<point pos=""7.518188 0.995667 4.411987"" range=""0.168750"" height=""0.421875"" flags=""16"" />
						<point pos=""-2.082764 0.615784 -3.522766"" range=""0.168750"" height=""0.369995"" flags=""16"" />
						<point pos=""-2.075683 1.115784 -5.554504"" range=""0.203125"" height=""0.369995"" flags=""16"" />
						<point pos=""-1.900391 0.615784 -5.724243"" range=""0.203125"" height=""0.369995"" flags=""16"" />
						<point pos=""5.331787 1.229492 2.375915"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""-1.950440 0.615784 -4.564270"" range=""0.229693"" height=""0.369995"" flags=""16"" />
						<point pos=""-1.946899 0.615784 -2.304932"" range=""0.234698"" height=""0.369995"" flags=""16"" />
						<point pos=""-1.935058 1.115784 -3.435486"" range=""0.237500"" height=""0.369995"" flags=""16"" />
						<point pos=""2.056886 0.854126 8.202698"" range=""0.239075"" height=""0.597687"" flags=""16"" />
						<point pos=""6.292602 0.155273 7.681519"" range=""0.256592"" height=""0.641479"" flags=""16"" />
						<point pos=""-1.981933 1.115784 -4.588318"" range=""0.271875"" height=""0.369995"" flags=""16"" />
						<point pos=""-1.973389 1.115784 -2.381836"" range=""0.271875"" height=""0.369995"" flags=""16"" />
						<point pos=""4.343750 1.119873 4.732421"" range=""0.271875"" height=""0.679688"" flags=""16"" />
						<point pos=""-5.692140 0.819031 -4.940248"" range=""0.295077"" height=""1.017761"" flags=""16"" />
						<point pos=""2.055421 0.854065 7.055419"" range=""0.306250"" height=""0.765625"" flags=""16"" />
						<point pos=""-5.722412 0.819031 -2.273315"" range=""0.329724"" height=""0.851563"" flags=""16"" />
						<point pos=""-5.722900 0.819031 -2.943665"" range=""0.340625"" height=""0.851563"" flags=""16"" />
						<point pos=""-5.711302 0.819031 -3.862489"" range=""0.387939"" height=""0.969849"" flags=""16"" />
						<point pos=""-5.700073 0.819031 -6.166870"" range=""0.399170"" height=""0.997925"" flags=""16"" />
						<point pos=""-2.186769 0.993164 -8.246400"" range=""0.443750"" height=""1.109375"" flags=""16"" />
				</container>
		</group>
		<group name=""Land_Underground_Floor_Crew"" lootmax=""10"">
				<usage name=""Military"" />
				<value name=""Tier1"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""containers"" />
						<category name=""clothes"" />
						<category name=""weapons"" />
						<tag name=""floor"" />
						<tag name=""ground"" />
						<point pos=""7.600342 1.292908 -8.476135"" range=""0.438509"" height=""1.109375"" flags=""16"" />
						<point pos=""6.649901 1.291748 -8.502075"" range=""0.353868"" height=""1.109375"" flags=""16"" />
						<point pos=""6.728759 0.501953 -8.580812"" range=""0.443750"" height=""0.532410"" flags=""16"" />
						<point pos=""3.106201 1.292969 -8.665344"" range=""0.443750"" height=""1.109375"" flags=""16"" />
						<point pos=""5.680663 0.000366 -7.121094"" range=""0.917554"" height=""2.000000"" flags=""16"" />
						<point pos=""3.375975 0.000366 -6.382385"" range=""0.941120"" height=""2.000000"" flags=""16"" />
						<point pos=""2.121215 1.291748 -8.598389"" range=""0.351508"" height=""1.195313"" flags=""16"" />
						<point pos=""3.377685 0.501953 -8.551636"" range=""0.375000"" height=""0.533875"" flags=""16"" />
						<point pos=""2.050047 0.527710 -7.611390"" range=""0.134375"" height=""0.335938"" flags=""16"" />
						<point pos=""2.193359 0.501953 -8.539612"" range=""0.443750"" height=""0.532410"" flags=""16"" />
						<point pos=""1.917481 1.169128 -6.839966"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""6.996093 0.501953 -3.688660"" range=""0.271875"" height=""0.532776"" flags=""16"" />
						<point pos=""6.431762 0.501953 -4.214539"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""6.591187 1.291687 -4.002137"" range=""0.409375"" height=""1.023438"" flags=""16"" />
						<point pos=""6.691894 1.291809 -6.295838"" range=""0.443750"" height=""1.109375"" flags=""16"" />
						<point pos=""6.647827 0.501953 -6.402466"" range=""0.354488"" height=""0.532349"" flags=""16"" />
						<point pos=""8.099732 0.533447 -7.166139"" range=""0.100000"" height=""0.250000"" flags=""16"" />
						<point pos=""7.879394 0.501953 -8.600342"" range=""0.409375"" height=""0.533813"" flags=""16"" />
						<point pos=""5.787355 0.503540 3.950866"" range=""0.232666"" height=""0.581665"" flags=""16"" />
						<point pos=""7.736451 0.091675 4.369871"" range=""0.562988"" height=""1.407471"" flags=""16"" />
						<point pos=""7.742555 0.091675 2.790525"" range=""0.556885"" height=""1.392212"" flags=""16"" />
						<point pos=""5.736328 0.115784 8.976685"" range=""0.237500"" height=""0.369995"" flags=""16"" />
						<point pos=""5.706545 0.615784 8.943724"" range=""0.203125"" height=""0.369995"" flags=""16"" />
						<point pos=""5.672973 1.115784 8.912598"" range=""0.168750"" height=""0.369995"" flags=""16"" />
						<point pos=""7.764039 0.092834 7.340025"" range=""0.535400"" height=""1.338501"" flags=""16"" />
						<point pos=""7.844116 0.091675 5.863219"" range=""0.455322"" height=""1.138306"" flags=""16"" />
						<point pos=""5.744508 0.503540 6.020751"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""5.717285 0.503540 5.384583"" range=""0.168750"" height=""0.421875"" flags=""16"" />
						<point pos=""5.811891 0.503540 4.710814"" range=""0.208130"" height=""0.520325"" flags=""16"" />
						<point pos=""2.195803 0.836304 9.318909"" range=""0.100000"" height=""0.250000"" flags=""16"" />
						<point pos=""3.046144 0.836304 9.322327"" range=""0.100000"" height=""0.250000"" flags=""16"" />
						<point pos=""3.818727 0.836304 9.322387"" range=""0.100000"" height=""0.250000"" flags=""16"" />
						<point pos=""4.656862 0.836304 9.314208"" range=""0.100000"" height=""0.250000"" flags=""16"" />
				</container>
		</group>
		<group name=""Land_Underground_Entrance"" lootmax=""10"">
				<usage name=""Military"" />
				<usage name=""Police"" />
				<value name=""Tier1"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""containers"" />
						<category name=""clothes"" />
						<category name=""tools"" />
						<category name=""weapons"" />
						<tag name=""floor"" />
						<tag name=""ground"" />
						<point pos=""-1.918331 0.697205 -2.537552"" range=""0.306250"" height=""0.765625"" />
						<point pos=""-0.465044 0.822632 -2.618594"" range=""0.354797"" height=""0.886963"" />
						<point pos=""-1.150324 0.958496 -5.424282"" range=""0.237500"" height=""0.593750"" />
						<point pos=""-1.330669 -0.034851 -4.002523"" range=""1.199951"" height=""2.000000"" />
						<point pos=""1.754182 0.085022 -3.641407"" range=""0.271875"" height=""0.369995"" />
						<point pos=""1.738919 0.585022 -3.576905"" range=""0.232499"" height=""0.369995"" />
						<point pos=""1.760348 1.085022 -3.590840"" range=""0.268154"" height=""0.369995"" />
						<point pos=""1.768126 1.585022 -3.608747"" range=""0.232227"" height=""0.294983"" />
				</container>
		</group>
		<group name=""Land_Underground_Storage_Workshop"" lootmax=""10"">
				<usage name=""Military"" />
				<usage name=""Industrial"" />
				<usage name=""Underground"" />
				<value name=""Tier1"" />
				<container name=""lootTools"" lootmax=""10"">
						<category name=""tools"" />
						<category name=""containers"" />
						<category name=""clothes"" />
						<category name=""food"" />
						<category name=""weapons"" />
						<category name=""explosives"" />
						<point pos=""7.701721 0.585022 2.162843"" range=""0.134375"" height=""0.335938"" />
						<point pos=""-5.861390 1.038391 5.652586"" range=""0.134375"" height=""0.335938"" />
						<point pos=""7.792112 1.085022 -3.612307"" range=""0.168750"" height=""0.370001"" />
						<point pos=""8.779358 1.085022 -3.621338"" range=""0.168750"" height=""0.370001"" />
						<point pos=""-6.112244 0.959229 -0.271973"" range=""0.203125"" height=""0.507797"" />
						<point pos=""7.579895 1.085022 -0.845215"" range=""0.203125"" height=""0.370001"" />
						<point pos=""3.603882 0.950012 0.095948"" range=""0.237500"" height=""0.593750"" />
						<point pos=""8.984680 1.085022 -0.808107"" range=""0.237500"" height=""0.370001"" />
						<point pos=""8.363525 1.085022 2.311525"" range=""0.271875"" height=""0.370001"" />
						<point pos=""9.645080 1.085022 -2.508303"" range=""0.271875"" height=""0.370001"" />
						<point pos=""0.097598 0.775879 5.849854"" range=""0.306250"" height=""0.765625"" />
						<point pos=""4.675476 0.775879 0.722414"" range=""0.306250"" height=""0.765625"" />
						<point pos=""4.860961 0.775879 -2.945070"" range=""0.308105"" height=""0.770264"" />
						<point pos=""4.856812 0.775879 -1.292969"" range=""0.340625"" height=""0.851563"" />
						<point pos=""-1.382507 1.250000 3.077636"" range=""0.340625"" height=""0.851563"" />
						<point pos=""-2.626770 0.950012 -3.466797"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-1.047911 0.775879 5.904786"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-3.773071 0.950012 -3.527832"" range=""0.409375"" height=""1.023438"" />
						<point pos=""3.589782 0.950012 1.729493"" range=""0.409375"" height=""1.023438"" />
						<point pos=""-0.348816 0.775879 -0.082519"" range=""0.530546"" height=""1.326365"" />
						<point pos=""-2.184265 0.775879 0.056396"" range=""0.546875"" height=""1.367188"" />
						<point pos=""-7.276184 0.937866 -1.379150"" range=""0.650000"" height=""1.625000"" />
				</container>
		</group>
		<group name=""Land_Underground_Storage_POX"" lootmax=""10"">
				<value name=""Tier1"" />
				<usage name=""Military"" />
				<usage name=""Underground"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""containers"" />
						<category name=""clothes"" />
						<category name=""weapons"" />
						<category name=""explosives"" />
						<point pos=""-2.667725 0.745178 0.938353"" range=""0.340625"" height=""0.851563"" flags=""16"" />
						<point pos=""-1.363281 1.730652 0.113769"" range=""0.203125"" height=""0.507813"" />
						<point pos=""-1.726439 1.730652 3.882813"" range=""0.237500"" height=""0.593750"" />
						<point pos=""-1.590088 1.730652 -1.161133"" range=""0.271875"" height=""0.679688"" />
						<point pos=""5.422607 1.501953 -2.364990"" range=""0.306250"" height=""0.765625"" />
						<point pos=""-7.669434 0.958984 -3.243410"" range=""0.650000"" height=""1.625000"" />
						<point pos=""7.447265 1.130554 -2.233886"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-3.325440 1.730652 2.102783"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-5.305054 2.138062 1.946287"" range=""0.375000"" height=""0.937500"" />
						<point pos=""2.062988 1.151733 0.381348"" range=""0.409375"" height=""1.023438"" />
						<point pos=""-3.639160 0.745178 0.901490"" range=""0.409375"" height=""1.023438"" flags=""16"" />
						<point pos=""-6.067993 1.115967 -2.867005"" range=""0.271875"" height=""0.679688"" flags=""16"" />
						<point pos=""4.395263 1.109497 -2.981445"" range=""0.203125"" height=""0.507813"" flags=""16"" />
				</container>
				<dispatch dechance=""1.000000"">
						<proxy type=""Grenade_ChemGas"" pos=""-3.30603 0.26218 -1.340943"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.25"" />
						<proxy type=""Grenade_ChemGas"" pos=""-3.25939 0.26218 -1.119508"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.25"" />
						<proxy type=""Grenade_ChemGas"" pos=""4.810425 2.198035 0.923217"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.25"" />
						<proxy type=""Grenade_ChemGas"" pos=""4.863892 2.198035 1.143250"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.25"" />
				</dispatch>
		</group>
		<group name=""Land_Underground_Storage_Ammo"" lootmax=""10"">
				<value name=""Tier1"" />
				<usage name=""Military"" />
				<usage name=""Underground"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""containers"" />
						<category name=""clothes"" />
						<category name=""weapons"" />
						<point pos=""-7.081787 2.683472 3.486022"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""3.483398 1.938843 2.155152"" range=""0.134375"" height=""0.335938"" />
						<point pos=""1.016113 3.464539 3.851196"" range=""0.237500"" height=""0.593750"" />
						<point pos=""-3.838135 3.464539 -3.083495"" range=""0.237500"" height=""0.593750"" />
						<point pos=""-6.277588 2.287842 -2.327880"" range=""0.340625"" height=""0.851563"" />
						<point pos=""2.348023 1.307495 -1.857544"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-5.608764 0.745178 0.921264"" range=""0.409375"" height=""1.023438"" />
						<point pos=""-7.776856 0.363098 0.833924"" range=""0.375000"" height=""0.937500"" flags=""16"" />
						<point pos=""-1.102661 3.464539 2.607910"" range=""0.581250"" height=""1.453125"" />
						<point pos=""-8.647583 0.363098 1.099549"" range=""0.306250"" height=""0.765625"" flags=""16"" />
						<point pos=""2.232056 1.699951 -2.650207"" range=""0.237500"" height=""0.593750"" flags=""16"" />
						<point pos=""5.670776 2.291260 -1.893126"" range=""0.306250"" height=""0.765625"" flags=""16"" />
				</container>
				<dispatch dechance=""1.000000"">
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""-6.450194 2.347341 2.558473"" rpy=""-90.000000 30.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_556x45Tracer_20Rnd"" pos=""-4.966064 2.347341 2.919129"" rpy=""-90.000000 30.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""-5.266602 2.000305 2.021424"" rpy=""-90.000000 90.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""-5.074829 2.000305 1.977051"" rpy=""-90.000000 10.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""-4.966674 2.000305 2.157837"" rpy=""-90.000000 30.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""-6.562866 1.938843 1.850160"" rpy=""-90.000000 50.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_556x45Tracer_20Rnd"" pos=""-6.060424 1.938843 1.908936"" rpy=""-90.000000 70.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""-5.654663 1.938843 1.750488"" rpy=""-90.000000 90.000000 0.000000"" dechance=""0.125"" />
				</dispatch>
				<dispatch dechance=""1.000000"">
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""3.860595 2.001953 2.175293"" rpy=""90.000000 120.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_556x45Tracer_20Rnd"" pos=""3.886474 2.011953 2.520020"" rpy=""-90.000000 160.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""4.158813 2.001953 2.823365"" rpy=""90.000000 210.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""4.161621 2.001953 2.536255"" rpy=""90.000000 260.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""4.149169 2.001953 2.235596"" rpy=""90.000000 120.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""4.525391 2.011953 2.233765"" rpy=""-90.000000 160.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""4.567504 2.001953 2.746094"" rpy=""90.000000 210.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""5.478393 2.001953 2.882385"" rpy=""90.000000 260.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""5.371948 2.001953 2.644409"" rpy=""90.000000 120.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""5.321533 2.011953 2.340271"" rpy=""-90.000000 160.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""4.971435 2.001953 2.288513"" rpy=""90.000000 210.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""4.926514 2.001953 2.564698"" rpy=""90.000000 260.000000 0.000000"" dechance=""0.077"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""4.769653 2.001953 2.388062"" rpy=""90.000000 120.000000 0.000000"" dechance=""0.077"" />
				</dispatch>
				<dispatch dechance=""1.000000"">
						<proxy type=""ClaymoreMine"" 			pos=""1.191284 0.151438 -1.327636"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.166"" />
						<proxy type=""Ammo_40mm_Explosive"" 	pos=""1.433350 0.186016 -1.175842"" rpy=""90.000000 35.000000 0.000000"" dechance=""0.166"" />
						<proxy type=""Ammo_40mm_Explosive"" 	pos=""1.860107 0.082756 -0.394958"" rpy=""90.000000 70.000000 0.000000"" dechance=""0.166"" />
						<proxy type=""Ammo_40mm_Explosive"" 	pos=""1.511963 0.082756 -0.604553"" rpy=""90.000000 105.000000 0.000000"" dechance=""0.166"" />
						<proxy type=""ClaymoreMine"" 			pos=""1.104614 0.062756 -0.793396"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.166"" />
						<proxy type=""Ammo_40mm_Explosive"" 	pos=""0.781372 0.082756 -0.982544"" rpy=""90.000000 140.000000 0.000000"" dechance=""0.166"" />
				</dispatch>
		</group>
		<group name=""Land_Underground_Storage_Ammo2"" lootmax=""20"">
				<usage name=""Military"" />
				<value name=""Tier3"" />
				<container name=""lootWeapons"" lootmax=""10"">
						<category name=""weapons"" />
						<category name=""explosives"" />
						<point pos=""5.923706 3.464539 -0.840759"" range=""0.134375"" height=""0.335938"" />
						<point pos=""-5.946045 1.730652 2.402344"" range=""0.271875"" height=""0.679688"" />
						<point pos=""0.507447 1.501953 -2.638366"" range=""0.306250"" height=""0.765625"" />
						<point pos=""-1.436035 1.730652 2.265869"" range=""0.306250"" height=""0.765625"" />
						<point pos=""7.024292 3.464539 -3.821593"" range=""0.306250"" height=""0.765625"" />
						<point pos=""0.629761 1.109497 -1.854431"" range=""0.340625"" height=""0.851563"" />
						<point pos=""5.492188 3.464539 -2.143493"" range=""0.340625"" height=""0.851563"" />
						<point pos=""-4.475099 1.115967 -4.512206"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-7.461549 0.958984 -2.766112"" range=""0.718750"" height=""1.796875"" />
						<point pos=""-8.099977 0.363098 0.891847"" range=""0.443750"" height=""1.109375"" />
						<point pos=""5.133545 3.464539 -3.982116"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-5.373779 1.508423 -4.439025"" range=""0.409375"" height=""1.023438"" />
						<point pos=""1.718750 1.730652 4.175965"" range=""0.409375"" height=""1.023438"" />
						<point pos=""3.496094 1.730652 3.489136"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""-2.384521 1.730652 2.166809"" range=""0.375000"" height=""0.937500"" flags=""16"" />
				</container>
				<dispatch dechance=""1.000000"">
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""-6.007690 0.462393 0.721314"" rpy=""-90.000000 75.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_556x45Tracer_20Rnd"" pos=""-5.702758 0.462393 1.043152"" rpy=""-90.000000 120.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""-5.691162 0.472393 0.777710"" rpy=""-90.000000 140.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_556x45Tracer_20Rnd"" pos=""-5.360474 0.462393 1.084412"" rpy=""-90.000000 160.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""-4.808838 0.462393 0.866942"" rpy=""-90.000000 200.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""-5.215454 0.472393 0.595460"" rpy=""-90.000000 240.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""-5.484498 0.462393 0.483703"" rpy=""-90.000000 260.000000 0.000000"" dechance=""0.125"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""-6.085205 0.479429 0.476014"" rpy=""-90.000000 280.000000 0.000000"" dechance=""0.125"" />
				</dispatch>
				<dispatch dechance=""1.000000"">
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""2.495239 0.867300 1.328369"" rpy=""90.000000 35.000000 0.000000"" dechance=""0.16"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""2.972656 1.194336 1.125428"" rpy=""90.000000 70.000000 0.000000"" dechance=""0.16"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""3.318970 1.194336 1.115418"" rpy=""90.000000 105.000000 0.000000"" dechance=""0.16"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""3.888550 1.214336 1.360290"" rpy=""-90.000000 175.000000 0.000000"" dechance=""0.16"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""2.504150 1.194336 0.624817"" rpy=""90.000000 315.000000 0.000000"" dechance=""0.16"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""2.453003 1.25336 0.897278"" rpy=""-90.000000 350.000000 0.000000"" dechance=""0.16"" />
				</dispatch>
				<dispatch dechance=""1.000000"">
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""1.041016 1.220266 -1.645569"" rpy=""-90.000000 40.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""1.067627 1.210266 -1.915344"" rpy=""-90.000000 80.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_556x45Tracer_20Rnd"" pos=""0.825684 1.210266 -1.984741"" rpy=""-90.000000 100.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""0.639038 1.220266 -1.525635"" rpy=""-90.000000 120.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""0.457642 1.210266 -1.697876"" rpy=""-90.000000 140.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""-0.028321 1.220266 -1.69494"" rpy=""-90.000000 240.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""0.420655 1.220266 -2.055237"" rpy=""-90.000000 260.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_556x45Tracer_20Rnd"" pos=""0.547973 1.210266 -1.955444"" rpy=""-90.000000 280.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""0.842163 1.220266 -1.526062"" rpy=""-90.000000 20.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""0.802002 1.210266 -1.736084"" rpy=""-90.000000 40.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_762x54Tracer_20Rnd"" pos=""-0.207519 1.220266 -1.86840"" rpy=""-90.000000 60.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""-0.377198 1.220266 -1.62683"" rpy=""-90.000000 80.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""-0.362549 1.220266 -1.49017"" rpy=""-90.000000 100.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_9x39AP_20Rnd"" pos=""-0.202758 1.210266 -1.44458"" rpy=""-90.000000 120.000000 0.000000"" dechance=""0.066"" />
						<proxy type=""AmmoBox_762x39Tracer_20Rnd"" pos=""-0.042846 1.220266 -1.40679"" rpy=""-90.000000 140.000000 0.000000"" dechance=""0.066"" />
				</dispatch>
		</group>
		<group name=""Land_Underground_Storage_Hospital"" lootmax=""10"">
				<usage name=""Military"" />
				<usage name=""Underground"" />
				<usage name=""Medic"" />
				<value name=""Tier2"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""tools"" />
						<category name=""clothes"" />
						<point pos=""9.824950 0.859985 -3.071290"" range=""0.100000"" height=""0.250000"" />
						<point pos=""9.788695 0.859985 -2.134279"" range=""0.134375"" height=""0.264999"" />
						<point pos=""9.776732 0.479980 -1.469240"" range=""0.134375"" height=""0.264999"" />
						<point pos=""2.693604 1.016541 -5.583252"" range=""0.168750"" height=""0.421875"" />
						<point pos=""3.765992 0.726563 2.984618"" range=""0.203125"" height=""0.507813"" />
						<point pos=""4.853882 0.726563 3.060790"" range=""0.203125"" height=""0.507813"" />
						<point pos=""-2.770873 0.718506 -4.040528"" range=""0.203125"" height=""0.507813"" />
						<point pos=""-1.859009 0.718506 -4.050538"" range=""0.203125"" height=""0.507813"" />
						<point pos=""2.602904 0.726563 -4.945069"" range=""0.203125"" height=""0.507813"" />
						<point pos=""3.982056 1.016541 2.527099"" range=""0.203125"" height=""0.507813"" />
						<point pos=""6.832763 0.726563 -4.136719"" range=""0.203125"" height=""0.507813"" />
						<point pos=""3.778198 1.016541 2.046631"" range=""0.237500"" height=""0.593750"" />
						<point pos=""2.118286 0.726563 -0.053223"" range=""0.239895"" height=""0.679688"" />
						<point pos=""2.544068 0.726563 -0.337158"" range=""0.271875"" height=""0.679688"" />
						<point pos=""9.452024 1.023865 0.730224"" range=""0.306250"" height=""0.765625"" />
						<point pos=""9.589478 1.023865 -0.020021"" range=""0.306250"" height=""0.765625"" />
						<point pos=""-5.735474 1.023865 -2.918945"" range=""0.340625"" height=""0.851563"" />
						<point pos=""-5.687743 1.023865 -3.857178"" range=""0.340625"" height=""0.851563"" />
						<point pos=""-9.338135 1.023865 -3.173584"" range=""0.375000"" height=""0.937500"" />
						<point pos=""-9.319457 1.023865 -2.179445"" range=""0.375000"" height=""0.937500"" />
				</container>
		</group>
		<group name=""Land_Underground_Storage_Laboratory"" lootmax=""10"">
				<usage name=""Military"" />
				<usage name=""Underground"" />
				<usage name=""Medic"" />
				<value name=""Tier2"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""tools"" />
						<category name=""clothes"" />
						<point pos=""-1.534424 0.849976 -0.304383"" range=""0.306250"" height=""0.765625"" flags=""16"" />
						<point pos=""-0.645264 0.849976 -0.289978"" range=""0.443750"" height=""1.109375"" flags=""16"" />
						<point pos=""0.729126 0.849976 -0.325195"" range=""0.409375"" height=""1.023438"" flags=""16"" />
						<point pos=""0.990723 0.849976 0.544983"" range=""0.237500"" height=""0.593750"" flags=""16"" />
						<point pos=""-1.387940 0.849976 0.530945"" range=""0.271875"" height=""0.679688"" flags=""16"" />
						<point pos=""-1.910401 0.849976 0.504028"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""-2.525392 0.849976 -3.331299"" range=""0.340625"" height=""0.851563"" flags=""16"" />
						<point pos=""-0.706787 0.859985 -3.506714"" range=""0.134375"" height=""0.265015"" flags=""16"" />
						<point pos=""0.384034 0.859985 -3.523438"" range=""0.156738"" height=""0.265015"" flags=""16"" />
						<point pos=""-0.273071 1.239990 -3.481140"" range=""0.100000"" height=""0.250000"" flags=""16"" />
						<point pos=""4.032592 1.023865 -2.541138"" range=""0.276855"" height=""0.692139"" flags=""16"" />
						<point pos=""4.031250 1.023865 -3.122559"" range=""0.283813"" height=""0.709534"" flags=""16"" />
						<point pos=""4.017334 1.023865 -3.702515"" range=""0.296309"" height=""0.758362"" flags=""16"" />
						<point pos=""3.994141 1.437866 -1.258606"" range=""0.237500"" height=""0.593750"" flags=""16"" />
						<point pos=""-2.657348 1.023865 3.791320"" range=""0.334351"" height=""0.835876"" flags=""16"" />
						<point pos=""-3.345702 1.023865 3.762024"" range=""0.341614"" height=""0.854034"" flags=""16"" />
				</container>
				<dispatch dechance=""1.000000"">
						<proxy type=""Ammo_40mm_ChemGas"" pos=""-4.303712 0.907471 3.644958"" rpy=""0.000000 0.000000 0.000000"" dechance=""1.0"" />
				</dispatch>
		</group>
		<group name=""Land_Underground_WaterMaintenance"" lootmax=""10"">
				<usage name=""Industrial"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""tools"" />
						<category name=""containers"" />
						<tag name=""floor"" />
						<tag name=""ground"" />
						<point pos=""-5.518433 0.880005 -4.856628"" range=""0.271875"" height=""0.679688"" />
						<point pos=""-1.832886 0.927704 0.083557"" range=""0.382684"" height=""1.023438"" />
						<point pos=""-1.829590 0.927704 -1.278686"" range=""0.409375"" height=""1.023438"" />
						<point pos=""-5.385986 0.879700 -4.307982"" range=""0.134375"" height=""0.335938"" />
						<point pos=""-1.809936 0.927612 -5.396789"" range=""0.375000"" height=""0.937500"" flags=""16"" />
						<point pos=""-1.851930 0.927612 -6.073730"" range=""0.303242"" height=""0.864136"" flags=""16"" />
						<point pos=""-5.420656 0.960114 -6.768674"" range=""0.237500"" height=""0.593750"" />
						<point pos=""-5.576906 0.962830 -5.566283"" range=""0.168750"" height=""0.421875"" />
						<point pos=""-5.325073 1.584381 0.260011"" range=""0.237500"" height=""0.295013"" />
						<point pos=""-5.392701 1.084381 0.348389"" range=""0.237500"" height=""0.369995"" />
						<point pos=""-5.330444 0.584381 0.335145"" range=""0.266535"" height=""0.369995"" />
						<point pos=""-5.246704 0.084381 0.317993"" range=""0.168750"" height=""0.369995"" />
						<point pos=""-4.149292 0.083557 1.314271"" range=""0.271875"" height=""0.369995"" />
						<point pos=""-4.480347 0.583557 1.349976"" range=""0.271875"" height=""0.369995"" />
						<point pos=""-3.902344 0.583557 1.306946"" range=""0.237500"" height=""0.369995"" />
						<point pos=""-3.935425 1.083557 1.349550"" range=""0.265401"" height=""0.369995"" />
						<point pos=""-4.371338 1.583557 1.261109"" range=""0.203125"" height=""0.295013"" />
				</container>
		</group>
		<group name=""Land_Underground_Storage_Prison"" lootmax=""10"">
				<usage name=""Military"" />
				<usage name=""Underground"" />
				<value name=""Tier2"" />
				<container name=""lootFloor"" lootmax=""10"">
						<category name=""containers"" />
						<category name=""clothes"" />
						<category name=""weapons"" />
						<point pos=""-8.146852 0.822632 -1.845703"" range=""0.443750"" height=""1.109375"" />
						<point pos=""-7.579469 0.822693 -2.625608"" range=""0.478125"" height=""1.195313"" />
						<point pos=""-6.110841 0.012756 4.344727"" range=""0.489319"" height=""1.223297"" />
						<point pos=""-6.209961 0.012756 -4.573730"" range=""0.518555"" height=""1.296387"" />
						<point pos=""-1.249024 0.012756 2.444031"" range=""0.535156"" height=""1.337891"" />
						<point pos=""5.486450 0.012756 -3.334838"" range=""0.590048"" height=""1.997986"" />
						<point pos=""0.389771 0.012756 4.212341"" range=""0.621704"" height=""1.554260"" />
						<point pos=""0.296509 0.012756 2.569458"" range=""0.697937"" height=""1.744812"" />
						<point pos=""5.454102 0.012756 2.626893"" range=""0.755371"" height=""1.888428"" />
						<point pos=""0.383546 0.012756 -4.294860"" range=""0.757446"" height=""1.893615"" />
						<point pos=""-4.626466 0.012756 -2.924560"" range=""0.783508"" height=""1.958771"" />
						<point pos=""4.133179 0.012756 -3.040222"" range=""0.794922"" height=""1.987305"" />
						<point pos=""4.276733 0.012756 3.959411"" range=""0.874634"" height=""2.000000"" />
						<point pos=""-0.868164 0.012756 -3.136535"" range=""0.938232"" height=""2.000000"" />
						<point pos=""-5.419433 0.012756 2.763063"" range=""1.190776"" height=""2.000000"" />
				</container>
				<dispatch dechance=""1.000000"">
						<proxy type=""AK101"" pos=""2.166992 0.012756 3.037353"" rpy=""90.000000 90.000000 0.000000"" dechance=""0.25"" />
						<proxy type=""AK101"" pos=""6.482910 0.012756 -0.18048"" rpy=""90.000000 90.000000 0.000000"" dechance=""0.25"" />
						<proxy type=""AK101"" pos=""2.447632 0.012756 -0.02749"" rpy=""90.000000 0.000000 0.000000"" dechance=""0.25"" />
						<proxy type=""AK101"" pos=""-1.808472 0.012756 -0.1717"" rpy=""90.000000 110.000000 0.000000"" dechance=""0.25"" />
				</dispatch>
				<dispatch dechance=""1.000000"">
						<proxy type=""PlateCarrierVest_Green"" pos=""-2.901246 0.012756 3.09815"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.2"" />
						<proxy type=""PlateCarrierVest_Black"" pos=""-2.796021 0.012756 -3.1388"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.2"" />
						<proxy type=""PlateCarrierVest_Green"" pos=""2.291627 0.012756 -3.21477"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.2"" />
						<proxy type=""PlateCarrierVest_Black"" pos=""-4.811768 0.012756 -0.1574"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.2"" />
						<proxy type=""PlateCarrierVest_Green"" pos=""-8.244873 0.012756 -0.5780"" rpy=""0.000000 0.000000 0.000000"" dechance=""0.2"" />
				</dispatch>
		</group>
		<group name=""Land_Underground_Storage_POX2"" lootmax=""10"">
				<usage name=""Military"" />
				<usage name=""Underground"" />
				<value name=""Tier3"" />
				<container name=""lootWeapons"" lootmax=""10"">
						<category name=""weapons"" />
						<category name=""explosives"" />
						<point pos=""-4.917115 1.119415 -3.873595"" range=""0.168750"" height=""0.421875"" flags=""16"" />
						<point pos=""-1.781128 0.399780 -1.886596"" range=""0.340625"" height=""0.851563"" flags=""16"" />
						<point pos=""-0.048950 0.942383 -0.002075"" range=""0.409361"" height=""1.023438"" flags=""16"" />
						<point pos=""0.050171 0.942383 0.637146"" range=""0.237500"" height=""0.593750"" flags=""16"" />
						<point pos=""2.546143 0.775879 -6.100707"" range=""0.317505"" height=""0.793762"" flags=""16"" />
						<point pos=""7.146119 0.705902 -3.099121"" range=""0.112549"" height=""0.281372"" flags=""16"" />
						<point pos=""0.117309 0.596039 -3.258484"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""7.464966 1.098389 -0.599304"" range=""0.340625"" height=""0.851563"" flags=""16"" />
						<point pos=""-4.749024 1.119415 -4.627258"" range=""0.375000"" height=""0.937500"" flags=""16"" />
						<point pos=""1.851808 0.775879 -6.075317"" range=""0.375000"" height=""0.937500"" flags=""16"" />
						<point pos=""5.302125 0.775879 -6.033689"" range=""0.386475"" height=""0.966186"" flags=""16"" />
						<point pos=""-2.102295 0.399780 -0.790222"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""0.046875 0.596039 -3.918274"" range=""0.409375"" height=""1.023438"" flags=""16"" />
						<point pos=""5.696045 0.970001 -4.500915"" range=""0.271875"" height=""0.679688"" flags=""16"" />
						<point pos=""7.465333 1.119415 -3.616943"" range=""0.203125"" height=""0.507813"" flags=""16"" />
						<point pos=""8.635254 0.947693 2.785095"" range=""0.306250"" height=""0.765625"" flags=""16"" />
						<point pos=""-2.552856 0.139709 -1.866150"" flags=""16"" />
				</container>
				<dispatch dechance=""1.000000"">
						<proxy type=""Mich2001Helmet"" pos=""-17.787476 0.658417 -2.219725"" rpy=""0.000000 -260.000000 0.000000"" dechance=""0.500000"" />
						<proxy type=""Mich2001Helmet"" pos=""-18.421021 0.658417 -2.406675"" rpy=""0.000000 -290.000000 0.000000"" dechance=""0.500000"" />
				</dispatch>
				<dispatch dechance=""1.000000"">
						<proxy type=""Aug"" pos=""-12.238892 0.623566 3.656677"" rpy=""90.000000 -539.999939 0.000000"" dechance=""1.000000"" />
				</dispatch>
				<dispatch dechance=""1.000000"">
						<proxy type=""Grenade_ChemGas"" pos=""0.450073 0.468536 -3.458923"" rpy=""0.000000 -179.999985 0.000000"" dechance=""0.250000"" />
						<proxy type=""Grenade_ChemGas"" pos=""0.506837 0.468536 -3.274597"" rpy=""0.000000 -179.999985 0.000000"" dechance=""0.250000"" />
						<proxy type=""Grenade_ChemGas"" pos=""-2.398194 0.272278 -2.031432"" rpy=""0.000000 -179.999985 0.000000"" dechance=""0.250000"" />
						<proxy type=""Grenade_ChemGas"" pos=""-2.340942 0.272278 -1.834350"" rpy=""0.000000 -179.999985 0.000000"" dechance=""0.250000"" />
				</dispatch>
		</group>
"
NKKqjn6m,elevator Floor,GrimReapaa420,Lua,Friday 7th of July 2023 09:53:53 AM CDT,"-- Peripheral names
local monitorSide = ""top""
local modemSide = ""right""
local scale = 1
-- RedNet protocol
local protocol = ""elevator""

-- Initialize modem
rednet.open(modemSide)

-- Initialize monitor
local monitor = peripheral.wrap(monitorSide)
monitor.setTextScale(scale)
monitor.clear()

-- Draw buttons
monitor.setCursorPos(1, 1)
monitor.write(""Dach"")
monitor.setCursorPos(1, 3)
monitor.write(""Technik"")
monitor.setCursorPos(1, 5)
monitor.write(""Eingang"")

-- Main function
while true do
    local event, side, x, y = os.pullEvent(""monitor_touch"")
    if y == 1 then
        rednet.broadcast(""dach"", protocol)
    elseif y == 3 then
        rednet.broadcast(""technik"", protocol)
    elseif y == 5 then
        rednet.broadcast(""eingang"", protocol)
    end
end
"
b1rMKxHv,hole new no fuel,Whitebadger,Lua,Friday 7th of July 2023 09:48:18 AM CDT,"--define variables
fuelint = 0
holevol = 0
xdist = 0
zdist = 0
fuelint2 = false
--Download refuel
--shell.run(""pastebin"",""get"",""TAxr510V"",""refuel"")
--get x value
print(""Enter forward value."")
local x = read()
--get y value
print(""Enter vertical value."")
local y = read()
--get z value
print(""Enter horizontal right value. (even number)"")
local z  = read()
--bunch of math to calculate what were digging
xdist = x-1
zdist = math.ceil(z/2)
holevol = x*y*z   
print(""Digging ""..holevol.."" blocks!"")
--digging the hole
for i = 1,y do
	turtle.digDown()
	turtle.down()
	for h = 1,zdist do
		for j = 1,xdist do
			turtle.dig()
			turtle.forward()
		end
		turtle.turnRight()
		turtle.dig()
		turtle.forward()
		turtle.turnRight()
		for j = 1,xdist do
			turtle.dig()
			turtle.forward()
		end
		if h ~= zdist then
			turtle.turnLeft()
			turtle.dig()
			turtle.forward()
			turtle.turnLeft()
		end
	end
turtle.turnRight()
for k = 1,zdist do
	turtle.forward()
end
turtle.turnRight()
end"
kGxwQZnP,moguys,Damonwei,JSON,Friday 7th of July 2023 08:54:13 AM CDT,"{
""author"":""Dwei-0706"",
""ua"": ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36"",
""homeUrl"": ""https://moguys.xyz/"",
""cateManual"": {""国产剧"": ""13"",""台剧"": ""20"",""韩剧"": ""14"",""美剧"": ""15"",""电视剧"": ""2"",""电影"": ""1"",""动漫"": ""3"",""综艺"": ""4""},
""homeVodNode"": ""//div[@class='module-item']"",
""homeVodName"": ""/div[1]/div[1]/a/@title"",
""homeVodId"": ""/div[1]/div[1]/a/@href"",
""homeVodIdR"": """",
""homeVodImg"": ""/div[1]/div[1]/img/@data-src"",
""homeVodImgR"": """",
""homeVodMark"": ""/div[3]/text()"",
""cateUrl"": ""https://moguys.xyz/vodshow/{cateId}--------{catePg}---.html"",
""cateVodNode"": ""//div[@class='module-item']"",
""cateVodName"": ""/div[1]/div[1]/a/@title"",
""cateVodId"": ""/div[1]/div[1]/a/@href"",
""cateVodIdR"": """",
""cateVodImg"": ""/div[1]/div[1]/img/@data-src"",
""cateVodImgR"": """",
""cateVodMark"": ""/div[3]/text()"",
""dtUrl"":""https://moguys.xyz{vid}"",
""dtNode"": ""//body"",
""dtName"": ""//h1/text()"",
""dtNameR"": """",
""dtImg"": ""//div[@class='video-cover']//img/@data-src"",
""dtImgR"": ""\\S+(http\\S+)"",
""dtCate"": ""concat(//div[@class='scroll-box']/div/div/a/text())"",
""dtCateR"": """",
""dtYear"": ""//div[@class='scroll-box']/div/a[2]/text()"",
""dtYearR"": """",
""dtArea"": ""//div[@class='scroll-box']/div/a[3]/text()"",
""dtAreaR"": """",
""dtMark"": """",
""dtMarkR"": """",
""dtDirector"": ""//div[@class='video-info-items'][1]/div/a/text()"",
""dtDirectorR"": """",
""dtActor"": ""concat(//div[@class='video-info-items'][2]/div/a/text())"",
""dtActorR"": """",
""dtDesc"": ""concat('Dwei观影提示：资源加载时间过长可尝试切换不同线路资源，也可点击快速搜索切换其他站点观看！！简介：',//div[@class='video-info-items'][4]/div/text(),//div[@class='video-info-items'][8]/div/a/text())"",
""dtFromNode"": ""//div[contains(@class,'module-player-tab')]//div[@class='module-tab-content']/div"",
""dtFromName"":  ""concat(/span/text(),'☞',/small/text())"",
""dtFromNameR"": """",
""dtUrlNode"": ""//div[contains(@id,'glist')]//div[@class='scroll-content']"",
""dtUrlSubNode"": ""/a"",
""dtUrlId"": ""/@href"",
""dtUrlIdR"": """",
""dtUrlName"": ""/span/text()"",
""dtUrlNameR"": """",
""playUrl"":""https://moguys.xyz{playUrl}"",
""searchUrl"":""https://moguys.xyz/vodsearch/-------------.html?wd={wd}"",
""scVodNode"":""//div[@class='module-search-item']"",
""scVodName"":""//h3/a/text()"",
""scVodId"":""//h3/a/@href"",
""scVodImg"":""//img/@data-src"",
""scVodImgR"":"""",
""scVodMark"":""/div[2]/div[1]/a/text()""
}"
6YWK9f0N,Untitled,veritas2022,JavaScript,Friday 7th of July 2023 08:47:53 AM CDT,"function createAssemblyLine() {
    return {
hasClima(myCar) {
    myCar.temp = 21;
    myCar.tempSettings = 21;
    myCar.adjustTemp = () => {
       myCar.temp < myCar.tempSettings ? myCar.temp++ : myCar.temp--
  };
},
hasAudio(myCar){
    myCar.currentTrack = null;
    myCar.nowPlaying = () => {
        // if(myCar.currentTrack != null && myCar.currentTrack != undefined){
        console.log(`Now playing '${myCar.currentTrack.name}' by ${myCar.currentTrack.artist}`)
    // }
}
},
hasParktronic(myCar){
        myCar.checkDistance = (distance) => {
if(distance < 0.1){
    console.log(""Beep! Beep! Beep!"");
}else if(distance >= 0.1 && distance < 0.25){
    console.log(""Beep! Beep!"");
}else if(distance>= 0.25 && distance < 0.5){
    console.log(""Beep!"");
}else{
    console.log('')
}
}
}
}};"
99b0mTpj,Untitled,veritas2022,JavaScript,Friday 7th of July 2023 08:46:54 AM CDT,"function createAssemblyLine() {
    return {
hasClima(myCar) {
    myCar.temp = 21;
    myCar.tempSettings = 21;
    myCar.adjustTemp = () => {
        // if (myCar.temp < myCar.tempSettings) {
        //     myCar.temp++;
        // }else if(myCar.temp > myCar.tempSettings){
        //     myCar.temp--;
        // }
       myCar.temp < myCar.tempSettings ? myCar.temp++ : myCar.temp--
  };
},
hasAudio(myCar){
    myCar.currentTrack = null;
    myCar.nowPlaying = () => {
        // if(myCar.currentTrack != null && myCar.currentTrack != undefined){
        console.log(`Now playing '${myCar.currentTrack.name}' by ${myCar.currentTrack.artist}`)
    // }
}
},
hasParktronic(myCar){
        myCar.checkDistance = (distance) => {
if(distance < 0.1){
    console.log(""Beep! Beep! Beep!"");
}else if(distance >= 0.1 && distance < 0.25){
    console.log(""Beep! Beep!"");
}else if(distance>= 0.25 && distance < 0.5){
    console.log(""Beep!"");
}else{
    console.log('')
}
}
}
}};function createAssemblyLine() {
    return {
hasClima(myCar) {
    myCar.temp = 21;
    myCar.tempSettings = 21;
    myCar.adjustTemp = () => {
        // if (myCar.temp < myCar.tempSettings) {
        //     myCar.temp++;
        // }else if(myCar.temp > myCar.tempSettings){
        //     myCar.temp--;
        // }
       myCar.temp < myCar.tempSettings ? myCar.temp++ : myCar.temp--
  };
},
hasAudio(myCar){
    myCar.currentTrack = null;
    myCar.nowPlaying = () => {
        // if(myCar.currentTrack != null && myCar.currentTrack != undefined){
        console.log(`Now playing '${myCar.currentTrack.name}' by ${myCar.currentTrack.artist}`)
    // }
}
},
hasParktronic(myCar){
        myCar.checkDistance = (distance) => {
if(distance < 0.1){
    console.log(""Beep! Beep! Beep!"");
}else if(distance >= 0.1 && distance < 0.25){
    console.log(""Beep! Beep!"");
}else if(distance>= 0.25 && distance < 0.5){
    console.log(""Beep!"");
}else{
    console.log('')
}
}
}
}};"
M0qpkwsq,CFrame Walkspeed | TESTING,BloxScript_Hub,Lua,Friday 7th of July 2023 08:29:13 AM CDT,"local WALK_SPEED = 185 -- Adjust the walk speed as desired

local character = script.Parent
if not character or not character:IsA(""Model"") or not character:FindFirstChild(""Humanoid"") then
	return
end

-- Variables
local userInputService = game:GetService(""UserInputService"")
local moveDirection = Vector3.new()

-- Function to handle the user input
local function handleInput(input, isKeyDown)
	if input.KeyCode == Enum.KeyCode.W then
		moveDirection = Vector3.new(0, 0, -1)
	elseif input.KeyCode == Enum.KeyCode.A then
		moveDirection = Vector3.new(-1, 0, 0)
	elseif input.KeyCode == Enum.KeyCode.S then
		moveDirection = Vector3.new(0, 0, 1)
	elseif input.KeyCode == Enum.KeyCode.D then
		moveDirection = Vector3.new(1, 0, 0)
	end

	character.Humanoid.WalkSpeed = isKeyDown and WALK_SPEED or 0

	character.Humanoid:MoveTo(character.HumanoidRootPart.Position + moveDirection)
end

userInputService.InputBegan:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.W or input.KeyCode == Enum.KeyCode.A or
		input.KeyCode == Enum.KeyCode.S or input.KeyCode == Enum.KeyCode.D then
		handleInput(input, true)
	end
end)

userInputService.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.W or input.KeyCode == Enum.KeyCode.A or
		input.KeyCode == Enum.KeyCode.S or input.KeyCode == Enum.KeyCode.D then
		handleInput(input, false)
	end
end)
"
1h9eanjK,TEST,Savelyev_Vyacheslav,JavaScript,Friday 7th of July 2023 08:10:51 AM CDT,"/**
* Написать функцию sostavChisla(massivChisel: number[], chislo: number), 
  которая бы находила все возможные комбинации чисел из massivChisel, 
  сумма которых равна chislo. При этом:
  1) massivChisel содержит, только уникальные положительные числа (> 0)
  2) в комбинации не должно быть повторений чисел
  3) все комбинации должны быть уникальными
  
  Для проверки работоспособности функции запустить runTests()
  
  @param massivChisel: number[]
  @param chislo: number[]
  @return Array<Array<number>>
*/


massivChisel = [1, 2, 3, 4];
function permutation(massivChisel) {
    if (massivChisel.length > 1) {
        var firstElement = massivChisel[0];
        var returnedArray = permutation(massivChisel.slice(1));
        var permutedArray = [];
        var temporaryArray = [];
        elementLength = returnedArray[0].length;
        for (var i = 0; i < returnedArray.length; i++)
            for (var j = 0; j <= elementLength; j++) {
                temporaryArray = returnedArray[i].slice(0);
                temporaryArray.splice(j, 0, firstElement);
                permutedArray.push(temporaryArray);
            }
        return permutedArray;
    } else {
        return [massivChisel];
    }
}


function getArrayByConditionSUM(massivChisel, NUM) {
    retArray = '';
    while (massivChisel.length) {
        if ( massivChisel.reduce((partialSum, a) => partialSum + a, 0) === NUM ) {
            const templateArray = [...massivChisel];
            retArray += templateArray.sort().join("","") + "";""
        }
        massivChisel.pop()
    }
    return retArray;
}

massivChisel = [1,2,3,4];
NUM = 3;


function getArrayByConditionUNIQUE(massivChisel, NUM) {
    arrayS = permutation(massivChisel)
    retArray = '';
    arrayS.forEach(element => {  retArray += getArrayByConditionSUM(element, NUM)  });
    notUniqStringValue = retArray.slice(0, -1).split("";"");
    uniqueStringValue = [...new Set(notUniqStringValue)];
    return uniqueStringValue;
}

getArrayByConditionUNIQUE(massivChisel, NUM) "
HYJKPDtM,Untitled,naitgacem,Java,Friday 7th of July 2023 08:05:44 AM CDT,"
        if (leftNode == null && rightNode == null) {
            // has one child
            transplant(parentNode, nodeToDelete, null);

        } else if (rightNode != null && leftNode == null) {
            transplant(parentNode, nodeToDelete, rightNode);

        } else if (leftNode != null && rightNode == null) {
            transplant(parentNode, nodeToDelete, leftNode);

        } else {
            // has two children
            Node succNode = findSuccessor(nodeToDelete);
            if (succNode == nodeToDelete.rightNode) {
                succNode.leftNode = nodeToDelete.leftNode;
                transplant(parentNode, nodeToDelete, succNode);

            } else {
                succNode.parentNode.leftNode = succNode.leftNode;
                nodeToDelete.data = succNode.data;
            }
        }
        return;
    }

    private void transplant(Node parent, Node nodeToDelete, Node value) {
        if (parent.rightNode == nodeToDelete) {
            parent.rightNode = value;
        } else {
            parent.leftNode = value;
        }
        return;
    }
"
RYgx5mvb,Untitled,Derga,C++,Friday 7th of July 2023 07:56:10 AM CDT,"#include <iostream>
#include <queue>
#include <cstdint>
#include <set>
#include <string>
#include <tuple>
#include <vector>

using namespace std;

struct Datacenter {
    int reboots_count = 0;
    vector<bool> is_server_enable;
    vector<int> disabled_servers_idxs;
    Datacenter(int servers_count) : is_server_enable(servers_count + 1, true) {}
};

/*
//подумать, как использовать одну структуру и два разных компаратора. Наследование?
    struct ScoreMax {
        int64_t score;
        int idx;
        int reboots_count;
    };

    struct ScoreMin {
        int64_t score;
        int idx;
        int reboots_count;
    };

    bool operator < (const ScoreMax& lhs, const ScoreMax& rhs) {
        if (lhs.score != rhs.score) {
            return lhs.score > rhs.score;
        }
        return lhs.idx < rhs.idx;
    }

    bool operator < (const ScoreMin& lhs, const ScoreMin& rhs) {
        return tie(lhs.score, lhs.idx) < tie(rhs.score, rhs.idx);
    }

void Solution1(int datacenters_count, int servers_count, int requests_count) {
    vector<Datacenter> datacenters(datacenters_count + 1, Datacenter(servers_count));

    set<MaxScoreIdx> max_idx;
    set<MinScoreIdx> min_idx;
    for (int i = 1; i <= datacenters_count; i++) {
        max_idx.insert({ 0, i });
        min_idx.insert({ 0, i });
    }

    auto get_score = [&datacenters, servers_count](int idx) {
        return (int64_t)datacenters[idx].reboots_count *
            (int64_t)(servers_count - (int64_t)datacenters[idx].disabled_servers_idxs.size());
    };

    for (int i = 0; i < requests_count; ++i) {
        string operation;
        cin >> operation;
        if (operation == ""GETMAX"") {
            cout << max_idx.begin()->idx << '\n';
            continue;
        }

        if (operation == ""GETMIN"") {
            cout << min_idx.begin()->idx << '\n';
            continue;
        }

        int datacenter_idx;
        cin >> datacenter_idx;
        int64_t last_score = get_score(datacenter_idx);

        auto& datacenter = datacenters[datacenter_idx];
        if (operation == ""RESET"") {
            datacenter.reboots_count++;
            for (auto idx : datacenter.disabled_servers_idxs) {
                datacenter.is_server_enable[idx] = true;
            }
            datacenter.disabled_servers_idxs.clear();
        } else {
            int server_idx;
            cin >> server_idx;
            if (datacenter.is_server_enable[server_idx]) {
                datacenter.is_server_enable[server_idx] = false;
                datacenter.disabled_servers_idxs.push_back(server_idx);
            }
        }

        int64_t new_score = get_score(datacenter_idx);
        max_idx.erase({ last_score, datacenter_idx });
        min_idx.erase({ last_score, datacenter_idx });
        max_idx.insert({ new_score, datacenter_idx });
        min_idx.insert({ new_score, datacenter_idx });
    }
}
*/

struct ScoreIdxReboots {
    int64_t score;
    int idx;
    int reboots_count;
};

int64_t GetScore(vector<Datacenter>& datacenters, int idx) {
    const auto& datacenter = datacenters[idx];
    int servers_count = datacenter.is_server_enable.size() - 1;
    return (int64_t)datacenter.reboots_count *
        ((int64_t)servers_count - datacenter.disabled_servers_idxs.size());
}

template <typename PQ>
bool IsScoreUpToDate(vector<Datacenter>& datacenters, const PQ& scores) {
    int idx = scores.top().idx;
    return GetScore(datacenters, idx) == scores.top().score;
}

template <typename PQ>
bool IsRebootsCountUpToDate(vector<Datacenter>& datacenters, const PQ& scores) {
    int idx = scores.top().idx;
    return datacenters[idx].reboots_count == scores.top().reboots_count;
}


template <typename PQ>
void DeleteExpiredScores(vector<Datacenter>& datacenters, PQ& scores) {
    while (!IsScoreUpToDate(datacenters, scores) || !IsRebootsCountUpToDate(datacenters, scores)) {
        scores.pop();
    }
}

void Solution2(int datacenters_count, int servers_count, int requests_count) {
    vector<Datacenter> datacenters(datacenters_count + 1, Datacenter(servers_count));

    auto scores_max_cmp = [] (const auto& lhs, const auto& rhs) {
        if (lhs.score != rhs.score) {
            return lhs.score < rhs.score;
        }
        return lhs.idx > rhs.idx;
    };

    auto scores_min_cmp = [](const auto& lhs, const auto& rhs) {
        return tie(lhs.score, lhs.idx) > tie(rhs.score, rhs.idx);
    };

    priority_queue<ScoreIdxReboots,vector<ScoreIdxReboots>, decltype(scores_max_cmp)> scores_max(scores_max_cmp); //score, idx, reboots_count
    priority_queue<ScoreIdxReboots,vector<ScoreIdxReboots>, decltype(scores_min_cmp)> scores_min(scores_min_cmp); //score, idx, reboots_count
    for (int i = 1; i <= datacenters_count; i++) {
        scores_max.push({ 0, i, 0 });
        scores_min.push({ 0, i, 0 });
    }   
    
    for (int i = 0; i < requests_count; ++i) {
        string operation;
        cin >> operation;
        if (operation == ""GETMAX"") {
            DeleteExpiredScores(datacenters, scores_max);
            cout << scores_max.top().idx << '\n';
            continue;
        }

        if (operation == ""GETMIN"") {
            DeleteExpiredScores(datacenters, scores_min);
            cout << scores_min.top().idx << '\n';
            continue;
        }

        int datacenter_idx;
        cin >> datacenter_idx;
        int64_t last_score = GetScore(datacenters, datacenter_idx);

        auto& datacenter = datacenters[datacenter_idx];
        if (operation == ""RESET"") {
            datacenter.reboots_count++;
            for (auto idx : datacenter.disabled_servers_idxs) {
                datacenter.is_server_enable[idx] = true;
            }
            datacenter.disabled_servers_idxs.clear();
        } else {
            int server_idx;
            cin >> server_idx;
            if (datacenter.is_server_enable[server_idx]) {
                datacenter.is_server_enable[server_idx] = false;
                datacenter.disabled_servers_idxs.push_back(server_idx);
            }
        }
        int64_t new_score = GetScore(datacenters, datacenter_idx);
        scores_max.push({ new_score, datacenter_idx, datacenter.reboots_count });
        scores_min.push({ new_score, datacenter_idx, datacenter.reboots_count });
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int datacenters_count, servers_count, requests_count;
    cin >> datacenters_count >> servers_count >> requests_count;
    //Solution1(datacenters_count, servers_count, requests_count);
    Solution2(datacenters_count, servers_count, requests_count);
    
    return 0;
}"
HySveNjv,Bootstrap - lezione 3,fcamuso,HTML,Friday 7th of July 2023 07:52:42 AM CDT,"<!doctype html>
<html lang=""en"">

<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1, shrink-to-fit=no"">

  <!-- Bootstrap CSS v5.3.0 -->
  <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"" rel=""stylesheet"" 
        integrity=""sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"" 
        crossorigin=""anonymous"">
  <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"">
  
  <style>   
     span {display: block; width: 100px; height: 100px;} 
     a {margin: 5px;}
  </style>
</head>

<!-- <body class=""bg-black""> -->
  <div class=""h4"">
    <a href=""#"" class=""link-primary"">Primary link</a>
    <a href=""#"" class=""link-secondary"">Secondary link</a>
    <a href=""#"" class=""link-success"">Success link</a>
    <a href=""#"" class=""link-danger"">Danger link</a> <br>
    <a href=""#"" class=""link-warning"">Warning link</a> 
    <a href=""#"" class=""link-info"">Info link</a>
    <a href=""#"" class=""link-light"">Light link</a>
    <a href=""#"" class=""link-dark"">Dark link</a>
    <a href=""#"" class=""link-body-emphasis"">Emphasis link</a>
  </div>
  <br>
 
  <a class=""icon-link link-danger h3""  href=""#"">
     
    <img class=""bi"" src=""torta.svg"">
    Link con icona
    <i class=""bi bi-house""></i>      
  </a>
  
  <br><br>
  <span class=""border-5 border-danger ms-2 border-start border-end border-opacity-50""></span>
  <br><br>
  <span class=""border border-5 border-danger ms-2 rounded-bottom""></span>
  <br><br>
  <div class=""bg-danger text-light w-25 opacity-50 text-end""> lasjfdljsfd <br> ljksadfj <br> lsfd </div>

  <div class=""bg-success text-capitalize fs-3 w-25""> lsdfljdsfl <br> ljksadfj <br> lsfd </div>
  
  <p class=""fw-bold"">Bold text.</p>
  <p class=""fw-medium"">Medium weight text.</p>
  <p class=""fw-light"">Light weight text.</p>
  <p class=""fst-italic"">Italic text.</p>
  
  

  <!-- Bootstrap JavaScript Libraries -->
  <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"" 
          integrity=""sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"" 
          crossorigin=""anonymous""></script>  
  
</body>

</html>"
P9Wk76TQ,PanAndZoomComponent,P1ayer4312,JavaScript,Friday 7th of July 2023 07:34:16 AM CDT,"import React from ""react"";
import { TransformWrapper, TransformComponent } from ""react-zoom-pan-pinch"";

const PanningInteractionHandler = (instance, state) => {
  if (state?.positionX >= 0 && state?.positionY >= 0 && state?.scale <= 1) {
    instance.setup.panning.disabled = true;
  } else {
    instance.setup.panning.disabled = false;
  }
};

export default function PanAndZoomComponent(props) {
  return (
    <TransformWrapper
      centerOnInit={true}
      centerZoomedOut={true}
      onZoomStop={(ref) => {
        PanningInteractionHandler(ref.instance, ref.state);
      }}
      onPanning={(ref) => {
        PanningInteractionHandler(ref.instance, ref.state);
      }}
      onInit={(ref) => {
        ref.instance.setup.panning.disabled = true;
      }}
    >
      {({ zoomIn, zoomOut, resetTransform, centerView, instance, state }) => (
        <div>
          <TransformComponent contentStyle={{ width: ""100%"" }}>
            <img />
          </TransformComponent>
          <div>
            <button
              onClick={() => {
                zoomIn();
                instance.setup.panning.disabled = false;
              }}
            >
              <img src={zoomInIcon} alt=""Zoom In Icon"" width={25} height={25} />
            </button>
            <button
              onClick={() => {
                zoomOut();
                PanningInteractionHandler(instance, state);
              }}
            >
              <img
                src={zoomOutIcon}
                alt=""Zoom Out Icon""
                width={25}
                height={25}
              />
            </button>
            <button
              onClick={() => {
                resetTransform();
                instance.setup.panning.disabled = true;
              }}
            >
              <img src={resetIcon} alt=""Reset Icon"" width={25} height={25} />
            </button>
            <button onClick={() => centerView()}>
              <img src={centerIcon} alt=""Center Icon"" width={25} height={25} />
            </button>
          </div>
        </div>
      )}
    </TransformWrapper>
  );
}
"
9VRjPbXx,Untitled,cepxuozab,C++,Friday 7th of July 2023 07:33:54 AM CDT,"35
ADD 31 Jan_31_1
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
ADD 31 Dec_31
NEXT
ADD 31 Jan_31_2
DUMP 31
NEXT
DUMP 28
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
NEXT
DUMP 28
DUMP 30
DUMP 31
NEXT
DUMP 28"
EFiDW7b7,Auto raid script,Oopss-Soryy,Lua,Friday 7th of July 2023 07:10:24 AM CDT,"local Lib = loadstring(game:HttpGet(""https://raw.githubusercontent.com/7yhx/kwargs_Ui_Library/main/source.lua""))()

local UI = Lib:Create{
	Theme = ""Dark"", -- or any other theme
	Size = UDim2.new(0, 400, 0, 350) -- default
}

local Main = UI:Tab{
	Name = ""AUTO RAID""
}

local Divider = Main:Divider{
	Name = ""SETTINGS""
}

local QuitDivider = Main:Divider{
	Name = ""START""
}

Divider:Toggle{
	Name = ""AutoBuy"",
	Description = ""Auto buy	buttons in your tycoon after raids"",
	State = false,
	Callback = function(State)
		_G.AutoBuy = State
	end
}

Divider:Toggle{
	Name = ""AutoRebirth"",
	Description = ""Auto rebirth after raids"",
	State = false,
	Callback = function(State)
		_G.AutoRebirth = State
	end
}

Divider:Toggle{
	Name = ""AutoRareCard"",
	Description = ""Auto buy rare cards after raids"",
	State = false,
	Callback = function(State)
		_G.AutoRareCard = State
	end
}

Divider:Toggle{
	Name = ""AutoSpin"",
	Description = ""Auto free spin"",
	State = false,
	Callback = function(State)
		_G.AutoSpin = State
	end
}

Divider:Toggle{
	Name = ""AntiAfkKick"",
	Description = ""Anti afk kick"",
	State = true,
	Callback = function(State)
		_G.AntiAfkKick = State
	end
}
_G.AntiAfkKick = true

Divider:Toggle{
	Name = ""AntiBug"",
	Description = ""Restart script if player idle on server 10 minutes"",
	State = true,
	Callback = function(State)
		_G.AntiBug = State
	end
}
_G.AntiBug = true

Divider:Toggle{
	Name = ""SaveCPU"",
	Description = ""Set max fps to 15"",
	State = false,
	Callback = function(State)
		_G.SaveCPU = State
	end
}

Divider:Toggle{
	Name = ""ServerHop"",
	Description = ""Automatly server hop after auto raid"",
	State = true,
	Callback = function(State)
		_G.ServerHop = State
	end
}
_G.ServerHop = true

local Quit = QuitDivider:Button{
	Name = ""Start Auto Raid"",
	Callback = function()
		loadstring(game:HttpGet('https://oopshub.vercel.app/scripts/MilitaryTycoon_ARS.lua'))()
		UI:Quit{
			Message = ""Starting..."", -- closing message
			Length = 1 -- seconds the closing message shows for
		}
	end
}"
eQGn1EY9,SysSounds.py,dogs_are_cute,Python,Friday 7th of July 2023 06:52:00 AM CDT,"from typing import Iterator, Optional
from os.path import normpath
import platform


def iter_subkeys(key_handle: ""PyHKEY"") -> Iterator[str]:
    index = 0
    while True:
        try:
            yield winreg.EnumKey(key_handle, index)
        except OSError:
            break
        else:
            index += 1


def init_proc() -> Optional[""PyHKEY""]:
    try:
        handle = winreg.OpenKey(winreg.HKEY_CURRENT_USER, normpath(""AppEvents/EventLabels""))
    except OSError:
        return None
    else:
        return handle


def main_proc(key_handle: ""PyHKEY"") -> None:
    print(""All sounds in your registry will now be played sequentially\n""
          ""Press Ctrl-Break to interrupt..."")
    for sound_name in iter_subkeys(key_handle):
        print(""Playing {}..."".format(sound_name), end="""", flush=True)
        try:
            winsound.PlaySound(sound_name, winsound.SND_ALIAS | winsound.SND_NODEFAULT)
        except RuntimeError:
            print("" Failed"")
            continue
        else:
            print("" Done"")


def exit_proc(key_handle: Optional[""PyHKEY""], err_code: int = 0) -> None:
    if err_code:
        err_messages = (""ERROR: This script can only be run on the operating system \""Microsoft Windows\"". Please ""
                        ""delete this script from your system now and slap yourself."",
                        ""ERROR: Something went wrong while attempting to read the registry."")
        print(err_messages[err_code - 1])
    else:
        winreg.CloseKey(key_handle)
    input(""Press the Enter key to continue..."")
    if err_code:
        raise SystemExit(1)


if __name__ == ""__main__"":
    if platform.system() == ""Windows"":
        import winsound
        import winreg
    else:
        exit_proc(None, err_code=1)
    handle = init_proc()
    if handle is None:
        exit_proc(None, err_code=2)
    try:
        main_proc(handle)
    except KeyboardInterrupt:
        print(""\nCtrl-Break detected, exiting..."")
    finally:
        exit_proc(handle)
"
3kUtAqCm,Untitled,naitgacem,Java,Friday 7th of July 2023 06:47:45 AM CDT,"if (parentNode.rightNode == nodeToDelete) {
            if (leftNode == null && rightNode == null) {
                // has one child
                parentNode.rightNode = null;
                return;
            } else if (rightNode != null && leftNode == null) {
                parentNode.rightNode = rightNode;
                return;
            } else if (leftNode != null && rightNode == null) {
                parentNode.rightNode = leftNode;
                return;
            } else {
                // has two children
                Node succNode = findSuccessor(nodeToDelete);
                if (succNode == nodeToDelete.rightNode) {
                    succNode.leftNode = nodeToDelete.leftNode;
                    parentNode.rightNode = succNode;
                } else {
                    // we need to do some intricate shit
                    // succNode has to be a left child
                    succNode.parentNode.leftNode = succNode.leftNode;
                    nodeToDelete.data = succNode.data;
                }
                return;
            }
} else {
            if (leftNode == null && rightNode == null) {
                // has one child
                parentNode.leftNode = null;
                return;
            } else if (rightNode != null && leftNode == null) {
                parentNode.leftNode = rightNode;
                return;
            } else if (leftNode != null && rightNode == null) {
                parentNode.leftNode = leftNode;
                return;
            } else {
                // has two children
                Node succNode = findSuccessor(nodeToDelete);
                if (succNode == nodeToDelete.rightNode) {
                    succNode.leftNode = nodeToDelete.leftNode;
                    parentNode.rightNode = succNode;
                } else {
                    succNode.parentNode.leftNode = succNode.leftNode;
                    nodeToDelete.data = succNode.data;
                }
                return;
            }
}"
q1NNkGLt,Laptop System: ASUSTeK product: X555LN. inxi -b && lspci -vnn -d 14e4:,SerW,Bash,Friday 7th of July 2023 06:34:14 AM CDT,"dragonserw@debian:~$ inxi -b && lspci -vnn -d 14e4:
System:
  Host: debian Kernel: 6.1.0-10-amd64 arch: x86_64 bits: 64 Desktop: GNOME
    v: 43.4 Distro: Debian GNU/Linux 12 (bookworm)
Machine:
  Type: Laptop System: ASUSTeK product: X555LN v: 1.0
    serial: <superuser required>
  Mobo: ASUSTeK model: X555LN v: 1.0 serial: <superuser required>
    UEFI: American Megatrends v: X555LN.313 date: 04/19/2019
Battery:
  ID-1: BAT0 charge: 18.6 Wh (76.5%) condition: 24.3/37.3 Wh (65.2%)
    volts: 7.5 min: 7.5
CPU:
  Info: dual core Intel Core i3-4030U [MT MCP] speed (MHz): avg: 799
    min/max: 800/1800
Graphics:
  Device-1: Intel Haswell-ULT Integrated Graphics driver: i915 v: kernel
  Device-2: NVIDIA GM108M [GeForce 840M] driver: nouveau v: kernel
  Device-3: Realtek USB Camera type: USB driver: uvcvideo
  Display: wayland server: X.Org v: 1.22.1.9 with: Xwayland v: 22.1.9
    compositor: gnome-shell driver: dri: crocus gpu: i915
    resolution: 1366x768~60Hz
  API: OpenGL v: 4.6 Mesa 22.3.6 renderer: Mesa Intel HD Graphics 4400 (HSW
    GT2)
Network:
  Device-1: Realtek RTL8111/8168/8411 PCI Express Gigabit Ethernet
    driver: r8169
  Device-2: Broadcom BCM43142 802.11b/g/n driver: N/A
Drives:
  Local Storage: total: 111.79 GiB used: 8 GiB (7.2%)
Info:
  Processes: 229 Uptime: 4m Memory: 5.67 GiB used: 2 GiB (35.3%) Shell: Bash
  inxi: 3.3.26
03:00.0 Network controller [0280]: Broadcom Inc. and subsidiaries BCM43142 802.11b/g/n [14e4:4365] (rev 01)
	Subsystem: Lite-On Communications Inc BCM43142 802.11b/g/n [11ad:6675]
	Flags: bus master, fast devsel, latency 0, IRQ 255, IOMMU group 14
	Memory at f7800000 (64-bit, non-prefetchable) [size=32K]
	Capabilities: <access denied>

dragonserw@debian:~$ "
MHnPDzi6,Untitled,35657,C++,Friday 7th of July 2023 06:31:55 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <fstream>


using namespace std;

class client_base {

public:
    client_base() : clients(""clients.txt"") {}

    struct client {

        void get_client(ifstream& fin) {
            getline(fin, name);
            getline(fin, phone_number);
            getline(fin, client_id);
            getline(fin, personal_discount);
            getline(fin, regular_customer);
        }

        string name; // имя клиента
        string phone_number; // номер телефона
        string client_id; // id клиента
        string personal_discount; // размер скидки
        string regular_customer; // постоянный покупатель (да / нет)
    };

    void NewClient(const string& name, const string& phone_number, const int client_id, const int personal_discount, const bool regular_customer) {
        ofstream fout;
        fout.open(clients, ofstream::app);
        if (!fout.is_open()) {
            cout << ""Ошибка открытия файла"" << endl;
        }
        else {
            fout << name << endl << phone_number << endl << client_id << endl << personal_discount << endl << regular_customer << endl;
            fout.close();
        }
    }

    void ShowAllClients() {
        ifstream fin;
        fin.open(clients);
        if (!fin.is_open()) {
            cout << ""Ошибка открытия файла"" << endl;
        }
        else {
            client temp;
            temp.get_client(fin);
            while (!fin.eof()) {
                cout << temp.name << "" "" << temp.phone_number << "" "" << temp.client_id << "" "" << temp.personal_discount << "" "" << temp.regular_customer << endl;
                temp.get_client(fin);
            }
            fin.close();
        }
        cout << endl;
    }


private:
    string clients; // название файла с клиентами
};

int main() {
    client_base my_base;
    my_base.NewClient(""Ivan"", ""9111111111"", 1129, 10, true);
    my_base.NewClient(""Vasya"", ""9111111222"", 1130, 5, false);
    my_base.NewClient(""Oleg"", ""9111111333"", 1131, 15, true);
    my_base.NewClient(""Maria"", ""9111111444"", 1132, 10, false);
    my_base.NewClient(""Galya"", ""9111111555"", 1133, 20, true);
    my_base.NewClient(""Julia"", ""9111111566"", 1144, 20, true);
    my_base.ShowAllClients();
}"
kndS6QaU,Untitled,kolbka_,C++,Friday 7th of July 2023 06:28:00 AM CDT,"#pragma once

#include <atomic>
#include <vector>
#include <memory>

class RequestLimiter {
public:
    RequestLimiter(std::atomic_int &rl) : rl(rl) {
        rl.fetch_add(1);
    }

    bool isLimitExceeded() {
        return rl.load() > 10;
    }

    ~RequestLimiter() {
        rl.fetch_sub(1);
    }

private:
    std::atomic_int &rl;
};

class RLStore {
public:
    explicit RLStore(uint size) : rls(size) {
    }

    uint createRL() {
        int id = available_id++;
        if (id >= rls.size()) {
            throw std::runtime_error(""RLStore: id is greater than size"");
        }
        return id;
    }

    std::atomic_int &getRL(uint id) {
        if (id >= rls.size()) {
            throw std::runtime_error(""RLStore: id is greater than size"");
        }
        return rls[id];
    }

private:
    uint available_id = 0;
    std::vector<std::atomic_int> rls;
};
"
cyErNkjp,casear_cipher.py,rudy1234567890,Python,Friday 7th of July 2023 06:21:23 AM CDT,"def encrypt_char(ch, key):
    if ch.isupper():
        return chr(65 + (ord(ch)-65+key) % 26)
    return chr(97 + (ord(ch)-97+key) % 26)

def encrypt(msg, key):
    res = ''

    for ch in msg:
        if ch.isalpha():
            res += encrypt_char(ch, key)
        else:
            res += ch

    return res

print(encrypt(""ApPle@#$12"", 3))"
5xV6U03e,travelTime,zoran902,JavaScript,Friday 7th of July 2023 06:18:52 AM CDT,"function travelTime(travelOptions) {

    let destinations = getDestinations(travelOptions)

    let sortedDestinationsByName = Object.entries(destinations).sort(Intl.Collator().compare)

    for (const [country, townInfo] of sortedDestinationsByName) {

        let result = []
        result.push(country)
        for (const town in townInfo) {
            result.push(town, townInfo[town])
        }

        result.length === 3 ?
            console.log(result.join(' -> ')) :
            console.log(getResWithSeveralTowns(result));

        function getResWithSeveralTowns(townAndPrice) {
            let resWithSeveralTowns = []
            let country = result.shift()
            let tempArr = []

            for (let i = 0; i < result.length; i += 2) {

                let town = result[i]
                let price = result[i + 1]
                let townAndPrice = []

                townAndPrice.push(town, price)
                tempArr.push(townAndPrice)
            }

            let sortedArray = tempArr.sort(([keyA, valueA], [keyB, valueB]) => valueA - valueB)

            for (let [town, price] of sortedArray) {
                let townPrice = [town, price]
                resWithSeveralTowns.push(townPrice.join(' -> '))
            }
            resWithSeveralTowns.unshift(country + ' ->')
            return resWithSeveralTowns.join(' ')
        }

    }

    function getDestinations(destination) {
        let destinations = {}

        travelOptions.forEach((line) => {
            let [country, town, price] = line.split(' > ')

            if (!destinations.hasOwnProperty(country)) {
                destinations[country] = {}
            }

            if (!destinations[country].hasOwnProperty(town)) {
                destinations[country][town] = price
            } else {

                if (price < destinations[country][town]) {
                    destinations[country][town] = price
                }

            }
        })
        return destinations
    }
}"
qxzh64BR,data626,TestGuy1,JSON,Friday 7th of July 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '411fe1e18946233de1b03cd912ef2036cae707f05a5773a0de07d20226942e78aeaf162c4f2f938295352e4d803fb6e174383395c2b1e59fb87150bd2fca4867f6ced1034e2ba4dae4049ac281af99b9cc65d880925912a416affddd9614a422491c05c8add010149f19c49a5e84622d097c9890f0d59a54e00cb1f0d11f4f62',
  otherdata: [
    '35c6edc77779cfb3f75d78855193be40',
    '569b4160b46b4ff1d59509a17ab3afa5',
    'c05d2aa49224874879286de421c7f957',
    'b5a86a0c9a6eb5a4f23b96f201a0a3cd',
    '79d776351405097456c0851e4f8bb396',
    'cc3661833756ca50cd2fa1bfd802e01c',
    '672896ca510fcda65d6f386afb6203a5',
    '5700ac34661fc80972c7231a8b6acd66'
  ]
}"
vuNqdu5z,Untitled,35657,C++,Friday 7th of July 2023 05:58:15 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstring>


using namespace std;

struct client {
    char name[20]; // имя клиента
    char phone_number[10]; // номер телефона
    int client_id; // id клиента
    int personal_discount; // размер скидки
    bool regular_customer; // постоянный покупатель (да / нет)
};

class client_base {

public:
    client_base(): clients(new client*[100]), clients_number(0), clients_base_size(100) {}

    client_base(int new_base_size): clients(new client* [new_base_size]), clients_number(0), clients_base_size(new_base_size) {}

    client_base(const client_base& other): clients(new client* [other.clients_base_size]), clients_number(0), clients_base_size(other.clients_base_size) {
        for (int i = 0; i < other.clients_number; i++) {
            NewClient(other.clients[i]->name, other.clients[i]->phone_number, other.clients[i]->client_id, other.clients[i]->personal_discount, other.clients[i]->regular_customer);
        }
    }

    client_base(client_base&& other) {
		clients = other.clients;
		clients_number = other.clients_number;
		clients_base_size = other.clients_base_size;
		other.clients = nullptr;
		other.clients_number = 0;
		other.clients_base_size = 0;
    }
	
	client_base& operator=(const client_base& other) {
		if (this != &other) {
			for (int i = 0; i < clients_number; i++) {
				delete clients[i];
			}
			delete[] clients;
			clients = new client * [other.clients_base_size];
			clients_number = 0;
			clients_base_size = other.clients_base_size;
			for (int i = 0; i < other.clients_number; i++) {
				NewClient(other.clients[i]->name, other.clients[i]->phone_number, other.clients[i]->client_id, other.clients[i]->personal_discount, other.clients[i]->regular_customer);
			}
		}
        return *this;
    }

    client_base& operator=(client_base&& other) {
		if (this != &other) {
			for (int i = 0; i < clients_number; i++) {
				delete clients[i];
			}
			delete[] clients;
			clients = other.clients;
			other.clients = nullptr;
			clients_number = other.clients_number;
			other.clients_number = 0;
			clients_base_size = other.clients_base_size;
			other.clients_base_size = 0;
		}
        return *this;
    }

    void NewClient(const char name[], const char phone_number[], const int client_id, const int personal_discount, const bool regular_customer) {
        if (clients_number == clients_base_size) {
            client** temp = new client * [clients_base_size * 2];
            for (int i = 0; i < clients_number; i++) {
                temp[i] = clients[i];
                delete clients[i];
            }
            delete[] clients;
            clients = temp;
            clients_base_size *= 2;
        }
        clients[clients_number] = new client;
        strcpy(clients[clients_number]->name, name);
        strcpy(clients[clients_number]->phone_number, phone_number);
        clients[clients_number]->client_id = client_id;
        clients[clients_number]->personal_discount = personal_discount;
        clients[clients_number]->regular_customer = regular_customer;
        clients_number++;
    }

    void DelClient(const char name[]) {
        for (int i = 0; i < clients_number; i++) {
            if (!strcmp(clients[i]->name, name)) {
                delete clients[i];
                for (int j = i; j < clients_number - 1; j++) {
                    clients[j] = clients[j + 1];
                }
                clients[clients_number - 1] = nullptr;
                clients_number--;
            }
        }

    }

    void FindClient(const char name[]) {
        for (int i = 0; i < clients_number; i++) {
            if (!strcmp(clients[i]->name, name)) {
                cout << clients[i]->name << "": phone "" << clients[i]->phone_number << "", id "" << clients[i]->client_id << "", personal discount "" << clients[i]->personal_discount << "" %"";
                if (clients[i]->regular_customer) {
                    cout << "", regular customer"";
                }
                cout << endl;
            }
        }
        cout << endl;
    }

    void ShowAllClients() {
        for (int i = 0; i < clients_number; i++) {
            cout << clients[i]->name << "": phone "" << clients[i]->phone_number << "", id "" << clients[i]->client_id << "", personal discount "" << clients[i]->personal_discount << "" %"";
            if (clients[i]->regular_customer) {
                cout << "", regular customer"";
            }
            cout << endl;
        }
        cout << endl;
    }

    void ShowRegularClients() {
        for (int i = 0; i < clients_number; i++) {
            if (clients[i]->regular_customer) {
                cout << clients[i]->name << "": phone "" << clients[i]->phone_number << "", id "" << clients[i]->client_id << "", personal discount "" << clients[i]->personal_discount << "" %"" << endl;
            }
        }
        cout << endl;
    }

    ~client_base() {
        for (int i = 0; i < clients_number; i++) {
            delete clients[i];
        }
        delete[] clients;
    }


private:
    client** clients; // массив клиентов
    int clients_number; // количество клиентов
    int clients_base_size; // размер базы
};

int main() {
    client_base my_base(200);
    my_base.NewClient(""Ivan"", ""9111111111"", 1129, 10, true);
    my_base.NewClient(""Vasya"", ""9111111222"", 1130, 5, false);
    my_base.NewClient(""Oleg"", ""9111111333"", 1131, 15, true);
    my_base.NewClient(""Maria"", ""9111111444"", 1132, 10, false);
    my_base.NewClient(""Galya"", ""9111111555"", 1133, 20, true);
    //client_base my_base2(my_base);
    //client_base my_base2(move(my_base));
    client_base my_base2;
    //my_base2 = my_base;
    my_base2 = move(my_base);
    my_base2.ShowAllClients();
    my_base2.DelClient(""Ivan"");
    my_base2.ShowRegularClients();
    my_base2.FindClient(""Galya"");
}"
9TmGevZU,MeteorOS,Mag1cpunch,Lua,Friday 7th of July 2023 05:58:10 AM CDT,"local currentDir = ""/""
local bootMode = ""CLI""

local function list(dir)
    if fs.exists(dir) then
        local files = fs.list(dir)
        for _, file in pairs(files) do
            print(file)
        end
    else
        print(""Directory '"" .. dir .. ""' doesn't exist!"")
    end
end

local function gotoDirectory(dir)
    if dir == """" then
        dir = currentDir
    end

    if fs.isDir(dir) then
        currentDir = fs.combine(currentDir, dir)
    else
        print(""'"" .. dir .. ""' is not a valid directory!"")
    end
end

local function createDir(dir)
    local path = fs.combine(currentDir, dir)
    if not fs.exists(path) then
        fs.makeDir(path)
        print(""Directory '"" .. dir .. ""' created!"")
    else
        print(""Directory '"" .. dir .. ""' already exists!"")
    end
end

local function removeDir(dir)
    local path = fs.combine(currentDir, dir)
    if fs.exists(path) then
        fs.delete(path)
        print(""Directory '"" .. dir .. ""' removed!"")
    else
        print(""Directory '"" .. dir .. ""' does not exist!"")
    end
end

local function diskspace()
    local freeSpace = fs.getFreeSpace(""/"")
    local usedSpace = fs.getSize(""/"")
    local totalSpace = freeSpace + usedSpace

    print(""Disk Space:"")
    print(""Total: "" .. totalSpace .. "" bytes"")
    print(""Used: "" .. usedSpace .. "" bytes"")
    print(""Free: "" .. freeSpace .. "" bytes"")
end

local function parseCommand(input)
    local command, param = string.match(input, ""(%S+)%s*(%S*)"")
    return command, param
end

local function executeCommand(command, param)
    if command == ""list"" then
        if param == """" then
            list(currentDir)
        else
            list(param)
        end
    elseif command == ""reboot"" then
        os.reboot()
    elseif command == ""shutdown"" then
        os.shutdown()
    elseif command == ""goto"" then
        gotoDirectory(param)
    elseif command == ""diskspace"" then
        diskspace()
    elseif command == ""createdir"" then
        createDir(param)
    elseif command == ""removedir"" then
        removeDir(param)
    else
        print(""Invalid command!"")
    end
end

local function drawBootMenu()
    term.clear()
    term.setCursorPos(1, 1)
    term.setTextColor(colors.white)

    local screenWidth, screenHeight = term.getSize()

    local menuWidth = math.min(screenWidth, 30)
    local menuHeight = math.min(screenHeight, 10)
    local startX = math.floor((screenWidth - menuWidth) / 2)
    local startY = math.floor((screenHeight - menuHeight) / 2)

    paintutils.drawFilledBox(startX, startY, startX + menuWidth - 1, startY + menuHeight - 1, colors.gray)
    paintutils.drawBox(startX, startY, startX + menuWidth - 1, startY + menuHeight - 1, colors.white)

    term.setCursorPos(startX + 2, startY + 2)
    term.write(""Boot Menu"")

    local buttonWidth = math.floor((menuWidth - 4) / 2)
    local buttonHeight = 3
    local buttonSpacing = 2
    local buttonStartY = startY + math.floor((menuHeight - buttonHeight) / 2)

    paintutils.drawFilledBox(startX + 2, buttonStartY, startX + 1 + buttonWidth, buttonStartY + buttonHeight - 1, colors.lightGray)
    paintutils.drawBox(startX + 2, buttonStartY, startX + 1 + buttonWidth, buttonStartY + buttonHeight - 1, colors.white)
    term.setCursorPos(startX + 3, buttonStartY + 1)
    term.setTextColor(colors.black)
    term.write(""CLI"")

    paintutils.drawFilledBox(startX + 3 + buttonWidth + buttonSpacing, buttonStartY, startX + 2 + buttonWidth * 2 + buttonSpacing, buttonStartY + buttonHeight - 1, colors.lightGray)
    paintutils.drawBox(startX + 3 + buttonWidth + buttonSpacing, buttonStartY, startX + 2 + buttonWidth * 2 + buttonSpacing, buttonStartY + buttonHeight - 1, colors.white)
    term.setCursorPos(startX + 4 + buttonWidth + buttonSpacing, buttonStartY + 1)
    term.setTextColor(colors.black)
    term.write(""GUI"")
end

local function handleBootMenuClick(x, y)
    local screenWidth, screenHeight = term.getSize()

    local menuWidth = math.min(screenWidth, 30)
    local menuHeight = math.min(screenHeight, 10)
    local startX = math.floor((screenWidth - menuWidth) / 2)
    local startY = math.floor((screenHeight - menuHeight) / 2)

    local buttonWidth = math.floor((menuWidth - 4) / 2)
    local buttonHeight = 3
    local buttonSpacing = 2
    local buttonStartY = startY + math.floor((menuHeight - buttonHeight) / 2)

    if y >= buttonStartY and y < buttonStartY + buttonHeight then
        if x >= startX + 2 and x < startX + 2 + buttonWidth then
            bootMode = ""CLI""
        elseif x >= startX + 3 + buttonWidth + buttonSpacing and x < startX + 3 + buttonWidth * 2 + buttonSpacing then
            bootMode = ""GUI""
        end
    end
end

drawBootMenu()

while true do
    local event, button, x, y = os.pullEvent(""mouse_click"")

    handleBootMenuClick(x, y)

    if bootMode == ""CLI"" then
        term.clear()
        term.setCursorPos(1, 1)
        term.setTextColor(colors.white)

        print(""CLI Mode"")
        print("""")

        io.write(currentDir .. "" $~ "")
        local input = read()

        local command, param = parseCommand(input)
        executeCommand(command, param)

        drawBootMenu()
    elseif bootMode == ""GUI"" then
        -- Implement GUI boot mode
        term.clear()
        term.setCursorPos(1, 1)
        term.setTextColor(colors.white)

        print(""GUI Mode is not implemented yet!"")
        break
    end
end"
MbsRPBYh,Untitled,35657,C++,Friday 7th of July 2023 05:54:47 AM CDT,"
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

#include <filesystem>
#include <windows.h>  // для работы SetConsoleCP, SetConsoleOutputCP


using namespace std;

using filesystem::path;

void PrintDirectory(const string& str) {
	cout << ""Содержимое папки "" << str << "":"" << endl;
	for (const auto& a : filesystem::directory_iterator(str)) {
		cout << a.path().filename().string() << endl;
	}
}



void PrintDirectoryInfo(const string& str) {
	cout << ""Содержимое папки "" << str << "":"" << endl;
	for (const auto& a : filesystem::directory_iterator(str)) {
		string name = a.path().filename().string();
		string full_name = str + '/' + name;
		cout << setw(30) << name;
		if (filesystem::is_regular_file(path(full_name))) {
			cout << "" "" << setw(10) << filesystem::file_size(path(full_name)) << "" byte"";
		}
		cout << endl;
	}
}

int main() {

	SetConsoleCP(1251); // установка кодовой страницы windows cp 1251 в поток ввода
	SetConsoleOutputCP(1251); // установка кодовой страницы windows cp 1251 в поток вывода

	//filesystem::create_directory(""C:/Users/PC/Desktop/temp""); // пустая папка
	//filesystem::create_directories(""C:/Users/PC/Desktop/temp/1/2/3/4""); // папка с вложенными директориями
	
	//ofstream fout(""C:/Users/PC/Desktop/temp/file.txt""); // создание файлов
	//ofstream fout2(""C:/Users/PC/Desktop/temp/file2.txt"");
	//ofstream fout3(""C:/Users/PC/Desktop/temp/1/file3.txt"");
	//ofstream fout4(""C:/Users/PC/Desktop/temp/1/2/file4.txt"");

	//fout.close();
	//fout2.close();
	//fout3.close();
	//fout4.close();

	//remove(path(""C:/Users/PC/Desktop/temp/1/2/3/4"")); // удаление пустой папки

	//remove_all(path(""C:/Users/PC/Desktop/temp/1"")); // удаление папки вместе с содержимым (обязательно закрыть файлы перед удалением)

	//copy(path(""C:/Users/PC/Desktop/temp""), path(""C:/Users/PC/Desktop/temp2"")); // копирует папку с файлами на без вложенных каталогов

	//copy(path(""C:/Users/PC/Desktop/temp""), path(""C:/Users/PC/Desktop/temp2""), filesystem::copy_options::recursive); // копирует папку с файлами и вложенными каталогами

	//rename(path(""C:/Users/PC/Desktop/temp2""), path(""C:/Users/PC/Desktop/temp55"")); // функция для переименования папок и файлов (в случае наличия вложенных файлов не забываем их закрыть)

	//rename(path(""C:/Users/PC/Desktop/temp55""), path(""C:/temp55"")); // функция для перемещения папок и файлов (в случае наличия вложенных файлов не забываем их закрыть)

	//rename(path(""C:/Users/PC/Desktop/temp55""), path(""C:/Users/new_directory"")); // функция для перемещения и переименования (в случае наличия вложенных файлов не забываем их закрыть)

	cout << boolalpha;
	cout << filesystem::is_regular_file(path(""C:/Users/PC/Desktop/temp"")) << endl; // проверить 
	cout << filesystem::is_directory(path(""C:/Users/PC/Desktop/temp"")) << endl;

	cout << filesystem::file_size(path(""C:/Users/PC/Desktop/temp/file.txt"")) << "" byte"" << endl << endl << endl;

	PrintDirectory(""C:/Users/PC/Downloads"");

	cout << endl << endl;

	PrintDirectoryInfo(""C:/Users/PC/Desktop/temp"");

}
"
3NKuYE3t,Turtle OTA firmware A1,seko00,Lua,Friday 7th of July 2023 05:41:13 AM CDT,"local i = 0
while true do
	os.sleep(1)
	i = i + 1
	print(""new..."" .. i)
end"
RDpdPLWa,latest.log,jayhillx,JSON,Friday 7th of July 2023 05:28:16 AM CDT,"[07Jul2023 06:24:39.621] [main/INFO] [cpw.mods.modlauncher.Launcher/MODLAUNCHER]: ModLauncher running: args [--launchTarget, forgeclientuserdev, --version, MOD_DEV, --assetIndex, 5, --assetsDir, C:\Users\tothe\.gradle\caches\forge_gradle\assets, --gameDir, ., --fml.forgeVersion, 47.0.43, --fml.mcVersion, 1.20.1, --fml.forgeGroup, net.minecraftforge, --fml.mcpVersion, 20230612.114412]
[07Jul2023 06:24:39.621] [main/INFO] [cpw.mods.modlauncher.Launcher/MODLAUNCHER]: ModLauncher 10.0.9+10.0.9+main.dcd20f30 starting: java version 17.0.2 by Oracle Corporation; OS Windows 11 arch amd64 version 10.0
[07Jul2023 06:24:39.902] [main/INFO] [net.minecraftforge.fml.loading.ImmediateWindowHandler/]: Loading ImmediateWindowProvider fmlearlywindow
[07Jul2023 06:24:40.027] [main/INFO] [EARLYDISPLAY/]: Trying GL version 4.6
[07Jul2023 06:24:40.121] [main/INFO] [EARLYDISPLAY/]: Requested GL version 4.6 got version 4.6
[07Jul2023 06:24:40.246] [main/INFO] [optifine.OptiFineTransformationService/]: OptiFineTransformationService.onLoad
[07Jul2023 06:24:40.246] [main/INFO] [optifine.OptiFineTransformationService/]: OptiFine ZIP file URL: union:/C:/Users/tothe/OneDrive/Desktop/Minecraft%20Modding/mods/MysticsBiomes%201.20.1/run/mods/preview_OptiFine_1.20.1_HD_U_I5_pre8.jar%23193!/
[07Jul2023 06:24:40.278] [main/INFO] [optifine.OptiFineTransformationService/]: OptiFine ZIP file: C:\Users\tothe\OneDrive\Desktop\Minecraft Modding\mods\MysticsBiomes 1.20.1\run\mods\preview_OptiFine_1.20.1_HD_U_I5_pre8.jar
[07Jul2023 06:24:40.278] [main/INFO] [optifine.OptiFineTransformer/]: Target.PRE_CLASS is available
[07Jul2023 06:24:40.309] [main/INFO] [ofdev.modlauncher.OFDevTransformationService/]: OptiFine dev transformation service loading
[07Jul2023 06:24:40.309] [main/INFO] [ofdev.modlauncher.OFDevTransformationService/]: Found OptiFine service, overwriting transformer
[07Jul2023 06:24:40.340] [main/INFO] [optifine.OptiFineTransformer/]: Target.PRE_CLASS is available
[07Jul2023 06:24:40.356] [main/INFO] [ofdev.modlauncher.OFDevTransformationService/]: Finding OptiFine AccessFixer
[07Jul2023 06:24:40.371] [pool-2-thread-1/INFO] [EARLYDISPLAY/]: GL info: Intel(R) UHD Graphics GL version 4.6.0 - Build 26.20.100.7926, Intel
[07Jul2023 06:24:40.449] [main/INFO] [mixin/]: SpongePowered MIXIN Subsystem Version=0.8.5 Source=union:/C:/Users/tothe/.gradle/caches/modules-2/files-2.1/org.spongepowered/mixin/0.8.5/9d1c0c3a304ae6697ecd477218fa61b850bf57fc/mixin-0.8.5.jar%23128!/ Service=ModLauncher Env=CLIENT
[07Jul2023 06:24:40.481] [main/INFO] [optifine.OptiFineTransformationService/]: OptiFineTransformationService.initialize
[07Jul2023 06:24:40.559] [main/INFO] [OptiFineDevTweaker/]: Got Minecraft version ""null"" from environment variable MC_VERSION
[07Jul2023 06:24:40.559] [main/INFO] [OptiFineDevTweaker/]: Found Minecraft version 1.20.1 from 1.13+ FMLLoader VersionInfo
[07Jul2023 06:24:40.574] [main/INFO] [OptiFineDevTweaker/]: Found Minecraft jar C:\Users\tothe\.gradle\caches\forge_gradle\minecraft_repo\versions\1.20.1\client.jar from FG3+ (provided cache)
[07Jul2023 06:24:41.226] [main/WARN] [net.minecraftforge.fml.loading.moddiscovery.ModFileParser/LOADING]: Mod file C:\Users\tothe\.gradle\caches\modules-2\files-2.1\net.minecraftforge\javafmllanguage\1.20.1-47.0.43\870eb342c587195b95469da1434321420acf8fc\javafmllanguage-1.20.1-47.0.43.jar is missing mods.toml file
[07Jul2023 06:24:41.242] [main/WARN] [net.minecraftforge.fml.loading.moddiscovery.ModFileParser/LOADING]: Mod file C:\Users\tothe\.gradle\caches\modules-2\files-2.1\net.minecraftforge\lowcodelanguage\1.20.1-47.0.43\bdc0319424069d8d996e0fba1c164f5da37053b4\lowcodelanguage-1.20.1-47.0.43.jar is missing mods.toml file
[07Jul2023 06:24:41.242] [main/WARN] [net.minecraftforge.fml.loading.moddiscovery.ModFileParser/LOADING]: Mod file C:\Users\tothe\.gradle\caches\modules-2\files-2.1\net.minecraftforge\mclanguage\1.20.1-47.0.43\59eba70cfb25091c9c4a7ddacf22b38fff21665d\mclanguage-1.20.1-47.0.43.jar is missing mods.toml file
[07Jul2023 06:24:41.290] [main/WARN] [net.minecraftforge.fml.loading.moddiscovery.ModFileParser/LOADING]: Mod file C:\Users\tothe\.gradle\caches\modules-2\files-2.1\net.minecraftforge\fmlcore\1.20.1-47.0.43\574f2099d26299ca1394777c6d20a6aecd2ac9cf\fmlcore-1.20.1-47.0.43.jar is missing mods.toml file
[07Jul2023 06:24:41.617] [main/INFO] [net.minecraftforge.fml.loading.moddiscovery.JarInJarDependencyLocator/]: No dependencies to load found. Skipping!
[07Jul2023 06:24:42.993] [main/INFO] [optifine.OptiFineTransformationService/]: OptiFineTransformationService.transformers
[07Jul2023 06:24:43.040] [main/INFO] [optifine.OptiFineTransformer/]: Targets: 411
[07Jul2023 06:24:43.821] [main/INFO] [OptiFineDevTweaker/]: Got OptiFine file name ""modlauncher-10.0.9.jar""
[07Jul2023 06:24:43.821] [main/ERROR] [OptiFineDevTweaker/]: OptiFine file not found through API! Trying ModLauncher internals...
[07Jul2023 06:24:44.149] [main/INFO] [optifine.OptiFineTransformationService/]: additionalClassesLocator: [optifine., net.optifine.]
[07Jul2023 06:24:44.649] [main/INFO] [mixin/]: Compatibility level set to JAVA_17
[07Jul2023 06:24:44.666] [main/INFO] [cpw.mods.modlauncher.LaunchServiceHandler/MODLAUNCHER]: Launching target 'forgeclientuserdev' with arguments [--version, MOD_DEV, --gameDir, ., --assetsDir, C:\Users\tothe\.gradle\caches\forge_gradle\assets, --assetIndex, 5]
[07Jul2023 06:24:48.677] [pool-4-thread-1/FATAL] [mixin/]: Mixin apply failed terrablender.mixins.json:MixinBuiltInRegistries -> net.minecraft.core.registries.BuiltInRegistries: org.spongepowered.asm.mixin.injection.throwables.InvalidInjectionException Critical injection failure: @Inject annotation on registerSimple could not find any targets matching 'Lnet/minecraft/core/registries/BuiltInRegistries;m_258002_(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;)Lnet/minecraft/core/Registry;' in net.minecraft.core.registries.BuiltInRegistries. Using refmap terrablender.refmap.json [PREINJECT Applicator Phase -> terrablender.mixins.json:MixinBuiltInRegistries -> Prepare Injections ->  -> handler$zza000$registerSimple(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;Lorg/spongepowered/asm/mixin/injection/callback/CallbackInfoReturnable;)V -> Parse]
org.spongepowered.asm.mixin.injection.throwables.InvalidInjectionException: Critical injection failure: @Inject annotation on registerSimple could not find any targets matching 'Lnet/minecraft/core/registries/BuiltInRegistries;m_258002_(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;)Lnet/minecraft/core/Registry;' in net.minecraft.core.registries.BuiltInRegistries. Using refmap terrablender.refmap.json [PREINJECT Applicator Phase -> terrablender.mixins.json:MixinBuiltInRegistries -> Prepare Injections ->  -> handler$zza000$registerSimple(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/core/registries/BuiltInRegistries$RegistryBootstrap;Lorg/spongepowered/asm/mixin/injection/callback/CallbackInfoReturnable;)V -> Parse]
	at org.spongepowered.asm.mixin.injection.struct.InjectionInfo.validateTargets(InjectionInfo.java:656) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.injection.struct.InjectionInfo.findTargets(InjectionInfo.java:587) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.injection.struct.InjectionInfo.readAnnotation(InjectionInfo.java:330) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.injection.struct.InjectionInfo.<init>(InjectionInfo.java:316) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.injection.struct.InjectionInfo.<init>(InjectionInfo.java:308) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.injection.struct.CallbackInjectionInfo.<init>(CallbackInjectionInfo.java:46) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77) ~[?:?]
	at jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:?]
	at java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499) ~[?:?]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:480) ~[?:?]
	at org.spongepowered.asm.mixin.injection.struct.InjectionInfo$InjectorEntry.create(InjectionInfo.java:149) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.injection.struct.InjectionInfo.parse(InjectionInfo.java:708) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.transformer.MixinTargetContext.prepareInjections(MixinTargetContext.java:1311) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.transformer.MixinApplicatorStandard.prepareInjections(MixinApplicatorStandard.java:1042) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.transformer.MixinApplicatorStandard.applyMixin(MixinApplicatorStandard.java:393) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.transformer.MixinApplicatorStandard.apply(MixinApplicatorStandard.java:325) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.transformer.TargetClassContext.apply(TargetClassContext.java:383) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.transformer.TargetClassContext.applyMixins(TargetClassContext.java:365) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.transformer.MixinProcessor.applyMixins(MixinProcessor.java:363) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.mixin.transformer.MixinTransformer.transformClass(MixinTransformer.java:250) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.service.modlauncher.MixinTransformationHandler.processClass(MixinTransformationHandler.java:131) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at org.spongepowered.asm.launch.MixinLaunchPluginLegacy.processClass(MixinLaunchPluginLegacy.java:131) ~[mixin-0.8.5.jar:0.8.5+Jenkins-b310.git-155314e6e91465dad727e621a569906a410cd6f4]
	at cpw.mods.modlauncher.serviceapi.ILaunchPluginService.processClassWithFlags(ILaunchPluginService.java:156) ~[modlauncher-10.0.9.jar:10.0.9+10.0.9+main.dcd20f30]
	at cpw.mods.modlauncher.LaunchPluginHandler.offerClassNodeToPlugins(LaunchPluginHandler.java:88) ~[modlauncher-10.0.9.jar:?]
	at cpw.mods.modlauncher.ClassTransformer.transform(ClassTransformer.java:120) ~[modlauncher-10.0.9.jar:?]
	at cpw.mods.modlauncher.TransformingClassLoader.maybeTransformClassBytes(TransformingClassLoader.java:50) ~[modlauncher-10.0.9.jar:?]
	at cpw.mods.cl.ModuleClassLoader.readerToClass(ModuleClassLoader.java:113) ~[securejarhandler-2.1.10.jar:?]
	at cpw.mods.cl.ModuleClassLoader.lambda$findClass$15(ModuleClassLoader.java:219) ~[securejarhandler-2.1.10.jar:?]
	at cpw.mods.cl.ModuleClassLoader.loadFromModule(ModuleClassLoader.java:229) ~[securejarhandler-2.1.10.jar:?]
	at cpw.mods.cl.ModuleClassLoader.findClass(ModuleClassLoader.java:219) ~[securejarhandler-2.1.10.jar:?]
	at cpw.mods.cl.ModuleClassLoader.loadClass(ModuleClassLoader.java:135) ~[securejarhandler-2.1.10.jar:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:520) ~[?:?]
	at net.minecraft.server.Bootstrap.bootStrap(Bootstrap.java:43) ~[forge-1.20.1-47.0.43_mapped_official_1.20.1-recomp.jar%23195!/:?]
	at net.minecraft.client.main.Main.lambda$main$0(Main.java:151) ~[forge-1.20.1-47.0.43_mapped_official_1.20.1-recomp.jar%23195!/:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) ~[?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[?:?]
	at java.lang.Thread.run(Thread.java:833) ~[?:?]
"
5MwYKFN9,NodesLinks,CR7CR7,Java,Friday 7th of July 2023 05:03:40 AM CDT,"                     Drinks
                     /   \
                   /       \
                 Hot      Cold
                /   \       /             \
              Tea  Coffee Alcoholic           Non-Alcoholic
             / \    /  \    /      /   |        /    /    | 
      Green Black Americano  Wine  Beer Whisky Cola Soda Fanta 
                   Latte
                 Cappuccino
               
        
"
0xaeMvYU,Turtle : move to,seko00,Lua,Friday 7th of July 2023 04:58:21 AM CDT,"function sign(number)
    if number < 0 then
        return -1
    elseif number > 0 then
        return 1
    end
    return 0
end

function orient()
    -- 0:x+ , 1:z+ , 2:x- , 3:z-
    x,y,z = gps.locate()
    while true do
        fuel = turtle.getFuelLevel()
        turtle.forward()
        if fuel == turtle.getFuelLevel() then
            turtle.turnRight()
        else
            xp,yp,zp = gps.locate()
            if x == xp then
                turtle.back()
                return 2 - (zp-z)
            end
            turtle.back()
            return 1 - (xp-x)
        end
    end
end

function moveForward(steps)
    fuel = turtle.getFuelLevel()
    while fuel-turtle.getFuelLevel() < steps do
        turtle.forward()
    end
end

function moveZ(arg_steps)
    fuel = turtle.getFuelLevel()
    steps = arg_steps
    if arg_steps < 0 then
        steps = -arg_steps
    end
    while fuel-turtle.getFuelLevel() < steps do
        if arg_steps < 0 then
            turtle.down()
        else
            turtle.up()
        end
    end
end

function moveDown(steps)
    fuel = turtle.getFuelLevel()
    while fuel-turtle.getFuelLevel() < steps do
        turtle.down()
    end
end

function turn(o, od)
    if math.abs(od - o) == 2 then
        turtle.turnRight()
        turtle.turnRight()
    elseif (o + 1)%4 == od then
        turtle.turnRight()
    elseif (o-1)%4 == od then
        turtle.turnLeft()
    end
    return od
end

function move_to_target(xd,yd,zd)
    orientation = orient()
    x,y,z = gps.locate()
    moveZ(yd-y)
    xo = 1-sign(xd-x)
    zo = 2-sign(zd-z)
    if (xo - orientation)%4 < (zo - orientation)%4 then
        orientation = turn(orientation, xo)
        moveForward(math.abs(xd-x))
        orientation = turn(orientation, zo)
        moveForward(math.abs(zd-z))
    else
        orientation = turn(orientation, zo)
        moveForward(math.abs(zd-z))
        orientation = turn(orientation, xo)
        moveForward(math.abs(xd-x))
    end
end

args = {...}
xd = args[1]
yd = args[2]
zd = args[3]

move_to_target(xd,yd,zd)"
3PWFEmHd,mymal theme by Shishio-kun,argui,CSS,Friday 7th of July 2023 04:57:02 AM CDT,"@\import ""https://dl.dropboxusercontent.com/s/ed2g365i8phd180/aceface.css"";
@\import ""https://malscraper.azurewebsites.net/covers/auto/presets/dataimagelinkafter"";

/* BACKGROUND */

body {
visibility: visible;
background-color: #F1EBDF;
}


/* HEADER */

.header {
visibility: visible;
}

.header .header-menu {
visibility: visible;
background: green;
}

.header .header-title {
visibility: visible;
}

/* SIDE MENU */

.list-menu-float {
visibility: visible;
}

.list-menu-float .icon-menu {
visibility: visible;
}

.list-menu-float .icon-menu.anime-list {
visibility: visible;
}

/* LIST CONTAINER */

#list-container {
visibility: visible;
}

/* IMAGE BLOCK */

.cover-block {
visibility: visible;
}

.cover-block #cover-image {
/* Cover image */
visibility: visible;
}

.cover-block .image-container .btn-list-setting {
visibility: visible;
}

/* STATUS MENU */

#status-menu {
visibility: visible;
}

#status-menu .status-button {
visibility: visible;
}

#status-menu .status-button.watching {
visibility: visible;
}

/* SEARCH */

.status-menu-container .search-container {
visibility: visible;
}

/* LIST UNIT */

.list-unit {
visibility: visible;
}

/* STATUS TITLE */

.list-unit .list-status-title {
visibility: visible;
}

/* STATS */

#show-stats-button {
visibility: visible;
}

#advanced-options-button {
visibility: visible;
}

.list-unit .list-stats {
visibility: visible;
}

/* LIST TABLE */

/* Sort row */

.list-table .list-table-header {
visibility: visible;
}

.list-table .list-table-header .header-title {
visibility: visible;
position: fixed;
left: -10%;
}

.list-table .list-table-header .header-title.title {
visibility: visible;
}

/* Data rows */

.list-table tbody.list-item {
visibility: visible;
}

.list-table .list-table-data .data {
visibility: visible;
}

.list-table .list-table-data .data.score {
visibility: visible;
}

.list-table .list-table-data .data.title .link {
visibility: visible;
}

.add-edit-more {
visibility: visible;
}

/* LOADING SPACE */

.list-unit .loading-space {
visibility: visible;
}

/* FOOTER */

footer {
visibility: visible;
}


/* MORE SEPARATION FOR INSPECT ELEMENT USERS */
.list-table .list-table-header .header-title.image {
visibility: visible;
}

.list-table .list-table-header .header-title.number {
visibility: visible;
}

.list-table .list-table-header .header-title.score {
visibility: visible;
}

.list-table .list-table-header .header-title.type{
visibility: visible;
}

.list-table .list-table-header .header-title.progress{
visibility: visible;
}

.list-table .list-table-header .header-title.tags{
visibility: visible;
}

.list-table .list-table-header .header-title.rated{
visibility: visible;
}

.list-table .list-table-header .header-title.started{
visibility: visible;
}



.list-table .list-table-header .header-title.finished{
visibility: visible;
}


.list-table .list-table-header .header-title.days{
visibility: visible;
}


.list-table .list-table-header .header-title.storage{
visibility: visible;
}


.list-table .list-table-header .header-title.priority{
visibility: visible;
}

.list-table .list-table-data .data.number{
visibility: visible;
}

.list-table .list-table-data .data.title{
visibility: visible;
}

.list-table .list-table-data .data.type{
visibility: visible;
}

.list-table .list-table-data .data.progress{
visibility: visible;
}

.list-table .list-table-data .data.rated{
visibility: visible;
}

.list-table .list-table-data .data.storage{
visibility: visible;
}

.list-table .list-table-data .data.licensor{
visibility: visible;
}

.list-table .list-table-data .data.studio{
visibility: visible;
}

.list-table .list-table-data .data.title.clearfix{
visibility: visible;
}

#status-menu .status-button.completed{
visibility: visible;
position: fixed;
right: 2%;
top: 16%;
background: olive;
width: 20%;
}

#status-menu .status-button.onhold{
visibility: visible;
}

#status-menu .status-button.dropped{
visibility: visible;
}

#status-menu .status-button.plantowatch{
visibility: visible;
}

#status-menu .status-button.all_anime{
visibility: visible;
}

.list-menu-float .icon-menu.profile
{
visibility: visible;
}

.list-menu-float .icon-menu.quick-add {
visibility: visible;
}


.list-menu-float .icon-menu.anime-list {
visibility: visible;
}

.list-menu-float .icon-menu.manga-list{
visibility: visible;
}


.list-menu-float .icon-menu.history{
visibility: visible;
}

.list-menu-float .icon-menu.export{
visibility: visible;
display: none;
}

.list-menu-float .icon-menu.logout{
visibility: visible;
}

.list-menu-float .icon-menu.setting{
visibility: visible;
display: none;
}

.list-menu-float .icon-menu.quick-add {
visibility: visible;
}

.list-table > tbody:nth-of-type(2n+1){
visibility: visible;
}





/* REMOVED CODES */
.list-menu-float .icon-menu.export{
visibility: visible;
display: none;
}

.list-menu-float .icon-menu.logout{
visibility: visible;
}

.list-menu-float .icon-menu.setting{
visibility: visible;
display: none;
}

#status-menu .status-button.all_anime {
visibility: visible;
display: none;
}
.list-menu-float .icon-menu.logout,
.list-menu-float .icon-menu.history,
.list-menu-float .icon-menu.anime-list,
.list-menu-float .icon-menu.manga-list {
visibility: visible;
display: none;
}
.header .header-title{
display: none;
}
.btn-menu {

background: red;
left: -100%;
position: fixed;
}








/* TAGS*/






/* ABOUT ME PANEL */

#advanced-options-button{

visibility: visible;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwIPvn-9Qb7UOlnWUgK8kylY);
background-size: 120%;
background-position: top right;
background-color: transparent;
WIDTH: 24%;
height: 30%;
position: fixed;
left: 34%;
top: 9%;
clip-path: polygon(0 0, 70% 0, 100% 100%, 0% 100%);
border: 3px black solid;
font-size: 0;
}


#advanced-options-button:hover {
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwKr9bGSxcAN7jdlxFAYiGoQ);
WIDTH: 24%;
background-color: transparent;
}



#advanced-options-button:before{
position: fixed;
background-color:transparent;
background-size: 70% !important;
height: 40%;
width: 16%;
right: 55%;
top: 25%;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwOM0HHnoiIcI9auRoz3C1Og);
background-position: top right;
background-repeat: no-repeat;
content: """";
pointer-events: none;
background-size: contain;
z-index: 10;
opacity: 0;}






#advanced-options-button:hover:before{
opacity: 1;}



#advanced-options-button:after
{
position: fixed;
height: 100%;
width: 6px;
right: 39% !important;
top: 0%;
content: """";
display: block;
background-color: black;
transform: rotate(-25deg);
}

#advanced-options .advanced-options-header,
#advanced-options .advanced-options-button,
#advanced-options .filter-widget,
#advanced-options .sort-widget {
display: none;
}


#advanced-options {
border: solid black;
z-index: 10002;
height: 90%;
width: 50%;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwImnURbPVCJV5wTdYoHtuSw);
background-repeat: no-repeat;
background-size: contain;
background-position: bottom center;
}





/* RECOMMENDATION/QUICK ADD PANEL */
.list-menu-float .icon-menu.quick-add {
visibility: visible;
background-image: none;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwPLEaXvNgE7JmyUESgpmIto) !important;
background-size: 100% !important;
background-position: 80% bottom !important;;
background-repeat: no-repeat !important;;
position: fixed;
left: 52%;
top: 9%;
background: orange;
background-color: white;
width: 25%;
height: 30%;
clip-path: polygon(0 0, 100% 0, 100% 100%, 30% 100%);
border: 3px black solid;
font-size: 0;
}

.list-menu-float .icon-menu.quick-add:hover{
background-color: orange;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwIUPag3Jh54BMZkJEYGWzHA) !important;
width: 25%;
height: 30%;
}

.list-menu-float .icon-menu.quick-add:after
{
position: fixed;
height: 100%;
width: 4px;
right: 37.6% !important;
top: 0%;
content: """";
display: block;
background-color: black;
transform: rotate(-25.5deg);
}

.list-unit .list-status-title .stats{
font-size: 0;
}


.list-menu-float .icon-menu:hover .text {
width: 94px;
opacity: 0;
}
.list-menu-float .icon-menu svg.icon {
position: absolute;
fill: #323232;
display: none;
}

#fancybox-outer:before{
content: """";
display: block;
z-index: 100;
position: fixed;
background-repeat: no-repeat;
pointer-events: none;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwNZ9gLKIWmOAfWhUaTGscG4) !important;
background-color: transparent !important;
background-position: bottom right;
background-size: 25%;
height: 100%;
width: 100%;
left: 0 !important;
bottom:0 !important;
padding-top: 30%;
}



/* SCORE ASSISTANT PANEL */

.list-table .list-table-header .header-title.score a {
visibility: visible;
background: white;
position: fixed !important;
height: 50%;
width: 20%;
}
.list-table .list-table-header .header-title.score a {
visibility: visible;
background: white;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwKVbEQEO81cLKyWA9xtBDwI);
background-size: 100%, cover;
background-position: bottom center !important;
background-repeat: no-repeat;
font-size: 0;
position: fixed !important;
bottom: 1%;
right: 7%;
height: 58%;
width: 25%;
border: 3px black solid;

z-index: 1000 !important;
}
.list-table .list-table-header .header-title.score a:after{
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwDTMJQX5sDJg8NTOqE1iIUU);
bottom: 45%;
left: 34.5%;
height: 10%;
width: 24%;
background-color: transparent;
content: """";
position: fixed;
background-size: contain;
background-repeat: no-repeat;
}


.list-table .list-table-header .header-title.score a:hover{
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwKzGtbC7KfWIN2DearwqdbQ);
background-color: rgba(243, 158, 206, 1);
}
.list-table .list-table-header .header-title.score a:before{
position: fixed;
background-color:transparent;
background-size: 100% !important;
height: 40%;
width: 16%;
right: 35%;
bottom: 6%;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwPgEi1I94PJ_EjyzFDdtjtM);
background-position: top right;
background-repeat: no-repeat;
content: """";
pointer-events: none;
background-size: contain;
z-index: 100;
opacity: 0;
}

.list-table .list-table-header .header-title.score a:hover:before{
opacity: 1;
}
.list-table .list-table-header .header-title.score a:hover:after{
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwNJN2lUFF8r9rNsjHD1-vhw);
transform: rotate(-15deg);
margin-left: -50px !important;
background-size: 100%;
width: 26%;
left: 36%;
}




.list-table .list-table-header .header-title.score a {
right: 41%;
}



/* MADOKA/EXIT PANEL */
.list-menu-float .icon-menu.profile {
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwN4iYRxSxh02II8h1UZ_iNE) !important;
background-position: 140% 20%, top left;
background-repeat: no-repeat;
background-size: contain, 150%;
background-color: white;
font-size: 0;
width: 17%;
height: 24%;
position: fixed !important;
right: 23% !important;
bottom: 1% !important;
border: 3px black solid;
z-index: 1 !important;
}

.list-menu-float .icon-menu.profile:hover{
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwHEhRwmkMQzRYZWky0631SI)!important;;
background-color: rgba(171, 158, 220, 1);
}

.list-menu-float .icon-menu.profile:before{
position: fixed;
background-color:transparent;
background-size: contain !important;;
height: 35%;
width: 20%;
right: 20%;
bottom: 0;
background-image: url(https://i.imgur.com/HbFXpz5.png);
background-position: top left;
background-repeat: no-repeat;
content: """";
pointer-events: none;
background-size: contain;
z-index: 10;
opacity: 0;

}

.list-menu-float .icon-menu.profile:hover:before{
opacity: 1;
}

.list-menu-float .icon-menu.profile:after{
position: fixed;
background-color:black;
background-size: contain !important;
height: 2%;
width: 8%;
right: 32.3%;
background-position: top right;
background-repeat: no-repeat;
content: ""The exit appears!"";
font-size: 12px !important;
color: white;
pointer-events: none;
background-size: contain;
z-index: 10;
opacity: 1;

}

.list-menu-float .icon-menu.profile:hover:after{
opacity: 0;
}





/* COPYRIGHT PANEL */
#footer-block {
position: fixed;
margin: auto;
right: 23%;
width: 17%;
bottom: 27%;
height: 29%;
background-color: white !important;

background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwKhtbfX1xxLiqYwy84MbUj0);
background-size: contain, cover;
border: 3px black solid;
z-index: -10;
background-position: center 101%;
background-repeat: no-repeat;
}

#footer-block:hover{
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwINeauqPcArIwhTIondOSKU), url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwHAbi_4WeYoDxRGfXgTlesg);
}
#copyright{
color: black !important;
font-size: 9px;
}
#copyright:after{
content: ""Layout by Shishio-kun, made with Photoshop and JASC Animation Shop.""}


/* STATS */

.header .header-menu .header-info{
background: transparent;
position: fixed;
right: 0%;
text-align: center;
top: 7%;
width: 22%;
z-index: 10001;
color: black;
}

.header a {

font-weight: bold;
color: black;

}






/* RIGHT PANEL WITH CATEGORIES */

#status-menu .status-button.watching {
visibility: visible;
background: transparent;
position: fixed;
right: 2%;
top: 10%;
width: 20%;
height: 10%;
font-size: 0;
z-index: 11111 !important;
}

#status-menu .status-button.watching:after {
visibility: visible;
background-color: transparent;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwPzeHr4HcZycy5dRjvUky7k);
background-position: left top;
background-repeat: no-repeat;
background-size: cover;
position: fixed;
left:0%;
top: 0%;
width: 40%;
height: 100%;
content: """";
opacity: 0;
pointer-events: none;
}

#status-menu .status-button.watching:hover:after {
-webkit-animation-name: slide; /* Safari 4.0 - 8.0 */
-webkit-animation-duration: 1s; /* Safari 4.0 - 8.0 */
animation-name: slide;
animation-duration: 1s;
opacity: 1;
}

@-webkit-keyframes slide {
from {left: -50%}
to { left:0%;}
}

@keyframes slide {
from {left: -50%}
to { left:0%;}
}



#status-menu .status-button.completed {
visibility: visible;
position: fixed;
right: 2%;
top: 23%;
background: transparent;
width: 20%;
height: 10%;
font-size: 0 !important;
color: transparent;
z-index: 100 !important;
}


#status-menu .status-button.completed:after {
visibility: visible;
background-color: transparent;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwJG8sK0TkWHfGlf00V0tKXE);
background-position: left top;
background-repeat: no-repeat;
background-size: cover;
position: fixed;
left:0%;
top: 0%;
width: 40%;
height: 100%;
content: """";
opacity: 0;
font-size: 0;
pointer-events: none;
z-index: 100 !important;}


#status-menu .status-button.completed:hover:after {
-webkit-animation-name: slide; /* Safari 4.0 - 8.0 */
-webkit-animation-duration: 1s; /* Safari 4.0 - 8.0 */
animation-name: slide;
animation-duration: 1s;
opacity: 1;
}


#status-menu .status-button.onhold {
visibility: visible;
position: fixed;
right: 2%;
top: 36%;
background: transparent;
width: 20%;
height: 10%;
font-size: 0;
}
#status-menu .status-button.onhold:after {
visibility: visible;
background-color: transparent;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwPXD-Xd85hU7nKptfnefKV4);
background-position: left top;
background-repeat: no-repeat;
background-size: cover;
position: fixed;
left:0%;
top: 0%;
width: 40%;
height: 100%;
content: """";
opacity: 0;
pointer-events: none;
}

#status-menu .status-button.onhold:hover:after {
-webkit-animation-name: slide; /* Safari 4.0 - 8.0 */
-webkit-animation-duration: 1s; /* Safari 4.0 - 8.0 */
animation-name: slide;
animation-duration: 1s;
opacity: 1;
}



#status-menu .status-button.dropped {
visibility: visible;
position: fixed;
right: 2%;
top: 48%;
background: transparent;
width: 20%;
height: 10%;
font-size: 0;
}
#status-menu .status-button.dropped:after {
visibility: visible;
background-color: transparent;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwHxm_P6-3_0x3Q3QqiRi4lI);
background-position: left top;
background-repeat: no-repeat;
background-size: cover;
position: fixed;
left:0%;
top: 0%;
width: 40%;
height: 100%;
content: """";
opacity: 0;
pointer-events: none;
}

#status-menu .status-button.dropped:hover:after {
-webkit-animation-name: slide; /* Safari 4.0 - 8.0 */
-webkit-animation-duration: 1s; /* Safari 4.0 - 8.0 */
animation-name: slide;
animation-duration: 1s;
opacity: 1;
}


#status-menu .status-button.plantowatch {
visibility: visible;
position: fixed;
right: 2%;
top: 60%;
background: transparent;
width: 20%;
height: 10%;
font-size: 0;
}
#status-menu .status-button.plantowatch:after {
visibility: visible;
background-color: transparent;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwFdtKMt-Vy84PEfz6lsC-ds);
background-position: left top;
background-repeat: no-repeat;
background-size: cover;
position: fixed;
left:0%;
top: 0%;
width: 40%;
height: 100%;
content: """";
opacity: 0;
pointer-events: none;
}

#status-menu .status-button.plantowatch:hover:after {
-webkit-animation-name: slide; /* Safari 4.0 - 8.0 */
-webkit-animation-duration: 1s; /* Safari 4.0 - 8.0 */
animation-name: slide;
animation-duration: 1s;
opacity: 1;
}

.status-menu-container .search-container {
visibility: visible;
position: fixed;
background: red;
bottom: 10%;
right: 0;
width: 10%;
}

.status-menu-container .search-container {
visibility: visible;
position: fixed;
background: transparent;
bottom: 1%;
right: 12%;
}

.status-menu-container {
position: fixed;
background-color: white;
height: 89.5%;
width: 21%;
right: 1%;
bottom: 1%;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwEKju5WNWzoHVs9aANc-ZoY);
background-position: 100% 180%;
background-repeat: no-repeat;
border: 3px black solid;
}

.status-menu-container:hover{
background-color: rgb(199,239,241);
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwMY6dBoE7GCM_KrUv8ihQoA);

}

.status-menu-container:After{
position: fixed;
background-color: transparent;
height: 90%;
width: 21%;
right: 1%;
bottom: 8%;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwGMI6NgUR17-0F41q3Jd9AM);
background-position: bottom right;
background-repeat: no-repeat;
content: """";
pointer-events: none;
background-size: contain;
}


.status-menu-container:before{
position: fixed;
background-color: transparent;
height: 100%;
width: 21%;
right: 16%;
bottom: 18%;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwPLNy0_k96Vby79bSkVZ1PE);
background-position: bottom right;
background-repeat: no-repeat;
content: """";
pointer-events: none;
background-size: contain;
z-index: 10;
opacity: 0;

}

.status-menu-container:hover:before{
-webkit-animation-name: A1; /* Safari 4.0 - 8.0 */
-webkit-animation-duration: 10s; /* Safari 4.0 - 8.0 */
animation-name: A1;
animation-duration: 10s;}


@-webkit-keyframes A1 {
0% {opacity: 0}
24% {opacity: 0;}
25% {opacity: 1;}
99% {opacity: 1}
100% {opacity: 0;}
}

.status-menu-container .status-menu .status-button::after {
background-color: transparent;}

.status-menu-container.fixed {
position: fixed !important;
top: 9%;
bottom: 1% !important;
}




/* HEADING */
body[data-query*='""status"":1']:before
{
background-color: #F1EBDF;
height: 6%;
padding-top: 1%;
content: ""Here is Shishio's current anime, you stalker."";
font-size: 36px;
color: black;
position: fixed;
left: 0% !important;
top: 0%;
width: 100%;
text-align: center;
pointer-events: none;
display: block;
z-index: 1 !important;
}

body[data-query*='""status"":2']:before
{
background-color: #F1EBDF;
height: 7%;
padding-top: 1%;
content: ""This long list is Shishio's Completed Anime! It's ok to feel impressed and turned on, that's natural."";
font-size: 25px;
color: black;
position: fixed;
left: 0% !important;
top: 0%;
width: 100%;
text-align: center;
pointer-events: none;
display: block;
z-index: 1 !important;
}

body[data-query*='""status"":3']:before
{
content: ""Shishio's On-hold anime, but it might as well be dropped since he never goes back to these."";
background-color: #F1EBDF;
height: 6%;
padding-top: 1%;
font-size: 26px;
color: black;
position: fixed;
left: 0% !important;
top: 0%;
width: 100%;
text-align: center;
pointer-events: none;
display: block;

z-index: 1 !important;
}

body[data-query*='""status"":4']:before
{
content: ""Dropped anime, the worst of the worst! Prepare to be offended by our comments!"";
background-color: #F1EBDF;
height: 6%;
padding-top: 1%;
font-size: 25px;
color: black;
position: fixed;
left: 0% !important;
top: 0%;
width: 100%;
text-align: center;
pointer-events: none;
display: block;

z-index: 1 !important;
}

body[data-query*='""status"":6']:before
{
content: ""Planned anime AKA seems-good-but-not-good-enough-to-start-right-away anime."";
background-color: #F1EBDF;
height: 6%;
padding-top: 1%;
font-size: 25px;
color: black;
position: fixed;
left: 0% !important;
top: 0%;
width: 100%;
text-align: center;
pointer-events: none;
display: block;
z-index: 1 !important;
}





/* FONT */

*{ font-family: ace, fontawesome !important;}






/* LIST LEFT TABLE SETTINGS */

/* COVER SIZE */
.data.image a:after{
width: 200px;
height: 300px;
}


/* COVER POSITION */
.data.image a:after{
position: fixed;
right: 0;
left: -40px;
top: 25%;
margin: auto;

}


/* OTHER CODES */
.data.image a:after
{content: """";
display: block !important;
background-color: rgba(0,0,0,.3);
background-position: center !important;
background-repeat: no-repeat !important;
background-size: cover;
border: 1px solid #ffffff;
box-shadow: 0 2px 5px rgba(0,0,0, 0.7);
visibility: hidden;
opacity: 1;
pointer-events: none !important;;
transition: opacity .8s linear, margin-left .5s ease, transform 1s ease-in-out;
z-index: 5;}


.list-table .list-table-data:hover .data.image a:after {
visibility: visible;

pointer-events: none !important;;
opacity: 1;
transition: .3s ease-out;}


/* review section */

.list-table .list-table-data .data.tags {
position: fixed;
right: 0;
left: 0;
top: 50%;
margin: auto;
background-image: url(https://image.myanimelist.net/ui/5LYzTBVoS196gvYvw3zjwAmmNei3ftWHltBOI97xl-A);
display: inline !important;
line-height: 20px !important;
text-align:center;
pointer-events: none !important;
z-index: 6;
background-size: contain;
padding: 120px !important;
padding-top: 155px !important;;
height:450px;
width: 550px;
background-repeat: no-repeat;
background-color: transparent;
background-size: contain;
opacity: 0;
font-size: 18px;
}



.list-table .list-table-data .data.tags *
{
animation-name: pop;
animation-duration: 1s;
pointer-events: none !important;
color: black !important;}


.list-table .list-table-data:hover .data.tags, .list-table .list-table-data:hover .data.tags span:after {
opacity: 1;
animation-name: pop;
animation-duration: 1s;
pointer-events: none !important;
}

@keyframes pop {
0% { height:450px;
width: 550px;
font-size: 0px;}
12% { height:800px;
width: 800px;
font-size: 0px;}
26% { height:450px;
width: 550px;
font-size: 0px;
}
27% { height:450px;
width: 550px;
font-size: 18px;
}
100% { height:450px;
width: 550px;
font-size: 18px;}
}



.list-container {
position: absolute;
left: -5%;
filter: grayscale !important;
}

.list-table .list-table-header .header-title {
visibility: visible;
position: fixed;
left: -10%;
}

.list-table {
border-collapse: collapse;
width: 70%;

}
#list-container {
visibility: visible;
overflow: auto;
height: 96%;
width: 46%;
}

.list-menu-float {
border: 0;
}

.list-table {
width: 55%;
position: relative;
left: -20%;
}




.list-unit .list-status-title{
background-color: transparent;
position: fixed;
top: 0;
font-size: 0;
}



.list-table > tbody:nth-of-type(2n+1){
background: white;
}

.list-table .list-table-data .data{
border: none;
}


#list-container {
border: 3px black solid;
width: 32%;
top: 9%;
left: 1%;
height: 100%;
background: white;
}



.list-unit .list-status-title .text {
pointer-events: none;
}


#advanced-options {
z-index: 10002;

}

.list-unit {
width: 931px;

}


.list-table .list-table-data .data {
-webkit-filter: grayscale(100%); /* Safari 6.0 - 9.0 */
filter: grayscale(100%);
}



.list-table-data:hover td
{
-webkit-filter:inherit !important;;
filter: inherit !important;
background-color: whitesmoke;
}"
hfdkNaGJ,ukaelToneC.h,Kaelygon,C,Friday 7th of July 2023 04:56:55 AM CDT,"
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include ""portaudio.h""


//typedef
//fraction (a, b)
typedef struct {
	uint16_t a;
	uint16_t b;
} Frac;

//(data*, size, position)
typedef struct {
	const uint8_t* data;  // Pointer to the raw audio data
	size_t size;      // Size of the audio data in bytes
	size_t position;      // Current position in the audio data
} AudioData;


//Input Output

void writeAudioDataToFile(const char* filename, const AudioData* audio) {
	// Open the file in binary mode for writing
	FILE* file = fopen(filename, ""wb"");
	if (file == NULL) {
		fprintf(stderr, ""Failed to open the file for writing.\n"");
		return;
	}

	// Write the audio data to the file
	size_t bytesWritten = fwrite(audio->data, sizeof(uint8_t), audio->size, file);
	if (bytesWritten != audio->size) {
		fprintf(stderr, ""Failed to write the audio data to the file.\n"");
	}

	// Close the file
	fclose(file);
}


//Tone generation
// Callback function that is called by PortAudio to fill the output buffer
static int audioCallback(
	const void* inputBuffer, 
	void* outputBuffer,
	unsigned long framesPerBuffer,
	const PaStreamCallbackTimeInfo* timeInfo,
	PaStreamCallbackFlags statusFlags, 
	void* userData
){
	AudioData* audioData = (AudioData*)userData;
	uint8_t* out = (uint8_t*)outputBuffer;
	size_t remainingData = audioData->size - audioData->position;
	size_t numFrames = framesPerBuffer;
	
	// If there is not enough audio data remaining, fill the buffer with silence
	if (remainingData < framesPerBuffer) {
		numFrames = remainingData;
		for (size_t i = 0; i < numFrames; i++) {
			out[i] = 128;  // 128 represents silence for unsigned 8-bit audio
		}
	}
	
	// Copy the audio data to the output buffer
	for (size_t i = 0; i < numFrames; i++) {
		out[i] = audioData->data[audioData->position++];
	}
	
	return paContinue;
}


//wave function pointers
//(uint8_t num)
typedef uint8_t (*ukael8)(uint8_t num);
//(uint16_t num)
typedef uint8_t (*ukael16)(uint16_t num);
//(uint8_t num, uint8_t arg1)
typedef uint8_t (*ukaelArgs2)(uint8_t num, uint8_t arg1);

//testing
typedef uint8_t (*ukaelArgs3)(uint16_t num, uint8_t arg1, uint8_t arg2);

//wave pointers wrapper
typedef uint8_t (*ukaelN)(uint32_t num, uint8_t arg1, uint8_t arg2);

// WaveMap (const char* id, func8, func16, args2)
typedef struct {
	const char* id;
	ukael8 func8;
	ukael16 func16;
	ukaelArgs2 args2;
	ukaelArgs3 args3;
} WaveMap;


// WaveMap waveList. List of various function pointers
const WaveMap waveList[] = {
	//(uint8)
	{""sine"", 		ukaelSine					},
	{""csine"", 		ukaelCSine					},
	{""triangle"", 	ukaelTriangle				},
	{""saw"", 		ukaelSaw					},
	{""square"", 		ukaelSquare					},
	{""testing"", 	testing						},

	//(uint16)
	{""noise"", 		NULL, ukaelNoise			},
	{""wnoise"", 		NULL, ukaelWNoise			},

	//(uint8, uint8)
	{""pulse"", 		NULL, NULL, ukaelPulse		},

	//uint16, uint8, uint8
	{""rwalk"", 	NULL, NULL, NULL, ukaelRWalk	}
};


// Number of elements in the mapping table
const size_t waveCount = sizeof(waveList) / sizeof(waveList[0]);

// generate and store waveform to buffer
void generateTone(
	uint8_t* buffer,
	Frac freq,
	uint32_t length,
	uint8_t amplitude,
	const char* waveKey,
	uint8_t arg0,
	uint8_t arg1
) {
	ukaelN waveFunc = NULL;

	// Find the waveform function pointers based on the string identifier
	for (size_t i = 0; i < waveCount; ++i) {
		if (strcmp(waveKey, waveList[i].id) == 0) {

			ukael8 wf8 = waveList[i].func8;
			ukael16 wf16 = waveList[i].func16;
			ukaelArgs2 args2 = waveList[i].args2;
			ukaelArgs3 args3 = waveList[i].args3;

			if (wf8 != NULL) {
				waveFunc = (ukaelN)wf8;
				break;
			}
			if(wf16 != NULL) {
				waveFunc = (ukaelN)wf16;
				break;
			}
			if(args2 != NULL) {
				waveFunc = (ukaelN)args2;
				break;
			}
			if(args3 != NULL) {
				waveFunc = (ukaelN)args3;
				break;
			}

		}
	}

	if(waveFunc==NULL){
		printf(""Invalid key!\n"");
		return;
	}

	//Generate
	uint8_t value;
	for (uint32_t i = 0; i < length; ++i) {
		value = waveFunc(i * freq.a / freq.b,arg0,buffer[i-(i!=0)]); //i mul by Frac and generate
		value = value * amplitude / UINT8_MAX + (UINT8_MAX - amplitude) / 2; // amplitude
		buffer[i] = (uint8_t)value; // store to buffer
	}

	return;
}"
H7bxbU3r,OutputDrinksTree,CR7CR7,Java,Friday 7th of July 2023 04:53:54 AM CDT,"Drinks
  Hot
    Tea
      Green Tea
      Black Tea
    Coffee
      Americano
      Latte
      Cappuccino
  Cold
    Non-Alcoholic
      Cola
      Fanta
      Soda
    Alcoholic
      Wine
      Beer
      Whisky
"
xNXGbZV4,DrinksTreeDsa,CR7CR7,Java,Friday 7th of July 2023 04:52:30 AM CDT,"import java.util.ArrayList;
import java.util.List;

class Drink {
    private String name;
    private List<Drink> children;

    public Drink(String name) {
        this.name = name;
        this.children = new ArrayList<>();
    }

    public void addChild(Drink drink) {
        children.add(drink);
    }

    public String getName() {
        return name;
    }

    public List<Drink> getChildren() {
        return children;
    }
}

public class DrinkHierarchy {
    public static void main(String[] args) {
        // Create the drink hierarchy
        Drink root = new Drink(""Drinks"");

        Drink hot = new Drink(""Hot"");
        Drink cold = new Drink(""Cold"");
        root.addChild(hot);
        root.addChild(cold);

        Drink tea = new Drink(""Tea"");
        Drink coffee = new Drink(""Coffee"");
        hot.addChild(tea);
        hot.addChild(coffee);

        Drink greenTea = new Drink(""Green Tea"");
        Drink blackTea = new Drink(""Black Tea"");
        tea.addChild(greenTea);
        tea.addChild(blackTea);

        Drink americano = new Drink(""Americano"");
        Drink latte = new Drink(""Latte"");
        Drink cappuccino = new Drink(""Cappuccino"");
        coffee.addChild(americano);
        coffee.addChild(latte);
        coffee.addChild(cappuccino);

        Drink nonAlcoholic = new Drink(""Non-Alcoholic"");
        Drink alcoholic = new Drink(""Alcoholic"");
        cold.addChild(nonAlcoholic);
        cold.addChild(alcoholic);

        Drink cola = new Drink(""Cola"");
        Drink fanta = new Drink(""Fanta"");
        Drink soda = new Drink(""Soda"");
        nonAlcoholic.addChild(cola);
        nonAlcoholic.addChild(fanta);
        nonAlcoholic.addChild(soda);

        Drink wine = new Drink(""Wine"");
        Drink beer = new Drink(""Beer"");
        Drink whisky = new Drink(""Whisky"");
        alcoholic.addChild(wine);
        alcoholic.addChild(beer);
        alcoholic.addChild(whisky);

        // Print the drink hierarchy using pre-order traversal
        printDrinkHierarchy(root, 0);
    }

    public static void printDrinkHierarchy(Drink drink, int level) {
        StringBuilder indent = new StringBuilder();
        for (int i = 0; i < level; i++) {
            indent.append(""  "");
        }

        System.out.println(indent + drink.getName());

        for (Drink child : drink.getChildren()) {
            printDrinkHierarchy(child, level + 1);
        }
    }
}
"
Yh3yggcq,ukaelWaceC.h,Kaelygon,C,Friday 7th of July 2023 04:51:19 AM CDT,"//waveform functions
#include <stdint.h>

unsigned long long rdtsc(){
	unsigned int lo,hi;
	__asm__ __volatile__ (""rdtsc"" : ""=a"" (lo), ""=d"" (hi));
	return ((unsigned long long)hi << 32) | lo;
}

uint8_t rdrand(){
		uint32_t num;
		asm volatile(""rdrand %0""  : ""=r"" (num));
    return num;
}

//refresh random seed
unsigned int ENTROPY=2599267487;
void reseed(){
	ENTROPY^=ENTROPY<<9;
	if((ENTROPY&255)==0){
		unsigned int buf;
		__asm__ __volatile__ (""rdtsc"" : ""=a"" (buf));
		ENTROPY<<=17;
		ENTROPY^=buf;
		return;
	}
	ENTROPY^=ENTROPY>>7;
	return;
}


//sine approximation.
uint8_t ukaelSine(uint8_t num) {						//n=floor(n)
	uint8_t secondHalf = (num >> 7);					//s=floor(n%255/128)
	num <<= 1;											//2*n%255
	uint16_t buf = ((uint16_t)(num)<<1) - UINT8_MAX;	//(2*n-255)%65536
	num = (uint8_t)((buf * buf) >> 9);					//(floor(n^2%65536)/512)%255
	num = secondHalf ? num : ~num;						//n = s ? n : 255-n
	return num;
}

//Crunchy Sine
uint8_t ukaelCSine(uint8_t num) {
	uint8_t secondHalf = (num >> 7);
	uint8_t evenQuarter = (num >> 6)==0 || (num >> 6)==2;
	num = evenQuarter ? ~num : num;	//invert even quarters
	num <<= 2;	//2 period saw
	num >>= 16;	//square root. Crunchy precision
	num*=num;	//square
	num >>= 1;	//divide by 2
	num = secondHalf ? num : ~num;	//invert 2nd half
	return num;
}

//triangle
uint8_t ukaelTriangle(uint8_t num) {
	num+=63;
	uint8_t secondHalf = (num >> 7);
	num <<= 1;
	num = secondHalf ? ~num : num;	//invert 2nd half
	return num;
}

//Saw
uint8_t ukaelSaw(uint8_t num){
	num+=127;	//add UINT_MAX/2
	return num;
}

//Square
uint8_t ukaelSquare(uint8_t num){
	num = ( num>>7 ) ? UINT8_MAX : 0; //hi if 0 to 0.5, low if 0.5 to 1.0
	return num ;
}

//Pulse square 2 arguments
uint8_t ukaelPulse(uint8_t num, uint8_t dutyCycle) {
	num = (num >= dutyCycle) ? UINT8_MAX : 0;	//same as square but dutyCycle sets treshold
	return num ;
}


//Time dependent noise
uint8_t ukaelNoise(uint16_t num) {
	num=num*(ENTROPY<<9);
	if(((num&31)==0)){
		reseed();
	}
	num^=ENTROPY>>7;
    return num;
}

//White noise
uint8_t ukaelWNoise(uint16_t num) {
	reseed();
	num*=3083*ENTROPY;
	return num;
}

//random walk
uint8_t ukaelRWalk(uint16_t num, uint8_t arg1, uint8_t arg2) {
	
	uint8_t random = ukaelNoise(num)>>(arg1&6); //(0 to 255) / 3
	uint8_t sign = random&1; //add=0 subtract=1
	random>>=1;
	random=arg2+(1-sign)*random-(sign)*random; //add or subtract random/2 and reuse random as result
	if(sign==1 && random>arg2){ //underflow 
		return 0;
	}
	if(sign==0 && random<arg2){ //overflow
		return 255;
	}
    return random;
}


uint8_t testing(uint16_t num){
	num*=num*.5;
	num*=(ukaelCSine(num)*ukaelCSine(num))<<4;
    return num;
}




/*
//pointy triangle
uint8_t ukaelTesting(uint8_t num, uint8_t arg1, uint8_t arg2) {
	uint8_t secondHalf = (num >> 7);
	uint8_t evenQuarter = (num >> 6)==0 || (num >> 6)==2;
	num = evenQuarter ? ~num : num;	//invert even quarters

	num<<=2;
	float buf = num;
	buf = buf/(buf+UINT8_MAX)*UINT8_MAX;
	num = buf;
	
	num = secondHalf ? num : ~num;	//invert 2nd half
	return num;
}
*/"
4BCMi7D1,UserRestController,nikolstoyneva,Java,Friday 7th of July 2023 04:47:55 AM CDT,"@RestController
@RequestMapping(""/api/users"")
public class UserRestController {
    private final UserService userService;
    private final AuthenticationHelper authenticationHelper;
    private final UserMapper userMapper;
    private final PostMapper postMapper;
    private final CommentMapper commentMapper;

    @Autowired
    public UserRestController(UserService userService, AuthenticationHelper authenticationHelper, UserMapper userMapper, PostMapper postMapper, CommentMapper commentMapper) {
        this.userService = userService;
        this.postMapper = postMapper;
        this.commentMapper = commentMapper;
        this.authenticationHelper = authenticationHelper;
        this.userMapper = userMapper;
    }

    @GetMapping
    public List<UserDtoOut> getAll(@RequestHeader HttpHeaders headers,
                                   @RequestParam(required = false) String firstName,
                                   @RequestParam(required = false) String username,
                                   @RequestParam(required = false) String sortBy,
                                   @RequestParam(required = false) String sortOrder) {
        try {
            authenticationHelper.tryGetUser(headers);
            return userService.getAll(firstName, username, sortBy, sortOrder)
                    .stream()
                    .map(userMapper::toDto)
                    .collect(Collectors.toList());
        } catch (AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    @GetMapping(""/admins"")
    public List<UserDtoOut> getAdmins(@RequestHeader HttpHeaders headers) {
        try {
            authenticationHelper.tryGetUser(headers);
            return userService.getAdmins().stream()
                    .map((userMapper::toDto))
                    .collect(Collectors.toList());
        }  catch (AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }

    }

    @GetMapping(""/id/{id}"")
    public UserDtoOut getById(@RequestHeader HttpHeaders headers, @PathVariable int id) {
        try {
            authenticationHelper.tryGetUser(headers);
            return userMapper.toDto(userService.getById(id));
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        }  catch (AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }

    }

    @GetMapping(""/username/{username}"")
    public UserDtoOut getByUsername(@RequestHeader HttpHeaders headers, @PathVariable String username) {
        try {
            authenticationHelper.tryGetUser(headers);
            return userMapper.toDto(userService.getByUsername(username));
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        }  catch (AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    @GetMapping(""/{id}/comments"")
    public List<CommentDtoOut> getUserComments(@RequestHeader HttpHeaders headers, @PathVariable int id) {
        try {
            authenticationHelper.tryGetUser(headers);
            List<Comment> comments = userService.getById(id).getComments().stream().toList();

            if (comments.size() == 0) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, ""Comments not found."");
            }

            return comments.stream().map(commentMapper::toDto).collect(Collectors.toList());
        } catch (AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        }
    }

    @GetMapping(""/{id}/posts"")
    public List<PostDtoOut> getUserPosts(@RequestHeader HttpHeaders headers, @PathVariable int id) {
        try {
            authenticationHelper.tryGetUser(headers);
            List<Post> posts = userService.getById(id).getPosts().stream().toList();

            if (posts.size() == 0) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, ""Posts not found."");
            }

            return posts.stream().map(postMapper::objectToDto).collect(Collectors.toList());
        } catch (AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        }
    }

    @PostMapping
    public UserDtoOut create(@Valid @RequestBody UserDtoIn userDtoIn) {
        try {
            User user = userMapper.fromDto(userDtoIn);
            userService.create(user);
            return userMapper.toDto(user);
        } catch (DuplicateEntityException e) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, e.getMessage());
        }
    }

    @PutMapping(""/update"")
    public UserDtoOut update(@RequestHeader HttpHeaders headers, @Valid @RequestBody UserDtoIn userDtoCreate) {
        try {
            User loggedUser = authenticationHelper.tryGetUser(headers);
            User update = userMapper.fromDto(loggedUser.getId(), userDtoCreate);
            userService.update(loggedUser, update);
            return userMapper.toDto(update);
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        } catch (DuplicateEntityException e) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, e.getMessage());
        } catch (UnauthorizedOperationException | AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    @PutMapping(""/admin/{id}"")
    public UserDtoOut makeAdmin(@RequestHeader HttpHeaders headers, @PathVariable int id,  @RequestBody(required = false) String phoneNumber) {
        try {
            User loggedUser = authenticationHelper.tryGetUser(headers);
            userService.makeAdmin(id, loggedUser, phoneNumber);
            return userMapper.toDto(userService.getById(id));
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        } catch (UnauthorizedOperationException | AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    @PutMapping(""/admin/{id}/reject"")
    public UserDtoOut makeRegularUser(@RequestHeader HttpHeaders headers, @PathVariable int id) {
        try {
            User loggedUser = authenticationHelper.tryGetUser(headers);
            userService.makeRegularUser(id, loggedUser);
            return userMapper.toDto(userService.getById(id));
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        } catch (UnauthorizedOperationException | AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    @PostMapping(""/phone-number"")
    public void createPhoneNumber(@RequestHeader HttpHeaders headers, @RequestBody String phoneNumber) {
        try {
            User loggedUser = authenticationHelper.tryGetUser(headers);
            userService.createPhoneNumber(loggedUser, phoneNumber);
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        } catch (UnauthorizedOperationException | AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    @PutMapping(""/phone-number"")
    public void updatePhoneNumber(@RequestHeader HttpHeaders headers, @RequestBody String phoneNumber) {
        try {
            User loggedUser = authenticationHelper.tryGetUser(headers);

            userService.updatePhoneNumber(loggedUser, phoneNumber);
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        } catch (UnauthorizedOperationException | AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    @DeleteMapping(""/phone-number"")
    public void deletePhoneNumber(@RequestHeader HttpHeaders headers, @RequestBody String phoneNumber) {
        try {
            User loggedUser = authenticationHelper.tryGetUser(headers);

            userService.deletePhoneNumber(loggedUser, phoneNumber);
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        } catch (UnauthorizedOperationException | AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }

    @DeleteMapping(""/{id}"")
    public void delete(@RequestHeader HttpHeaders headers, @PathVariable int id) {
        try {
            User user = authenticationHelper.tryGetUser(headers);
            userService.delete(id, user);
        } catch (EntityNotFoundException e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());
        } catch (UnauthorizedOperationException | AuthorizationException e) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());
        }
    }
}
"
