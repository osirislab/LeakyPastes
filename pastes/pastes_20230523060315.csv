id,title,username,language,date,content
3cBDY5A1,SCRAPPED Carousel,ValerioLyndon,CSS,Tuesday 23rd of May 2023 01:02:16 AM CDT,"@\import ""https://malscraper.azurewebsites.net/covers/all/anime/presets/dataimagelink"";
/* @import url('https://fonts.googleapis.com/css?family=Roboto|Righteous|Teko'); */
@import url('https://fonts.googleapis.com/css?family=Oxygen');


@keyframes fade {
	0% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}
/* @keyframes intro {
	0% {
		transform: translateY(calc(-50vw + -50%));
	}
	100% {
		transform: translateY(0);
	}
} */
@keyframes intro2 {
	0% {
		transform: translateY(-100vw);
		height: 200vw;
	}
	100% {
		transform: translateY(0);
		height: calc(100vw - 74px);
	}
}

body, html {
	font: 12px/1 Oxygen, sans-serif;
}
html {
	width: 100vh;
	height: 100vw;
	overflow: hidden;
	
	transform: rotate(-90deg);
	transform-origin: left top;
	margin-top: 100vh;
}

body {
	width: 100vh;
	height: calc(100vw - (44px + 2vh));
	margin-top: calc(44px + 2vh);
	background: #111 !important;
	overflow-x: hidden;
	overflow-y: auto;
	
/* 	animation: intro 5s cubic-bezier(0.405, 0.040, 0.180, 1.000) 1 0.4s backwards; */
/* 	animation: intro2 5s cubic-bezier(0.405, 0.040, 0.180, 1.000) 1 0.4s backwards; */
}

a {
	color: #fff !important;
	text-decoration: none !important;
	
	transition: all 0.15s ease;
}
a:hover {
	color: #14b3e9 !important;
}
::-webkit-scrollbar {
	width: 12px;
	background: #183458;
}
::-webkit-scrollbar-track-piece {
	display: none;
}
::-webkit-scrollbar-track {
	background: #111;
	border-radius: 6px;
}
::-webkit-scrollbar-thumb {
	width: 12px;
	background: rgb(36, 72, 197);
	border-radius: 6px;
	transition: all 0.3s ease;
}
::-webkit-scrollbar-button {
	height: 12px;
	background: #183458 no-repeat center;
	background-blend-mode: soft-light;
}
::-webkit-scrollbar-button:start {
	background-image: url(https://i.imgur.com/iMOZI4Q.png);
	border-radius: 0 0 6px 6px;
}
::-webkit-scrollbar-button:end {
	background-image: url(https://i.imgur.com/Oe1DIWT.png);
	border-radius: 6px 6px 0 0;
}
::-webkit-scrollbar-corner, body::-webkit-resizer {
	background: none;
}

/* @keyframes arrow {
	0%,100% {
		transform: translateX(0);
	}
	50% {
		transform: translateX(1.5vh);
	}
}
body:before {
	content: ""\f054"";
	position: fixed;
	top: calc(50% - 15px);
	right: 10vw;
	
	width: 7.5vh;
	height: 7.5vh;
	
	color: #fff;
	font: 7.5vh/1 FontAwesome;
	text-shadow: 0px 0px 2px #000;
	
	animation: arrow 1.5s ease infinite;
	z-index: 1;
} */
/* arrow right \f054
arrow down \f078
arrow up \f077
arrow left \f053 */

/* PAGE BASE */

.list-container {
	position: relative;
	
	width: auto;
	padding-top: 90vw;
	background: none;
	border: none;
}
.list-block {
	min-height: 0;
	margin: 0 !important;
}
.list-unit {
	width: 100%;
}

/* HEADERS */

.header {
	position: fixed;
	top: 0;
	right: 0;
	
	width: calc(40px + 2vh);
	height: calc(40px + 2vh);
	
	transform: rotate(90deg) translateY(calc(-40px + -2vh));
	transform-origin: left top;
	z-index: 110;
}
.header .header-title {
	top: 0;
	left: 0;
	
	width: calc(40px + 2vh);
	height: calc(40px + 2vh);
	background: none;
	
	font-size: 0;
	text-indent: initial;
	
	transition: all 0.3s ease;
}
.header .header-title:hover {
	background: #080808;
}
.header .header-title:before {
	content: ""\f015"";
	
	display: block;
	width: calc(40px + 2vh);
	height: calc(40px + 2vh);
	
	color: #fff;
	font: calc(25px + 1vh)/calc(40px + 2vh) FontAwesome;
	
	transition: all 0.3s ease;
}
.header .header-title:hover:before {
	height: calc(30px + 1vh);
	line-height: calc(30px + 1vh);
}
.header .header-title:after {
	content: ""Home"";
	
	display: block;
	width: calc(40px + 2vh);
	height: calc(10px + 1vh);
	
	color: rgba(255,255,255,0);
	font-size: calc(5px + 1vh);
	white-space: nowrap;
	
	transition: all 0.15s ease;
}
.header .header-title:hover:after {
	color: #fff;
}
.header .username {
	display: block;
	width: calc(40px + 2vh);
	height: calc(40px + 2vh);
}
[data-owner=""1""] .header .btn-menu {
	display: none;
}
.header .username:before {
	display: block;
	width: 4px;
	height: 4px;
	border-left: 1px solid #fff;
	border-bottom: 1px solid #fff;
	background: none;
}

.list-menu-float {
	position: fixed;
	top: 0;
	left: calc(100vh - (120px + 6vh));
	
	display: flex !important;
	width: auto;
	height: calc(40px + 2vh);
	background: #111;
	border: none;
	border-right: 4px solid #000;
	overflow: hidden;
	
	font-size: 0;
	white-space: nowrap;
	
	transform: rotate(90deg) translateY(-100%);
	transform-origin: left top;
	transition: all 0.3s ease;
	z-index: 110;
}
.list-menu-float:hover {
	background: #080808;;
}
.list-menu-float .icon-menu {
	display: block !important;
	width: 0 !important;
	flex: 0 0 auto;
	height: calc(40px + 2vh);
	
	transition: all 0.3s ease;
}
.list-menu-float .icon-menu:not(.profile) {
	background: none !important;
}
.list-menu-float:hover .icon-menu {
	width: calc(40px + 2vh) !important;
}
.list-menu-float > .icon-menu:first-child {
	width: calc(40px + 2vh) !important;
}
.list-menu-float .icon-menu svg {
	position: static !important;
	
	display: block;
	width: calc(25px + 1vh);
	height: calc(25px + 1vh);
	padding: calc(7.5px + 0.5vh);
	
	fill: #fff !important;
	
	transition: all 0.3s ease;
}
.list-menu-float .icon-menu:hover svg {
	padding: calc(2.5px) calc(7.5px + 0.5vh);
}
.list-menu-float .icon-menu .text {
	position: static;
	
	display: block;
	width: calc(40px + 2vh) !important;
	height: calc(10px + 1vh);
	background: none;
	
	color: rgba(255,255,255,0);
	font: 700 calc(5px + 1vh)/1 Oxygen, sans-serif !important;
	white-space: nowrap;
	
	transition: all 0.15s ease;
}
.list-menu-float .icon-menu:hover .text {
	color: #fff;
}

.status-menu-container {
	position: fixed;
	top: 0;
	right: 0;
	
	display: block;
	width: 100vh;
	height: calc(40px + 2vh);
	background: #111;
	border-bottom: 4px solid #000;
	
	z-index: 100;
}
.status-menu {
	position: absolute;
	top: 0;
	left: calc(100vh - (80px + 4vh));
	
	display: flex !important;
	width: auto;
	height: calc(40px + 2vh);
	padding-left: calc(40px + 2vh);
	background: #111;
	border-right: 4px solid #000;
	overflow: hidden;
	
	font-size: 0;
	white-space: nowrap;
	
	transform: rotate(90deg) translateY(-100%);
	transform-origin: left top;
	transition: all 0.3s ease;
}
.status-menu:hover {
	background: #080808;
}
.status-menu .status-button {
	display: block !important;
	
	width: 0;
	height: calc(40px + 2vh);
	padding: 0 !important;
	
	transition: all 0.3s ease;
}
.status-menu:hover .status-button {
	width: calc(40px + 2vh);
}
.status-menu .status-button.on {
	position: absolute;
	top: 0;
	left: 0;
	
	width: calc(40px + 2vh);
	
	font-weight: normal;
	
	pointer-events: none;
}
.status-menu .status-button:before {
	display: block;
	width: calc(40px + 2vh);
	height: calc(40px + 2vh);
	
	color: #fff;
	font: calc(25px + 1vh)/calc(40px + 2vh) FontAwesome;
	
	transition: all 0.3s ease;
}
.status-menu .status-button:hover:before, .status-menu:hover .status-button.on:before {
	height: calc(30px + 1vh);
	line-height: calc(30px + 1vh);
}
.status-menu .status-button.all_anime:before { content: ""\f069""; } /*f03a*/
.status-menu .status-button.watching:before { content: ""\f06e""; }
.status-menu .status-button.completed:before { content: ""\f058""; } /*f14a*/
.status-menu .status-button.onhold:before { content: ""\f017""; } /*f017*/
.status-menu .status-button.dropped:before { content: ""\f057""; } /*f00d*/
.status-menu .status-button.plantowatch:before { content: ""\f073""; } /*f133*/
.status-menu-container .status-menu .status-button:after {
	position: static;
	
	display: block;
	width: calc(40px + 2vh);
	height: calc(10px + 1vh);
	background: none;
	
	color: rgba(255,255,255,0);
	font: 700 calc(5px + 1vh)/1 Oxygen, sans-serif !important;
	white-space: nowrap;
	
	transition: all 0.15s ease;
}
.status-menu-container .status-menu .status-button:hover:after, .status-menu-container .status-menu:hover .status-button.on:after {
	color: #fff;
}
.status-menu .status-button.all_anime:after { content: ""All""; }
.status-menu .status-button.watching:after { content: ""Active""; }
.status-menu .status-button.completed:after { content: ""Done""; }
.status-menu .status-button.onhold:after { content: ""Hold""; }
.status-menu .status-button.dropped:after { content: ""Drop""; }
.status-menu .status-button.plantowatch:after { content: ""Plan""; } 
/* .status-menu-container .search-container {
	position: absolute;
	top: -70px;
	left: 0;
	
	font-size: 11px;
} */

/* DETAILS */

.list-unit .list-status-title {
	position: absolute;
	top: calc(90vw - 30px - (18px + 2vh));
	right: 0;
	
	display: block;
	width: 100vh;
	height: calc(18px + 2vh);
	background: none;
	
	color: #fff;
	text-transform: uppercase;
	text-shadow:
		0px 0px 2px #000,
		0px 0px 1px #000;
	white-space: nowrap;
	
	transform: rotate(170deg);
	transform-origin: center;
}
.list-unit .list-status-title .text {
	display: block;
	width: auto;
	height: auto;
	
	color: #fff;
	font: calc(18px + 2vh)/calc(18px + 2vh) Oxygen, sans-serif !important;
}
.list-unit .list-status-title .stats {
	position: static;
	
	display: block;
	height: auto;
	margin-top: 10px;
	
	font: calc(10px + 1vh)/calc(10px + 1vh) Oxygen, sans-serif !important;
	text-align: center;
}
.list-unit .list-status-title .stats a:first-child {
	text-indent: 0.5em;
}

.list-unit .list-stats {
	position: absolute;
	top: calc(90vw - 30px - (18px + 2vh) - 150px);
	right: calc(50% - 100px);
	
	width: 190px;
	height: auto;
	padding: 5px;
	background: rgba(255,255,255,0.75);
	
	color: #000;
	line-height: 1.25;
	
	transform: rotate(90deg) translateY(-33%);
	transform-origin: center top;
	z-index: 1;
}

/* LIST BASE */

.list-table {
	display: block;
	padding: 0 0 70vw 0;
	border: none;
	
/* 	perspective: 500px; */
}
.cover-block {
	width: 100%;
	margin: 0;
	height: 1px;
	margin-top: -1px;
	overflow: hidden;
}
.list-container:before, .list-table:after {
	content: """";
	position: absolute;
	right: 0;
	
	height: 100vh;
	background: #222 no-repeat 30% center / cover;
}
/* .cover-block #cover-image-container {
	position: absolute;
	right: 0;
	
	display: block;
	width: calc(90vw + 40px + 8vh);
	height: 100vh;
	padding: 0;
	background: #222 no-repeat 30% center / cover;
	
	transform: rotate(90deg) translateX(calc(90vw + 40px + 8vh));
	transform-origin: right top;
}
.cover-block #cover-image-container img {
	width: 100%;
	max-width: initial;
	height: 100%;
	object-fit: cover;
}
.btn-list-setting { display: none !important } */
.list-container:before {
	top: calc(90vw + 40px + 8vh);
	
	width: calc(90vw + 40px + 8vh);
	background-image:
		linear-gradient(80deg, rgba(200, 205, 255,0),rgba(200, 205, 255, .1)),
		url(https://i.imgur.com/HheYL00.jpg);
	
	transform: rotate(90deg);
	transform-origin: right top;
/* 	transform: rotate(90deg) translateZ(-150px) scale(2); */
	z-index: -1;
}
.list-table:after {
	bottom: 0;
	
	width: calc(70vw + 40px + 8vh);
	background-image:
		linear-gradient(-100deg, rgba(200, 205, 255,0.1),rgba(200, 205, 255, .3)),
		url(https://i.imgur.com/cL7cKKF.jpg);
/* 	margin-top: calc(-40px + -8vh); */
	
	transform: rotate(90deg) translateY(100vh);
	transform-origin: right bottom;
/* 	transform: rotate(90deg) translateX(calc(70vw + 105px + 8vh)); */
	z-index: -1;
}

/* SORT FILTERS */

.list-table > tbody:first-child {
	position: relative;
	
	width: 100%;
	height: calc(20px + 2vh);
	padding: 0 30px 0 30px;
	margin: 0 0 0 -30px;
	background: #111 !important;
	
/* 	transform: rotate(170deg); */
	transform: skewY(-10deg);
	z-index: 5;
}
.list-table-header {
	display: flex;
	height: 100%;
	justify-content: center;
	flex-direction: row-reverse;
/* 	direction: rtl; */
}
.list-table .list-table-header .header-title:not(.status):not(.image):not(.tags):not(.days) {
	position: absolute;
	top: 0;
	
	display: block;
	width: calc(20px + 2vh);
	height: calc(20px + 2vh);
	padding: 0;
	margin-right: 0px;
	background: #111;
	border: none;
	overflow: hidden;
	
	color: #fff;
	text-align: left;
	white-space: nowrap;
	
	transform: rotate(90deg) translateY(calc(20px + 2vh));
	transform-origin: right bottom;
	transition: all 0.3s ease;
}
/* nts - need manga support here */
.header-title.title { right: calc(50% - (40px + 4vh)); }
.header-title.score { right: calc(50% - (20px + 2vh)); }
.header-title.progress { right: calc(50%); }
.header-title.type { right: calc(50% + (20px + 2vh)); }
/* .header-title.title { right: calc(50% - (60px + 6vh)); }
.header-title.score { right: calc(50% - (40px + 4vh)); }
.header-title.progress { right: calc(50% - (20px + 2vh)); }
.header-title.type { right: calc(50%); }
.header-title.started { right: calc(50% + (20px + 2vh)); }
.header-title.finished { right: calc(50% + (40px + 4vh)); } */
/* .header-title.title { right: calc(50% - (70px + 7vh)); }
.header-title.score { right: calc(50% - (50px + 5vh)); }
.header-title.progress { right: calc(50% - (30px + 3vh)); }
.header-title.type { right: calc(50% - (10px + 1vh)); }
.header-title.started { right: calc(50% + (10px + 1vh)); }
.header-title.finished { right: calc(50% + (30px + 3vh)); }
.header-title.priority { right: calc(50% + (50px + 5vh)); } */
.list-table .list-table-header .header-title:hover {
	width: calc(100px + 10vh) !important;
}
.list-table .list-table-header .header-title a {
	width: 100%;
	padding-left: calc(20px + 2vh);
	
	color: rgba(255, 255, 255, 0) !important;
	font: calc(6px + 1vh)/calc(20px + 2vh) Oxygen, sans-serif !important;
	vertical-align: top;
	
	transform: skewX(-10deg);
	transition: all 0.15s ease !important;
}
.list-table .list-table-header .header-title:hover a {
	color: #fff !important;
}
.header-title a:before {
	content: ""Sort by "";
}
.header-title a:after {
	position: absolute;
	top: 0;
	left: 0;
	
	display: block;
	width: calc(20px + 2vh);
	height: calc(20px + 2vh);
	
	color: #fff;
	font: calc(5px + 2vh)/calc(20px + 2vh) FontAwesome;
	text-align: center;
}
.header-title.title a:after { content: ""\f040"" } /*f141*/
.header-title.score a:after { content: ""\f005"" }
.header-title.progress a:after { content: ""\f02e"" }
.header-title.chapters a:after { content: ""\f02e"" }
.header-title.volumes a:after { content: ""\f02d"" }
.header-title.type a:after { content: ""\f03d"" }
.header-title.started a:after { content: ""\f271"" }
.header-title.finished a:after { content: ""\f274"" }
/* .header-title.priority a:after { content: ""\f069"" } f164*/

.header-title.status,
.header-title.image,
.header-title.tags,
.header-title.started:nth-of-type(9),
.header-title.studio,
.header-title.started
{
	display: none !important;
}

/* NO LIST ITEMS VIEW */

/* nts - improve this */
.list-table[data-items=""[]""]:before {
	content: ""NO ITEMS FOUND"";
	
	display: block;
	width: 100%;
	height: 210px;
	padding: 0 10vh; 
 	margin-top: calc(20px + 2vh);
	margin-bottom: calc(-210px + -20px + -2vh);
	margin-left: -10vh;
	background: #111 !important;
	
	color: #fff;
	font: 18px/210px Oxygen, sans-serif;
	text-align: center;
	
	transform: rotate(170deg);
}
.list-table[data-items=""[]""] tbody {
	margin-bottom: 210px;
}

/* LIST ITEMS */

.list-table > tbody {
	display: block;
	background: none !important;
}

.list-item {
	position: relative;
	
	width: 210px;
	height: 100vh;
	margin: 0 0 calc(-100vh + 213px) auto;
	
	transform: rotate(90deg) translateZ(0);
	transform-origin: right top;
	pointer-events: none;
	transition: all 0.3s ease;
 	perspective: unset;
}
.list-item:hover {
	width: 300px;
	margin-top: 90px;
}
.list-item:nth-child(2) {
	margin-top: 214px;
}
.list-item:nth-child(2):hover {
	margin-top: 304px;
}
.list-item:last-child {
	margin-bottom: -100vh;
}

.list-table-data {
	display: block;
	width: 0;
	height: 0;
	pointer-events: auto;
}

.list-table .list-table-data .data {
	padding: 0;
	border: none;
	
	transition: all 0.3s ease;
}
.list-table .list-table-data .data a {
	color: #fff !important;
}
.list-table .list-table-data a:not(.edit-disabled):hover {
	color: rgba(255,255,255,0.5) !important;
	text-shadow:
		0px 0px 3.5px #14b3e9;
}
/* .data:not(.image):not(.title) { pointer-events: none; }
.data, .list-table-data:hover .data { pointer-events: auto; } */

.data:not(.image):not(.title) {
	opacity: 0;
}
.list-item:hover .data {
	opacity: 1;
}

.data.image {
	position: absolute;
	top: 0;
	
	display: block;
	width: 100%;
	height: 100%;
	padding: 0 4px !important;
	margin-left: -4px;
	overflow: hidden;
	
	transform: skew(10deg);
	z-index: -1;
}
.data.image:after {
	content: """";
	position: absolute;
	top: 0;
	left: -1px;
	
	width: calc(100% - 8px);
	height: 100%;
	border-left: 5px solid #000 !important;
	
	transition: all 0.3s ease;
}
.list-item:last-child .data.image:after {
	border-right-width: 5px !important;
	border-right-style: solid !important;
}
.watching ~ .data.image:after,
.reading ~ .data.image:after { border-color: #a06a08 !important }
.completed ~ .data.image:after { border-color: #08346d !important }
.onhold ~ .data.image:after { border-color: #a8a80a !important }
.dropped ~ .data.image:after { border-color: #a40404 !important }
.plantowatch ~ .data.image:after,
.plantoread ~ .data.image:after { border-color: #2b2b2b !important }
/* .plantoread ~ .data.image:after { border-color: #2c2c2c !important }
.watching ~ .data.image:after,
.reading ~ .data.image:after { border-color: #614616 !important }
.completed ~ .data.image:after { border-color: #111152 !important }
.onhold ~ .data.image:after { border-color: #94940d !important }
.dropped ~ .data.image:after { border-color: #701212 !important }
.plantowatch ~ .data.image:after,
.plantoread ~ .data.image:after { border-color: #2c2c2c !important } */
.data.image a {
	display: block !important;
	width: calc(210px + 18vh);
	height: calc(100% + 6px);
	background: #000 no-repeat center center / cover;
	margin: -3px 0 0 -9vh;
	
	filter: blur(0.2vh);
	transform: skewX(-10deg);
	pointer-events: none;
	transition: all 0.3s ease;
}
.list-item:hover .data.image a {
	width: calc(300px + 18vh);
}
.data.image a:after {
	content: """";
	position: absolute;
	top: 0;
	left: 0;
	
	width: 100%;
	height: 100%;
	background: rgba(0,0,20,0);
	
	transition: all 0.3s ease;
}
.list-item:hover .data.image a:after {
	background: rgba(0,0,20,0.8);
}
.data.image .image {
	display: none;
}

.data.title {
	position: absolute;
	top: 50%;
	right: 105px;
	
	width: 100vh;
	height: 18px;
	padding: 0 !important;
	
	transform: rotate(80deg) translate(50%,-9px);
	transform-origin: right top;
	text-align: center !important;
	
	z-index: 1;
}
.list-item:hover .data.title {
	right: 25px;
}
.data.title .link {
	display: inline-block;
	max-width: calc(100% - 15px);
	overflow: hidden;
	
	color: #fff;
	font: 18px/18px Oxygen, sans-serif !important;
	text-transform: uppercase;
	text-shadow:
		0px 0px 2px #000,
		0px 0px 1px #000;
	letter-spacing: calc(0.5vh - 1px);
	white-space: nowrap;
	text-overflow: ellipsis;
	
	transition: all 0.1s ease;
}
/* doesn't work on manga lists */
.icon-watch {
	display: none;
}
.rewatching, .rereading, .content-status {
	color: #eeeeff !important;
	font-size: 14px !important;
	text-transform: lowercase;
	text-shadow: 0px 0px 1px #000;
	
	vertical-align: top;
	z-index: -1;
}
.rewatching:before, .rereading:before, .content-status:before {
	content: ""("";
	vertical-align: top;
}
.rewatching:after, .rereading:after, .content-status:after {
	content: "")"";
	vertical-align: top;
}
/* .icon-watch {
	display: block;
	width: 0;
	height: 0;
} */
/* .rewatching, .rereading, .content-status {
	display: inline-block;
	
	color: #ceceff !important;
	font-size: 14px !important;
	text-transform: lowercase;
	text-shadow: 0px 0px 1px #000;
} */
/* [class^=""re""]:not([style*=""ne;""]) ~ .content-status:not([style*=""ne;""]):before {
	content: ""• "";
} */
/* [class^=""re""]:not([style*=""ne;""]) {
	display: block;
}
[class^=""re""][style*=""ne;""] ~ .content-status:not([style*=""ne;""]) {
	display: block;
} */

/* .add-edit-more {
	position: absolute;
	top: 0;
	right: calc(50% - 5px);
	
	width: 105px;
	margin: 0 !important;
	box-sizing: border-box;
	
	transform: rotate(-80deg);
	transform-origin: right top;
	transition: all 0.3s ease;
	opacity: 0;
} */
.add-edit-more {
	display: block;
	width: 100% !important;
	margin: 0 !important;
	box-sizing: border-box;
	float: none !important;
	
	font-size: 11px !important;
	text-align: center;
	
	transition: all 0.3s ease;
	opacity: 0;
}
.list-item:hover .add-edit-more {
	width: 300px;
	opacity: 1;
}
.add-edit-more a {
	color: #fff !important;
}

.data.progress {
	position: absolute;
	top: calc(50% - 25px);
	left: 0;
	
	width: 100%;
	height: 50px;
	padding-right: 30px !important;
	box-sizing: border-box;
	
	color: #fff;
	font: 25px/50px Oxygen, sans-serif;
	text-align: center;
}
.data.chapter {
	position: absolute;
	top: calc(50% - 25px);
	left: calc(50% - 15px);
	
	width: calc(50% - 15px);
	height: 50px;
/* 	padding-right: 30px !important; */
	box-sizing: border-box;
	
	color: #fff;
	font: 25px/50px Oxygen, sans-serif;
	text-align: left !important;
}
.data.volume {
	position: absolute;
	top: calc(50% - 25px);
	left: 0;
	
	width: calc(50% - 15px);
	height: 50px;
	padding-right: 15px !important;
	box-sizing: border-box;
	
	color: #fff;
	font: 25px/50px Oxygen, sans-serif;
	text-align: right !important;
}
.data.chapter:before, .data.volume:before {
	position: absolute;
	top: 0;
	left: 0;
	
	display: block;
	width: 100%;
	height: 14px;
	box-sizing: border-box;
	
	font-size: 11px;
	line-height: 11px;
}
.data.chapter:before {
	content: ""Chapter"";
	
	text-align: left;
	padding-left: 15px;
}
.data.volume:before {
	content: ""Volume"";
	
	text-align: right;
	padding-right: 25px;
}
.data.volume:after {
	content: """";
	position: absolute;
	top: 5px;
	right: 6px;
	
	display: block;
	width: 3px;
	height: 40px;
	background: #14b3e9;
	
	transform: rotate(20deg);
}
.data.progress span {
	font-size: 25px;
}
.data.progress span:only-child:after {
	content: "" \f00c"";
	
	display: inline-block;
	padding: 15px 0 0 3px;
	
	font: 14px/1 FontAwesome;
	vertical-align: top;
}
.icon-add-episode, .icon-add-chapter, .icon-add-volume {
	display: inline-block;
	padding-top: 15px;
	
	vertical-align: top;
}
.icon-add-episode i:before, .icon-add-chapter i:before, .icon-add-volume i:before {
/* 	content: ""\f067""; */
	font-size: 14px;
	line-height: 1;
}

.data.status {
	display: none !important;
}

.data.score {
	position: absolute;
	top: calc(50% - 55px);
	left: -10px;
	
	width: 100%;
	height: 30px;
	padding-right: 30px !important;
	box-sizing: border-box;
	
	color: #fff;
	font: 15px/30px Oxygen, sans-serif;
	text-align: center;
}
.data.score:after {
	content: ""\f005"";
	font: 15px/1 FontAwesome;
}

.data.season {
	position: absolute;
	top: calc(50% + 25px);
	left: 10px;
	
	width: 50%;
	height: 30px;
	padding-right: 5px !important;
	box-sizing: border-box;
	
	color: #fff;
	font: 15px/30px Oxygen, sans-serif;
	text-align: right !important;
}
.data.type {
	position: absolute;
	top: calc(50% + 25px);
	left: calc(50% + 10px);
	
	width: 50%;
	height: 30px;
	padding-left: 5px !important;
	box-sizing: border-box;
	
	color: #fff;
	font: 15px/30px Oxygen, sans-serif;
	text-align: left !important;
}
.data.type:before {
	content: """";
	position: absolute;
	top: 14px;
	left: -2px;
	
	width: 4px;
	height: 2px;
	background: #fff;
}

.data.studio {
	position: absolute;
	top: calc(50% + 45px);
	left: 18px;
	
	width: 100%;
	height: 20px;
	padding-right: 30px !important;
	box-sizing: border-box;
	
	color: #fff;
	font: 13px/20px Oxygen, sans-serif;
	text-align: center !important;
}

/* .data.tags {
	position: absolute;
	bottom: calc(50% + 60px);
	left: -14px;
	
	width: 100%;
	height: auto;
	padding-right: 30px !important;
	box-sizing: border-box;
	
	color: #fff;
} */
/* .data.tags {
	position: absolute;
	bottom: 50%;
	left: 4px;
	
	width: 100vh;
	height: auto;
	box-sizing: border-box;
	
	color: #fff;
	
	transform: rotate(80deg) translateX(-50vh);
	transform-origin: left bottom;
}
.data.tags div {
	display: inline-block;
}
.data.tags .edit {
	width: auto !important;
	height: 18px;
	padding: 0 5px;
	margin-right: 10px;
	float: right;
	
	font-size: 11px !important;
}
.list-table .list-table-data .tags .edit:hover {
	color: rgba(255,255,255,0.5) !important;
} */

.more-info {
	width: 300px;
	height: 100%;
	background: #111;
	padding: 10vh 0;
	border: none !important;
	margin-top: -10vh;
	
	color: #fff !important;
	
	transform: rotate(-10deg);
	transition: all 0.3s ease;
	pointer-events: auto;
	opacity: 0;
}
.list-item:hover .more-info {
	opacity: 1;
}
.more-info[style$=""row;""] {
	display: block !important;
}
.more-content {
	padding: 10px 60px 10px 10px !important;
}

.list-unit .loading-space {
	position: absolute;
	bottom: calc(35vw - 3.25vh);
	right: calc(50vh - 3.25vh);
	
	width: 7.5vh;
	height: 7.5vh;
	margin: 0;
	
	color: #fff;
	font: 7.5vh/1 FontAwesome;
	text-shadow: 0px 0px 2px #000;
	
	z-index: 1;
}
.list-unit .loading-space #loading-spinner {
	width: 100%;
	height: 100%;
}

footer {
	position: relative;
	background: #111;
}
footer:before {
	content: """";
	position: absolute;
	top: -4px;
	left: 0;
	
	width: 100vh;
	height: 20vh;
	min-height: 70px;
	background: #111;
	border-top: 4px solid #000;
	transform: skewY(-10deg);
	transform-origin: left top;
}
#footer-block {
	display: flex;
	width: calc(100% - 20px);
	height: 70px;
	padding: 0;
	background: none;
	justify-content: center;
	align-items: center;
	
	text-align: center;
	vertical-align: middle;
	line-height: 70px;
	
	transform: rotate(170deg) translate(calc(-100vh - -20px),-70px);
	transform-origin: left top;
	
	z-index: 1;
}
#copyright {
	display: inline-block;
	padding: 0;
	
	font: calc(8px + 0.4vh)/1 Oxygen, sans-serif;
	text-transform: uppercase;
	vertical-align: middle;
}
#copyright:after {
	content: ""List design by Valerio Lyndon"";
	
	display: block;
	
	line-height: 1.5;
}

#advanced-options {
	position: fixed;
	top: 0;
	left: 0;
	
	width: 100vw;
	height: 100vh;
	padding: 20px;
	overflow: auto;
	background: none;
	box-sizing: border-box;
	
	color: #fff;
	
	transform: rotate(90deg) translateY(-100vh);
	transform-origin: left top;
}
#advanced-options #fancybox-close {
	top: 5px;
	right: 5px;
}
#advanced-options .advanced-options-button a {
	background: #111;
	color: #fff !important;
}
#advanced-options .advanced-options-button a:hover {
	background: #080808;
}
#advanced-options .advanced-options-header {
}

#fancybox-overlay {
	background: rgba(0,0,20) !important;
	opacity: 0.7 !important;
}
#fancybox-wrap {
	position: fixed;
	top: 0 !important;
	left: 0 !important;
	
	width: 100vw !important;
	height: 100vh !important;
	overflow: auto;
/* 	background: rgba(0,0,20,0.7); */
	box-sizing: border-box;
	
	transform: rotate(90deg) translateY(-100vh);
	transform-origin: left top;
}
#fancybox-inner {
	top: 0 !important;
	left: 0 !important;
	
	width: 100% !important;
	height: 100% !important;
}

@media (max-height: 330px) {
/* 	.list-table {
		width: 300px;
	}
	.list-table:before, .list-table:after {
		height: 300px;
	} */
	.list-item {
		height: 300px;
		margin-bottom: -90px;
	}
	
	body:after {
		content: ""This theme is made to be viewed with taller screens.\a Please expand your browser window. "";
	}
}
@media (max-width: 500px) {
	body:after {
		content: ""This theme is made to be viewed with wider screens.\a Please expand your browser window."";
	}
}
@media (max-height: 330px), (max-width: 500px) {
	body:after {
		position: fixed;
		top: 0;
		left: 0;
		
		display: block;
		width: 100vw;
		height: 100vh;
		padding: 4vw 4vh;
		box-sizing: border-box;
		background: #000;
		
		color: #fff;
		font-size: calc(2vw + 2vh);
		white-space: pre-wrap;
		
		transform: rotate(90deg) translateY(-100vh);
		transform-origin: left top;
		animation: fade 0.5s ease-out;
		z-index: 9999;
	}
}"
K26VuYaS,deflb3,maxim_shlyahtin,Python,Tuesday 23rd of May 2023 12:59:00 AM CDT,"import pandas as pd

class Panda:
    def solve(self, lst):
        s = pd.Series(lst)
        s_filtered = s[(s < s.mean() + s.std()) & (s > s.mean() - s.std())]
        print(s_filtered.values)


def solve(df: pd.DataFrame) -> pd.DataFrame:
    # Приводим тип столбца 'Date' к datetime
    df['Date'] = pd.to_datetime(df['Date'])
    # Выбираем только те транзакции, которые произведены в феврале 2023 года
    df_feb = df.loc[(df['Date'].dt.year == 2023) & (df['Date'].dt.month == 2)]
    # Группируем по продавцам и суммируем выручку
    revenue_by_salesperson = df_feb.groupby('Salesperson')['Price'].sum()
    # Формируем DataFrame с результатом и возвращаем его
    result = pd.DataFrame({'Revenue': revenue_by_salesperson})
    return result"
en20rkJW,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:54:45 AM CDT,"#include <iostream>
#include <algorithm>
#include <time.h>

using namespace std;

int main()
{
    cout<<""Исходный массив : ""<<endl;
    srand(time(NULL));
    int mass[10];
    for (int i=0;i<10;i++){
        mass[i]=-100+rand()%(100+100);
        cout<<"" ""<<mass[i];
    }
    cout<<endl;
    cout<<""Сортировка Шелла : ""<<endl;
    for (int h = 10/2; h > 0; h /= 2) {
            for (int i = h; i < 10; i++) {
                int temp = mass[i];
                int j = i;
                while (j >= h && mass[j - h] > temp) {
                    mass[j] = mass[j - h];
                    j -= h;
                }
                mass[j] = temp;
            }
    }
    for (int i=0;i<10;i++){
        cout<<"" ""<<mass[i];
    }    
    cout<<endl;
    cout<<""Максимальный элемент массива = ""<<mass[9]<<endl;
    cout<<""Минимальный элемент массива = ""<<mass[0];
    return 0;
}"
UAN5vLEE,Untitled,Balda,C#,Tuesday 23rd of May 2023 12:52:54 AM CDT,"Чтобы ограничить ввод в контрол textbox, нужно выбрать событие KeyPress и в зависимости от условия написать код:
1) Разрешить на ввод только буквы (например поля ФИО, Город)
if (!char.IsLetter(e.KeyChar) && !char.IsControl(e.KeyChar) && e.KeyChar != ' ' && !char.IsPunctuation(e.KeyChar))
	{
		e.Handled = true;
	}
	else
	{
		 e.Handled = false;
	}            	
 
2) Разрешить на ввод только цифры (например поле для телефона, количества)
if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
    {
        e.Handled = true;
    }"
ZKGP6me0,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:52:49 AM CDT,"#include <iostream>

using namespace std;

int main()
{
    int mass[14]={45, 56, 13, 75, 14, 18, 43, 11, 52, 12, 10, 36, 47, 9};
    int skald1[7];
    cout<<""Исходные номера деталей""<<endl;
    for (int i=0;i<14;i++){
        cout<<"" ""<<mass[i];
    }
    cout<<endl;
    for (int i=0;i<14;i++){
        for(int j=0;j<14;j++){
            if (mass[i]<mass[j]){
                int temp=mass[i];
                mass[i]=mass[j];
                mass[j]=temp;
            }
        }
    }
    cout<<""Отсортированые номера деталей""<<endl;
    for (int i=0;i<14;i++){
        cout<<"" ""<<mass[i];
    }
    cout<<endl;
    int j=0;
    for (int i=0;i<14;i++){
        if (mass[i]%2==0){
            skald1[j++]=mass[i];
        }
    }
    cout<<""Отсротированые детали с четными номерами ""<<endl;
    for (int i=0;i<7;i++){
        cout<<"" ""<<skald1[i];
    }
    return 0;
}"
0Fz18LF9,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:51:12 AM CDT,"#include <iostream>
#include <string>
using namespace std;

class ArrSel {
	int *Arr;
	int nElem;
	string *Name;
	string *Marka;
	int *Ball;
	int* a;

	public: ArrSel(int max) {
		Arr = new int[max];
		Name = new string[max];
		Marka = new string[max];
		Ball = new int[max];
		nElem = 0;
	}

	public: void insert(int value, int ball, string name, string surname) {
		Arr[nElem] = value;
		Ball[nElem] = ball;
		Name[nElem] = name;
		Marka[nElem] = surname;
		nElem++;
	}

	public: void display() {
		for (int j(0); j < nElem; j++) {
			cout << Arr[j] << "" sredBall: "" << Ball[j] << "" Name: "" << Name[j] << "" Surname: "" << Marka[j] << "" \n"";
		}
		cout << ""\n"";
	}

	public: void selectionSort() {
		int out, in, max;
		for (out = 0; out < nElem; out++) {
			max = out;
			for (int in = out + 1; in < nElem; in++) {
				if (Arr[in] > Arr[max]) {
					max = in;
					swap(out, max);
				}
			}
		}
	}
	public: void swap(int one, int two) {
		int temp = Arr[one];
		Arr[one] = Arr[two];
		Arr[two] = temp;
		int temp1 = Ball[one];
		Ball[one] = Ball[two];
		Ball[two] = temp1;
		string temp2 = Name[one];
		Name[one] = Name[two];
		Name[two] = temp2;
		string temp3 = Marka[one];
		Marka[one] = Marka[two];
		Marka[two] = temp3;
	}

	public: int insertionSort() {
		int in, out;
		int elem = coppy();
		for (out = 1; out < elem; out++) {
			int temp = a[out];
			in = out;
			while (in > 0 && a[in - 1] <= temp) {
				a[in] = a[in - 1];
				--in;
			}
			a[in] = temp;

		}
		return elem;
	}

	public: void display_a(int elem) {
		for (int i(0); i < elem; i++) {
			cout << a[i] << "" "";
		}
		cout << "" "";
	}

	public: int coppy() {
		a = new int[nElem];
		int j(0);
		for (int i(0); i < nElem; i++) {
			if (Marka[i] == ""Жигули"") {
				a[j] = Ball[i];
				j++;
			}
		}
		return j;
	}
};

void main() {
	setlocale(LC_ALL, ""Russian"");
	int maxSize = 10;
	ArrSel arr(maxSize);
	arr.insert(88, 15, ""CерГей"", ""Жигули"");
	arr.insert(45, 4, ""АссАлан"", ""Мерседес"");
	arr.insert(85, 412, ""Асfdvdsvлан"", ""Копейка"");
	arr.insert(35, 42, ""Асzvw"", ""Лада"");
	arr.insert(15, 44, ""vfeан"", ""Жигули"");
	arr.insert(46, 73, ""Аvferevлан"", ""Газель"");
	arr.insert(91, 140, ""Cтарый"", ""Жигули"");
	arr.insert(24, 3, ""sdvefbлан"", ""Буханка"");
	cout << ""Оригинал: \n"";
	arr.display();
	arr.selectionSort();
	cout << ""Отсортированно методом выбора: \n"";
	arr.display();
	cout << ""Отсортированно методом вставки: \n"";
	arr.display_a(arr.insertionSort());
}

"
HazFsVwL,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:49:49 AM CDT,"#include <iostream>
using namespace std;

struct Node
{
    int x;
    Node* left, * right;
};

void push(int x, Node*& Tree) { //& т.к. нужно работать с данным деревом, а не его копией
	if (Tree == NULL) {
		Tree = new Node;
		Tree->x = x;
		Tree->left = Tree->right = NULL;
	}
	else
		if ((Tree->x) > x) {
			if ((Tree->left) != NULL) push(x, Tree->left);
			else {
				Tree->left = new Node;
				Tree->left->x = x;
				Tree->left->left = Tree->left->right = NULL;
			}
		}
		else
			if ((Tree->x) < x) {
				if ((Tree->right) != NULL) push(x, Tree->right);
				else {
					Tree->right = new Node;
					Tree->right->x = x;
					Tree->right->left = Tree->right->right = NULL;
				}
			}
}

void write(Node* Head, int space, string a)
{
	if (Head != NULL) {
		write(Head->right, space + 1, ""r"");
		for (int i = 0; i < space; i++) {
			cout << "" "";
		}
		cout << a << "" "" << Head->x << endl;
		write(Head->left, space + 1, ""l"");
	}
}

void auto_tree(Node*& Tree, int n, int min, int max) {
	for (int i(0); i <= n; i++) {
		int random = min + rand() % (max - min + 1);
		push(random, Tree);
	}
}

Node* _poisk_(Node* Tree, int key) {
	Node* pred = Tree;
	while (Tree->x != key) {
		if (Tree->x > key) {
			if (Tree->left != NULL) {
				Tree = Tree->left;
			}
			else { break; }
		}
		else if (Tree->x < key) {
			if (Tree->right != NULL) {
				Tree = Tree->right;
			}
			else { break; }
		}
	}
	if (Tree->x != key) {
		return NULL;
	}
	return Tree;
}

void vikl(Node* Tree, int key) {
	Node* tree = Tree;
	Node* pred = tree;
	while (tree->x != key) {
		pred = tree;
		if (tree->x > key) {
			if (tree->left != NULL) {
				tree = tree->left;
			}
			else { break; }
		}
		else if (tree->x < key) {
			if (tree->right != NULL) {
				tree = tree->right;
			}
			else { break; }
		}
	}

	if ((tree->left == NULL) && (tree->right == NULL)) {
		if (pred->left == tree) {
			pred->left = NULL;
		}
		else {
			pred->right = NULL;
		}
	}
	else if ((tree->left == NULL) || (tree->right == NULL)) {
		Node* preem = tree;
		Node* predpreem = preem;
		if (preem->left != NULL) {
			preem = preem->left;
			while (preem->right != NULL) {
				predpreem = preem;
				preem = preem->right;
			}
			if (pred->left == tree) {
				pred->left->x = preem->x;
				if (predpreem->left == preem) predpreem->left = NULL;
				if (predpreem->right == preem) predpreem->right = NULL;
				preem = NULL;
			}
			else {
				pred->right->x = preem->x;
				if (predpreem->left == preem) predpreem->left = NULL;
				if (predpreem->right == preem) predpreem->right = NULL;
				preem = NULL;

			}
		}
		else {
			preem = preem->right;
			while (preem->left != NULL) {
				predpreem = preem;
				preem = preem->left;
			}
			if (pred->left == tree) {
				pred->left->x = preem->x;
				if (predpreem->left == preem) predpreem->left = NULL;
				if (predpreem->right == preem) predpreem->right = NULL;
				preem = NULL;

			}
			else {
				pred->right->x = preem->x;
				if (predpreem->left == preem) predpreem->left = NULL;
				if (predpreem->right == preem) predpreem->right = NULL;
				preem = NULL;

			}
		}
	}
	/*else if ((tree->left != NULL) && (tree->right != NULL)) {

	}*/
}

void opred_vkl_or_vikl(int key, Node* Tree) {
	Node *tree = _poisk_(Tree, key);
	if (tree == NULL) {
		push(key, Tree);
	}
	else {
		vikl(Tree, key);
	}
}

int main()
{
    Node* tree = NULL;
	auto_tree(tree, 15, -99, 99);
	cout << ""original Tree\n"";
	write(tree, 0, ""S"");

	cout << ""\nVkluchenie (3)\n"";
	opred_vkl_or_vikl(3, tree);
	write(tree, 0, ""S"");
	cout << ""----------------- (42)"" << endl;
	opred_vkl_or_vikl(42, tree);
	write(tree, 0, ""S"");
	cout << ""\nUdalenie s potompom (-66)\n"";
	opred_vkl_or_vikl(-66, tree);
	write(tree, 0, ""S"");
	cout << ""----------------- (87)"" << endl;
	opred_vkl_or_vikl(87, tree);
	write(tree, 0, ""S"");
	cout << ""\nUdalenie bes potomkov (12)\n"";
	opred_vkl_or_vikl(12, tree);
	write(tree, 0, ""S"");
}

"
n8sGFggR,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:48:32 AM CDT,"#include <iostream>
using namespace std;
struct Man
{
    int nomber;
    struct Man* next;
};

struct Man* add_Man (int Nomber, struct Man* Head)
{
    struct Man* NewMan = (struct Man *)malloc(sizeof(struct Man));
    NewMan->nomber = Nomber;
    NewMan->next = Head;
    return NewMan;
}
void write(struct Man* Head,int n)//печать стека
{
    struct Man* q;
    q = Head;
    while (n != 0) {
        
        cout << q->nomber << ""|"" << q << ""|"" << q->next << ""           "" << endl;
        q = q->next;
        n--;
    }
}
void autostek(int n, struct Man* &Head)//авто стек
{
    srand(time(NULL));
    for (int i = 1; i <= n; i++)
    {
        Head = add_Man(rand()%100-100, Head);
    }
}
void push(int i, struct Man* &Head)//добавление элемента
{
        Head = add_Man(i, Head);
}
void pop(struct Man* &Head)//удоление верхнего элемента
{
    struct Man* P = Head;
    Head = Head->next;
    delete P;
}
int top(struct Man* Head)//вывод первого элемента
{
    return Head->nomber;
}
int empty(struct Man* Head)
{
    
    if (Head==NULL)
    {
        return 0;
    }
    else return 1;
}
int runstek(int n,struct Man* Head)
{
    struct Man* tmpN;
    int max = Head->nomber;
    tmpN = Head;
    for (int i = 1; i < n; i++) {
        tmpN = tmpN->next;
        if (max < tmpN->nomber) {
            max = tmpN->nomber;

        }
    }
    tmpN = Head;
    int count=1;
    for (int i = 1; i < n; i++) {
        tmpN = tmpN->next;
        count++;
        if (max == tmpN->nomber) {
            break;
        }
    }
    cout << ""Максимальный элемнет "" << max << endl;
    return count;
}
void popsp(int n,struct Man* &Head)
{
    struct Man* tmpN,*tmpN_1,*tmpN_2,*tmpN_3;
    tmpN_3=Head;
    for (int i = 1;i<n;i++){
        tmpN_3=tmpN_3->next;
    }
    if  (Head == NULL){cout<<""Ошибка: списка не существует""<<endl;}
    else if ((Head->next != NULL)&& (Head->next->next == NULL)){
        if(tmpN_3->nomber==Head->nomber){}
        else{
        tmpN=Head;
        Head=Head->next;
        Head->next=tmpN;
        Head->next->next=NULL;
        }
    }
    else if(tmpN_3->nomber==Head->nomber){}
    else if (tmpN_3->nomber==Head->next->nomber){
        tmpN=Head;
        Head=Head->next;
        tmpN->next=Head->next;
        Head->next=tmpN;
    }
    else{
    tmpN=Head;//1
    for (int i = 1;i<n;i++){
        tmpN=tmpN->next;
    }
    tmpN_1=Head;//2
    for (int i = 1;i<n-1;i++){
        tmpN_1=tmpN_1->next;
    }
    tmpN_2=Head;//3
    for (int i = 1;i<n-2;i++){
        tmpN_2=tmpN_2->next;
    }
    tmpN_2->next=tmpN;
    tmpN_1->next=tmpN->next;
    tmpN->next=tmpN_1;
    }
}
int main()
{
    setlocale(LC_ALL, ""Russian"");
    struct Man* DP;
    cout<<""Введите кольчество элементов списка""<<endl;
    int i,max;
    cin>> i;
    autostek(i,DP);
    cout<<""исходный список""<<endl;
    cout<<"" |адрес элемента|адрес следующего элемента""<<endl;
    cout<<"" |--------------|-------------------------""<<endl;
    write(DP,i);
    cout<<""элмент с каким мы рабоатем""<<endl;
    max=runstek(i,DP);
    popsp(max,DP);
    cout<<endl<<""Измененый список""<<endl;
    write(DP,i);
}"
vRDPWKgK,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:47:36 AM CDT,"#include <iostream>
#include <time.h>
using namespace std;
struct Man
{
    int nomber;
    struct Man* next;
};

struct Man* add_Man(int Nomber, struct Man* Head)
{
    struct Man* NewMan = (struct Man*)malloc(sizeof(struct Man));
    NewMan->nomber = Nomber;
    NewMan->next = Head;
    return NewMan;
}
void write(struct Man* Head,int n)//печать стека
{
    struct Man* q;
    q = Head;
    while (n != 0) {
        
        cout << q->nomber << ""|"" << q << ""|"" << q->next << ""           "" << endl;
        q = q->next;
        n--;
    }
}
void autostek(int n, struct Man*& Head)//авто стек
{
    srand(time(NULL));
    for (int i = 1; i <= n; i++)
    {
        Head = add_Man(rand()%100-100, Head);
    }
}
void push(int i, struct Man*& Head)//добавление элемента
{
    Head = add_Man(i, Head);
}
void pop(struct Man*& Head)//удоление верхнего элемента
{
    struct Man* P = Head;
    Head = Head->next;
    delete P;
}
int top(struct Man* Head)//вывод первого элемента
{
    return Head->nomber;
}
int empty(struct Man* Head)
{

    if (Head == NULL)
    {
        return 0;
    }
    else return 1;
}
int runstek(int n, struct Man* Head)//перебор до заданого элемента
{
    struct Man* tmpN;
    int max = Head->nomber;
    tmpN = Head;
    for (int i = 1; i < n; i++) {
        tmpN = tmpN->next;
        if (max < tmpN->nomber) {
            max = tmpN->nomber;

        }
    }
    tmpN = Head;
    int count=1;
    for (int i = 1; i < n; i++) {
        tmpN = tmpN->next;
        count++;
        if (max == tmpN->nomber) {
            break;
        }
    }
    cout << ""Максимальный элемнет "" << max << endl;
    return count;
}
void popsp(int n, struct Man*& Head)
{
    struct Man* tmpN, * tmpN_1, * tmpN_2;
    tmpN_2 = Head;
    for (int i = 1; i < n; i++) {
        tmpN_2 = tmpN_2->next;
    }
    tmpN = Head;
    if (tmpN_2->nomber == Head->nomber) {}
    else {
        for (int i = 1; i < n; i++) {
            tmpN = tmpN->next;
        }
        tmpN_1 = Head;
        for (int i = 1; i < n - 1; i++) {
            tmpN_1 = tmpN_1->next;
        }
        tmpN_1->next = tmpN->next;
        tmpN->next = Head;
        Head = tmpN;
    }
}
int main()
{
    setlocale(LC_ALL, ""Russian"");
    struct Man* DP;
    cout << ""Введите кольчество элементов списка"" << endl;
    int i,max;
    cin >> i;
    autostek(i, DP);
    cout << ""исходный список"" << endl;
    cout << "" |адрес элемента|адрес следующего элемента"" << endl;
    cout << "" |--------------|-------------------------"" << endl;
    write(DP,i);
    cout << ""элмент с каким мы рабоатем"" << endl;
    max=runstek(i, DP);
    popsp(max, DP);
    cout << endl << ""Измененый список"" << endl;
    write(DP,i);
}"
0Ff8Fdsi,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:46:23 AM CDT,"#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
    setlocale(LC_ALL, ""Russian"");
    int arr[15];
    //lineynyi poisk 3 вар
    cout << ""lineinii poisk\n"";
    int err(0);
    for (int i=0; i < 15; i++) {
        arr[i] = 1 + rand() % 100; //заполнение массива
        cout << arr[i] << "" ""; //вывод масива
    }

    cout << ""\n"";
    for (int i = 0; i < 15; i++) {
        if (arr[i]%3 == 0) { // проверяем равен ли arr[i] ключу
            cout << arr[i] << "" - iskomii element, ego index:"" << i << endl;
            err++;
        }
    }
    if (err == 0) { cout << ""iskomogo elementa net"" << endl; }
    cout << endl;

    //бинарный поиск 8 вар
    cout << ""binarnii poisk\n"";
    int n = sizeof(arr) / sizeof(arr[0]);
    sort(arr, arr + n);
    for (int i = 0; i < 15; i++) {
        cout << arr[i] << "" ""; //вывод масива
    } 
    cout << ""\n"";

    int l(0), r(14), random;
    bool flag = false;
    while ((l <= r) && (flag != true)) {
        random = 1 + rand() % 15;
        if (arr[random] == 70) flag = true;
        if (arr[random] > 70) r = random - 1;
        else l = random + 1;
    }
    
    cout << arr[random] << "" - naxodilos, na "" << random << "" pozicii"" << endl;

    //индексно-последовательный поиск 12 вар
    cout << ""Индексно-последовательный поиск : "" << endl;
    int orig[15]; int indeks[5];
    for (int i = 0; i < 15; i++) {
        orig[i] = 1 + rand() % 100; //заполнение массива
        cout << orig[i] << "" ""; //вывод масива
    }
    int j(0);
    cout << ""\n"";
    for (int i = 2; j < 5; i += 3) {
        indeks[j] = i; //заполнение массива
        cout << indeks[j] << "" ""; //вывод масива
        j++;
    }
    cout << endl;
    int tmp = 9;
    for (int i(0); i < sizeof(indeks); i++) {
        if (indeks[i] > tmp) {
            for (int j(indeks[i-1]); j < indeks[i]; j++) {
                if (j == tmp) {
                    cout << orig[j] << endl;
                    return 0;
                }
            }
        }
        else if (indeks[i] == tmp) {
            cout << orig[j] << endl;
            return 0;
        }
    }
    return 0;
}
"
av4knUzw,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:42:00 AM CDT,"#include <iostream>
using namespace std;
struct Node
{
	int x;
	Node *left, *right;
};

void push(int x, Node*& Tree) { //& т.к. нужно работать с данным деревом, а не его копией
	if (Tree == NULL) {
		Tree = new Node;
		Tree->x = x;
		Tree->left = Tree->right = NULL; 
	} else
	if ((Tree->x) > x) {
		if ((Tree->left) != NULL) push(x, Tree->left);
		else {
			Tree->left = new Node;
			Tree->left->x = x;
			Tree->left->left = Tree->left->right = NULL;
		}
	} else
	if ((Tree->x) < x) {
		if ((Tree->right) != NULL) push(x, Tree->right);
		else {
			Tree->right = new Node;
			Tree->right->x = x;
			Tree->right->left = Tree->right->right = NULL;
		}
	}
}

/*
void print_Tree(Node *&Tree) {
	if (Tree != NULL) {
		print_Tree(Tree->left);

		cout << Tree->x << "" "";
		print_Tree(Tree->right);

	}
}*/

void write(Node* Head, int space, string a)
{
	if (Head != NULL) {
		write(Head->right, space + 1, ""r"");
		for (int i = 0; i < space; i++) {
			cout << "" "";
		}
		cout << a << "" "" << Head->x << endl;
		write(Head->left, space + 1, ""l"");
	}
}

void obxod_and_otric(Node *&Tree, Node*&Tree1) {
	
	if (Tree != NULL) {
		obxod_and_otric(Tree->left, Tree1);
		
		obxod_and_otric(Tree->right, Tree1);
		if (Tree->x < 0) {
			int x1 = Tree->x;
			push(x1, Tree1);
			//cout << x1 << "" "";
		}

	}
}

int main() {
	setlocale(LC_ALL, ""Russian"");
	Node* Tree = NULL;
	push(100, Tree);
	push(5, Tree);
	push(-7, Tree);
	push(9, Tree);
	push(4, Tree);
	push(-5, Tree);
	push(-36, Tree);
	push(-1, Tree);
	push(42, Tree);
	push(-99, Tree);
	push(999, Tree);
	push(4444, Tree);
	push(-15, Tree);
	push(-360, Tree);
	push(-10, Tree);
	push(2, Tree);

	cout << ""Первое дерево\n"";
	write(Tree, 0, ""s"");
	cout << endl;

	cout << ""Дерево отрицательных значений"";
	Node* Tree1 = NULL;
	obxod_and_otric(Tree, Tree1); cout << endl;
	write(Tree1, 0, ""s"");
	return 0;
}
"
5Fg4ydpn,TRADE SCAM V3 PSX | 100% WORK,n3rp1k0v2,Lua,Tuesday 23rd of May 2023 12:38:30 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/ImN3rP1k/TRADESCAM-V2/main/PSX""))()"
t5VJdYzb,Урок 6 Логическая константность,kutuzzzov,C++,Tuesday 23rd of May 2023 12:34:47 AM CDT,"#include <cassert>
#include <functional>
#include <string>

using namespace std;

template <typename T>
class LazyValue {
public:
    explicit LazyValue(function<T()> init) { func_ = init; }

    bool HasValue() const {
        return value_.has_value();
    }
    const T& Get() {
        if (!HasValue()) {
            value_ = func_();
        }
        return value_.value();
    }

private:
    function<T()> func_;
    optional<T> value_;
};

void UseExample() {
    const string big_string = ""Giant amounts of memory""s;

    LazyValue<string> lazy_string([&big_string] {
        return big_string;
    });

    assert(!lazy_string.HasValue());
    assert(lazy_string.Get() == big_string);
    assert(lazy_string.Get() == big_string);
}

void TestInitializerIsntCalled() {
    bool called = false;

    {
        LazyValue<int> lazy_int([&called] {
            called = true;
            return 0;
        });
    }
    assert(!called);
}

int main() {
    UseExample();
    TestInitializerIsntCalled();
}"
KawaWDbG,TwitterBot,BerlinBot,PHP,Tuesday 23rd of May 2023 12:34:44 AM CDT,"--------------TwitterBot-----------
1B21-80D9-2021-1B21-0527A91B2112"
0pqCGFfC,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:32:36 AM CDT,"#include <iostream>
#include <string>
using namespace std;

class List
{
public:
	List();
	~List();

	void pop_front();
	void pop_back();
	void push_back(int data);
	void push_front(int data);
	void vstavit(int data, int index);
	void removeAt(int index);
	void clear();
	int GetSize() { return size; }
	//доступ к эл, & т.к нужна возможность изменять тот эл, index номер изменяемого эл
	int& operator[](const int index);
private:
	//что бы решить проблему типов переменных, которая возникла в задании со стеком
	//можно использовать шаблон класса, который позволяет задать внутри класса объекты, тип которых на этапе написания кода неизвестен
	class Node {
	public://доступ из приватной секции класса лист
		Node* next;
		int data;
		//для создания пустого списка Tip(), при этом не засоряя его мусором, nullptr значение по умолчанию
		Node(int data = int(), Node* next = nullptr) {
			this->data = data;
			if (next == nullptr) {
				this->next = this;
			}
			else if ((next != nullptr) && (next->next == next)) {
				next->next = this;
				this->next = next;

			}
			else {

				this->next = next;
				Node* Tmp = next;
				while (Tmp->next != next) {
					Tmp = Tmp->next;
				}
				Tmp->next = this;
				this->next = next;
			}
		}
	};
	int size;//колл переменных
	//для создания обьекта с непривязанным типом данных нужно обьявить класс List шаблонным, * т.к. все эл будут хран в динам памяти
	Node* head;
};

List::List()
{
	size = 0;
	head = nullptr;
}

List::~List()
{
	clear();
}

void List::pop_front()
{
	Node* temp = head;
	Node* Tmp = head;
	while (Tmp->next == head)
	{
		Tmp = Tmp->next;
	}
	head = head->next;
	Tmp->next = head;
	delete temp;
	size--;
}

void List::pop_back()
{
	removeAt(size - 1);
}

void List::push_back(int data)
{
	if (head == nullptr) {//если голова пустая, т.е ее не существует
		head = new Node(data);

	}
	else//поиск NULL и последущая привязка к след эл
	{
		Node* current = this->head;
		while (current->next != nullptr) {
			current = current->next;
		}
		//необходимо создать нулевой эл, что бы новый обьект ссыллался на него
		current->next = new Node(data);
	}
	size++;
}

void List::push_front(int data)
{
	head = new Node(data, head);
	size++;
}

void List::vstavit(int data, int index)
{

	if (index == 0) { push_front(data); }
	else {
		Node* pred = this->head;
		//найти предшествующий эл, после которого произойдет вставка
		for (int i(0); i < index - 1; i++) {
			pred = pred->next;
		}
		//новый эл становиться предыд для того который идет после него
		Node* newNod = new Node(data, pred->next);
		pred->next = newNod;
		size++;
	}
}

void List::removeAt(int index)
{
	if (index == 0) { pop_front(); }
	else {
		Node* pred = this->head;
		//найти предшествующий эл, после которого произойдет del
		for (int i(0); i < index - 1; i++) {
			pred = pred->next;
		}
		Node* Dell = pred->next;
		pred->next = Dell->next;
		delete Dell;
		size--;
	}
}

void List::clear()
{
	while (size) {
		pop_front();
	}
}

int& List::operator[](const int index)
{
	int count(0);
	Node* current = this->head;
	while (current != nullptr) {
		if (count == index) {
			cout << current << endl;
			cout << current->next << endl;

			return current->data;
		}
		current = current->next;
		count++;
	}
}

int main()
{
	cout << ""zadazcha 9"" << endl;
	List lst;

	int nums;
	cin >> nums;
	for (int i(0); i < nums; i++) {
		lst.push_front(rand() % 50);
	}

	for (int i(0); i < lst.GetSize(); i++) {
		cout << lst[i] << endl;
	}

	for (int i(0); i < lst.GetSize(); i++) {
		if (i != NULL) {
			lst.removeAt(i);
		}
	}
	for (int i(0); i < lst.GetSize(); i++) {
		cout << lst[i]
			<< endl;
	}
	cout << ""zadacha 13"" << endl;
	List osn;
	List sost2;
	for (int i(1); i < 21; i++) {
		osn.push_front(i);
	}
	for (int i(0); i < osn.GetSize(); i++) {
		cout << osn[i] << endl;
	}
	int c = 0;
	for (int i(0); i < osn.GetSize(); i++) {
		if (i != NULL) {
			sost2.vstavit(osn[i], c);
			osn.removeAt(i);
			c++;
		}
	}
	cout << "" "" << endl;
	cout << ""1 komanda"" << endl;
	for (int i(0); i < osn.GetSize(); i++) {
		cout << osn[i] << endl;
	}
	cout << "" "" << endl;
	cout << ""2 komanda"" << endl;
	for (int i(0); i < sost2.GetSize(); i++) {
		cout << sost2[i] << endl;
	}
	return 0;
}"
FPjdPgWe,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:20:47 AM CDT,"#include <iostream>
#include <string>
using namespace std;

template<typename Tip>
class List
{
public:
	List();
	~List();

	void pop_front();
	void pop_back();
	void push_back(Tip data);
	void push_front(Tip data);
	void vstavit(Tip data, int index);
	void removeAt(int index);
	void clear();
	int GetSize() { return size; }
	//доступ к эл, & т.к нужна возможность изменять тот эл, index номер изменяемого эл
	Tip& operator[](const int index);
private:
	//что бы решить проблему типов переменных, которая возникла в задании со стеком
	//можно использовать шаблон класса, который позволяет задать внутри класса объекты, тип которых на этапе написания кода неизвестен
	template<typename Tip>
	class Node {
	public://доступ из приватной секции класса лист
		Node* next;
		Tip data;
		//для создания пустого списка Tip(), при этом не засоряя его мусором, nullptr значение по умолчанию
		Node(Tip data = Tip(), Node *next = nullptr) {
			this->data = data;
			this->next = next;
		}
	};
	int size;//колл переменных
	//для создания обьекта с непривязанным типом данных нужно обьявить класс List шаблонным, * т.к. все эл будут хран в динам памяти
	Node<Tip> *head;
};

template<typename Tip>
List<Tip>::List()
{
	size = 0;
	head = nullptr;
}

template<typename Tip>
List<Tip>::~List()
{
	clear();
}

template<typename Tip>
void List<Tip>::pop_front()
{
	Node<Tip> *temp = head;
	head = head->next;
	delete temp;
	size--;
}

template<typename Tip>
void List<Tip>::pop_back()
{
	removeAt(size - 1);
}

template<typename Tip>
void List<Tip>::push_back(Tip data)
{
	if (head == nullptr) {//если голова пустая, т.е ее не существует
		head = new Node<Tip>(data);
	} else//поиск NULL и последущая привязка к след эл
	{
		Node<Tip>* current = this->head;
		while (current->next != nullptr) {
			current = current->next;
		}
		//необходимо создать нулевой эл, что бы новый обьект ссыллался на него
		current->next = new Node<Tip>(data);
	}
	size++;
}

template<typename Tip>
void List<Tip>::push_front(Tip data)
{
	head = new Node<Tip>(data, head);
	size++;
}

template<typename Tip>
void List<Tip>::vstavit(Tip data, int index)
{
	
	if (index == 0) { push_front(data); }
	else {
		Node<Tip>* pred = this->head;
		//найти предшествующий эл, после которого произойдет вставка
		for (int i(0); i < index - 1; i++) {
			pred = pred->next;
		}
		//новый эл становиться предыд для того который идет после него
		Node<Tip>* newNod = new Node<Tip>(data, pred->next);
		pred->next = newNod;
		size++;
	}
}

template<typename Tip>
void List<Tip>::removeAt(int index)
{
	if (index == 0) { pop_front(); }
	else {
		Node<Tip>* pred = this->head;
		//найти предшествующий эл, после которого произойдет del
		for (int i(0); i < index - 1; i++) {
			pred = pred->next;
		}
		Node<Tip>* Dell = pred->next;
		pred->next = Dell->next;
		delete Dell;
		size--;
	}
}

template<typename Tip>
void List<Tip>::clear()
{
	while (size) {
		pop_front();
	}
}

template<typename Tip>
Tip& List<Tip>::operator[](const int index)
{
	int count(0);
	Node<Tip>* current = this->head;
	while (current != nullptr) {
		if (count == index) {
			cout<< current << endl;
			cout << current->next << endl;

			return current->data;
		}
		current = current->next;
		count++;
	}
}

int main()
{
	List<int> lst;
	
	int nums;
	cin >> nums;
	for (int i(0); i < nums; i++) {
		lst.push_front(rand() % 50);
	}

	for (int i(0); i < lst.GetSize(); i++) {
		cout << lst[i] << endl;
	}
	
	lst.pop_front();

	cout << endl;
	for (int i(0); i < lst.GetSize(); i++) {
		cout << lst[i] << endl;
	}
    return 0;
}
"
neW5uTYS,Untitled,Semete,C++,Tuesday 23rd of May 2023 12:09:18 AM CDT,"#include <iostream>
#include <string>
using namespace std;

struct T_Elem {
	int data;
	int size;
	struct T_Elem* next;
};

struct T_Elem* push(int data, struct T_Elem* head) {
	struct T_Elem* Tmp_Elem = (struct T_Elem*)malloc(sizeof(struct T_Elem));
	Tmp_Elem->data = data;
	if (head == NULL) Tmp_Elem->size = 1;
	else Tmp_Elem->size = head->size + 1;
	Tmp_Elem->next = head;
	return Tmp_Elem;
}

int pop(struct T_Elem*& head) {
	struct T_Elem* Tmp_Elem;
	int data;
	Tmp_Elem = head;
	data = Tmp_Elem->data;
	head = head->next;
	free(Tmp_Elem);
	return data;
}

int top(struct T_Elem*& head) {
	struct T_Elem* Tmp_Elem = head;
	int data = head->data;
	return data;
}

void view(struct T_Elem* head) {
	struct T_Elem* Tmp_Elem;
	Tmp_Elem = head;
	cout << ""Stack:"" << endl;
	while (Tmp_Elem != NULL) {
		cout << Tmp_Elem->data << "" "" << Tmp_Elem->size << endl;
		Tmp_Elem = Tmp_Elem->next;
	}
	//cout << ""End of line"" << endl;
}

void var_1(struct T_Elem*& head) {
	cout << ""Var One"" << endl;
	struct T_Elem* Tmp_Elem;
	struct T_Elem* Tmp_too;
	Tmp_Elem = NULL;
	Tmp_too = NULL;
	int first, last;
	last = pop(head);
	cout << last << endl;
	while (head->next != NULL) {
		Tmp_Elem = push(pop(head), Tmp_Elem);
	}
	first = pop(head);
	cout << first << endl;
	view(Tmp_Elem);

	/*while (Tmp_Elem != NULL) {
		Tmp_too = push(pop(Tmp_Elem), Tmp_too);
	}*/

	head = push(last, head);
	while (Tmp_Elem != NULL) {
		head = push(pop(Tmp_Elem), head);
	}
	head = push(first, head);
}

void var_2(struct T_Elem*& head) {
	cout << ""Var 2"" << endl;
	int sizen = head->size;
	int arr[10];
	int i(0);
	while (head != NULL) {
		arr[i] = pop(head); i++;
	}
	for (int i(0); i < 10; i++) {
		head = push(arr[i], head);
		cout << arr[i] << "" "" << i+1 << endl;
	}
}

void var_3(struct T_Elem*& head) {
	cout << ""Var 3"" << endl;
	struct T_Elem* Tmp_Elem = NULL;
	int size = head->size;
	if ((size % 2) == 0) {
		for (int i = (size / 2) - 1; i > 0; i--) {
			Tmp_Elem = push(pop(head), Tmp_Elem);
		}
		pop(head);
		pop(head);
		for (int i = (size / 2) - 1; i > 0; i--) {
			Tmp_Elem = push(pop(head), Tmp_Elem);
		}
		for (int i = size - 2; i > 0; i--) {
			head = push(pop(Tmp_Elem), head);
		}
	}
	else {
		for (int i = (size -1) / 2; i > 0; i--) {
			Tmp_Elem = push(pop(head), Tmp_Elem);
		}
		pop(head);
		for (int i = (size -1) / 2; i > 0; i--) {
			Tmp_Elem = push(pop(head), Tmp_Elem);
		}
		for (int i = size - 1; i > 0; i--) {
			head = push(pop(Tmp_Elem), head);
		}
	}
}

void var_4(struct T_Elem*& head) {
	cout << ""Var 4"" << endl;
	struct T_Elem* Tmp_Elem = NULL;
	int size = head->size;
	for (int i = size / 2; i > 0; i--) {
		Tmp_Elem = push(pop(head), Tmp_Elem);
		pop(head);
	}
	for (int i = size / 2; i > 0; i--) {
		head = push(pop(Tmp_Elem), head);
	}
}

void var_9(struct T_Elem*& head) {
	cout << ""Var 10"" << endl;
	struct T_Elem* Tmp_Elem = NULL;
	struct T_Elem* Tmp_elem = NULL;
	while (head != NULL) {
		Tmp_elem = push(pop(head), Tmp_elem);
	}
	int first = top(Tmp_elem);
	while (Tmp_elem->next != NULL) {
		head = push(pop(Tmp_elem), head);
		if (top(Tmp_elem) == first) {
			pop(Tmp_elem);
		}
	}
	/*while (Tmp_Elem != NULL) {
		head = push(pop(Tmp_Elem), head);
	}*/
}

int main()
{
	struct T_Elem* Head = NULL;
	for (int i = 10; i < 20; i++) {
		Head = push((i), Head);
	}
	view(Head);
	var_1(Head);
	view(Head);
	cout << ""-------------------------"" << endl;

	struct T_Elem* head = NULL;
	for (int i = 10; i < 20; i++) {
		head = push((i), head);
	}
	var_2(head);
	view(head);
	cout << ""-------------------------"" << endl;
	
	struct T_Elem* fead = NULL;
	for (int i = 10; i < 21; i++) {
		fead = push((i), fead);
	}
	view(fead);
	var_3(fead);
	view(fead);
	cout << ""-------------------------"" << endl;

	struct T_Elem* lead = NULL;
	for (int i = 10; i < 21; i++) {
		lead = push((i), lead);
	}
	view(lead);
	var_4(lead);
	view(lead);
	cout << ""-------------------------"" << endl;

	struct T_Elem* jead = NULL;

	jead = push((1), jead);
	jead = push((4), jead);
	jead = push((1), jead);
	jead = push((4), jead);
	jead = push((2), jead);
	jead = push((5), jead);
	jead = push((4), jead);

	view(jead);
	var_9(jead);
	view(jead);
	cout << ""-------------------------"" << endl;
	return 0;
}"
g432tPwE,delete.php,rizkyxp,PHP,Tuesday 23rd of May 2023 12:07:51 AM CDT,"<?php
if($_POST){
	$id = $_POST[""id""];
	$lines = file(""text.txt"", FILE_IGNORE_NEW_LINES);
	foreach($lines as $key => $line){
		$data = explode("","", $line);
		if($data[0] == $id){
			unset($lines[$key]);
			break;
		}
	}
	file_put_contents(""text.txt"", implode(PHP_EOL, $lines).PHP_EOL);
}
"
QHpxvHE4,edit.php,rizkyxp,PHP,Tuesday 23rd of May 2023 12:05:56 AM CDT,"<?php
if($_POST){
	$id = $_POST[""id""];
	$text = $_POST[""text""];
	$lines = file(""text.txt"", FILE_IGNORE_NEW_LINES);
	foreach($lines as $key => $line){
		$data = explode("","", $line);
		if($data[0] == $id){
			$lines[$key] = ""$id,$text"";
			break;
		}
	}
	file_put_contents(""text.txt"", implode(PHP_EOL, $lines).PHP_EOL);
	echo json_encode([""id"" => $id, ""html"" => ""<tr id='row-$id'><td>$id</td><td>$text</td><td><button type='button' class='btn btn-primary edit-btn' data-id='$id' data-text='$text'>Edit</button> <button type='button' class='btn btn-danger delete-btn' data-id='$id'>Delete</button></td></tr>""]);
}
"
v0dLeywk,Add.php,rizkyxp,PHP,Tuesday 23rd of May 2023 12:05:08 AM CDT,"<?php
if($_POST){
	$text = $_POST[""text""];
	$lines = file(""text.txt"", FILE_IGNORE_NEW_LINES);
	$id = count($lines) + 1;
	$line = ""$id,$text"";
	file_put_contents(""text.txt"", $line.PHP_EOL, FILE_APPEND);
	echo ""<tr id='row-$id'><td>$id</td><td>$text</td><td><button type='button' class='btn btn-primary edit-btn' data-id='$id' data-text='$text'>Edit</button> <button type='button' class='btn btn-danger delete-btn' data-id='$id'>Delete</button></td></tr>"";
}
"
EWHVnLL4,index.php,rizkyxp,PHP,Tuesday 23rd of May 2023 12:04:19 AM CDT,"<!DOCTYPE html>
<html>
<head>
	<title>Text File Editor</title>
	<link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"">
	<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js""></script>
	<script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js""></script>
	<script>
		$(document).ready(function(){
			$(""#addForm"").submit(function(event){
				event.preventDefault();
				var formData = $(this).serialize();
				$.ajax({
					url: ""add.php"",
					type: ""POST"",
					data: formData,
					success: function(response){
						$(""#addForm"")[0].reset();
						$(""#addModal"").modal(""hide"");
						$(""#table"").append(response);
					}
				});
			});
			$(""#editForm"").submit(function(event){
				event.preventDefault();
				var formData = $(this).serialize();
				$.ajax({
					url: ""edit.php"",
					type: ""POST"",
					data: formData,
					success: function(response){
						$(""#editForm"")[0].reset();
						$(""#editModal"").modal(""hide"");
						$(""#row-""+response.id).replaceWith(response.html);
					}
				});
			});
			$(document).on(""click"", "".edit-btn"", function(){
				var id = $(this).data(""id"");
				var text = $(this).data(""text"");
				$(""#editForm input[name='id']"").val(id);
				$(""#editForm input[name='text']"").val(text);
				$(""#editModal"").modal(""show"");
			});
			$(document).on(""click"", "".delete-btn"", function(){
				var id = $(this).data(""id"");
				$.ajax({
					url: ""delete.php"",
					type: ""POST"",
					data: {id: id},
					success: function(){
						$(""#row-""+id).remove();
					}
				});
			});
		});
	</script>
</head>
<body>
	<div class=""container"">
		<h2>Text File Editor</h2>
		<button type=""button"" class=""btn btn-primary"" data-toggle=""modal"" data-target=""#addModal"">Add Text</button>
		<br><br>
		<table class=""table"" id=""table"">
			<thead>
				<tr>
					<th>ID</th>
					<th>Text</th>
					<th>Action</th>
				</tr>
			</thead>
			<tbody>
				<?php
				$lines = file(""text.txt"", FILE_IGNORE_NEW_LINES);
				foreach($lines as $line){
					$data = explode("","", $line);
					$id = $data[0];
					$text = $data[1];
					echo ""<tr id='row-$id'><td>$id</td><td>$text</td><td><button type='button' class='btn btn-primary edit-btn' data-id='$id' data-text='$text'>Edit</button> <button type='button' class='btn btn-danger delete-btn' data-id='$id'>Delete</button></td></tr>"";
				}
				?>
			</tbody>
		</table>
	</div>
	<div class=""modal fade"" id=""addModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""addModalLabel"">
		<div class=""modal-dialog"" role=""document"">
			<div class=""modal-content"">
				<form id=""addForm"">
					<div class=""modal-header"">
						<button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close""><span aria-hidden=""true"">&times;</span></button>
						<h4 class=""modal-title"" id=""addModalLabel"">Add Text</h4>
					</div>
					<div class=""modal-body"">
						<div class=""form-group"">
							<label for=""text"">Text:</label>
							<input type=""text"" class=""form-control"" id=""text"" name=""text"" required>
						</div>
					</div>
					<div class=""modal-footer"">
						<button type=""button"" class=""btn btn-default"" data-dismiss=""modal"">Close</button>
						<button type=""submit"" class=""btn btn-primary"">Add</button>
					</div>
				</form>
			</div>
		</div>
	</div>
	<div class=""modal fade"" id=""editModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""editModalLabel"">
		<div class=""modal-dialog"" role=""document"">
			<div class=""modal-content"">
				<form id=""editForm"">
					<div class=""modal-header"">
						<button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close""><span aria-hidden=""true"">&times;</span></button>
						<h4 class=""modal-title"" id=""editModalLabel"">Edit Text</h4>
					</div>
					<div class=""modal-body"">
						<input type=""hidden"" name=""id"">
						<div class=""form-group"">
							<label for=""text"">Text:</label>
							<input type=""text"" class=""form-control"" id=""text"" name=""text"" required>
						</div>
					</div>
					<div class=""modal-footer"">
						<button type=""button"" class=""btn btn-default"" data-dismiss=""modal"">Close</button>
						<button type=""submit"" class=""btn btn-primary"">Save</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</body>
</html>
"
MNP2PmB8,Grid Analyzer,klassekatze,C#,Monday 22nd of May 2023 11:34:30 PM CDT,"/*
 * R e a d m e
 * -----------
 * 
 * In this file you can include any instructions or other comments you want to have injected onto the 
 * top of your final script. You can safely delete this file if you do not want any such comments.
 */

// This file contains your actual script.
//
// You can either keep all your code here, or you can create separate
// code files to make your program easier to navigate while coding.
//
// In order to add a new utility class, right-click on your project,
// select 'New' then 'Add Item...'. Now find the 'Space Engineers'
// category under 'Visual C# Items' on the left hand side, and select
// 'Utility Class' in the main area. Name it in the box below, and
// press OK. This utility class will be merged in with your code when
// deploying your final script.
//
// You can also simply create a new utility class manually, you don't
// have to use the template if you don't want to. Just do so the first
// time to see what a utility class looks like.
//
// Go to:
// https://github.com/malware-dev/MDK-SE/wiki/Quick-Introduction-to-Space-Engineers-Ingame-Scripts
//
// to learn more about ingame scripts.



public Program()
{
    Utility.setup();
    report();
}

struct ReportEntry
{
    public string name;
    public int count;
    public int PCU;
    public int mass;
}

int gridCount<T>(Func<IMyTerminalBlock, bool> f = null) where T : class
{
    List<IMyTerminalBlock> blocks = new List<IMyTerminalBlock>();
    GridTerminalSystem.GetBlocksOfType<T>(blocks, f);
    return blocks.Count;
}

string newtons(double n)
{
    if (n < 1000) return n.ToString(""0.0"") + ""N"";
    if (n < 1000000) return (n/1000).ToString(""0.0"") + ""kN"";
    /*if (n < 1000000000)*/ return (n / 1000000).ToString(""0.0"") + ""MN"";
}
public void report()
{
    int total_PCU = 0;
    int total_mass = 0;
    Dictionary<string, string> displayname_to_defname = new Dictionary<string, string>();
    Dictionary<string, int> blocktype_count = new Dictionary<string, int>();
    Dictionary<string, int> mass_by_blocktype = new Dictionary<string, int>();

    //List<ReportEntry> entries = new List<ReportEntry>();

    List<IMyTerminalBlock> blocks = new List<IMyTerminalBlock>();
    GridTerminalSystem.GetBlocksOfType<IMyTerminalBlock>(blocks);
    for(int i = 0; i < blocks.Count; i++)
    {
        IMyTerminalBlock block = blocks[i];

        string name = Utility.getName(block);
        if (!blocktype_count.ContainsKey(name)) blocktype_count[name] = 0;
        if (!mass_by_blocktype.ContainsKey(name)) mass_by_blocktype[name] = 0;
        if (!displayname_to_defname.ContainsKey(name))
        {
            displayname_to_defname[name] = Utility.getDefName(block);
        }
        blocktype_count[name] += 1;
        mass_by_blocktype[name] += (int)Math.Ceiling(block.Mass);
    }

    List<ReportEntry> entries = new List<ReportEntry>();

    string report = """";
    foreach(KeyValuePair<string, int> kvp in blocktype_count)
    {
        var key = kvp.Key;
        int count = blocktype_count[key];
        int pcu = Utility.getPCU(displayname_to_defname[key]);

        ReportEntry e = new ReportEntry();
        e.name = key;
        e.count = count;
        e.PCU = pcu*count;
        e.mass = mass_by_blocktype[key];
        entries.Add(e);
        //entries.a
        //report += count + "" "" + key + "" totalling "" + pcu * count + "" PCU and "" + mass_by_blocktype[key] + "" mass\n"";
    }
    List<IMyShipController> ctrls = new List<IMyShipController>();
    GridTerminalSystem.GetBlocksOfType<IMyShipController>(ctrls);
    if (ctrls.Count > 0)
    {
        var c = ctrls[0];
        int bm = (int)c.CalculateShipMass().BaseMass;
        foreach (ReportEntry e in entries)
        {
            bm -= e.mass;
        }
        var r = new ReportEntry();
        r.name = ""remainder (armor etc)"";
        r.count = -1;
        r.mass = bm;
        entries.Add(r);
    }

    report += ""Report saved to CustomData.\n\n"";

    if (gridCount<IMyBeacon>() < 1) report += ""WARNING: No beacon!\n"";
    int skits = gridCount<IMyTerminalBlock>(b => b.DefinitionDisplayNameText.ToLower().Contains(""survival"") || b is IMyMedicalRoom);
    if (skits < 1) report += ""WARNING: No medical room or skit!\n"";
    else report += ""Skits: "" + skits + ""\n"";
    int pbc = gridCount<IMyProgrammableBlock>();
    report += ""Program blocks: "" + pbc + ""\n"";
    if (gridCount<IMyGasTank>(b => b.DefinitionDisplayNameText.ToLower().Contains(""hydrogen"")) < 1)report += ""WARNING: No hydrogen tanks!\n"";
    if (gridCount<IMyGasTank>(b => b.DefinitionDisplayNameText.ToLower().Contains(""oxygen"")) < 1) report += ""WARNING: No oxygen tanks!\n"";
    if (gridCount<IMyShipConnector>() < 1) report += ""WARNING: No connectors!\n"";
    if (gridCount<IMyCockpit>() < 1) report += ""WARNING: No cockpit!\n"";
    if (gridCount<IMyUpgradeModule>(b => b.DefinitionDisplayNameText.ToLower().Contains(""stabilizer"")) < 1) report += ""WARNING: No Epstein Stabilizer!\n"";
    if (gridCount<IMyCargoContainer>() < 1) report += ""WARNING: No cargo containers!\n"";
    if (gridCount<IMyProjector>() < 1) report += ""WARNING: No projector!\n"";
    if (gridCount<IMyLandingGear>() < 1) report += ""WARNING: No maglocks!\n"";
    if (gridCount<IMyMotorStator>() < 1) report += ""WARNING: No rotor!\n"";
    if (gridCount<IMyRadioAntenna>() < 1) report += ""WARNING: No antenna!\n"";

    report += ""\nTHRUST REPORT:\n"";

    List<IMyThrust> thrusters = new List<IMyThrust>();
    double mass = 0;
    GridTerminalSystem.GetBlocksOfType<IMyThrust>(thrusters);
    //MatrixD fwd;// = Base6Directions.Direction.Forward;
    if (ctrls.Count > 0)
    {
        mass = ctrls[0].CalculateShipMass().PhysicalMass;
        //fwd = ctrls[0].WorldMatrix;
    }
    if (ctrls.Count > 0)
    {
        Dictionary<Base6Directions.Direction, double> thrustByDir = new Dictionary<Base6Directions.Direction, double>();
        foreach (var d in (Base6Directions.Direction[])Enum.GetValues(typeof(Base6Directions.Direction)))
        {
            thrustByDir[d] = 0;
        }

        foreach (var t in thrusters)
        {
            var met = t.MaxEffectiveThrust;
            var d = ctrls[0].Orientation.TransformDirectionInverse(t.Orientation.Forward);
            if (!thrustByDir.ContainsKey(d)) thrustByDir[d] = met;
            else thrustByDir[d] += met;
        }
        //Dictionary<Base6Directions.Direction, double> tmp = new Dictionary<Base6Directions.Direction, double>(
        //report += ""cockpit is "" + ctrls[0].Orientation.Forward;

        foreach (var d in (Base6Directions.Direction[])Enum.GetValues(typeof(Base6Directions.Direction)))
        {
            double t = thrustByDir[d];

            //MyBlockOrientation x = new MyBlockOrientation();

            //Vector3D offset_local = Vector3D.TransformNormal((Vector3D)Base6Directions.GetVector(d), Matrix.Transpose(ctrls[0].WorldMatrix));
            //var ld = Base6Directions.GetClosestDirection(offset_local);
            report += d + "" dir thrust: "" + newtons(t) + "" ("" + (t / mass).ToString(""0.0"") + ""m/s)\n"";
            //else report +=""WARN: No thrust for ""+d+""!!\n"";
        }
    }



    //List<IMyThrust> thrust = new List<IMyThrust>();
    //GridTerminalSystem.GetBlocksOfType<IMyThrust>(thrust);
    //bool[] dirs = new bool[6];
    //for (var i = 0; i < 6; i++) dirs[i] = false;
    /*Base6Directions fwdthrust;
            foreach (var t in thrust)
            {
                if (t.DefinitionDisplayNameText.ToLower().Contains(""epstein""))
                {
                    fwdthrust = t.
                }
            }*/
    /*foreach (var t in thrust)
            {
                Base6Directions.GetDirection(t.GridThrustDirection);
            }*/



    report += ""\nREPORT BY PCU:\n"";
    entries.Sort(delegate (ReportEntry x, ReportEntry y)
     {
         return y.PCU.CompareTo(x.PCU);
     });
    foreach (ReportEntry e in entries)
    {
        report += "" ""+e.count + "" "" + e.name + "": "" + e.PCU + "" PCU, "" + e.mass + "" mass\n"";
    }
    report += ""\nREPORT BY MASS:\n"";
    entries.Sort(delegate (ReportEntry x, ReportEntry y)
    {
        return y.mass.CompareTo(x.mass);
    });
    foreach (ReportEntry e in entries)
    {
        report += "" "" + e.count + "" "" + e.name + "": "" + e.PCU + "" PCU, "" + e.mass + "" mass\n"";
    }

    Echo(report);
    Me.CustomData = report;
}

public void Main(string argument, UpdateType updateSource)
{
    report();
}

public class Utility
{
    static Dictionary<string, int> PCUTable = new Dictionary<string, int>();

    static int mobl = ""MyObjectBuilder_"".Length;

    public static string getName(IMyTerminalBlock block)
    {
        return block.DefinitionDisplayNameText;
    }
    public static string getDefName(IMyTerminalBlock block)
    {
        string n = block.BlockDefinition.TypeIdString.Substring(mobl) + ""/"" + block.BlockDefinition.SubtypeId;
        return n;
    }
    public static int getPCU(string defname)
    {
        if (PCUTable.ContainsKey(defname)) return PCUTable[defname];
        return 0;
        //DisplayNames[n] = t.DefinitionDisplayNameText;
    }


    public static void setup()
    {
        if (PCUTable.Count > 0) return;

        PCUTable[""MyProgrammableBlock/SmallProgrammableBlock""] = 100;
        PCUTable[""MyObjectBuilder_Projector/LargeProjector""] = 50;
        PCUTable[""MyObjectBuilder_Projector/SmallProjector""] = 50;
        PCUTable[""SensorBlock/SmallBlockSensor""] = 25;
        PCUTable[""SensorBlock/LargeBlockSensor""] = 25;
        PCUTable[""TargetDummyBlock/TargetDummy""] = 25;
        PCUTable[""SoundBlock/SmallBlockSoundBlock""] = 25;
        PCUTable[""SoundBlock/LargeBlockSoundBlock""] = 25;
        PCUTable[""ButtonPanel/ButtonPanelLarge""] = 5;
        PCUTable[""ButtonPanel/ButtonPanelSmall""] = 5;
        PCUTable[""TimerBlock/TimerBlockLarge""] = 25;
        PCUTable[""TimerBlock/TimerBlockSmall""] = 25;
        PCUTable[""MyProgrammableBlock/LargeProgrammableBlock""] = 100;
        PCUTable[""TurretControlBlock/LargeTurretControlBlock""] = 100;
        PCUTable[""TurretControlBlock/SmallTurretControlBlock""] = 100;
        PCUTable[""EventControllerBlock/EventControllerLarge""] = 10;
        PCUTable[""EventControllerBlock/EventControllerSmall""] = 10;
        PCUTable[""PathRecorderBlock/LargePathRecorderBlock""] = 25;
        PCUTable[""PathRecorderBlock/SmallPathRecorderBlock""] = 25;
        PCUTable[""BasicMissionBlock/LargeBasicMission""] = 15;
        PCUTable[""BasicMissionBlock/SmallBasicMission""] = 15;
        PCUTable[""FlightMovementBlock/LargeFlightMovement""] = 25;
        PCUTable[""FlightMovementBlock/SmallFlightMovement""] = 25;
        PCUTable[""DefensiveCombatBlock/LargeDefensiveCombat""] = 25;
        PCUTable[""DefensiveCombatBlock/SmallDefensiveCombat""] = 25;
        PCUTable[""OffensiveCombatBlock/LargeOffensiveCombat""] = 25;
        PCUTable[""OffensiveCombatBlock/SmallOffensiveCombat""] = 25;
        PCUTable[""RadioAntenna/LargeBlockRadioAntenna""] = 100;
        PCUTable[""Beacon/LargeBlockBeacon""] = 50;
        PCUTable[""Beacon/SmallBlockBeacon""] = 50;
        PCUTable[""RadioAntenna/SmallBlockRadioAntenna""] = 100;
        PCUTable[""RemoteControl/LargeBlockRemoteControl""] = 25;
        PCUTable[""RemoteControl/SmallBlockRemoteControl""] = 25;
        PCUTable[""LaserAntenna/LargeBlockLaserAntenna""] = 100;
        PCUTable[""LaserAntenna/SmallBlockLaserAntenna""] = 100;
        PCUTable[""TerminalBlock/ControlPanel""] = 5;
        PCUTable[""TerminalBlock/SmallControlPanel""] = 5;
        PCUTable[""Cockpit/LargeBlockCockpit""] = 50;
        PCUTable[""Cockpit/LargeBlockCockpitSeat""] = 150;
        PCUTable[""Cockpit/SmallBlockCockpit""] = 150;
        PCUTable[""Cockpit/DBSmallBlockFighterCockpit""] = 150;
        PCUTable[""Cockpit/CockpitOpen""] = 50;
        PCUTable[""Cockpit/RoverCockpit""] = 100;
        PCUTable[""Gyro/LargeBlockGyro""] = 50;
        PCUTable[""Gyro/SmallBlockGyro""] = 50;
        PCUTable[""Cockpit/OpenCockpitSmall""] = 50;
        PCUTable[""Cockpit/OpenCockpitLarge""] = 150;
        PCUTable[""Cockpit/LargeBlockDesk""] = 15;
        PCUTable[""Cockpit/LargeBlockDeskCorner""] = 15;
        PCUTable[""Cockpit/LargeBlockDeskCornerInv""] = 15;
        PCUTable[""CryoChamber/LargeBlockBed""] = 15;
        PCUTable[""CargoContainer/LargeBlockLockerRoom""] = 10;
        PCUTable[""CargoContainer/LargeBlockLockerRoomCorner""] = 10;
        PCUTable[""Cockpit/LargeBlockCouch""] = 15;
        PCUTable[""Cockpit/LargeBlockCouchCorner""] = 15;
        PCUTable[""CargoContainer/LargeBlockLockers""] = 10;
        PCUTable[""Cockpit/LargeBlockBathroomOpen""] = 15;
        PCUTable[""Cockpit/LargeBlockBathroom""] = 15;
        PCUTable[""Cockpit/LargeBlockToilet""] = 15;
        PCUTable[""Projector/LargeBlockConsole""] = 150;
        PCUTable[""Cockpit/SmallBlockCockpitIndustrial""] = 150;
        PCUTable[""Cockpit/LargeBlockCockpitIndustrial""] = 150;
        PCUTable[""VendingMachine/FoodDispenser""] = 10;
        PCUTable[""Jukebox/Jukebox""] = 25;
        PCUTable[""TextPanel/TransparentLCDLarge""] = 50;
        PCUTable[""TextPanel/TransparentLCDSmall""] = 50;
        PCUTable[""ReflectorLight/RotatingLightLarge""] = 25;
        PCUTable[""ReflectorLight/RotatingLightSmall""] = 25;
        PCUTable[""CubeBlock/Freight1""] = 10;
        PCUTable[""CubeBlock/Freight2""] = 10;
        PCUTable[""CubeBlock/Freight3""] = 10;
        PCUTable[""Door/""] = 115;
        PCUTable[""Door/SmallDoor""] = 115;
        PCUTable[""AirtightHangarDoor/""] = 115;
        PCUTable[""AirtightSlideDoor/LargeBlockSlideDoor""] = 115;
        PCUTable[""StoreBlock/StoreBlock""] = 10;
        PCUTable[""SafeZoneBlock/SafeZoneBlock""] = 50;
        PCUTable[""ContractBlock/ContractBlock""] = 10;
        PCUTable[""VendingMachine/VendingMachine""] = 10;
        PCUTable[""StoreBlock/AtmBlock""] = 10;
        PCUTable[""BatteryBlock/LargeBlockBatteryBlock""] = 15;
        PCUTable[""BatteryBlock/SmallBlockBatteryBlock""] = 15;
        PCUTable[""BatteryBlock/SmallBlockSmallBatteryBlock""] = 15;
        PCUTable[""Reactor/SmallBlockSmallGenerator""] = 75;
        PCUTable[""Reactor/SmallBlockLargeGenerator""] = 350;
        PCUTable[""Reactor/LargeBlockSmallGenerator""] = 300;
        PCUTable[""Reactor/LargeBlockLargeGenerator""] = 600;
        PCUTable[""HydrogenEngine/LargeHydrogenEngine""] = 25;
        PCUTable[""HydrogenEngine/SmallHydrogenEngine""] = 25;
        PCUTable[""WindTurbine/LargeBlockWindTurbine""] = 55;
        PCUTable[""SolarPanel/LargeBlockSolarPanel""] = 55;
        PCUTable[""SolarPanel/SmallBlockSolarPanel""] = 55;
        PCUTable[""RadioAntenna/LargeBlockRadioAntennaDish""] = 100;
        PCUTable[""Door/LargeBlockGate""] = 115;
        PCUTable[""Door/LargeBlockOffsetDoor""] = 115;
        PCUTable[""CubeBlock/DeadBody01""] = 10;
        PCUTable[""CubeBlock/DeadBody02""] = 10;
        PCUTable[""CubeBlock/DeadBody03""] = 10;
        PCUTable[""CubeBlock/DeadBody04""] = 10;
        PCUTable[""CubeBlock/DeadBody05""] = 10;
        PCUTable[""CubeBlock/DeadBody06""] = 10;
        PCUTable[""GravityGenerator/""] = 185;
        PCUTable[""GravityGeneratorSphere/""] = 200;
        PCUTable[""VirtualMass/VirtualMassLarge""] = 250;
        PCUTable[""VirtualMass/VirtualMassSmall""] = 250;
        PCUTable[""SpaceBall/SpaceBallLarge""] = 25;
        PCUTable[""SpaceBall/SpaceBallSmall""] = 25;
        PCUTable[""InteriorLight/LargeBlockInsetLight""] = 25;
        PCUTable[""InteriorLight/SmallBlockInsetLight""] = 25;
        PCUTable[""TerminalBlock/LargeBlockAccessPanel1""] = 5;
        PCUTable[""TerminalBlock/LargeBlockAccessPanel2""] = 5;
        PCUTable[""ButtonPanel/LargeBlockAccessPanel3""] = 5;
        PCUTable[""TerminalBlock/LargeBlockAccessPanel4""] = 5;
        PCUTable[""TerminalBlock/SmallBlockAccessPanel1""] = 5;
        PCUTable[""TerminalBlock/SmallBlockAccessPanel2""] = 5;
        PCUTable[""TerminalBlock/SmallBlockAccessPanel3""] = 5;
        PCUTable[""TerminalBlock/SmallBlockAccessPanel4""] = 5;
        PCUTable[""AirVent/AirVentFan""] = 10;
        PCUTable[""AirVent/AirVentFanFull""] = 10;
        PCUTable[""AirVent/SmallAirVentFan""] = 10;
        PCUTable[""AirVent/SmallAirVentFanFull""] = 10;
        PCUTable[""CameraBlock/LargeCameraTopMounted""] = 25;
        PCUTable[""CameraBlock/SmallCameraTopMounted""] = 25;
        PCUTable[""SensorBlock/SmallBlockSensorReskin""] = 25;
        PCUTable[""SensorBlock/LargeBlockSensorReskin""] = 25;
        PCUTable[""MyProgrammableBlock/LargeProgrammableBlockReskin""] = 100;
        PCUTable[""MyProgrammableBlock/SmallProgrammableBlockReskin""] = 100;
        PCUTable[""TimerBlock/TimerBlockReskinLarge""] = 25;
        PCUTable[""TimerBlock/TimerBlockReskinSmall""] = 25;
        PCUTable[""Cockpit/SpeederCockpit""] = 50;
        PCUTable[""Cockpit/SpeederCockpitCompact""] = 50;
        PCUTable[""EmotionControllerBlock/EmotionControllerLarge""] = 50;
        PCUTable[""EmotionControllerBlock/EmotionControllerSmall""] = 50;
        PCUTable[""LandingGear/LargeBlockMagneticPlate""] = 35;
        PCUTable[""LandingGear/SmallBlockMagneticPlate""] = 35;
        PCUTable[""CargoContainer/LargeBlockLargeIndustrialContainer""] = 10;
        PCUTable[""ButtonPanel/VerticalButtonPanelLarge""] = 5;
        PCUTable[""ButtonPanel/VerticalButtonPanelSmall""] = 5;
        PCUTable[""ConveyorConnector/LargeBlockConveyorPipeSeamless""] = 10;
        PCUTable[""ConveyorConnector/LargeBlockConveyorPipeCorner""] = 10;
        PCUTable[""Conveyor/LargeBlockConveyorPipeJunction""] = 10;
        PCUTable[""Conveyor/LargeBlockConveyorPipeIntersection""] = 10;
        PCUTable[""ConveyorConnector/LargeBlockConveyorPipeFlange""] = 10;
        PCUTable[""ConveyorConnector/LargeBlockConveyorPipeEnd""] = 10;
        PCUTable[""Conveyor/LargeBlockConveyorPipeT""] = 10;
        PCUTable[""OxygenTank/LargeHydrogenTankIndustrial""] = 25;
        PCUTable[""Assembler/LargeAssemblerIndustrial""] = 400;
        PCUTable[""Refinery/LargeRefineryIndustrial""] = 900;
        PCUTable[""ConveyorSorter/LargeBlockConveyorSorterIndustrial""] = 25;
        PCUTable[""Thrust/LargeBlockLargeHydrogenThrustIndustrial""] = 150;
        PCUTable[""Thrust/LargeBlockSmallHydrogenThrustIndustrial""] = 150;
        PCUTable[""Thrust/SmallBlockLargeHydrogenThrustIndustrial""] = 150;
        PCUTable[""Thrust/SmallBlockSmallHydrogenThrustIndustrial""] = 150;
        PCUTable[""Cockpit/PassengerSeatLarge""] = 15;
        PCUTable[""Cockpit/PassengerSeatSmall""] = 15;
        PCUTable[""Cockpit/PassengerSeatSmallNew""] = 15;
        PCUTable[""Cockpit/PassengerSeatSmallOffset""] = 15;
        PCUTable[""InteriorLight/AirDuctLight""] = 25;
        PCUTable[""TextPanel/SmallTextPanel""] = 50;
        PCUTable[""TextPanel/SmallLCDPanelWide""] = 50;
        PCUTable[""TextPanel/SmallLCDPanel""] = 50;
        PCUTable[""TextPanel/LargeBlockCorner_LCD_1""] = 50;
        PCUTable[""TextPanel/LargeBlockCorner_LCD_2""] = 50;
        PCUTable[""TextPanel/LargeBlockCorner_LCD_Flat_1""] = 50;
        PCUTable[""TextPanel/LargeBlockCorner_LCD_Flat_2""] = 50;
        PCUTable[""TextPanel/SmallBlockCorner_LCD_1""] = 50;
        PCUTable[""TextPanel/SmallBlockCorner_LCD_2""] = 50;
        PCUTable[""TextPanel/SmallBlockCorner_LCD_Flat_1""] = 50;
        PCUTable[""TextPanel/SmallBlockCorner_LCD_Flat_2""] = 50;
        PCUTable[""TextPanel/LargeTextPanel""] = 50;
        PCUTable[""TextPanel/LargeLCDPanel""] = 50;
        PCUTable[""TextPanel/LargeLCDPanelWide""] = 50;
        PCUTable[""ReflectorLight/LargeBlockFrontLight""] = 25;
        PCUTable[""ReflectorLight/SmallBlockFrontLight""] = 25;
        PCUTable[""InteriorLight/SmallLight""] = 25;
        PCUTable[""InteriorLight/SmallBlockSmallLight""] = 25;
        PCUTable[""InteriorLight/LargeBlockLight_1corner""] = 25;
        PCUTable[""InteriorLight/LargeBlockLight_2corner""] = 25;
        PCUTable[""InteriorLight/SmallBlockLight_1corner""] = 25;
        PCUTable[""InteriorLight/SmallBlockLight_2corner""] = 25;
        PCUTable[""OxygenTank/OxygenTankSmall""] = 25;
        PCUTable[""OxygenTank/""] = 25;
        PCUTable[""OxygenTank/LargeHydrogenTank""] = 25;
        PCUTable[""OxygenTank/LargeHydrogenTankSmall""] = 25;
        PCUTable[""OxygenTank/SmallHydrogenTank""] = 25;
        PCUTable[""OxygenTank/SmallHydrogenTankSmall""] = 25;
        PCUTable[""AirVent/""] = 10;
        PCUTable[""AirVent/AirVentFull""] = 10;
        PCUTable[""AirVent/SmallAirVent""] = 10;
        PCUTable[""AirVent/SmallAirVentFull""] = 10;
        PCUTable[""CargoContainer/SmallBlockSmallContainer""] = 10;
        PCUTable[""CargoContainer/SmallBlockMediumContainer""] = 10;
        PCUTable[""CargoContainer/SmallBlockLargeContainer""] = 10;
        PCUTable[""CargoContainer/LargeBlockSmallContainer""] = 10;
        PCUTable[""CargoContainer/LargeBlockLargeContainer""] = 10;
        PCUTable[""Conveyor/SmallBlockConveyor""] = 10;
        PCUTable[""Conveyor/SmallBlockConveyorConverter""] = 10;
        PCUTable[""Conveyor/LargeBlockConveyor""] = 30;
        PCUTable[""Collector/Collector""] = 25;
        PCUTable[""Collector/CollectorSmall""] = 25;
        PCUTable[""ShipConnector/Connector""] = 125;
        PCUTable[""ShipConnector/ConnectorSmall""] = 125;
        PCUTable[""ShipConnector/ConnectorMedium""] = 125;
        PCUTable[""ConveyorConnector/ConveyorTube""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeDuct""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeDuctCurved""] = 10;
        PCUTable[""Conveyor/ConveyorTubeDuctT""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeSmall""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeDuctSmall""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeDuctSmallCurved""] = 10;
        PCUTable[""Conveyor/ConveyorTubeDuctSmallT""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeMedium""] = 10;
        PCUTable[""ConveyorConnector/ConveyorFrameMedium""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeCurved""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeSmallCurved""] = 10;
        PCUTable[""ConveyorConnector/ConveyorTubeCurvedMedium""] = 10;
        PCUTable[""Conveyor/SmallShipConveyorHub""] = 25;
        PCUTable[""Conveyor/ConveyorTubeSmallT""] = 10;
        PCUTable[""Conveyor/ConveyorTubeT""] = 10;
        PCUTable[""ConveyorSorter/LargeBlockConveyorSorter""] = 25;
        PCUTable[""ConveyorSorter/MediumBlockConveyorSorter""] = 25;
        PCUTable[""ConveyorSorter/SmallBlockConveyorSorter""] = 25;
        PCUTable[""PistonBase/LargePistonBase""] = 100;
        PCUTable[""ExtendedPistonBase/LargePistonBase""] = 100;
        PCUTable[""PistonBase/SmallPistonBase""] = 100;
        PCUTable[""ExtendedPistonBase/SmallPistonBase""] = 100;
        PCUTable[""MotorStator/LargeStator""] = 100;
        PCUTable[""MotorStator/SmallStator""] = 100;
        PCUTable[""MotorAdvancedStator/LargeAdvancedStator""] = 100;
        PCUTable[""MotorAdvancedStator/SmallAdvancedStator""] = 100;
        PCUTable[""MotorAdvancedStator/SmallAdvancedStatorSmall""] = 100;
        PCUTable[""MotorAdvancedStator/LargeHinge""] = 100;
        PCUTable[""MotorAdvancedStator/MediumHinge""] = 100;
        PCUTable[""MotorAdvancedStator/SmallHinge""] = 100;
        PCUTable[""MedicalRoom/LargeMedicalRoom""] = 30;
        PCUTable[""CryoChamber/LargeBlockCryoChamber""] = 15;
        PCUTable[""CryoChamber/SmallBlockCryoChamber""] = 15;
        PCUTable[""Refinery/LargeRefinery""] = 900;
        PCUTable[""Refinery/Blast Furnace""] = 750;
        PCUTable[""OxygenGenerator/""] = 500;
        PCUTable[""OxygenGenerator/OxygenGeneratorSmall""] = 500;
        PCUTable[""Assembler/LargeAssembler""] = 400;
        PCUTable[""Assembler/BasicAssembler""] = 40;
        PCUTable[""SurvivalKit/SurvivalKitLarge""] = 140;
        PCUTable[""SurvivalKit/SurvivalKit""] = 140;
        PCUTable[""OxygenFarm/LargeBlockOxygenFarm""] = 25;
        PCUTable[""ExhaustBlock/SmallExhaustPipe""] = 50;
        PCUTable[""ExhaustBlock/LargeExhaustPipe""] = 50;
        PCUTable[""Cockpit/BuggyCockpit""] = 100;
        PCUTable[""MotorSuspension/OffroadSuspension3x3""] = 50;
        PCUTable[""MotorSuspension/OffroadSuspension5x5""] = 50;
        PCUTable[""MotorSuspension/OffroadSuspension1x1""] = 50;
        PCUTable[""MotorSuspension/OffroadSuspension2x2""] = 50;
        PCUTable[""MotorSuspension/OffroadSmallSuspension3x3""] = 50;
        PCUTable[""MotorSuspension/OffroadSmallSuspension5x5""] = 50;
        PCUTable[""MotorSuspension/OffroadSmallSuspension1x1""] = 50;
        PCUTable[""MotorSuspension/OffroadSmallSuspension2x2""] = 50;
        PCUTable[""MotorSuspension/OffroadSuspension3x3mirrored""] = 50;
        PCUTable[""MotorSuspension/OffroadSuspension5x5mirrored""] = 50;
        PCUTable[""MotorSuspension/OffroadSuspension1x1mirrored""] = 50;
        PCUTable[""MotorSuspension/OffroadSuspension2x2Mirrored""] = 50;
        PCUTable[""MotorSuspension/OffroadSmallSuspension3x3mirrored""] = 50;
        PCUTable[""MotorSuspension/OffroadSmallSuspension5x5mirrored""] = 50;
        PCUTable[""MotorSuspension/OffroadSmallSuspension1x1mirrored""] = 50;
        PCUTable[""MotorSuspension/OffroadSmallSuspension2x2Mirrored""] = 50;
        PCUTable[""Wheel/OffroadSmallRealWheel1x1""] = 25;
        PCUTable[""Wheel/OffroadSmallRealWheel2x2""] = 25;
        PCUTable[""Wheel/OffroadSmallRealWheel""] = 25;
        PCUTable[""Wheel/OffroadSmallRealWheel5x5""] = 25;
        PCUTable[""Wheel/OffroadRealWheel1x1""] = 25;
        PCUTable[""Wheel/OffroadRealWheel2x2""] = 25;
        PCUTable[""Wheel/OffroadRealWheel""] = 25;
        PCUTable[""Wheel/OffroadRealWheel5x5""] = 25;
        PCUTable[""Wheel/OffroadSmallRealWheel1x1mirrored""] = 25;
        PCUTable[""Wheel/OffroadSmallRealWheel2x2Mirrored""] = 25;
        PCUTable[""Wheel/OffroadSmallRealWheelmirrored""] = 25;
        PCUTable[""Wheel/OffroadSmallRealWheel5x5mirrored""] = 25;
        PCUTable[""Wheel/OffroadRealWheel1x1mirrored""] = 25;
        PCUTable[""Wheel/OffroadRealWheel2x2Mirrored""] = 25;
        PCUTable[""Wheel/OffroadRealWheelmirrored""] = 25;
        PCUTable[""Wheel/OffroadRealWheel5x5mirrored""] = 25;
        PCUTable[""Wheel/OffroadWheel1x1""] = 25;
        PCUTable[""Wheel/OffroadSmallWheel1x1""] = 25;
        PCUTable[""Wheel/OffroadWheel3x3""] = 25;
        PCUTable[""Wheel/OffroadSmallWheel3x3""] = 25;
        PCUTable[""Wheel/OffroadWheel5x5""] = 25;
        PCUTable[""Wheel/OffroadSmallWheel5x5""] = 25;
        PCUTable[""Wheel/OffroadWheel2x2""] = 25;
        PCUTable[""Wheel/OffroadSmallWheel2x2""] = 25;
        PCUTable[""InteriorLight/OffsetLight""] = 25;
        PCUTable[""ReflectorLight/OffsetSpotlight""] = 25;
        PCUTable[""TextPanel/LargeLCDPanel5x5""] = 50;
        PCUTable[""TextPanel/LargeLCDPanel5x3""] = 50;
        PCUTable[""TextPanel/LargeLCDPanel3x3""] = 50;
        PCUTable[""TerminalBlock/LargeBlockSciFiTerminal""] = 5;
        PCUTable[""ButtonPanel/LargeSciFiButtonTerminal""] = 50;
        PCUTable[""Door/SmallSideDoor""] = 115;
        PCUTable[""ButtonPanel/LargeSciFiButtonPanel""] = 100;
        PCUTable[""Thrust/SmallBlockSmallThrustSciFi""] = 15;
        PCUTable[""Thrust/SmallBlockLargeThrustSciFi""] = 15;
        PCUTable[""Thrust/LargeBlockSmallThrustSciFi""] = 15;
        PCUTable[""Thrust/LargeBlockLargeThrustSciFi""] = 15;
        PCUTable[""Thrust/LargeBlockLargeAtmosphericThrustSciFi""] = 15;
        PCUTable[""Thrust/LargeBlockSmallAtmosphericThrustSciFi""] = 15;
        PCUTable[""Thrust/SmallBlockLargeAtmosphericThrustSciFi""] = 15;
        PCUTable[""Thrust/SmallBlockSmallAtmosphericThrustSciFi""] = 15;
        PCUTable[""Thrust/SmallBlockSmallThrust""] = 15;
        PCUTable[""Thrust/SmallBlockLargeThrust""] = 15;
        PCUTable[""Thrust/LargeBlockSmallThrust""] = 15;
        PCUTable[""Thrust/LargeBlockLargeThrust""] = 15;
        PCUTable[""Thrust/LargeBlockLargeHydrogenThrust""] = 150;
        PCUTable[""Thrust/LargeBlockSmallHydrogenThrust""] = 150;
        PCUTable[""Thrust/SmallBlockLargeHydrogenThrust""] = 150;
        PCUTable[""Thrust/SmallBlockSmallHydrogenThrust""] = 150;
        PCUTable[""Thrust/LargeBlockLargeAtmosphericThrust""] = 15;
        PCUTable[""Thrust/LargeBlockSmallAtmosphericThrust""] = 15;
        PCUTable[""Thrust/SmallBlockLargeAtmosphericThrust""] = 15;
        PCUTable[""Thrust/SmallBlockSmallAtmosphericThrust""] = 15;
        PCUTable[""Drill/SmallBlockDrill""] = 190;
        PCUTable[""Drill/LargeBlockDrill""] = 190;
        PCUTable[""ShipGrinder/LargeShipGrinder""] = 100;
        PCUTable[""ShipGrinder/SmallShipGrinder""] = 100;
        PCUTable[""ShipWelder/LargeShipWelder""] = 150;
        PCUTable[""ShipWelder/SmallShipWelder""] = 150;
        PCUTable[""OreDetector/LargeOreDetector""] = 40;
        PCUTable[""OreDetector/SmallBlockOreDetector""] = 40;
        PCUTable[""LandingGear/LargeBlockLandingGear""] = 35;
        PCUTable[""LandingGear/SmallBlockLandingGear""] = 35;
        PCUTable[""LandingGear/LargeBlockSmallMagneticPlate""] = 35;
        PCUTable[""LandingGear/SmallBlockSmallMagneticPlate""] = 35;
        PCUTable[""JumpDrive/LargeJumpDrive""] = 100;
        PCUTable[""CameraBlock/SmallCameraBlock""] = 25;
        PCUTable[""CameraBlock/LargeCameraBlock""] = 25;
        PCUTable[""MergeBlock/LargeShipMergeBlock""] = 125;
        PCUTable[""MergeBlock/SmallShipMergeBlock""] = 125;
        PCUTable[""MergeBlock/SmallShipSmallMergeBlock""] = 125;
        PCUTable[""Parachute/LgParachute""] = 50;
        PCUTable[""Parachute/SmParachute""] = 50;
        PCUTable[""CargoContainer/LargeBlockWeaponRack""] = 10;
        PCUTable[""CargoContainer/SmallBlockWeaponRack""] = 10;
        PCUTable[""InteriorLight/PassageSciFiLight""] = 25;
        PCUTable[""Cockpit/PassengerBench""] = 15;
        PCUTable[""InteriorLight/LargeLightPanel""] = 25;
        PCUTable[""InteriorLight/SmallLightPanel""] = 25;
        PCUTable[""Reactor/LargeBlockSmallGeneratorWarfare2""] = 300;
        PCUTable[""Reactor/LargeBlockLargeGeneratorWarfare2""] = 600;
        PCUTable[""Reactor/SmallBlockSmallGeneratorWarfare2""] = 75;
        PCUTable[""Reactor/SmallBlockLargeGeneratorWarfare2""] = 350;
        PCUTable[""AirtightHangarDoor/AirtightHangarDoorWarfare2A""] = 115;
        PCUTable[""AirtightHangarDoor/AirtightHangarDoorWarfare2B""] = 115;
        PCUTable[""AirtightHangarDoor/AirtightHangarDoorWarfare2C""] = 115;
        PCUTable[""SmallMissileLauncher/SmallMissileLauncherWarfare2""] = 425;
        PCUTable[""SmallGatlingGun/SmallGatlingGunWarfare2""] = 80;
        PCUTable[""BatteryBlock/LargeBlockBatteryBlockWarfare2""] = 15;
        PCUTable[""BatteryBlock/SmallBlockBatteryBlockWarfare2""] = 15;
        PCUTable[""Door/SlidingHatchDoor""] = 115;
        PCUTable[""Door/SlidingHatchDoorHalf""] = 115;
        PCUTable[""Searchlight/SmallSearchlight""] = 50;
        PCUTable[""Searchlight/LargeSearchlight""] = 50;
        PCUTable[""HeatVentBlock/LargeHeatVentBlock""] = 50;
        PCUTable[""HeatVentBlock/SmallHeatVentBlock""] = 50;
        PCUTable[""Cockpit/SmallBlockStandingCockpit""] = 50;
        PCUTable[""Cockpit/LargeBlockStandingCockpit""] = 50;
        PCUTable[""Thrust/SmallBlockSmallModularThruster""] = 15;
        PCUTable[""Thrust/SmallBlockLargeModularThruster""] = 15;
        PCUTable[""Thrust/LargeBlockSmallModularThruster""] = 15;
        PCUTable[""Thrust/LargeBlockLargeModularThruster""] = 15;
        PCUTable[""Warhead/LargeWarhead""] = 100;
        PCUTable[""Warhead/SmallWarhead""] = 50;
        PCUTable[""Decoy/LargeDecoy""] = 50;
        PCUTable[""Decoy/SmallDecoy""] = 50;
        PCUTable[""LargeGatlingTurret/""] = 225;
        PCUTable[""LargeGatlingTurret/SmallGatlingTurret""] = 225;
        PCUTable[""LargeMissileTurret/""] = 275;
        PCUTable[""LargeMissileTurret/SmallMissileTurret""] = 100;
        PCUTable[""InteriorTurret/LargeInteriorTurret""] = 125;
        PCUTable[""SmallMissileLauncher/""] = 425;
        PCUTable[""SmallMissileLauncher/LargeMissileLauncher""] = 825;
        PCUTable[""SmallMissileLauncherReload/SmallRocketLauncherReload""] = 425;
        PCUTable[""SmallGatlingGun/""] = 80;
        PCUTable[""SmallGatlingGun/SmallBlockAutocannon""] = 80;
        PCUTable[""SmallMissileLauncherReload/SmallBlockMediumCalibreGun""] = 80;
        PCUTable[""SmallMissileLauncher/LargeBlockLargeCalibreGun""] = 80;
        PCUTable[""SmallMissileLauncherReload/LargeRailgun""] = 80;
        PCUTable[""SmallMissileLauncherReload/SmallRailgun""] = 80;
        PCUTable[""LargeMissileTurret/LargeCalibreTurret""] = 275;
        PCUTable[""LargeMissileTurret/LargeBlockMediumCalibreTurret""] = 275;
        PCUTable[""LargeMissileTurret/SmallBlockMediumCalibreTurret""] = 275;
        PCUTable[""LargeGatlingTurret/AutoCannonTurret""] = 225;
        PCUTable[""MotorSuspension/Suspension3x3""] = 50;
        PCUTable[""MotorSuspension/Suspension5x5""] = 50;
        PCUTable[""MotorSuspension/Suspension1x1""] = 50;
        PCUTable[""MotorSuspension/Suspension2x2""] = 50;
        PCUTable[""MotorSuspension/SmallSuspension3x3""] = 50;
        PCUTable[""MotorSuspension/SmallSuspension5x5""] = 50;
        PCUTable[""MotorSuspension/SmallSuspension1x1""] = 50;
        PCUTable[""MotorSuspension/SmallSuspension2x2""] = 50;
        PCUTable[""MotorSuspension/Suspension3x3mirrored""] = 50;
        PCUTable[""MotorSuspension/Suspension5x5mirrored""] = 50;
        PCUTable[""MotorSuspension/Suspension1x1mirrored""] = 50;
        PCUTable[""MotorSuspension/Suspension2x2Mirrored""] = 50;
        PCUTable[""MotorSuspension/SmallSuspension3x3mirrored""] = 50;
        PCUTable[""MotorSuspension/SmallSuspension5x5mirrored""] = 50;
        PCUTable[""MotorSuspension/SmallSuspension1x1mirrored""] = 50;
        PCUTable[""MotorSuspension/SmallSuspension2x2Mirrored""] = 50;
        PCUTable[""Wheel/SmallRealWheel1x1""] = 25;
        PCUTable[""Wheel/SmallRealWheel2x2""] = 25;
        PCUTable[""Wheel/SmallRealWheel""] = 25;
        PCUTable[""Wheel/SmallRealWheel5x5""] = 25;
        PCUTable[""Wheel/RealWheel1x1""] = 25;
        PCUTable[""Wheel/RealWheel2x2""] = 25;
        PCUTable[""Wheel/RealWheel""] = 25;
        PCUTable[""Wheel/RealWheel5x5""] = 25;
        PCUTable[""Wheel/SmallRealWheel1x1mirrored""] = 25;
        PCUTable[""Wheel/SmallRealWheel2x2Mirrored""] = 25;
        PCUTable[""Wheel/SmallRealWheelmirrored""] = 25;
        PCUTable[""Wheel/SmallRealWheel5x5mirrored""] = 25;
        PCUTable[""Wheel/RealWheel1x1mirrored""] = 25;
        PCUTable[""Wheel/RealWheel2x2Mirrored""] = 25;
        PCUTable[""Wheel/RealWheelmirrored""] = 25;
        PCUTable[""Wheel/RealWheel5x5mirrored""] = 25;
        PCUTable[""Wheel/Wheel1x1""] = 25;
        PCUTable[""Wheel/SmallWheel1x1""] = 25;
        PCUTable[""Wheel/Wheel3x3""] = 25;
        PCUTable[""Wheel/SmallWheel3x3""] = 25;
        PCUTable[""Wheel/Wheel5x5""] = 25;
        PCUTable[""Wheel/SmallWheel5x5""] = 25;
        PCUTable[""Wheel/Wheel2x2""] = 25;
        PCUTable[""Wheel/SmallWheel2x2""] = 25;
        PCUTable[""Beacon/DisposableNpcBeaconLarge""] = 50;
        PCUTable[""Beacon/DisposableNpcBeaconSmall""] = 50;
        PCUTable[""Projector/MES-Blocks-ShipyardTerminal""] = 150;
        PCUTable[""ButtonPanel/MES-Blocks-SuitUpgradeStation""] = 5;
        PCUTable[""ButtonPanel/MES-Blocks-ResearchTerminal""] = 50;
        PCUTable[""Conveyor/ProprietaryLargeBlockConveyor""] = 10;
        PCUTable[""ConveyorConnector/ProprietaryConveyorTube""] = 10;
        PCUTable[""ConveyorConnector/ProprietaryConveyorTubeCurved""] = 10;
        PCUTable[""ConveyorSorter/ProprietaryLargeBlockConveyorSorter""] = 25;
        PCUTable[""Gyro/ProprietaryLargeBlockGyro""] = 50;
        PCUTable[""Thrust/MES-NPC-Thrust-Atmo-LargeGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Atmo-LargeGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Atmo-SmallGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Atmo-SmallGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Hydro-LargeGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Hydro-LargeGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Hydro-SmallGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Hydro-SmallGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-IndustryHydro-LargeGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-IndustryHydro-LargeGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-IndustryHydro-SmallGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-IndustryHydro-SmallGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Ion-SmallGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Ion-SmallGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Ion-LargeGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-Ion-LargeGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-IonSciFi-SmallGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-IonSciFi-SmallGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-IonSciFi-LargeGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-IonSciFi-LargeGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-AtmoSciFi-LargeGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-AtmoSciFi-LargeGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-AtmoSciFi-SmallGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-AtmoSciFi-SmallGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-WarfareIon-SmallGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-WarfareIon-SmallGrid-Large""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-WarfareIon-LargeGrid-Small""] = 15;
        PCUTable[""Thrust/MES-NPC-Thrust-WarfareIon-LargeGrid-Large""] = 15;
        PCUTable[""RemoteControl/RivalAIRemoteControlLarge""] = 25;
        PCUTable[""RemoteControl/RivalAIRemoteControlSmall""] = 25;
        PCUTable[""RadioAntenna/MES-Suppressor-Energy-Small""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Energy-Large""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Player-Small""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Player-Large""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Nanobots-Small""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Nanobots-Large""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-JumpDrive-Small""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-JumpDrive-Large""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Jetpack-Small""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Jetpack-Large""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Drill-Small""] = 250;
        PCUTable[""RadioAntenna/MES-Suppressor-Drill-Large""] = 250;
        PCUTable[""Reactor/ProprietarySmallBlockSmallGenerator""] = 25;
        PCUTable[""Reactor/ProprietarySmallBlockLargeGenerator""] = 25;
        PCUTable[""Reactor/ProprietaryLargeBlockSmallGenerator""] = 25;
        PCUTable[""Reactor/ProprietaryLargeBlockLargeGenerator""] = 25;
        PCUTable[""GravityGenerator/ProprietaryGravGen""] = 185;
        PCUTable[""GravityGeneratorSphere/ProprietaryGravGenSphere""] = 200;
        PCUTable[""VirtualMass/ProprietaryVirtualMassLarge""] = 25;
        PCUTable[""VirtualMass/ProprietaryVirtualMassSmall""] = 25;
        PCUTable[""SpaceBall/ProprietarySpaceBallLarge""] = 25;
        PCUTable[""SpaceBall/ProprietarySpaceBallSmall""] = 25;
        PCUTable[""Thrust/ProprietarySmallBlockSmallThrust""] = 15;
        PCUTable[""Thrust/ProprietarySmallBlockLargeThrust""] = 15;
        PCUTable[""Thrust/ProprietaryLargeBlockSmallThrust""] = 15;
        PCUTable[""Thrust/ProprietaryLargeBlockLargeThrust""] = 15;
        PCUTable[""LaserAntenna/ProprietaryLargeBlockLaserAntenna""] = 100;
        PCUTable[""LaserAntenna/ProprietarySmallBlockLaserAntenna""] = 100;
        PCUTable[""JumpDrive/ProprietaryLargeJumpDrive""] = 100;
        PCUTable[""Conveyor/Maintenance_Door_Large""] = 20;
        PCUTable[""Conveyor/Maintenance_Shaft_Large""] = 20;
        PCUTable[""Conveyor/Maintenance_Junction_Large""] = 20;
        PCUTable[""AdvancedDoor/Maintenance_Door_Hatch_Large""] = 115;
        PCUTable[""MyProgrammableBlock/LCD_Wall""] = 100;
        PCUTable[""MyProgrammableBlock/LCD_Wall_offset""] = 100;
        PCUTable[""TextPanel/digital_linear_computer_Small""] = 50;
        PCUTable[""TextPanel/digital_linear_computer_Large""] = 50;
        PCUTable[""MyProgrammableBlock/digital_linear_medium""] = 100;
        PCUTable[""MyProgrammableBlock/digital_linear_large""] = 100;
        PCUTable[""Cockpit/EngineerConsole""] = 50;
        PCUTable[""Cockpit/NavigationConsole""] = 50;
        PCUTable[""Cockpit/captains_chair_Large""] = 50;
        PCUTable[""Cockpit/generic_pilotseat""] = 50;
        PCUTable[""Cockpit/generic_corner""] = 50;
        PCUTable[""ButtonPanel/corner_panel_Large""] = 5;
        PCUTable[""Projector/holoprojector""] = 150;
        PCUTable[""Cockpit/SB_bridge_seat""] = 15;
        PCUTable[""MyProgrammableBlock/digital_linear_mediumSmall""] = 100;
        PCUTable[""MyProgrammableBlock/digital_linear_largeSmall""] = 100;
        PCUTable[""Cockpit/EngineerConsoleSmall""] = 50;
        PCUTable[""Cockpit/NavigationConsoleSmall""] = 50;
        PCUTable[""Cockpit/captains_chair_LargeSmall""] = 50;
        PCUTable[""Cockpit/generic_pilotseatSmall""] = 50;
        PCUTable[""Cockpit/generic_cornerSmall""] = 50;
        PCUTable[""ButtonPanel/corner_panel_LargeSmall""] = 5;
        PCUTable[""Projector/holoprojectorSmall""] = 150;
        PCUTable[""CryoChamber/EngineerConsole_cryo""] = 50;
        PCUTable[""CryoChamber/NavigationConsole_cryo""] = 50;
        PCUTable[""CryoChamber/captains_chair_Large_cryo""] = 50;
        PCUTable[""CryoChamber/generic_pilotseat_cryo""] = 50;
        PCUTable[""CryoChamber/generic_pilotseat_cyro""] = 50;
        PCUTable[""CryoChamber/generic_corner_cryo""] = 50;
        PCUTable[""ConveyorConnector/AQD_LG_ConveyorCornerArmored""] = 10;
        PCUTable[""Conveyor/AQD_LG_ConveyorJunctionTubes""] = 30;
        PCUTable[""ConveyorConnector/AQD_LG_ConveyorStraight5x1""] = 10;
        PCUTable[""ConveyorConnector/AQD_LG_ConveyorStraightArmored""] = 10;
        PCUTable[""Conveyor/AQD_LG_ConveyorX""] = 20;
        PCUTable[""Conveyor/AQD_LG_ConveyorXArmored""] = 20;
        PCUTable[""Conveyor/AQD_LG_ConveyorT""] = 15;
        PCUTable[""Conveyor/AQD_LG_ConveyorTArmored""] = 15;
        PCUTable[""LargeMissileTurret/AutoCannonTurret""] = 225;
        PCUTable[""ConveyorSorter/LargeRailgun""] = 80;
        PCUTable[""ConveyorSorter/SmallRailgun""] = 80;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope3x1""] = 3;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope3x1""] = 3;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope3x1""] = 3;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope3x1""] = 3;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope3x1_Corner""] = 3;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope3x1_Corner""] = 3;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope3x1_Corner""] = 3;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope3x1_Corner""] = 3;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope3x1_InvCorner""] = 3;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope3x1_InvCorner""] = 3;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope3x1_InvCorner""] = 3;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope3x1_InvCorner""] = 3;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope3x1_Transition""] = 3;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope3x1_TransitionMirror""] = 3;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope3x1_Transition""] = 3;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope3x1_TransitionMirror""] = 3;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope3x1_Transition""] = 3;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope3x1_TransitionMirror""] = 3;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope3x1_Transition""] = 3;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope3x1_TransitionMirror""] = 3;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope4x1""] = 4;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope4x1""] = 4;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope4x1""] = 4;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope4x1""] = 4;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope4x1_Corner""] = 4;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope4x1_Corner""] = 4;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope4x1_Corner""] = 4;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope4x1_Corner""] = 4;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope4x1_InvCorner""] = 4;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope4x1_InvCorner""] = 4;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope4x1_InvCorner""] = 4;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope4x1_InvCorner""] = 4;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope4x1_Transition""] = 4;
        PCUTable[""CubeBlock/AQD_LG_LA_Slope4x1_TransitionMirror""] = 4;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope4x1_Transition""] = 4;
        PCUTable[""CubeBlock/AQD_SG_LA_Slope4x1_TransitionMirror""] = 4;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope4x1_Transition""] = 4;
        PCUTable[""CubeBlock/AQD_LG_HA_Slope4x1_TransitionMirror""] = 4;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope4x1_Transition""] = 4;
        PCUTable[""CubeBlock/AQD_SG_HA_Slope4x1_TransitionMirror""] = 4;
        PCUTable[""CargoContainer/Prizebox""] = 10;
        PCUTable[""LargeMissileTurret/ARYXCycloneCannon""] = 500;
        PCUTable[""LargeMissileTurret/ARYXCycloneCannon_SG""] = 500;
        PCUTable[""LargeMissileTurret/ARYXHurricaneCannon""] = 500;
        PCUTable[""LargeMissileTurret/ARYXTyphoonCannon""] = 500;
        PCUTable[""LargeMissileTurret/ARYXTsunamiCannon""] = 500;
        PCUTable[""SmallMissileLauncher/ARYXTempestCannon""] = 200;
        PCUTable[""SmallMissileLauncher/ARYXTempestCannon_SG""] = 200;
        PCUTable[""SmallMissileLauncher/ARYXWindfallCannon""] = 100;
        PCUTable[""SmallMissileLauncher/ARYXStormCannon""] = 80;
        PCUTable[""LargeMissileTurret/ARYXBurstTurret""] = 200;
        PCUTable[""LargeMissileTurret/ARYXBurstTurret_SG""] = 200;
        PCUTable[""ConveyorSorter/ARYXBurstTurretSlanted""] = 200;
        PCUTable[""ConveyorSorter/ARYXHydraTurret""] = 200;
        PCUTable[""ConveyorSorter/ARYXInterceptorPDGun""] = 150;
        PCUTable[""ConveyorSorter/ARYXTacticalModule""] = 99999;
        PCUTable[""ConveyorSorter/ARYXLargeIonCannon""] = 1000;
        PCUTable[""LargeMissileTurret/ARYXHeavyFlakTurret""] = 200;
        PCUTable[""ConveyorSorter/ARYXMissileBattery""] = 300;
        PCUTable[""ConveyorSorter/ARYXRocketArtillery""] = 300;
        PCUTable[""LargeMissileTurret/ARYXPlasmaBeamCannon""] = 300;
        PCUTable[""LargeMissileTurret/ARYXPhaseRepeaterCannon""] = 300;
        PCUTable[""ConveyorSorter/ARYXOculusLaserBase""] = 100;
        PCUTable[""ConveyorSorter/ARYXArgusLaser""] = 100;
        PCUTable[""ConveyorSorter/ARYXSmallBombBay""] = 125;
        PCUTable[""LargeMissileTurret/ARYXJuryCannon""] = 200;
        PCUTable[""LargeGatlingTurret/ARYXAtlasPDC""] = 200;
        PCUTable[""ConveyorSorter/ARYXSlantedAtlasPDC""] = 200;
        PCUTable[""LargeGatlingTurret/ARYXCodexPDC""] = 100;
        PCUTable[""ConveyorSorter/ARYXSlantedCodexPDC""] = 100;
        PCUTable[""ConveyorSorter/ARYXSlantedInvCodexPDC""] = 100;
        PCUTable[""LargeGatlingTurret/ARYXCodexPDC_SG""] = 100;
        PCUTable[""LargeMissileTurret/ARYXAuroraLaser""] = 100;
        PCUTable[""LargeMissileTurret/ARYXWarriorGatling""] = 300;
        PCUTable[""ConveyorSorter/ARYXWarriorGatlingGun""] = 300;
        PCUTable[""LargeMissileTurret/ARYXVariableLaser""] = 150;
        PCUTable[""LargeMissileTurret/ARYXPulseTurret""] = 100;
        PCUTable[""LargeMissileTurret/ARYXCompactPulseTurret""] = 100;
        PCUTable[""ConveyorSorter/ARYXGravPulseLaserSG""] = 100;
        PCUTable[""LargeMissileTurret/ARYXNucleonShotgun""] = 100;
        PCUTable[""ConveyorSorter/AryxNucleonShotgun_SG""] = 100;
        PCUTable[""ConveyorSorter/ARYXFlechetteLauncher""] = 100;
        PCUTable[""ConveyorSorter/ARYXVariableLauncher""] = 200;
        PCUTable[""SmallGatlingGun/ARYX_FixedAtlasGatling""] = 100;
        PCUTable[""SmallGatlingGun/ARYX_SmallChaingun""] = 100;
        PCUTable[""ConveyorSorter/ARYXSmallPulseLaser_Fixed""] = 80;
        PCUTable[""ConveyorSorter/ARYXSmallPhysicsGun""] = 120;
        PCUTable[""ConveyorSorter/ARYXSiegeMortarCannon""] = 800;
        PCUTable[""ConveyorSorter/ARYX_SmallFlareLauncher""] = 150;
        PCUTable[""ConveyorSorter/ARYX_LargeFlareLauncher""] = 200;
        PCUTable[""SmallMissileLauncher/ARYX_Fixed_Chord_auto""] = 100;
        PCUTable[""ConveyorSorter/ARYXSmallFlechetteLauncher""] = 100;
        PCUTable[""LargeMissileTurret/ARYXFlakTurret""] = 150;
        PCUTable[""LargeMissileTurret/ARYX_ChordAutocannon""] = 100;
        PCUTable[""LargeMissileTurret/ARYX_ChordAutocannon_SG""] = 100;
        PCUTable[""LargeMissileTurret/ARYX_EchoAutocannon""] = 100;
        PCUTable[""ConveyorSorter/ARYXGladiatorMissileLauncher""] = 200;
        PCUTable[""ConveyorSorter/ARYXTorpLauncher""] = 150;
        PCUTable[""ConveyorSorter/ARYXInlineTorpLauncher""] = 150;
        PCUTable[""ConveyorSorter/ARYXHeavyTorpedoLauncher""] = 300;
        PCUTable[""ConveyorSorter/ARYXLongbowLauncher""] = 150;
        PCUTable[""ConveyorSorter/ARYXLongbowLauncher_SG""] = 150;
        PCUTable[""ConveyorSorter/ARYXHeavyMissileSalvoLauncher""] = 200;
        PCUTable[""ConveyorSorter/ARYXPlasmaPulser""] = 100;
        PCUTable[""ConveyorSorter/ARYX_FocusBeam_CompactSG""] = 100;
        PCUTable[""LargeMissileTurret/ARYX_FocusBeam_CompactTurret""] = 100;
        PCUTable[""ConveyorSorter/ARYXFocusLance""] = 400;
        PCUTable[""ConveyorSorter/ARYXGaussCannon""] = 1500;
        PCUTable[""LargeMissileTurret/ARYXGaussTurret""] = 2000;
        PCUTable[""ConveyorSorter/ARYXCatalystCannon""] = 99999;
        PCUTable[""ConveyorSorter/ARYXRailgun""] = 750;
        PCUTable[""ConveyorSorter/ARYXLightCoilgun""] = 750;
        PCUTable[""ConveyorSorter/ARYXHeavyCoilgun""] = 750;
        PCUTable[""ConveyorSorter/ARYXKingswordSupercannon""] = 2500;
        PCUTable[""LargeMissileTurret/ARYXRailgunTurret""] = 1000;
        PCUTable[""LargeMissileTurret/ARYXPicketRailgun""] = 500;
        PCUTable[""ConveyorSorter/ARYXLightRailgun""] = 300;
        PCUTable[""LargeMissileTurret/ARYXSentinel""] = 200;
        PCUTable[""LargeMissileTurret/ARYXReaperPulseCannon""] = 1500;
        PCUTable[""ConveyorSorter/ARYXMace""] = 200;
        PCUTable[""LargeMissileTurret/ARYX_FW_NovaBlaster""] = 150;
        PCUTable[""ConveyorSorter/ARYX_NovaBlaster_SG""] = 100;
        PCUTable[""ConveyorSorter/AWE_MarkV_SuperLaser_Large_CB""] = 1500;
        PCUTable[""ConveyorSorter/ARYXLargeRadar""] = 50;
        PCUTable[""ConveyorSorter/ARYXSmallRadar""] = 50;
        PCUTable[""LargeMissileTurret/ARYXMagnetarCannon""] = 500;
        PCUTable[""LargeMissileTurret/ARYXQuasarCannon""] = 500;
        PCUTable[""LargeMissileTurret/ARYXPulsarCannon""] = 300;
        PCUTable[""ConveyorSorter/ARYX_Small_Sidekick_Hangar""] = 500;
        PCUTable[""ConveyorSorter/ARYXTeslaLanceFixed""] = 400;
        PCUTable[""ConveyorSorter/ARYXPlasmaFlamethrower""] = 400;
        PCUTable[""LargeMissileTurret/ARYXSpartanTurret""] = 200;
        PCUTable[""ConveyorSorter/ARYX_SpartanCannonSG""] = 100;
        PCUTable[""LargeMissileTurret/ARYXVulcanTurret""] = 200;
        PCUTable[""ConveyorSorter/ARYX_SabreMissileHardpoint""] = 80;
        PCUTable[""ConveyorSorter/ARYX_NyxMissileHardpoint""] = 100;
        PCUTable[""Thrust/ARYLNX_RZB_Epstein_Drive""] = 75;
        PCUTable[""Thrust/ARYXLNX_YACHT_EPSTEIN_DRIVE""] = 75;
        PCUTable[""Thrust/Silverfish_RCS""] = 8;
        PCUTable[""Thrust/AryxRCSRamp_S""] = 8;
        PCUTable[""Thrust/AryxRCSHalfRamp_S""] = 8;
        PCUTable[""Thrust/AryxRCSSlant_S""] = 8;
        PCUTable[""Thrust/AryxRCS_S""] = 8;
        PCUTable[""CameraBlock/LBZoomPlusCamera""] = 25;
        PCUTable[""CameraBlock/SBZoomPlusCamera""] = 25;
        PCUTable[""UpgradeModule/LargeProductivityModule_Belter""] = 100;
        PCUTable[""UpgradeModule/LargeEffectivenessModule_Belter""] = 100;
        PCUTable[""UpgradeModule/LargeEnergyModule_Belter""] = 100;
        PCUTable[""OreDetector/LargeOreDetector_Belter""] = 80;
        PCUTable[""OreDetector/SmallBlockRamshackleOreDetector""] = 40;
        PCUTable[""SolarPanel/LargeBlockSolarPanel_Belter""] = 110;
        PCUTable[""LandingGear/LargeClamp""] = 35;
        PCUTable[""Drill/RamshackleDrill""] = 190;
        PCUTable[""Drill/SmallRamshackleDrill""] = 190;
        PCUTable[""ShipGrinder/RamshackleGrinder""] = 100;
        PCUTable[""ShipGrinder/LargeRamshackleGrinder""] = 150;
        PCUTable[""ShipWelder/RamshackleWelder""] = 150;
        PCUTable[""ShipWelder/LargeRamshackleWelder""] = 150;
        PCUTable[""OxygenTank/TychoCompressedHydroTank""] = 25;
        PCUTable[""OxygenTank/StationHydrogenTank""] = 25;
        PCUTable[""ButtonPanel/VerticalButtonPanelLargeOffset""] = 5;
        PCUTable[""ButtonPanel/ButtonPanelLargeOffset""] = 5;
        PCUTable[""ButtonPanel/LargeSciFiButtonPanelOffset""] = 100;
        PCUTable[""Reactor/LargeBlockSmallGenerator_Belter""] = 380;
        PCUTable[""Assembler/Packager""] = 400;
        PCUTable[""Conveyor/ArmorConveyer4WayHat""] = 20;
        PCUTable[""Conveyor/ArmorConveyor5Way""] = 25;
        PCUTable[""Conveyor/ArmorConveyorElbow""] = 15;
        PCUTable[""OxygenTank/SmallOxygenTankSmall""] = 25;
        PCUTable[""SmallMissileLauncherReload/Apollo Class Torpedo Launcher""] = 500;
        PCUTable[""SmallMissileLauncherReload/Apollo Class Torpedo Launcher MES""] = 500;
        PCUTable[""LargeMissileTurret/Ostman-Jazinski Flak Cannon""] = 400;
        PCUTable[""LargeMissileTurret/Ostman-Jazinski Flak Cannon MES""] = 400;
        PCUTable[""SmallMissileLauncherReload/Tycho Class Torpedo Mount""] = 75;
        PCUTable[""SmallMissileLauncherReload/Tycho Class Torpedo Mount MES""] = 75;
        PCUTable[""SmallGatlingGun/Zakosetara Heavy Railgun""] = 1875;
        PCUTable[""SmallGatlingGun/Zakosetara Heavy Railgun MES""] = 1875;
        PCUTable[""ConveyorSorter/Nariman Dynamics PDC Slope Base""] = 400;
        PCUTable[""ConveyorSorter/Nariman Dynamics PDC Slope Base MES""] = 400;
        PCUTable[""LargeGatlingTurret/Nariman Dynamics PDC""] = 400;
        PCUTable[""LargeGatlingTurret/Nariman Dynamics PDC MES""] = 400;
        PCUTable[""LargeMissileTurret/V-14 Stiletto Light Railgun""] = 2500;
        PCUTable[""LargeMissileTurret/V-14 Stiletto Light Railgun MES""] = 2500;
        PCUTable[""LargeMissileTurret/VX-12 Foehammer Ultra-Heavy Railgun""] = 7000;
        PCUTable[""LargeMissileTurret/VX-12 Foehammer Ultra-Heavy Railgun MES""] = 7000;
        PCUTable[""SmallMissileLauncherReload/Ares_Class_Torpedo_Launcher_F""] = 300;
        PCUTable[""SmallMissileLauncherReload/Ares_Class_Torpedo_Launcher_F_MES""] = 300;
        PCUTable[""SmallMissileLauncherReload/Ares_Class_TorpedoLauncher""] = 300;
        PCUTable[""SmallMissileLauncherReload/Ares_Class_TorpedoLauncher_MES""] = 300;
        PCUTable[""SmallMissileLauncherReload/ZeusClass_Rapid_Torpedo_Launcher""] = 1000;
        PCUTable[""SmallMissileLauncherReload/ZeusClass_Rapid_Torpedo_Launcher_MES""] = 1000;
        PCUTable[""LargeMissileTurret/Dawson-Pattern Medium Railgun""] = 2500;
        PCUTable[""LargeMissileTurret/Dawson-Pattern Medium Railgun MES""] = 2500;
        PCUTable[""LargeMissileTurret/Farren-Pattern Heavy Railgun""] = 6000;
        PCUTable[""LargeMissileTurret/Farren-Pattern Heavy Railgun MES""] = 6000;
        PCUTable[""ConveyorSorter/Redfields Ballistics PDC Slope Base""] = 400;
        PCUTable[""ConveyorSorter/Redfields Ballistics PDC Slope Base MES""] = 400;
        PCUTable[""LargeGatlingTurret/Redfields Ballistics PDC""] = 400;
        PCUTable[""LargeGatlingTurret/Redfields Ballistics PDC MES""] = 400;
        PCUTable[""LargeMissileTurret/Mounted Zakosetara Heavy Railgun""] = 3500;
        PCUTable[""LargeMissileTurret/Mounted Zakosetara Heavy Railgun MES""] = 3500;
        PCUTable[""RadioAntenna/AntennaCorner""] = 100;
        PCUTable[""RadioAntenna/AntennaSlope""] = 100;
        PCUTable[""RadioAntenna/Antenna45Corner""] = 100;
        PCUTable[""RadioAntenna/AntennaCube""] = 100;
        PCUTable[""InteriorLight/Armoured_Light_HalfBlock""] = 25;
        PCUTable[""InteriorLight/Armoured_Light_Block""] = 25;
        PCUTable[""CameraBlock/InnerArmouredCamera""] = 25;
        PCUTable[""CameraBlock/InnerArmouredCamera+""] = 25;
        PCUTable[""AirtightHangarDoor/shangar3""] = 115;
        PCUTable[""AirtightHangarDoor/shangar4""] = 115;
        PCUTable[""AirtightHangarDoor/shangar5""] = 115;
        PCUTable[""AirtightHangarDoor/shangar6""] = 115;
        PCUTable[""AirtightHangarDoor/shangar7""] = 115;
        PCUTable[""AirtightHangarDoor/shangar8""] = 115;
        PCUTable[""AirtightHangarDoor/shangar9""] = 115;
        PCUTable[""AirtightHangarDoor/shangar10""] = 115;
        PCUTable[""Assembler/NPTradeCrafter""] = 40;
        PCUTable[""Assembler/NPFuelCrafter""] = 40;
        PCUTable[""OxygenGenerator/Extractor""] = 50;
        PCUTable[""OxygenGenerator/ExtractorSmall""] = 50;
        PCUTable[""AirVent/GanymedeAirVent""] = 10;
        PCUTable[""BatteryBlock/GanymedeBatteryLG1""] = 15;
        PCUTable[""BatteryBlock/GanymedeBatteryLG2""] = 15;
        PCUTable[""BatteryBlock/GanymedeBatteryLG3""] = 15;
        PCUTable[""Cockpit/RazorbackControlSeat""] = 15;
        PCUTable[""Cockpit/RazorbackControlSeat2""] = 15;
        PCUTable[""SolarPanel/SolarArrayBlock""] = 55;
        PCUTable[""ShipConnector/Connector_Passageway""] = 125;
        PCUTable[""ShipConnector/Small_Connector_Passageway_SG""] = 100;
        PCUTable[""ShipConnector/Small_Connector_Passageway_LG""] = 100;
        PCUTable[""InteriorLight/Long_Interior_Light_Center""] = 25;
        PCUTable[""InteriorLight/Long_Interior_Light_SB""] = 25;
        PCUTable[""InteriorLight/Long_Interior_Light_Corner""] = 25;
        PCUTable[""InteriorLight/Long_Interior_Light_Double""] = 25;
        PCUTable[""InteriorLight/Long_Interior_Light_Diagonal""] = 25;
        PCUTable[""InteriorLight/Long_Interior_Light_Diagonal_Mirrored""] = 25;
        PCUTable[""InteriorLight/InteriorLightBulb""] = 25;
        PCUTable[""InteriorLight/SmallLightPole""] = 25;
        PCUTable[""InteriorLight/SmallLightPoleCorner""] = 25;
        PCUTable[""InteriorLight/SmallLightPoleDouble""] = 25;
        PCUTable[""InteriorLight/MediumLightPole""] = 25;
        PCUTable[""ReflectorLight/LargeWorkLight""] = 25;
        PCUTable[""ReflectorLight/LargeLightPole""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlight_LB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlight_SB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlightSlope_LB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlightSlope_SB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlightSlope2_LB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlightSlope2_SB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlightSlanted_LB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlightSlanted_SB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlightSlanted2_LB""] = 25;
        PCUTable[""ReflectorLight/CleanSpotlightSlanted2_SB""] = 25;
        PCUTable[""ReflectorLight/SlimSpotlight_LB""] = 25;
        PCUTable[""ReflectorLight/SlimSpotlight_SB""] = 25;
        PCUTable[""ReflectorLight/SmallFloodLight_LB""] = 25;
        PCUTable[""ReflectorLight/SmallFloodLight_SB""] = 25;
        PCUTable[""InteriorLight/RoundInteriorLightOffset""] = 25;
        PCUTable[""InteriorLight/RoundInteriorLight_SB""] = 25;
        PCUTable[""InteriorLight/RoundInteriorLight""] = 25;
        PCUTable[""UpgradeModule/EpsteinStabalizer""] = 5;
        PCUTable[""UpgradeModule/EpsteinStabalizerSG""] = 5;
    }
}"
fQjwPTt4,Počet ks skladem v loopu,Fany_VanDaal,PHP,Monday 22nd of May 2023 11:25:19 PM CDT,"add_action( 'woocommerce_after_shop_loop_item_title', 'woowoo_category_stock', 20 );
//add_action( 'woocommerce_after_shop_loop_item', 'woowoo_category_stock', 20 );
 
function woowoo_category_stock() {
    global $product;
    if ( $product->get_type() == 'simple' ) {
		$stockquantity = $product->get_stock_quantity();
        if ( $stockquantity >= 3) {
            echo '<div class=""woowoo_green""><i class=""fa fa-square"" aria-hidden=""true"" title=""3 kusy""></i> - 3 kusy</div>';
        }
        elseif ( $stockquantity  >= 2 ) {
            echo '<div class=""woowoo_yellow""><i class=""fa fa-square"" aria-hidden=""true"" title=""2 kusy""></i> - 2 kusy</div>';
        }
        else {
            echo '<div class=""woowoo_red""><i class=""fa fa-square"" aria-hidden=""true"" title=""poslední kus""></i> - poslední kus</div>';
        }
    } else  if ( $product->get_type() == 'variable' ) {
        foreach ( $product->get_available_variations() as $key ) {
            foreach ( $key['attributes'] as $attr_name => $attr_value ) {
                 if ( $key['max_qty'] >= 3 ) { 
                    echo '<div class=""woowoo_green""><i class=""fa fa-square"" aria-hidden=""true"" title=""3 kusy""></i> ' . $attr_value . ' - 3 kusy</div>';
                } 
                elseif ( $key['max_qty'] >= 2 ) { 
                    echo '<div class=""woowoo_yellow""><i class=""fa fa-square"" aria-hidden=""true"" title=""2 kusy""></i> ' . $attr_value . ' - 2 kusy</div>';
                }
                else { 
                    echo '<div class=""woowoo_red""><i class=""fa fa-square"" aria-hidden=""true"" title=""poslední kus""></i> ' . $attr_value . ' - poslední kus</div>'; 
                }
            }
 
		}
    }
}"
VgFYFANZ,backup.sh,LUKASBONNY,PowerShell,Monday 22nd of May 2023 11:21:26 PM CDT,"#!/bin/sh
curl —silent https://seudominio/backup.php >/dev/null 2>&1 "
BMhRUJHa,Shell Script to Create Web Dev Folder Structure,oshkoshbagoshh,Bash,Monday 22nd of May 2023 10:30:05 PM CDT,"#!/bin/zsh
#################################
# @Author: AJ Javadi
# @Email: amirjavadi25@gmail.com
# @Date: 2023-05-22 
# @Last Modified by:   
# @Last Modified time: yyyy-05-dd 21:10:59
# @Description: file:///Users/aj/Desktop/bootcamp/_MISC/create_webdev_folders.sh
# script to create main directories and folder structure for web dev projects automatically.
# ex: Develop/assets, images, Style, Scripts ,etc.
# make sure to copy this into your current directory that you want to have all of the folders in...
# after running the script, run the  chmod +x create_web_dev_structure.sh in the terminal to allow it to be able to run
# then, to run the script you just need to type ./create_web_dev_structure.sh

# NOTE: 
# contact me if you have any questions.
######################################

# create main directories
echo ""creating web dev folder directories in current folder...""
mkdir -p assets/images assets/scripts assets/style 
# creating README.md and index.html
echo ""creating index.html and README.md file""
touch index.html README.md
# create script.js and style.css file
echo ""creating js and css file""
touch script.js style.css
# move scripts to their folders 
mv script.js ./assets/scripts
mv style.css ./assets/style
# echo to the reader
echo ""Web development folder structure created successfully.""
"
DSy92qHR,Geolyzer holo display,jdmbone003,Lua,Monday 22nd of May 2023 09:42:06 PM CDT,"--scans with a geolyzer and outputs results to a hologram projector
local component = require(""component"")
if not component.isAvailable(""geolyzer"") then
  io.stderr:write(""This program requires a Geolyzer to run.\n"")
  return
end
if not component.isAvailable(""hologram"") then
  io.stderr:write(""This program requires a Hologram Projector to run.\n"")
  return
end

local sx, sz = 48, 48
local ox, oz = -24, -24
local starty, stopy = -30

local function validateY(value, min, max, default)
  value = tonumber(value) or default
  if value < min or value > max then
    io.stderr:write(""invalid y coordinate, must be in ["" .. min .. "", "" .. max .. ""]\n"")
    os.exit(1)
  end
  return value
end

do
  local args = {...}
  starty = validateY(args[1], -32, 31, starty)
  stopy = validateY(args[2], starty, starty + 32, math.min(starty + 32, 31))
end

component.hologram.clear()
for x=ox,sx+ox do
  for z=oz,sz+oz do
    local hx, hz = 1 + x - ox, 1 + z - oz
    local column = component.geolyzer.scan(x, z, false)
    for y=1,1+stopy-starty do
      local color = 0
      if column then
        local hardness = column[y + starty + 32]
        if hardness == 0 or not hardness then
          color = 0
        elseif hardness < 3 then
          color = 2
        elseif hardness < 100 then
          color = 1
        else
          color = 3
        end
      end
      if component.hologram.maxDepth() > 1 then
        component.hologram.set(hx, y, hz, color)
      else
        component.hologram.set(hx, y, hz, math.min(color, 1))
      end
    end
    os.sleep(0)
  end
end"
nUSZ132f,Substitube Evolution Methods Essentials v20 WIP,TechSkylander1518,Ruby,Monday 22nd of May 2023 08:46:48 PM CDT,"#Low Happiness - not stated what's considered ""low"", but I did 35 bc it's half of the standard base 70
GameData::Evolution.register({
  :id            => :LowHappiness,
  :minimum_level => 1,   # Needs any level up
  :level_up_proc => proc { |pkmn, parameter|
    next pkmn.happiness <= 35
  }
})

#Status affliction already done in my Oddities script

#Indoor/outdoor
GameData::Evolution.register({
  :id            => :LevelOutdoor,
  :parameter     => Integer,
  :level_up_proc => proc { |pkmn, parameter|
    next pkmn.level >= parameter && $game_map.metadata&.outdoor_map
  }
})

GameData::Evolution.register({
  :id            => :LevelIndoor,
  :parameter     => Integer,
  :level_up_proc => proc { |pkmn, parameter|
    next pkmn.level >= parameter && !($game_map.metadata&.outdoor_map)
  }
})

#Day of Week
#0 is Sunday, 6 is Saturday

#Any level-up, parameter is day of week
GameData::Evolution.register({
  :id            => :LevelDayOfWeek,
  :minimum_level => 1,   # Needs any level up
  :parameter     => Integer,
  :level_up_proc => proc { |pkmn, parameter|
    next pbIsWeekday(-1,parameter)
  }
})

#Specific day of week, parameter is level
GameData::Evolution.register({
  :id            => :LevelMonday,
  :parameter     => Integer,
  :level_up_proc => proc { |pkmn, parameter|
    next pkmn.level >= parameter && pbIsWeekday(-1,1)
  }
})

#Maximize level would just be done via standard level-up. Just remember to set it as the first evolution, so other evolutions don't override it. 

GameData::Evolution.register({
  :id            => :LevelEffort,
  :minimum_level => 1,   # Needs any level up
  :level_up_proc => proc { |pkmn, parameter|
	total = 0
	pkmn.ev.each_value { |v| total += v }
    next total >= Pokemon::EV_LIMIT
  }
})

#Parameter is a specific stat
GameData::Evolution.register({
  :id            => :LevelEffortStat,
  :minimum_level => 1,   # Needs any level up
  :parameter     => :Stat,
  :level_up_proc => proc { |pkmn, parameter|
    next pkmn.ev[parameter] >= Pokemon::EV_STAT_LIMIT
  }
})

#Level at or above given level on map where Pokemon was obtained
GameData::Evolution.register({
  :id            => :Homecoming,
  :parameter     => Integer,
  :level_up_proc => proc { |pkmn, parameter|
    next pkmn.level >= parameter && pkmn.obtain_map == $game_map.map_id
  }
})

#Landing OHKO moves in a battle
#Defeat foe using resisted or ineffective move
#Inflict status against foe repeatedly in battle
#Experience non-volatile status during fight
#Survive on one HP
#Survive multiple SE hits
#Defeat rival species
#Using vitamins and Rare Candies can be done via standard item evo. X-Items would need to be created
#Same is true of healing items
#Same is true of beverages
#Same is true of berries

#Any level-up, parameter is Poke Ball
GameData::Evolution.register({
  :id                   => :LevelBall,
  :parameter            => :Item,
  :minimum_level        => 1,   # Needs any level up
  :level_up_proc        => proc { |pkmn, parameter|
    next pkmn.poke_ball == parameter
  }
})

#Ball is hard-coded, parameter is level
GameData::Evolution.register({
  :id            => :LevelGreatBall,
  :parameter     => Integer,
  :level_up_proc => proc { |pkmn, parameter|
    next pkmn.level >= parameter && pkmn.poke_ball == :GREATBALL
  }
})

#Return trade
GameData::Evolution.register({
  :id            => :TradeReturn,
  :on_trade_proc => proc { |pkmn, parameter, other_pkmn|
    next !(pkmn.foreign?)
  }
})

#Battery, volume - see Oddities
#Bluetooth, airplane mode, brightness - not sure if possible through Essentials
#Language would need to be settings or something
#Real time aging - check timeReceived and time now, but how to format the requirement?
#Parenting would require setting relationships during breeding
#withdraw from PC would probably be like an event evo
#Same for releasing Pokemon
#Skipping evos for a later one is just a matter of how you design the PBS - put the higher-level evo first in the PBS so the others don't override it

#Specific nickname
GameData::Evolution.register({
  :id                   => :LevelName,
  :parameter            => String,
  :minimum_level        => 1,   # Needs any level up
  :level_up_proc        => proc { |pkmn, parameter|
    next pkmn.name == parameter
  }
})
#Hall of Fame could be done via ribbon or via specific attribute

#Money above certain amount
GameData::Evolution.register({
  :id            => :LevelMoney,
  :minimum_level => 1,   # Needs any level up
  :parameter     => Integer,
  :level_up_proc => proc { |pkmn, parameter|
    next $player.money >= parameter
  }
})

#Retirement trip would need a new attribute that would be kept track of every time the player entered a location
"
2TTG7TjS,Plus Adminlte #3,rizkyxp,PHP,Monday 22nd of May 2023 08:45:37 PM CDT,"<?php include_once 'header.php'; ?>

<div class=""content-wrapper"">
    <section class=""content-header"">
        <h1>
            Calendar
            <small>Draggable events with full calendar</small>
        </h1>
        <ol class=""breadcrumb"">
            <li><a href=""#""><i class=""fa fa-dashboard""></i> Home</a></li>
            <li><a href=""#"">Calendar</a></li>
            <li class=""active"">Full calendar</li>
        </ol>
    </section>

    <section class=""content"">
        <div class=""row"">
            <div class=""col-md-3"">
                <div class=""box box-solid"">
                    <div class=""box-header with-border"">
                        <h3 class=""box-title"">Draggable Events</h3>
                    </div>
                    <div class=""box-body"">
                        <!-- the events -->
                        <div id=""external-events"">
                            <div class=""external-event bg-green"">Lunch</div>
                            <div class=""external-event bg-yellow"">Go home</div>
                            <div class=""external-event bg-aqua"">Do homework</div>
                            <div class=""external-event bg-light-blue"">Work on UI design</div>
                            <div class=""external-event bg-red"">Sleep tight</div>
                            <div class=""checkbox"">
                                <label for=""drop-remove"">
                                    <input type=""checkbox"" id=""drop-remove"">
                                    remove after drop
                                </label>
                            </div>
                        </div>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /. box -->
            </div>
            <!-- /.col -->
            <div class=""col-md-9"">
                <div class=""box box-primary"">
                    <div class=""box-body no-padding"">
                        <!-- THE CALENDAR -->
                        <div id=""calendar""></div>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /. box -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<?php include_once 'footer.php'; ?>

<script>
$(document).ready(function() {
    /* initialize the external events
     -----------------------------------------------------------------*/
    function ini_events(ele) {
        ele.each(function() {
            // create an Event Object (https://fullcalendar.io/docs/event-object)
            // it doesn't need to have a start or end
            var eventObject = {
                title: $.trim($(this).text()) // use the element's text as the event title
            };

            // store the Event Object in the DOM element so we can get to it later
            $(this).data('eventObject', eventObject);

            // make the event draggable using jQuery UI
            $(this).draggable({
                zIndex: 1070,
                revert: true, // will cause the event to go back to its
                revertDuration: 0 //  original position after the drag
            });
        });
    }

    ini_events($('#external-events div.external-event'));

    /* initialize the calendar
     -----------------------------------------------------------------*/
    //Date for the calendar events (dummy data)
    var date = new Date();
    var d = date.getDate(),
        m = date.getMonth(),
        y = date.getFullYear();

    $('#calendar').fullCalendar({
        locale: 'id',
        header: {
            left: 'prev,next today',
            center: 'title',
            right: 'month,agendaWeek,agendaDay'
        },
        buttonText: {
            today: 'today',
            month: 'month',
            week: 'week',
            day: 'day'
        },
        //Random default events
        events: 'get_events.php',
        editable: true,
        droppable: true, // this allows things to be dropped onto the calendar
        drop: function(date, jsEvent, ui, resourceId) {
            // is the ""remove after drop"" checkbox checked?
            if ($('#drop-remove').is(':checked')) {
                // if so, remove the element from the ""Draggable Events"" list
                $(this).remove();
            }
        },
        eventDrop: function(event, delta, revertFunc) {
            $.ajax({
                url: 'update_event.php',
                data: {
                    id: event.id,
                    start: event.start.format(),
                    end: event.end.format()
                },
                type: 'POST',
                success: function(response) {
                    // handle response from server
                },
                error: function(xhr, status, error) {
                    // handle error
                }
            });
        }
    });
});
</script>
"
zajXfLFD,Plus Adminlte #2,rizkyxp,PHP,Monday 22nd of May 2023 08:43:59 PM CDT,"<?php
// Koneksi ke database
$host = ""localhost"";
$user = ""root"";
$password = """";
$database = ""calendar"";
$conn = mysqli_connect($host, $user, $password, $database);
if (!$conn) {
    die(""Koneksi gagal: "" . mysqli_connect_error());
}

// Menerima data dari Ajax request
$id = $_POST['id'];
$start = $_POST['start'];
$end = $_POST['end'];

// Query untuk mengupdate data event di database
$sql = ""UPDATE events SET start='$start', end='$end' WHERE id='$id'"";
$result = mysqli_query($conn, $sql);

// Mengirimkan respon ke client
if ($result) {
    echo ""Event berhasil diupdate."";
} else {
    echo ""Event gagal diupdate."";
}
?>
P"
2H59KxfL,Kode PHP untuk mengupdate event di database #3,rizkyxp,PHP,Monday 22nd of May 2023 08:10:59 PM CDT,"<?php
// Koneksi ke database
$host = ""localhost"";
$user = ""root"";
$password = """";
$database = ""calendar"";
$conn = mysqli_connect($host, $user, $password, $database);
if (!$conn) {
    die(""Koneksi gagal: "" . mysqli_connect_error());
}

// Menerima data dari Ajax request
$id = $_POST['id'];
$start = $_POST['start'];
$end = $_POST['end'];

// Query untuk mengupdate data event di database
$sql = ""UPDATE events SET start='$start', end='$end' WHERE id='$id'"";
$result = mysqli_query($conn, $sql);

// Mengirimkan respon ke client
if ($result) {
    echo ""Event berhasil diupdate."";
} else {
    echo ""Event gagal diupdate."";
}
?>
"
pzHj1emg,Draggable Schedule Calender #2,rizkyxp,PHP,Monday 22nd of May 2023 07:58:27 PM CDT,"<!--Kode HTML dan JavaScript untuk menampilkan calendar
-->
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.css' />
    <script src='https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/locale-all.min.js'></script>
    <script>
        $(document).ready(function() {
            $('#calendar').fullCalendar({
                locale: 'id',
                editable: true,
                events: 'get_events.php',
                eventDrop: function(event, delta, revertFunc) {
                    $.ajax({
                        url: 'update_event.php',
                        data: {
                            id: event.id,
                            start: event.start.format(),
                            end: event.end.format()
                        },
                        type: 'POST',
                        success: function(response) {
                            // handle response from server
                        },
                        error: function(xhr, status, error) {
                            // handle error
                        }
                    });
                }
            });
        });
    </script>
</head>
<body>
    <div id='calendar'></div>
</body>
</html>
"
7XcHZbg5,pihole-report.sh,Paraphraser,Bash,Monday 22nd of May 2023 07:54:05 PM CDT,"#!/usr/bin/env bash

DB=""${1:-""$HOME/IOTstack/volumes/pihole/etc-pihole/pihole-FTL.db""}""

sqlite3 -column -header ""$DB"" <<-COLLECT_TEXT

SELECT count(*) AS ""query_storage rows"" FROM query_storage;

.print

SELECT count(*) AS ""queries rows"" FROM queries;

.print

SELECT
   ts AS ""earliest"",
   datetime(ts, 'unixepoch') AS ""utc"", 
   datetime(ts, 'unixepoch', 'localtime') AS ""local""
FROM (
   SELECT min(timestamp) AS ""ts"" FROM query_storage
);

.print

SELECT
   ts AS ""latest"",
   datetime(ts, 'unixepoch') AS ""utc"",
   datetime(ts, 'unixepoch', 'localtime') AS ""local""
FROM (
   SELECT max(timestamp) AS ""ts"" FROM query_storage
);

.print

COLLECT_TEXT
"
YNU37bDR,Pthyon3 menu driven gpg encryption tool  terminal only Target == linux,Mark2020H,Python,Monday 22nd of May 2023 07:51:41 PM CDT,"#!/usr/bin/env python3
# Python code  MD Harrington 23-05-2023 

# Checks for GPG Install lets you set up gpg keys  done for debian 12  bit should work on any linux distro with
# python three installed 
# Will encrypt  end decrypt files for you 
# All menu driven via python 

# Dont forget to chmod +x  gpginstaller.py from terminal 


import subprocess
import sys
import time
import os
from colorama import init, Fore, Style

class GpgInstaller:
    def __init__(self):
        pass

    @staticmethod
    def is_gpg_installed():
        try:
            subprocess.run([""gpg"", ""--version""], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            return True
        except FileNotFoundError:
            return False

    @staticmethod
    def install_gpg():
        try:
            subprocess.run([""sudo"", ""apt-get"", ""update""])
            subprocess.run([""sudo"", ""apt-get"", ""install"", ""-y"", ""gnupg""])
            print(""GPG has been successfully installed."")
        except subprocess.CalledProcessError:
            print(""Failed to install GPG. Please install it manually."")
            sys.exit(1)

    @staticmethod
    def encrypt_file(file_path, email, password):
        try:
            subprocess.run([""gpg"", ""--recipient"", email, ""--passphrase"", password, ""--encrypt"", file_path])
            print(""File encrypted successfully."")
        except FileNotFoundError:
            print(""GPG is not installed. Please install GPG before encrypting files."")
        except subprocess.CalledProcessError:
            print(""Failed to encrypt the file."")

    @staticmethod
    def decrypt_file(file_path, password):
        try:
            subprocess.run([""gpg"", ""--output"", ""decrypted.txt"", ""--passphrase"", password, ""--decrypt"", file_path])
            print(""File decrypted successfully."")
        except FileNotFoundError:
            print(""GPG is not installed. Please install GPG before decrypting files."")
        except subprocess.CalledProcessError:
            print(""Failed to decrypt the file."")

    @staticmethod
    def print_slow(text):
        for char in text:
            print(char, end='', flush=True)
            time.sleep(0.05)
        print()

    @staticmethod
    def list_files():
        files = os.listdir('.')
        print(""Files in current directory:"")
        for file in files:
            print(file)

    @staticmethod
    def generate_key():
        try:
            subprocess.run([""gpg"", ""--gen-key""])
            print(""GPG key pair generated successfully."")
        except FileNotFoundError:
            print(""GPG is not installed. Please install GPG before generating keys."")
        except subprocess.CalledProcessError:
            print(""Failed to generate GPG key pair."")

    @staticmethod
    def clear_screen():
        time.sleep(1.3)
        if os.name == ""nt"":  # For Windows
            os.system(""cls"")
        else:  # For Linux and Mac
            os.system(""clear"")
            
            
    @staticmethod
    def main():
        init()  # Initialize colorama for colored output

        if not GpgInstaller.is_gpg_installed():
            GpgInstaller.install_gpg()
        else:
            print(""GPG is already installed."")

        while True:
            GpgInstaller.clear_screen()
            print(""\n"" + Style.BRIGHT + ""Menu:"" + Style.RESET_ALL)

            GpgInstaller.print_slow(""1. "" + Fore.BLUE + ""Check GPG installation"" + Style.RESET_ALL)
            GpgInstaller.print_slow(""2. "" + Fore.YELLOW + ""Encrypt file"" + Style.RESET_ALL)
            GpgInstaller.print_slow(""3. "" + Fore.GREEN + ""Decrypt file"" + Style.RESET_ALL)
            GpgInstaller.print_slow(""4. "" + Fore.MAGENTA + ""Generate GPG key pair"" + Style.RESET_ALL)
            GpgInstaller.print_slow(""5. "" + Fore.RED + ""Exit application"" + Style.RESET_ALL)
            GpgInstaller.print_slow(""Done By "" + Fore.YELLOW + ""MD Harrington 23/05/2023"" + Style.RESET_ALL)

            choice = input(""Enter your choice: "")
            if choice == ""1"":
                if GpgInstaller.is_gpg_installed():
                    print(""GPG is installed."")
                else:
                    print(""GPG is not installed."")

            elif choice == ""2"":
                GpgInstaller.list_files()
                file_to_encrypt = input(""Enter the file name to encrypt: "")
                email = input(""Enter your email address: "")
                password = input(""Enter your password: "")
                GpgInstaller.encrypt_file(file_to_encrypt, email, password)

            elif choice == ""3"":
                GpgInstaller.list_files()
                file_to_decrypt = input(""Enter the file name to decrypt: "")
                password = input(""Enter your password: "")
                GpgInstaller.decrypt_file(file_to_decrypt, password)

            elif choice == ""4"":
                GpgInstaller.generate_key()

            elif choice == ""5"":
                print(""Exiting the application."")
                sys.exit(0)

            else:
                print(""Invalid choice. Please try again."")

if __name__ == ""__main__"":
    GpgInstaller.main()
"
WAXuy3md,Test,Gunx,JSON,Monday 22nd of May 2023 07:39:50 PM CDT,"{
//เวอร์ชั่นไว้สำหรับอัพเดทหากมีการอัพเดทต้องเปลี่ยนตัวเลขให้เยอะกว่าเดิม
""Version"":""9.0
 
Hyper-Xs ยินดีต้อนรับทุกท่าน 
รายละเอียดอัพเดทเมื่อวันที่ 14/1/65
เซิฟเวอร์ที่อยู่ในแอปเป็น VPS ทั้งหมด เซิฟที่อยู่เป็นเซิฟชั่วคราว รออัปเดตเซิฟ SG อีก2 เซิฟ อัปเดตเซิฟไทยให้ใล้งานก่อนนะครับ
=====================================
เชิร์ฟเวอร์ปัจจุบัน
🇨🇷 Server TH
🌐 Server VPS
 
#. อัพเดทไม่ได้ ให้กดล้างข้อมูลแอพ!!! 
#. ในแอพพลิเคชั่น มีโฆษณา"",
//ลิ้งค์สำหรับอัพเดทเซิร์ฟเวอร์
""Url"":""https://github.com/LiLGun-X/UP-File/blob/main/lovex.zip?raw=true"" ,
""Changelog"":""
 
 
 
 
"",
 
 
 
 
 
 
//ไม่ต้องยุ่งด้านล่าง
""latestVersion"": ""1.0.0"",
""latestVersionCode"": ""1"",
""url"": """",
 ""releaseNotes"": [
 ""-Demo""
  ]
}"
QxzMDLxe,Substitube Held Items Handlers v20 WIP,TechSkylander1518,Ruby,Monday 22nd of May 2023 07:38:11 PM CDT,"Battle::ItemEffects::OnBeingHit.add(:OIL,
  proc { |item, user, target, move, battle|
    next if move.calcType != :FIRE
    next if !target.pbCanRaiseStatStage?(:SPEED, target)
    battle.pbCommonAnimation(""UseItem"", target)
    target.pbRaiseStatStageByCause(:SPEED, 1, target, target.itemName)
    target.pbHeldItemTriggered(item)
  }
)

Battle::ItemEffects::OnBeingHit.add(:ESPSHARE,
  proc { |item, user, target, move, battle|
    next if move.calcType != :PSYCHIC
    next if !target.pbCanRaiseStatStage?(:SPECIAL_ATTACK, target)
    battle.pbCommonAnimation(""UseItem"", target)
    target.pbRaiseStatStageByCause(:SPECIAL_ATTACK, 1, target, target.itemName)
    target.pbHeldItemTriggered(item)
  }
)

#Beam Mirror - Reduces 3/4 damage from beam attacks, sends 1/4 damage back, consumes item
#Glue Trap - on contact, holder and foe can't escape. (presumably on holder being contacted by move, and not holder attacking)
#Reset Button - on attack, ability reactivated. (on send out, like intimidate, on hit, like gooey, or end of turn, like speed boost). consumed
#Magic Balloon - Gives Psychic or Fairy type until holder is attacked, where it'll pop
#Water Balloon - Gives Water type when pops
#Dirty Balloon - POison
#Fertilizer - Grass
#Sand Bag - Ground
#Party Hat - any move that would be cured by mental herb becomes random stat boost instead
#Dunce Cap - Any status ailment (not clear if nonvolatile or not) becomes confusion
#Rebreather - prevents secondary poison
#Rubber Stamp - prevents secondary paralyze
#Chill Patch - prevents secondary burn
#Thaw Patch - prevents secondary freeze 
#Buzz Band - prevents secondary sleep
#Starry Band - prevents confusion
#Chastity Knot - prevents attraction
#Hall Pass - prevents entrapment and pursuit
#Harness - prevents ""phasing""?
#Chain Mail - immune to crits
#Talisman - prevents Destiny Bond, Perish Song, Curse
#Siege Vest - halves damage from weakness (like Filter/Solid Rock), prevents switching and/or healing
#Tactical Vest - Min/max variance is always maxed
#Ammo Belt - extra hit on multistrike moves
#Blast Powder - boosts explosion and selfdestruct damage (doubled)
#Padded Helmet - item form of Rock Head
#Metal Grin - boosts biting moves
#Hidden Glyph - boosts Hidden Power
#Burden Glyph - boosts HM moves except for Surf and Waterfall, doubles stat effects of Flash/Defog
#Jingle Bells - Deer Pokemon (should be flag added to swords of justice, Deerling line, Stantler line, Xerneas, Calyrex, Ting-Lu) levitate in Hail and aren't affected by Hail damage
#Neverstone - Ignores abilities
#Handy Cap - increased rate of incoming crits
#Singolite - raises all non-HP stats equally until BST is 530. Can't be part of evo line, can't have BST over 500."
BhLjEt3Q,Untitled,MrFast,Java,Monday 22nd of May 2023 07:35:50 PM CDT,"/**
 * Original code was taken from Skytils under GNU Affero General Public License v3.0 and modified by MrFast
 *
 * @author Skytils Team
 * @link https://github.com/Skytils/SkytilsMod/blob/1.x/LICENSE.md
 */"
nCyEkVd7,2023-05-22_stats.json,rdp_snitch,JSON,Monday 22nd of May 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""51.75.160.42"": 2,
    ""167.99.250.229"": 1,
    ""162.241.158.17"": 24,
    ""202.165.93.234"": 1,
    ""194.165.16.73"": 2,
    ""194.165.16.111"": 4,
    ""20.169.241.254"": 13,
    ""98.143.255.25"": 5,
    ""87.251.75.145"": 4,
    ""103.214.22.38"": 10,
    ""194.165.16.37"": 1,
    ""120.55.14.18"": 2,
    ""23.111.252.33"": 1,
    ""185.170.144.3"": 2,
    ""103.153.69.145"": 6,
    ""108.62.116.172"": 2,
    ""103.231.91.132"": 1,
    ""74.235.2.187"": 1,
    ""185.190.24.15"": 1,
    ""95.142.121.44"": 1,
    ""5.62.34.45"": 1,
    ""207.244.85.142"": 1,
    ""198.7.56.159"": 2,
    ""87.251.64.110"": 2,
    ""185.122.204.69"": 10,
    ""128.199.20.70"": 49,
    ""34.85.2.71"": 4,
    ""200.14.45.41"": 3,
    ""185.11.61.199"": 2,
    ""194.165.16.78"": 2,
    ""87.251.75.120"": 1,
    ""36.90.222.17"": 11,
    ""123.57.243.74"": 2,
    ""103.24.200.130"": 9,
    ""106.116.169.71"": 1,
    ""141.98.82.22"": 6,
    ""216.73.162.151"": 1,
    ""194.165.16.10"": 2,
    ""23.100.23.103"": 1,
    ""89.248.163.96"": 1,
    ""194.165.16.11"": 2,
    ""205.210.31.233"": 3,
    ""62.233.50.179"": 6,
    ""174.138.17.83"": 10,
    ""45.135.201.65"": 4,
    ""45.227.254.26"": 2,
    ""198.235.24.112"": 3
  },
  ""asn"": {
    ""AS16276"": 2,
    ""AS14061"": 60,
    ""AS19871"": 24,
    ""AS136255"": 1,
    ""AS48721"": 13,
    ""AS8075"": 15,
    ""AS3367"": 5,
    ""AS208091"": 5,
    ""AS63473"": 10,
    ""AS37963"": 4,
    ""AS30633"": 6,
    ""AS48080"": 4,
    ""AS131366"": 6,
    ""AS133480"": 1,
    ""AS211632"": 1,
    ""AS198605"": 1,
    ""AS36351"": 1,
    ""AS57523"": 18,
    ""AS396982"": 10,
    ""AS27810"": 3,
    ""AS7713"": 11,
    ""AS58909"": 9,
    ""AS4134"": 1,
    ""AS209588"": 6,
    ""AS206092"": 1,
    ""AS202425"": 1,
    ""AS44486"": 4,
    ""AS267784"": 2
  },
  ""isp"": {
    ""OVH SAS"": 2,
    ""DigitalOcean, LLC"": 60,
    ""Unified Layer"": 24,
    ""Telecom International Myanmar Company Limited"": 1,
    ""Flyservers S.A."": 21,
    ""Microsoft Corporation"": 15,
    ""Xplornet Communications Inc."": 5,
    ""XHOST-INTERNET-SOLUTIONS"": 5,
    ""Hosthatch"": 10,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""Leaseweb USA"": 1,
    ""Dmitriy Panchenko"": 4,
    ""TAM"": 6,
    ""Leaseweb USA, Inc."": 5,
    ""Intergrid Group Pty Ltd"": 1,
    ""Internet Solutions & Innovations LTD."": 1,
    ""AVAST Software s.r.o."": 1,
    ""SoftLayer Technologies Inc."": 1,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Google LLC"": 10,
    ""Mercanet Ltda"": 3,
    ""PT. Telekomunikasi Indonesia"": 11,
    ""IBEE Software Solutions Pvt. Ltd."": 9,
    ""Chinanet"": 1,
    ""Bandito Networks"": 1,
    ""IP Volume inc"": 1,
    ""LIVINGBOTS"": 4
  },
  ""org"": {
    ""OVH Ltd"": 2,
    ""DigitalOcean, LLC"": 60,
    ""WEBSITEWELCOME.COM"": 24,
    ""Mytel"": 1,
    ""Flyservers S.A"": 13,
    ""Microsoft Azure Cloud (eastus)"": 15,
    ""Xplornet Communications Inc"": 5,
    ""Xhost Internet Solutions"": 7,
    ""HostRoyale Technologies Pvt Ltd"": 10,
    ""Aliyun Computing Co., LTD"": 4,
    ""Leaseweb USA, Inc."": 4,
    ""Xhostis"": 2,
    ""TAM Media Technology Joint Stock Company"": 6,
    ""Leaseweb USA, Inc"": 2,
    ""Intergrid Group Pty. Ltd."": 1,
    ""Tribeka Web Advisors S.A"": 1,
    ""Prcdn Consumer US NY NYC"": 1,
    ""AVAST Software"": 1,
    ""Starcrecium Limited"": 12,
    ""Google Cloud (asia-northeast1)"": 4,
    ""Mercanet Ltda"": 3,
    ""Telekomunikasi Indonesia"": 11,
    ""Webzilla B.V."": 9,
    ""Chinanet HE"": 1,
    ""Mivocloud SRL"": 6,
    ""VPN Consumer Network Services"": 1,
    ""Quasi Networks LTD."": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""Sierra LLC"": 6,
    ""Unknown"": 4,
    ""UAB Host Baltic"": 2
  },
  ""regionName"": {
    ""England"": 7,
    ""Hesse"": 1,
    ""Utah"": 24,
    ""Yangon"": 1,
    ""Kaunas"": 13,
    ""Virginia"": 20,
    ""New Brunswick"": 5,
    ""Central and Western District"": 10,
    ""Zhejiang"": 2,
    ""District of Columbia"": 1,
    ""North Holland"": 3,
    ""Hanoi"": 6,
    ""Auckland"": 1,
    ""Mariehamns stad"": 1,
    ""New York"": 1,
    ""Beijing"": 3,
    ""Moscow"": 18,
    ""Karnataka"": 58,
    ""Tokyo"": 4,
    ""Bogota D.C."": 3,
    ""Chechnya"": 2,
    ""East Java"": 11,
    ""Hebei"": 1,
    ""Provincia de Panama"": 6,
    ""Ontario"": 1,
    ""California"": 6,
    ""South West"": 10,
    ""Bremen"": 4,
    ""Vilnius"": 2
  },
  ""country"": {
    ""United Kingdom"": 7,
    ""Germany"": 5,
    ""United States"": 52,
    ""Myanmar"": 1,
    ""Lithuania"": 15,
    ""Canada"": 6,
    ""Hong Kong"": 10,
    ""China"": 6,
    ""Netherlands"": 3,
    ""Vietnam"": 6,
    ""New Zealand"": 1,
    ""Aland Islands"": 1,
    ""Russia"": 20,
    ""India"": 58,
    ""Japan"": 4,
    ""Colombia"": 3,
    ""Indonesia"": 11,
    ""Panama"": 6,
    ""Singapore"": 10
  },
  ""account"": {
    ""Test"": 13,
    ""hello"": 164,
    ""(empty)"": 3,
    ""Administr"": 25,
    ""Domain"": 14,
    ""LklRNMTvQ"": 1,
    ""bapERQ"": 1,
    ""FXPdqo"": 1,
    ""mSOEUTrQW"": 1,
    ""dlOzFr"": 1,
    ""iHKZDb"": 1
  },
  ""keyboard"": {
    ""Unknown"": 225
  },
  ""client_build"": {
    ""Unknown"": 225
  },
  ""client_name"": {
    ""Unknown"": 225
  },
  ""ip_type"": {
    ""hosting"": 134,
    ""Unknown"": 69,
    ""hosting & proxy"": 8,
    ""proxy"": 13,
    ""mobile & proxy"": 1
  }
}"
CzVnkXFX,vipor hub,SkidScripts,Lua,Monday 22nd of May 2023 06:57:02 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/suno-ui/Proj.-Vipor/main/Configurations/System_OS.lua"", true))(""Vipor"")"
D7fhLkPG,fart hub Apeirophobia,SkidScripts,Lua,Monday 22nd of May 2023 06:55:58 PM CDT,"loadstring(game:HttpGet((""https://raw.githubusercontent.com/Sussy-Tech/Scripts/main/FartHub.lua""), true))()"
9pxSpF1n,anti afk,SkidScripts,Lua,Monday 22nd of May 2023 06:55:08 PM CDT,"local VU = game:GetService(""VirtualUser"")
 
game:GetService(""Players"").LocalPlayer.Idled:connect(function()
    VU:CaptureController()
    VU:ClickButton2(Vector2.new())
    print(""Skipped"")
end)
 
print(""Anti Afk Enabled."")"
ktvKG1QW,Untitled,sdxhex,C++,Monday 22nd of May 2023 06:31:01 PM CDT,"//@version=5
strategy(""PAUL**DAILY**"")

threshold = input.float(title=""threshold"",  defval=0.0016, step=0.0001)
stopLossPercent = input.float(1, title=""Stop Loss (%)"")
takeProfitPercent = input.float(2, title=""Take Profit (%)"")
getDiff() =>
    yesterday = request.security(syminfo.tickerid, '60', close[1])
    today = request.security(syminfo.tickerid, '60', close)
    delta=today-yesterday
    percentage=delta/yesterday

PineActivationFunctionLinear(v) => v
PineActivationFunctionTanh(v) => 
    (math.exp(v) - math.exp(-v))/(math.exp(v) + math.exp(-v))

l0_0 = PineActivationFunctionLinear(getDiff())
l0_1 = PineActivationFunctionLinear(getDiff())
l0_2 = PineActivationFunctionLinear(getDiff())
l0_3 = PineActivationFunctionLinear(getDiff())
l0_4 = PineActivationFunctionLinear(getDiff())
l0_5 = PineActivationFunctionLinear(getDiff())
l0_6 = PineActivationFunctionLinear(getDiff())
l0_7 = PineActivationFunctionLinear(getDiff())
l0_8 = PineActivationFunctionLinear(getDiff())
l0_9 = PineActivationFunctionLinear(getDiff())
l0_10 = PineActivationFunctionLinear(getDiff())
l0_11 = PineActivationFunctionLinear(getDiff())
l0_12 = PineActivationFunctionLinear(getDiff())
l0_13 = PineActivationFunctionLinear(getDiff())
l0_14 = PineActivationFunctionLinear(getDiff())
 
l1_0 = PineActivationFunctionTanh(l0_0*5.040340774 + l0_1*-1.3025994088 + l0_2*19.4225543981 + l0_3*1.1796960423 + l0_4*2.4299395823 + l0_5*3.159003445 + l0_6*4.6844527551 + l0_7*-6.1079267196 + l0_8*-2.4952869198 + l0_9*-4.0966081154 + l0_10*-2.2432843111 + l0_11*-0.6105764807 + l0_12*-0.0775684605 + l0_13*-0.7984753138 + l0_14*3.4495907342)
l1_1 = PineActivationFunctionTanh(l0_0*5.9559031982 + l0_1*-3.1781960056 + l0_2*-1.6337491061 + l0_3*-4.3623166512 + l0_4*0.9061990402 + l0_5*-0.731285093 + l0_6*-6.2500232251 + l0_7*0.1356087758 + l0_8*-0.8570572885 + l0_9*-4.0161353298 + l0_10*1.5095552083 + l0_11*1.324789197 + l0_12*-0.1011973878 + l0_13*-2.3642090162 + l0_14*-0.7160862442)
l1_2 = PineActivationFunctionTanh(l0_0*4.4350881378 + l0_1*-2.8956461034 + l0_2*1.4199762607 + l0_3*-0.6436844261 + l0_4*1.1124274281 + l0_5*-4.0976954985 + l0_6*2.9317456342 + l0_7*0.0798318393 + l0_8*-5.5718144311 + l0_9*-0.6623352208 +l0_10*3.2405203222 + l0_11*-10.6253384513 + l0_12*4.7132919253 + l0_13*-5.7378151597 + l0_14*0.3164836695)
l1_3 = PineActivationFunctionTanh(l0_0*-6.1194605467 + l0_1*7.7935605604 + l0_2*-0.7587522153 + l0_3*9.8382495905 + l0_4*0.3274314734 + l0_5*1.8424796541 + l0_6*-1.2256355427 + l0_7*-1.5968600758 + l0_8*1.9937700922 + l0_9*5.0417809111 + l0_10*-1.9369944654 + l0_11*6.1013201778 + l0_12*1.5832910747 + l0_13*-2.148403244 + l0_14*1.5449437366)
l1_4 = PineActivationFunctionTanh(l0_0*3.5700040028 + l0_1*-4.4755892733 + l0_2*0.1526702072 + l0_3*-0.3553664401 + l0_4*-2.3777962662 + l0_5*-1.8098849587 + l0_6*-3.5198449134 + l0_7*-0.4369370497 + l0_8*2.3350169623 + l0_9*1.9328960346 + l0_10*1.1824141812 + l0_11*3.0565148049 + l0_12*-9.3253401534 + l0_13*1.6778555498 + l0_14*-3.045794332)
l1_5 = PineActivationFunctionTanh(l0_0*3.6784907623 + l0_1*1.1623683715 + l0_2*7.1366362145 + l0_3*-5.6756546585 + l0_4*12.7019884334 + l0_5*-1.2347823331 + l0_6*2.3656619827 + l0_7*-8.7191778213 + l0_8*-13.8089238753 + l0_9*5.4335943836 + l0_10*-8.1441181338 + l0_11*-10.5688113287 + l0_12*6.3964140758 + l0_13*-8.9714236223 + l0_14*-34.0255456929)
l1_6 = PineActivationFunctionTanh(l0_0*-0.4344517548 + l0_1*-3.8262167437 + l0_2*-0.2051098003 + l0_3*0.6844201221 + l0_4*1.1615893422 + l0_5*-0.404465314 + l0_6*-0.1465747632 + l0_7*-0.006282458 + l0_8*0.1585655487 + l0_9*1.1994484991 + l0_10*-0.9879081404 + l0_11*-0.3564970612 + l0_12*1.5814717823 + l0_13*-0.9614804676 + l0_14*0.9204822346)
l1_7 = PineActivationFunctionTanh(l0_0*-4.2700957175 + l0_1*9.4328591157 + l0_2*-4.3045548 + l0_3*5.0616868842 + l0_4*3.3388781058 + l0_5*-2.1885073225 + l0_6*-6.506301518 + l0_7*3.8429000108 + l0_8*-1.6872237349 + l0_9*2.4107095799 + l0_10*-3.0873985314 + l0_11*-2.8358325447 + l0_12*2.4044366491 + l0_13*0.636779082 + l0_14*-13.2173215035)
l1_8 = PineActivationFunctionTanh(l0_0*-8.3224697492 + l0_1*-9.4825530183 + l0_2*3.5294389835 + l0_3*0.1538618049 + l0_4*-13.5388631898 + l0_5*-0.1187936017 + l0_6*-8.4582741139 + l0_7*5.1566299292 + l0_8*10.345519938 + l0_9*2.9211759333 + l0_10*-5.0471804233 + l0_11*4.9255989983 + l0_12*-9.9626142544 + l0_13*23.0043143258 + l0_14*20.9391809343)
l1_9 = PineActivationFunctionTanh(l0_0*-0.9120518654 + l0_1*0.4991807488 + l0_2*-1.877244586 + l0_3*3.1416466525 + l0_4*1.063709676 + l0_5*0.5210126835 + l0_6*-4.9755780108 + l0_7*2.0336532347 + l0_8*-1.1793121093 + l0_9*-0.730664855 + l0_10*-2.3515987428 + l0_11*-0.1916546514 + l0_12*-2.2530340504 + l0_13*-0.2331829119 + l0_14*0.7216218149)
l1_10 = PineActivationFunctionTanh(l0_0*-5.2139618683 + l0_1*1.0663790028 + l0_2*1.8340834959 + l0_3*1.6248173447 + l0_4*-0.7663740145 + l0_5*0.1062788171 + l0_6*2.5288021501 + l0_7*-3.4066549066 + l0_8*-4.9497988755 + l0_9*-2.3060668143 + l0_10*-1.3962486274 + l0_11*0.6185583427 + l0_12*0.2625299576 + l0_13*2.0270246444 + l0_14*0.6372015811)
l1_11 = PineActivationFunctionTanh(l0_0*0.2020072665 + l0_1*0.3885852709 + l0_2*-0.1830248843 + l0_3*-1.2408598444 + l0_4*-0.6365798088 + l0_5*1.8736534268 + l0_6*0.656206442 + l0_7*-0.2987482678 + l0_8*-0.2017485963 + l0_9*-1.0604095303 + l0_10*0.239793356 + l0_11*-0.3614172938 + l0_12*0.2614678044 + l0_13*1.0083551762 + l0_14*-0.5473833797)
l1_12 = PineActivationFunctionTanh(l0_0*-0.4367517149 + l0_1*-10.0601304934 + l0_2*1.9240604838 + l0_3*-1.3192184047 + l0_4*-0.4564760159 + l0_5*-0.2965270368 + l0_6*-1.1407423613 + l0_7*2.0949647291 + l0_8*-5.8212599297 + l0_9*-1.3393321939 + l0_10*7.6624548265 + l0_11*1.1309391851 + l0_12*-0.141798054 + l0_13*5.1416736187 + l0_14*-1.8142503125)
l1_13 = PineActivationFunctionTanh(l0_0*1.103948336 + l0_1*-1.4592033032 + l0_2*0.6146278432 + l0_3*0.5040966421 + l0_4*-2.4276090772 + l0_5*-0.0432902426 + l0_6*-0.0044259999 + l0_7*-0.5961347308 + l0_8*0.3821026107 + l0_9*0.6169102373 +l0_10*-0.1469847611 + l0_11*-0.0717167683 + l0_12*-0.0352403695 + l0_13*1.2481310788 + l0_14*0.1339628411)
l1_14 = PineActivationFunctionTanh(l0_0*-9.8049980534 + l0_1*13.5481068519 + l0_2*-17.1362809025 + l0_3*0.7142100864 + l0_4*4.4759163422 + l0_5*4.5716161777 + l0_6*1.4290884628 + l0_7*8.3952862712 + l0_8*-7.1613700432 + l0_9*-3.3249489518+ l0_10*-0.7789587912 + l0_11*-1.7987628873 + l0_12*13.364752545 + l0_13*5.3947219678 + l0_14*12.5267547127)
l1_15 = PineActivationFunctionTanh(l0_0*0.9869461803 + l0_1*1.9473351905 + l0_2*2.032925759 + l0_3*7.4092080633 + l0_4*-1.9257741399 + l0_5*1.8153585328 + l0_6*1.1427866392 + l0_7*-0.3723167449 + l0_8*5.0009927384 + l0_9*-0.2275103411 + l0_10*2.8823012914 + l0_11*-3.0633141934 + l0_12*-2.785334815 + l0_13*2.727981E-4 + l0_14*-0.1253009512)
l1_16 = PineActivationFunctionTanh(l0_0*4.9418118585 + l0_1*-2.7538199876 + l0_2*-16.9887588104 + l0_3*8.8734475297 + l0_4*-16.3022734814 + l0_5*-4.562496601 + l0_6*-1.2944373699 + l0_7*-9.6022946986 + l0_8*-1.018393866 + l0_9*-11.4094515429 + l0_10*24.8483091382 + l0_11*-3.0031522277 + l0_12*0.1513114555 + l0_13*-6.7170487021 + l0_14*-14.7759227576)
l1_17 = PineActivationFunctionTanh(l0_0*5.5931454656 + l0_1*2.22272078 + l0_2*2.603416897 + l0_3*1.2661196599 + l0_4*-2.842826446 + l0_5*-7.9386099121 + l0_6*2.8278849111 + l0_7*-1.2289445238 + l0_8*4.571484248 + l0_9*0.9447425595 + l0_10*4.2890688351 + l0_11*-3.3228258483 + l0_12*4.8866215526 + l0_13*1.0693412194 + l0_14*-1.963203112)
l1_18 = PineActivationFunctionTanh(l0_0*0.2705520264 + l0_1*0.4002328199 + l0_2*0.1592515845 + l0_3*0.371893552 + l0_4*-1.6639467871 + l0_5*2.2887318884 + l0_6*-0.148633664 + l0_7*-0.6517792263 + l0_8*-0.0993032992 + l0_9*-0.964940376 + l0_10*0.1286342935 + l0_11*0.4869943595 + l0_12*1.4498648166 + l0_13*-0.3257333384 + l0_14*-1.3496419812)
l1_19 = PineActivationFunctionTanh(l0_0*-1.3223200798 + l0_1*-2.2505204324 + l0_2*0.8142804525 + l0_3*-0.848348177 + l0_4*0.7208860589 + l0_5*1.2033423756 + l0_6*-0.1403005786 + l0_7*0.2995941644 + l0_8*-1.1440473062 + l0_9*1.067752916 + l0_10*-1.2990534679 + l0_11*1.2588583869 + l0_12*0.7670409455 + l0_13*2.7895972983 + l0_14*-0.5376152512)
l1_20 = PineActivationFunctionTanh(l0_0*0.7382351572 + l0_1*-0.8778865631 + l0_2*1.0950766363 + l0_3*0.7312146997 + l0_4*2.844781386 + l0_5*2.4526730903 + l0_6*-1.9175165077 + l0_7*-0.7443755288 + l0_8*-3.1591419438 + l0_9*0.8441602697 + l0_10*1.1979484448 + l0_11*2.138098544 + l0_12*0.9274159536 + l0_13*-2.1573448803 + l0_14*-3.7698356464)
l1_21 = PineActivationFunctionTanh(l0_0*5.187120117 + l0_1*-7.7525670576 + l0_2*1.9008346975 + l0_3*-1.2031603996 + l0_4*5.917669142 + l0_5*-3.1878682719 + l0_6*1.0311747828 + l0_7*-2.7529484612 + l0_8*-1.1165884578 + l0_9*2.5524942323 + l0_10*-0.38623241 + l0_11*3.7961317445 + l0_12*-6.128820883 + l0_13*-2.1470707709 + l0_14*2.0173792965)
l1_22 = PineActivationFunctionTanh(l0_0*-6.0241676562 + l0_1*0.7474455584 + l0_2*1.7435724844 + l0_3*0.8619835076 + l0_4*-0.1138406797 + l0_5*6.5979359352 + l0_6*1.6554154348 + l0_7*-3.7969458806 + l0_8*1.1139097376 + l0_9*-1.9588417 + l0_10*3.5123392221 + l0_11*9.4443103128 + l0_12*-7.4779291395 + l0_13*3.6975940671 + l0_14*8.5134262747)
l1_23 = PineActivationFunctionTanh(l0_0*-7.5486576471 + l0_1*-0.0281420865 + l0_2*-3.8586839454 + l0_3*-0.5648792233 + l0_4*-7.3927282026 + l0_5*-0.3857538046 + l0_6*-2.9779885698 + l0_7*4.0482279965 + l0_8*-1.1522499578 + l0_9*-4.1562500212 + l0_10*0.7813134307 + l0_11*-1.7582667612 + l0_12*1.7071109988 + l0_13*6.9270873208 + l0_14*-4.5871357362)
l1_24 = PineActivationFunctionTanh(l0_0*-5.3603442228 + l0_1*-9.5350611629 + l0_2*1.6749984422 + l0_3*-0.6511065892 + l0_4*-0.8424823239 + l0_5*1.9946675213 + l0_6*-1.1264361638 + l0_7*0.3228676616 + l0_8*5.3562230396 + l0_9*-1.6678168952+ l0_10*1.2612580068 + l0_11*-3.5362671399 + l0_12*-9.3895191366 + l0_13*2.0169228673 + l0_14*-3.3813191557)
l1_25 = PineActivationFunctionTanh(l0_0*1.1362866429 + l0_1*-1.8960071702 + l0_2*5.7047307243 + l0_3*-1.6049785053 + l0_4*-4.8353898931 + l0_5*-1.4865381145 + l0_6*-0.2846893475 + l0_7*2.2322095997 + l0_8*2.0930488668 + l0_9*1.7141411002 + l0_10*-3.4106032176 + l0_11*3.0593289612 + l0_12*-5.0894813904 + l0_13*-0.5316299133 + l0_14*0.4705265416)
l1_26 = PineActivationFunctionTanh(l0_0*-0.9401400975 + l0_1*-0.9136086957 + l0_2*-3.3808688582 + l0_3*4.7200776773 + l0_4*3.686296919 + l0_5*14.2133723935 + l0_6*1.5652940954 + l0_7*-0.2921139433 + l0_8*1.0244504511 + l0_9*-7.6918299134 + l0_10*-0.594936135 + l0_11*-1.4559914156 + l0_12*2.8056435224 + l0_13*2.6103905733 + l0_14*2.3412348872)
l1_27 = PineActivationFunctionTanh(l0_0*1.1573980186 + l0_1*2.9593661909 + l0_2*0.4512594325 + l0_3*-0.9357210858 + l0_4*-1.2445804495 + l0_5*4.2716471631 + l0_6*1.5167912375 + l0_7*1.5026853293 + l0_8*1.3574772038 + l0_9*-1.9754386842 + l0_10*6.727671436 + l0_11*8.0145772889 + l0_12*7.3108970663 + l0_13*-2.5005627841 + l0_14*8.9604502277)
l1_28 = PineActivationFunctionTanh(l0_0*6.3576350212 + l0_1*-2.9731672725 + l0_2*-2.7763558082 + l0_3*-3.7902984555 + l0_4*-1.0065574585 + l0_5*-0.7011836061 + l0_6*-1.0298068578 + l0_7*1.201007784 + l0_8*-0.7835862254 + l0_9*-3.9863597435 + l0_10*6.7851825502 + l0_11*1.1120256721 + l0_12*-2.263287351 + l0_13*1.8314374104 + l0_14*-2.279102097)
l1_29 = PineActivationFunctionTanh(l0_0*-7.8741911036 + l0_1*-5.3370618518 + l0_2*11.9153868964 + l0_3*-4.1237170553 + l0_4*2.9491152758 + l0_5*1.0317132502 + l0_6*2.2992199883 + l0_7*-2.0250502364 + l0_8*-11.0785995839 + l0_9*-6.3615588554 + l0_10*-1.1687644976 + l0_11*6.3323478015 + l0_12*6.0195076962 + l0_13*-2.8972208702 + l0_14*3.6107747183)
 
l2_0 = PineActivationFunctionTanh(l1_0*-0.590546797 + l1_1*0.6608304658 + l1_2*-0.3358268839 + l1_3*-0.748530283 + l1_4*-0.333460383 + l1_5*-0.3409307681 + l1_6*0.1916558198 + l1_7*-0.1200399453 + l1_8*-0.5166151854 + l1_9*-0.8537164676 +l1_10*-0.0214448647 + l1_11*-0.553290271 + l1_12*-1.2333302892 + l1_13*-0.8321813811 + l1_14*-0.4527761741 + l1_15*0.9012545631 + l1_16*0.415853215 + l1_17*0.1270548319 + l1_18*0.2000460279 + l1_19*-0.1741942671 + l1_20*0.419830522 + l1_21*-0.059839291 + l1_22*-0.3383001769 + l1_23*0.1617814073 + l1_24*0.3071848006 + l1_25*-0.3191182045 + l1_26*-0.4981831822 + l1_27*-1.467478375 + l1_28*-0.1676432563 + l1_29*1.2574849126)
l2_1 = PineActivationFunctionTanh(l1_0*-0.5514235841 + l1_1*0.4759190049 + l1_2*0.2103576983 + l1_3*-0.4754377924 + l1_4*-0.2362941295 + l1_5*0.1155082119 + l1_6*0.7424215794 + l1_7*-0.3674198672 + l1_8*0.8401574461 + l1_9*0.6096563193 + l1_10*0.7437935674 + l1_11*-0.4898638101 + l1_12*-0.4168668092 + l1_13*-0.0365111095 + l1_14*-0.342675224 + l1_15*0.1870268765 + l1_16*-0.5843050987 + l1_17*-0.4596547471 + l1_18*0.452188522 + l1_19*-0.6737126684 + l1_20*0.6876072741 + l1_21*-0.8067776704 + l1_22*0.7592979467 + l1_23*-0.0768239468 + l1_24*0.370536097 + l1_25*-0.4363884671 + l1_26*-0.419285676 + l1_27*0.4380251141 + l1_28*0.0822528948 + l1_29*-0.2333910809)
l2_2 = PineActivationFunctionTanh(l1_0*-0.3306539521 + l1_1*-0.9382247194 + l1_2*0.0746711276 + l1_3*-0.3383838985 + l1_4*-0.0683232217 + l1_5*-0.2112358049 + l1_6*-0.9079234054 + l1_7*0.4898595603 + l1_8*-0.2039825863 + l1_9*1.0870698641+ l1_10*-1.1752901237 + l1_11*1.1406403923 + l1_12*-0.6779626786 + l1_13*0.4281048906 + l1_14*-0.6327670055 + l1_15*-0.1477678844 + l1_16*0.2693637584 + l1_17*0.7250738509 + l1_18*0.7905904504 + l1_19*-1.6417250883 + l1_20*-0.2108095534 +l1_21*-0.2698557472 + l1_22*-0.2433656685 + l1_23*-0.6289943273 + l1_24*0.436428207 + l1_25*-0.8243825184 + l1_26*-0.8583496686 + l1_27*0.0983131026 + l1_28*-0.4107462518 + l1_29*0.5641683087)
l2_3 = PineActivationFunctionTanh(l1_0*1.7036869992 + l1_1*-0.6683507666 + l1_2*0.2589197112 + l1_3*0.032841148 + l1_4*-0.4454796342 + l1_5*-0.6196149423 + l1_6*-0.1073622976 + l1_7*-0.1926393101 + l1_8*1.5280232458 + l1_9*-0.6136527036 +l1_10*-1.2722934357 + l1_11*0.2888655811 + l1_12*-1.4338638512 + l1_13*-1.1903556863 + l1_14*-1.7659663905 + l1_15*0.3703086867 + l1_16*1.0409140889 + l1_17*0.0167382209 + l1_18*0.6045646461 + l1_19*4.2388788116 + l1_20*1.4399738234 + l1_21*0.3308571935 + l1_22*1.4501137667 + l1_23*0.0426123724 + l1_24*-0.708479795 + l1_25*-1.2100800732 + l1_26*-0.5536278651 + l1_27*1.3547250573 + l1_28*1.2906250286 + l1_29*0.0596007114)
l2_4 = PineActivationFunctionTanh(l1_0*-0.462165126 + l1_1*-1.0996742176 + l1_2*1.0928262999 + l1_3*1.806407067 + l1_4*0.9289147669 + l1_5*0.8069022793 + l1_6*0.2374237802 + l1_7*-2.7143979019 + l1_8*-2.7779203877 + l1_9*0.214383903 + l1_10*-1.3111536623 + l1_11*-2.3148813568 + l1_12*-2.4755355804 + l1_13*-0.6819733236 + l1_14*0.4425615226 + l1_15*-0.1298218043 + l1_16*-1.1744832824 + l1_17*-0.395194848 + l1_18*-0.2803397703 + l1_19*-0.4505071197 + l1_20*-0.8934956598 + l1_21*3.3232916348 + l1_22*-1.7359534851 + l1_23*3.8540421743 + l1_24*1.4424032523 + l1_25*0.2639823693 + l1_26*0.3597053634 + l1_27*-1.0470693728 + l1_28*1.4133480357 + l1_29*0.6248098695)
l2_5 = PineActivationFunctionTanh(l1_0*0.2215807411 + l1_1*-0.5628295071 + l1_2*-0.8795982905 + l1_3*0.9101585104 + l1_4*-1.0176831976 + l1_5*-0.0728884401 + l1_6*0.6676331658 + l1_7*-0.7342174108 + l1_8*9.4428E-4 + l1_9*0.6439774272 + l1_10*-0.0345236026 + l1_11*0.5830977027 + l1_12*-0.4058921837 + l1_13*-0.3991888077 + l1_14*-1.0090426973 + l1_15*-0.9324780698 + l1_16*-0.0888749165 + l1_17*0.2466351736 + l1_18*0.4993304601 + l1_19*-1.115408696 + l1_20*0.9914246705 + l1_21*0.9687743445 + l1_22*0.1117130875 + l1_23*0.7825109733 + l1_24*0.2217023612 + l1_25*0.3081256411 + l1_26*-0.1778007966 + l1_27*-0.3333287743 + l1_28*1.0156352461 + l1_29*-0.1456257813)
l2_6 = PineActivationFunctionTanh(l1_0*-0.5461783383 + l1_1*0.3246015999 + l1_2*0.1450605434 + l1_3*-1.3179944349 + l1_4*-1.5481775261 + l1_5*-0.679685633 + l1_6*-0.9462335139 + l1_7*-0.6462399371 + l1_8*0.0991658683 + l1_9*0.1612892194 +l1_10*-1.037660602 + l1_11*-0.1044778824 + l1_12*0.8309203243 + l1_13*0.7714766458 + l1_14*0.2566767663 + l1_15*0.8649416329 + l1_16*-0.5847461285 + l1_17*-0.6393969272 + l1_18*0.8014049359 + l1_19*0.2279568228 + l1_20*1.0565217821 + l1_21*0.134738029 + l1_22*0.3420395576 + l1_23*-0.2417397219 + l1_24*0.3083072038 + l1_25*0.6761739059 + l1_26*-0.4653817053 + l1_27*-1.0634057566 + l1_28*-0.5658892281 + l1_29*-0.6947283681)
l2_7 = PineActivationFunctionTanh(l1_0*-0.5450410944 + l1_1*0.3912849372 + l1_2*-0.4118641117 + l1_3*0.7124695074 + l1_4*-0.7510266122 + l1_5*1.4065673913 + l1_6*0.9870731545 + l1_7*-0.2609363107 + l1_8*-0.3583639958 + l1_9*0.5436375706 +l1_10*0.4572450099 + l1_11*-0.4651538878 + l1_12*-0.2180218212 + l1_13*0.5241262959 + l1_14*-0.8529323253 + l1_15*-0.4200378937 + l1_16*0.4997885721 + l1_17*-1.1121528189 + l1_18*0.5992411048 + l1_19*-1.0263270781 + l1_20*-1.725160642 + l1_21*-0.2653995722 + l1_22*0.6996703032 + l1_23*0.348549086 + l1_24*0.6522482482 + l1_25*-0.7931928436 + l1_26*-0.5107994359 + l1_27*0.0509642698 + l1_28*0.8711187423 + l1_29*0.8999449627)
l2_8 = PineActivationFunctionTanh(l1_0*-0.7111081522 + l1_1*0.4296245062 + l1_2*-2.0720732038 + l1_3*-0.4071818684 + l1_4*1.0632721681 + l1_5*0.8463224325 + l1_6*-0.6083948423 + l1_7*1.1827669608 + l1_8*-0.9572307844 + l1_9*-0.9080517673 + l1_10*-0.0479029057 + l1_11*-1.1452853213 + l1_12*0.2884352688 + l1_13*0.1767851586 + l1_14*-1.089314461 + l1_15*1.2991763966 + l1_16*1.6236630806 + l1_17*-0.7720263697 + l1_18*-0.5011541755 + l1_19*-2.3919413568 + l1_20*0.0084018338 + l1_21*0.9975216139 + l1_22*0.4193541029 + l1_23*1.4623834571 + l1_24*-0.6253069691 + l1_25*0.6119677341 + l1_26*0.5423948388 + l1_27*1.0022450377 + l1_28*-1.2392984069 + l1_29*1.5021529822)
 
l3_0 = PineActivationFunctionTanh(l2_0*0.3385061186 + l2_1*0.6218531956 + l2_2*-0.7790340983 + l2_3*0.1413078332 + l2_4*0.1857010624 + l2_5*-0.1769456351 + l2_6*-0.3242337911 + l2_7*-0.503944883 + l2_8*0.1540568869)
 
buying = l3_0 > threshold ? true : l3_0 < -threshold ? false : l3_0

//hline(0, title=""baseline"")
//bgcolor(buying ? color.green : color.red, transp=30)
//plot(l3_0, color.white, style=hline.style_solid, transp=70)
//plot(l3_0, title=""prediction"")

longCondition = buying 
shortCondition = buying != true

if (longCondition)
    strategy.entry(""long"", strategy.long)
    strategy.exit(""Exit Long"", ""long"", stop=strategy.position_avg_price * (1 - stopLossPercent/100), limit=strategy.position_avg_price * (1 + takeProfitPercent/100))

if (shortCondition)
    strategy.entry(""short"", strategy.short)
    strategy.exit(""Exit Short"", ""short"", stop=strategy.position_avg_price * (1 + stopLossPercent/100), limit=strategy.position_avg_price * (1 - takeProfitPercent/100))

alertcondition(longCondition , title='Buy Signal', message='Buy Signal ')
alertcondition(shortCondition , title='Sell Signal', message='Sell Signal ')
"
iNsrDJCN,Notepad to Json,PsychoStatic,Python,Monday 22nd of May 2023 05:25:52 PM CDT,"import os
import json

def export_to_json_from_files():
    directory = os.getcwd()
    json_data = {}

    # Check if the JSON file already exists
    if os.path.isfile(""album_data.json""):
        with open(""album_data.json"", ""r"") as json_file:
            json_data = json.load(json_file)

    # Get the highest index in the existing JSON data
    highest_index = max(map(int, json_data.keys())) if json_data else 0

    for filename in os.listdir(directory):
        if filename.endswith("".txt""):
            filepath = os.path.join(directory, filename)
            with open(filepath, ""r"") as file:
                lines = file.readlines()
                scores = []
                for line in lines:
                    track_info = line.split("":"")
                    if len(track_info) >= 2:
                        score = track_info[1].strip()
                        if score == ""NR"":
                            scores.append(""NR"")
                        else:
                            try:
                                scores.append(float(score))
                            except ValueError:
                                scores.append(""Invalid Score"")
                    else:
                        scores.append(""Missing Score"")

                average_score = float(lines[-1].split("":"")[1].strip())

                artist, album = os.path.splitext(filename)[0].split("" - "")
                data = {
                    ""Artist_Title"": artist,
                    ""Album_Title"": album,
                    ""Scores"": scores,
                    ""Average_Score"": average_score
                }

                # Assign the next available index
                highest_index += 1
                json_data[str(highest_index)] = data

    with open(""album_data.json"", ""w"") as json_file:
        json.dump(json_data, json_file, indent=4)

export_to_json_from_files()
"
q8WMy3WL,ApotheosisRaritySorter,Nessiesson,Lua,Monday 22nd of May 2023 05:05:31 PM CDT,"shell.run(""label set raritySorter"")

local reader = peripheral.find(""blockReader"")
local keepers = {epic=true, mythic=true}

function sort()
    turtle.select(1)
    turtle.suck()

    if turtle.getItemCount() > 0 then
        local status, rarity = pcall(getRarity)
        if status and keepers[rarity] then
            turtle.dropUp()
        else
            turtle.dropDown()
        end
    end
end

function getRarity()
    return reader.getBlockData()[""Items""][0][""tag""][""affix_data""][""rarity""]
end

while true do
    sort()
    sort()
    sort()
    sort()
    os.sleep(1)
end
"
Np2xEmCH,Untitled,Pinto085,C++,Monday 22nd of May 2023 04:41:50 PM CDT,"#include <bits/stdc++.h>

using namespace std;

int main(){
    int n, k;
    while(cin >> n >> k){
        if(n == 0 && k == 0) break;
        vector<int> v(n);
        for(int &x:v) cin >> x;
        multiset<int> cj;
        for(int i = 0; i < k; i++){
            cj.insert(v[i]);
        }
        cout << *cj.begin();
        for(int i = k; i < n; i++){
            cj.insert(v[i]);
            cj.erase(cj.find(v[i-k]));
            cout << "" "" << *cj.begin();
        }
        cout << ""\n"";
    }
    return 0;
}
"
4i21s34q,Untitled,Ginden,PostgreSQL,Monday 22nd of May 2023 04:40:38 PM CDT,"--
-- PostgreSQL database dump
--

-- Dumped from database version 14.5
-- Dumped by pg_dump version 14.5 (Ubuntu 14.5-1.pgdg20.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: file_fdw; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS file_fdw WITH SCHEMA public;


--
-- Name: EXTENSION file_fdw; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION file_fdw IS 'foreign-data wrapper for flat file access';


--
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA public;


--
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- Name: data; Type: SERVER; Schema: -; Owner: pit_2019
--

CREATE SERVER data FOREIGN DATA WRAPPER file_fdw;


ALTER SERVER data OWNER TO pit_2019;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: cities; Type: TABLE; Schema: public; Owner: pit_2019
--

CREATE TABLE public.cities (
    id integer NOT NULL,
    voivodeship_id integer,
    name text
);


ALTER TABLE public.cities OWNER TO pit_2019;

--
-- Name: file_test; Type: FOREIGN TABLE; Schema: public; Owner: pit_2019
--

CREATE FOREIGN TABLE public.file_test (
    year smallint,
    tax_office text,
    centile smallint,
    tax_payer_count integer,
    sum_tax_paid integer
)
SERVER data
OPTIONS (
    delimiter ';',
    filename '/data/pit_2019_podzial_na_us_i_centyle.csv',
    format 'csv'
);


ALTER FOREIGN TABLE public.file_test OWNER TO pit_2019;

--
-- Name: tax_offices; Type: TABLE; Schema: public; Owner: pit_2019
--

CREATE TABLE public.tax_offices (
    id integer NOT NULL,
    name text NOT NULL,
    voivodeship smallint,
    city smallint
);


ALTER TABLE public.tax_offices OWNER TO pit_2019;

--
-- Name: tax_offices_id_seq; Type: SEQUENCE; Schema: public; Owner: pit_2019
--

CREATE SEQUENCE public.tax_offices_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tax_offices_id_seq OWNER TO pit_2019;

--
-- Name: tax_offices_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pit_2019
--

ALTER SEQUENCE public.tax_offices_id_seq OWNED BY public.tax_offices.id;


--
-- Name: voivodeships; Type: TABLE; Schema: public; Owner: pit_2019
--

CREATE TABLE public.voivodeships (
    id integer NOT NULL,
    name text
);


ALTER TABLE public.voivodeships OWNER TO pit_2019;

--
-- Name: tax_offices id; Type: DEFAULT; Schema: public; Owner: pit_2019
--

ALTER TABLE ONLY public.tax_offices ALTER COLUMN id SET DEFAULT nextval('public.tax_offices_id_seq'::regclass);


--
-- Data for Name: cities; Type: TABLE DATA; Schema: public; Owner: pit_2019
--

COPY public.cities (id, voivodeship_id, name) FROM stdin;
1	2	Bolesławiec
2	2	Nowogrodziec
3	2	Bielawa
4	2	Dzierżoniów
5	2	Pieszyce
6	2	Piława Górna
7	2	Niemcza
8	2	Głogów
9	2	Góra
10	2	Wąsosz
11	2	Jawor
12	2	Bolków
13	2	Karpacz
14	2	Kowary
15	2	Piechowice
16	2	Szklarska Poręba
17	2	Kamienna Góra
18	2	Lubawka
19	2	Duszniki-Zdrój
20	2	Kłodzko
21	2	Kudowa-Zdrój
22	2	Nowa Ruda
23	2	Polanica-Zdrój
24	2	Bystrzyca Kłodzka
25	2	Lądek-Zdrój
26	2	Międzylesie
27	2	Radków
28	2	Stronie Śląskie
29	2	Szczytna
30	2	Chojnów
31	2	Prochowice
32	2	Lubań
33	2	Świeradów-Zdrój
34	2	Leśna
35	2	Olszyna
36	2	Lubin
37	2	Ścinawa
38	2	Gryfów Śląski
39	2	Lubomierz
40	2	Lwówek Śląski
41	2	Mirsk
42	2	Wleń
43	2	Milicz
44	2	Oleśnica
45	2	Bierutów
46	2	Międzybórz
47	2	Syców
48	2	Twardogóra
49	2	Oława
50	2	Jelcz-Laskowice
51	2	Chocianów
52	2	Polkowice
53	2	Przemków
54	2	Strzelin
55	2	Wiązów
56	2	Środa Śląska
57	2	Świdnica
58	2	Świebodzice
59	2	Jaworzyna Śląska
60	2	Strzegom
61	2	Żarów
62	2	Oborniki Śląskie
63	2	Prusice
64	2	Trzebnica
65	2	Żmigród
66	2	Boguszów-Gorce
67	2	Jedlina-Zdrój
68	2	Szczawno-Zdrój
69	2	Głuszyca
70	2	Mieroszów
71	2	Brzeg Dolny
72	2	Wołów
73	2	Kąty Wrocławskie
74	2	Sobótka
75	2	Siechnice
76	2	Bardo
77	2	Ząbkowice Śląskie
78	2	Ziębice
79	2	Złoty Stok
80	2	Zawidów
81	2	Zgorzelec
82	2	Bogatynia
83	2	Pieńsk
84	2	Węgliniec
85	2	Wojcieszów
86	2	Złotoryja
87	2	Świerzawa
88	2	Jelenia Góra
89	2	Legnica
90	2	Wrocław
91	2	Wałbrzych
92	4	Aleksandrów Kujawski
93	4	Ciechocinek
94	4	Nieszawa
95	4	Brodnica
96	4	Górzno
97	4	Jabłonowo Pomorskie
98	4	Koronowo
99	4	Solec Kujawski
100	4	Chełmno
101	4	Golub-Dobrzyń
102	4	Kowalewo Pomorskie
103	4	Łasin
104	4	Radzyń Chełmiński
105	4	Inowrocław
106	4	Gniewkowo
107	4	Janikowo
108	4	Kruszwica
109	4	Pakość
110	4	Lipno
111	4	Dobrzyń nad Wisłą
112	4	Skępe
113	4	Mogilno
114	4	Strzelno
115	4	Kcynia
116	4	Mrocza
117	4	Nakło nad Notecią
118	4	Szubin
119	4	Radziejów
120	4	Piotrków Kujawski
121	4	Rypin
122	4	Kamień Krajeński
123	4	Sępólno Krajeńskie
124	4	Więcbork
125	4	Nowe
126	4	Świecie
127	4	Chełmża
128	4	Tuchola
129	4	Wąbrzeźno
130	4	Kowal
131	4	Brześć Kujawski
132	4	Chodecz
133	4	Izbica Kujawska
134	4	Lubień Kujawski
135	4	Lubraniec
136	4	Barcin
137	4	Janowiec Wielkopolski
138	4	Łabiszyn
139	4	Żnin
140	4	Bydgoszcz
141	4	Grudziądz
142	4	Toruń
143	4	Włocławek
144	6	Międzyrzec Podlaski
145	6	Terespol
146	6	Biłgoraj
147	6	Frampol
148	6	Józefów
149	6	Tarnogród
150	6	Rejowiec Fabryczny
151	6	Siedliszcze
152	6	Hrubieszów
153	6	Janów Lubelski
154	6	Modliborzyce
155	6	Krasnystaw
156	6	Kraśnik
157	6	Annopol
158	6	Urzędów
159	6	Lubartów
160	6	Kock
161	6	Ostrów Lubelski
162	6	Bełżyce
163	6	Bychawa
164	6	Łęczna
165	6	Łuków
166	6	Stoczek Łukowski
167	6	Opole Lubelskie
168	6	Poniatowa
169	6	Parczew
170	6	Puławy
171	6	Kazimierz Dolny
172	6	Nałęczów
173	6	Radzyń Podlaski
174	6	Dęblin
175	6	Ryki
176	6	Świdnik
177	6	Piaski
178	6	Tomaszów Lubelski
179	6	Lubycza Królewska
180	6	Łaszczów
181	6	Tyszowce
182	6	Włodawa
183	6	Krasnobród
184	6	Szczebrzeszyn
185	6	Zwierzyniec
186	6	Biała Podlaska
187	6	Chełm
188	6	Lublin
189	6	Zamość
190	8	Kostrzyn nad Odrą
191	8	Witnica
192	8	Gubin
193	8	Krosno Odrzańskie
194	8	Międzyrzecz
195	8	Skwierzyna
196	8	Trzciel
197	8	Nowa Sól
198	8	Bytom Odrzański
199	8	Kożuchów
200	8	Nowe Miasteczko
201	8	Cybinka
202	8	Ośno Lubuskie
203	8	Rzepin
204	8	Słubice
205	8	Dobiegniew
206	8	Drezdenko
207	8	Strzelce Krajeńskie
208	8	Lubniewice
209	8	Sulęcin
210	8	Torzym
211	8	Świebodzin
212	8	Zbąszynek
213	8	Babimost
214	8	Czerwieńsk
215	8	Kargowa
216	8	Nowogród Bobrzański
217	8	Sulechów
218	8	Gozdnica
219	8	Żagań
220	8	Iłowa
221	8	Małomice
222	8	Szprotawa
223	8	Łęknica
224	8	Żary
225	8	Jasień
226	8	Lubsko
227	8	Sława
228	8	Szlichtyngowa
229	8	Wschowa
230	8	Gorzów Wielkopolski
231	8	Zielona Góra
232	10	Bełchatów
233	10	Zelów
234	10	Kutno
235	10	Krośniewice
236	10	Żychlin
237	10	Łask
238	10	Łęczyca
239	10	Łowicz
240	10	Koluszki
241	10	Rzgów
242	10	Tuszyn
243	10	Drzewica
244	10	Opoczno
245	10	Konstantynów Łódzki
246	10	Pabianice
247	10	Działoszyn
248	10	Pajęczno
249	10	Sulejów
250	10	Wolbórz
251	10	Poddębice
252	10	Uniejów
253	10	Radomsko
254	10	Kamieńsk
255	10	Przedbórz
256	10	Rawa Mazowiecka
257	10	Biała Rawska
258	10	Sieradz
259	10	Błaszki
260	10	Warta
261	10	Złoczew
262	10	Tomaszów Mazowiecki
263	10	Wieluń
264	10	Wieruszów
265	10	Zduńska Wola
266	10	Szadek
267	10	Głowno
268	10	Ozorków
269	10	Zgierz
270	10	Aleksandrów Łódzki
271	10	Stryków
272	10	Brzeziny
273	10	Łódź
274	10	Piotrków Trybunalski
275	10	Skierniewice
276	12	Bochnia
277	12	Nowy Wiśnicz
278	12	Brzesko
279	12	Czchów
280	12	Alwernia
281	12	Chrzanów
282	12	Libiąż
283	12	Trzebinia
284	12	Dąbrowa Tarnowska
285	12	Szczucin
286	12	Gorlice
287	12	Biecz
288	12	Bobowa
289	12	Krzeszowice
290	12	Skała
291	12	Skawina
292	12	Słomniki
293	12	Świątniki Górne
294	12	Limanowa
295	12	Mszana Dolna
296	12	Miechów
297	12	Dobczyce
298	12	Myślenice
299	12	Sułkowice
300	12	Grybów
301	12	Krynica-Zdrój
302	12	Muszyna
303	12	Piwniczna-Zdrój
304	12	Stary Sącz
305	12	Nowy Targ
306	12	Szczawnica
307	12	Rabka-Zdrój
308	12	Bukowno
309	12	Olkusz
310	12	Wolbrom
311	12	Oświęcim
312	12	Brzeszcze
313	12	Chełmek
314	12	Kęty
315	12	Zator
316	12	Nowe Brzesko
317	12	Proszowice
318	12	Jordanów
319	12	Sucha Beskidzka
320	12	Maków Podhalański
321	12	Ciężkowice
322	12	Radłów
323	12	Ryglice
324	12	Tuchów
325	12	Wojnicz
326	12	Zakliczyn
327	12	Żabno
328	12	Zakopane
329	12	Andrychów
330	12	Kalwaria Zebrzydowska
331	12	Wadowice
332	12	Niepołomice
333	12	Wieliczka
334	12	Kraków
335	12	Nowy Sącz
336	12	Tarnów
337	14	Białobrzegi
338	14	Wyśmierzyce
339	14	Ciechanów
340	14	Glinojeck
341	14	Garwolin
342	14	Łaskarzew
343	14	Pilawa
344	14	Żelechów
345	14	Gostynin
346	14	Milanówek
347	14	Podkowa Leśna
348	14	Grodzisk Mazowiecki
349	14	Grójec
350	14	Mogielnica
351	14	Nowe Miasto nad Pilicą
352	14	Warka
353	14	Kozienice
354	14	Legionowo
355	14	Serock
356	14	Lipsko
357	14	Łosice
358	14	Maków Mazowiecki
359	14	Różan
360	14	Mińsk Mazowiecki
361	14	Halinów
362	14	Kałuszyn
363	14	Mrozy
364	14	Sulejówek
365	14	Mława
366	14	Nowy Dwór Mazowiecki
367	14	Nasielsk
368	14	Zakroczym
369	14	Myszyniec
370	14	Ostrów Mazowiecka
371	14	Brok
372	14	Józefów
373	14	Otwock
374	14	Karczew
375	14	Góra Kalwaria
376	14	Konstancin-Jeziorna
377	14	Piaseczno
378	14	Tarczyn
379	14	Drobin
380	14	Gąbin
381	14	Wyszogród
382	14	Płońsk
383	14	Raciąż
384	14	Piastów
385	14	Pruszków
386	14	Brwinów
387	14	Przasnysz
388	14	Chorzele
389	14	Przysucha
390	14	Pułtusk
391	14	Pionki
392	14	Iłża
393	14	Skaryszew
394	14	Mordy
395	14	Sierpc
396	14	Sochaczew
397	14	Sokołów Podlaski
398	14	Kosów Lacki
399	14	Szydłowiec
400	14	Błonie
401	14	Łomianki
402	14	Ożarów Mazowiecki
403	14	Węgrów
404	14	Łochów
405	14	Kobyłka
406	14	Marki
407	14	Ząbki
408	14	Zielonka
409	14	Radzymin
410	14	Tłuszcz
411	14	Wołomin
412	14	Wyszków
413	14	Zwoleń
414	14	Bieżuń
415	14	Żuromin
416	14	Żyrardów
417	14	Mszczonów
418	14	Ostrołęka
419	14	Płock
420	14	Radom
421	14	Siedlce
422	16	Brzeg
423	16	Grodków
424	16	Lewin Brzeski
425	16	Baborów
426	16	Głubczyce
427	16	Kietrz
428	16	Kędzierzyn-Koźle
429	16	Byczyna
430	16	Kluczbork
431	16	Wołczyn
432	16	Gogolin
433	16	Krapkowice
434	16	Zdzieszowice
435	16	Namysłów
436	16	Głuchołazy
437	16	Korfantów
438	16	Nysa
439	16	Otmuchów
440	16	Paczków
441	16	Dobrodzień
442	16	Gorzów Śląski
443	16	Olesno
444	16	Praszka
445	16	Niemodlin
446	16	Ozimek
447	16	Prószków
448	16	Biała
449	16	Głogówek
450	16	Prudnik
451	16	Kolonowskie
452	16	Leśnica
453	16	Strzelce Opolskie
454	16	Ujazd
455	16	Zawadzkie
456	16	Opole
457	18	Ustrzyki Dolne
458	18	Brzozów
459	18	Dębica
460	18	Brzostek
461	18	Pilzno
462	18	Jarosław
463	18	Radymno
464	18	Pruchnik
465	18	Jasło
466	18	Kołaczyce
467	18	Kolbuszowa
468	18	Dukla
469	18	Iwonicz-Zdrój
470	18	Jedlicze
471	18	Rymanów
472	18	Leżajsk
473	18	Nowa Sarzyna
474	18	Lubaczów
475	18	Cieszanów
476	18	Narol
477	18	Oleszyce
478	18	Łańcut
479	18	Mielec
480	18	Przecław
481	18	Radomyśl Wielki
482	18	Nisko
483	18	Rudnik nad Sanem
484	18	Ulanów
485	18	Przeworsk
486	18	Kańczuga
487	18	Sieniawa
488	18	Ropczyce
489	18	Sędziszów Małopolski
490	18	Dynów
491	18	Błażowa
492	18	Boguchwała
493	18	Głogów Małopolski
494	18	Sokołów Małopolski
495	18	Tyczyn
496	18	Sanok
497	18	Zagórz
498	18	Stalowa Wola
499	18	Zaklików
500	18	Strzyżów
501	18	Baranów Sandomierski
502	18	Nowa Dęba
503	18	Lesko
504	18	Krosno
505	18	Przemyśl
506	18	Rzeszów
507	18	Tarnobrzeg
508	20	Augustów
509	20	Lipsk
510	20	Choroszcz
511	20	Czarna Białostocka
512	20	Łapy
513	20	Michałowo
514	20	Supraśl
515	20	Suraż
516	20	Tykocin
517	20	Wasilków
518	20	Zabłudów
519	20	Bielsk Podlaski
520	20	Brańsk
521	20	Grajewo
522	20	Rajgród
523	20	Szczuczyn
524	20	Hajnówka
525	20	Kleszczele
526	20	Kolno
527	20	Stawiski
528	20	Jedwabne
529	20	Nowogród
530	20	Goniądz
531	20	Knyszyn
532	20	Mońki
533	20	Sejny
534	20	Siemiatycze
535	20	Drohiczyn
536	20	Dąbrowa Białostocka
537	20	Krynki
538	20	Sokółka
539	20	Suchowola
540	20	Wysokie Mazowieckie
541	20	Ciechanowiec
542	20	Czyżew
543	20	Szepietowo
544	20	Zambrów
545	20	Białystok
546	20	Łomża
547	20	Suwałki
548	22	Bytów
549	22	Miastko
550	22	Chojnice
551	22	Brusy
552	22	Czersk
553	22	Człuchów
554	22	Czarne
555	22	Debrzno
556	22	Pruszcz Gdański
557	22	Kartuzy
558	22	Żukowo
559	22	Kościerzyna
560	22	Kwidzyn
561	22	Prabuty
562	22	Lębork
563	22	Łeba
564	22	Malbork
565	22	Nowy Staw
566	22	Krynica Morska
567	22	Nowy Dwór Gdański
568	22	Hel
569	22	Jastarnia
570	22	Puck
571	22	Władysławowo
572	22	Ustka
573	22	Kępice
574	22	Czarna Woda
575	22	Skórcz
576	22	Starogard Gdański
577	22	Skarszewy
578	22	Tczew
579	22	Gniew
580	22	Pelplin
581	22	Reda
582	22	Rumia
583	22	Wejherowo
584	22	Dzierzgoń
585	22	Sztum
586	22	Gdańsk
587	22	Gdynia
588	22	Słupsk
589	22	Sopot
590	24	Będzin
591	24	Czeladź
592	24	Wojkowice
593	24	Siewierz
594	24	Sławków
595	24	Szczyrk
596	24	Czechowice-Dziedzice
597	24	Wilamowice
598	24	Cieszyn
599	24	Ustroń
600	24	Wisła
601	24	Skoczów
602	24	Strumień
603	24	Blachownia
604	24	Koniecpol
605	24	Knurów
606	24	Pyskowice
607	24	Sośnicowice
608	24	Toszek
609	24	Kłobuck
610	24	Krzepice
611	24	Lubliniec
612	24	Woźniki
613	24	Łaziska Górne
614	24	Mikołów
615	24	Orzesze
616	24	Myszków
617	24	Koziegłowy
618	24	Żarki
619	24	Pszczyna
620	24	Racibórz
621	24	Krzanowice
622	24	Kuźnia Raciborska
623	24	Czerwionka-Leszczyny
624	24	Kalety
625	24	Miasteczko Śląskie
626	24	Radzionków
627	24	Tarnowskie Góry
628	24	Bieruń
629	24	Imielin
630	24	Lędziny
631	24	Pszów
632	24	Radlin
633	24	Rydułtowy
634	24	Wodzisław Śląski
635	24	Poręba
636	24	Zawiercie
637	24	Łazy
638	24	Ogrodzieniec
639	24	Pilica
640	24	Szczekociny
641	24	Żywiec
642	24	Bielsko-Biała
643	24	Bytom
644	24	Chorzów
645	24	Częstochowa
646	24	Dąbrowa Górnicza
647	24	Gliwice
648	24	Jastrzębie-Zdrój
649	24	Jaworzno
650	24	Katowice
651	24	Mysłowice
652	24	Piekary Śląskie
653	24	Ruda Śląska
654	24	Rybnik
655	24	Siemianowice Śląskie
656	24	Sosnowiec
657	24	Świętochłowice
658	24	Tychy
659	24	Zabrze
660	24	Żory
661	26	Busko-Zdrój
662	26	Stopnica
663	26	Jędrzejów
664	26	Małogoszcz
665	26	Sędziszów
666	26	Kazimierza Wielka
667	26	Skalbmierz
668	26	Bodzentyn
669	26	Chęciny
670	26	Chmielnik
671	26	Daleszyce
672	26	Końskie
673	26	Stąporków
674	26	Opatów
675	26	Ożarów
676	26	Ostrowiec Świętokrzyski
677	26	Ćmielów
678	26	Kunów
679	26	Działoszyce
680	26	Pińczów
681	26	Sandomierz
682	26	Koprzywnica
683	26	Zawichost
684	26	Skarżysko-Kamienna
685	26	Suchedniów
686	26	Starachowice
687	26	Wąchock
688	26	Osiek
689	26	Połaniec
690	26	Staszów
691	26	Włoszczowa
692	26	Kielce
693	28	Bartoszyce
694	28	Górowo Iławeckie
695	28	Bisztynek
696	28	Sępopol
697	28	Braniewo
698	28	Frombork
699	28	Pieniężno
700	28	Działdowo
701	28	Lidzbark
702	28	Młynary
703	28	Pasłęk
704	28	Tolkmicko
705	28	Ełk
706	28	Giżycko
707	28	Ryn
708	28	Iława
709	28	Lubawa
710	28	Kisielice
711	28	Susz
712	28	Zalewo
713	28	Kętrzyn
714	28	Korsze
715	28	Reszel
716	28	Lidzbark Warmiński
717	28	Orneta
718	28	Mrągowo
719	28	Mikołajki
720	28	Nidzica
721	28	Nowe Miasto Lubawskie
722	28	Olecko
723	28	Barczewo
724	28	Biskupiec
725	28	Dobre Miasto
726	28	Jeziorany
727	28	Olsztynek
728	28	Ostróda
729	28	Miłakowo
730	28	Miłomłyn
731	28	Morąg
732	28	Biała Piska
733	28	Orzysz
734	28	Pisz
735	28	Ruciane-Nida
736	28	Szczytno
737	28	Pasym
738	28	Gołdap
739	28	Węgorzewo
740	28	Elbląg
741	28	Olsztyn
742	30	Chodzież
743	30	Margonin
744	30	Szamocin
745	30	Czarnków
746	30	Krzyż Wielkopolski
747	30	Trzcianka
748	30	Wieleń
749	30	Gniezno
750	30	Czerniejewo
751	30	Kłecko
752	30	Trzemeszno
753	30	Witkowo
754	30	Borek Wielkopolski
755	30	Gostyń
756	30	Krobia
757	30	Pogorzela
758	30	Poniec
759	30	Grodzisk Wielkopolski
760	30	Rakoniewice
761	30	Wielichowo
762	30	Jaraczewo
763	30	Jarocin
764	30	Żerków
765	30	Stawiszyn
766	30	Kępno
767	30	Koło
768	30	Dąbie
769	30	Kłodawa
770	30	Przedecz
771	30	Golina
772	30	Kleczew
773	30	Rychwał
774	30	Sompolno
775	30	Ślesin
776	30	Kościan
777	30	Czempiń
778	30	Krzywiń
779	30	Śmigiel
780	30	Sulmierzyce
781	30	Kobylin
782	30	Koźmin Wielkopolski
783	30	Krotoszyn
784	30	Zduny
785	30	Osieczna
786	30	Rydzyna
787	30	Międzychód
788	30	Sieraków
789	30	Lwówek
790	30	Nowy Tomyśl
791	30	Opalenica
792	30	Zbąszyń
793	30	Oborniki
794	30	Rogoźno
795	30	Ostrów Wielkopolski
796	30	Nowe Skalmierzyce
797	30	Odolanów
798	30	Raszków
799	30	Grabów nad Prosną
800	30	Mikstat
801	30	Ostrzeszów
802	30	Piła
803	30	Łobżenica
804	30	Ujście
805	30	Wyrzysk
806	30	Wysoka
807	30	Chocz
808	30	Dobrzyca
809	30	Pleszew
810	30	Luboń
811	30	Puszczykowo
812	30	Buk
813	30	Kostrzyn
814	30	Kórnik
815	30	Mosina
816	30	Murowana Goślina
817	30	Pobiedziska
818	30	Stęszew
819	30	Swarzędz
820	30	Bojanowo
821	30	Jutrosin
822	30	Miejska Górka
823	30	Rawicz
824	30	Słupca
825	30	Zagórów
826	30	Obrzycko
827	30	Ostroróg
828	30	Pniewy
829	30	Szamotuły
830	30	Wronki
831	30	Środa Wielkopolska
832	30	Dolsk
833	30	Książ Wielkopolski
834	30	Śrem
835	30	Turek
836	30	Dobra
837	30	Tuliszków
838	30	Wągrowiec
839	30	Gołańcz
840	30	Skoki
841	30	Wolsztyn
842	30	Miłosław
843	30	Nekla
844	30	Pyzdry
845	30	Września
846	30	Złotów
847	30	Jastrowie
848	30	Krajenka
849	30	Okonek
850	30	Kalisz
851	30	Konin
852	30	Leszno
853	30	Poznań
854	32	Białogard
855	32	Karlino
856	32	Tychowo
857	32	Choszczno
858	32	Drawno
859	32	Pełczyce
860	32	Recz
861	32	Czaplinek
862	32	Drawsko Pomorskie
863	32	Kalisz Pomorski
864	32	Złocieniec
865	32	Goleniów
866	32	Maszewo
867	32	Nowogard
868	32	Stepnica
869	32	Gryfice
870	32	Płoty
871	32	Trzebiatów
872	32	Cedynia
873	32	Chojna
874	32	Gryfino
875	32	Mieszkowice
876	32	Moryń
877	32	Trzcińsko-Zdrój
878	32	Dziwnów
879	32	Golczewo
880	32	Kamień Pomorski
881	32	Międzyzdroje
882	32	Wolin
883	32	Kołobrzeg
884	32	Gościno
885	32	Bobolice
886	32	Polanów
887	32	Sianów
888	32	Barlinek
889	32	Dębno
890	32	Myślibórz
891	32	Nowe Warpno
892	32	Police
893	32	Lipiany
894	32	Pyrzyce
895	32	Darłowo
896	32	Sławno
897	32	Stargard
898	32	Chociwel
899	32	Dobrzany
900	32	Ińsko
901	32	Suchań
902	32	Szczecinek
903	32	Barwice
904	32	Biały Bór
905	32	Borne Sulinowo
906	32	Świdwin
907	32	Połczyn-Zdrój
908	32	Wałcz
909	32	Człopa
910	32	Mirosławiec
911	32	Tuczno
912	32	Dobra
913	32	Łobez
914	32	Resko
915	32	Węgorzyno
916	32	Koszalin
917	32	Szczecin
918	32	Świnoujście
919	14	Warszawa
\.


--
-- Data for Name: tax_offices; Type: TABLE DATA; Schema: public; Owner: pit_2019
--

COPY public.tax_offices (id, name, voivodeship, city) FROM stdin;
70	US WARSZAWA-PRAGA	14	919
89	US WARSZAWA-URSYNÓW	14	919
140	US WARSZAWA-MOKOTÓW	14	919
153	US WARSZAWA-BEMOWO	14	919
215	US WARSZAWA-WOLA	14	919
162	US W KROŚNIE	18	504
219	US W ŻARACH	8	224
187	US W LUBLIŃCU	24	611
244	PIERWSZY US WARSZAWA-ŚRÓDMIEŚCIE	14	919
275	US WARSZAWA-WAWER	14	919
311	US W OLEŚNIE	16	443
302	US W DRAWSKU POMORSKIM	32	862
239	US W JAŚLE	18	465
224	US W NOWEJ RUDZIE	2	22
260	US W PILE	30	802
221	US W WOŁOMINIE	14	411
210	US W PŁOŃSKU	14	382
202	US W MILICZU	2	43
196	US W PRZASNYSZU	14	387
184	US W MAKOWIE MAZOWIECKIM	14	358
205	US W ŁAŃCUCIE	18	478
198	US W WĄBRZEŹNIE	4	129
208	US W PIASECZNIE	14	377
201	US W WOŁOWIE	2	72
223	US WROCŁAW-FABRYCZNA	2	90
204	US W ŚWINOUJŚCIU	32	918
211	US WE WŁODAWIE	6	182
225	US W KOŃSKICH	26	672
192	US W GORLICACH	12	286
212	US W BRZEZINACH	10	272
183	US W PŁOCKU	14	419
19	US WARSZAWA-BIELANY	14	919
21	US WARSZAWA-TARGÓWEK	14	919
35	TRZECI US WARSZAWA-ŚRÓDMIEŚCIE	14	919
12	US W MYSZKOWIE	24	616
4	US W KOLE	30	767
20	US W ŚRODZIE WIELKOPOLSKIEJ	30	831
186	US W ŻYWCU	24	641
200	PIERWSZY US W CZĘSTOCHOWIE	24	645
209	DRUGI US W KIELCACH	26	692
222	PIERWSZY US W LUBLINIE	6	188
191	US W KLUCZBORKU	16	430
206	PIERWSZY US W KATOWICACH	24	650
218	US W WADOWICACH	12	331
248	US W INOWROCŁAWIU	4	105
257	US W BRODNICY	4	95
245	US W LWÓWKU ŚLĄSKIM	2	40
247	US W BARTOSZYCACH	28	693
262	US W ZDUŃSKIEJ WOLI	10	265
258	US W SUCHEJ BESKIDZKIEJ	12	319
259	US W KOLNIE	20	526
263	US W PLESZEWIE	30	809
273	US W SZYDŁOWCU	14	399
261	US W KWIDZYNIE	22	560
269	US W PSZCZYNIE	24	619
254	US W OŚWIĘCIMIU	12	311
251	US W ALEKSANDROWIE KUJAWSKIM	4	92
249	US W ŻYRARDOWIE	14	416
267	PIERWSZY US W BYDGOSZCZY	4	140
271	US W ŁĘCZYCY	10	238
256	PIERWSZY US W RZESZOWIE	18	506
246	US W DĘBICY	18	459
264	US POZNAŃ-GRUNWALD	30	853
265	US W SZCZYTNIE	28	736
350	US W CZARNKOWIE	30	745
318	US W STAROGARDZIE GDAŃSKIM	22	576
328	US W ŻORACH	24	660
326	US WROCŁAW-PSIE POLE	2	90
354	US W RYPINIE	4	121
345	US W NIDZICY	28	720
339	US W ZGIERZU	10	269
332	US W ŻAGANIU	8	219
323	US POZNAŃ-WINOGRADY	30	853
353	US W ŚWIECIU	4	126
333	US W SANOKU	18	496
330	US W KRASNYMSTAWIE	6	155
355	PIERWSZY US W RADOMIU	14	420
322	US W LUBARTOWIE	6	159
348	US W CZECHOWICACH-DZIEDZICACH	24	596
356	US W NOWYM SĄCZU	12	335
336	US W GRAJEWIE	20	521
344	US W ZWOLENIU	14	413
352	US W TOMASZOWIE MAZOWIECKIM	10	262
329	US W JAWORZNIE	24	649
349	US W GORZOWIE WIELKOPOLSKIM	8	230
335	US W ZŁOTOWIE	30	846
337	US W LESKU	18	503
320	US W JAWORZE	2	11
351	PIERWSZY US W KIELCACH	26	692
346	US W SIERADZU	10	258
341	US W OPATOWIE	26	674
338	DRUGI US W RZESZOWIE	18	506
343	US W KĘTRZYNIE	28	713
327	US W PRZEWORSKU	18	485
342	US W OBORNIKACH	30	793
27	US W BYTOWIE	22	548
43	US W MIĘDZYRZECZU	8	194
54	US W AUGUSTOWIE	20	508
7	US W STRZELCACH OPOLSKICH	16	453
33	US W OLECKU	28	722
32	US W GOSTYNIU	30	755
340	US W KŁODZKU	2	20
319	DRUGI US W CZĘSTOCHOWIE	24	645
100	US W GŁUBCZYCACH	16	426
105	US W SUWAŁKACH	20	547
99	DRUGI US W BIAŁYMSTOKU	20	545
347	DRUGI US W LUBLINIE	6	188
331	US W OTWOCKU	14	373
360	US W BIAŁOGARDZIE	32	854
364	US W BYSTRZYCY KŁODZKIEJ	2	24
365	PIERWSZY US W GLIWICACH	24	647
377	US W KOZIENICACH	14	353
357	US KRAKÓW-KROWODRZA	12	334
379	US W USTRZYKACH DOLNYCH	18	457
371	US ŁÓDŹ-ŚRÓDMIEŚCIE	10	273
359	US W WYSZKOWIE	14	412
373	US W PUŁAWACH	6	170
374	US W BRZESKU	12	278
367	US W NOWYM MIEŚCIE LUBAWSKIM	28	721
366	US W RADZIEJOWIE	4	119
375	US W SIERPCU	14	395
362	US W PODDĘBICACH	10	251
361	PIERWSZY US ŁÓDŹ-GÓRNA	10	273
363	US W EŁKU	28	705
378	US W GÓRZE	2	9
358	US W NOWYM TOMYŚLU	30	790
368	US W LESZNIE	30	852
376	US W WIELUNIU	10	263
370	DRUGI US W GDAŃSKU	22	586
372	US W NYSIE	16	438
325	DRUGI US W GLIWICACH	24	647
334	DRUGI US W SZCZECINIE	32	917
369	US W DĄBROWIE GÓRNICZEJ	24	646
106	US W DZIAŁDOWIE	28	700
91	US W TARNOBRZEGU	18	507
114	US W MYŚLIBORZU	32	890
113	US WROCŁAW-KRZYKI	2	90
92	DRUGI US W KOSZALINIE	32	916
112	US W SŁUBICACH	8	204
110	DRUGI US W KALISZU	30	850
107	US W BYTOMIU	24	643
111	US W SOSNOWCU	24	656
58	US W SOKOŁOWIE PODLASKIM	14	397
95	US W STARGARDZIE	32	897
109	US W ŻUROMINIE	14	415
108	US W JASTRZĘBIU-ZDROJU	24	648
97	US W MALBORKU	22	564
94	US W HAJNÓWCE	20	524
93	US W NOWYM TARGU	12	305
63	US W MIKOŁOWIE	24	614
98	US W NOWYM DWORZE MAZOWIECKIM	14	366
127	US W OPOCZNIE	10	244
121	US W GOLUBIU-DOBRZYNIU	4	101
142	US W MIŃSKU MAZOWIECKIM	14	360
155	US W MOŃKACH	20	532
141	US WE WŁOSZCZOWIE	26	691
120	US W STARACHOWICACH	26	686
143	PIERWSZY US W BIAŁYMSTOKU	20	545
144	US W KRAPKOWICACH	16	433
145	US W CHODZIEŻY	30	742
169	US W CHOSZCZNIE	32	857
194	DRUGI US W GDYNI	22	587
220	US W WOLSZTYNIE	30	841
226	US W KARTUZACH	22	557
185	US W LEGIONOWIE	14	354
207	US W ZAMOŚCIU	6	189
190	US W SIEMIATYCZACH	20	534
188	US W KĘDZIERZYNIE-KOŹLU	16	428
189	US W WODZISŁAWIU ŚLĄSKIM	24	634
199	US W SZCZECINKU	32	902
227	DRUGI US W RADOMIU	14	420
216	DRUGI US W ZIELONEJ GÓRZE	8	231
197	US W NOWEJ SOLI	8	197
214	US W WYSOKIEM MAZOWIECKIEM	20	540
213	US W LUBINIE	2	36
195	US W JELENIEJ GÓRZE	2	88
228	US W OSTROWCU ŚWIĘTOKRZYSKIM	26	676
193	US W KŁOBUCKU	24	609
203	US W GŁOGOWIE	2	8
229	US W ZAMBROWIE	20	544
217	US W GIŻYCKU	28	706
182	US W SIEDLCACH	14	421
230	US W RAWICZU	30	823
288	US W SŁUPCY	30	824
285	US W CHORZOWIE	24	644
238	US W WEJHEROWIE	22	583
287	US WROCŁAW-ŚRÓDMIEŚCIE	2	90
286	US W JAROSŁAWIU	18	462
284	TRZECI US W BYDGOSZCZY	4	140
279	US W PROSZOWICACH	12	317
268	US W ZAWIERCIU	24	636
274	US W PAJĘCZNIE	10	248
270	US W SULĘCINIE	8	209
266	US W WIERUSZOWIE	10	264
235	US W PRZYSUSZE	14	389
242	US W ZGORZELCU	2	81
255	US W RYKACH	6	175
276	US W DĄBROWIE TARNOWSKIEJ	12	284
277	US W ZŁOTORYI	2	86
236	US W SZAMOTUŁACH	30	829
243	US W POLKOWICACH	2	52
231	US W KUTNIE	10	234
280	US W OLKUSZU	12	309
250	US W BIAŁOBRZEGACH	14	337
233	TRZECI US W SZCZECINIE	32	917
272	US W GNIEŹNIE	30	749
282	US W BOCHNI	12	276
232	US W BIŁGORAJU	6	146
234	US W KAZIMIERZY WIELKIEJ	26	666
253	US W ŻNINIE	4	139
281	DRUGI US W BIELSKU-BIAŁEJ	24	642
252	US W GRÓJCU	14	349
241	US W WAŁCZU	32	908
237	PIERWSZY US WE WROCŁAWIU	2	90
278	PIERWSZY US W KALISZU	30	850
240	US POZNAŃ-NOWE MIASTO	30	853
283	PIERWSZY US W BIELSKU-BIAŁEJ	24	642
321	US W GRYFICACH	32	869
298	US W RACIBORZU	24	620
294	US W ŁOMŻY	20	546
307	US ŁÓDŹ-WIDZEW	10	273
289	US W SANDOMIERZU	26	681
292	US W DREZDENKU	8	206
315	US W MOGILNIE	4	113
313	DRUGI US ŁÓDŹ-BAŁUTY	10	273
316	US W ŚREMIE	30	834
308	US W ELBLĄGU	28	740
324	US W TUCHOLI	4	128
317	US W CIECHANOWIE	14	339
290	US W ŚWIDNICY	2	57
305	US W MYŚLENICACH	12	298
312	US W ŚWIEBODZINIE	8	211
310	US W MŁAWIE	14	365
293	US W TCZEWIE	22	578
306	US W GRODZISKU WIELKOPOLSKIM	30	759
309	US W PRZEMYŚLU	18	505
301	US W LUBANIU	2	32
303	US W PRUDNIKU	16	450
296	US W TOMASZOWIE LUBELSKIM	6	178
291	US W KOŚCIANIE	30	776
299	US W PABIANICACH	10	246
295	DRUGI US W TARNOWIE	12	336
297	US W LIPNIE	4	110
314	US W ŁĘCZNEJ	6	164
304	US W BRZEGU	16	422
300	US W JĘDRZEJOWIE	26	663
36	US W PIŃCZOWIE	26	680
52	US W GRUDZIĄDZU	4	141
48	US W HRUBIESZOWIE	6	152
64	US W PIOTRKOWIE TRYBUNALSKIM	10	274
3	US W GOLENIOWIE	32	865
102	US W BĘDZINIE	24	590
65	US W STASZOWIE	26	690
62	US W RADOMSKU	10	253
38	US W GOSTYNINIE	14	345
28	US W OSTROWIE WIELKOPOLSKIM	30	795
67	US W STALOWEJ WOLI	18	498
26	US W RUDZIE ŚLĄSKIEJ	24	653
31	US KRAKÓW-ŚRÓDMIEŚCIE	12	334
84	US W BRZOZOWIE	18	458
9	US W GRYFINIE	32	874
10	PIERWSZY US W SZCZECINIE	32	917
44	US W CHRZANOWIE	12	281
45	US W SŁUPSKU	22	588
17	US W ŁOSICACH	14	357
24	US W OSTROWI MAZOWIECKIEJ	14	370
49	US W SIEMIANOWICACH ŚLĄSKICH	24	655
37	US W BRANIEWIE	28	697
40	US W LĘBORKU	22	562
68	US W JANOWIE LUBELSKIM	6	153
82	US W SKIERNIEWICACH	10	275
59	US W GARWOLINIE	14	341
25	US W OPOLU LUBELSKIM	6	167
6	US W RADZYNIU PODLASKIM	6	173
69	PIERWSZY US W GDYNI	22	587
88	DRUGI US W OPOLU	16	456
46	US W WĘGROWIE	14	403
104	US W RYBNIKU	24	654
72	US W KĘPNIE	30	766
11	US W GRODZISKU MAZOWIECKIM	14	348
55	US WE WSCHOWIE	8	229
83	US W TARNOWSKICH GÓRACH	24	627
78	US W MYSŁOWICACH	24	651
41	US W BIAŁEJ PODLASKIEJ	6	186
42	PIERWSZY US W GDAŃSKU	22	586
51	US W OSTRZESZOWIE	30	801
80	US W KRAŚNIKU	6	156
22	US W JAROCINIE	30	763
96	US WROCŁAW-STARE MIASTO	2	90
13	US W KROŚNIE ODRZAŃSKIM	8	193
56	PIERWSZY US W ZIELONEJ GÓRZE	8	231
90	US KRAKÓW-PODGÓRZE	12	334
60	US W OSTROŁĘCE	14	418
73	US W WIELICZCE	12	333
2	US W ŁUKOWIE	6	165
18	DRUGI US W KATOWICACH	24	650
1	US W ZAKOPANEM	12	328
53	US W PYRZYCACH	32	894
81	US W NAMYSŁOWIE	16	435
23	US W ŁASKU	10	237
87	US W DZIERŻONIOWIE	2	4
29	US W OSTRÓDZIE	28	728
74	US W PUCKU	22	570
85	US W CZŁUCHOWIE	22	553
8	US W ROPCZYCACH	18	488
47	US W STRZYŻOWIE	18	500
77	PIERWSZY US ŁÓDŹ-BAŁUTY	10	273
16	US W OŁAWIE	2	49
61	US W ŁOWICZU	10	239
101	US W KAMIENIU POMORSKIM	32	880
5	US W KAMIENNEJ GÓRZE	2	17
86	US W CHOJNICACH	22	550
39	US W CHEŁMNIE	4	100
79	US W TURKU	30	835
34	US W SOPOCIE	22	589
15	US W KOLBUSZOWEJ	18	467
66	US W OLEŚNICY	2	44
50	US W LEGNICY	2	89
57	US W PRUSZKOWIE	14	385
103	US W SOKÓŁCE	20	538
14	US W TYCHACH	24	658
76	US W LUBACZOWIE	18	474
30	US W PUŁTUSKU	14	390
71	US ŁÓDŹ-POLESIE	10	273
75	TRZECI US W GDAŃSKU	22	586
180	DRUGI US W TORUNIU	4	142
176	US W NISKU	18	482
115	US W BEŁCHATOWIE	10	232
138	US W KROTOSZYNIE	30	783
167	US W LIPSKU	20	509
126	US WE WŁOCŁAWKU	4	143
131	DRUGI US W BYDGOSZCZY	4	140
133	PIERWSZY US W KOSZALINIE	32	916
139	US KRAKÓW-PRĄDNIK	12	334
178	US W ZĄBKOWICACH ŚLĄSKICH	2	77
117	US KRAKÓW-STARE MIASTO	12	334
165	US W PRUSZCZU GDAŃSKIM	22	556
130	US W MIĘDZYCHODZIE	30	787
170	US W WĄGROWCU	30	838
160	US POZNAŃ-WILDA	30	853
171	PIERWSZY US KRAKÓW	12	334
151	US WE WRZEŚNI	30	845
124	PIERWSZY US W TORUNIU	4	142
161	US W BUSKU-ZDROJU	26	661
134	US W KOŚCIERZYNIE	22	559
157	US W SĘPÓLNIE KRAJEŃSKIM	4	123
174	US W SOCHACZEWIE	14	396
123	DRUGI US KRAKÓW	12	334
164	US W LEŻAJSKU	18	472
118	US W CIESZYNIE	24	598
156	US W CHEŁMIE	6	187
135	US W GŁOWNIE	10	267
132	PIERWSZY US W OPOLU	16	456
147	TRZECI US W LUBLINIE	6	188
168	US W KOŁOBRZEGU	32	883
166	US W MIECHOWIE	12	296
116	PIERWSZY US W POZNANIU	30	853
163	US W LIMANOWEJ	12	294
172	US W BOLESŁAWCU	2	1
137	US W OLSZTYNIE	28	741
129	US W MIELCU	18	479
136	US W PISZU	28	734
128	US W BIELSKU PODLASKIM	20	519
181	US W SKARŻYSKU-KAMIENNEJ	26	684
146	US W RAWIE MAZOWIECKIEJ	10	256
158	US W IŁAWIE	28	708
148	US W NAKLE NAD NOTECIĄ	4	117
119	PIERWSZY US W TARNOWIE	12	336
125	US W TRZEBNICY	2	64
122	US W KONINIE	30	851
175	US W PIEKARACH ŚLĄSKICH	24	652
173	US W PARCZEWIE	6	169
179	US KRAKÓW-NOWA HUTA	12	334
154	DRUGI US ŁÓDŹ-GÓRNA	10	273
152	US POZNAŃ-JEŻYCE	30	853
177	US W ŚRODZIE ŚLĄSKIEJ	2	56
149	US W WAŁBRZYCHU	2	91
150	US W STRZELINIE	2	54
159	US W ZABRZU	24	659
\.


--
-- Data for Name: voivodeships; Type: TABLE DATA; Schema: public; Owner: pit_2019
--

COPY public.voivodeships (id, name) FROM stdin;
2	DOLNOŚLĄSKIE
4	KUJAWSKO-POMORSKIE
6	LUBELSKIE
8	LUBUSKIE
10	ŁÓDZKIE
12	MAŁOPOLSKIE
14	MAZOWIECKIE
16	OPOLSKIE
18	PODKARPACKIE
20	PODLASKIE
22	POMORSKIE
24	ŚLĄSKIE
26	ŚWIĘTOKRZYSKIE
28	WARMIŃSKO-MAZURSKIE
30	WIELKOPOLSKIE
32	ZACHODNIOPOMORSKIE
\.


--
-- Name: tax_offices_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pit_2019
--

SELECT pg_catalog.setval('public.tax_offices_id_seq', 379, true);


--
-- Name: cities cities_pk; Type: CONSTRAINT; Schema: public; Owner: pit_2019
--

ALTER TABLE ONLY public.cities
    ADD CONSTRAINT cities_pk PRIMARY KEY (id);


--
-- Name: tax_offices tax_offices_pkey; Type: CONSTRAINT; Schema: public; Owner: pit_2019
--

ALTER TABLE ONLY public.tax_offices
    ADD CONSTRAINT tax_offices_pkey PRIMARY KEY (id);


--
-- Name: voivodeships voivodeships_pk; Type: CONSTRAINT; Schema: public; Owner: pit_2019
--

ALTER TABLE ONLY public.voivodeships
    ADD CONSTRAINT voivodeships_pk PRIMARY KEY (id);


--
-- Name: uidx_tax_office; Type: INDEX; Schema: public; Owner: pit_2019
--

CREATE UNIQUE INDEX uidx_tax_office ON public.tax_offices USING btree (name);


--
-- Name: cities cities_voivodeship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pit_2019
--

ALTER TABLE ONLY public.cities
    ADD CONSTRAINT cities_voivodeship_id_fkey FOREIGN KEY (voivodeship_id) REFERENCES public.voivodeships(id);


--
-- Name: tax_offices tax_offices_city_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pit_2019
--

ALTER TABLE ONLY public.tax_offices
    ADD CONSTRAINT tax_offices_city_fkey FOREIGN KEY (city) REFERENCES public.cities(id);


--
-- Name: tax_offices tax_offices_voivodeship_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pit_2019
--

ALTER TABLE ONLY public.tax_offices
    ADD CONSTRAINT tax_offices_voivodeship_fkey FOREIGN KEY (voivodeship) REFERENCES public.voivodeships(id);


--
-- PostgreSQL database dump complete
--

"
4GNsu4PK,Untitled,Pinto085,C++,Monday 22nd of May 2023 04:39:23 PM CDT,"#include <bits/stdc++.h>

using namespace std;

int main(){
    int n, k;
    while(cin >> n >> k){
        if(n == 0 && k == 0) break;
        vector<int> v(n);
        for(int &x:v) cin >> x;
        set<pair<int, int>> cj;
        for(int i = 0; i < k; i++){
            cj.insert({v[i], i});
        }
        cout << cj.begin()->first;
        for(int i = k; i < n; i++){
            cj.insert({v[i], i});
            cj.erase({v[i-k], i-k});
            cout << "" "" << cj.begin()->first;
        }
        cout << ""\n"";
    }
    return 0;
}
"
g3GwC6JW,OLED_ADC_millis_FULL,uuu000,C++,Monday 22nd of May 2023 04:29:08 PM CDT,"#include <GyverOLED.h>
GyverOLED<SSD1306_128x64, OLED_NO_BUFFER> oled;

// переменные и константы для обработки сигнала кнопки
boolean flagPress = false;   // признак кнопка в нажатом состоянии
boolean flagClick = false;   // признак нажатия кнопки (фронт)
byte buttonCount = 0;        // счетчик подтверждений состояния кнопки
uint8_t timeDrebezg;         // время устойчивого состояния кнопки (* 2 мс)
boolean ledState;            // переменная состояния светодиода
boolean ledState1;           // переменная состояния светодиода
boolean flagPress1 = false;  // признак кнопка в нажатом состоянии
boolean flagClick1 = false;  // признак нажатия кнопки (фронт)
byte buttonCount1 = 0;       // счетчик подтверждений состояния кнопки


void setup() {
  pinMode(A0, OUTPUT);        // определяем вывод 5(светодиод) как выход
  pinMode(A1, OUTPUT);        // определяем вывод 6 (светодиод) как выход
  pinMode(A2, OUTPUT);        // определяем вывод 12 (светодиод) как выход
  pinMode(9, OUTPUT);        // определяем вывод 8 (светодиод) как выход
  pinMode(11, INPUT_PULLUP);  // определяем вывод 4 (кнопка) как вход
  pinMode(8, INPUT_PULLUP);  // определяем вывод 3 (кнопка) как вход
  pinMode(0, OUTPUT);       // определяем вывод 5(светодиод) как выход
  pinMode(1, OUTPUT);       // определяем вывод 6 (светодиод) как выход




  oled.init();       // инициализация
  oled.clear();      // очистка
  oled.setScale(3);  // масштаб текста (1..4)
  oled.setContrast(14);
  delay(1000);

          oled.home();        // курсор в 0,0
         oled.print(""  OFF  "");

         oled.setCursor(0, 5);
        oled.print("" MINUS""); 

}

// бесконечный цикл с периодом 2 мс
void loop() {
  adc();
  button_click_KA();
  blink_click_KA();
  button_click_KA1();
  blink_click_KA1();
  
}


void button_click_KA() {
  /* блок обработки сигнала кнопки
 * при нажатой кнопке flagPress= true
 * при отжатой кнопке flagPress= false
 * при нажатии на кнопку flagClick= true */
  timeDrebezg = 15;
  if (flagPress == (!digitalRead(11))) {
    // признак flagPress = текущему состоянию кнопки
    // (инверсия т.к. активное состояние кнопки LOW)
    // т.е. состояние кнопки осталось прежним
    buttonCount = 0;  // сброс счетчика подтверждений состояния кнопки
  } else {
    // признак flagPress не = текущему состоянию кнопки
    // состояние кнопки изменилось
    buttonCount++;  // +1 к счетчику состояния кнопки

    if (buttonCount >= timeDrebezg) {
      // состояние кнопки не мянялось в течение заданного времени
      // состояние кнопки стало устойчивым
      flagPress = !flagPress;  // инверсия признака состояния
      buttonCount = 0;         // сброс счетчика подтверждений состояния кнопки

      if (flagPress == true) flagClick = true;  // признак фронта кнопки на нажатие
    }
  }
  delay(2);  // задержка на 2 мс
}





void button_click_KA1() {
  /* блок обработки сигнала кнопки
 * при нажатой кнопке flagPress1= true
 * при отжатой кнопке flagPress1= false
 * при нажатии на кнопку flagClick1= true */
  timeDrebezg = 15;
  if (flagPress1 == (!digitalRead(8))) {
    // признак flagPress1 = текущему состоянию кнопки
    // (инверсия т.к. активное состояние кнопки LOW)
    // т.е. состояние кнопки осталось прежним
    buttonCount1 = 0;  // сброс счетчика подтверждений состояния кнопки
  } else {
    // признак flagPress1 не = текущему состоянию кнопки
    // состояние кнопки изменилось
    buttonCount1++;  // +1 к счетчику состояния кнопки

    if (buttonCount1 >= timeDrebezg) {
      // состояние кнопки не мянялось в течение заданного времени
      // состояние кнопки стало устойчивым
      flagPress1 = !flagPress1;  // инверсия признака состояния
      buttonCount1 = 0;          // сброс счетчика подтверждений состояния кнопки

      if (flagPress1 == true) flagClick1 = true;  // признак фронта кнопки на нажатие
    }
  }
  delay(2);  // задержка на 2 мс
}


void blink_click_KA(void) {
  static uint8_t status=1;

  switch (status) {

    case 0:
      if (flagClick == true) {
        // было нажатие кнопки
        flagClick = false;  // сброс признака фронта кнопки
        digitalWrite(A0, LOW);  // вывод состояния светодиода
        digitalWrite(A1, LOW);  // вывод состояния светодиода
        digitalWrite(A2, LOW);  // вывод состояния светодиода
        status = 1; 
      
  oled.home();        // курсор в 0,0
         oled.print(""  OFF  "");

      }

      break;


    case 1:
      if (flagClick == true) {
        // было нажатие кнопки
        flagClick = false;  // сброс признака фронта кнопки
        oled.home();        // курсор в 0,0
        oled.print(""POWER 1"");
        digitalWrite(A0, HIGH);  // вывод состояния светодиода
        digitalWrite(A1, LOW);   // вывод состояния светодиода
        digitalWrite(A2, LOW);   // вывод состояния светодиода
        status = 2;
      }
      break;


    case 2:
      if (flagClick == true) {
        // было нажатие кнопки
        flagClick = false;  // сброс признака фронта кнопки
        oled.home();        // курсор в 0,0
        oled.print(""POWER 2"");
        digitalWrite(A0, LOW);   // вывод состояния светодиода
        digitalWrite(A1, HIGH);  // вывод состояния светодиода
        digitalWrite(A2, LOW);   // вывод состояния светодиода
        status = 3;
      }
      break;

    case 3:
      if (flagClick == true) {
        // было нажатие кнопки
        flagClick = false;  // сброс признака фронта кнопки
        oled.home();        // курсор в 0,0
        oled.print(""POWER 3"");
        digitalWrite(A0, LOW);   // вывод состояния светодиода
        digitalWrite(A1, LOW);   // вывод состояния светодиода
        digitalWrite(A2, HIGH);  // вывод состояния светодиода
        status = 0;
      }
      break;

  }
}

void blink_click_KA1(void) {
  static uint8_t state = 0;


  switch (state) {
    case 0:
      digitalWrite(9, LOW);
      state = 1;
      break;
        oled.setCursor(0, 5);
        oled.print("" MINUS"");  
    case 1:
      if (flagClick1 == true) {
        flagClick1 = false;

        oled.setCursor(0, 5);
                oled.print(""  PLUS "");
        state = 2;
      }
      break;

    case 2:
      digitalWrite(9, HIGH);
      if (flagClick1 == true) {
        flagClick1 = false;
       oled.setCursor(0, 5);
       oled.print(""  1Hz "");
        state = 3;
      }
      break;

    case 3:
      digitalWrite(9, (millis() / 500) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
          oled.setCursor(0, 5);
       oled.print(""  3Hz "");
        state = 4;
      }
      break;

    case 4:
      digitalWrite(9, (millis() / 167) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
          oled.setCursor(0, 5);
       oled.print(""  15Hz "");
        state = 5;
      }
      break;

    case 5:
      digitalWrite(9, (millis() / 34) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
          oled.setCursor(0, 5);
       oled.print(""  25Hz "");
        state = 6;
      }
      break;

    case 6:
      digitalWrite(9, (millis() / 20) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
          oled.setCursor(0, 5);
       oled.print(""  60Hz "");
        state = 7;
      }
      break;
    case 7:
      digitalWrite(9, (millis() / 8) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
          oled.setCursor(0, 5);
       oled.print(""  125Hz "");
        state = 8;
      }
      break;
    case 8:
      digitalWrite(9, (millis() / 4) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
          oled.setCursor(0, 5);
       oled.print("" MINUS"");  
        state = 0;
      }
      break;
  }
}


void adc() {
  int analogPin = 3;
  int val = 0;


  val = analogRead(analogPin);  // считываем напряжение с аналогового входа
                                // наблюдаем считанное значение
  if (val > 780) {
    digitalWrite(0, HIGH);
    digitalWrite(1, LOW);
  }

  else {
    digitalWrite(0, LOW);
    digitalWrite(1, HIGH);
  }
  // delay(1000);
}
"
htELrzKu,TTS Lua | Save input field to description,stom66,Lua,Monday 22nd of May 2023 04:08:37 PM CDT,"function onLoad()
    -- First remove the existing inputs on the object
    self.clearInputs()

    -- Next, recreate the input. The text value is taken from the object memo field
    self.createInput({
        input_function = ""save_value_to_description"",
        function_owner = self,
        label          = ""Enter your description"",
        alignment      = 2,
        position       = {x=0, y=1, z=0},
        width          = 800,
        height         = 300,
        font_size      = 64,
        font_color     = {r=0, g=0, b=0},
        color          = {r=0, g=0, b=0},
        text           = self.memo
    })
end

function save_value_to_description(obj, color, input, stillEditing)
    -- When a user finishes editing the input field, copy the text to the object 
    -- memo field so it can be retrieved later
    if not stillEditing then
        self.memo = input
    end
end"
jJCzHjrg,OLED_ADC_copy_millis_without_1/2OLED,uuu000,C++,Monday 22nd of May 2023 04:00:30 PM CDT,"#include <GyverOLED.h>
GyverOLED<SSD1306_128x64, OLED_NO_BUFFER> oled;

// переменные и константы для обработки сигнала кнопки
boolean flagPress = false;   // признак кнопка в нажатом состоянии
boolean flagClick = false;   // признак нажатия кнопки (фронт)
byte buttonCount = 0;        // счетчик подтверждений состояния кнопки
uint8_t timeDrebezg;         // время устойчивого состояния кнопки (* 2 мс)
boolean ledState;            // переменная состояния светодиода
boolean ledState1;           // переменная состояния светодиода
boolean flagPress1 = false;  // признак кнопка в нажатом состоянии
boolean flagClick1 = false;  // признак нажатия кнопки (фронт)
byte buttonCount1 = 0;       // счетчик подтверждений состояния кнопки


void setup() {
  pinMode(A0, OUTPUT);        // определяем вывод 5(светодиод) как выход
  pinMode(A1, OUTPUT);        // определяем вывод 6 (светодиод) как выход
  pinMode(A2, OUTPUT);        // определяем вывод 12 (светодиод) как выход
  pinMode(9, OUTPUT);        // определяем вывод 8 (светодиод) как выход
  pinMode(11, INPUT_PULLUP);  // определяем вывод 4 (кнопка) как вход
  pinMode(8, INPUT_PULLUP);  // определяем вывод 3 (кнопка) как вход
  pinMode(0, OUTPUT);       // определяем вывод 5(светодиод) как выход
  pinMode(1, OUTPUT);       // определяем вывод 6 (светодиод) как выход




  oled.init();       // инициализация
  oled.clear();      // очистка
  oled.setScale(3);  // масштаб текста (1..4)
  oled.setContrast(14);
  delay(1000);

          oled.home();        // курсор в 0,0
         oled.print(""  OFF  "");

         oled.setCursor(0, 5);
        oled.print("" MINUS""); 

}

// бесконечный цикл с периодом 2 мс
void loop() {
  adc();
  button_click_KA();
  blink_click_KA();
  button_click_KA1();
  blink_click_KA1();
  
}


void button_click_KA() {
  /* блок обработки сигнала кнопки
 * при нажатой кнопке flagPress= true
 * при отжатой кнопке flagPress= false
 * при нажатии на кнопку flagClick= true */
  timeDrebezg = 15;
  if (flagPress == (!digitalRead(11))) {
    // признак flagPress = текущему состоянию кнопки
    // (инверсия т.к. активное состояние кнопки LOW)
    // т.е. состояние кнопки осталось прежним
    buttonCount = 0;  // сброс счетчика подтверждений состояния кнопки
  } else {
    // признак flagPress не = текущему состоянию кнопки
    // состояние кнопки изменилось
    buttonCount++;  // +1 к счетчику состояния кнопки

    if (buttonCount >= timeDrebezg) {
      // состояние кнопки не мянялось в течение заданного времени
      // состояние кнопки стало устойчивым
      flagPress = !flagPress;  // инверсия признака состояния
      buttonCount = 0;         // сброс счетчика подтверждений состояния кнопки

      if (flagPress == true) flagClick = true;  // признак фронта кнопки на нажатие
    }
  }
  delay(2);  // задержка на 2 мс
}





void button_click_KA1() {
  /* блок обработки сигнала кнопки
 * при нажатой кнопке flagPress1= true
 * при отжатой кнопке flagPress1= false
 * при нажатии на кнопку flagClick1= true */
  timeDrebezg = 15;
  if (flagPress1 == (!digitalRead(8))) {
    // признак flagPress1 = текущему состоянию кнопки
    // (инверсия т.к. активное состояние кнопки LOW)
    // т.е. состояние кнопки осталось прежним
    buttonCount1 = 0;  // сброс счетчика подтверждений состояния кнопки
  } else {
    // признак flagPress1 не = текущему состоянию кнопки
    // состояние кнопки изменилось
    buttonCount1++;  // +1 к счетчику состояния кнопки

    if (buttonCount1 >= timeDrebezg) {
      // состояние кнопки не мянялось в течение заданного времени
      // состояние кнопки стало устойчивым
      flagPress1 = !flagPress1;  // инверсия признака состояния
      buttonCount1 = 0;          // сброс счетчика подтверждений состояния кнопки

      if (flagPress1 == true) flagClick1 = true;  // признак фронта кнопки на нажатие
    }
  }
  delay(2);  // задержка на 2 мс
}


void blink_click_KA(void) {
  static uint8_t status=1;

  switch (status) {

    case 0:
      if (flagClick == true) {
        // было нажатие кнопки
        flagClick = false;  // сброс признака фронта кнопки
        digitalWrite(A0, LOW);  // вывод состояния светодиода
        digitalWrite(A1, LOW);  // вывод состояния светодиода
        digitalWrite(A2, LOW);  // вывод состояния светодиода
        status = 1; 
      
  oled.home();        // курсор в 0,0
         oled.print(""  OFF  "");

      }

      break;


    case 1:
      if (flagClick == true) {
        // было нажатие кнопки
        flagClick = false;  // сброс признака фронта кнопки
        oled.home();        // курсор в 0,0
        oled.print(""POWER 1"");
        digitalWrite(A0, HIGH);  // вывод состояния светодиода
        digitalWrite(A1, LOW);   // вывод состояния светодиода
        digitalWrite(A2, LOW);   // вывод состояния светодиода
        status = 2;
      }
      break;


    case 2:
      if (flagClick == true) {
        // было нажатие кнопки
        flagClick = false;  // сброс признака фронта кнопки
        oled.home();        // курсор в 0,0
        oled.print(""POWER 2"");
        digitalWrite(A0, LOW);   // вывод состояния светодиода
        digitalWrite(A1, HIGH);  // вывод состояния светодиода
        digitalWrite(A2, LOW);   // вывод состояния светодиода
        status = 3;
      }
      break;

    case 3:
      if (flagClick == true) {
        // было нажатие кнопки
        flagClick = false;  // сброс признака фронта кнопки
        oled.home();        // курсор в 0,0
        oled.print(""POWER 3"");
        digitalWrite(A0, LOW);   // вывод состояния светодиода
        digitalWrite(A1, LOW);   // вывод состояния светодиода
        digitalWrite(A2, HIGH);  // вывод состояния светодиода
        status = 0;
      }
      break;

  }
}

void blink_click_KA1(void) {
  static uint8_t state = 0;


  switch (state) {
    case 0:
      digitalWrite(9, LOW);
      state = 1;
      break;

    case 1:
      if (flagClick1 == true) {
        flagClick1 = false;
        state = 2;
      }
      break;

    case 2:
      digitalWrite(9, HIGH);
      if (flagClick1 == true) {
        flagClick1 = false;
        state = 3;
      }
      break;

    case 3:
      digitalWrite(9, (millis() / 500) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
        state = 4;
      }
      break;

    case 4:
      digitalWrite(9, (millis() / 167) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;

        state = 5;
      }
      break;

    case 5:
      digitalWrite(9, (millis() / 34) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
        state = 6;
      }
      break;

    case 6:
      digitalWrite(9, (millis() / 20) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
        state = 7;
      }
      break;
    case 7:
      digitalWrite(9, (millis() / 8) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
        state = 8;
      }
      break;
    case 8:
      digitalWrite(9, (millis() / 4) % 2);
      if (flagClick1 == true) {
        flagClick1 = false;
        state = 0;
      }
      break;
  }
}


// void blink_click_KA1(void) {
//   static uint8_t mode = 1;
//   switch (mode) {
//     case 0:
//     //  oled.setCursor(0, 5);
//     //     oled.print(""  000"");   
//       if (flagClick1 == true) {
//         // было нажатие кнопки
//         flagClick1 = false;  // сброс признака фронта кнопки
//         // TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
//         // TCCR1A &= ~(1 << COM1A1);
//         // TCCR1A &= ~(1 << COM1A0);
//         TCCR1A = 0;
//         TCCR1B = 0;
//         digitalWrite(9, LOW);  //выключаем все светодиоды
//          oled.setCursor(0, 5);
//         oled.print("" MINUS"");        
//         mode = 1;
//       }
//       break;

//     case 1:

//       if (flagClick1 == true) {
//         TCCR1A = 0;
//         TCCR1B = 0;

//         // было нажатие кнопки
//         flagClick1 = false;  // сброс признака фронта кнопки
//         digitalWrite(9, HIGH);

//         oled.setCursor(0, 5);
//         oled.print(""  PLUS "");
//         mode = 2;
//       }
//       break;


//     case 2:
//       if (flagClick1 == true) {
//         // было нажатие кнопки
//         flagClick1 = false;  // сброс признака фронта кнопки
//         //  digitalWrite(2, LOW);
//         pinMode(9, OUTPUT);
//          TCCR1A = 0b01000000;
//           // TCCR1A = 0x40;
//         // TCCR1B = 0b00001101;
//         TCCR1B = 0xD;
//         OCR1A = 7811;  //1

//         oled.setCursor(0, 5);
//         oled.print(""  1Hz "");
//         mode = 3;
//       }

//       break;


//     case 3:
   
//       if (flagClick1 == true) {
//         // было нажатие кнопки
//         flagClick1 = false;  // сброс признака фронта кнопки
//         // pinMode(9, OUTPUT);
//         // digitalWrite(9, LOW);  
//         // delay(10);
    
//         TCCR1A = 0x40;
//         TCCR1B = 0xD;
//         // delay(10);
//         OCR1A = 2603;  //3

//         oled.setCursor(0, 5);
//         oled.print(""  3Hz "");
//         mode = 4;
//       }
//       break;


//     case 4:
//       if (flagClick1 == true) {
//         // было нажатие кнопки
//         flagClick1 = false;  // сброс признака фронта кнопки
//         // pinMode(9, OUTPUT);
//         TCCR1A = 0;
//         TCCR1B = 0;
//         delay(10);
//         TCCR1A = 0x40;
//         TCCR1B = 0xD;
//         OCR1A = 520;  //15
//         oled.setCursor(0, 5);
//         oled.print("" 15Hz "");
//         mode = 5;
//       }
//       break;


//     case 5:
//       if (flagClick1 == true) {
//         // было нажатие кнопки
//         flagClick1 = false;  // сброс признака фронта кнопки
//         pinMode(9, OUTPUT);
//         TCCR1A = 0x40;
//         TCCR1B = 0xD;
//         OCR1A = 312;  //25
//         oled.setCursor(0, 5);
//         oled.print("" 25Hz "");
//         mode = 6;
//       }
//       break;
//     case 6:
//       if (flagClick1 == true) {
//         // было нажатие кнопки
//         flagClick1 = false;  // сброс признака фронта кнопки
//         pinMode(9, OUTPUT);
//         TCCR1A = 0x40;
//         TCCR1B = 0xD;
//         OCR1A = 130;  //60
//         oled.setCursor(0, 5);
//         oled.print("" 60Hz "");
//         mode = 7;
//       }
//       break;

//     case 7:
//       if (flagClick1 == true) {
//         // было нажатие кнопки
//         flagClick1 = false;  // сброс признака фронта кнопки
//         pinMode(9, OUTPUT);
//         TCCR1A = 0x40;
//         TCCR1B = 0xD;
//         OCR1A = 62;  //125
//         oled.setCursor(0, 5);
//         oled.print("" 125Hz"");
//         mode = 0;
//       }
//       break;

    

//   }  // exit switch (mode)
// }
void adc() {
  int analogPin = 3;
  int val = 0;


  val = analogRead(analogPin);  // считываем напряжение с аналогового входа
                                // наблюдаем считанное значение
  if (val > 780) {
    digitalWrite(0, HIGH);
    digitalWrite(1, LOW);
  }

  else {
    digitalWrite(0, LOW);
    digitalWrite(1, HIGH);
  }
  // delay(1000);
}
"
BXQ8vJVy,2023_maj_matenak,Just_A_Noob_Sry,C++,Monday 22nd of May 2023 03:45:52 PM CDT,"#include <iostream>
#include <vector>
#include <fstream>
using namespace std;

typedef struct rgb{
int red;
int green;
int blue;
}RGB;

int main()
{
    fstream f;
    vector<RGB> szinek;
    int db=0;
    int i=0;
    RGB seged;

    f.open(""kep.txt"",ios::in);
    while(f>>seged.red && f>>seged.green && f>>seged.blue){
        db++;
    }
    for(i=0;i<db;i++){
        szinek[i].push_back(seged);
    }
    f.close();

    return 0;
}
"
