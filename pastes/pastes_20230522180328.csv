id,title,username,language,date,content
9FahCnRP,07. Math Potato,tripTiPscout,Java,Monday 22nd of May 2023 12:55:32 PM CDT,"package advanced;

import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[] children = scanner.nextLine().split("" "");
        int toss = Integer.parseInt(scanner.nextLine());

        PriorityQueue<String> queue = new PriorityQueue<>();

        for (String child : children) {
            queue.offer(child);
        }

        int cycle = 1;

        while (queue.size() > 1) {
            for (int i = 1; i < toss; i++) {
                queue.offer(Objects.requireNonNull(queue.poll()));
            }
            if (isPrime(cycle)) {
                System.out.println(""Prime "" + queue.peek());
            } else {
                System.out.println(""Removed "" + queue.poll());
            }
            cycle++;
        }

        System.out.println(""Last is "" + queue.poll());

    }

    private static boolean isPrime(int cycle) {
        boolean isPrime = true;
        for (int i = 2; i <= cycle - 1; i++) {
            if (cycle % i == 0) {
                isPrime = false;
                break;
            }
        }
        if (cycle == 1) {
            return false;
        }
        return isPrime;
    }

}"
XCGdY1M6,Ex02FromLeftToTheRight,uktcar,Java,Monday 22nd of May 2023 12:41:34 PM CDT,"import java.util.Scanner;

public class Ex02FromLeftToTheRight {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        for (int i = 0; i < n; i++) {
            String input = scanner.nextLine();

            String leftNumber = """";
            String rightNumber = """";

            for (int j = 0; j < input.length(); j++) {
                char currentSymbol = input.charAt(j);

                if (currentSymbol == 32) {

                    for (int k = j + 1; k < input.length(); k++) {
                        rightNumber += input.charAt(k);
                    }
                    break;
                }
                leftNumber += input.charAt(j);
            }

            long leftDigits = Long.parseLong(leftNumber);
            long rightDigits = Long.parseLong(rightNumber);

            long maxNumber = Math.abs(Math.max(leftDigits, rightDigits));
            int digitsSum = 0;

            while (maxNumber > 0) {
                long currentDigit = maxNumber % 10;
                digitsSum += currentDigit;
                maxNumber /= 10;
            }

            System.out.println(digitsSum);
        }

    }
}
"
AfbSJFu8,Untitled,vvsvvs,C#,Monday 22nd of May 2023 12:08:51 PM CDT,"namespace Miner
{
    using System;
    public class Program
    {
        static void Main(string[] args)
        {
            //INPUT
            int size = int.Parse(Console.ReadLine());
            string[] moves = Console.ReadLine().Split("" "", StringSplitOptions.RemoveEmptyEntries);

            //ACTION
            string[,] field = new string[size, size];

            //Creating The Field And Searching The Start And The Coals
            int currentRow = 0;
            int currentCol = 0;
            int coals = 0;

            for (int row = 0; row < size; row++)
            {
                string[] currentRowArray = Console.ReadLine().Split();

                for (int col = 0; col < size; col++)
                {
                    field[row, col] = currentRowArray[col];

                    if (currentRowArray[col] == ""s"")
                    {
                        currentRow = row;
                        currentCol = col;
                    }
                    else if (currentRowArray[col] == ""c"")
                    {
                        coals++;
                    }
                }
            }            

            //Miner Moving
            for (int i = 0; i < moves.Length; i++)
            {
                int stepRow = 0;
                int stepCol = 0;

                //Up
                if (moves[i] == ""up"")
                {
                    stepRow--;                    
                }

                //Down
                else if (moves[i] == ""down"")
                {
                    stepRow++;
                }

                //Left
                else if (moves[i] == ""left"")
                {
                    stepCol--;
                }

                //Right
                else if (moves[i] == ""right"")
                {
                    stepCol++;
                }

                if (isValid(currentRow + stepRow, currentCol + stepCol, size))
                {
                    currentRow += stepRow;
                    currentCol += stepCol;

                    //If Coal Is Found
                    if (field[currentRow, currentCol] == ""c"")
                    {
                        coals--;
                        field[currentRow, currentCol] = ""*"";

                        if (coals == 0)
                        {
                            Console.WriteLine($""You collected all coals! ({currentRow}, {currentCol})"");
                            return;
                        }
                    }
                    //If Current Index Is Game Stop (e)
                    else if (field[currentRow, currentCol] == ""e"")
                    {
                        Console.WriteLine($""Game over! ({currentRow}, {currentCol})"");
                        return;
                    }
                }                
            }

            //OUTPUT
            Console.WriteLine($""{coals} coals left. ({currentRow}, {currentCol})"");

            //Valid Index Checker
            static bool isValid(int row, int col, int size)
            {
                return (row >= 0 && row < size && col >= 0 && col < size);
            }
        }
    }
}"
F68UPU2R,Kalaam-e-Noor Class Report,asifshakir,MySQL,Monday 22nd of May 2023 11:59:07 AM CDT,"SELECT 
    l.name as Level, 
    c.code as Class, 
    g.name as Gender,
    c.city as City,
    t.token as `Teacher Token`,
    t.name as `Teacher Name`,
    COALESCE(u.name, r.name) as Student,
    COALESCE(r.modified_at, r.created_at) `Updated At`
FROM `class_events_registration` r
    INNER JOIN classes c ON c.id = r.class_id
    INNER JOIN class_levels l ON l.id = c.class_level_id
    INNER JOIN users t ON t.token = c.teacher
    INNER JOIN genders g ON g.Id = c.gender
    LEFT JOIN users u ON u.token = r.token and u.token > 0
WHERE 
    r.status = 'A' and c.gender = 1
ORDER BY
    l.sort_order, c.id, u.token"
qjFAqL33,Untitled,KNenov96,HTML,Monday 22nd of May 2023 11:54:31 AM CDT,"<!DOCTYPE html>
{% load static %}
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">

    <title>Bikers List</title>
</head>

<body>

<style>
    body {
        background-image: url('{% static ""images/motorcycle.jpg"" %}');
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
        background-size: cover;
        background-repeat: no-repeat;
    }
    h1 {
        font-size: 80px;
    }
</style>

<h1> Bikers List! </h1>
</body>
</html>


"
SHFGbbi9,Gmail - Get Unread Extra Seat Request Email Senders,GazzaliFahim,JavaScript,Monday 22nd of May 2023 11:25:17 AM CDT,"/*
Script: Retrieve Email Addresses from Gmail Messages who requests Extra Seat.
Description: This script retrieves the email addresses of senders from messages in your Gmail inbox. It searches for messages containing the phrases ""extra seat"" or ""seat"" in the subject or body. The script will log the email addresses found.

Instructions:
1. Go to https://script.google.com/ and create a new project in Google Apps Script.
2. Rename the project to a descriptive name.
3. Copy and paste the code provided below into the script editor.
4. Save the code and run the script.
5. Give necessary permission to your Google Account.
6. View the email addresses in the Logs below or ""View"" > ""Logs"" menu.
7. Now, you can copy the addresses from the logs for your further desired actions. 

Note: 
a) This script retrieves emails from the past 2 weeks (14 days). You can modify this duration by adjusting the value in the 'twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);' line.

b) This scripts fecthes first 50 threads. You can modify this qunatity by adjusting the value in the `GmailApp.getInboxThreads(0, 50)` line. The first parameter represents the starting index (0-based), and the second parameter represents the number of threads.

*/

function getEmailAddressesFromMessages() {
  var threads = GmailApp.getInboxThreads(0, 50); // Fetch only the first 50 threads
  var emailAddresses = [];
  var regex = /\bextra seat\b|\bseat\b/; // Matches either ""extra seat"" or ""seat""
  var myEmailAddress = ""fakhruddin.gazzali@bracu.ac.bd"".toLowerCase(); // Replace with your own email address
 
  for (var i = 0; i < threads.length; i++) {
    // if (threads[i].isUnread()) { // Uncomment this line if want to fetch only unread emails
      var messages = threads[i].getMessages();
      for (var j = 0; j < messages.length; j++) {
        var date = messages[j].getDate();
        var twoWeeksAgo = new Date();
        twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14); // Fetches messages those were sent within the past 2 weeks (14 days)
 
        if (date > twoWeeksAgo) {
          var sender = messages[j].getFrom().toLowerCase(); // Convert sender to lowercase
          // var myEmailAddress = myEmailAddress.toLowerCase(); // Convert your email to lowercase
          if (sender.indexOf(myEmailAddress) === -1 && (regex.test(messages[j].getPlainBody().toLowerCase()) || regex.test(messages[j].getSubject().toLowerCase()))) {
            emailAddresses.push(messages[j].getFrom());
            // messages[j].markRead(); // Uncomment this line to mark the message as read
          }
        }
      }
    //} //uncomment this line too for the if (threads[i].isUnread()) line.
  }

/*
Author: MD. Fakhruddin Gazzali and his loving bot!
Date: 22-May-2023; 10:22 PM (Dhaka, GMT+6)
*/"
d5G67dgP,[TF2] RGB Crosshair Script,Mangus875,Bash,Monday 22nd of May 2023 11:14:16 AM CDT,"alias ""ch_col_next"" ""ch_col1""
alias ""ch_col1"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 0; alias ch_next_col ch_col2; wait 3; ch_col_next""
alias ""ch_col2"" ""cl_crosshair_red 255; cl_crosshair_green 16; cl_crosshair_blue 0; alias ch_next_col ch_col3; wait 3; ch_col_next""
alias ""ch_col3"" ""cl_crosshair_red 255; cl_crosshair_green 32; cl_crosshair_blue 0; alias ch_next_col ch_col4; wait 3; ch_col_next""
alias ""ch_col4"" ""cl_crosshair_red 255; cl_crosshair_green 48; cl_crosshair_blue 0; alias ch_next_col ch_col5; wait 3; ch_col_next""
alias ""ch_col5"" ""cl_crosshair_red 255; cl_crosshair_green 64; cl_crosshair_blue 0; alias ch_next_col ch_col6; wait 3; ch_col_next""
alias ""ch_col6"" ""cl_crosshair_red 255; cl_crosshair_green 80; cl_crosshair_blue 0; alias ch_next_col ch_col7; wait 3; ch_col_next""
alias ""ch_col7"" ""cl_crosshair_red 255; cl_crosshair_green 96; cl_crosshair_blue 0; alias ch_next_col ch_col8; wait 3; ch_col_next""
alias ""ch_col8"" ""cl_crosshair_red 255; cl_crosshair_green 112; cl_crosshair_blue 0; alias ch_next_col ch_col9; wait 3; ch_col_next""
alias ""ch_col9"" ""cl_crosshair_red 255; cl_crosshair_green 128; cl_crosshair_blue 0; alias ch_next_col ch_col10; wait 3; ch_col_next""
alias ""ch_col10"" ""cl_crosshair_red 255; cl_crosshair_green 144; cl_crosshair_blue 0; alias ch_next_col ch_col11; wait 3; ch_col_next""
alias ""ch_col11"" ""cl_crosshair_red 255; cl_crosshair_green 160; cl_crosshair_blue 0; alias ch_next_col ch_col12; wait 3; ch_col_next""
alias ""ch_col12"" ""cl_crosshair_red 255; cl_crosshair_green 176; cl_crosshair_blue 0; alias ch_next_col ch_col13; wait 3; ch_col_next""
alias ""ch_col13"" ""cl_crosshair_red 255; cl_crosshair_green 192; cl_crosshair_blue 0; alias ch_next_col ch_col14; wait 3; ch_col_next""
alias ""ch_col14"" ""cl_crosshair_red 255; cl_crosshair_green 208; cl_crosshair_blue 0; alias ch_next_col ch_col15; wait 3; ch_col_next""
alias ""ch_col15"" ""cl_crosshair_red 255; cl_crosshair_green 224; cl_crosshair_blue 0; alias ch_next_col ch_col16; wait 3; ch_col_next""
alias ""ch_col16"" ""cl_crosshair_red 255; cl_crosshair_green 240; cl_crosshair_blue 0; alias ch_next_col ch_col17; wait 3; ch_col_next""
alias ""ch_col17"" ""cl_crosshair_red 255; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col18; wait 3; ch_col_next""
alias ""ch_col18"" ""cl_crosshair_red 240; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col19; wait 3; ch_col_next""
alias ""ch_col19"" ""cl_crosshair_red 224; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col20; wait 3; ch_col_next""
alias ""ch_col20"" ""cl_crosshair_red 208; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col21; wait 3; ch_col_next""
alias ""ch_col21"" ""cl_crosshair_red 192; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col22; wait 3; ch_col_next""
alias ""ch_col22"" ""cl_crosshair_red 176; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col23; wait 3; ch_col_next""
alias ""ch_col23"" ""cl_crosshair_red 160; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col24; wait 3; ch_col_next""
alias ""ch_col24"" ""cl_crosshair_red 144; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col25; wait 3; ch_col_next""
alias ""ch_col25"" ""cl_crosshair_red 128; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col26; wait 3; ch_col_next""
alias ""ch_col26"" ""cl_crosshair_red 112; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col27; wait 3; ch_col_next""
alias ""ch_col27"" ""cl_crosshair_red 96; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col28; wait 3; ch_col_next""
alias ""ch_col28"" ""cl_crosshair_red 80; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col29; wait 3; ch_col_next""
alias ""ch_col29"" ""cl_crosshair_red 64; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col30; wait 3; ch_col_next""
alias ""ch_col30"" ""cl_crosshair_red 48; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col31; wait 3; ch_col_next""
alias ""ch_col31"" ""cl_crosshair_red 32; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col32; wait 3; ch_col_next""
alias ""ch_col32"" ""cl_crosshair_red 16; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col33; wait 3; ch_col_next""
alias ""ch_col33"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 0; alias ch_next_col ch_col34; wait 3; ch_col_next""
alias ""ch_col34"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 16; alias ch_next_col ch_col35; wait 3; ch_col_next""
alias ""ch_col35"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 32; alias ch_next_col ch_col36; wait 3; ch_col_next""
alias ""ch_col36"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 48; alias ch_next_col ch_col37; wait 3; ch_col_next""
alias ""ch_col37"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 64; alias ch_next_col ch_col38; wait 3; ch_col_next""
alias ""ch_col38"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 80; alias ch_next_col ch_col39; wait 3; ch_col_next""
alias ""ch_col39"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 96; alias ch_next_col ch_col40; wait 3; ch_col_next""
alias ""ch_col40"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 112; alias ch_next_col ch_col41; wait 3; ch_col_next""
alias ""ch_col41"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 128; alias ch_next_col ch_col42; wait 3; ch_col_next""
alias ""ch_col42"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 144; alias ch_next_col ch_col43; wait 3; ch_col_next""
alias ""ch_col43"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 160; alias ch_next_col ch_col44; wait 3; ch_col_next""
alias ""ch_col44"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 176; alias ch_next_col ch_col45; wait 3; ch_col_next""
alias ""ch_col45"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 192; alias ch_next_col ch_col46; wait 3; ch_col_next""
alias ""ch_col46"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 208; alias ch_next_col ch_col47; wait 3; ch_col_next""
alias ""ch_col47"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 224; alias ch_next_col ch_col48; wait 3; ch_col_next""
alias ""ch_col48"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 240; alias ch_next_col ch_col49; wait 3; ch_col_next""
alias ""ch_col49"" ""cl_crosshair_red 0; cl_crosshair_green 255; cl_crosshair_blue 255; alias ch_next_col ch_col50; wait 3; ch_col_next""
alias ""ch_col50"" ""cl_crosshair_red 0; cl_crosshair_green 240; cl_crosshair_blue 255; alias ch_next_col ch_col51; wait 3; ch_col_next""
alias ""ch_col51"" ""cl_crosshair_red 0; cl_crosshair_green 224; cl_crosshair_blue 255; alias ch_next_col ch_col52; wait 3; ch_col_next""
alias ""ch_col52"" ""cl_crosshair_red 0; cl_crosshair_green 208; cl_crosshair_blue 255; alias ch_next_col ch_col53; wait 3; ch_col_next""
alias ""ch_col53"" ""cl_crosshair_red 0; cl_crosshair_green 192; cl_crosshair_blue 255; alias ch_next_col ch_col54; wait 3; ch_col_next""
alias ""ch_col54"" ""cl_crosshair_red 0; cl_crosshair_green 176; cl_crosshair_blue 255; alias ch_next_col ch_col55; wait 3; ch_col_next""
alias ""ch_col55"" ""cl_crosshair_red 0; cl_crosshair_green 160; cl_crosshair_blue 255; alias ch_next_col ch_col56; wait 3; ch_col_next""
alias ""ch_col56"" ""cl_crosshair_red 0; cl_crosshair_green 144; cl_crosshair_blue 255; alias ch_next_col ch_col57; wait 3; ch_col_next""
alias ""ch_col57"" ""cl_crosshair_red 0; cl_crosshair_green 128; cl_crosshair_blue 255; alias ch_next_col ch_col58; wait 3; ch_col_next""
alias ""ch_col58"" ""cl_crosshair_red 0; cl_crosshair_green 112; cl_crosshair_blue 255; alias ch_next_col ch_col59; wait 3; ch_col_next""
alias ""ch_col59"" ""cl_crosshair_red 0; cl_crosshair_green 96; cl_crosshair_blue 255; alias ch_next_col ch_col60; wait 3; ch_col_next""
alias ""ch_col60"" ""cl_crosshair_red 0; cl_crosshair_green 80; cl_crosshair_blue 255; alias ch_next_col ch_col61; wait 3; ch_col_next""
alias ""ch_col61"" ""cl_crosshair_red 0; cl_crosshair_green 64; cl_crosshair_blue 255; alias ch_next_col ch_col62; wait 3; ch_col_next""
alias ""ch_col62"" ""cl_crosshair_red 0; cl_crosshair_green 48; cl_crosshair_blue 255; alias ch_next_col ch_col63; wait 3; ch_col_next""
alias ""ch_col63"" ""cl_crosshair_red 0; cl_crosshair_green 32; cl_crosshair_blue 255; alias ch_next_col ch_col64; wait 3; ch_col_next""
alias ""ch_col64"" ""cl_crosshair_red 0; cl_crosshair_green 16; cl_crosshair_blue 255; alias ch_next_col ch_col65; wait 3; ch_col_next""
alias ""ch_col65"" ""cl_crosshair_red 0; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col66; wait 3; ch_col_next""
alias ""ch_col66"" ""cl_crosshair_red 16; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col67; wait 3; ch_col_next""
alias ""ch_col67"" ""cl_crosshair_red 32; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col68; wait 3; ch_col_next""
alias ""ch_col68"" ""cl_crosshair_red 48; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col69; wait 3; ch_col_next""
alias ""ch_col69"" ""cl_crosshair_red 64; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col70; wait 3; ch_col_next""
alias ""ch_col70"" ""cl_crosshair_red 80; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col71; wait 3; ch_col_next""
alias ""ch_col71"" ""cl_crosshair_red 96; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col72; wait 3; ch_col_next""
alias ""ch_col72"" ""cl_crosshair_red 112; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col73; wait 3; ch_col_next""
alias ""ch_col73"" ""cl_crosshair_red 128; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col74; wait 3; ch_col_next""
alias ""ch_col74"" ""cl_crosshair_red 144; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col75; wait 3; ch_col_next""
alias ""ch_col75"" ""cl_crosshair_red 160; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col76; wait 3; ch_col_next""
alias ""ch_col76"" ""cl_crosshair_red 176; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col77; wait 3; ch_col_next""
alias ""ch_col77"" ""cl_crosshair_red 192; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col78; wait 3; ch_col_next""
alias ""ch_col78"" ""cl_crosshair_red 208; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col79; wait 3; ch_col_next""
alias ""ch_col79"" ""cl_crosshair_red 224; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col80; wait 3; ch_col_next""
alias ""ch_col80"" ""cl_crosshair_red 240; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col81; wait 3; ch_col_next""
alias ""ch_col81"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 255; alias ch_next_col ch_col82; wait 3; ch_col_next""
alias ""ch_col82"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 240; alias ch_next_col ch_col83; wait 3; ch_col_next""
alias ""ch_col83"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 224; alias ch_next_col ch_col84; wait 3; ch_col_next""
alias ""ch_col84"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 208; alias ch_next_col ch_col85; wait 3; ch_col_next""
alias ""ch_col85"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 192; alias ch_next_col ch_col86; wait 3; ch_col_next""
alias ""ch_col86"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 176; alias ch_next_col ch_col87; wait 3; ch_col_next""
alias ""ch_col87"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 160; alias ch_next_col ch_col88; wait 3; ch_col_next""
alias ""ch_col88"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 144; alias ch_next_col ch_col89; wait 3; ch_col_next""
alias ""ch_col89"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 128; alias ch_next_col ch_col90; wait 3; ch_col_next""
alias ""ch_col90"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 112; alias ch_next_col ch_col91; wait 3; ch_col_next""
alias ""ch_col91"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 96; alias ch_next_col ch_col92; wait 3; ch_col_next""
alias ""ch_col92"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 80; alias ch_next_col ch_col93; wait 3; ch_col_next""
alias ""ch_col93"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 64; alias ch_next_col ch_col94; wait 3; ch_col_next""
alias ""ch_col94"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 48; alias ch_next_col ch_col95; wait 3; ch_col_next""
alias ""ch_col95"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 32; alias ch_next_col ch_col96; wait 3; ch_col_next""
alias ""ch_col96"" ""cl_crosshair_red 255; cl_crosshair_green 0; cl_crosshair_blue 16; alias ch_next_col ch_rgb_on; wait 3; ch_col_next""

alias ""ch_wait_test"" ""alias wait ch_no_wait; alias ch_wait ch_rgb_go; wait; ch_wait""
alias ""ch_rgb_go"" ""alias ch_col_next ch_col1; ch_col_next""
alias ""ch_no_wait"" ""alias ch_wait""
alias ""ch_rgb_off"" ""alias ch_col_next; alias toggle_rgb_crosshair ch_rgb_on""
alias ""ch_rgb_on"" ""alias toggle_rgb_crosshair ch_rgb_off; ch_wait_test""
alias ""toggle_rgb_crosshair"" ""ch_rgb_on""

sv_allow_wait_command 1		// the script wont work if this isnt enabled. (casual servers & most community servers have this enabled)
ch_rgb_on

// you can edit the wait durations on each of the colors for slower/faster speeds.
// currently it takes about 4 seconds to cycle through all of the colors
//  ^^ calculation: (96 * wait_time)/66 = seconds to cycle through colors"
HTv4imud,Note,mr_anastasov,JavaScript,Monday 22nd of May 2023 10:53:15 AM CDT,"import { noteStatus } from '../../common/note-status.enum';
import { noteImportance } from '../../common/note-importance.enum';
import { BoardItem } from './board-item.model';
export class Note extends BoardItem {

    #description;
    #importance;

     /** @private */
     static #MAX_DESCRIPTION_LENGTH = 60;
     /** @private */
     static #MIN_DESCRIPTION_LENGTH = 6;

    constructor (name, description, importance) {
        super(name);

        this.description = description;
        this.importance = importance;
        this._status = this.reset();
    }


    set description(value) {
        if(typeof value !== 'string') {
            throw new Error('Description cannot be diffrent from string!');
        }

        if(!value) {
            throw new Error('Description cannot be null, undefined or empty string!');
        }

        if (value.length < Note.#MIN_DESCRIPTION_LENGTH || value.length > Note.#MAX_DESCRIPTION_LENGTH) {
            throw new Error(`Length should be between ${Note.#MIN_DESCRIPTION_LENGTH} and ${Note.#MAX_DESCRIPTION_LENGTH}.`);
        }

        this.#description = value;
    }

    set importance(value) {
        if (!Object.values(noteImportance).includes(value)) {
            throw new Error('Invalid importance value.');
        }

        this.#importance = value;
    }

    // set _status(value) {
    //     if (!Object.values(noteStatus).includes(value)) {
    //         throw new Error('Invalid status.');
    //     }
        
    //     this.#status = value;
    // }

    reset() {
        this._status = noteStatus.CREATED;
    }

    advance() {
        this._status = noteStatus.PENDING;
    }

    complete() {
        this._status = noteStatus.APPROVED;
    }

    toString() {

        return '* Note * \n' +
        `Name: ${this._name}\n` +
        `Status: ${this._status}\n` +
        `Description: ${this.#description}`;
    }

}
"
8WwLZzRQ,BoardItem,mr_anastasov,JavaScript,Monday 22nd of May 2023 10:52:07 AM CDT,"export class BoardItem {

    _name;
    _status;

    _MAX_NAME_LENGTH = 20;
    _MIN_NAME_LENGTH = 6;
    

    constructor (name) {
        this._name = name;
    }

   /**
   * Sets the name of the note.
   * @param {string} value - The name to set.
   * @throws {Error} If the name is invalid or out of length bounds.
   */

    get name() {
        return this._name;
    }

    set name(value) {
        if(typeof value !== 'string') {
            throw new Error('Name cannot be diffrent from string!');
        }

        if(!value) {
            throw new Error('Name cannot be null, undefined or empty string!');
        }

        if (value.length < BoardItem._MIN_NAME_LENGTH || value.length > BoardItem._MAX_NAME_LENGTH) {
            throw new Error(`Length should be between ${BoardItem._MIN_NAME_LENGTH} and ${BoardItem._MAX_NAME_LENGTH}.`);
        }

        this._name = value;
    }

    get status() {
        return this._status;
    }

    reset() {
        this._status = 'new';
    }

    advance() {
        this._status = 'one step ahead';
    }

    complete() {
        this._status = 'finished';
    }


}
"
kcDgyciW,you think i'm such a flower,rosswolf,HTML,Monday 22nd of May 2023 10:37:53 AM CDT,"<center><link href=""https://dl.dropbox.com/s/0wgl9d2fkpbis0f/you%20think%20i%27m%20such%20a%20flower.css"" rel=""stylesheet""><div id=""rr_you-think-im-such-a-flower"" style=""--width: 430px; --img-height: 200px; --accent: #e9c627; --title-color: #000; --subtitle-color: #dadada; --main-font: 'Karla', sans-serif; --main-font-size: 12px; --main-font-line-space: 140%;""><a href=""https://is.gd/rossr"" title=""「by ross」""></a><div class=""rcontainer""><div class=""rheader"" style=""background-image: url(https://64.media.tumblr.com/6d3532a31f7019b49eaad923ae7588db/af6eeb81c3da1a25-c6/s540x810/b096de23357e8cb31d870010488c1fb0a0b1912d.gifv);""></div><div class=""rtitle""><b>You think I'm such a flower</b><i>My petals are poison that you smoke on 'em </i></div><div class=""rtxt"">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam convallis, libero non finibus finibus, est nisl pulvinar lacus, eu dictum leo lorem a magna. Morbi accumsan, odio quis mollis sollicitudin, sapien leo aliquam nisl, vel ornare justo diam pretium libero. Nunc ut mauris non enim scelerisque euismod. Quisque mollis neque arcu, vitae vestibulum urna auctor sit amet. Nam posuere eget ante in porttitor. Nulla nunc elit, elementum ac convallis ultricies, placerat sed arcu. In eu convallis orci, quis sollicitudin ante. Suspendisse vel vehicula metus, ut sagittis dui. Nam tristique, ipsum ut commodo dapibus, orci mauris tincidunt lorem, in tristique odio arcu at tortor. Ut consectetur tristique ante id feugiat. Sed velit urna, dapibus eget tristique vitae, volutpat a purus. Fusce eu ex nec ante elementum elementum.

Sed volutpat condimentum finibus. Ut non libero et diam porta placerat id eget risus. Pellentesque sodales odio at ligula laoreet tincidunt. Vestibulum nec tellus nunc. In hac habitasse platea dictumst. Donec eros enim, aliquam ut est quis, malesuada convallis ipsum. Integer facilisis diam quis magna efficitur auctor. Pellentesque varius, nisi in semper pharetra, justo orci rhoncus purus, eu volutpat nibh eros bibendum sem. Donec egestas nisi eget diam molestie, eget ullamcorper nulla egestas. Nam tristique massa nec elit maximus, a placerat elit maximus. Aliquam viverra augue quis massa tincidunt fringilla. Sed in sapien mi. Morbi feugiat, diam vel dictum rutrum, quam nisi aliquam dui, consequat malesuada augue purus at dolor. Interdum et malesuada fames ac ante ipsum primis in faucibus. Quisque in dignissim metus.</div></div></div></center>"
HfFFxq1W,HA - YAML - Markdown card with weather forecast data,dykandDK,YAML,Monday 22nd of May 2023 10:28:37 AM CDT,"type: markdown
content: >
  <table>
  <tr><th width=35px></th><th align=left width=150px>Tidspunkt</th><th
  align=right width=75px>Temperatur</th><th align=right
  width=75px>Nedbør</th><th align=right width=75px>Vind</th></tr>
  {% for w in  state_attr('weather.home_hourly','forecast') -%}
  {% set h=w.datetime | as_datetime | as_local %}
  {% if ((h.hour/2) | int) == (h.hour/2) %}
  {% if h.day==now().day %} {% set d='I dag' %} {% else %} {% set d='I morgen'
  %} {% endif %}
  <tr><td><ha-icon icon='mdi:weather-{{w.condition | replace('partly','partly-')
  | replace('clear','') | replace('lightning','lightning-') |
  replace('snowyrainy','snowy-rainy')-}}'/></ha-icon></td>
  <td>{{ d }} {{ w.datetime | as_timestamp | timestamp_custom('%H.00',
  local=True) -}}</td>
  <td align=right>{{ w.temperature }} °C</td>
  <td align=right>{{ w.precipitation | int }} mm</td>
  <td align=right>{{ w.wind_speed | int }} m/s</td></tr>
  {% endif %}
  {% endfor -%}
  </table>
"
Ce7T3tF8,Geojson sencillo,ZeroSeventty,JSON,Monday 22nd of May 2023 10:10:05 AM CDT,"{
  ""type"": ""FeatureCollection"",
  ""features"": [
    {
      ""type"": ""Feature"",
      ""properties"": {},
      ""geometry"": {
        ""coordinates"": [
          -69.33638782604167,
          18.54031609548248
        ],
        ""type"": ""Point""
      }
    },
    {
      ""type"": ""Feature"",
      ""properties"": {},
      ""geometry"": {
        ""coordinates"": [
          [
            [
              -69.38881983360396,
              18.9531972838206
            ],
            [
              -69.38881983360396,
              18.786076016137216
            ],
            [
              -69.0466319947763,
              18.786076016137216
            ],
            [
              -69.0466319947763,
              18.9531972838206
            ],
            [
              -69.38881983360396,
              18.9531972838206
            ]
          ]
        ],
        ""type"": ""Polygon""
      }
    }
  ]
}"
d4Ut3gQd,form.py,KuroCS,Python,Monday 22nd of May 2023 09:46:28 AM CDT,"import tkinter
from tkinter import *
from tkinter import messagebox
import sqlite3
import ttkbootstrap as ttk

register_window = tkinter.Tk()
register_window.title(""Health Registration Form"")
register_window.resizable(False, False)
register_window.minsize(width=500, height=300)

#Database

class Mainframe:

    def __init__(self, frame):

        frame = tkinter.Frame(register_window)
        frame.pack()

        self.user_info_frame = ttk.LabelFrame(frame, text=""Resident Information"")
        self.user_info_frame.grid(row= 0, column= 0, sticky=""news"", padx=10, pady=5)

        self.first_name_label = tkinter.Label(self.user_info_frame, text=""First Name"")
        self.first_name_label.grid(row=0, column=0)
        self.last_name_label = tkinter.Label(self.user_info_frame, text=""Last Name"")
        self.last_name_label.grid(row=0, column=1)

        self.first_name_entry = ttk.Entry(self.user_info_frame, bootstyle=""dark"")
        self.last_name_entry = ttk.Entry(self.user_info_frame, bootstyle=""dark"")
        self.first_name_entry.grid(row=1, column=0)
        self.last_name_entry.grid(row=1, column=1)

        self.gender_label = tkinter.Label(self.user_info_frame, text=""Gender"")
        self.gender_label.grid(row=0, column=2)

        self.gender_var = tkinter.StringVar(value=""Undefined"")
        self.gender_radio_button = ttk.Radiobutton(self.user_info_frame, text = ""Male"", value = ""Male"", variable=self.gender_var, bootstyle=""dark"").grid(row=1, column=2)
        self.gender_radio_button2 = ttk.Radiobutton(self.user_info_frame, text=""Female"", value = ""Female"", variable=self.gender_var, bootstyle=""dark"").grid(row=1, column=3)

        self.age_label = tkinter.Label(self.user_info_frame, text=""Age"")
        self.age_entry = ttk.Spinbox(self.user_info_frame, bootstyle=""dark"", from_=1, to=100, width=16)
        self.age_label.grid(row=2, column=0)
        self.age_entry.grid(row=3, column=0, sticky=""we"")

        self.contact_number_label = tkinter.Label(self.user_info_frame, text=""Contact Number"")
        self.contact_number_entry = ttk.Entry(self.user_info_frame, bootstyle=""dark"")
        self.contact_number_label.grid(row=2 , column= 1)
        self.contact_number_entry.grid(row=3, column= 1, sticky=""news"")

        for widget in self.user_info_frame.winfo_children():
            widget.grid_configure(padx=10, pady=5)

        #Address
        self.address_frame = ttk.LabelFrame(frame, text=""Address"")
        self.address_frame.grid(row=1, column=0, sticky=""news"", padx=10, pady=5)

        self.address_label = tkinter.Label(self.address_frame, text=""Street, Building, House No."")
        self.address_entry = ttk.Entry(self.address_frame, width=46, bootstyle=""dark"")
        self.address_label.grid(row=0, column=0)
        self.address_entry.grid(row=1, column=0, pady=5)

        self.district_label = tkinter.Label(self.address_frame, text=""Municipality / District"")
        self.district_entry = ttk.Combobox(self.address_frame, values=[""Barangay Uno"", ""Barangay Dos"", ""Barangay Tres"", ""Barangay Quatro""], width=30, bootstyle=""dark"", state=""readonly"")
        self.district_label.grid(row=0, column=1)
        self.district_entry.grid(row=1, column=1, pady=5)

        for widget in self.address_frame.winfo_children():
            widget.grid_configure(padx=10, pady=5)

        #Terms and Conditions
        self.tnc_frame = ttk.LabelFrame(frame, text=""Terms and Conditions"")
        self.tnc_frame.grid(row=2, column=0, sticky=""news"", padx=10, pady=5)

        self.accept_tnc_var = tkinter.StringVar(value=""Disagree"")
        self.tnc_checkbox = ttk.Checkbutton(self.tnc_frame, text=""By checking this button, you agree to our User Terms and Conditions"",
                                        variable=self.accept_tnc_var, bootstyle=""dark"", onvalue=""Agree"", offvalue=""Disagree"")
        self.tnc_checkbox.grid(row=0,column=0, padx=5, pady=5)

        #Register Button
        self.button = ttk.Button(frame, text=""Register"", bootstyle=""dark"", command=lambda: [self.register_data(), self.fill_up_data()])
        self.button.grid(row=3, column=0, sticky=""news"", padx=10, pady=5)

    def fill_up_data(self):
        agree = self.accept_tnc_var.get()
        firstname = self.first_name_entry.get()
        lastname = self.last_name_entry.get()
        age = self.age_entry.get()
        contact_number = self.contact_number_entry.get()
        address = self.address_entry.get()
        district = self.district_entry.get()
        gender = self.gender_var.get()

        if agree == ""Agree"" and firstname and lastname and age and address and district and gender!=""Undefined"":
            
            if contact_number.isdigit():
                import form2
                self.register_window.destroy()
            else:
                tkinter.messagebox.showwarning(title= ""Error"", message= ""Invalid Contact Number. Please Try Again"")
        else:
            tkinter.messagebox.showwarning(title= ""Error"", message= ""Missing Information Required"")

    def register_data(self):
        agree = self.accept_tnc_var.get()
        count = 0

        if agree == ""Agree"":
            firstname = self.first_name_entry.get()
            lastname = self.last_name_entry.get()
            age = self.age_entry.get()
            contact_number = self.contact_number_entry.get()
            address = self.address_entry.get()
            district = self.district_entry.get()
            gender = self.gender_var.get()

            if firstname and lastname and age and contact_number.isdigit() and address and district and gender!=""Undefined"":
                print(""User Information Successfully Registered"")
                #Database Table
                conn = sqlite3.connect('userDatabase.db')
                table_create_query = '''CREATE TABLE IF NOT EXISTS Resident_Data
                    (firstname TEXT, lastname TEXT, age INT, gender TEXT, contact_number INT, address TEXT, district TEXT)
                '''
                conn.execute(table_create_query)
                #Input Data
                data_input_query = '''INSERT INTO Resident_Data (firstname, lastname, age, gender, contact_number, address, district) VALUES
                (?, ?, ?, ?, ?, ?, ?)'''
                data_input_tuple = (firstname, lastname, age, gender, contact_number, address, district)
                cursor = conn.cursor()
                cursor.execute(data_input_query, data_input_tuple)
                conn.commit()
                conn.close()

            else:
                pass

        else:
            tkinter.messagebox.showwarning(title= ""Error"", message= ""You have not agreed to our the Terms and Conditions."")

e = Mainframe(register_window)

register_window.mainloop()"
9wF9zKxX,main.py,KuroCS,Python,Monday 22nd of May 2023 09:45:57 AM CDT,"import sqlite3
import tkinter
import ttkbootstrap
from tkinter import ttk
from tkinter import *
from tkinter import messagebox

window = tkinter.Tk()
window.title(""Login form"")
window.resizable(False, False)
window.geometry('440x300')
window.configure()

def login():

    password = ""admin""
    if password_entry.get()==password:
        messagebox.showinfo(title=""Login Success"", message=""You successfully logged in."")
        window.state(newstate='iconic')
        
        def clear_data():
            for item in resident_treeview.get_children():
                resident_treeview.delete(item)

        def query_data():
            conn = sqlite3.connect(""userDatabase.db"")
            c = conn.cursor()
            c.execute(""SELECT * FROM Resident_Data"")
            records = c.fetchall()

            global count
            count = 0
            for row in records:
                if count % 2 == 0:
                    resident_treeview.insert("""", index='end', iid=count, values=row, tags=('evenrow',))
                else:
                    resident_treeview.insert("""", index='end', iid=count, values=row, tags=('oddrow',))
                count += 1

            print((""Table Query Successfull""))
            conn.commit()
            conn.close()

        #CRUD
        def add_data():

            firstname = fn_entry.get()
            lastname = ln_entry.get()
            age = age_entry.get()
            gender = gender_entry.get()
            contact_number = contact_entry.get()
            address = address_entry.get()
            district = district_entry.get()

            print(""User Information Successfully Registered"")

            conn = sqlite3.connect('userDatabase.db')
            table_create_query = '''CREATE TABLE IF NOT EXISTS Resident_Data
                (firstname TEXT, lastname TEXT, age INT, gender TEXT, contact_number INT, address TEXT, district TEXT)
            '''
            conn.execute(table_create_query)
            #Input Data
            data_input_query = '''INSERT INTO Resident_Data (firstname, lastname, age, gender, contact_number, address, district) VALUES
            (?, ?, ?, ?, ?, ?, ?)'''
            data_input_tuple = (firstname, lastname, age, gender, contact_number, address, district)
            cursor = conn.cursor()
            cursor.execute(data_input_query, data_input_tuple)
            conn.commit()
            conn.close()
            
            import form2

        def remove_data():
            x = resident_treeview.selection()[0]
            resident_treeview.delete(x)

        def update_record():
            conn = sqlite3.connect(""userDatabase.db"")
            c = conn.cursor()

            firstname = str(fn_entry.get())
            lastname = str(ln_entry.get())
            gender = str(gender_entry.get())
            age = int(age_entry.get())
            contact = int(contact_entry.get())
            address = str(address_entry.get())
            district = str(district_entry.get())

            value = [firstname, firstname, lastname, gender, age, contact, address, district]
            selected = resident_treeview.focus()
            resident_treeview.item(selected, text="""", values=value)

            fn_entry.delete(0, tkinter.END)
            ln_entry.delete(0, tkinter.END)
            gender_entry.delete(0, tkinter.END)
            age_entry.delete(0, tkinter.END)
            contact_entry.delete(0, tkinter.END)
            address_entry.delete(0, tkinter.END)
            district_entry.delete(0, tkinter.END)

            data_update_query = '''UPDATE Resident_Data SET firstname= ""Jamal"", lastname= ""Blames"", gender= ""Male"", age= ""23"", contact_number= ""23123124"", address= ""h"", district= ""Barangay Uno"" WHERE firstname = ""Hello"";'''

            c.execute(data_update_query, value)
            conn.commit()
            conn.close()

        def save_data():
            conn = sqlite3.connect(""userDatabase.db"")
            save_prompt = messagebox.askyesno(title=""Database"", message=""Save all data changes?"")
            if save_prompt:
                messagebox.showinfo(title=""Save Database"", message=""Database saved successfully."")
                print(""Data saved successfully"")
                conn.commit()
                conn.close()
            else:
                conn.close()

        def exit_prog():
            exit_prompt = messagebox.askyesno(title=""Exit Program"", message=""Do you want to exit the Program?"")
            if exit_prompt:
                main_window.destroy()
            
        def health_history():
            health_window = tkinter.Toplevel()
            health_window.title(""Health History Treeview"")
            health_window.resizable(False, False)

            health_frame = ttk.Frame(health_window)
            health_frame.pack()

            columns = (""Back Pain"", ""Headaches"", ""Surgery"", ""Currently Prescribed Med"", ""Course of Medication"", ""COVID"", ""Diabetes"", ""Respiratory Problems"", ""Others"")

            name_treeview = ttk.Treeview(health_frame, columns=(""First Name"", ""Last Name""), show=""headings"", bootstyle=""dark"", height=20)
            name_treeview.column(""First Name"", width=50, anchor=tkinter.CENTER)
            name_treeview.column(""Last Name"", width=50, anchor=tkinter.CENTER)
            name_treeview.heading(""First Name"", text=""Name"")
            name_treeview.heading(""Last Name"", text=""Surname"")
            name_treeview.grid(row=0, column=0, pady=5)

            health_treeview = ttk.Treeview(health_frame, columns=columns, show=""headings"", bootstyle=""dark"", height=20)
            health_treeview.column(""Back Pain"", width=70, anchor=tkinter.CENTER)
            health_treeview.column(""Headaches"", width=80, anchor=tkinter.CENTER)
            health_treeview.column(""Surgery"", width=60, anchor=tkinter.CENTER)
            health_treeview.column(""Currently Prescribed Med"", width=150, anchor=tkinter.CENTER)
            health_treeview.column(""Course of Medication"", width=130, anchor=tkinter.CENTER)
            health_treeview.column(""COVID"", width=60, anchor=tkinter.CENTER)
            health_treeview.column(""Diabetes"", width=70, anchor=tkinter.CENTER)
            health_treeview.column(""Respiratory Problems"", width=120, anchor=tkinter.CENTER)
            health_treeview.column(""Others"", width=70, anchor=tkinter.CENTER)

            health_treeview.heading(""Back Pain"", text=""Back Pain"")
            health_treeview.heading(""Headaches"", text=""Headaches"")
            health_treeview.heading(""Surgery"", text=""Surgery"")
            health_treeview.heading(""Currently Prescribed Med"", text=""Currently Prescribed Med"")
            health_treeview.heading(""Course of Medication"", text=""Course of Medication"")
            health_treeview.heading(""COVID"", text=""COVID"")
            health_treeview.heading(""Diabetes"", text=""Diabetes"")
            health_treeview.heading(""Respiratory Problems"", text=""Respiratory Problems"")
            health_treeview.heading(""Others"", text=""Others"")
            health_treeview.grid(row=0, column=1, padx=0, pady=5)

            tree_scroll = ttk.Scrollbar(health_frame, bootstyle=""round-dark"")
            tree_scroll.grid(row=0, column=2, sticky=""news"")
            tree_scroll.config(command=lambda: (health_treeview.yview, name_treeview.yview))

            health_treeview.tag_configure('oddrow', background=""white"")
            health_treeview.tag_configure('evenrow', background=""lightgray"")

            name_treeview.tag_configure('oddrow', background=""white"")
            name_treeview.tag_configure('evenrow', background=""lightgray"")
            
            def query_health_data():
                conn = sqlite3.connect(""userDatabase.db"")
                c = conn.cursor()
                c2 = conn.cursor()
                health_alter_query = '''CREATE TABLE IF NOT EXISTS Resident_Data
                                        (healthq1 TEXT, healthq2 TEXT, healthq3 TEXT, healthq4 TEXT, healthq5 TEXT, healthq6 TEXT, healthq7 TEXT, healthq8 TEXT, healthq9entry TEXT, firstname TEXT)'''
                conn.execute(health_alter_query)


                c.execute('''SELECT * FROM Health_Data''')
                c2.execute('''SELECT firstname, lastname FROM Resident_Data''')
                records = c.fetchall()
                records2 = c2.fetchall()

                global count
                count = 0
                for row in records:
                    if count % 2 == 0:
                        health_treeview.insert("""", index='end', iid=count, values=row, tags=('evenrow',))
                    else:
                        health_treeview.insert("""", index='end', iid=count, values=row, tags=('oddrow',)) 
                    count += 1
                
                for row in records2:
                    if count % 2 == 0:
                        name_treeview.insert("""", index=""end"", iid=count, values=row, tags=('evenrow',))
                    else:
                        name_treeview.insert("""", index=""end"", iid=count, values=row, tags=('oddrow',))
                    count += 1

                print((""Table Query Successfull""))
                conn.commit()
                conn.close()
            
            query_health_data()

        #Frame 1
        main_window = tkinter.Toplevel()
        main_window.title(""Database Application"")
        main_window.resizable(False, False)

        main_frame = ttk.Frame(main_window)
        main_frame.pack()

        data_label = ttk.Label(main_frame, text=""RESIDENT RECORDS"", bootstyle=""dark"", font={'Calibri', 50, 'bold'})
        data_label.grid(row=0, column=0, pady=5, sticky=""ns"")

        #Treeview

        columns=(""First Name"", ""Last Name"", ""Age"", ""Gender"", ""Contact Number"", ""Address"", ""District"")
        resident_treeview = ttk.Treeview(main_frame, columns=columns, show=""headings"", bootstyle=""dark"", height=20)

        #Treeview Columns
        resident_treeview.column(""First Name"", width=100)
        resident_treeview.column(""Last Name"", width=100)
        resident_treeview.column(""Age"", width=50)
        resident_treeview.column(""Gender"", width=100)
        resident_treeview.column(""Contact Number"", width=130)
        resident_treeview.column(""Address"", width=200)
        resident_treeview.column(""District"", width=100)

        resident_treeview.heading(""First Name"", text=""First Name"")
        resident_treeview.heading(""Last Name"", text=""Last Name"")
        resident_treeview.heading(""Age"", text=""Age"")
        resident_treeview.heading(""Gender"", text=""Gender"")
        resident_treeview.heading(""Contact Number"", text=""Contact Number"")
        resident_treeview.heading(""Address"", text=""Address"")
        resident_treeview.heading(""District"", text=""District"")
        resident_treeview.grid(row=1, column=0, sticky=""news"", padx=10, pady=10)

        resident_treeview.tag_configure('oddrow', background=""white"")
        resident_treeview.tag_configure('evenrow', background=""lightgray"")

        scrollbar = ttk.Scrollbar(main_frame, orient=tkinter.VERTICAL, command=resident_treeview.yview, bootstyle=""round-dark"")
        resident_treeview.configure(yscrollcommand=scrollbar.set)
        scrollbar.grid(row=1, column=2, sticky=""ns"")

        #Entry Frame
        entry_frame = ttk.LabelFrame(main_frame, text=""Update Records"", bootstyle=""dark"")
        entry_frame.grid(row=2, column=0, sticky=""news"", padx=10, pady=5)
            
        fn_label = ttk.Label(entry_frame, text=""First Name"")
        fn_label.grid(row=0, column=0)
        fn_entry = ttk.Entry(entry_frame)
        fn_entry.grid(row=1, column=0)

        ln_label = ttk.Label(entry_frame, text=""Last Name"")
        ln_label.grid(row=0, column=1)
        ln_entry = ttk.Entry(entry_frame)
        ln_entry.grid(row=1, column=1)

        gender_label = ttk.Label(entry_frame, text=""Gender"")
        gender_label.grid(row=0, column=2)
        gender_entry = ttk.Combobox(entry_frame, values=["""", ""Male"", ""Female""], state=""readonly"")
        gender_entry.grid(row=1, column=2)

        age_label = ttk.Label(entry_frame, text=""Age"")
        age_entry = ttk.Spinbox(entry_frame, from_=1, to=100, width=5)
        age_label.grid(row=0, column=3)
        age_entry.grid(row=1, column=3)

        contact_label = ttk.Label(entry_frame, text=""Contact Number"")
        contact_entry = ttk.Entry(entry_frame)
        contact_label.grid(row=0, column=4)
        contact_entry.grid(row=1, column=4)

        address_label = ttk.Label(entry_frame, text=""Address"")
        address_entry = ttk.Entry(entry_frame, width=45)
        address_label.grid(row=0, column=5)
        address_entry.grid(row=1, column=5)

        district_label = ttk.Label(entry_frame, text=""District"")
        district_entry = ttk.Combobox(entry_frame, values=["""", ""Barangay Uno"", ""Barangay Dos"", ""Barangay Tres"", ""Barangay Quatro""], state=""readonly"")
        district_label.grid(row=0, column=6)
        district_entry.grid(row=1, column=6)

        for widget in entry_frame.winfo_children():
            widget.grid_configure(padx=5, pady=5)

        for widget in entry_frame.winfo_children():
            widget.configure(bootstyle=""dark"")

        #Buttons Frame
        button_frame = ttk.LabelFrame(main_frame, text=""Commands"", bootstyle=""dark"")
        button_frame.grid(row=3, column=0, sticky=""news"", padx=10, pady=10)

        add_button = ttk.Button(button_frame, text=""Add Data"", bootstyle=""dark"", command=lambda: add_data(), width=20)
        add_button.grid(row=0, column=0, sticky=""news"")

        delete_button = ttk.Button(button_frame, text=""Delete Row"", bootstyle=""dark"", command=lambda: remove_data(), width=20)
        delete_button.grid(row=0, column=1, sticky=""news"")

        update_button = ttk.Button(button_frame, text=""Update Row"", bootstyle=""dark"", command=lambda: update_record(), width=20)
        update_button.grid(row=0, column=2, sticky=""news"")

        save_button = ttk.Button(button_frame, text=""Save Database"", bootstyle=""dark"", command=lambda: save_data(), width=20)
        save_button.grid(row=0, column=3, sticky=""news"")

        health_button = ttk.Button(button_frame, text=""Health History"", bootstyle=""dark"", command= lambda: health_history(), width=20)
        health_button.grid(row=0, column=4, sticky=""news"")

        exit_button = ttk.Button(button_frame, text=""Exit Database"", bootstyle=""dark"", command=lambda: exit_prog(), width=20)
        exit_button.grid(row=0, column=8, sticky=""news"")

        for widget in button_frame.winfo_children():
            widget.grid_configure(padx=5, pady=10)

        query_data()

        main_window.mainloop()
    else:
        messagebox.showerror(title=""Error"", message=""Invalid login."")

frame = tkinter.Frame()

login_label = ttk.Label(frame, text=""Database Login"", font={40})
login_label.grid(row=0, column=1, pady=40)

password_label = ttk.Label(frame, text=""Enter Access Key"")
password_label.grid(row=1, column=1, padx= 5, pady=5)

password_entry = ttk.Entry(frame, show=""*"", width=40, bootstyle=""dark"")
password_entry.grid(row=2, column=1, sticky=""news"", pady=5)

login_button = ttk.Button(frame, text=""Login"", command=login, width=40, bootstyle=""dark"")
login_button.grid(row=3, column=1, sticky=""news"", pady=5)

frame.pack()

window.mainloop()"
zFzbksjk,Untitled,westor,mIRC,Monday 22nd of May 2023 09:32:51 AM CDT,"alias -l mywhoislabel { return MYWHOISLABEL }

alias whoisx {
  if ($ircv3caps(batch).enabled) && (!$ircv3caps(labeled-response).enabled) {
    echo -atc info $prefixsys $calias $+ : IRCv3 labeled-response capability is not enabled on $network
    return
  }
  if (!$ircv3caps(batch).enabled) && ($ircv3caps(labeled-response).enabled) {
    echo -atc info $prefixsys $calias $+ : IRCv3 batch capability is not enabled on $network
    return 
  }
  if (!$ircv3caps(batch).enabled) && (!$ircv3caps(labeled-response).enabled) {
    echo -atc info $prefixsys $calias $+ : IRCv3 batch capability AND IRCv3 labeled-response capability are not enabled on $network
    return
  }

  .quote @label= $+ $mywhoislabel WHOIS $1 $1

  if (!$window(@WHOIS)) { window -menkz1 @WHOIS }  
}

RAW *:*: {
  if ($msgtags(batch).tag) && ($msgtags(batch).key == %mywhoisbatch) {
    haltdef

    if ($numeric == 311) {
      echo -tc info @WHOIS Running WHOIS on $2 on $network
      echo -t @WHOIS $2 $3 $+ @ $+ $4-

      return
    }

    if ($numeric == 317) {
      echo -t @WHOIS $2 $remove($6,$chr(44)) $duration($3) $+ $chr(44) $7 $asctime($4)

      return
    }

    if ($numeric == 330) {
      echo -t @WHOIS $2 $4- $3

      return
    }

    if ($numeric == 344) {
      echo -t @WHOIS $2 $4-7 ( $+ $3 $+ )

      return
    }

    ; echo -t @WHOIS IS: $numeric --> $1-
    echo -t @WHOIS $2-
  }

  if ($numeric == BATCH) { 
    if ($msgtags(label).key == $mywhoislabel) { set -eu10 %mywhoisbatch $right($1,-1) }
    if ($1- == - $+ %mywhoisbatch) { unset %mywhoisbatch }
  }

}"
BUA2aSbA,Fortnite bunch of weapons,h3,Java,Monday 22nd of May 2023 09:22:53 AM CDT,"Begin Map
   Begin Level
      Begin Actor Class=/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C Name=Creative_Tiered_Chest_C_UAID_F02F7423D364307801_1224832553 Archetype=/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C'/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Default__Creative_Tiered_Chest_C' ActorFolderPath=None
         Begin Object Class=/Script/Engine.StaticMeshComponent Name=""StaticMeshComponent0"" Archetype=/Script/Engine.StaticMeshComponent'/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Default__Creative_Tiered_Chest_C:StaticMeshComponent0'
         End Object
         Begin Object Class=/Script/Engine.BoxComponent Name=""BoundingBoxComponent"" Archetype=/Script/Engine.BoxComponent'/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Default__Creative_Tiered_Chest_C:BoundingBoxComponent'
         End Object
         Begin Object Class=/Script/Engine.StaticMeshComponent Name=""EditorOnlyStaticMeshComponent"" Archetype=/Script/Engine.StaticMeshComponent'/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Default__Creative_Tiered_Chest_C:EditorOnlyStaticMeshComponent'
         End Object
         Begin Object Class=/Script/FortniteGame.FortAbilitySystemComponent Name=""AbilitySystemComponent""
         End Object
         Begin Object Class=/Script/FortniteGame.FortActorMetadataComponent Name=""FortActorMetadataComponent""
         End Object
         Begin Object Class=/Script/Engine.AudioComponent Name=""Chest_Ambient_Sound"" Archetype=/Script/Engine.AudioComponent'/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C:AudioComponent_1'
         End Object
         Begin Object Class=/Script/FortniteGame.CreativeIslandResourceComponent Name=""CreativeIslandResource"" Archetype=/Script/FortniteGame.CreativeIslandResourceComponent'/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C:CreativeIslandResource_GEN_VARIABLE'
         End Object
         Begin Object Class=/Script/Niagara.NiagaraComponent Name=""NS_Athena_Loot_Chest_Aura"" Archetype=/Script/Niagara.NiagaraComponent'/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C:NS_Athena_Loot_Chest_Aura_GEN_VARIABLE'
         End Object
         Begin Object Class=/Script/Engine.TimelineComponent Name=""MobileOnInteractTL""
         End Object
         Begin Object Class=/Script/Engine.TimelineComponent Name=""MobileSelectedTL""
         End Object
         Begin Object Name=""StaticMeshComponent0""
            OverrideMaterials(0)=/Script/Engine.MaterialInstanceDynamic'""/Engine/Transient.MaterialInstanceDynamic_139""'
            LDMaxDrawDistance=0.000000
            CachedMaxDrawDistance=2800.000000
            BodyInstance=(MaxAngularVelocity=3599.999756)
            OnComponentPhysicsStateChanged=(Creative_Tiered_Chest_C_UAID_F02F7423D364307801_1224832553.OnPhysicsStateChanged)
            RelativeLocation=(X=-1264.000000,Y=-896.000000,Z=7600.000000)
            RelativeRotation=(Pitch=0.000000,Yaw=-89.999999,Roll=0.000000)
         End Object
         Begin Object Name=""BoundingBoxComponent""
            CachedMaxDrawDistance=2800.000000
            AttachParent=""StaticMeshComponent0""
         End Object
         Begin Object Name=""EditorOnlyStaticMeshComponent""
            CachedMaxDrawDistance=2800.000000
            AttachParent=""StaticMeshComponent0""
         End Object
         Begin Object Name=""AbilitySystemComponent""
            ActiveGameplayCues=(Owner=/Script/FortniteGame.FortAbilitySystemComponent'""AbilitySystemComponent""')
            MinimalReplicationGameplayCues=(Owner=/Script/FortniteGame.FortAbilitySystemComponent'""AbilitySystemComponent""')
            bAutoActivate=False
         End Object
         Begin Object Name=""FortActorMetadataComponent""
            TemplateID=""/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C#3462902317""
         End Object
         Begin Object Name=""Chest_Ambient_Sound""
            AttachParent=""StaticMeshComponent0""
            UCSSerializationIndex=0
            bNetAddressable=True
            CreationMethod=SimpleConstructionScript
         End Object
         Begin Object Name=""CreativeIslandResource""
            UCSSerializationIndex=0
            bNetAddressable=True
            CreationMethod=SimpleConstructionScript
         End Object
         Begin Object Name=""NS_Athena_Loot_Chest_Aura""
            OverrideParameters=()
            CachedMaxDrawDistance=2800.000000
            AttachParent=""StaticMeshComponent0""
            UCSSerializationIndex=0
            bNetAddressable=True
            CreationMethod=SimpleConstructionScript
         End Object
         Begin Object Name=""MobileOnInteractTL""
            TheTimeline=(LengthMode=TL_TimelineLength,Length=0.250000,InterpFloats=((FloatCurve=/Script/Engine.CurveFloat'""/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C:CurveFloat_0""',TrackName=""LERP"",FloatPropertyName=""MobileOnInteractTL_LERP_0EDB17994610CCA511D017A7FCB5FD6E"")),TimelinePostUpdateFunc=Creative_Tiered_Chest_C_UAID_F02F7423D364307801_1224832553.MobileOnInteractTL__UpdateFunc,TimelineFinishedFunc=Creative_Tiered_Chest_C_UAID_F02F7423D364307801_1224832553.MobileOnInteractTL__FinishedFunc,PropertySetObject=/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C'""Creative_Tiered_Chest_C_UAID_F02F7423D364307801_1224832553""',DirectionPropertyName=""MobileOnInteractTL__Direction_0EDB17994610CCA511D017A7FCB5FD6E"")
            bNetAddressable=True
            CreationMethod=UserConstructionScript
         End Object
         Begin Object Name=""MobileSelectedTL""
            TheTimeline=(LengthMode=TL_TimelineLength,Length=0.210000,InterpFloats=((FloatCurve=/Script/Engine.CurveFloat'""/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C:CurveFloat_0_1""',TrackName=""LerpObject"",FloatPropertyName=""MobileSelectedTL_LerpObject_3B3245644A941BB300D1A3B017FAF4AC""),(FloatCurve=/Script/Engine.CurveFloat'""/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C:CurveFloat_1""',TrackName=""LerpInteactoIcon"",FloatPropertyName=""MobileSelectedTL_LerpInteactoIcon_3B3245644A941BB300D1A3B017FAF4AC"")),TimelinePostUpdateFunc=Creative_Tiered_Chest_C_UAID_F02F7423D364307801_1224832553.MobileSelectedTL__UpdateFunc,TimelineFinishedFunc=Creative_Tiered_Chest_C_UAID_F02F7423D364307801_1224832553.MobileSelectedTL__FinishedFunc,PropertySetObject=/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C'""Creative_Tiered_Chest_C_UAID_F02F7423D364307801_1224832553""',DirectionPropertyName=""MobileSelectedTL__Direction_3B3245644A941BB300D1A3B017FAF4AC"")
            bNetAddressable=True
            CreationMethod=UserConstructionScript
         End Object
         NS_Athena_Loot_Chest_Aura=""NS_Athena_Loot_Chest_Aura""
         CreativeIslandResource=""CreativeIslandResource""
         TrasureLight=""TrasureLight""WID_SBBossLaser.WID_SBBossLaser
         Chest_Ambient_Sound=""Chest_Ambient_Sound""
         MobileSelectedTL=/Script/Engine.TimelineComponent'""MobileSelectedTL""'
         MobileOnInteractTL=/Script/Engine.TimelineComponent'""MobileOnInteractTL""'
		 SpawnItems(0)=(ItemPrimaryAssetId=""Weapon:WID_Pistol_AutoAim"",Quantity=1)
		 SpawnItems(1)=(ItemPrimaryAssetId=""Weapon:WID_Wasabi_Claws"",Quantity=1)
		 SpawnItems(2)=(ItemPrimaryAssetId=""Weapon:WID_NyxGlass"",Quantity=1)
		 SpawnItems(3)=(ItemPrimaryAssetId=""Weapon:WID_Launcher_FeyCrab"",Quantity=1)
		 SpawnItems(4)=(ItemPrimaryAssetId=""Weapon:WID_Headset_A"",Quantity=1)
		 SpawnItems(5)=(ItemPrimaryAssetId=""Weapon:WID_Shotgun_Standard_C_Ore_T02"",Quantity=2)
		 SpawnItems(6)=(ItemPrimaryAssetId=""Weapon:WID_Sniper_Cosmos_Athena_VR"",Quantity=1)
		 SpawnItems(7)=(ItemPrimaryAssetId=""Weapon:WID_Athena_Bucket_Nice"",Quantity=1)
		 SpawnItems(8)=(ItemPrimaryAssetId=""Weapon:WID_SBBossLaser"",Quantity=1)
		 SpawnItems(9)=(ItemPrimaryAssetId=""Weapon:WID_Sniper_AMR_SR_Ore_T01"",Quantity=1)
		 SpawnItems(10)=(ItemPrimaryAssetId=""Weapon:WID_AshtonPack_Indigo"",Quantity=1)
		 SpawnItems(11)=(ItemPrimaryAssetId=""Weapon:AGID_AshtonPack_Hippo"",Quantity=1)
         ReplicatedLootTier=0
         StaticMeshComponent=""StaticMeshComponent0""
         BoxComponent=""BoundingBoxComponent""
         EditorOnlyStaticMeshComponent=""EditorOnlyStaticMeshComponent""
         CullDistance=2800.000000
         ComponentTypesWhitelistedForReplication(0)=/Script/CoreUObject.Class'""/Script/GeometryCollectionEngine.GeometryCollectionComponent""'
         SavedActorGuid=9948F73049ECBD42B99FFAB93F77FCAC
         ActorTemplateID=""/Game/Building/ActorBlueprints/Containers/Creative_Tiered_Chest.Creative_Tiered_Chest_C#3462902317""
         RootComponent=""StaticMeshComponent0""
         ActorLabel=""Creative_Tiered_Chest_C2147482644""
      End Actor
   End Level
Begin Surface
End Surface
End Map"
MWtTJ0xB,Project file  for   GUI SSH Generator QT Project,Mark2020H,C++ (with Qt extensions),Monday 22nd of May 2023 09:20:22 AM CDT,"/* This  code is  delivered in 4 or more parts and provides a  GUI mechanism  for  generating ssh keys using QT  C++ 
 * For Debian 12  65 bit The entire project can also be downloaded  via  GIT-HUB for this whom want to know more and  would  
 * Like to  re compile or gain  ideas as to how to do some of this 
 * All instructions plus  pre compiled code for  Debian 12  are available at git-hub  
 * @ this address https://github.com/markh2016/GUISSHGenerator.git
 * This is Part 5 The SSHGEN.pro file  MD Harrington London UK 22/05/2023
*/

QT       += core gui

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

CONFIG += c++17

# You can make your code fail to compile if it uses deprecated APIs.
# In order to do so, uncomment the following line.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

SOURCES += \
    main.cpp \
    dialog.cpp

HEADERS += \
    dialog.h

FORMS += \
    dialog.ui

# Default rules for deployment.
qnx: target.path = /tmp/$${TARGET}/bin
else: unix:!android: target.path = /opt/$${TARGET}/bin
!isEmpty(target.path): INSTALLS += target


"
P6dWTcgE,Part 4 main.cpp QT GUI SSH Generator,Mark2020H,C++,Monday 22nd of May 2023 09:16:56 AM CDT,"/* This  code is  delivered in 4 or more parts and provides a  GUI mechanism  for  generating ssh keys using QT  C++ 
 * For Debian 12  65 bit The entire project can also be downloaded  via  GIT-HUB for this whom want to know more and  would  
 * Like to  re compile or gain  ideas as to how to do some of this 
 * All instructions plus  pre compiled code for  Debian 12  are available at git-hub  
 * @ this address https://github.com/markh2016/GUISSHGenerator.git
 * This is Part 4 The main.cpp file  MD Harrington London UK 22/05/2023
*/

#include ""dialog.h""

#include <QApplication>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    Dialog w;
    w.show();
    return a.exec();
}
"
kgVkWQXL,Part 3 The UI File of the  GUI SSH Generator QT Project,Mark2020H,XML,Monday 22nd of May 2023 09:14:49 AM CDT,"/* This  code is  delivered in 4 or more parts and provides a  GUI mechanism  for  generating ssh keys using QT  C++ 
 * For Debian 12  65 bit The entire project can also be downloaded  via  GIT-HUB for this whom want to know more and  would  
 * Like to  re compile or gain  ideas as to how to do some of this 
 * All instructions plus  pre compiled code for  Debian 12  are available at git-hub  
 * @ this address https://github.com/markh2016/GUISSHGenerator.git
 * This is Part 3  The UI file  MD Harrington London UK 22/05/2023
*/
   <?xml version=""1.0"" encoding=""UTF-8""?>
<ui version=""4.0"">
 <class>Dialog</class>
 <widget class=""QDialog"" name=""Dialog"">
  <property name=""geometry"">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>496</width>
    <height>586</height>
   </rect>
  </property>
  <property name=""windowTitle"">
   <string>Dialog</string>
  </property>
  <layout class=""QVBoxLayout"" name=""verticalLayout"">
   <item>
    <layout class=""QHBoxLayout"" name=""horizontalLayout"">
     <item>
      <spacer name=""horizontalSpacer"">
       <property name=""orientation"">
        <enum>Qt::Horizontal</enum>
       </property>
       <property name=""sizeHint"" stdset=""0"">
        <size>
         <width>40</width>
         <height>20</height>
        </size>
       </property>
      </spacer>
     </item>
     <item>
      <widget class=""QLabel"" name=""mainLabel"">
       <property name=""font"">
        <font>
         <family>NotoSerifTamilSlanted SemiBold</family>
         <pointsize>11</pointsize>
        </font>
       </property>
       <property name=""styleSheet"">
        <string notr=""true""/>
       </property>
       <property name=""text"">
        <string>SSH Key Generator  GUI  MD Harrington
 London UK
22/05/23</string>
       </property>
       <property name=""alignment"">
        <set>Qt::AlignCenter</set>
       </property>
       <property name=""margin"">
        <number>6</number>
       </property>
      </widget>
     </item>
     <item>
      <spacer name=""horizontalSpacer_2"">
       <property name=""orientation"">
        <enum>Qt::Horizontal</enum>
       </property>
       <property name=""sizeHint"" stdset=""0"">
        <size>
         <width>40</width>
         <height>20</height>
        </size>
       </property>
      </spacer>
     </item>
    </layout>
   </item>
   <item>
    <widget class=""QFrame"" name=""frame"">
     <property name=""frameShape"">
      <enum>QFrame::WinPanel</enum>
     </property>
     <property name=""frameShadow"">
      <enum>QFrame::Raised</enum>
     </property>
     <property name=""lineWidth"">
      <number>2</number>
     </property>
     <layout class=""QFormLayout"" name=""formLayout_3"">
      <item row=""0"" column=""0"" colspan=""2"">
       <layout class=""QFormLayout"" name=""formLayout"">
        <item row=""3"" column=""0"" colspan=""2"">
         <layout class=""QHBoxLayout"" name=""horizontalLayout_4"">
          <item>
           <widget class=""QPushButton"" name=""btnSaveDetails"">
            <property name=""text"">
             <string> Save Detials</string>
            </property>
           </widget>
          </item>
          <item>
           <spacer name=""horizontalSpacer_5"">
            <property name=""orientation"">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name=""sizeType"">
             <enum>QSizePolicy::Fixed</enum>
            </property>
            <property name=""sizeHint"" stdset=""0"">
             <size>
              <width>51</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item>
           <widget class=""QPushButton"" name=""btnLoaddetails"">
            <property name=""text"">
             <string>&amp;Load Detials</string>
            </property>
           </widget>
          </item>
         </layout>
        </item>
        <item row=""2"" column=""0"" colspan=""2"">
         <layout class=""QHBoxLayout"" name=""horizontalLayout_3"">
          <item>
           <widget class=""QLabel"" name=""label_3"">
            <property name=""text"">
             <string>Password</string>
            </property>
           </widget>
          </item>
          <item>
           <spacer name=""horizontalSpacer_4"">
            <property name=""orientation"">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name=""sizeType"">
             <enum>QSizePolicy::Fixed</enum>
            </property>
            <property name=""sizeHint"" stdset=""0"">
             <size>
              <width>50</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item>
           <widget class=""QLineEdit"" name=""linePassword"">
            <property name=""sizePolicy"">
             <sizepolicy hsizetype=""Preferred"" vsizetype=""Fixed"">
              <horstretch>0</horstretch>
              <verstretch>0</verstretch>
             </sizepolicy>
            </property>
            <property name=""echoMode"">
             <enum>QLineEdit::Password</enum>
            </property>
           </widget>
          </item>
         </layout>
        </item>
        <item row=""1"" column=""0"" colspan=""2"">
         <layout class=""QHBoxLayout"" name=""horizontalLayout_2"">
          <item>
           <widget class=""QLabel"" name=""label_2"">
            <property name=""text"">
             <string>Email Address</string>
            </property>
           </widget>
          </item>
          <item>
           <spacer name=""horizontalSpacer_3"">
            <property name=""orientation"">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name=""sizeType"">
             <enum>QSizePolicy::Fixed</enum>
            </property>
            <property name=""sizeHint"" stdset=""0"">
             <size>
              <width>50</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item>
           <widget class=""QLineEdit"" name=""lineEmail"">
            <property name=""sizePolicy"">
             <sizepolicy hsizetype=""Preferred"" vsizetype=""Fixed"">
              <horstretch>0</horstretch>
              <verstretch>0</verstretch>
             </sizepolicy>
            </property>
            <property name=""text"">
             <string/>
            </property>
            <property name=""echoMode"">
             <enum>QLineEdit::Normal</enum>
            </property>
           </widget>
          </item>
         </layout>
        </item>
        <item row=""0"" column=""0"" colspan=""2"">
         <widget class=""QLabel"" name=""label_4"">
          <property name=""styleSheet"">
           <string notr=""true"">color: rgb(255, 0, 0);</string>
          </property>
          <property name=""text"">
           <string> Step 1  Please enter details  below </string>
          </property>
          <property name=""alignment"">
           <set>Qt::AlignCenter</set>
          </property>
         </widget>
        </item>
       </layout>
      </item>
     </layout>
    </widget>
   </item>
   <item>
    <layout class=""QHBoxLayout"" name=""horizontalLayout_7"">
     <item>
      <spacer name=""horizontalSpacer_8"">
       <property name=""orientation"">
        <enum>Qt::Horizontal</enum>
       </property>
       <property name=""sizeType"">
        <enum>QSizePolicy::Expanding</enum>
       </property>
       <property name=""sizeHint"" stdset=""0"">
        <size>
         <width>40</width>
         <height>20</height>
        </size>
       </property>
      </spacer>
     </item>
     <item>
      <widget class=""QLabel"" name=""label_8"">
       <property name=""sizePolicy"">
        <sizepolicy hsizetype=""Fixed"" vsizetype=""Preferred"">
         <horstretch>0</horstretch>
         <verstretch>0</verstretch>
        </sizepolicy>
       </property>
       <property name=""styleSheet"">
        <string notr=""true"">color: rgb(255, 0, 0);</string>
       </property>
       <property name=""text"">
        <string>Step 2 Generate SSH Key </string>
       </property>
      </widget>
     </item>
     <item>
      <spacer name=""horizontalSpacer_9"">
       <property name=""orientation"">
        <enum>Qt::Horizontal</enum>
       </property>
       <property name=""sizeHint"" stdset=""0"">
        <size>
         <width>40</width>
         <height>20</height>
        </size>
       </property>
      </spacer>
     </item>
    </layout>
   </item>
   <item>
    <widget class=""QFrame"" name=""frame_2"">
     <property name=""frameShape"">
      <enum>QFrame::WinPanel</enum>
     </property>
     <property name=""frameShadow"">
      <enum>QFrame::Raised</enum>
     </property>
     <property name=""lineWidth"">
      <number>2</number>
     </property>
     <layout class=""QFormLayout"" name=""formLayout_2"">
      <item row=""0"" column=""0"">
       <layout class=""QVBoxLayout"" name=""verticalLayout_6"">
        <item>
         <layout class=""QHBoxLayout"" name=""horizontalLayout_5"">
          <item>
           <widget class=""QLabel"" name=""label_5"">
            <property name=""text"">
             <string>Responces returned  for creating ssh key</string>
            </property>
           </widget>
          </item>
          <item>
           <spacer name=""horizontalSpacer_6"">
            <property name=""orientation"">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name=""sizeHint"" stdset=""0"">
             <size>
              <width>28</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item>
           <widget class=""QLabel"" name=""label_7"">
            <property name=""text"">
             <string>SSH Key Gen Operations</string>
            </property>
           </widget>
          </item>
         </layout>
        </item>
        <item>
         <layout class=""QHBoxLayout"" name=""horizontalLayout_6"">
          <item>
           <layout class=""QVBoxLayout"" name=""verticalLayout_3"">
            <item>
             <widget class=""QPlainTextEdit"" name=""txtResponce"">
              <property name=""overwriteMode"">
               <bool>true</bool>
              </property>
             </widget>
            </item>
            <item>
             <widget class=""QLabel"" name=""label_6"">
              <property name=""text"">
               <string>Use this field below for answer to responces</string>
              </property>
             </widget>
            </item>
            <item>
             <widget class=""QLineEdit"" name=""txtReplies""/>
            </item>
           </layout>
          </item>
          <item>
           <spacer name=""horizontalSpacer_7"">
            <property name=""orientation"">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name=""sizeHint"" stdset=""0"">
             <size>
              <width>18</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item>
           <layout class=""QVBoxLayout"" name=""verticalLayout_5"">
            <item>
             <layout class=""QVBoxLayout"" name=""verticalLayout_2"">
              <item>
               <widget class=""QPushButton"" name=""btnGenSSH"">
                <property name=""text"">
                 <string>Start SSH key Generation</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class=""QPushButton"" name=""btnAddSSH"">
                <property name=""text"">
                 <string>Add Key to SSH Agent</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class=""QPushButton"" name=""btnPrintSSHkey"">
                <property name=""text"">
                 <string>Show SSH Key</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class=""QPushButton"" name=""btnShowGit"">
                <property name=""text"">
                 <string>Launch Browser For GIt</string>
                </property>
               </widget>
              </item>
             </layout>
            </item>
            <item>
             <layout class=""QVBoxLayout"" name=""verticalLayout_4"">
              <item>
               <spacer name=""verticalSpacer_3"">
                <property name=""orientation"">
                 <enum>Qt::Vertical</enum>
                </property>
                <property name=""sizeType"">
                 <enum>QSizePolicy::Preferred</enum>
                </property>
                <property name=""sizeHint"" stdset=""0"">
                 <size>
                  <width>20</width>
                  <height>24</height>
                 </size>
                </property>
               </spacer>
              </item>
              <item>
               <widget class=""QPushButton"" name=""btnOK"">
                <property name=""text"">
                 <string>Commit Answer</string>
                </property>
               </widget>
              </item>
             </layout>
            </item>
           </layout>
          </item>
         </layout>
        </item>
       </layout>
      </item>
     </layout>
    </widget>
   </item>
  </layout>
 </widget>
 <resources/>
 <connections/>
</ui>
"
gZTxHKTq,Untitled,Caesar9988,MySQL,Monday 22nd of May 2023 09:01:54 AM CDT,"1. Departments Info
SELECT 
    `department_id`, 
    COUNT(*) AS 'Number of employees'
FROM
    `employees`
GROUP BY `department_id`
ORDER BY `department_id`;

SELECT 
    `department_id`, 
    ROUND(AVG(`salary`), 2) AS 'Average Salary'
FROM
    `employees`
GROUP BY `department_id`
ORDER BY `department_id`;

SELECT 
    `department_id`, 
    ROUND(MIN(`salary`), 2) AS 'Min Salary'
FROM
    `employees`
GROUP BY `department_id`
HAVING `Min Salary` > 800; # първо се изпълняваща агрегиращата функция и след това клаузата, която е свързана с резултата от функцията

SELECT 
    `category_id`,
    COUNT(*) AS 'Count of all appetizers'
FROM
    `products`
WHERE # първо се изпълнява клаузата и след това агрегиращата функция
    `category_id` = 2 AND `price` > 8;

SELECT 
    `category_id`,
    ROUND(AVG(`price`), 2) AS 'Average Price',
    ROUND(MIN(`price`), 2) AS 'Cheapest Product',
    ROUND(MAX(`price`), 2) AS 'Most Expensive Product'
FROM
    `products`
GROUP BY `category_id`;"
K344mzwv,admin 2: banner counter table,petar_bonov,CSS,Monday 22nd of May 2023 08:56:48 AM CDT,"table td:first-child {
    white-space: nowrap;    
}

table tr:first-child td {
    writing-mode: vertical-lr;
    transform: rotate(-180deg);
    text-align: left;
}
table tr:first-child td b {
    margin: 5px 2px 0 2px;
    display: inline-block;
    /* new */
    font-weight: normal;
    letter-spacing: 0.1px;
}"
YeYZHpye,netstats2lcd.py,ScratchMonkey,Python,Monday 22nd of May 2023 08:55:10 AM CDT,"import copy
import time
import Adafruit_CharLCD as LCD

ifstats = {
    ""eth0"": { ""tx"": 0, ""rx"": 0 },
    ""eth1"": { ""tx"": 0, ""rx"": 0 }
}

ifstats_prev = copy.deepcopy(ifstats)

def get_ifstats(line, ifname):
    """"""if ifname found on this line, insert counters into dict""""""
    fields = line.split()
    if fields[0] == (ifname + "":""):
        ifstats[ifname][""rx""] = int(fields[1])
        ifstats[ifname][""tx""] = int(fields[9])

# we only have 8 characters for the number, so display up to 1 Gbps in kbps

def scale_bps(bytesNow, bytesPrev, deltaTimeNS):
    deltaBits = 8 * (bytesNow - bytesPrev)
    bytesPerNS = deltaBits / deltaTimeNS
    kbytesPerSec = 1000000 * bytesPerNS
    return int(kbytesPerSec)

try:
    # Initialize the LCD using the pins
    lcd = LCD.Adafruit_CharLCDBackpack(address=0x21)
    # turn LCD backlight on
    lcd.set_backlight(0)
    lastTime = time.time_ns()
    
    while True:
        lcd.clear()
        # find the time delta since last reading
        now = time.time_ns()
        deltaTime = now - lastTime
        lastTime = now
        # avoid divide by zero in rate calculation
        if 0 == deltaTime:
            deltaTime = 1
        # parse the current stats (pseudo-file has one line per interface, including lo and wlan0)
        with open(""/proc/net/dev"", ""r"") as f:
            for index, line in enumerate(f):
                get_ifstats(line, ""eth0"")
                get_ifstats(line, ""eth1"")
        eth0_tx_bps = scale_bps(ifstats[""eth0""][""tx""], ifstats_prev[""eth0""][""tx""], deltaTime)
        eth0_rx_bps = scale_bps(ifstats[""eth0""][""rx""], ifstats_prev[""eth0""][""rx""], deltaTime)
        eth1_tx_bps = scale_bps(ifstats[""eth1""][""tx""], ifstats_prev[""eth1""][""tx""], deltaTime)
        eth1_rx_bps = scale_bps(ifstats[""eth1""][""rx""], ifstats_prev[""eth1""][""rx""], deltaTime)
        ifstats_prev = copy.deepcopy(ifstats)
        lcdline = ""{:>8}{:>8}\n{:>8}{:>8}"".format(eth0_rx_bps, eth0_tx_bps, eth1_rx_bps, eth1_tx_bps)
        lcd.message(lcdline)
        print(lcdline + ""\n"")
        time.sleep(2)
except KeyboardInterrupt:
    pass
finally:
    lcd.set_backlight(1)
"
dT2Q5Vbf,AttendanceView,raka_m_a,Kotlin,Monday 22nd of May 2023 08:24:51 AM CDT,"@Serializable
data class AttendanceView(
    @SerialName(""class_vocation"")
    val classVocation: String,
    @SerialName(""created_at"")
    val createdAt: String,
    @SerialName(""id"")
    val id: Int,
    @SerialName(""id_class_year"")
    val idClassYear: Int,
    @SerialName(""id_student"")
    val idStudent: Int,
    @SerialName(""information"")
    val information: String,
    @SerialName(""name_class"")
    val nameClass: Int,
    @SerialName(""name_subject"")
    val nameSubject: String,
    @SerialName(""name_teacher"")
    val nameTeacher: String
)"
UH9GhjjJ,AttendanceItemEntity,raka_m_a,Kotlin,Monday 22nd of May 2023 08:24:05 AM CDT,"@Serializable
data class AttendanceItemEntity(
    @SerialName(""created_at"")
    val createdAt: String,
    @SerialName(""id_attendance"")
    val idAttendance: Int,
    @SerialName(""id_student"")
    val idStudent: Int,
    @SerialName(""name"")
    val name: String,
    @SerialName(""nis"")
    val nis: Int,
    @SerialName(""status"")
    val status: String,
    @SerialName(""parents_token"")
    val token: String?
)"
K2KjSB6e,Untitled,jhob101,PHP,Monday 22nd of May 2023 08:20:56 AM CDT,"<?php get_header();?>

<?php
	/*global $wp_query;
	query_posts(array_merge($wp_query->query, array(
		'paged'          => get_query_var('paged'),
		'posts_per_page' => 10
	)));*/
?>

</section>

           <main>
				  <h1>Blog <i class=""icon-newspaper-o""></i></h1>

				  <div class=""main-content"">
				  	<?php
				  	if ( have_posts() ) :
					  	while ( have_posts() ) : the_post(); ?>
					<article>
						 <h3><a href=""<?php the_permalink(); ?>"" rel=""bookmark""><?php the_title(); ?></a></h3>
						   <?php the_post_thumbnail('book-thumb', array(250,'auto'));
						  	the_excerpt(); ?>
					</article>
					<?php endwhile; ?>
						  <!-- End of the main loop -->

<div class=""nav alignleft"">
								<?php the_posts_navigation(); ?>
							</div>
						  
						  <!-- =========== -->
						  
						  <?php else : ?>
						  <p><?php _e('Sorry, no posts matched your criteria.'); ?></p>
						  <?php endif; ?>
					  </div>

				  <div class=""sidebar"" id=""sidebar"">
						  <?php get_sidebar(); ?>
				  </div>

			  </main>

<?php get_footer(); ?>"
VFj0vhwH,compose,zdenny,YAML,Monday 22nd of May 2023 08:13:07 AM CDT,"version: ""3""

services:
  meilisearch:
    image: getmeili/meilisearch:v1.1
    environment:
      - MEILI_MASTER_KEY=$MEILI_MASTER_KEY
      - MEILI_ENV=production
    restart: unless-stopped
    volumes:
      - meilisearch_data:/meili_data

  redis2:
    image: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: unless-stopped

  bar-assistant:
    image: barassistant/server:latest
    depends_on:
      - meilisearch
      - redis2
    environment:
      - APP_URL=$API_URL
      - LOG_CHANNEL=stderr
      - MEILISEARCH_KEY=$MEILI_MASTER_KEY
      - MEILISEARCH_HOST=http://meilisearch:7700
      - REDIS_HOST=redis2
      - ALLOW_REGISTRATION=false
      - PARENT_INGREDIENT_SUBSTITUTE=true
    restart: unless-stopped
    volumes:
      - bar_data:/var/www/cocktails/storage/bar-assistant

  salt-rim:
    image: barassistant/salt-rim:latest
    depends_on:
      - bar-assistant
    environment:
      - API_URL=$API_URL
      - MEILISEARCH_URL=$MEILISEARCH_URL
      - BAR_NAME=Curfew
      - DESCRIPTION=6PM Bartender
    restart: unless-stopped

  webserver:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - 3001:3000
    volumes:
      - /mnt/user/appdata/ba-storage/nginx.conf:/etc/nginx/conf.d/default.conf
volumes:
  meilisearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/user/appdata/meilisearch
  bar_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/user/appdata/ba-storage"
UQj0iBWY,Untitled,Redmond7653,PHP,Monday 22nd of May 2023 08:08:29 AM CDT,"<?php

include ""scripts/connect.php"";

$selected_table = [];
$selected_project_arrays_in_arrays = [];
foreach ($_REQUEST['selected_option'] as $array_element_of_request) {
    $selected_table = mysqli_query($connect, ""SELECT * FROM `skills_per_api` WHERE `skills_id` = '$array_element_of_request'"");
    $selected_project_arrays_in_arrays[] = $selected_table->fetch_all(MYSQLI_ASSOC);
}





$all_project_ids = [];
foreach ($selected_project_arrays_in_arrays as $selected_project_arrays) {
    foreach ($selected_project_arrays as $selected_project_array) {
        $all_project_ids[] = $selected_project_array['api_id'];
    }
}
$selected_project_in_array = mysqli_query($connect, ""SELECT * FROM `api` WHERE `project_id` IN ("".explode(',', $all_project_ids)."")"");
$result = $selected_project_in_array->fetch_assoc();
//function get_selected_project_array ($selected_project_arrays_in_arrays)
//{
//    foreach ($selected_project_arrays_in_arrays as $selected_project_array) {
//        $project_id = $selected_project_array['api_id'];
//        $selected_array = mysqli_query($connect, ""SELECT * FROM `api` WHERE `project_id` = '$project_id'"");
//        $result = $selected_array->fetch_all(MYSQLI_ASSOC);
//        return $result;
//    }
//
//}



?>

<style>
    table, th,td {
        border: 1px solid black;
        padding: 5px;
    }
</style>

<h1>Hi</h1>

<div>
    <table>
        <tr>
            <th>Назва проекту</th>
            <th>URL</th>
            <th>Статус</th>
            <th>Навички</th>
            <th>Бюджет</th>
            <th>Валюта</th>
            <th>Логін замовника</th>
            <th>Ім'я замовника</th>
        </tr>
        <?php foreach ($result as $project_array) : ?>
        <tr>
            <td><?=$project_array['name']?></td>
            <td><?=$project_array['url']?></td>
            <td><?=$project_array['status']?></td>
            <td><?=$project_array['skills']?></td>
            <td><?=$project_array['budget_amount']?></td>
            <td><?=$project_array['budget_currency']?></td>
            <td><?=$project_array['employer_login']?></td>
            <td><?=$project_array['employer_name']?></td>
        </tr>
        <?php endforeach; ?>
    </table>
</div>
"
b4CjjpFP,Untitled,burcev,PHP,Monday 22nd of May 2023 07:58:57 AM CDT,"require_once($_SERVER['DOCUMENT_ROOT'].WORK_SCRIPTS_TO_FUNCTIONS_PATH.'XML2Array.php');
function getSimplifiedCardBalance($cardNumber = '')
    {
        $result = [];
        if($ch = curl_init()){
            $content = '<BC_CARD_BALANCE_FAST><CARD_NUM>'.$cardNumber.'</CARD_NUM></BC_CARD_BALANCE_FAST>';
            $curl_opts = [
				CURLOPT_URL => 'https://esb-api.intertop.ua/bc/card_balance_fast',
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => '<?xml version=""1.0"" encoding=""UTF-8""?>'.$content,
                CURLOPT_CONNECTTIMEOUT => 2,
                CURLOPT_HTTPHEADER => [
                    'Content-Type: application/xml',
                ],
                CURLOPT_RETURNTRANSFER => true,
            ];
            curl_setopt_array($ch, $curl_opts);
            $response = curl_exec($ch);
            if($response){
                try{
                    $result = \XML2Array::createArray($response);
                }catch(\Exception $e){
                    $result = [];
                }
            }
            curl_close($ch);
        }

        return $result;
    }

echo '<pre>'.print_r(getSimplifiedCardBalance(""0000121212111541""), true).'</pre>';"
eLBevJPK,admin: banner counter table,petar_bonov,CSS,Monday 22nd of May 2023 07:58:12 AM CDT,"table td:first-child {
    white-space: nowrap;    
}

table tr:first-child td {
    writing-mode: vertical-lr;
    transform: rotate(-180deg);
    text-align: left;
}
table tr:first-child td b {
    margin: 5px 2px 0 2px;
    display: inline-block;
}"
Jiny4g0E,GA4 - view_item - CARDOEN,CharlotteVDB,JavaScript,Monday 22nd of May 2023 07:56:04 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'view_item',  			// name of the event. In this case, it always must be view_item
  ecommerce: {							
    items: [{							// an array where all currently viewed products must be included
      item_name: 'Volkswagen Golf VIII TSI life 110', 			// insert an actual car name
      item_id: '221509',				// insert an actual product ID
      price: '100.00',					// Don't include currency code
      item_brand: 'Volkswagen',			// insert the brand of the car
      item_category: 'New',			// category of a product (new versus second hand)
	  item_category2: 'Cardoen',		// origin of the car (Cardoen/ Aramis)
 	  item_category3: '€ 10.000 - € 15.000',		// price range of the car
      item_category4: 'SUV',		// type of car
      item_variant: 'Diesel',				// fuel of the car
      index: 1,							// insert product's position in that list
      quantity: '1'						// product quantity
    }]
  }
});"
ExQUnA6B,Microsoft-chek-email-easy-trademarks.com,kamaok,Bash,Monday 22nd of May 2023 07:52:34 AM CDT,"I wonder why Microsoft don't accept email frоm our dedicated IP-address 88.198.83.90 despite of we have all settings concerning delivery email set up propely(SPF,DKIM,A,PTR-records)
Our server IP-address isn't in black/spam list, we don't sent a lot of email

For example, let's consider our domain easy-trademarks.com(88.198.83.90) and  all email settings 


Response from Microsoft mail server

This message was created automatically by mail delivery software.

A message that you sent could not be delivered to one or more of its
recipients. This is a permanent error. The following address(es) failed:

  ramez.dous@hotmail.com
    host hotmail-com.olc.protection.outlook.com [104.47.55.161]
    SMTP error from remote mail server after pipelined MAIL from:<sysadmin@easy-trademarks.com> SIZE=2538:
    550 5.7.1 Unfortunately, messages from [88.198.83.90] weren't sent. Please contact your Internet service provider since part of their network is on our block list (S3150). You can also refer your provider to http://mail.live.com/mail/troubleshooting.aspx#errors. [BN8NAM12FT066.eop-nam12.prod.protection.outlook.com 2023-05-22T11:57:51.362Z 08DB59E499E4A279]
Reporting-MTA: dns; hosting1.amoriltd.com

We have correctly set up SPF and DKIM records

# dig @8.8.8.8 +short TXT easy-trademarks.com
""v=spf1 +a +mx +ip4:176.9.70.216 ip4:88.198.83.90  ~all""


# dig @8.8.8.8 +short TXT default._domainkey.easy-trademarks.com
""v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAl8/q8SYp+AbEHLu0NLhndKVSJ3kVX1We+m60Q3PsZNFhZft2Z9nc28LJasiWmCfCwlRufP+cLpOJLBSx0KtbkgQhT1Wv0BsKhDgvvFn5CNfqAQIpzDv2amWo3q8WZUWwahKd2B+IAiXVgQDSSt9l6fAbfU/TTDLnJsbJQE9kzdDGqgfEU2hMmIqnRTA+vni1L"" ""NU2Y8hXJvAz6KAOsRVBmMT0M4vZaH2vGnPlBtog2+M688N7AalNANy0+cn8BCGjIHdr7IWymcQ4jOxRwJw9nS1aJbnFfa5VqhEaMt1qlJtuQev0axUQ9DVD8Mg0F1rz66x39q+YcmO1NBZhuUzBtQIDAQAB;""

We have correctly set up A,PTR-records for our mail server(176.9.70.216)

# hostname -f
hosting1.amoriltd.com

# dig @8.8.8.8 +short A hosting1.amoriltd.com
176.9.70.216

# dig @8.8.8.8 +short -x 176.9.70.216
hosting1.amoriltd.com.

And for sending email adress as well(f.e. 88.198.83.90)

# dig @8.8.8.8 +short -x 88.198.83.90
mailip2.amoriltd.com.

# dig @8.8.8.8 +short mailip2.amoriltd.com
88.198.83.90


As IP-address of our domain(88.198.83.90) isn’t in black/spam lists as well

https://mxtoolbox.com/SuperTool.aspx?action=blacklist%3a88.198.83.90&run=toolpage


As IP-address of our domain(88.198.83.90) has Neutral reputation
https://talosintelligence.com/reputation_center/lookup?search=88.198.83.90


We don't send a lot of email from our domain(88.198.83.90)
https://talosintelligence.com/reputation_center/lookup?search=88.198.83.90#email-history


I have checked your policy here
https://sendersupport.olc.protection.outlook.com/pm/policies.aspx
Nothing is new for me



Please unblock our subnet 88.198.83.88/29 (not only 88.198.83.90/32)
Due to we use this subnet to send emails for different our domains
and all email settings for other ip-addresses in our subnebt are set up the same properly as and for ip-address 88.198.83.90/32

# grep 88.198.83 /etc/mailips
abt-academy.org: 88.198.83.89
accountantpressroom.com: 88.198.83.89
alyafigroup.com: 88.198.83.89
events.alyafigroup.com: 88.198.83.89
dr.alyafigroup.com: 88.198.83.89
arabcpa.net: 88.198.83.89
chehab-law.com: 88.198.83.89
easy-trademarks.com: 88.198.83.90
gajournal.com: 88.198.83.90
gtvolt.info: 88.198.83.90
gtyafi.com: 88.198.83.90
iagazette.com: 88.198.83.90
ianewsletter.org: 88.198.83.91   
ifnewsletter.com: 88.198.83.91
me-scaleup.com: 88.198.83.91
draft.me-scaleup.com: 88.198.83.91
menaf.net: 88.198.83.91
mooresrowland.asia: 88.198.83.92
mooresrowland.ca: 88.198.83.92
mooresrowland.co: 88.198.83.92
mooresrowland.la: 88.198.83.92
mooresrowland.me: 88.198.83.92
mooresrowland.net: 88.198.83.92
mooresrowland.org: 88.198.83.92
mooresrowland.us: 88.198.83.92
mri.group: 88.198.83.93
taxproviders.tax: 88.198.83.93
w2wconsulting.com: 88.198.83.93
xpertproviders.com: 88.198.83.93
yafico.com: 88.198.83.93"
v0ARcRFp,Untitled,Redmond7653,PHP,Monday 22nd of May 2023 07:43:17 AM CDT,"<?php

include ""scripts/connect.php"";

$selected_table = [];
$selected_project_arrays_in_arrays = [];
foreach ($_REQUEST['selected_option'] as $array_element_of_request) {
    $selected_table = mysqli_query($connect, ""SELECT * FROM `skills_per_api` WHERE `skills_id` = '$array_element_of_request'"");
    $selected_project_arrays_in_arrays[] = $selected_table->fetch_all(MYSQLI_ASSOC);
}




$result = [];
foreach ($selected_project_arrays_in_arrays as $selected_project_arrays) {
    foreach ($selected_project_arrays as $selected_project_array) {
        $project_id = $selected_project_array['api_id'];
        $selected_project_in_array = mysqli_query($connect, ""SELECT * FROM `api` WHERE `project_id` = '$project_id'"");
        $result[] = $selected_project_in_array->fetch_assoc();
    }
}
//function get_selected_project_array ($selected_project_arrays_in_arrays)
//{
//    foreach ($selected_project_arrays_in_arrays as $selected_project_array) {
//        $project_id = $selected_project_array['api_id'];
//        $selected_array = mysqli_query($connect, ""SELECT * FROM `api` WHERE `project_id` = '$project_id'"");
//        $result = $selected_array->fetch_all(MYSQLI_ASSOC);
//        return $result;
//    }
//
//}

?>

<style>
    table, th,td {
        border: 1px solid black;
        padding: 5px;
    }
</style>

<div>
    <table>
        <tr>
            <th>Назва проекту</th>
            <th>URL</th>
            <th>Статус</th>
            <th>Бюджет</th>
            <th>Валюта</th>
            <th>Логін замовника</th>
            <th>Ім'я замовника</th>
        </tr>
        <?php foreach ($result as $project_array) : ?>
        <tr>
            <td><?=$project_array['name']?></td>
            <td><?=$project_array['url']?></td>
            <td><?=$project_array['status']?></td>
            <td><?=$project_array['budget_amount']?></td>
            <td><?=$project_array['budget_currency']?></td>
            <td><?=$project_array['employer_login']?></td>
            <td><?=$project_array['employer_name']?></td>
        </tr>
        <?php endforeach; ?>
    </table>
</div>
"
K2X7t3CG,IsolatedVideoCaptureForFront&BackCam,thief_g,Kotlin,Monday 22nd of May 2023 07:36:48 AM CDT,"package com.example.camerax

import android.Manifest
import android.annotation.SuppressLint
import android.app.ProgressDialog
import android.content.ContentValues
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.os.Handler
import android.os.HandlerThread
import android.os.SystemClock
import android.provider.MediaStore
import android.util.Log
import android.util.Size
import android.view.Surface
import android.view.Surface.ROTATION_0
import android.view.Surface.ROTATION_180
import android.view.View
import android.widget.Chronometer
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.Camera
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageCapture
import androidx.camera.core.ImageCaptureException
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.video.MediaStoreOutputOptions
import androidx.camera.video.Quality
import androidx.camera.video.QualitySelector
import androidx.camera.video.Recorder
import androidx.camera.video.Recording
import androidx.camera.video.VideoCapture
import androidx.camera.video.VideoRecordEvent
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.content.PermissionChecker
import com.example.camerax.databinding.ActivityMainBinding
import com.otaliastudios.transcoder.Transcoder
import com.otaliastudios.transcoder.TranscoderListener
import com.otaliastudios.transcoder.TranscoderOptions
import com.otaliastudios.transcoder.common.TrackStatus
import com.otaliastudios.transcoder.strategy.DefaultAudioStrategy
import com.otaliastudios.transcoder.strategy.DefaultVideoStrategy
import com.otaliastudios.transcoder.strategy.TrackStrategy
import com.otaliastudios.transcoder.validator.DefaultValidator
import org.mp4parser.muxer.Movie
import org.mp4parser.muxer.Track
import org.mp4parser.muxer.builder.DefaultMp4Builder
import org.mp4parser.muxer.container.mp4.MovieCreator
import org.mp4parser.muxer.tracks.AppendTrack
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.Locale
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.Future


class MainActivity : AppCompatActivity() {
    private var isFront: Boolean = false
    private lateinit var mainBinding: ActivityMainBinding
    private var mIsVideoRecording: Boolean = false
    private var mImageCapture: ImageCapture? = null
    private lateinit var mImageCaptureExecutor: ExecutorService
    private lateinit var mCameraSelector:CameraSelector
    private lateinit var mCameraSelectorFrontCam:CameraSelector
    private lateinit var mCameraSelectorBackCam:CameraSelector

    private var mVideoCapture: VideoCapture<Recorder>? = null
    private var mVideoCaptureFrontCam: VideoCapture<Recorder>? = null
    private var mVideoCaptureBackCam: VideoCapture<Recorder>? = null
    private var mRecording: Recording? = null
    private var mRecordingFrontCam: Recording? = null
    private var mRecordingBackCam: Recording? = null
    private var quality = Quality.HD
    private val qualitySelector = QualitySelector.from(quality)
    private var recorderBuilder = Recorder.Builder()
    private var recorder = Recorder.Builder().build()
    private var recorderFrontCam = Recorder.Builder().build()
    private var recorderBackCam = Recorder.Builder().build()
    private var mIsVideoPaused: Boolean = false
    private  lateinit var mChronometer: Chronometer
    private var isFlashOn: Boolean = false
    private lateinit var camera: Camera
    private var mIsCameraSwitched: Boolean = false
    private lateinit var mVideoFileList: MutableList<File>
    private lateinit var progressDialogue: ProgressDialog
    private var timeWhenPaused: Long  = 0
    private var cameraSwitchCount:Int = 0
    private var mBackgroundThreadHandler: HandlerThread? = null
    private var mBackgroundHandler: Handler? = null
    private var mTranscodeFuture: Future<Void>? = null
    private val mTranscodeVideoStrategy: TrackStrategy? = null
    private val mTranscodeAudioStrategy: TrackStrategy? = null
    private var outputFile = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), ""merged_video.mp4"")
    private var rotatedFile = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), ""Merged_VIDEO.mp4"")
    private lateinit var mScreenSize: Size

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        mainBinding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(mainBinding.root)

        mImageCaptureExecutor = Executors.newSingleThreadExecutor()

        progressDialogue = ProgressDialog(this)

        mVideoFileList = mutableListOf()
        mChronometer = mainBinding.chronometer
        mChronometer.visibility = View.GONE
        mainBinding.ivPauseResume.visibility = View.GONE

        recorderBuilder.setQualitySelector(qualitySelector)
        mCameraSelectorFrontCam = CameraSelector.DEFAULT_FRONT_CAMERA
        mCameraSelectorBackCam = CameraSelector.DEFAULT_BACK_CAMERA
        checkPermissions()

        mainBinding.ivStartStop.setOnClickListener {
            if (mIsVideoRecording) {
                mainBinding.ivTakePicture.visibility = View.VISIBLE
                mIsVideoRecording = false
                cameraSwitchCount = 0

                stopRecordingFrontCam()


            } else {
                mainBinding.ivTakePicture.visibility = View.GONE
                mIsVideoRecording = true

                startRecordingVideoBackCam()


            }
        }

         timeWhenPaused = 0
        mainBinding.ivPauseResume.setOnClickListener {
            if (mIsVideoPaused) {
                mIsVideoPaused = false
                mRecording!!.resume()

            } else {
                mIsVideoPaused = true
                mRecording!!.pause()
            }
        }

        mainBinding.ivSwitchCamera.setOnClickListener {
            mIsCameraSwitched = true
            cameraSwitchCount++
            if (mIsVideoRecording) {

                    stopRecordingBackCam()
                    switchCamera()
                    startRecordingVideoFrontCam()



            } else {
                switchCamera()
            }
        }
        mainBinding.ivTakePicture.setOnClickListener {
            takePhoto() // it will also save the photo
        }

        mainBinding.ivFlash.setOnClickListener {
            onFlashButtonClicked()
        }

    }

    private fun stopRecordingFrontCam() {
        mainBinding.ivStartStop.setBackgroundResource(R.drawable.ic_start_video_icon)
        mRecordingFrontCam!!.stop()
        mChronometer.stop()
        mChronometer.visibility = View.GONE
        if(!mIsVideoRecording) {
            mainBinding.ivPauseResume.visibility = View.GONE
            startBackCamera()
        }
    }

    private fun stopRecordingBackCam() {
        mainBinding.ivStartStop.setBackgroundResource(R.drawable.ic_start_video_icon)
        mRecordingBackCam!!.stop()
        mChronometer.stop()
        mChronometer.visibility = View.GONE
        if(!mIsVideoRecording) {
            mainBinding.ivPauseResume.visibility = View.GONE
            startBackCamera()
        }
    }

    /**
     * this method is responsible for the switch of the camera
     */
    private fun switchCamera() {
        if ( mCameraSelector == CameraSelector.DEFAULT_BACK_CAMERA) {
            camera.cameraControl.enableTorch(false)
            mCameraSelector =  CameraSelector.DEFAULT_FRONT_CAMERA
            isFront = true
            mainBinding.ivFlash.setBackgroundResource(R.drawable.ic_flash_off_icon)
            startFrontCamera()
        } else {
            mCameraSelector =  CameraSelector.DEFAULT_BACK_CAMERA
            startBackCamera()
        }
        //startCamera()
    }

    /**
     * this method will be invoked on click of flash button and turnOn/turnOff flash light accordingly
     */
    private fun onFlashButtonClicked() {
        if(camera.cameraInfo.hasFlashUnit()) {
            if (isFlashOn) {
                isFlashOn = false
                mainBinding.ivFlash.setBackgroundResource(R.drawable.ic_flash_off_icon)
                camera.cameraControl.enableTorch(isFlashOn)
            } else {
                isFlashOn = true
                mainBinding.ivFlash.setBackgroundResource(R.drawable.ic_flash_icon)
                camera.cameraControl.enableTorch(isFlashOn)
            }
        } else {
            isFlashOn = false
            mainBinding.ivFlash.setBackgroundResource(R.drawable.ic_flash_off_icon)
            Toast.makeText(this, ""Flash is not available"", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * this method will start the camera preview
     */
    @SuppressLint(""RestrictedApi"")
    private fun startCamera() {
        mVideoCapture = VideoCapture.withOutput(recorder)
        val preview = Preview.Builder()
            .setTargetRotation(ROTATION_0)
            .build()
            .also {
                it.setSurfaceProvider(mainBinding.cameraPreview.surfaceProvider)
            }
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        recorder = Recorder.Builder().build()

        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.CAMERA
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_EXTERNAL_STORAGE
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.RECORD_AUDIO
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(
                    Manifest.permission.CAMERA,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.RECORD_AUDIO
                ),
                REQUEST_CAMERA_PERMISSION
            )
            return
        }
        mVideoCapture!!.targetRotation = preview.targetRotation

        cameraProviderFuture.addListener({
            val cameraProvider = cameraProviderFuture.get()
            mImageCapture = ImageCapture.Builder()
                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .build()

            try {
                cameraProvider.unbindAll()
                camera = cameraProvider.bindToLifecycle(this, mCameraSelector,mImageCapture,mVideoCapture,preview)
                mScreenSize = QualitySelector.getResolution(camera.cameraInfo, Quality.HD)!!
            } catch (e: Exception) {
                Log.d(""MainActivity"", ""Use case binding failed"")
            }

        }, ContextCompat.getMainExecutor(this))

    }

    fun startFrontCamera() {
        mVideoCaptureFrontCam = VideoCapture.withOutput(recorderFrontCam)
        val preview = Preview.Builder()
            .build()

            .also {
                it.setSurfaceProvider(mainBinding.cameraPreview.surfaceProvider)
            }
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        if (mIsCameraSwitched) {
            recorderFrontCam = Recorder.Builder().build()

        }

        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.CAMERA
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_EXTERNAL_STORAGE
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.RECORD_AUDIO
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(
                    Manifest.permission.CAMERA,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.RECORD_AUDIO
                ),
                REQUEST_CAMERA_PERMISSION
            )
            return
        }
        //mVideoCaptureFrontCam!!.targetRotation = ROTATION_180

        cameraProviderFuture.addListener({
            val cameraProvider = cameraProviderFuture.get()
//            mImageCapture = ImageCapture.Builder()
//                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
//                .build()

            try {
                cameraProvider.unbindAll()
                camera = cameraProvider.bindToLifecycle(this, mCameraSelectorFrontCam,mVideoCaptureFrontCam,preview)
                mScreenSize = QualitySelector.getResolution(camera.cameraInfo, Quality.HD)!!
            } catch (e: Exception) {
                Log.d(""MainActivity"", ""Use case binding failed"")
            }

        }, ContextCompat.getMainExecutor(this))

    }
    fun startBackCamera() {
        mVideoCaptureBackCam = VideoCapture.withOutput(recorderBackCam)
        val preview = Preview.Builder()
            .build()
            .also {
                it.setSurfaceProvider(mainBinding.cameraPreview.surfaceProvider)
            }
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        if (mIsCameraSwitched){
            recorderBackCam = Recorder.Builder().build()
        }


        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.CAMERA
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_EXTERNAL_STORAGE
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.RECORD_AUDIO
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(
                    Manifest.permission.CAMERA,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.RECORD_AUDIO
                ),
                REQUEST_CAMERA_PERMISSION
            )
            return
        }
      //  mVideoCaptureBackCam!!.targetRotation = ROTATION_180

        cameraProviderFuture.addListener({
            val cameraProvider = cameraProviderFuture.get()


            try {
                cameraProvider.unbindAll()
                camera = cameraProvider.bindToLifecycle(this, mCameraSelectorBackCam,mVideoCaptureBackCam,preview)
                mScreenSize = QualitySelector.getResolution(camera.cameraInfo, Quality.HD)!!
            } catch (e: Exception) {
                Log.d(""MainActivity"", ""Use case binding failed"")
            }

        }, ContextCompat.getMainExecutor(this))

    }

    /**
     * this method will take the photo and save it to Gallery
     */
    private fun takePhoto() {
        mImageCapture?.let{

            val imageFileName = SimpleDateFormat(FILENAME_FORMAT, Locale.US).format(System.currentTimeMillis())
            val contentValues = ContentValues().apply {
                put(MediaStore.MediaColumns.DISPLAY_NAME, imageFileName)
                put(MediaStore.MediaColumns.MIME_TYPE, ""image/jpeg"")
                if(Build.VERSION.SDK_INT > Build.VERSION_CODES.P) {
                    put(MediaStore.Images.Media.RELATIVE_PATH, ""Pictures/CameraX-Image"")
                }
            }
            val outputFileOptions = ImageCapture.OutputFileOptions
                .Builder(contentResolver, MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues
                ).build()
            it.takePicture(
                outputFileOptions,
                mImageCaptureExecutor,
                object : ImageCapture.OnImageSavedCallback {
                    override fun onImageSaved(outputFileResults: ImageCapture.OutputFileResults){
                        startCamera()
                    }

                    override fun onError(exception: ImageCaptureException) {
                        Toast.makeText(
                            mainBinding.root.context,
                            ""Error occurred in taking photo"",
                            Toast.LENGTH_LONG
                        ).show()
                        Log.d(""MainActivity"", ""Error taking photo:$exception"")
                    }

                })

            Toast.makeText( this@MainActivity , ""The image has been saved to Gallery"", Toast.LENGTH_SHORT).show()

        }
    }

    /**
     * this method will start the recording of video
     */
    private fun startRecordingVideo() {
        mainBinding.ivStartStop.setBackgroundResource(R.drawable.ic_stop_video_icon)
        mVideoCapture!!.let {
            try {
                if (ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.CAMERA
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.WRITE_EXTERNAL_STORAGE
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.READ_EXTERNAL_STORAGE
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.RECORD_AUDIO
                    ) != PackageManager.PERMISSION_GRANTED
                ) {
                    ActivityCompat.requestPermissions(
                        this,
                        arrayOf(
                            Manifest.permission.CAMERA,
                            Manifest.permission.WRITE_EXTERNAL_STORAGE,
                            Manifest.permission.READ_EXTERNAL_STORAGE,
                            Manifest.permission.RECORD_AUDIO
                        ),
                        REQUEST_CAMERA_PERMISSION
                    )
                    return
                }
                val contentValues = ContentValues().apply {
                    put(MediaStore.MediaColumns.DISPLAY_NAME, ""VID_${System.currentTimeMillis()}"")
                    put(MediaStore.MediaColumns.MIME_TYPE, ""video/mp4"")
                }
                val mediaStoreOutputOptions = MediaStoreOutputOptions
                    .Builder(contentResolver, MediaStore.Video.Media.EXTERNAL_CONTENT_URI)
                    .setContentValues(contentValues)
                    .build()
                mRecording = mVideoCapture!!.output
                    .prepareRecording(this, mediaStoreOutputOptions)
                    .apply {
                        // Enable Audio for recording
                        if (PermissionChecker.checkSelfPermission(this@MainActivity, Manifest.permission.RECORD_AUDIO) ==
                            PermissionChecker.PERMISSION_GRANTED ) {
                            withAudioEnabled()
                        }
                    }
                    .start(ContextCompat.getMainExecutor(this)) { recordEvent ->
                        when(recordEvent) {
                            is VideoRecordEvent.Start -> {
                                mainBinding.ivPauseResume.visibility = View.VISIBLE
                                mChronometer.visibility = View.VISIBLE
                                mChronometer.base = SystemClock.elapsedRealtime()
                                mChronometer.start()
                            }
                            is VideoRecordEvent.Pause -> {
                                mIsVideoPaused = true
                                mainBinding.ivPauseResume.setBackgroundResource(R.drawable.ic_resume_icon)
                                timeWhenPaused = mChronometer.base - SystemClock.elapsedRealtime()
                                mChronometer.stop()
                            }
                            is VideoRecordEvent.Finalize -> {
                                if (!recordEvent.hasError()) {

                                    val savedUri = recordEvent.outputResults.outputUri

                                    if (savedUri != null) {
                                        val projection = arrayOf(MediaStore.Video.Media.DATA)
                                        val cursor = contentResolver.query(savedUri, projection, null, null, null)
                                        cursor?.use {
                                            if (it.moveToFirst()) {
                                                val filePath = it.getString(it.getColumnIndexOrThrow(MediaStore.Video.Media.DATA))
                                                val videoFile = File(filePath)


                                                if(videoFile.exists()) {
                                                    mVideoFileList.add(videoFile)
                                                    Toast.makeText(this,  ""File Saved"", Toast.LENGTH_SHORT).show()
                                                }
                                            }
                                        }
                                    }
                                    if(!mIsVideoRecording){
                                       // mergeVideosUsingTranscoder(mVideoFileList)
                                        mergeVideos(mVideoFileList)
                                    }
                                } else {
                                    mRecording?.close()
                                    mRecording = null
                                    Log.e(""MainActivity"", ""Video capture ends with error: ${recordEvent.error}"")
                                }

                            }
                            is VideoRecordEvent.Resume -> {
                                mIsVideoPaused = false
                                mainBinding.ivPauseResume.setBackgroundResource(R.drawable.ic_pause_icon)
                                mChronometer.base = SystemClock.elapsedRealtime() + timeWhenPaused
                                mChronometer.start()
                            }
                        }
                    }

            } catch (e: Exception) {
                e.printStackTrace()
            }
        }

    }
    private fun startRecordingVideoFrontCam() {
        mainBinding.ivStartStop.setBackgroundResource(R.drawable.ic_stop_video_icon)
        mVideoCaptureFrontCam!!.let {
            try {
                if (ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.CAMERA
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.WRITE_EXTERNAL_STORAGE
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.READ_EXTERNAL_STORAGE
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.RECORD_AUDIO
                    ) != PackageManager.PERMISSION_GRANTED
                ) {
                    ActivityCompat.requestPermissions(
                        this,
                        arrayOf(
                            Manifest.permission.CAMERA,
                            Manifest.permission.WRITE_EXTERNAL_STORAGE,
                            Manifest.permission.READ_EXTERNAL_STORAGE,
                            Manifest.permission.RECORD_AUDIO
                        ),
                        REQUEST_CAMERA_PERMISSION
                    )
                    return
                }
                val contentValues = ContentValues().apply {
                    put(MediaStore.MediaColumns.DISPLAY_NAME, ""VID_${System.currentTimeMillis()}"")
                    put(MediaStore.MediaColumns.MIME_TYPE, ""video/mp4"")
                }
                val mediaStoreOutputOptions = MediaStoreOutputOptions
                    .Builder(contentResolver, MediaStore.Video.Media.EXTERNAL_CONTENT_URI)
                    .setContentValues(contentValues)
                    .build()
                mVideoCaptureFrontCam!!.targetRotation = ROTATION_0
                mRecordingFrontCam = mVideoCaptureFrontCam!!.output
                    .prepareRecording(this, mediaStoreOutputOptions)
                    .apply {
                        // Enable Audio for recording
                        if (PermissionChecker.checkSelfPermission(this@MainActivity, Manifest.permission.RECORD_AUDIO) ==
                            PermissionChecker.PERMISSION_GRANTED ) {
                            withAudioEnabled()
                        }
                    }
                    .start(ContextCompat.getMainExecutor(this)) { recordEvent ->
                        when(recordEvent) {
                            is VideoRecordEvent.Start -> {
                                mainBinding.ivPauseResume.visibility = View.VISIBLE
                                mChronometer.visibility = View.VISIBLE
                                mChronometer.base = SystemClock.elapsedRealtime()
                                mChronometer.start()
                            }
                            is VideoRecordEvent.Pause -> {
                                mIsVideoPaused = true
                                mainBinding.ivPauseResume.setBackgroundResource(R.drawable.ic_resume_icon)
                                timeWhenPaused = mChronometer.base - SystemClock.elapsedRealtime()
                                mChronometer.stop()
                            }
                            is VideoRecordEvent.Finalize -> {
                                if (!recordEvent.hasError()) {

                                    val savedUri = recordEvent.outputResults.outputUri

                                    if (savedUri != null) {
                                        val projection = arrayOf(MediaStore.Video.Media.DATA)
                                        val cursor = contentResolver.query(savedUri, projection, null, null, null)
                                        cursor?.use {
                                            if (it.moveToFirst()) {
                                                val filePath = it.getString(it.getColumnIndexOrThrow(MediaStore.Video.Media.DATA))
                                                val videoFile = File(filePath)

                                                if(videoFile.exists()) {
                                                    mVideoFileList.add(videoFile)
                                                    Toast.makeText(this,  ""File Saved"", Toast.LENGTH_SHORT).show()
                                                }
                                            }
                                        }
                                    }
                                    if(!mIsVideoRecording){
                                        // mergeVideosUsingTranscoder(mVideoFileList)
                                        mergeVideos(mVideoFileList)
                                    }
                                } else {
                                    mRecordingFrontCam?.close()
                                    mRecording = null
                                    Log.e(""MainActivity"", ""Video capture ends with error: ${recordEvent.error}"")
                                }

                            }
                            is VideoRecordEvent.Resume -> {
                                mIsVideoPaused = false
                                mainBinding.ivPauseResume.setBackgroundResource(R.drawable.ic_pause_icon)
                                mChronometer.base = SystemClock.elapsedRealtime() + timeWhenPaused
                                mChronometer.start()
                            }
                        }
                    }

            } catch (e: Exception) {
                e.printStackTrace()
            }
        }

    }

    private fun startRecordingVideoBackCam() {
        mainBinding.ivStartStop.setBackgroundResource(R.drawable.ic_stop_video_icon)
        mVideoCaptureBackCam!!.let {
            try {
                if (ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.CAMERA
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.WRITE_EXTERNAL_STORAGE
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.READ_EXTERNAL_STORAGE
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.RECORD_AUDIO
                    ) != PackageManager.PERMISSION_GRANTED
                ) {
                    ActivityCompat.requestPermissions(
                        this,
                        arrayOf(
                            Manifest.permission.CAMERA,
                            Manifest.permission.WRITE_EXTERNAL_STORAGE,
                            Manifest.permission.READ_EXTERNAL_STORAGE,
                            Manifest.permission.RECORD_AUDIO
                        ),
                        REQUEST_CAMERA_PERMISSION
                    )
                    return
                }
                val contentValues = ContentValues().apply {
                    put(MediaStore.MediaColumns.DISPLAY_NAME, ""VID_${System.currentTimeMillis()}"")
                    put(MediaStore.MediaColumns.MIME_TYPE, ""video/mp4"")
                }
                val mediaStoreOutputOptions = MediaStoreOutputOptions
                    .Builder(contentResolver, MediaStore.Video.Media.EXTERNAL_CONTENT_URI)
                    .setContentValues(contentValues)
                    .build()
                mRecordingBackCam = mVideoCaptureBackCam!!.output
                    .prepareRecording(this, mediaStoreOutputOptions)
                    .apply {
                        // Enable Audio for recording
                        if (PermissionChecker.checkSelfPermission(this@MainActivity, Manifest.permission.RECORD_AUDIO) ==
                            PermissionChecker.PERMISSION_GRANTED ) {
                            withAudioEnabled()
                        }
                    }
                    .start(ContextCompat.getMainExecutor(this)) { recordEvent ->
                        when(recordEvent) {
                            is VideoRecordEvent.Start -> {
                                mainBinding.ivPauseResume.visibility = View.VISIBLE
                                mChronometer.visibility = View.VISIBLE
                                mChronometer.base = SystemClock.elapsedRealtime()
                                mChronometer.start()
                            }
                            is VideoRecordEvent.Pause -> {
                                mIsVideoPaused = true
                                mainBinding.ivPauseResume.setBackgroundResource(R.drawable.ic_resume_icon)
                                timeWhenPaused = mChronometer.base - SystemClock.elapsedRealtime()
                                mChronometer.stop()
                            }
                            is VideoRecordEvent.Finalize -> {
                                if (!recordEvent.hasError()) {

                                    val savedUri = recordEvent.outputResults.outputUri

                                    if (savedUri != null) {
                                        val projection = arrayOf(MediaStore.Video.Media.DATA)
                                        val cursor = contentResolver.query(savedUri, projection, null, null, null)
                                        cursor?.use {
                                            if (it.moveToFirst()) {
                                                val filePath = it.getString(it.getColumnIndexOrThrow(MediaStore.Video.Media.DATA))
                                                val videoFile = File(filePath)


                                                if(videoFile.exists()) {
                                                    mVideoFileList.add(videoFile)
                                                    Toast.makeText(this,  ""File Saved"", Toast.LENGTH_SHORT).show()
                                                }
                                            }
                                        }
                                    }
                                    if(!mIsVideoRecording){
                                        // mergeVideosUsingTranscoder(mVideoFileList)
                                        mergeVideos(mVideoFileList)
                                    }
                                } else {
                                    mRecordingBackCam?.close()
                                    mRecordingBackCam = null
                                    Log.e(""MainActivity"", ""Video capture ends with error: ${recordEvent.error}"")
                                }

                            }
                            is VideoRecordEvent.Resume -> {
                                mIsVideoPaused = false
                                mainBinding.ivPauseResume.setBackgroundResource(R.drawable.ic_pause_icon)
                                mChronometer.base = SystemClock.elapsedRealtime() + timeWhenPaused
                                mChronometer.start()
                            }
                        }
                    }

            } catch (e: Exception) {
                e.printStackTrace()
            }
        }

    }

    private fun stopRecording() {
        mainBinding.ivStartStop.setBackgroundResource(R.drawable.ic_start_video_icon)
        mRecording!!.stop()
        mChronometer.stop()
        mChronometer.visibility = View.GONE
        if(!mIsVideoRecording) {
            mainBinding.ivPauseResume.visibility = View.GONE
            startBackCamera()
        }
    }


    private fun mergeVideos(videoFiles: List<File>) {
        try {
            progressDialogue.setMessage(""Merging Videos.."")
            progressDialogue.show()
            val movieList = mutableListOf<Movie>()
            for (videoFile  in videoFiles) {
                val movie = MovieCreator.build(videoFile.absolutePath)
                movieList.add(movie)
            }
            val videoTracks = mutableListOf<Track>()
            val audioTracks = mutableListOf<Track>()

            for (movie in movieList) {
                for (track in movie.tracks) {
                    if (track.handler == ""vide"") {
                        videoTracks.add(track)
                    }
                    if (track.handler == ""soun"") {
                        audioTracks.add(track)
                    }
                }
            }

            val mergedMovie = Movie()
            if (videoTracks.size > 0) {
                mergedMovie.addTrack(AppendTrack(*videoTracks.toTypedArray()))
            }

            if (audioTracks.size > 0) {
                mergedMovie.addTrack(AppendTrack(*audioTracks.toTypedArray()))
            }

            val container = DefaultMp4Builder().build(mergedMovie)
            val fileChannel = FileOutputStream(outputFile).channel
            container.writeContainer(fileChannel)
            fileChannel.close()
            progressDialogue.cancel()

            Toast.makeText(this, ""Videos merged successfully"", Toast.LENGTH_SHORT).show()

        } catch (e : Exception) {
            Log.e(TAG, e.message.toString())
        }

    }

    /**
     * this method used for merging multiple videos using Transcoder library
     * @param videoFilesList
     */
    private fun mergeVideosUsingTranscoder(videoFiles: List<File>) {
        progressDialogue.setMessage(""Merging Videos.."")
        progressDialogue.show()
        val builder: TranscoderOptions.Builder =
            Transcoder.into(rotatedFile.absolutePath)
        for(videoFile in videoFiles) {
            builder.addDataSource(videoFile.absolutePath)
        }

        // use DefaultVideoStrategy.exact(2560, 1440).build()  to restore 78% size of the video
        //  use DefaultVideoStrategy.exact(mScreenSize.height, mScreenSize.width).build()  to restore 50% size of the video
        val strategy: DefaultVideoStrategy = DefaultVideoStrategy.exact(mScreenSize.height, mScreenSize.width).build()
        mTranscodeFuture = builder
            .setAudioTrackStrategy(DefaultAudioStrategy.builder().build())
            .setVideoTrackStrategy(strategy)
            .setVideoRotation(0)
            .setListener(object : TranscoderListener{

                override fun onTranscodeProgress(progress: Double) {}

                override fun onTranscodeCompleted(successCode: Int) {
                    Toast.makeText(this@MainActivity, ""Video Merged Successfully"", Toast.LENGTH_SHORT).show()
                }

                override fun onTranscodeCanceled() {
                    Toast.makeText(this@MainActivity, ""Video rotation cancelled"", Toast.LENGTH_SHORT).show()
                }

                override fun onTranscodeFailed(exception: Throwable) {
                    Toast.makeText(this@MainActivity, exception.message, Toast.LENGTH_SHORT).show()
                }

            })
            .setValidator(object : DefaultValidator() {
                override fun validate(videoStatus: TrackStatus, audioStatus: TrackStatus): Boolean {
                    //  mIsAudioOnly = !videoStatus.isTranscoding
                    return super.validate(videoStatus, audioStatus)
                }

            }).transcode()
        progressDialogue.cancel()
    }

    /**
     * this method will check camera and other required permission to run the app
     */
    private  fun checkPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED
            && ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED
            && ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED
            && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED
        ) {
         mCameraSelector = CameraSelector.DEFAULT_BACK_CAMERA
         //startCamera()
            startBackCamera()

        } else {
            if (shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE )) {
                Toast.makeText(this, ""app needs permission to be able to save videos"", Toast.LENGTH_SHORT)
                    .show()
            }
            requestPermissions(
                arrayOf(Manifest.permission.CAMERA,Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.RECORD_AUDIO,Manifest.permission.READ_EXTERNAL_STORAGE),
                REQUEST_CAMERA_PERMISSION
            )
        }

    }

    /**
     * this method receives the status of the permissions granted
     * @param1 requestCode
     * @param2: permissions
     * @param3: grantResults
     */
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String?>,
        grantResults: IntArray,
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CAMERA_PERMISSION) {
            for(results in grantResults) {
                if (results == PackageManager.PERMISSION_DENIED) {
                    // close the app
                    Toast.makeText(
                        this@MainActivity,
                        ""Sorry!!!, you can't use this app without granting permission"",
                        Toast.LENGTH_LONG
                    ).show()
                    finish()
                }
            }
        }

    }

    override fun onPause() {
        super.onPause()
        Log.e(TAG, ""onPause()"")
        stopBackgroundThread()

    }

    /**
     * this will start the background thread to run the processes
     */
    private fun startBackgroundThread() {
        mBackgroundThreadHandler = HandlerThread(""Camera Background"")
        mBackgroundThreadHandler!!.start()
        mBackgroundHandler = Handler(mBackgroundThreadHandler!!.looper)
    }

    /**
     * this will stop the background thread if all the background processes are executed
     */
    private fun stopBackgroundThread() {
        mBackgroundThreadHandler!!.quitSafely()
        try {
            mBackgroundThreadHandler!!.join()
            mBackgroundThreadHandler = null
            mBackgroundHandler = null
        } catch (e: InterruptedException) {
            e.printStackTrace()
        }
    }

    override fun onStop() {
        super.onStop()
        Log.e(TAG, ""onStop()"")

    }

    override fun onRestart() {
        super.onRestart()
        Log.e(TAG, ""onRestart()"")

    }

    override fun onResume() {
        super.onResume()
        Log.e(TAG, ""onResume()"")
        startBackgroundThread()

        if(mIsVideoRecording) {
            mRecording!!.resume()
            mChronometer.start()
        }
    }
    override fun onDestroy() {
        super.onDestroy()
        if(mIsVideoRecording) {
            mRecording!!.stop()
            mChronometer.stop()
        }
    }
    companion object {
        const val TAG = ""MainActivity""
        const val REQUEST_CAMERA_PERMISSION: Int = 0
        const val STORAGE_PERMISSION_CODE: Int = 1
        const val FILENAME_FORMAT = ""yyyy-MM-dd-HH-mm-ss-SSS""
    }
}
"
ydRZeEFR,Untitled,wclovers,CSS,Monday 22nd of May 2023 07:33:33 AM CDT,"form#wcfm_settings_form p {
    float: none !important;
}"
62k77Tq7,ssr and pwa settings for quasar v1.16,ncamaa,JavaScript,Monday 22nd of May 2023 07:17:02 AM CDT,"// ssr and pwa settings inside quasar config:
return {
  // ... other stuff
  ssr: {
    pwa: false
  },

  // https://quasar.dev/quasar-cli/developing-pwa/configuring-pwa
  pwa: {
    workboxPluginMode: 'GenerateSW', // 'GenerateSW' or 'InjectManifest'
    workboxOptions: {
      skipWaiting: true,
      clientsClaim: true,
      // exclude the following files from precache manifest: netlify.toml
      exclude: [/\.map$/, /manifest\.json$/, /_redirects$/, /netlify.toml$/]
    }, // only for GenerateSW
    manifest: {
      name: `NA`,
      short_name: `NA`,
      description: `NA`,
      display: 'standalone',
      orientation: 'portrait',
      background_color: '#ffffff',
      theme_color: '#ffffff',
      icons: [
        {
          src: 'icons/icon-128x128.png',
          sizes: '128x128',
          type: 'image/png'
        },
        {
          src: 'icons/icon-192x192.png',
          sizes: '192x192',
          type: 'image/png'
        },
        {
          src: 'icons/icon-256x256.png',
          sizes: '256x256',
          type: 'image/png'
        },
        {
          src: 'icons/icon-384x384.png',
          sizes: '384x384',
          type: 'image/png'
        },
        {
          src: 'icons/icon-512x512.png',
          sizes: '512x512',
          type: 'image/png'
        }
      ]
    }
  }
}
"
3QaMnM4c,src-pwa/register-service-worker.js,ncamaa,JavaScript,Monday 22nd of May 2023 07:07:53 AM CDT,"import { register } from 'register-service-worker'

import { Notify } from 'quasar'

const version =
  'Service Worker v2.5 | Mon May 22 2023 10:14:48 GMT+0200 (Central European Summer Time)'

console.log(version)

function hardReload() {
  const url = new URL(window.location.href)
  url.searchParams.set('nocache', new Date().getTime())
  window.location.href = url.href
	
  // I also tried location.reload() and location.reload(true). the second works on desktop browsers and not on mobile browsers

}

register(process.env.SERVICE_WORKER_FILE, {
  ready() {
    console.log('Service worker is active.')
  },

  registered() {
    console.log('Service worker has been registered.')
  },

  cached() {
    console.log('Content has been cached for offline use.')
  },

  updatefound() {
    console.log('A new version is available to download, downloading...')
    Notify.create({
      message: 'Downloading new version...',
      icon: 'downloading',
      textColor: 'white',
      timeout: 3000
    })
  },

  updated() {
    let dismissFunc
    console.log('The new version was downloaded and is available.')
    try {
      // Create the notification with the initial message and actions
      dismissFunc = Notify.create({
        message: 'Reload to update to the latest version',
        textColor: 'white',
        actions: [
          {
            label: 'Reload',
            icon: 'autorenew',
            textColor: 'white',
            handler: () => {
              console.log('Hard Reload.')
              hardReload()
              // location.reload(true)
            }
          },
          {
            label: 'Dismiss',
            icon: 'close',
            textColor: 'white',
            handler: () => {
              // close the notification
              dismissFunc()
            }
          }
        ],
        timeout: 0
      })
    } catch (e) {
      console.error('Problem with service worker update')
      console.error(e)
    }
  },

  error(error) {
    console.error('Error during service worker registration:', error)
  }
})
"
DGaMGUpj,Untitled,jkonefal,C++,Monday 22nd of May 2023 06:43:02 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int rep[1000005];
int ini[1000005];
int num;
int n, m, t;

int ptn(int x, int y) {
    return x * m + y;
}

pair <int, int> ntp(int x) {
    return make_pair(x / m, x % m);
}

int find(int x, int y) {
    if (ntp(rep[ptn(x, y)]).first == x && ntp(rep[ptn(x, y)]).second == y) return ptn(x, y);
    rep[ptn(x, y)] = find(ntp(rep[ptn(x, y)]).first, ntp(rep[ptn(x, y)]).second);
    return rep[ptn(x, y)];
}

void uunion(int x1, int yjeden, int x2, int y2) {
    if (rep[ptn(x1, yjeden)] == rep[ptn(x2, y2)]) return;
    int p1 = find(x1, yjeden);
    int p2 = find(x2, y2);
    if (p1 == p2) return;
    rep[p1] = p2;
    num--;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //map <int, vector <int>> wart;
    priority_queue < pair<int, int>> wart;
    int mx = 0;
    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> ini[ptn(i, j)];
            rep[ptn(i, j)] = ptn(i, j);
            wart.push(make_pair(ini[ptn(i, j)], ptn(i, j)));
            mx = max(ini[ptn(i, j)], mx);
        }
    }

    cin >> t;
    vector <int> tests(t);
    vector <int> answ(t);
    num = 0;
    for (int i = 0; i < t; i++) cin >> tests[i];
    int g = t - 1;

    // for (auto it = wart.rbegin(); it != wart.rend(); ++it)
    while (!wart.empty())
    {
        pair <int, int> cur = wart.top();
        int val = cur.first;
        //cout << val << '\n';
        while (g >= 0 && val <= tests[g]) answ[g] = num, g--;

        int a = tests[g];
        int i = ntp(cur.second).first;
        int j = ntp(cur.second).second;
        num++;

        if (j > 0)
        {
            if (ini[ptn(i, j - 1)] > a) uunion(i, j, i, j - 1);
        }
        if (i > 0)
        {
            if (ini[ptn(i - 1, j)] > a) uunion(i, j, i - 1, j);
        }
        if (j < m - 1)
        {
            if (ini[ptn(i, j + 1)] > a) uunion(i, j, i, j + 1);
        }
        if (i < n - 1)
        {
            if (ini[ptn(i + 1, j)] > a) uunion(i, j, i + 1, j);
        }
        wart.pop();
    }

    while (g >= 0) answ[g] = num, g--;

    for (int i = 0; i < t; i++)
    {
        cout << answ[i] << "" "";
    }
}"
WB4rxEGy,test_24,Seredenko-V,C++,Monday 22nd of May 2023 06:21:52 AM CDT,"#include ""vector.h""
#include <iostream>
#include <cassert>

using namespace std;

constexpr std::size_t SIZE = 8u;
constexpr int MAGIC = 42;

struct Obj {
    Obj() {
        if (default_construction_throw_countdown > 0) {
            if (--default_construction_throw_countdown == 0) {
                throw std::runtime_error(""Oops"");
            }
        }
        ++num_default_constructed;
    }

    Obj(const Obj& other) {
        if (other.throw_on_copy) {
            throw std::runtime_error(""Oops"");
        }
        ++num_copied;
    }

    Obj(Obj&& /*other*/) noexcept {
        ++num_moved;
    }

    Obj& operator=(const Obj& other) = default;
    Obj& operator=(Obj&& other) = default;

    ~Obj() {
        ++num_destroyed;
    }

    static size_t GetAliveObjectCount() {
        return num_default_constructed + num_copied + num_moved - num_destroyed;
    }

    static void ResetCounters() {
        default_construction_throw_countdown = 0;
        num_default_constructed = 0;
        num_copied = 0;
        num_moved = 0;
        num_destroyed = 0;
    }

    bool throw_on_copy = false;

    static inline size_t default_construction_throw_countdown = 0;
    static inline size_t num_default_constructed = 0;
    static inline size_t num_copied = 0;
    static inline size_t num_moved = 0;
    static inline size_t num_destroyed = 0;
};

void TestSizeConstructorException() {
    Obj::ResetCounters();
    Obj::default_construction_throw_countdown = SIZE / 2;
    try {
        Vector<Obj> v(SIZE);
        assert(false);
    } catch (const std::runtime_error&) {
        // этого и ждем
    }
    assert(Obj::num_default_constructed == SIZE / 2 - 1);
    assert(Obj::GetAliveObjectCount() == 0u);
    cerr << ""TestSizeConstructorException is passed""s << endl;
}

int main(int argc, const char** argv) {
    TestSizeConstructorException();
}"
4tfPiQWM,Untitled,cyborg_7459,JavaScript,Monday 22nd of May 2023 06:02:38 AM CDT,"(function(){  
    var x = y = 5;
})();

console.log(""x is defined? "" + (typeof x !== 'undefined'));
console.log(""y is defined? "" + (typeof y !== 'undefined'));"
1pq2TZyK,data580,TestGuy1,JSON,Monday 22nd of May 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'dbce59919295e4a8bec2311a7bdacffa80f0296b4dcc693a7047e38aadd125c77525101be4bee9f74fb0fc60550d315a46e93536469631f179de3e8af3e81ba10d2ddd418eb5dc48a13f996df711630a95bb44f03691dd6729b642310148b100b7da6078772ed6a53240355b8bed884d73ff450f3a09d7b4e445a9961201dd8f',
  otherdata: [
    '63340298872d16323fa0c63bd991c53d',
    'b70566ba5fcefdc18238168ab43d426e',
    'd526aa385d10c710e8b1c72227296bc4',
    '88ced7d1859e518bc289d9e4bd641af8',
    '4c47a80c6229302f7b05b232a7c20998',
    'd893da4148d816765dca639641b51ff5',
    '6ae8fe68597eda1270a6e8f7d2b287a7',
    '3d7275551968b3310716174d8a353075'
  ]
}"
YZ8Us9j3,Last K Numbers Sequence JS Advanced,TZinovieva,JavaScript,Monday 22nd of May 2023 05:45:09 AM CDT,"function generateSequence(n, k) {
    let seq = [1];

    for(let i = 1; i < n; i++) {
        let sum = 0;
        for(let j = i - k; j < i; j++) {
            if(j >= 0) {
                sum += seq[j];
            }
        }
        seq.push(sum);
    }
    return seq;
}
"
xirtxrZh,LibreTubePro,FreedTV,JSON,Monday 22nd of May 2023 05:42:04 AM CDT,"{
""hasUpdate"":false,
""isForce"":false,
""isSilent"":false,
""isIgnorable"":false,
""isShowNotification"":false,
""updateContent"":"""",
""url"":"""",
""hash"":""""
}"
AqczuKEy,calc2,Nojus_Globys,Java,Monday 22nd of May 2023 05:33:16 AM CDT,"# 1 — Užpildyti šiuos langelius
C2: ""Pamoka"" (kuriuos mokotės mokykloje)
D2: ""Motyvacija"" (skaičius nuo 0 iki 10 - kiek patinka dalykas)
E2: ""Kartai per savaitę""
F2: ""Sužinotas faktas""
(jei reikia, stulpelį pasididinti)
 
# 2 — Langeliuose B3:B5 parašyti skaičius nuo 1 iki 3
(prisiminti automatinį pildymą)
 
# 3 — Užpildyti lentelę
 
# 4 — Atlikti skaičiavimus
    E6 – apskaičiuoti kartų per savaitę sumą;
    D6 – apskaičiuoti motyvacijos vidurkį."
Jf7g9JMH,Untitled,miscelo,Python,Monday 22nd of May 2023 05:20:53 AM CDT,"import logging.handlers
from datetime import datetime

now = datetime.now()
timestamp = now.strftime(""%d/%m/%Y %H:%M:%S"")

logging.basicConfig(filename=""dmaster.log"", level=logging.INFO)
logger = logging.getLogger(""dmaster.diskspace"")
logger.setLevel(logging.DEBUG)

logging.basicConfig(filename=""dmaster.log"", level=logging.INFO)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

logformat = logging.Formatter(""%(asctime)s;%(levelname)s;%(message)s"")
ch.setFormatter(logformat)
logger.addHandler(ch)

try:
    with open(""dice.dat"", ""r"") as fobj:
        fobj.read()
        logger.info('file diskspace.dat exist!')

except FileNotFoundError:
    logger.critical('file diskspace.dat not exist!')
except Exception:
    print(""ERROR not known"")
    logger.warning('Error not known. something happens'"
FzB9055t,邀您一起看：⚙ 设置 ⚙,xiaomianao666,JavaScript,Monday 22nd of May 2023 05:17:26 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥⚙ 设置 ⚙@@
T8kNHXES,Untitled,wclovers,PHP,Monday 22nd of May 2023 05:02:30 AM CDT,wcfm_get_vendor_id_by_post( $product_id );
b6TESyby,Untitled,wclovers,PHP,Monday 22nd of May 2023 05:01:33 AM CDT,"global $WCFM;
$WCFM->wcfm_vendor_support->wcfm_get_vendor_id_from_product( $product_id );"
E4kNcy3g,Работа чат жпт,Bibodui,C++,Monday 22nd of May 2023 04:52:33 AM CDT,"#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

class Sort {
public:
    static void selectionSort(vector<int>& arr) {
        int n = arr.size();
        for (int i = 0; i < n - 1; ++i) {
            int minIndex = i;
            for (int j = i + 1; j < n; ++j) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            swap(arr[i], arr[minIndex]);
        }
    }

    static void quickSort(vector<int>& arr, int low, int high) {
        if (low < high) {
            int pivot = partition(arr, low, high);
            quickSort(arr, low, pivot - 1);
            quickSort(arr, pivot + 1, high);
        }
    }

private:
    static int partition(vector<int>& arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j <= high - 1; ++j) {
            if (arr[j] < pivot) {
                ++i;
                swap(arr[i], arr[j]);
            }
        }
        swap(arr[i + 1], arr[high]);
        return i + 1;
    }
};

int main() {
    // Считывание данных из файлов
    vector<int> sortedData;
    vector<int> reverseSortedData;
    vector<int> partiallySortedData;

    ifstream sortedFile(""sorted.txt"");
    ifstream reverseSortedFile(""reverse_sorted.txt"");
    ifstream partiallySortedFile(""partially_sorted.txt"");

    int num;
    while (sortedFile >> num) {
        sortedData.push_back(num);
    }

    while (reverseSortedFile >> num) {
        reverseSortedData.push_back(num);
    }

    while (partiallySortedFile >> num) {
        partiallySortedData.push_back(num);
    }

    sortedFile.close();
    reverseSortedFile.close();
    partiallySortedFile.close();

    // Сортировка и сравнение результатов
    Sort::selectionSort(sortedData);
    Sort::quickSort(reverseSortedData, 0, reverseSortedData.size() - 1);
    Sort::quickSort(partiallySortedData, 0, partiallySortedData.size() - 1);

    // Вывод результатов
    cout << ""Отсортированные данные: "";
    for (const auto& num : sortedData) {
        cout << num << "" "";
    }
    cout << endl;

    cout << ""Отсортированные данные в обратном порядке: "";
    for (const auto& num : reverseSortedData) {
        cout << num << "" "";
    }
    cout << endl;

    cout << ""Частично отсортированные данные: "";
    for (const auto& num : partiallySortedData) {
        cout << num << "" "";
    }
    cout << endl;

    return 0;
}
"
LY0jYUBm,Урок 4 идиома...,kutuzzzov,C++,Monday 22nd of May 2023 04:52:21 AM CDT,"#include <algorithm>
#include <iostream>
#include <numeric>
#include <string>
#include <vector>

using namespace std;

template <typename Iterator>
class IteratorRange {
public:
    IteratorRange(Iterator begin, Iterator end)
        : first(begin)
        , last(end) {
    }

    Iterator begin() const {
        return first;
    }

    Iterator end() const {
        return last;
    }

private:
    Iterator first, last;
};

template <typename Collection>
auto Head(Collection& v, size_t top) {
    return IteratorRange{v.begin(), next(v.begin(), min(top, v.size()))};
}

struct Person {
    string name;
    int age, income;
    bool is_male;
};

vector<Person> ReadPeople(istream& input) {
    int count;
    input >> count;

    vector<Person> result(count);
    for (Person& p : result) {
        char gender;
        input >> p.name >> p.age >> p.income >> gender;
        p.is_male = gender == 'M';
    }

    return result;
}

int main() {
    vector<Person> people = ReadPeople(cin);

    sort(people.begin(), people.end(), 
    	[](const Person& lhs, const Person& rhs) {
        return lhs.age < rhs.age;
    });

    for (string command; cin >> command;) {
        if (command == ""AGE""s) {
            int adult_age;
            cin >> adult_age;

            auto adult_begin = lower_bound(people.begin(), people.end(), adult_age, 
            	[](const Person& lhs, int age) {
                return lhs.age < age;
            });

            cout << ""There are ""s << distance(adult_begin, people.end()) << "" adult people for maturity age ""s
                 << adult_age << '\n';
        } else if (command == ""WEALTHY""s) {
            int count;
            cin >> count;

            auto head = Head(people, count);

            partial_sort(head.begin(), head.end(), people.end(),
            	[](const Person& lhs, const Person& rhs) {
                return lhs.income > rhs.income;
            });

            int total_income = accumulate(head.begin(), head.end(), 0, [](int cur, const Person& p) {
                return p.income + cur;
            });
            cout << ""Top-""s << count << "" people have total income ""s << total_income << '\n';
        } else if (command == ""POPULAR_NAME""s) {
            char gender;
            cin >> gender;

            IteratorRange range{people.begin(), partition(people.begin(), people.end(), 
            					[gender](const Person& p) {
                                    return p.is_male == (gender == 'M');
                                })};
            if (range.begin() == range.end()) {
                cout << ""No people of gender ""s << gender << '\n';
            } else {
                sort(range.begin(), range.end(), 
                	[](const Person& lhs, const Person& rhs) {
                    return lhs.name < rhs.name;
                });
                string* most_popular_name = &range.begin()->name;
                int count = 1;
                for (auto i = range.begin(); i != range.end();) {
                    auto same_name_end = find_if_not(i, range.end(), 
                    	[i](const Person& p) {
                        return p.name == i->name;
                    });
                    auto cur_name_count = distance(i, same_name_end);
                    if (cur_name_count > count) {
                        count = cur_name_count;
                        most_popular_name = &i->name;
                    }
                    i = same_name_end;
                }
                cout << ""Most popular name among people of gender ""s << gender << "" is ""s << *most_popular_name << '\n';
            }
        }
    }
}"
GYryXEde,Untitled,MeehoweCK,C++,Monday 22nd of May 2023 04:44:22 AM CDT,"// main.cpp
#include ""Figura.h""
#include ""Kolo.h""
#include ""Kwadrat.h""
#include ""Trojkat.h""

int main()
{
    Figura* Ko = new Kolo;                  // deklaracja wskaźnika na obiekt klasy Figura o nazwie Ko i dynamiczne zaalokowanie do niego obiektu klasy Kolo
    Figura* Kw = new Kwadrat;
    Figura* Tr = new Trojkat;

    Ko->rysuj();                            // wywołanie metody wirtualnej rysuj() dla obiektu przypisanego do wskaźnika Ko
    Kw->rysuj();
    Tr->rysuj();

    delete Ko;                              // zwolnienie zaalokowanej pamięci ze wskaźnika Ko
    delete Kw;
    delete Tr;

    return 0;                               // wyjście z programu ze zwróceniem wartości zerowej (brak błędu)
}

// -------------------------------------------------

// Figura.h
#pragma once
class Figura
{
public:
	virtual void rysuj() const = 0;
};

// -------------------------------------------------

// Kolo.h
#pragma once
#include ""Figura.h""

class Kolo :
    public Figura
{
    virtual void rysuj() const;
};

// -------------------------------------------------

// Kolo.cpp
#include <iostream>
#include ""Kolo.h""

using namespace std;

void Kolo::rysuj() const                                   // nagłówek metody wirtualnej rysuj() typu void (konkretyzacja tej metody dla klasy Kolo
{
    cout << ""To jest kolo: ( )"" << endl;                // wypisanie na ekran komunikatu i przejście do kolejnego wiersza
}

// -------------------------------------------------

// Kwadrat.h
#pragma once
#include ""Figura.h""
class Kwadrat :
    public Figura
{
    virtual void rysuj() const;
};

// -------------------------------------------------

// Kwadrat.cpp
#include <iostream>
#include ""Kwadrat.h""

using namespace std;

void Kwadrat::rysuj() const
{
	cout << ""To jest kwadrat: [ ]"" << endl;
}

// -------------------------------------------------

// Trojkat.h
#pragma once
#include ""Figura.h""
class Trojkat :
    public Figura
{
    virtual void rysuj() const;
};

// -------------------------------------------------

// Trojkat.cpp
#include <iostream>
#include ""Trojkat.h""

using namespace std;

void Trojkat::rysuj() const
{
	cout << ""To jest trojkat: /_\\ "" << endl;
}"
