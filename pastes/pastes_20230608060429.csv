id,title,username,language,date,content
4dG4iirW,Slim,erufenix_,Bash,Thursday 8th of June 2023 12:53:31 AM CDT,"# En .env

SLIM_BASE_PATH=''

# Crear un .htaccess en raíz con

### Rewrite Rules Added by CyberPanel Rewrite Rule Generator

RewriteEngine On
RewriteCond %{HTTPS}  !=on
RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L]

### End CyberPanel Generated Rules.

RewriteEngine on
RewriteRule ^$ public/ [L]
RewriteRule (.*) public/$1 [L]

"
WKUkK0hR,BTC Wallet Credentials have been reset,confeossif_29,GetText,Thursday 8th of June 2023 12:07:46 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
radioadonaiyw:S7nsnF on 193.233.202.76(SSH)
Regards"
9KUHdAgy,Untitled,agentsix1,Lua,Wednesday 7th of June 2023 11:17:30 PM CDT,"local width  = 9
local depth  = 21
local chest_type = ""ironchest::crystal_chest""
local chest_size = 108
local storage_slot_start = 4
local planting = {
					{
					name = ""minecraft:wheat_seeds"",
					slot = 2
					},
					{
					name = ""minecraft:carrot"",
					slot = 3
					}
				 }
local planting_size = table.getn(planting)

local plants = { 
					{ 
						name = ""minecraft:potatoes"", 
						seed = ""minecraft:potato"",
						age  = 7
					},
					{ 
						name = ""minecraft:wheat"",
						seed = ""minecraft:wheat_seeds"",
						age  = 7
					},
					{ 
						name = ""minecraft:carrots"",
						seed = ""minecraft:carrot"",
						age  = 7
					},
					{ 
						name = ""minecraft:beetroots"",
						seed = ""minecraft:beetroot_seeds"",
						age  = 3
					},
					{ 
						name = ""thermal:bell_pepper"",
						seed = ""thermal:bell_pepper_seeds"",
						age  = 10
					},
					{ 
						name = ""thermal:radish"",
						seed = ""thermal:radish_seeds"",
						age  = 10
					},
					{ 
						name = ""thermal:rice"",
						seed = ""thermal:rice_seeds"",
						age  = 7
					},
					{ 
						name = ""thermal:spinach"",
						seed = ""thermal:spinach_seeds"",
						age  = 7
					},
					{ 
						name = ""thermal:eggplant"",
						seed = ""thermal:eggplant_seeds"",
						age  = 7
					}					
					
					
			   }
local plants_size = table.getn(plants)


function fuel_check()
    local fuelLevel = turtle.getFuelLevel()
    if turtle.getItemCount(1) < 1 then
        print(""We are currently waiting to be refueled!"")
        local waiting = true
        while waiting do
            if turtle.getItemCount(1) > 0 then
                print(""Thank you!"")
                waiting = false
                sleep(1)
            end
        end
    end
    if fuelLevel < 100 then
        turtle.select(1)
        turtle.refuel(2)
        print(""Refueled."")
    end
end

function check_age()
	local _, data = turtle.inspectDown()
	for i = 1, plants_size do
		local plant = plants[i]
		if data.name == plant.name then
			if plant.age == data.state.age then
				print(""fully grown"")
				return true
			end
		end
	end
	return false
end

function get_plant()
local _, data = turtle.inspectDown()
	for i = 1, plants_size do
		local plant = plants[i]
		if data.name == plant.name then
			return plant
		end
	end
	return nil
end

function select_seed(plant)
	for i = 1, planting_size do
		if planting.name == plant.name then
			turtle.select(planting[i].slot)
		end
	end
end

function check_seeds()
	for i = 1, planting_size do
		local plant = planting[i]
		local item = turtle.getItemDetail(plant.slot)
		if item == nil then
			print(""You need to put atleast 1 "" .. plant.name .. "" in slot "" .. plant.slot .. ""."")
			return false
		end
		if item.name ~= plant.name then
			print(""You need to put atleast 1 "" .. plant.name .. "" in slot "" .. plant.slot .. ""."")
			return false
		end
	end
end

function empty_slots()
	for i = storage_slot_start, 16 do
		if turtle.getItemCount(i) > 0 then
            turtle.select(i)
            turtle.drop()
        end
	end
end

function harvest_crop()
	if check_age() then
		local plant = get_plant()
		turtle.digDown()
		select_seed(plant)
		turtle.placeDown()
	end
end

while true do
	fuel_check()
	if not check_seeds() then
		return
	end
	
	for w = 1, width do
		if w ~= 1 then
			fuel_check()
			for d = 1, depth do
				turtle.back()
			end
			turtle.turnRight()
			turtle.forward()
			turtle.turnLeft()
		end
		for d = 1, depth do
			harvest_crop()
			fuel_check()
			turtle.forward()
		end	
	end
	fuel_check()
	for d = 1, depth do
		turtle.back()
	end
	turtle.turnLeft()
	fuel_check()
	for w = 1, width do
		turtle.forward()
	end
	turtle.turnLeft()
	empty_slots()
	turtle.turnRight()
	turtle.turnRight()
	os.sleep(30)
end"
Sgh0LnGG,Check Palindrome,Md_Touhid,C,Wednesday 7th of June 2023 11:17:27 PM CDT,"#include<stdio.h>
#include<string.h>

int check_palindrome(char* str)
{
    int len = strlen(str), i, j;

    for(i=0, j=len-1; i<j; i++, j--)
    {
        if(str[i] != str[j])
            return 0; //not palindrome
    }

    return 1; //palindrome
}

int main()
{
    char inputString[100];
    printf(""Enter String : "");
    scanf(""%s"", inputString);

    if(check_palindrome(inputString))
        printf(""Palindrome"");
    else
        printf(""Not Palindrome"");

    return 0;
}"
uHZ3L11u,Navegador Web em Python com Abas e com edição de Sites Favoritos,MizunoBrasil,Python,Wednesday 7th of June 2023 11:17:24 PM CDT,"Navegador simples em Python.
Permite carregar sites através de Abas, Gerenciar sites Favoritos: Cadastrar, Editar e Excluir. Obs: Os favoritos ficam salvos no arquivo favoritos.txt
Código para fins de estudo.
08/06/2023 - Mizuno
--------------------------------------------------------------------------------------------------

import sys
from PyQt5.QtCore import *
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtWidgets import *

class TabWidget(QTabWidget):
    def __init__(self):
        super(TabWidget, self).__init__()
        self.setTabsClosable(True)
        self.tabCloseRequested.connect(self.close_tab)
        self.favorites = []

        self.new_tab()

    def new_tab(self, url='http://google.com'):
        browser = QWebEngineView()
        browser.setUrl(QUrl(url))
        self.addTab(browser, 'New Tab')
        self.setCurrentWidget(browser)
        browser.urlChanged.connect(self.update_url)

    def close_tab(self, index):
        widget = self.widget(index)
        widget.deleteLater()
        self.removeTab(index)

    def update_url(self, q):
        browser = self.sender()
        index = self.indexOf(browser)
        self.setTabText(index, q.toString())

    def save_favorite(self):
        browser = self.currentWidget()
        page_title = browser.title()
        page_url = browser.url().toString()
        self.favorites.append((page_title, page_url))
        self.update_favorites_file()
        QMessageBox.information(self, 'Sucesso', 'Favorito salvo com sucesso!')

    def load_favorites(self):
        self.favorites.clear()
        try:
            with open('favoritos.txt', 'r') as file:
                lines = file.readlines()
                for line in lines:
                    parts = line.strip().split(',')
                    if len(parts) == 2:
                        page_title, page_url = parts
                        self.favorites.append((page_title, page_url))
        except FileNotFoundError:
            QMessageBox.warning(self, 'Erro', 'Arquivo de favoritos não encontrado.')

        self.show_favorites_dialog()

    def show_favorites_dialog(self):
        dialog = QDialog()
        dialog.setWindowTitle('Favoritos')
        dialog.setModal(True)

        layout = QVBoxLayout()
        dialog.setLayout(layout)

        list_widget = QListWidget()
        list_widget.setSpacing(5)

        for page_title, page_url in self.favorites:
            list_widget.addItem(QListWidgetItem(page_title))

        layout.addWidget(list_widget)

        button_box = QDialogButtonBox()
        open_button = button_box.addButton('Abrir', QDialogButtonBox.ActionRole)
        edit_button = button_box.addButton('Editar', QDialogButtonBox.ActionRole)
        delete_button = button_box.addButton('Excluir', QDialogButtonBox.ActionRole)
        close_button = button_box.addButton('Fechar', QDialogButtonBox.RejectRole)
        layout.addWidget(button_box)

        def open_favorite():
            selected_item = list_widget.currentItem()
            if selected_item:
                index = list_widget.row(selected_item)
                _, page_url = self.favorites[index]
                browser = self.currentWidget()
                browser.setUrl(QUrl(page_url))
                dialog.close()

        def edit_favorite():
            selected_item = list_widget.currentItem()
            if selected_item:
                index = list_widget.row(selected_item)
                page_title, page_url = self.favorites[index]
                edit_dialog = QDialog()
                edit_dialog.setWindowTitle('Editar Favorito')
                edit_dialog.setModal(True)
                edit_layout = QVBoxLayout()
                edit_dialog.setLayout(edit_layout)

                edit_name = QLineEdit(page_title)
                edit_url = QLineEdit(page_url)

                edit_layout.addWidget(QLabel('Nome:'))
                edit_layout.addWidget(edit_name)
                edit_layout.addWidget(QLabel('URL:'))
                edit_layout.addWidget(edit_url)

                save_button = QPushButton('Salvar')
                edit_layout.addWidget(save_button)

                def save_edited_favorite():
                    new_title = edit_name.text()
                    new_url = edit_url.text()
                    if new_title and new_url:
                        self.favorites[index] = (new_title, new_url)
                        self.update_favorites_file()
                        selected_item.setText(new_title)
                        QMessageBox.information(self, 'Sucesso', 'Favorito atualizado com sucesso!')
                        edit_dialog.close()
                    else:
                        QMessageBox.warning(self, 'Erro', 'Preencha todos os campos.')

                save_button.clicked.connect(save_edited_favorite)
                edit_dialog.exec_()

        def delete_favorite():
            selected_item = list_widget.currentItem()
            if selected_item:
                index = list_widget.row(selected_item)
                confirm_dialog = QMessageBox.question(self, 'Excluir Favorito',
                                                      'Tem certeza que deseja excluir este favorito?',
                                                      QMessageBox.Yes | QMessageBox.No)
                if confirm_dialog == QMessageBox.Yes:
                    self.favorites.pop(index)
                    self.update_favorites_file()
                    list_widget.takeItem(list_widget.row(selected_item))
                    QMessageBox.information(self, 'Sucesso', 'Favorito excluído com sucesso!')

        def close_dialog():
            dialog.close()

        open_button.clicked.connect(open_favorite)
        edit_button.clicked.connect(edit_favorite)
        delete_button.clicked.connect(delete_favorite)
        close_button.clicked.connect(close_dialog)

        dialog.exec_()

    def update_favorites_file(self):
        with open('favoritos.txt', 'w') as file:
            for page_title, page_url in self.favorites:
                file.write(f""{page_title},{page_url}\n"")

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        self.tab_widget = TabWidget()
        self.setCentralWidget(self.tab_widget)
        self.showMaximized()

        navbar = QToolBar()
        self.addToolBar(navbar)

        new_tab_btn = QAction('Nova Aba', self)
        new_tab_btn.triggered.connect(lambda: self.tab_widget.new_tab())
        navbar.addAction(new_tab_btn)

        save_favorite_btn = QAction('Salvar Favorito', self)
        save_favorite_btn.triggered.connect(self.tab_widget.save_favorite)
        navbar.addAction(save_favorite_btn)

        load_favorites_btn = QAction('Carregar Favoritos', self)
        load_favorites_btn.triggered.connect(self.tab_widget.load_favorites)
        navbar.addAction(load_favorites_btn)

        back_btn = QAction('Voltar', self)
        back_btn.triggered.connect(self.current_browser().back)
        navbar.addAction(back_btn)

        forward_btn = QAction('Avançar', self)
        forward_btn.triggered.connect(self.current_browser().forward)
        navbar.addAction(forward_btn)

        reload_btn = QAction('Recarregar', self)
        reload_btn.triggered.connect(self.current_browser().reload)
        navbar.addAction(reload_btn)

        home_btn = QAction('Home', self)
        home_btn.triggered.connect(self.navigate_home)
        navbar.addAction(home_btn)

        self.url_bar = QLineEdit()
        self.url_bar.returnPressed.connect(self.navigate_to_url)
        navbar.addWidget(self.url_bar)

        copy_btn = QAction('Copiar URL', self)
        copy_btn.triggered.connect(self.copy_url)
        navbar.addAction(copy_btn)

        self.tab_widget.currentChanged.connect(self.update_url)

    def current_browser(self):
        return self.tab_widget.currentWidget()

    def navigate_home(self):
        self.current_browser().setUrl(QUrl('http://google.com'))

    def navigate_to_url(self):
        url = self.url_bar.text()
        self.current_browser().setUrl(QUrl(url))

    def update_url(self, index):
        browser = self.tab_widget.widget(index)
        self.url_bar.setText(browser.url().toString())

    def copy_url(self):
        clipboard = QApplication.clipboard()
        clipboard.setText(self.url_bar.text())
        QMessageBox.information(self, 'Sucesso', 'URL copiada para a área de transferência!')

app = QApplication(sys.argv)
QApplication.setApplicationName('Navegador com Abas')
window = MainWindow()
app.exec_()
"
xgQ00uDB,lua_run - comandos,ht777,Lua,Wednesday 7th of June 2023 11:16:31 PM CDT,"Quitar pistas de sandbox (si esta en 0)
for k,ply in pairs(player.GetAll()) do ply:ConCommand([[cl_showhints 0]]) end

cambiar el personaje del jugador (no cambia las manos)
for i, ply in pairs(player.GetAll()) do if (ply:IsValid()) then ply:SetModel( [[models/player/nombre_del_personaje.mdl]] ) end end

Implementer un nuevo valor para altura al saltar
for k, v in pairs(player.GetAll()) do v:SetJumpPower( 100 ) end

Implementer un nuevo valor para la velocidad de caminar
for k, v in pairs(player.GetAll()) do v:SetWalkSpeed( 100 ) end

Implementer un nuevo valor para la velocidad de correr
for i, ply in pairs(player.GetAll()) do if (ply:IsValid()) then ply:SetRunSpeed( 190 ) end end

desactivar/activar noclip
local function DisableNoclip( ply ) return false end hook.Add( [[PlayerNoClip]], [[DisableNoclip]], DisableNoclip )

desactivar/activar herramientas del modo sandbox de gmod
function GAMEMODE:CanTool( ply, tr, tool ) return false end

modo dios
for k,ply in pairs(player.GetAll()) do ply:ConCommand([[sbox_godmode 0]]) end

desactivar/activar de que el personaje del jugador empiece con armas
function GAMEMODE:PlayerSpawnSWEP( ply, weapon, info ) return false end

desactivar/activar linterna
for i, ply in pairs( player.GetAll() ) do ply:AllowFlashlight( false ) end
"
CeVy4etF,Fucksms,Ravanayt,Python,Wednesday 7th of June 2023 10:36:15 PM CDT,"number=str(input(""Enter your number : ""))
amount=int(input(""Enter the amount  : ""))
url1 = ""https://services.rappi.com.br/api/rappi-authentication/login/whatsapp/create""

headers1 = CaseInsensitiveDict()
headers1[""Content-Type""] = ""application/json""

data1 = '{""country_code"":""+91"",""phone"":""'+number+'\""}'


#url2 = ""https://identity.tllms.com/api/request_otp""
#headers2 = CaseInsensitiveDict()
#headers2[""Content-Type""] = ""application/json""
#data2 = '{""phone"":""+44-'+number+'\"",""app_client_id"":""90391da1-ee49-4378-bd12-1924134e906e""}'



#url3 = ""https://khiladi.com/v1/exchange/user/userRegisterOtpSent""
#headers3 = CaseInsensitiveDict()
#headers3[""Content-Type""] = ""application/json""
#data3 = '{""mobileNo"":""+44'+number+'\"",""userName"":""LANDROID""}'


#url4 = ""https://webrouter-bbe-prod.angelbroking.com/login/v3/generateLoginOTP""
#headers4 = CaseInsensitiveDict()
#headers4[""Content-Type""] = ""application/json""
#data4 = '{""country_code"":""+44"",""is_otp_resend"":false,""mob_no"":""'+number+'\"",""user_id"":""""}'

for j in range (amount):
 resp1 = requests.post(url1, headers=headers1, data=data1)
 print(str(j+1)+""sms sent"")"
C8SNUk5k,Vector3Converter,apieceoffruit,C#,Wednesday 7th of June 2023 09:54:39 PM CDT,"  public class Vector3Converter : JsonConverter
    {
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var vector = (Vector3)value;
            writer.WriteStartArray();
            writer.WriteValue(vector.x);
            writer.WriteValue(vector.y);
            writer.WriteValue(vector.z);
            writer.WriteEndArray();
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var val= new Vector3(reader.ReadAsFloat(), reader.ReadAsFloat(), reader.ReadAsFloat());
            while(reader.TokenType != JsonToken.EndArray)
                reader.Read();
            return val;
        }

        public override bool CanConvert(Type objectType) => objectType == typeof(Vector3);
    }

    public class QuaternionConverter : JsonConverter
    {
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var vector = (Quaternion)value;
            writer.WriteStartArray();
            writer.WriteValue(vector.x);
            writer.WriteValue(vector.y);
            writer.WriteValue(vector.z);
            writer.WriteValue(vector.w);
            writer.WriteEndArray();
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var val= new Quaternion(reader.ReadAsFloat(), reader.ReadAsFloat(), reader.ReadAsFloat(),reader.ReadAsFloat());
            while(reader.TokenType != JsonToken.EndArray)
                reader.Read();
            return val;
        }

        public override bool CanConvert(Type objectType) => objectType == typeof(Quaternion);
    }

    
    public static class JsonExtensions
    {
        public static float ReadAsFloat(this JsonReader reader) => (float)(reader.ReadAsDecimal()).GetValueOrDefault();
    }"
SCRu2WhQ,# tk_ultra_infinite_zoom.py,here2share,Python,Wednesday 7th of June 2023 09:42:55 PM CDT,"# tk_ultra_infinite_zoom.py

import tkinter as tk
from PIL import Image, ImageTk, ImageDraw, ImageFilter
import math
import random

ww = 600
hh = 600

root = tk.Tk()
root.title(""tk_ultra_infinite_zoom"")
root.geometry(""%dx%d+0+0""%(ww,hh))
canvas = tk.Canvas(root, bg='white', width=ww, height=hh)
canvas.pack()

cx, cy = ww//2, hh//2
img = Image.new('RGB', (ww, hh), ""white"")

pixels = []

t = 100
cXY = [(x, y) for x in range(cx-t, cx+t) for y in range(cy-t, cy+t)]
random.shuffle(cXY)

for y in range(hh):
	for x in range(ww):
		r, g, b = random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)
		pixels.append((r, g, b))

img.putdata(pixels)
tkimg = ImageTk.PhotoImage(img)
canvas.create_image((cx, cy), image=tkimg)
canvas.update()

# calculate the blur radius to achieve 0.01% blur
blur_radius = 0.0003 * min(img.size)

scale = 15
rnd = 50
# Zoom effect
while True:
	for i in range(1000):
		x, y = cXY.pop(0)
		cXY.insert(-(10-(i%10)), (x, y))
		r, g, b = img.getpixel((x,y))
		r = max(0, min(255, r + random.randint(-rnd, rnd)))
		g = max(0, min(255, g + random.randint(-rnd, rnd)))
		b = max(0, min(255, b + random.randint(-rnd, rnd)))
		img.putpixel((x, y), (r, g, b))

	img = img.resize((ww, hh), resample=Image.LANCZOS)
	img = img.filter(ImageFilter.GaussianBlur(radius=blur_radius))
	
	# crop parameters to zoom into the center
	img = img.crop((scale/2, scale/2, ww-scale/2, hh-scale/2))
	
	tkimg = ImageTk.PhotoImage(img)
	canvas.create_image((cx, cy), image=tkimg)
	canvas.update()"
GcnMJD5c,Builder Auto Resource,GDragonArcher,Lua,Wednesday 7th of June 2023 09:17:03 PM CDT,"--this will check what a builder needs and take it from the storage system and put it into a chest. From there a modular router connected to the racks in the builder's hut will then put the items in the racks for the builder to use. This automates the building process

local integrator = peripheral.find(""colonyIntegrator"")
local bridge = peripheral.find(""rsBridge"")

location = {x,y,z} --this is the x,y,z coordinates of the builders hut block

items = getBuilderResources(location)	--should give table with item name as string and quantity number

exportItem(item: table, direction: string)"
DmQJWQtM,Build_Qt6_From_Source,jiapei100,Bash,Wednesday 7th of June 2023 08:56:43 PM CDT,"➜  qt-everywhere-src-6.5.1 cmake --build . --parallel
[1/9822] : && /home/lvision/.local/lib/python3.10/site-packages/cmake/data/bin/cmake -E rm -f qtbase/src/tools/bootstrap/libBootstrap.a && /usr/bin/ar qc qtbase/src/tools/bootstrap/libBootstrap.a  qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qassert.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qendian.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qfloat16.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qglobal.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qlogging.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qmalloc.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qnumeric.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qoperatingsystemversion.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qrandom.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/global/qtenvironmentvariables.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qabstractfileengine.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qbuffer.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qdebug.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qdir.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qdiriterator.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfile.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfiledevice.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfileinfo.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfilesystemengine.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfilesystementry.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfsfileengine.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfsfileengine_iterator.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qiodevice.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qloggingcategory.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qloggingregistry.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qresource.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qsavefile.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qstandardpaths.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qtemporaryfile.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/kernel/qcoreapplication.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/kernel/qiterable.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/kernel/qmetacontainer.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/kernel/qmetatype.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/kernel/qsystemerror.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/kernel/qvariant.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/plugin/quuid.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qcborcommon.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qcborstreamwriter.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qcborvalue.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qdatastream.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qjsonarray.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qjsoncbor.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qjsondocument.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qjsonobject.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qjsonparser.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qjsonvalue.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qjsonwriter.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/serialization/qtextstream.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qbytearray.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qbytearraylist.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qbytearraymatcher.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qlatin1stringmatcher.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qlocale.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qlocale_tools.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qregularexpression.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qstring.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qstringbuilder.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qstringconverter.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qstringlist.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/text/qvsnprintf.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/time/qcalendar.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/time/qdatetime.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/time/qgregoriancalendar.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/time/qlocaltime.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/time/qromancalendar.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/time/qtimezone.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/tools/qarraydata.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/tools/qbitarray.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/tools/qcommandlineoption.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/tools/qcommandlineparser.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/tools/qcryptographichash.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/tools/qhash.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/tools/qringbuffer.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/tools/qversionnumber.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfilesystemengine_unix.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfilesystemiterator_unix.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qfsfileengine_unix.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/kernel/qcore_unix.cpp.o qtbase/src/tools/bootstrap/CMakeFiles/Bootstrap.dir/__/__/corelib/io/qstandardpaths_unix.cpp.o && /usr/bin/ranlib qtbase/src/tools/bootstrap/libBootstrap.a && :
[2/9822] : && /usr/bin/c++ -DNDEBUG -O2 -Wl,--enable-new-dtags -no-pie qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/main.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/qgrpcgenerator.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/grpctemplates.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/serverdeclarationprinter.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/clientdeclarationprinter.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/clientdefinitionprinter.cpp.o -o qtbase/libexec/qtgrpcgen  -Wl,-rpath,/usr/local/lib:  qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a  /usr/local/lib/libprotoc.a  /usr/local/lib/libprotobuf.a  /usr/local/lib/libabsl_log_internal_check_op.a  /usr/local/lib/libabsl_leak_check.a  /usr/local/lib/libabsl_die_if_null.a  /usr/local/lib/libabsl_log_internal_conditions.a  /usr/local/lib/libabsl_log_internal_message.a  /usr/local/lib/libabsl_log_internal_nullguard.a  /usr/local/lib/libabsl_examine_stack.a  /usr/local/lib/libabsl_log_internal_format.a  /usr/local/lib/libabsl_log_internal_proto.a  /usr/local/lib/libabsl_log_internal_log_sink_set.a  /usr/local/lib/libabsl_log_sink.a  /usr/local/lib/libabsl_log_entry.a  /usr/local/lib/libabsl_flags.a  /usr/local/lib/libabsl_flags_internal.a  /usr/local/lib/libabsl_flags_marshalling.a  /usr/local/lib/libabsl_flags_reflection.a  /usr/local/lib/libabsl_flags_config.a  /usr/local/lib/libabsl_flags_program_name.a  /usr/local/lib/libabsl_flags_private_handle_accessor.a  /usr/local/lib/libabsl_flags_commandlineflag.a  /usr/local/lib/libabsl_flags_commandlineflag_internal.a  /usr/local/lib/libabsl_log_initialize.a  /usr/local/lib/libabsl_log_globals.a  /usr/local/lib/libabsl_log_internal_globals.a  /usr/local/lib/libabsl_hash.a  /usr/local/lib/libabsl_city.a  /usr/local/lib/libabsl_low_level_hash.a  /usr/local/lib/libabsl_raw_hash_set.a  /usr/local/lib/libabsl_hashtablez_sampler.a  /usr/local/lib/libabsl_statusor.a  /usr/local/lib/libabsl_status.a  /usr/local/lib/libabsl_cord.a  /usr/local/lib/libabsl_cordz_info.a  /usr/local/lib/libabsl_cord_internal.a  /usr/local/lib/libabsl_cordz_functions.a  /usr/local/lib/libabsl_exponential_biased.a  /usr/local/lib/libabsl_cordz_handle.a  /usr/local/lib/libabsl_crc_cord_state.a  /usr/local/lib/libabsl_crc32c.a  /usr/local/lib/libabsl_crc_internal.a  /usr/local/lib/libabsl_crc_cpu_detect.a  /usr/local/lib/libabsl_bad_optional_access.a  /usr/local/lib/libabsl_str_format_internal.a  /usr/local/lib/libabsl_strerror.a  /usr/local/lib/libabsl_synchronization.a  /usr/local/lib/libabsl_stacktrace.a  /usr/local/lib/libabsl_symbolize.a  /usr/local/lib/libabsl_debugging_internal.a  /usr/local/lib/libabsl_demangle_internal.a  /usr/local/lib/libabsl_graphcycles_internal.a  /usr/local/lib/libabsl_malloc_internal.a  /usr/local/lib/libabsl_time.a  /usr/local/lib/libabsl_civil_time.a  /usr/local/lib/libabsl_time_zone.a  /usr/local/lib/libabsl_bad_variant_access.a  /usr/local/lib/libzlib.so  /usr/local/lib/libutf8_validity.a  /usr/local/lib/libabsl_strings.a  /usr/local/lib/libabsl_throw_delegate.a  /usr/local/lib/libabsl_int128.a  /usr/local/lib/libabsl_strings_internal.a  /usr/local/lib/libabsl_base.a  /usr/local/lib/libabsl_raw_logging_internal.a  /usr/local/lib/libabsl_log_severity.a  /usr/local/lib/libabsl_spinlock_wait.a  -lrt  -lprotobuf && :
FAILED: qtbase/libexec/qtgrpcgen 
: && /usr/bin/c++ -DNDEBUG -O2 -Wl,--enable-new-dtags -no-pie qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/main.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/qgrpcgenerator.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/grpctemplates.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/serverdeclarationprinter.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/clientdeclarationprinter.cpp.o qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/clientdefinitionprinter.cpp.o -o qtbase/libexec/qtgrpcgen  -Wl,-rpath,/usr/local/lib:  qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a  /usr/local/lib/libprotoc.a  /usr/local/lib/libprotobuf.a  /usr/local/lib/libabsl_log_internal_check_op.a  /usr/local/lib/libabsl_leak_check.a  /usr/local/lib/libabsl_die_if_null.a  /usr/local/lib/libabsl_log_internal_conditions.a  /usr/local/lib/libabsl_log_internal_message.a  /usr/local/lib/libabsl_log_internal_nullguard.a  /usr/local/lib/libabsl_examine_stack.a  /usr/local/lib/libabsl_log_internal_format.a  /usr/local/lib/libabsl_log_internal_proto.a  /usr/local/lib/libabsl_log_internal_log_sink_set.a  /usr/local/lib/libabsl_log_sink.a  /usr/local/lib/libabsl_log_entry.a  /usr/local/lib/libabsl_flags.a  /usr/local/lib/libabsl_flags_internal.a  /usr/local/lib/libabsl_flags_marshalling.a  /usr/local/lib/libabsl_flags_reflection.a  /usr/local/lib/libabsl_flags_config.a  /usr/local/lib/libabsl_flags_program_name.a  /usr/local/lib/libabsl_flags_private_handle_accessor.a  /usr/local/lib/libabsl_flags_commandlineflag.a  /usr/local/lib/libabsl_flags_commandlineflag_internal.a  /usr/local/lib/libabsl_log_initialize.a  /usr/local/lib/libabsl_log_globals.a  /usr/local/lib/libabsl_log_internal_globals.a  /usr/local/lib/libabsl_hash.a  /usr/local/lib/libabsl_city.a  /usr/local/lib/libabsl_low_level_hash.a  /usr/local/lib/libabsl_raw_hash_set.a  /usr/local/lib/libabsl_hashtablez_sampler.a  /usr/local/lib/libabsl_statusor.a  /usr/local/lib/libabsl_status.a  /usr/local/lib/libabsl_cord.a  /usr/local/lib/libabsl_cordz_info.a  /usr/local/lib/libabsl_cord_internal.a  /usr/local/lib/libabsl_cordz_functions.a  /usr/local/lib/libabsl_exponential_biased.a  /usr/local/lib/libabsl_cordz_handle.a  /usr/local/lib/libabsl_crc_cord_state.a  /usr/local/lib/libabsl_crc32c.a  /usr/local/lib/libabsl_crc_internal.a  /usr/local/lib/libabsl_crc_cpu_detect.a  /usr/local/lib/libabsl_bad_optional_access.a  /usr/local/lib/libabsl_str_format_internal.a  /usr/local/lib/libabsl_strerror.a  /usr/local/lib/libabsl_synchronization.a  /usr/local/lib/libabsl_stacktrace.a  /usr/local/lib/libabsl_symbolize.a  /usr/local/lib/libabsl_debugging_internal.a  /usr/local/lib/libabsl_demangle_internal.a  /usr/local/lib/libabsl_graphcycles_internal.a  /usr/local/lib/libabsl_malloc_internal.a  /usr/local/lib/libabsl_time.a  /usr/local/lib/libabsl_civil_time.a  /usr/local/lib/libabsl_time_zone.a  /usr/local/lib/libabsl_bad_variant_access.a  /usr/local/lib/libzlib.so  /usr/local/lib/libutf8_validity.a  /usr/local/lib/libabsl_strings.a  /usr/local/lib/libabsl_throw_delegate.a  /usr/local/lib/libabsl_int128.a  /usr/local/lib/libabsl_strings_internal.a  /usr/local/lib/libabsl_base.a  /usr/local/lib/libabsl_raw_logging_internal.a  /usr/local/lib/libabsl_log_severity.a  /usr/local/lib/libabsl_spinlock_wait.a  -lrt  -lprotobuf && :
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::printPublicBlock()':
baseprinter.cpp:(.text+0x1c4): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::printPrivateBlock()':
baseprinter.cpp:(.text+0x254): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::Indent()':
baseprinter.cpp:(.text+0x29c): undefined reference to `google::protobuf::io::Printer::Indent()'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::printCommentsImpl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)':
baseprinter.cpp:(.text+0x3ac): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: baseprinter.cpp:(.text+0x3f3): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: baseprinter.cpp:(.text+0x434): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: baseprinter.cpp:(.text+0x53e): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: baseprinter.cpp:(.text+0x599): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::Indent()':
baseprinter.cpp:(.text+0x2a5): undefined reference to `google::protobuf::io::Printer::Indent()'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(generatorbase.cpp.o): in function `qtprotoccommon::GeneratorBase::printDisclaimer(google::protobuf::io::Printer*)':
generatorbase.cpp:(.text+0x4f4): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(generatorbase.cpp.o): in function `qtprotoccommon::GeneratorBase::CloseFileNamespaces(google::protobuf::FileDescriptor const*, google::protobuf::io::Printer*) const':
generatorbase.cpp:(.text+0x6b5): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: generatorbase.cpp:(.text+0x714): undefined reference to `google::protobuf::io::Printer::PrintRaw(char const*)'
/usr/bin/ld: generatorbase.cpp:(.text+0x751): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(generatorbase.cpp.o): in function `qtprotoccommon::GeneratorBase::OpenFileNamespaces(google::protobuf::FileDescriptor const*, google::protobuf::io::Printer*) const':
generatorbase.cpp:(.text+0x8dc): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: generatorbase.cpp:(.text+0x9de): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: generatorbase.cpp:(.text+0xaa3): undefined reference to `google::protobuf::io::Printer::PrintRaw(char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/qgrpcgenerator.cpp.o: in function `QtGrpc::QGrpcGenerator::GenerateServerServices(google::protobuf::FileDescriptor const*, google::protobuf::compiler::GeneratorContext*) const':
qgrpcgenerator.cpp:(.text+0xe37): undefined reference to `google::protobuf::io::Printer::Printer(google::protobuf::io::ZeroCopyOutputStream*, char)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x1060): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x1112): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x14c5): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x1704): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x194e): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x19c2): undefined reference to `google::protobuf::io::Printer::PrintRaw(char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x1c55): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x1fa2): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x21d6): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/qgrpcgenerator.cpp.o: in function `QtGrpc::QGrpcGenerator::GenerateClientServices(google::protobuf::FileDescriptor const*, google::protobuf::compiler::GeneratorContext*) const [clone .part.0]':
qgrpcgenerator.cpp:(.text+0x2698): undefined reference to `google::protobuf::io::Printer::Printer(google::protobuf::io::ZeroCopyOutputStream*, char)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x26d6): undefined reference to `google::protobuf::io::Printer::Printer(google::protobuf::io::ZeroCopyOutputStream*, char)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x28ff): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x29b2): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x2b48): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x2f44): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x3134): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x31b7): undefined reference to `google::protobuf::io::Printer::PrintRaw(char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x3559): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x378a): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x3b97): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x3d50): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qgrpcgenerator.cpp:(.text+0x3f01): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtgrpcgen/CMakeFiles/qtgrpcgen.dir/qgrpcgenerator.cpp.o:qgrpcgenerator.cpp:(.text+0x40aa): more undefined references to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)' follow
collect2: error: ld returned 1 exit status
[3/9822] : && /usr/bin/c++ -DNDEBUG -O2 -Wl,--enable-new-dtags -no-pie qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/main.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/qprotobufgenerator.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/messagedeclarationprinter.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/messagedefinitionprinter.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/enumdeclarationprinter.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/enumdefinitionprinter.cpp.o -o qtbase/libexec/qtprotobufgen  -Wl,-rpath,/usr/local/lib:  qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a  /usr/local/lib/libprotoc.a  /usr/local/lib/libprotobuf.a  /usr/local/lib/libzlib.so  /usr/local/lib/libutf8_validity.a  /usr/local/lib/libabsl_log_internal_check_op.a  /usr/local/lib/libabsl_leak_check.a  /usr/local/lib/libabsl_die_if_null.a  /usr/local/lib/libabsl_log_internal_conditions.a  /usr/local/lib/libabsl_log_internal_message.a  /usr/local/lib/libabsl_log_internal_nullguard.a  /usr/local/lib/libabsl_examine_stack.a  /usr/local/lib/libabsl_log_internal_format.a  /usr/local/lib/libabsl_log_internal_proto.a  /usr/local/lib/libabsl_log_internal_log_sink_set.a  /usr/local/lib/libabsl_log_sink.a  /usr/local/lib/libabsl_log_entry.a  /usr/local/lib/libabsl_flags.a  /usr/local/lib/libabsl_flags_internal.a  /usr/local/lib/libabsl_flags_marshalling.a  /usr/local/lib/libabsl_flags_reflection.a  /usr/local/lib/libabsl_flags_config.a  /usr/local/lib/libabsl_flags_program_name.a  /usr/local/lib/libabsl_flags_private_handle_accessor.a  /usr/local/lib/libabsl_flags_commandlineflag.a  /usr/local/lib/libabsl_flags_commandlineflag_internal.a  /usr/local/lib/libabsl_log_initialize.a  /usr/local/lib/libabsl_log_globals.a  /usr/local/lib/libabsl_log_internal_globals.a  /usr/local/lib/libabsl_hash.a  /usr/local/lib/libabsl_city.a  /usr/local/lib/libabsl_low_level_hash.a  /usr/local/lib/libabsl_raw_hash_set.a  /usr/local/lib/libabsl_hashtablez_sampler.a  /usr/local/lib/libabsl_statusor.a  /usr/local/lib/libabsl_status.a  /usr/local/lib/libabsl_cord.a  /usr/local/lib/libabsl_cordz_info.a  /usr/local/lib/libabsl_cord_internal.a  /usr/local/lib/libabsl_cordz_functions.a  /usr/local/lib/libabsl_exponential_biased.a  /usr/local/lib/libabsl_cordz_handle.a  /usr/local/lib/libabsl_crc_cord_state.a  /usr/local/lib/libabsl_crc32c.a  /usr/local/lib/libabsl_crc_internal.a  /usr/local/lib/libabsl_crc_cpu_detect.a  /usr/local/lib/libabsl_bad_optional_access.a  /usr/local/lib/libabsl_str_format_internal.a  /usr/local/lib/libabsl_strerror.a  /usr/local/lib/libabsl_synchronization.a  /usr/local/lib/libabsl_stacktrace.a  /usr/local/lib/libabsl_symbolize.a  /usr/local/lib/libabsl_debugging_internal.a  /usr/local/lib/libabsl_demangle_internal.a  /usr/local/lib/libabsl_graphcycles_internal.a  /usr/local/lib/libabsl_malloc_internal.a  /usr/local/lib/libabsl_time.a  /usr/local/lib/libabsl_strings.a  /usr/local/lib/libabsl_throw_delegate.a  /usr/local/lib/libabsl_strings_internal.a  /usr/local/lib/libabsl_base.a  /usr/local/lib/libabsl_spinlock_wait.a  -lrt  /usr/local/lib/libabsl_int128.a  /usr/local/lib/libabsl_civil_time.a  /usr/local/lib/libabsl_time_zone.a  /usr/local/lib/libabsl_bad_variant_access.a  /usr/local/lib/libabsl_raw_logging_internal.a  /usr/local/lib/libabsl_log_severity.a  -lprotobuf && :
FAILED: qtbase/libexec/qtprotobufgen 
: && /usr/bin/c++ -DNDEBUG -O2 -Wl,--enable-new-dtags -no-pie qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/main.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/qprotobufgenerator.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/messagedeclarationprinter.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/messagedefinitionprinter.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/enumdeclarationprinter.cpp.o qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/enumdefinitionprinter.cpp.o -o qtbase/libexec/qtprotobufgen  -Wl,-rpath,/usr/local/lib:  qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a  /usr/local/lib/libprotoc.a  /usr/local/lib/libprotobuf.a  /usr/local/lib/libzlib.so  /usr/local/lib/libutf8_validity.a  /usr/local/lib/libabsl_log_internal_check_op.a  /usr/local/lib/libabsl_leak_check.a  /usr/local/lib/libabsl_die_if_null.a  /usr/local/lib/libabsl_log_internal_conditions.a  /usr/local/lib/libabsl_log_internal_message.a  /usr/local/lib/libabsl_log_internal_nullguard.a  /usr/local/lib/libabsl_examine_stack.a  /usr/local/lib/libabsl_log_internal_format.a  /usr/local/lib/libabsl_log_internal_proto.a  /usr/local/lib/libabsl_log_internal_log_sink_set.a  /usr/local/lib/libabsl_log_sink.a  /usr/local/lib/libabsl_log_entry.a  /usr/local/lib/libabsl_flags.a  /usr/local/lib/libabsl_flags_internal.a  /usr/local/lib/libabsl_flags_marshalling.a  /usr/local/lib/libabsl_flags_reflection.a  /usr/local/lib/libabsl_flags_config.a  /usr/local/lib/libabsl_flags_program_name.a  /usr/local/lib/libabsl_flags_private_handle_accessor.a  /usr/local/lib/libabsl_flags_commandlineflag.a  /usr/local/lib/libabsl_flags_commandlineflag_internal.a  /usr/local/lib/libabsl_log_initialize.a  /usr/local/lib/libabsl_log_globals.a  /usr/local/lib/libabsl_log_internal_globals.a  /usr/local/lib/libabsl_hash.a  /usr/local/lib/libabsl_city.a  /usr/local/lib/libabsl_low_level_hash.a  /usr/local/lib/libabsl_raw_hash_set.a  /usr/local/lib/libabsl_hashtablez_sampler.a  /usr/local/lib/libabsl_statusor.a  /usr/local/lib/libabsl_status.a  /usr/local/lib/libabsl_cord.a  /usr/local/lib/libabsl_cordz_info.a  /usr/local/lib/libabsl_cord_internal.a  /usr/local/lib/libabsl_cordz_functions.a  /usr/local/lib/libabsl_exponential_biased.a  /usr/local/lib/libabsl_cordz_handle.a  /usr/local/lib/libabsl_crc_cord_state.a  /usr/local/lib/libabsl_crc32c.a  /usr/local/lib/libabsl_crc_internal.a  /usr/local/lib/libabsl_crc_cpu_detect.a  /usr/local/lib/libabsl_bad_optional_access.a  /usr/local/lib/libabsl_str_format_internal.a  /usr/local/lib/libabsl_strerror.a  /usr/local/lib/libabsl_synchronization.a  /usr/local/lib/libabsl_stacktrace.a  /usr/local/lib/libabsl_symbolize.a  /usr/local/lib/libabsl_debugging_internal.a  /usr/local/lib/libabsl_demangle_internal.a  /usr/local/lib/libabsl_graphcycles_internal.a  /usr/local/lib/libabsl_malloc_internal.a  /usr/local/lib/libabsl_time.a  /usr/local/lib/libabsl_strings.a  /usr/local/lib/libabsl_throw_delegate.a  /usr/local/lib/libabsl_strings_internal.a  /usr/local/lib/libabsl_base.a  /usr/local/lib/libabsl_spinlock_wait.a  -lrt  /usr/local/lib/libabsl_int128.a  /usr/local/lib/libabsl_civil_time.a  /usr/local/lib/libabsl_time_zone.a  /usr/local/lib/libabsl_bad_variant_access.a  /usr/local/lib/libabsl_raw_logging_internal.a  /usr/local/lib/libabsl_log_severity.a  -lprotobuf && :
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::printPublicBlock()':
baseprinter.cpp:(.text+0x1c4): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::printPrivateBlock()':
baseprinter.cpp:(.text+0x254): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::Indent()':
baseprinter.cpp:(.text+0x29c): undefined reference to `google::protobuf::io::Printer::Indent()'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::printCommentsImpl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)':
baseprinter.cpp:(.text+0x3ac): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: baseprinter.cpp:(.text+0x3f3): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: baseprinter.cpp:(.text+0x434): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: baseprinter.cpp:(.text+0x53e): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: baseprinter.cpp:(.text+0x599): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(baseprinter.cpp.o): in function `qtprotoccommon::BasePrinter::Indent()':
baseprinter.cpp:(.text+0x2a5): undefined reference to `google::protobuf::io::Printer::Indent()'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(generatorbase.cpp.o): in function `qtprotoccommon::GeneratorBase::printDisclaimer(google::protobuf::io::Printer*)':
generatorbase.cpp:(.text+0x4f4): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(generatorbase.cpp.o): in function `qtprotoccommon::GeneratorBase::CloseFileNamespaces(google::protobuf::FileDescriptor const*, google::protobuf::io::Printer*) const':
generatorbase.cpp:(.text+0x6b5): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: generatorbase.cpp:(.text+0x714): undefined reference to `google::protobuf::io::Printer::PrintRaw(char const*)'
/usr/bin/ld: generatorbase.cpp:(.text+0x751): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotoccommon/libQtProtocCommon.a(generatorbase.cpp.o): in function `qtprotoccommon::GeneratorBase::OpenFileNamespaces(google::protobuf::FileDescriptor const*, google::protobuf::io::Printer*) const':
generatorbase.cpp:(.text+0x8dc): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: generatorbase.cpp:(.text+0x9de): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: generatorbase.cpp:(.text+0xaa3): undefined reference to `google::protobuf::io::Printer::PrintRaw(char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/qprotobufgenerator.cpp.o: in function `QtProtobuf::QProtobufGenerator::GenerateHeader(google::protobuf::FileDescriptor const*, google::protobuf::compiler::GeneratorContext*) const':
qprotobufgenerator.cpp:(.text+0x1078): undefined reference to `google::protobuf::io::Printer::Printer(google::protobuf::io::ZeroCopyOutputStream*, char)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x1231): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x12ce): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x1955): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x1b31): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x1ba8): undefined reference to `google::protobuf::io::Printer::PrintRaw(char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x1c5e): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x1cb5): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x1e47): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x250c): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x28d2): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/qprotobufgenerator.cpp.o: in function `QtProtobuf::QProtobufGenerator::GenerateSources(google::protobuf::FileDescriptor const*, google::protobuf::compiler::GeneratorContext*) const':
qprotobufgenerator.cpp:(.text+0x2ca1): undefined reference to `google::protobuf::io::Printer::Printer(google::protobuf::io::ZeroCopyOutputStream*, char)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x2ce8): undefined reference to `google::protobuf::io::Printer::Printer(google::protobuf::io::ZeroCopyOutputStream*, char)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x2f4c): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x31ed): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x3463): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x3690): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qprotobufgenerator.cpp:(.text+0x3b3a): undefined reference to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)'
/usr/bin/ld: qtgrpc/src/tools/qtprotobufgen/CMakeFiles/qtprotobufgen.dir/qprotobufgenerator.cpp.o:qprotobufgenerator.cpp:(.text+0x3ecf): more undefined references to `google::protobuf::io::Printer::Print(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, char const*)' follow
collect2: error: ld returned 1 exit status
[4/9822] : && /usr/bin/c++ -DNDEBUG -O2 -Wl,--enable-new-dtags -Wl,--gc-sections -fPIE -pie qtbase/src/tools/tracegen/CMakeFiles/tracegen.dir/etw.cpp.o qtbase/src/tools/tracegen/CMakeFiles/tracegen.dir/helpers.cpp.o qtbase/src/tools/tracegen/CMakeFiles/tracegen.dir/ctf.cpp.o qtbase/src/tools/tracegen/CMakeFiles/tracegen.dir/lttng.cpp.o qtbase/src/tools/tracegen/CMakeFiles/tracegen.dir/panic.cpp.o qtbase/src/tools/tracegen/CMakeFiles/tracegen.dir/provider.cpp.o qtbase/src/tools/tracegen/CMakeFiles/tracegen.dir/qtheaders.cpp.o qtbase/src/tools/tracegen/CMakeFiles/tracegen.dir/tracegen.cpp.o -o qtbase/libexec/tracegen  -Wl,-rpath,::::::::::::::  qtbase/src/tools/bootstrap/libBootstrap.a  /usr/lib/x86_64-linux-gnu/libpcre2-16.so && :
[5/9822] : && /usr/bin/c++ -DNDEBUG -O2 -Wl,--enable-new-dtags -Wl,--gc-sections -fPIE -pie qtbase/src/tools/tracepointgen/CMakeFiles/tracepointgen.dir/tracepointgen.cpp.o qtbase/src/tools/tracepointgen/CMakeFiles/tracepointgen.dir/parser.cpp.o -o qtbase/libexec/tracepointgen  -Wl,-rpath,::::::::::::::  qtbase/src/tools/bootstrap/libBootstrap.a  /usr/lib/x86_64-linux-gnu/libpcre2-16.so && :
[6/9822] : && /usr/bin/c++ -DNDEBUG -O2 -Wl,--enable-new-dtags -Wl,--gc-sections -fPIE -pie qtbase/src/tools/cmake_automoc_parser/CMakeFiles/cmake_automoc_parser.dir/main.cpp.o -o qtbase/libexec/cmake_automoc_parser  -Wl,-rpath,::::::::::::::  qtbase/src/tools/bootstrap/libBootstrap.a  /usr/lib/x86_64-linux-gnu/libpcre2-16.so && :
[7/9822] : && /usr/bin/c++ -DNDEBUG -O2 -Wl,--enable-new-dtags -Wl,--gc-sections -fPIE -pie qtbase/src/tools/moc/CMakeFiles/moc.dir/collectjson.cpp.o qtbase/src/tools/moc/CMakeFiles/moc.dir/generator.cpp.o qtbase/src/tools/moc/CMakeFiles/moc.dir/main.cpp.o qtbase/src/tools/moc/CMakeFiles/moc.dir/moc.cpp.o qtbase/src/tools/moc/CMakeFiles/moc.dir/parser.cpp.o qtbase/src/tools/moc/CMakeFiles/moc.dir/preprocessor.cpp.o qtbase/src/tools/moc/CMakeFiles/moc.dir/token.cpp.o -o qtbase/libexec/moc  -Wl,-rpath,::::::::::::::  qtbase/src/tools/bootstrap/libBootstrap.a  /usr/lib/x86_64-linux-gnu/libpcre2-16.so && :
"
CtgSyJcj,Sapphic Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:51:27 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/9t6i26blxidawz8/PRIDE_SAPPHIC.css?dl=0"" />"
S00baX7p,Sapphic Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:50:40 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/3jfwnkzl6g42iav/PRIDE_SAPPHIC_OVERLAY.css?dl=0"" />"
WRHrU06g,Rainbow Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:49:54 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/0478ipc3j2p18ck/PRIDE_RAINBOW.css?dl=0"" />"
c7sQZnc5,Rainbow Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:49:18 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/gi0q649a2bz48yg/PRIDE_RAINBOW_OVERLAY.css?dl=0"" />"
a6Er7nw9,Progressive Rainbow Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:48:30 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/ionb8lewko64zni/PRIDE_PROGRESS_RAINBOW.css?dl=0"" />"
dNcDQmR4,Progressive Rainbow Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:47:49 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/jxftwb9ktrdmkx4/PRIDE_PROGRESS_RAINBOW_OVERLAY.css?dl=0"" />"
SvZTMs7r,Pan Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:47:04 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/52997r77xt9jdbw/PRIDE_PAN.css?dl=0"" />"
ceHfvxGZ,Pan Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:46:20 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/s7vmonnnsg48fz5/PRIDE_PAN_OVERLAY.css?dl=0"" />"
Jrk3Grun,Nonbinary Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:45:30 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/lod6j7y2ukwn5r5/PRIDE_NONBINARY.css?dl=0"" />"
BTY9wcCL,Nonbinary Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:43:25 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/3cmskbirydu84eh/PRIDE_NONBINARY_OVERLAY.css?dl=0"" />"
18aiSQHM,Lesbian Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:42:42 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/0raxj46n50jzy4f/PRIDE_LESBIAN.css?dl=0"" />"
QHvFU4H3,Lesbian Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:41:58 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/187ie06gi3a0bbj/PRIDE_LESBIAN_OVERLAY.css?dl=0"" />"
beT1FBTi,Genderfluid Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:41:15 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/v1u9j6h08yoogyt/PRIDE_GENDERFLUID.css?dl=0"" /"
TgZVQ4st,Genderfluid Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:40:14 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/44gfu5lgasf7xo2/PRIDE_GENDERFLUID_OVERLAY.css?dl=0"" />"
fYV9CajJ,Gay Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:38:50 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/idjytw7nahqg8ie/PRIDE_GAY.css?dl=0"" />"
pr0punvb,Untitled,perchuts,C++,Wednesday 7th of June 2023 08:38:23 PM CDT,"#include <bits/stdc++.h>
#define all(x) x.begin(), x.end()
#define sz(x) (int) x.size()
#define endl '\n'
#define pb push_back
#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define int ll

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ii = pair<int,int>;
using iii = tuple<int,int,int>;

const int inf = 2e9+1;
const int mod = 1401387683;
const int MOD = 1e9+7;
const int maxn = 1e5+10;

template<typename X, typename Y> bool ckmin(X& x, const Y& y) { return (y < x) ? (x=y,1):0; }
template<typename X, typename Y> bool ckmax(X& x, const Y& y) { return (x < y) ? (x=y,1):0; }

mt19937 rng((int) chrono::steady_clock::now().time_since_epoch().count());

int uniform(int l, int r) {
      uniform_int_distribution<int> uid(l, r);
      return uid(rng);
}

int P, p[maxn];

vector<int> get_hash(string s) {
      int n = sz(s);
      vector<int> h(n);
      h[0] = s[0];
      for (int i = 1; i < n; ++i) {
            h[i] = (h[i-1] * P + s[i]) % mod;
      }
      return h;
}

const int limit = 325;

int help = 0;

int exist[maxn][27];

void insert(string s, int hash) {
      int cur = 0, n = sz(s);
      reverse(all(s));
      for (int i = 0; i < n; ++i) {
            int nxt = exist[cur][s[i] - 'a' + 1];
            if (!nxt) nxt = exist[cur][s[i] - 'a' + 1] = ++help;
            cur = nxt;
      }
      exist[cur][0] = hash;
}

int32_t main(){_
      int n; P = uniform(10000, mod - 1);
      cin >> n;
      p[0] = 1;
      for (int i = 1; i <= 1e5; ++i) p[i] = (p[i-1] * P) % mod;
      vector<string> vs(n);
      vector<int> h(n);
      vector<ii> big;
      for (int i = 0; i < n; ++i) {
            cin >> vs[i];
            h[i] = get_hash(vs[i]).back();
            if (sz(vs[i]) <= limit) insert(vs[i], h[i]);
            else big.pb({sz(vs[i]), h[i]});
      }    

      string s; cin >> s; n = sz(s);
      vector<int> dp(n + 1), hash = get_hash(s);

      auto segment = [&] (int l, int r) {
            --l, --r;
            int hsh = hash[r] - (l? hash[l-1]*p[r-l+1]%mod : 0);
            return hsh < 0 ? hsh + mod : hsh;
      };

      dp[0] = 1;

      sort(all(big));

      n = sz(s);

      for (int i = 1; i <= n; ++i) {
            int cur = 0;
            for (int j = i; j >= max(1ll, i - limit + 1); --j) {
                  int eu = s[j - 1] - 'a' + 1;
                  cur = exist[cur][eu];
                  if (!cur) break;
                  if (exist[cur][0]) dp[i] = (dp[i] + dp[j - 1]) % MOD;
            }
            int nao_rep = -1;
            for (auto [tam, hx] : big) {
                  if (tam > i) break;
                  int hsh = segment(i - tam + 1, i);
                  if (hsh == hx) {
                        nao_rep = tam;
                        dp[i] = (dp[i] + dp[i - tam]) % MOD;
                  } 
            }
      }

      cout << dp[n] << endl;
} "
tE8F7kri,Gay Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:38:05 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/uh0vubtmk1878s5/PRIDE_GAY_OVERLAY.css?dl=0"" />"
CfzjKh2s,Bi Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:36:25 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/87rklz9bqnue1zb/PRIDE_BI.css?dl=0"" />"
smMQdyWF,Bi Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:35:39 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/3s0532ctbfpyt7k/PRIDE_BI_OVERLAY.css?dl=0"" />"
tXLJcqNf,Ace Flag,_Pandora,CSS,Wednesday 7th of June 2023 08:34:46 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/gsuq5q1hx3li4of/PRIDE_ACE.css?dl=0"" />"
HPeawPBv,Ace Flag - Overlay,_Pandora,CSS,Wednesday 7th of June 2023 08:33:40 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://dl.dropbox.com/s/ul62n781wjhb2fz/PRIDE_ACE_OVERLAY.css?dl=0"" />"
xvCRerq6,Colony AFK,GDragonArcher,Lua,Wednesday 7th of June 2023 08:26:40 PM CDT,"local integrator = peripheral.find(""colonyIntegrator"")

redstone.setOutput(""bottom"", true)

if integrator.isInColony() then
    print(""Block is inside a colony!"")
else
    print(""Not in a colony!"")
end

while true do

	if integrator.isUnderAttack() then
    	redstone.setOutput(""bottom"", false)
		print(""under attack"")
	end

sleep(10)

end"
qbdwAAqq,RobloxDevTutorials Beginner's Series - Lesson 9: If Statements,ProDeveloper5876,Lua,Wednesday 7th of June 2023 07:55:37 PM CDT,"if script.number.Value ~= 7 then
	print(""The value is not 7! Incorrect!"")
else
	print(""The Number is 7!"")
end


if script.number.Value == 7 then
	print(""The value is 7! Correct!"")
else
	print(""The number isn't 7!"")
end
"
2egvVrnv,Stairville_PAR64_CX-3_RGBW.xml,Tallerik,XML,Wednesday 7th of June 2023 07:52:07 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<device type=""DMXDevice"" dmxaddresscount=""8"" dmxcversion=""3.1.0"" ddfversion=""1.0"" image=""par64cx3.png"">
  <information>
    <model>PAR64 CX-3 RGBW</model>
    <vendor>Stairville</vendor>
    <author>Linus, Erik</author>
  </information>
  <functions>
    <rgb>
      <red dmxchannel=""0"" />
      <green dmxchannel=""1"" />
      <blue dmxchannel=""2"" />
      <white dmxchannel=""3"" />
    </rgb>
    <raw dmxchannel=""4"" name=""Farbmuster"">
      <step mindmx=""0"" maxdmx=""15"" type=""off"" />
      <range type=""linear"" mindmx=""16"" maxdmx=""255"" />
    </raw>
    <strobe dmxchannel=""5"">
      <step type=""open"" mindmx=""0"" maxdmx=""15"" />
      <range type=""linear"" mindmx=""16"" maxdmx=""255"" minval=""0.5"" maxval=""24"" />
    </strobe>
    <effectwheel dmxchannel=""6"">
      <step type=""open"" mindmx=""0"" maxdmx=""31"" caption=""Konstante Farbe"" />
      <step type=""fade"" mindmx=""32"" maxdmx=""63"" caption=""Fade Out"" />
      <step type=""fade"" mindmx=""64"" maxdmx=""95"" caption=""Fade In"" />
      <step type=""fade"" mindmx=""96"" maxdmx=""127"" caption=""Fade In-Out"" />
      <step type=""effect"" mindmx=""128"" maxdmx=""159"" caption=""Auto-Mix-Effekt"" />
      <step type=""effect"" mindmx=""160"" maxdmx=""191"" caption=""Chase (4 Farben)"" />
      <step type=""effect"" mindmx=""162"" maxdmx=""223"" caption=""Chase (12 Farben)"" />
      <step type=""macro"" mindmx=""224"" maxdmx=""255"" caption=""Musik Steuerung"" />
    </effectwheel>
    <dimmer dmxchannel=""7"">
      <range type=""linear"" mindmx=""0"" maxdmx=""255"" minval=""0"" maxval=""100"" />
    </dimmer>
  </functions>
  <procedures />
</device>"
yfV88mhN,urm14_rs485,mikroavr,Arduino,Wednesday 7th of June 2023 07:35:41 PM CDT,"
#define RXD1 32
#define TXD1 25
#define EN_RS485 33
#define LED 12
#include <ModbusMaster.h>
ModbusMaster node;
#define   SLAVE_ADDR                ((uint16_t)0x0C)
#define   TEMP_CPT_SEL_BIT          ((uint16_t)0x01)
#define   TEMP_CPT_ENABLE_BIT       ((uint16_t)0x01 << 1)
#define   MEASURE_MODE_BIT          ((uint16_t)0x01 << 2)
#define   MEASURE_TRIG_BIT          ((uint16_t)0x01 << 3)
uint16_t trigger  = 0;
float jarak = 0.0;
float suhu = 0.0;
void preTransmission()
{
  digitalWrite(EN_RS485, 1);
  digitalWrite(LED, 1);
}
void postTransmission()
{
  digitalWrite(EN_RS485, 0);
  digitalWrite(LED, 0);
}
void setup() {
  // put your setup code here, to run once:
  pinMode(EN_RS485, OUTPUT);
  pinMode(LED, OUTPUT);
   
  Serial.begin(115200);
  Serial1.begin(115200, SERIAL_8N1, RXD1, TXD1);
   
  node.preTransmission(preTransmission);
  node.postTransmission(postTransmission);
  node.begin(SLAVE_ADDR, Serial1);
  delay(1000);
  trigger |= MEASURE_MODE_BIT;//Set bit2 , Set to trigger mode
  trigger &= ~(uint16_t)TEMP_CPT_SEL_BIT;//Select internal temperature compensation
  trigger &= ~(uint16_t)TEMP_CPT_ENABLE_BIT;//enable temperature compensation
  delay(1000);
  conf_autoDistance();
}
void loop() {
  // put your main code here, to run repeatedly:
  baca_urm14();
  delay(2000);
}
void baca_urm14() {
  Serial.println(""baca urm14"");
  uint8_t result;
  uint16_t data[6];
  trigger |= MEASURE_TRIG_BIT;//Set trig bit
  result = node.writeSingleRegister(3, trigger);
  Serial.print(""result_t: "");
  Serial.println(result);
  delay(300);
  result = node.readHoldingRegisters(0, 9);
  Serial.print(""result_r: "");
  Serial.println(result);
  if (result == node.ku8MBSuccess)
  {
    jarak = node.getResponseBuffer(5) / 10;
    suhu = node.getResponseBuffer(6) / 10;
    Serial.print(""jarak: "");
    Serial.print(jarak);
    Serial.println("" mm"");
    Serial.print(""suhu: "");
    Serial.print(suhu);
    Serial.println("" C"");
    Serial.println(""-----------------------"");
  }else{
    Serial.println(""modbus fail"");
  }
}
void conf_autoDistance(){
  uint8_t result = node.writeSingleRegister(0x08, 0); // write address 0x08 with data 0000 / 
  Serial.print(""write config: "");
  Serial.println(result);
}"
qwD6QJFK,2023-06-07_stats.json,rdp_snitch,JSON,Wednesday 7th of June 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""162.241.158.17"": 25,
    ""51.75.160.42"": 4,
    ""62.233.50.179"": 1,
    ""181.118.174.215"": 13,
    ""45.227.254.54"": 4,
    ""193.56.116.254"": 1,
    ""103.67.163.4"": 40,
    ""194.26.135.80"": 4,
    ""185.81.68.89"": 2,
    ""87.251.75.145"": 3,
    ""123.57.58.91"": 1,
    ""185.11.61.199"": 4,
    ""120.27.12.65"": 3,
    ""167.248.133.37"": 1,
    ""87.251.64.110"": 2,
    ""87.251.75.120"": 1,
    ""185.170.144.3"": 2,
    ""176.111.174.176"": 3,
    ""5.188.206.54"": 1,
    ""194.165.16.10"": 2,
    ""45.135.201.65"": 3,
    ""94.232.45.27"": 3,
    ""27.71.235.82"": 1,
    ""194.165.16.72"": 2,
    ""198.235.24.171"": 3,
    ""203.162.127.218"": 9,
    ""185.246.222.16"": 1,
    ""103.195.236.137"": 12,
    ""167.94.146.57"": 1,
    ""103.68.251.170"": 2,
    ""87.251.75.64"": 1,
    ""106.116.169.71"": 1,
    ""178.32.197.90"": 1,
    ""194.165.16.76"": 2,
    ""43.156.9.187"": 31,
    ""205.210.31.101"": 3,
    ""193.169.255.78"": 2,
    ""45.227.254.49"": 2,
    ""156.146.36.71"": 2
  },
  ""asn"": {
    ""AS19871"": 25,
    ""AS16276"": 5,
    ""AS57523"": 14,
    ""AS23416"": 13,
    ""AS267784"": 6,
    ""AS62240"": 1,
    ""AS150813"": 40,
    ""AS208091"": 5,
    ""AS37963"": 4,
    ""AS398722"": 1,
    ""AS48080"": 4,
    ""AS200391"": 1,
    ""AS48721"": 6,
    ""AS44486"": 3,
    ""AS212482"": 3,
    ""AS38731"": 1,
    ""AS396982"": 6,
    ""AS45899"": 9,
    ""AS46308"": 1,
    ""AS140827"": 12,
    ""AS398705"": 1,
    ""AS135905"": 2,
    ""AS4134"": 1,
    ""AS132203"": 31,
    ""AS213010"": 2,
    ""AS60068"": 2
  },
  ""isp"": {
    ""Unified Layer"": 25,
    ""OVH SAS"": 5,
    ""Chang Way Technologies Co. Limited"": 14,
    ""Telefonica Data Chile S.A."": 13,
    ""Flyservers S.A."": 12,
    ""Clouvider Limited"": 1,
    ""Thoi MMO Company Limited"": 40,
    ""XHOST-INTERNET-SOLUTIONS"": 5,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Addresses CNNIC"": 3,
    ""Censys, Inc."": 2,
    ""Dmitriy Panchenko"": 4,
    ""e-mail: noc@fastvps.biz"": 1,
    ""LIVINGBOTS"": 3,
    ""Xhost Internet Solutions LP"": 3,
    ""VIETTEL"": 1,
    ""Google LLC"": 6,
    ""VietNam Post and Telecom Corporation"": 9,
    ""Sukhoi Su-57 LLC"": 1,
    ""AZ Viet NAM Communications Technology Company Limited"": 12,
    ""POWERNET"": 2,
    ""Chinanet"": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 31,
    ""GigaHostingServices OU"": 2,
    ""Datacamp Limited"": 2
  },
  ""org"": {
    ""WEBSITEWELCOME.COM"": 25,
    ""OVH Ltd"": 4,
    ""Sierra LLC"": 1,
    ""CTC. CORP S.A. (TELEFONICA EMPRESAS)"": 13,
    ""UAB Host Baltic"": 6,
    ""VPN"": 1,
    ""MINHTHOIPC"": 40,
    ""Chang Way Technologies Co. Limited"": 7,
    ""Starcrecium Limited"": 6,
    ""Xhost Internet Solutions"": 7,
    ""Aliyun Computing Co., LTD"": 4,
    ""Censys, Inc."": 2,
    ""Xhostis"": 2,
    ""Technology Advanced Investment Limited"": 1,
    ""Flyservers S.A"": 6,
    ""Unknown"": 3,
    ""Dmitriy Panchenko"": 3,
    ""Viettel Group"": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""VietNam Data Communication Company"": 9,
    ""Neterra Sukhoi"": 1,
    ""DULIEUAZ"": 12,
    ""PowerNet Company Limited"": 2,
    ""Chinanet HE"": 1,
    ""ONYPHE"": 1,
    ""Tencent Cloud Computing"": 31,
    ""GigaHostingServices OU"": 2,
    ""Datacamp Limited"": 2
  },
  ""regionName"": {
    ""Utah"": 25,
    ""England"": 4,
    ""Moscow"": 12,
    ""Santiago Metropolitan"": 13,
    ""Vilnius"": 6,
    ""Georgia"": 1,
    ""Tinh Nghe An"": 40,
    ""North Holland"": 8,
    ""Beijing"": 1,
    ""Chechnya"": 4,
    ""Shandong"": 3,
    ""Michigan"": 1,
    ""Colorado"": 1,
    ""Kaunas"": 6,
    ""Bremen"": 3,
    ""Perm Krai"": 3,
    ""Hanoi"": 1,
    ""California"": 6,
    ""Ho Chi Minh"": 21,
    ""Hesse"": 1,
    ""Da Nang"": 2,
    ""Hebei"": 1,
    ""Hauts-de-France"": 1,
    ""North West"": 31,
    ""Mazovia"": 2,
    ""New York"": 2
  },
  ""country"": {
    ""United States"": 36,
    ""United Kingdom"": 4,
    ""Russia"": 19,
    ""Chile"": 13,
    ""Lithuania"": 12,
    ""Vietnam"": 64,
    ""Netherlands"": 8,
    ""China"": 5,
    ""Germany"": 4,
    ""France"": 1,
    ""Singapore"": 31,
    ""Poland"": 2
  },
  ""account"": {
    ""hello"": 140,
    ""Test"": 20,
    ""Administr"": 13,
    ""(empty)"": 4,
    ""Domain"": 15,
    ""TWAyjbAzj"": 1,
    ""pxWIyU"": 1,
    ""IhgWrc"": 1,
    ""Administrator"": 1,
    ""YIfrJpsvj"": 1,
    ""pvYXTk"": 1,
    ""SCwTji"": 1
  },
  ""keyboard"": {
    ""Unknown"": 199
  },
  ""client_build"": {
    ""Unknown"": 199
  },
  ""client_name"": {
    ""Unknown"": 199
  },
  ""ip_type"": {
    ""hosting"": 71,
    ""Unknown"": 116,
    ""mobile & hosting & proxy"": 1,
    ""proxy"": 8,
    ""mobile & hosting"": 1,
    ""hosting & proxy"": 2
  }
}"
Xav5wEu3,astroforecast,xmd79,Python,Wednesday 7th of June 2023 06:55:48 PM CDT,"import hashlib
import hmac
import time
import json
import numpy as np
import requests
import math
from binance.client import Client
import talib
import ephem
from datetime import datetime

# Load credentials from file
with open(""credentials.txt"", ""r"") as f:
    lines = f.readlines()
    api_key = lines[0].strip()
    api_secret = lines[1].strip()

# Initialize Binance client
client = Client(api_key, api_secret)

trading_pairs = [symbol['symbol'] for symbol in json.loads(requests.get('https://fapi.binance.com/fapi/v1/exchangeInfo').text)['symbols']
                 if symbol['quoteAsset'] == 'USDT' and 'PERP' not in symbol['pair'].upper() and 'BTC' in symbol['pair'] and symbol['symbol'] == 'BTCUSDT' and not '_' in symbol['symbol']]

print()
print(trading_pairs)


print()

def get_mtf_sentiment(symbol):
    # Get candlestick data
    klines_2h = client.futures_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_2HOUR, limit=200)
    klines_15m = client.futures_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_15MINUTE, limit=200)
    klines_5m = client.futures_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_5MINUTE, limit=200)
    klines_1m = client.futures_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1MINUTE, limit=200)

    # Extract closing prices
    closes_2h = np.array([float(entry[4]) for entry in klines_2h])
    closes_15m = np.array([float(entry[4]) for entry in klines_15m])
    closes_5m = np.array([float(entry[4]) for entry in klines_5m])
    closes_1m = np.array([float(entry[4]) for entry in klines_1m])

    # Compute poly channel
    poly_2h = talib.SMA(closes_2h, 21) - talib.STDDEV(closes_2h, 21) * 2
    poly_15m = talib.SMA(closes_15m, 21) - talib.STDDEV(closes_15m, 21) * 2
    poly_5m = talib.SMA(closes_5m, 21) - talib.STDDEV(closes_5m, 21) * 2
    poly_1m = talib.SMA(closes_1m, 21) - talib.STDDEV(closes_1m, 21) * 2

    # Get astrological forecast for the next 24 hours (ex. Timisoara, Romania as observer's location)
    observer = ephem.Observer()
    observer.lat, observer.lon = '45.760696', '21.226788'

    # Check if 2h, 15m, and 5m candles are all BELOW their lowest poly channel lines
    if closes_2h[-1] < poly_2h[-1] and closes_15m[-1] < poly_15m[-1] and closes_5m[-1] < poly_5m[-1] and closes_1m[-1] < poly_1m[-1]:
        print(f""{symbol} is at mtf DIP and in a uptrend incoming on all timeframes"")

    # Check if 2h, 15m, and 5m candles are all ABOVE their lowest poly channel lines
    elif closes_2h[-1] > poly_2h[-1] and closes_15m[-1] > poly_15m[-1] and closes_5m[-1] > poly_5m[-1] and closes_1m[-1] > poly_1m[-1]:
        print(f""{symbol} is at mtf TOP and in a downtrend incoming on all timeframes"")


    now = datetime.now()
    print(f""Astrological forecast for {symbol} on {now.strftime('%Y-%m-%d %H:%M:%S')}:"")
    # Set up the ephemeris and compute the planetary positions
    planets = [ephem.Mercury(), ephem.Venus(), ephem.Mars(), ephem.Jupiter(), ephem.Saturn(), ephem.Uranus(), ephem.Neptune()]
    for planet in planets:
        planet.compute(observer)
        planet_name = planet.name
        planet_sign = ephem.constellation(planet)[1]
        print(f""{planet_name} is in {planet_sign}"")

    # Get the Moon phase
    moon = ephem.Moon()
    moon.compute(observer)
    phase = moon.phase
    moon_phase = ''
    if phase < 0.25:
        moon_phase = 'New Moon'
    elif 0.25 <= phase < 0.5:
        moon_phase = 'First Quarter'
    elif 0.5 <= phase < 0.75:
        moon_phase = 'Full Moon'
    else:
        moon_phase = 'Last Quarter'
    print(f""The Moon is in {moon_phase}"")

    # Get the Sun's position
    sun = ephem.Sun()
    sun.compute(observer)
    sun_sign = ephem.constellation(sun)[1]
    print(f""The Sun is in {sun_sign}"")

# Loop through each trading pair and print the multi-timeframe sentiment
for pair in trading_pairs:
    get_mtf_sentiment(pair)
    print()
"
VCVxg5uE,acme.sh,Justman10000,Bash,Wednesday 7th of June 2023 06:15:33 PM CDT,"# Install
mkdir /home/acme.sh
cd /home/acme.sh
git init
git remote add origin https://github.com/acmesh-official/acme.sh
git pull origin master
rm -r .* *.md Dockerfile
chmod -R 777 .
bash *.sh --install --cert-home /etc/letsencrypt/archive
mkdir /etc/letsencrypt


systemctl stop apache2

domain=MY_DOMAIN # Replace MY_DOMAIN with your domain

mkdir /etc/letsencrypt/live/$domain

# Getting certs
## Standalone (Syntax: domain.tld) (Includes only the main domain, no subdomains) (Requires no domain authendification)
bash *.sh --server letsencrypt --issue --domain $domain --standalone --cert-file /etc/letsencrypt/live/$domain/cert.pem \
    --key-file /etc/letsencrypt/live/$domain/privkey.pem \
    --fullchain-file /etc/letsencrypt/live/$domain/fullchain.pem
## Wildcard (Syntax: *.domain.tld) (Includes only subdomains, not the main domain) (Requires domain authendification)
bash *.sh --server letsencrypt --issue --domain *.$domain --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please --cert-file /etc/letsencrypt/live/$domain/cert.pem \
    --key-file /etc/letsencrypt/live/$domain/privkey.pem \
    --fullchain-file /etc/letsencrypt/live/$domain/fullchain.pem

systemctl start apache2

# Renew certs
## Wildcard
bash *.sh --server letsencrypt --renew --domain *.$domain --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please --cert-file /etc/letsencrypt/live/$domain/cert.pem \
    --key-file /etc/letsencrypt/live/$domain/privkey.pem \
    --fullchain-file /etc/letsencrypt/live/$domain/fullchain.pem

# Uninstall
rm -r /home/acme.sh /root/.acme.sh"
KKSyLRDh,Love Is Sweet / Half Honey and Half Hurt (2020) မြန်မာစာတန်းထိုး,patebinthihazaw,HTML,Wednesday 7th of June 2023 05:42:36 PM CDT,"” ချစ်ခွန်းချိုချို ”



1
https://yadi.sk/i/M5sHP631y1rszg


2
https://yadi.sk/i/A7ODDY-3Ndo9kA

3
https://yadi.sk/i/4hK7LTY5fbtOvA

4
https://yadi.sk/i/LK45CzfaWVqFmg

5
https://yadi.sk/i/EFSZ2AZbDmvioA

6
https://yadi.sk/i/bU0XQ2ruQg53RA

7
https://yadi.sk/i/7Hc0k7Afd3ZAkQ

8
https://yadi.sk/i/5C2n-fHYEAEkMg

9
https://yadi.sk/i/vc4eTYkCdKczOw

10
https://yadi.sk/i/UNlmsBUeQ7VaWg

11
https://yadi.sk/i/8Ia9bO9_pYenpw

12
https://yadi.sk/i/R9T7kYH7FNMXaA

13
https://yadi.sk/i/jA0iT1jQNFdzPA

14
https://yadi.sk/i/SY79M-gm5qCmGg

15
https://yadi.sk/i/zgpfSzafC9LGkQ

16
https://yadi.sk/i/kkhoxl4w9D9EdA

17
https://yadi.sk/i/SRt9YsKkuWRHwA

18
https://yadi.sk/i/LV4azEtF-A3IAQ

19
https://yadi.sk/i/hMR-RZINoi9ezw

20
https://yadi.sk/i/JqmY62TqIaQLuQ

21
https://yadi.sk/i/Xq1vcmNm3KgSpg

22
https://yadi.sk/i/JJLBcJGSpncCOA

23
https://yadi.sk/i/4mcX_RSTOksnMg

24
https://yadi.sk/i/XVdwa67wahLPVw

25
https://yadi.sk/i/N9ngKEt4CS3chw

26
https://yadi.sk/i/-BD_6ISxZKx0Jw

27
https://yadi.sk/i/Ro_vdeqOem9uHg

28
https://yadi.sk/i/-VYl_r6CeTR6sw

29
https://yadi.sk/i/fvycYxluHoycqQ

30
https://yadi.sk/i/cxblBNkaAZl_iA

31
https://yadi.sk/i/qwOYaOOR4VwR6A

32
https://yadi.sk/i/wkiyZXvmQy2PqQ

33
https://yadi.sk/i/LalEagAv-4kdGw

34
https://yadi.sk/i/uPqYED-VS6JHsQ

35
https://yadi.sk/i/Yr8dWsdfTFhgDQ

36
https://yadi.sk/i/bR_6dpBy17WxBA"
NQPeCwcR,# Tk_torus_ani_3.py,here2share,Python,Wednesday 7th of June 2023 05:20:25 PM CDT,"# Tk_torus_ani_3.py

from tkinter import *
from math import sqrt, sin, cos, pi
from PIL import Image, ImageTk, ImageDraw, ImageFilter

rgb = [i for i in range(0, 256, 28)]
colors = ['#{:02x}{:02x}{:02x}'.format(r,g,b) for r in rgb for g in rgb for b in rgb][::-1]
# Define the initial rotation angles
x_rotate, y_rotate, z_rotate = 0, 0, 0

ww = 900
hh = 640
cx, cy = ww//2, hh//2

# Create the window and canvas
root = Tk() 
root.title(""TORUS"")
root.geometry(""%dx%d+0+0""%(ww, hh))
canvas = Canvas(root, bg=""grey"", width=ww, height=hh)
canvas.grid(row=1, column=1)
btn = Button(root, text='Quit', width=8, command=root.destroy).place(x=ww-80, y=hh-40)

# Define the torus parameters
R = 250	 # Major radius
r = 50	# Minor radius
poly_count = 30	 # Number of polygons to approximate the torus surface
theta_step = 2 * pi / poly_count  # Angle increment for the azimuthal direction
phi_step = 2 * pi / poly_count	# Angle increment for the polar direction

def deg(i):
	return round(i * 180 / pi, 2)

def plot():
	global c
	for j in range(poly_count):
		v1 = vertices[i*poly_count+j]
		v2 = vertices[((i+1)%poly_count)*poly_count+j]
		v3 = vertices[((i+1)%poly_count)*poly_count+(j+1)%poly_count]
		v4 = vertices[i*poly_count+(j+1)%poly_count]
		color = colors[int(v1[0])]

		draw.polygon([v1, v2, v3, v4], fill=color, outline=color)
		c += 1
		
def o(a, b):
	return list(range(a, b))

# Define the function for updating the torus animation
while 1:
	img = Image.new(""RGBA"", (ww, hh), (128, 128, 128, 255))
	draw = ImageDraw.Draw(img)
	blur_radius = 0.001 * min(img.size)

	c = 0
	
	# Update the rotation angles
	x_rotate = (x_rotate + 0.11) % (pi*2)
	y_rotate = (y_rotate + 0.07) % (pi*2)
	
	# Calculate the torus vertices using its parametric equations
	vertices = []
	poly_z = []
	for i in range(poly_count):
		theta = i * theta_step
		zzz = []
		for j in range(poly_count):
			phi = j * phi_step
			x = (R + r * cos(phi)) * cos(theta)
			y = (R + r * cos(phi)) * sin(theta)
			z = r * sin(phi)
			
			# Apply the rotation transformations
			x1 = x * cos(y_rotate) - z * sin(y_rotate)
			z1 = z * cos(y_rotate) + x * sin(y_rotate)
			y1 = y * cos(x_rotate) - z1 * sin(x_rotate)
			z2 = z1 * cos(x_rotate) + y * sin(x_rotate)
			x2 = x1 * cos(z_rotate) + y1 * sin(z_rotate)
			y2 = y1 * cos(z_rotate) - x1 * sin(z_rotate)
			
			vertices.append((x2 + ww // 2, y2 + hh // 2))
			zzz.append(z2)
		poly_z.append((i, max(zzz)))

	sorted_poly_count = [i for i, j in sorted(poly_z, key=lambda x: x[1], reverse=True)]

	# Draw the torus using the sorted vertices
	for i in sorted_poly_count:
		plot()

	tkimg = ImageTk.PhotoImage(img)
	canvas.create_image((cx, cy), image=tkimg)

	canvas.create_text(200, 100, text='TORUS', fill='white', font='Arial 60 bold')
	canvas.create_text(50, hh-70, text=f'x: {deg(x_rotate)} deg', fill='black', font='Arial 18', anchor=""w"")
	canvas.create_text(50, hh-50, text=f'y: {deg(y_rotate)} deg', fill='black', font='Arial 18', anchor=""w"")
	root.update()

root.mainloop()"
hJrxWNif,Untitled,geekmarine00,Lua,Wednesday 7th of June 2023 05:10:05 PM CDT,"function waitForKeypress()
    while true do
        local sender, message, protocol = rednet.receive()

        if message == ""forward"" then
            move(0, -1)
        end

        if message == ""back"" then
            move(0, 1)
        end

        if message == ""right"" then
            move(1, 0)
        end

        if message == ""left"" then
            term.write(""bruh"")

            move(-1, 0)
        end

        --i just have this here for now im not sure where to put it
    end
end

function tick()
    road(-1)
	os.sleep(1)
end

parallel.waitForAny(waitForKeypress, tick)"
yQM7dSmh,SmallTexture,cepxuozab,C++,Wednesday 7th of June 2023 04:19:42 PM CDT,"voidSmallTexture() {
        Canvas canvas({6, 4});

        canvas.AddShape(ShapeType::RECTANGLE, {1, 1}, {4, 2},
                        MakeTextureSolid({3, 1}, '*'));

        std::stringstream output;
        canvas.Print(output);

        const auto answer =
                ""########\n""
                ""#      #\n""
                ""# ***. #\n""
                ""# .... #\n""
                ""#      #\n""
                ""########\n"";

        Assert(answer == output.str(), ""SmallTexture test"");
    }"
QH0JW2Ht,form.slice.js,ikamal7,JavaScript,Wednesday 7th of June 2023 04:11:50 PM CDT,"// form.slice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
    fields: [], // Initialize fields array
    address: '',
    city: '',
    province: '',
    zip: '',
    unit: '',
    propertySize: '',
    footageType: '',
    find: '',
    propertyType: '',
    propertyCondition: '',
    access: '',
    luckBox: '',
    customerCode: '',
    specialRequest: '',
    date: '',
    slot: '',
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
};

const formSlice = createSlice({
    name: 'form',
    initialState,
    reducers: {
        updateField(state, action) {
            const { fieldId, value } = action.payload;
            const fieldIndex = state.fields.findIndex((field) => field.id === fieldId);
            if (fieldIndex !== -1) {
                state.fields[fieldIndex].value = value;
            }
        },
        // Add other reducers as needed

    },
});

export const { updateField } = formSlice.actions;

export default formSlice.reducer;
"
CthhJEkb,GenerateFormComponent.js,ikamal7,JavaScript,Wednesday 7th of June 2023 04:11:12 PM CDT,"import withForm from ""@/components/Booking/withForm"";
import {useSelector} from ""react-redux"";

const GenerateFormComponent = ({ fields, handleFieldChange }) => {
    const formFields = useSelector((state) => state.form.fields);
    console.log(fields);
    const renderField = (field) => {
        switch (field.type) {
            case 'text':
                return (
                    <div key={field.id} className={`lg:col-span-1 col-span-2 mb-7.5`}>
                        <label htmlFor={field.id} className={`font-manrope text-title-sm font-semibold text-black mb-3 block`}>
                            {field.label}
                        </label>
                            <input
                                type={field.type}
                                name={field.id}
                                id={field.id}
                                className={`border border-grey w-full px-4 py-3 text-title-sm text-black placeholder-silver`}
                                placeholder={field.placeholder}
                                value={formFields.find((f) => f.id === field.id)?.value || ''}
                                onChange={(e) => handleFieldChange(field.id, e.target.value)}
                            />
                    </div>
                );
            case 'checkbox':
                return (
                    <div key={field.id} className={`mb-7.5 col-span-2`}>
                        <label className={`font-manrope text-title-sm font-semibold text-black mb-3 block`}>
                            {field.label}
                        </label>
                        {field.extraLabel && (
                            <p className={`font-manrope text-[14px] text-light-black font-normal mb-3`}>{field.extraLabel}</p>
                        )}
                        <div className={`border border-grey p-4`}>
                            {field.options.map((option) => (
                                <div key={option.value} className={`flex items-center mb-3`}>
                                    <input
                                        type=""checkbox""
                                        name={`${field.id}[]`}
                                        id={field.id}
                                        value={option.value}
                                        onChange={(e) => handleFieldChange(field.id, e.target.value)}
                                    />
                                    <span className={`font-manrope text-title-xsm3 font-normal text-light-black ml-2 block`}>{option.label}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                );

            case 'select':
                return (
                    <div key={field.id} className={`lg:col-span-1 col-span-2 mb-7.5`}>
                        <label htmlFor={field.id} className={`font-manrope text-title-sm font-semibold text-black mb-3 block`}>
                            {field.label}
                        </label>
                        <select
                            name={field.id}
                            id={field.id}
                            className={`border border-grey w-full px-4 py-3 text-title-sm text-black placeholder-silver`}
                            value={formFields.find((f) => f.id === field.id)?.value || ''}
                            onChange={(e) => handleFieldChange(field.id, e.target.value)}
                        >

                            {field.options.map((option, index) => (
                                <option key={index} value={option}>
                                    {option}
                                </option>
                            ))}
                        </select>
                    </div>
                );
                case 'textarea':
                    return (
                        <div key={field.id} className={`col-span-2 mb-7.5`}>
                            <label htmlFor={field.id} className={`font-manrope text-title-sm font-semibold text-black mb-3 block`}>
                                {field.label}
                            </label>
                            <textarea
                                name={field.id}
                                id={field.id}
                                rows={5}
                                className={`border border-grey w-full px-4 py-3 text-title-sm text-black placeholder-silver`}
                                placeholder={field.placeholder}
                                value={formFields.find((f) => f.id === field.id)?.value || ''}
                                onChange={(e) => handleFieldChange(field.id, e.target.value)}
                            ></textarea>
                            </div>
                    );
            default:
                return null;
        }
    };

    return <div className={`grid grid-cols-1 lg:grid-cols-2 lg:gap-8`}>{fields.map((field) => renderField(field))}</div>;
};

export default withForm(GenerateFormComponent);
"
9jTe8kC5,LocationNew.js,ikamal7,JavaScript,Wednesday 7th of June 2023 04:10:02 PM CDT,"import React from 'react';
import {UsaStates} from ""usa-states"";
import GenerateFormComponent from ""@/components/Booking/GenerateFormComponent"";
import withForm from ""@/components/Booking/withForm"";

const LocationNew = ({ handleFieldChange }) => {
    const usStates = new UsaStates({includeTerritories: true});
    const statesNames = usStates.arrayOf('names');
    const fields = [
        {
            id: 'address',
            label: 'Street Address',
            type: 'text',
            placeholder: 'Enter your address',
            value: '',
        },
        {
            id: 'city',
            label: 'City',
            type: 'text',
            placeholder: 'Enter your City',
            value: '',
        },
        {
            id: 'province',
            label: 'Province',
            type: 'select',
            options: [
                'Select Province',
                ...statesNames.map((state) => state),
            ],
            value: '',
        },
        {
            id: 'zip',
            label: 'Zip Code',
            type: 'text',
            placeholder: '',
            value: '',
        },
        {
            id: 'unit',
            label: 'Unit #',
            type: 'text',
            placeholder: '',
            value: '',
        },
        {
            id: 'propertySize',
            label: 'Property Size (with Basement)',
            type: 'select',
            options: [
                '0-999 sq ft',
                '1000-2000 sq ft',
                '2000-3000 sq ft',
                '4000-5000 sq ft',
                '5000+ sq ft',
                ""Don't know!"",
            ],
            value: '0-999 sq ft',
        },
        {
            id: 'footageType',
            label: 'Please include the TOTAL SQUARE FOOTAGE WITH BASEMENT in the ""Property Size"" field *',
            type: 'checkbox',
            extraLabel: 'If you want any footage or floorplans of the basement, otherwise it will not be captured.',
            options: [
                {
                    label: 'Yes, the above square footage is the total including basement',
                    value: 'total_with_basement',
                },
                {
                    label: 'Please skip the basement - I do not need any media or floorplans for it',
                    value: 'skip_basement',
                },
                {
                    label: 'There is no basement at this property',
                    value: 'no_basement',
                },
                {
                    label: ""I'm not sure about the total. Charge me based on final captured sq ft"",
                    value: 'charge_based_on_sqft',
                },
            ],
            value: ['total_with_basement'],
        },
        {
            id: 'find',
            label: 'How did you find out about us?',
            type: 'select',
            options: [
                'Loyal Client',
                'Google Search',
                'Social Media',
                'Email',
                'Referral',
                'Tradeshow',
            ],
            value: 'Social Media',
        },
        {
            id: 'propertyType',
            label: 'Select Property Type',
            type: 'select',
            options: [
                'House',
                'Condominium',
                'Townhouse',
                'Lot',
                'Multi-Unit',
                'Commercial',
                'Mixed-Use',
                'Other',
            ],
            value: '',
        },
        {
            id: 'propertyCondition',
            label: 'Condition of the Property',
            type: 'select',
            options: [
                '100% Ready',
                'Under Construction',
                'Vacant',
                'Tenant Property',
                'New Construction',
            ],
            value: '',
        },
        {
            id: 'access',
            label: 'Access?',
            type: 'select',
            options: [
                'Realtor will be on site',
                'Owner will be on site',
                'Lockbox (please provide the code)',
                'Other',
            ],
            value: '',
        },
        {
            id: 'luckBox',
            label: 'Lockbox?',
            type: 'text',
            placeholder: '',
            value: '',
        },
        {
            id: 'customerCode',
            label: 'Customer Code (Optional)',
            type: 'text',
            placeholder: '',
            value: '',
        },
        {
            id: 'specialRequest',
            label: 'Special Requests',
            type: 'textarea',
            placeholder: 'Areas for the photographer to focus on or avoid. Parking instructions. Etc.',
            value: '',
        },
    ];


    return (
        <div>
            <GenerateFormComponent
                fields={fields}
                handleFieldChange={handleFieldChange}
            />
        </div>
    );
};


export default withForm(LocationNew);
"
n6nHChGP,withForm.js,ikamal7,JavaScript,Wednesday 7th of June 2023 04:09:04 PM CDT,"import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { updateField } from '@/redux/form.slice';


const withForm = (WrappedComponent) => {
    const FormComponent = (props) => {
        const dispatch = useDispatch();
        const formFields = useSelector((state) => state.form.fields);
        const [fields, setFields] = useState(formFields);

        const handleFieldChange = (fieldId, value) => {
            const updatedFields = fields.map((field) => {
                if (field.id === fieldId) {
                    return { ...field, value };
                }
                return field;
            });
            setFields(updatedFields);
            dispatch(updateField({ fieldId, value }));
        };

        return (
            <WrappedComponent
                {...props}
                fields={fields}
                setFields={setFields}
                handleFieldChange={handleFieldChange}
            />
        );
    };

    return FormComponent;
};

export default withForm;
"
tSHAuekt,booknow.js,ikamal7,JavaScript,Wednesday 7th of June 2023 04:08:11 PM CDT,"import React, {useState, useRef} from 'react';
import Head from ""next/head"";
import Stepper from ""@/components/Booking/Stepper"";
import StepperControl from ""@/components/Booking/StepperControl"";
import Services from ""@/components/Booking/steps/Services"";
import Schedule from ""@/components/Booking/steps/Schedule"";
import Contact from ""@/components/Booking/steps/Contact"";
import Confirm from ""@/components/Booking/steps/Confirm"";
import {StepperContext} from ""@/contexts/StepperContext"";
import LocationNew from ""@/components/Booking/steps/LocationNew"";
import Location from ""@/components/Booking/steps/Location"";

const BookNow = () => {
    const [currentStep, setCurrentStep] = useState(1);
    const steps = [
        ""Location"",
        ""Services"",
        ""Schedule"",
        ""Contact"",
        ""Confirm""
    ];

    const displayStep = (step) => {
        switch (step) {
            case 1:
                return <LocationNew />;
            case 2:
                return <Services />;
            case 3:
                return <Schedule />;
            case 4:
                return <Contact />;
            case 5:
                return <Confirm />;
            default:
                return <Location />;

        }
    }
    const handleClick = (direction) => {
        let newStep = currentStep;
        direction === ""next"" ? newStep++ : newStep--;
        newStep > 0 && newStep <= steps.length && setCurrentStep(newStep);
    }
    return (
        <>
            <Head>
                <title>Book a Shoot </title>
            </Head>

            <div className={`bg-[#F5F5F5]`}>
                <div className=""container py-13"">
                    <h1 className={`font-unbounded font-semibold lg:text-title-xxl text-title-md3 text-black text-center mb-10`}>
                        <span className={'text-radical-red-500'}>Book </span> a Shoot</h1>

                    <div className=""bg-white px-[30px] lg:px-[100px] py-13.5"">

                        {/*<Step />*/}
                        <Stepper steps={steps} currentStep={currentStep} />

                        <div className={`mt-14`}>
                            <StepperContext.Provider value={{}}>
                                {displayStep(currentStep)}
                            </StepperContext.Provider>
                        </div>

                        <StepperControl
                        handleClick={handleClick}
                        currentStep={currentStep}
                        steps={steps}
                        />

                    </div>
                </div>
            </div>
        </>
    );
};

export default BookNow;"
bP76sd1Z,Untitled,Pastehsjsjs,Python,Wednesday 7th of June 2023 03:43:30 PM CDT,"with open('/Users/alex26/Downloads/26 (18).txt', 'r') as f:
    _, K, M = [int(f.readline()) for _ in range(3)]
    d = list(map(int, f.read().strip().split('\n')))
    d.sort(reverse=True)
    space = [M for _ in range(K)]

last_idx = -1
while True:
    last_idx += 1
    if last_idx == len(space) or not d:break
    d.sort(reverse=True)
    to_del = []
    for i in d.copy():
        if space[last_idx] - i >= 0:
            space[last_idx] -= i
            d.remove(i)

print(last_idx, space[last_idx - 1])"
bZ8bZjBp,cpp search server1,bigbadvoodoo,C++,Wednesday 7th of June 2023 02:20:01 PM CDT,"#include <algorithm>
#include <cmath>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

const int INVALID_DOCUMENT_ID = -1;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct Document {
    Document() = default;

    Document(int id, double relevance, int rating)
            : id(id)
            , relevance(relevance)
            , rating(rating) {
    }

    int id = 0;
    double relevance = 0.0;
    int rating = 0;
};

template <typename StringContainer>
set<string> MakeUniqueNonEmptyStrings(const StringContainer& strings) {
    set<string> non_empty_strings;
    for (const string& str : strings) {
        if (!str.empty()) {
            non_empty_strings.insert(str);
        }
    }
    return non_empty_strings;
}

enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};

class SearchServer {
public:
    template <typename StringContainer>
    explicit SearchServer(const StringContainer& stop_words)
            : stop_words_(MakeUniqueNonEmptyStrings(stop_words)) {
    }

    explicit SearchServer(const string& stop_words_text)
            : SearchServer(
            SplitIntoWords(stop_words_text))  // Invoke delegating constructor from string container
    {
    }

    void AddDocument(int document_id, const string& document, DocumentStatus status,
                     const vector<int>& ratings) {
        const vector<string> words = SplitIntoWordsNoStop(document);
        const double inv_word_count = 1.0 / words.size();
        for (const string& word : words) {
            word_to_document_freqs_[word][document_id] += inv_word_count;
        }
        documents_.emplace(document_id, DocumentData{ComputeAverageRating(ratings), status});
    }


    template <typename DocumentPredicate>
    [[nodiscard]]
    bool FindTopDocuments(const string& raw_query,
                          DocumentPredicate document_predicate,
                          vector<Document>& result) const {
        const Query query = ParseQuery(raw_query);
        auto matched_documents = FindAllDocuments(query, document_predicate);

        sort(matched_documents.begin(), matched_documents.end(),
             [](const Document& lhs, const Document& rhs) {
                 if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
                     return lhs.rating > rhs.rating;
                 } else {
                     return lhs.relevance > rhs.relevance;
                 }
             });
        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
        }
        result = matched_documents;
        return true;
    }

    [[nodiscard]]
    bool FindTopDocuments(const string& raw_query,
                          DocumentStatus status,
                          vector<Document>& result) const {
        return FindTopDocuments(
                raw_query, [status](int document_id, DocumentStatus document_status, int rating) {
                    return document_status == status;
                }, result);
    }

//    vector<Document> FindTopDocuments(const string& raw_query) const {
//        vector<Document>& result;
//        FindTopDocuments(raw_query, DocumentStatus::ACTUAL, result);
//        return result;
//    }

    int GetDocumentCount() const {
        return documents_.size();
    }

    [[nodiscard]]
    bool MatchDocument(const string& raw_query,
                       int document_id,
                       tuple<vector<string>, DocumentStatus>& result) const {
        const Query query = ParseQuery(raw_query);
        vector<string> matched_words;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            if (word_to_document_freqs_.at(word).count(document_id)) {
                matched_words.push_back(word);
            }
        }
        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            if (word_to_document_freqs_.at(word).count(document_id)) {
                matched_words.clear();
                break;
            }
        }
        result = make_tuple(matched_words, documents_.at(document_id).status);
        return true;
    }

    int GetDocumentId(int index) const {
        if (index < 0 || index > GetDocumentCount()) {
            return INVALID_DOCUMENT_ID;
        }

        int i=0;
        for (const auto& [key, value] : documents_) {
            if (i == index) {
                return key;
            }
            ++i;
        }
        return INVALID_DOCUMENT_ID;
    }

private:
    struct DocumentData {
        int rating;
        DocumentStatus status;
    };
    const set<string> stop_words_;
    map<string, map<int, double>> word_to_document_freqs_;
    map<int, DocumentData> documents_;

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    static int ComputeAverageRating(const vector<int>& ratings) {
        if (ratings.empty()) {
            return 0;
        }
        int rating_sum = 0;
        for (const int rating : ratings) {
            rating_sum += rating;
        }
        return rating_sum / static_cast<int>(ratings.size());
    }

    struct QueryWord {
        string data;
        bool is_minus;
        bool is_stop;
    };

    QueryWord ParseQueryWord(string text) const {
        bool is_minus = false;
        // Word shouldn't be empty
        if (text[0] == '-') {
            is_minus = true;
            text = text.substr(1);
        }
        return {text, is_minus, IsStopWord(text)};
    }

    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };

    Query ParseQuery(const string& text) const {
        Query query;
        for (const string& word : SplitIntoWords(text)) {
            const QueryWord query_word = ParseQueryWord(word);
            if (!query_word.is_stop) {
                if (query_word.is_minus) {
                    query.minus_words.insert(query_word.data);
                } else {
                    query.plus_words.insert(query_word.data);
                }
            }
        }
        return query;
    }

    // Existence required
    double ComputeWordInverseDocumentFreq(const string& word) const {
        return log(GetDocumentCount() * 1.0 / word_to_document_freqs_.at(word).size());
    }

    template <typename DocumentPredicate>
    vector<Document> FindAllDocuments(const Query& query,
                                      DocumentPredicate document_predicate) const {
        map<int, double> document_to_relevance;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
            for (const auto [document_id, term_freq] : word_to_document_freqs_.at(word)) {
                const auto& document_data = documents_.at(document_id);
                if (document_predicate(document_id, document_data.status, document_data.rating)) {
                    document_to_relevance[document_id] += term_freq * inverse_document_freq;
                }
            }
        }

        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            for (const auto [document_id, _] : word_to_document_freqs_.at(word)) {
                document_to_relevance.erase(document_id);
            }
        }

        vector<Document> matched_documents;
        for (const auto [document_id, relevance] : document_to_relevance) {
            matched_documents.push_back(
                    {document_id, relevance, documents_.at(document_id).rating});
        }
        return matched_documents;
    }

    static bool IsValidWord(const string& word) {
        return none_of(word.begin(), word.end(), [](char c) {
            return c >= '\0' && c < ' ';
        });
    }
};

// ==================== для примера =========================

void PrintDocument(const Document& document) {
    cout << ""{ ""s
         << ""document_id = ""s << document.id << "", ""s
         << ""relevance = ""s << document.relevance << "", ""s
         << ""rating = ""s << document.rating << "" }""s << endl;
}

int main() {
    SearchServer search_server(""и в на""s);

    search_server.AddDocument(0, ""белый кот и модный ошейник""s, DocumentStatus::ACTUAL, {8, -3});
    search_server.AddDocument(1, ""пушистый кот пушистый хвост""s, DocumentStatus::ACTUAL, {7, 2, 7});
    search_server.AddDocument(2, ""ухоженный пёс выразительные глаза""s, DocumentStatus::ACTUAL,
                              {5, -12, 2, 1});
    search_server.AddDocument(3, ""ухоженный скворец евгений""s, DocumentStatus::BANNED, {9});

    cout << ""ACTUAL by default:""s << endl;
    for (const Document& document : search_server.FindTopDocuments(""пушистый ухоженный кот""s)) {
        PrintDocument(document);
    }

    cout << ""BANNED:""s << endl;
    for (const Document& document :
            search_server.FindTopDocuments(""пушистый ухоженный кот""s, DocumentStatus::BANNED)) {
        PrintDocument(document);
    }

    cout << ""Even ids:""s << endl;
    for (const Document &document :
            search_server.FindTopDocuments(""пушистый ухоженный кот""s,
                                           [](int document_id, DocumentStatus status, int rating) {
                                               return document_id % 2 == 0;
                                           }))
    {
        PrintDocument(document);
    }
    return 0;
}"
