id,title,username,language,date,content
LA4x3LZ9,Untitled,renhkl,Python,Tuesday 16th of May 2023 01:00:31 PM CDT,"#not my code
#taken from https://github.com/ukBaz/python-bluezero/issues/189
#will delete soon, for testing

from time import sleep
from bluezero import central


raspi_mac = ""B8:27:EB:90:90:74""
muffin_holder_white_mac = ""A0:9A:B7:3A:DE:F3""
device_addr = muffin_holder_white_mac
adapter_addr = raspi_mac
SERVICE_UUID = ""0000CA0E-0000-1000-8000-00805F9B34FB""
CHARAC_UUID = ""0000CA1E-0000-1000-8000-00805F9B34FB""

class MyPeripheralDevice:
    def __init__(self, device_addr, adapter_addr=None):
        self.remote_device = central.Central(adapter_addr=adapter_addr,
                                             device_addr=device_addr)
        self._remote_charac = self.remote_device.add_characteristic(SERVICE_UUID,
                                                                    CHARAC_UUID)

    def connect(self):
        self.remote_device.connect()
        while not self.remote_device.services_resolved:
            sleep(0.5)
        self.remote_device.load_gatt()

    def disconnect(self):
        self.remote_device.disconnect()

    @property
    def value(self):
        return self._remote_charac.value


if __name__ == '__main__':
    my_dev = MyPeripheralDevice(adapter_addr=adapter_addr,
                                device_addr=device_addr)

    my_dev.connect()
    print(my_dev.value)
    my_dev.disconnect()"
9u3jwZfh,BTC Wallet Credentials have been reset,penandabbl_47,GetText,Tuesday 16th of May 2023 12:53:27 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
Kostenckig1:pdAcAv on 16.16.200.36(SSH)
Regards"
pWLWuCmw,Soojendatud Merisigade puuri C++ programm,GiorgioMufen,C++,Tuesday 16th of May 2023 12:52:30 PM CDT,"Arduino programm soojendatud merisigade puurile on siin:

#include <LiquidCrystal.h>
#include <dht.h>


LiquidCrystal lcd(1, 3, 5, 6, 9, 10);
#define Relay1 2
#define TempSensor A0
#define Button1 7
#define Button2 8
int CurrentTargetTemp = 25;

dht DHT;

void setup() {
  // put your setup code here, to run once:
  pinMode(Relay1, OUTPUT);
  pinMode(Button1, INPUT);
  pinMode(Button2, INPUT);
  digitalWrite(Relay1, HIGH);
  lcd.begin(16,2);
  lcd.clear();
  lcd.setCursor(0,0);
  //lcd.print(""Hello World!"");
  //Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
  DHT.read11(TempSensor);
  Serial.print(""Temperature: "");
  Serial.print(DHT.temperature);
  Serial.print("" Humidity: "");
  Serial.print(DHT.humidity);
  Serial.println(""   "");
  lcd.setCursor(0,0);
  lcd.print(""Temp: "");
  lcd.setCursor(10,0);
  lcd.print(DHT.temperature);
  lcd.setCursor(0, 1);
  lcd.print(""Target:"");
  lcd.setCursor(10, 1);
  lcd.print(CurrentTargetTemp);

  if (digitalRead(Button1) == HIGH and CurrentTargetTemp > 0) {
    CurrentTargetTemp = CurrentTargetTemp - 5;
    Serial.println(""Button1 pressed"");
    delay(500);
    lcd.clear();
  }
  if (digitalRead(Button2) == HIGH and CurrentTargetTemp < 60) {
    CurrentTargetTemp = CurrentTargetTemp + 5;
    Serial.println(""Button2 pressed"");
    delay(500);
    lcd.clear();
  }


  if (DHT.temperature < CurrentTargetTemp - 2){
    digitalWrite(Relay1, LOW);
  } 
  if (DHT.temperature > CurrentTargetTemp){
    digitalWrite(Relay1, HIGH);
  }
  
}"
z1WYkmVS,CSES - Subarray Squares,erek1e,C++,Tuesday 16th of May 2023 12:29:48 PM CDT,"// Divide and Conquer DP Optimisation
#include <bits/stdc++.h>
 
using namespace std;
 
const long long INF = 1e18;
vector<int> a, p;
vector<vector<long long>> cost;
void solve(int parts, int l, int r, int optl, int optr) {
    if (l > r) return;
    int mid = (l + r) / 2;
    pair<long long, long long> best = {INF, optl};
    for (int i = optl; i <= optr && i < mid; ++i) {
        best = min(best, {cost[parts-1][i] + (long long)(p[mid]-p[i])*(p[mid]-p[i]), i});
    }
    cost[parts][mid] = best.first;
    int opt = best.second;
    solve(parts, l, mid-1, optl, opt);
    solve(parts, mid+1, r, opt, optr);
}
 
int main() {
    int n, k; cin >> n >> k;
    a = p = vector<int>(1+n);
    for (int i = 1; i <= n; ++i) cin >> a[i], p[i] = p[i-1] + a[i];
    cost.assign(1+k, vector<long long>(1+n, INF));
    cost[0][0] = 0;
    for (int i = 1; i <= k; ++i) solve(i, 1, n, 0, n-1);
    cout << cost[k][n] << endl;
    return 0;
}"
1niuDqd4,Untitled,MX37S,PL/SQL,Tuesday 16th of May 2023 12:20:51 PM CDT,"
  CREATE MATERIALIZED VIEW ""SIE"".""MV_FE_FACTURA_CABECERA_MIG"" (""SFACTURA"", ""TIPO_COMPROBANTE"", ""DSUCURSAL"", ""PUNTO_VENTA"", ""NFACTURA"", ""FHEMISION"", ""CAEA_NRO"", ""COD_CONCEPTO"", ""FVENCIMIENTO"", ""COD_CAEA"", ""NCUIT"", ""DNOMYAP"", ""DDOMIC"", ""COD_IVA_CLIENTE"", ""CPOSTAL"", ""DLOCA"", ""COD_PCIA"", ""EMAIL"", ""COND_VTA"", ""IMPORTE_GRAVADO"", ""IMPORTE_NO_GRAVADO"", ""IMPORTE_EXENTO"", ""IMPORTE_NETO"", ""IMPORTE_IVA"", ""OTROS_TRIBUTOS"", ""IMPORTE_TOTAL"", ""COD_MONEDA"", ""COTIZA"", ""COD_IIBB"", ""DESCRIPCION_IIBB"", ""BASE_IMPONIBLE_IIBB"", ""ALICUOTA_IIBB"", ""IIBB"", ""COD_IVANOINS"", ""DESCRIPCION_IVANOINS"", ""BASE_IMPONIBLE_IVANOINS"", ""ALICUOTA_IVANOINS"", ""IVANOINS"", ""COD_IVA"", ""CAEA_ESTADO"", ""PTOVTA_FAC_ASOC"", ""TIPO_COMP_ASOC"", ""NFAC_ASOC"", ""PDESDE"", ""PHASTA"", ""DNOMYAP_DESPACHANTE"", ""CVALOR_DESPACHANTE"", ""CCOMPROBANTE"", ""DCOMPROBANTE"", ""CPERFIL_RESPONSABLE"", ""DPERFIL"")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 0 INITRANS 2 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE ""SIE_DATA"" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT DISTINCT
       Fcfi.Sfactura sfactura,
       ftccaea.tpcbte_caea Tipo_Comprobante,
       suc.dsucursal,
       Fcfi.caea_ptovta punto_venta,
       Fcfi.Nfactura nfactura,
       Fcfi.Fhemision fhemision,
       Fcfi.Caea_Nro caea_nro,
       --facdatos
       '2' cod_concepto,
       Fcfi.Fvencimiento fvencimiento,
       --sujetoCliente
       Ctdc.ctpdocu cod_caea,
       (CASE WHEN fcfi.ctpdocu = 80 THEN Fcfi.Ncuit ELSE fcfi.ndoc END) ncuit,
       Fcfi.Dnomyap dnomyap,
       Fcfi.Ddomic ddomic,
       civa.cod_caea cod_iva_cliente,
       TO_CHAR (Fcfi.Cpostal) cpostal,
       Fcfi.Dloca dloca,
       Cprv.Cod_caea Cod_Pcia,
       Ccta.Email email,
       CTCU.DTCTA cond_vta,
       --totalesafip
       (CASE WHEN fcfi.iiva > 0 THEN fcfi.ineto ELSE 0 END) importe_gravado,
       (CASE
           WHEN fcfi.iiva = 0 AND fcfi.cperfil_responsable = 950
           THEN
              fcfi.ineto
           ELSE
              0
        END)
          importe_no_gravado,
       (CASE
           WHEN fcfi.iiva = 0 AND fcfi.cperfil_responsable = 957
           THEN
              fcfi.ineto
           ELSE
              0
        END)
          importe_exento,
       fcfi.ineto importe_neto,
       (fcfi.iiva - fcfi.ilibiva) importe_iva,
       (fcfi.iib - fcfi.ilibib + fcfi.iivanoins) otros_tributos,
       (  fcfi.ineto
        + fcfi.iiva
        - fcfi.ilibiva
        + fcfi.iib
        - fcfi.ilibib
        + fcfi.iivanoins)
          importe_total,
       'PES' cod_moneda,
       '1' cotiza,
       --tributos
       '2' cod_iibb,
       'Per IB' descripcion_iibb,
       fcfi.ineto base_imponible_iibb,
       /* (fcfi.pib - fcfi.plibib) */
       ROUND (fcfi.pib - fcfi.pib * fcfi.plibib / 100, 2) alicuota_iibb,
       (fcfi.iib - fcfi.ilibib) iibb,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (fcfi.ineto + fcfi.iiva - fcfi.ilibiva) base_imponible_ivanoins,
       fcfi.pivanoins alicuota_ivanoins,
       fcfi.iivanoins ivanoins,
       --ivas
       (CASE
           WHEN fcfi.iiva = 0 AND fcfi.cperfil_responsable = 950 THEN '1'
           WHEN fcfi.iiva = 0 AND fcfi.cperfil_responsable = 957 THEN '2'
           WHEN fcfi.iiva > 0 AND fcfi.piva = 0 THEN '3'
           WHEN fcfi.iiva > 0 AND fcfi.piva = 10.5 THEN '4'
           WHEN fcfi.iiva > 0 AND fcfi.piva = 21 THEN '5'
           WHEN fcfi.iiva > 0 AND fcfi.piva = 27 THEN '6'
        END)
          cod_iva,
       fcfi.caea_estado caea_estado,
       fac_asoc.caea_ptovta ptovta_fac_asoc,
       tcpfac_asoc.tpcbte_caea Tipo_Comp_asoc,
       fac_asoc.nfactura nfac_asoc,
       fcfi.pdesde pdesde,
       fcfi.phasta phasta,
       fcfi.DNOMYAP_DESPACHANTE,
       fcfi.CVALOR_DESPACHANTE,
       b.ccomprobante,
       fdtc.dcomprobante,
       fcfi.cperfil_responsable,
       cprf.dperfil
  FROM Fcfi,
       fdfi b,
       Ctdc,
       Cprv,
       Ccta,
       civa,
       ftccaea,
       CTCU,
       fcfi fac_asoc,
       ftccaea tcpfac_asoc,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc,
       fac_detalles_tp_comprobantes fdtc,
       cli_perfiles cprf
 WHERE     fcfi.sfactura = b.sfactura
       AND Fcfi.Ctpdocu = Ctdc.Ctpdocu
       AND Fcfi.Cpais = Cprv.Cpais
       AND Fcfi.Cprov = Cprv.Cprov
       AND (ccta.scli = (decode(fcfi.csecobra,1,fcfi.scli_responsable,2,fcfi.scli_despachante,3,fcfi.scli_responsable)) and fcfi.cconvta = ccta.ctcta)
       AND fcfi.civa = civa.c_iva
       AND ftccaea.tpcomprobante = fcfi.ctpcomprobante
       AND ftccaea.letra = fcfi.ctiplet
       AND fcfi.cconvta = CTCU.CTCTA
       AND fcfi.sfactura_padre = fac_asoc.sfactura(+)
       AND fac_asoc.ctpcomprobante = tcpfac_asoc.tpcomprobante(+)
       AND fac_asoc.ctiplet = tcpfac_asoc.letra(+)
       AND Fcfi.caea_ptovta = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND b.ccomprobante = fdtc.ccomprobante
       AND b.ctpcomprobante = fdtc.ctpcomprobante
       AND fcfi.cperfil_responsable = cprf.cperfil
       AND fcfi.nfactura IS NOT NULL
         AND fcfi.fhemision BETWEEN (SELECT TO_DATE (valor, 'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro = 'parametro.mvfe.desde.mig')   AND
                                       (SELECT TO_DATE (valor,'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro =
                                                     'parametro.mvfe.hasta.mig')
       AND fcfi.caea_estado = 0
       AND Fcfi.Ctpcomprobante IN ('FA', 'NC', 'ND')
UNION
----------------------------------------------------------EXPORTACION-------------------------

SELECT DISTINCT
       ECFC.SFACTURA,
       FTCCAEA.TPCBTE_CAEA TIPO_COMPROBANTE,
       suc.dsucursal,
       ECFC.CAEA_PTOVTA punto_venta,
       ECFC.NFACTURA NFACTURA,
       ECFC.FHEMISION FHEMISION,
       ECFC.CAEA_NRO CAEA_NRO,
       --FACDATOS
       '2' COD_CONCEPTO,
       ECFC.FVENCIMIENTO FVENCIMIENTO,
       --SUJETOCLIENTE
       CTDC.CTPDOCU COD_CAEA,
       (CASE WHEN ecfc.ctpdocu = 80 THEN ecfc.Ncuit ELSE ecfc.ndoc END) NCUIT,
       ECFC.DNOMYAP_RESPONSABLE DNOMYAP,
       ECFC.DDOMIC DDOMIC,
       CIVA.COD_CAEA COD_IVA_cliente,
       ECFC.CPOSTAL CPOSTAL,
       ECFC.DLOCA DLOCA,
       CPRV.COD_CAEA COD_PCIA,
       CCTEX.EMAIL EMAIL,
       CTCU.DTCTA COND_VTA,
       (CASE WHEN ECFC.IIVA > 0 THEN ECFC.INETO ELSE 0 END) IMPORTE_GRAVADO,
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 950
           THEN
              ECFC.INETO
           ELSE
              0
        END)
          IMPORTE_NO_GRAVADO,
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 957
           THEN
              ECFC.INETO
           ELSE
              0
        END)
          IMPORTE_EXENTO,
       ECFC.INETO IMPORTE_NETO,
       (ECFC.IIVA - ECFC.ILIBIVA) IMPORTE_IVA,
       (ECFC.IIB - ECFC.ILIBIB + ECFC.iivanoins) OTROS_TRIBUTOS,
       (  ECFC.INETO
        + ECFC.IIVA
        - ECFC.ILIBIVA
        + ECFC.IIB
        - ECFC.ILIBIB
        + ECFC.iivanoins)
          IMPORTE_TOTAL,
       'PES' COD_MONEDA,
       '1' COTIZA,
       --TRIBUTOS
       '2' COD_IIBB,
       'Per IB' DESCRIPCION_IIBB,
       ECFC.INETO BASE_IMPONIBLE_IIBB,
       /* (ECFC.PIB - ECFC.PLIBIB)*/
       ROUND (ecfc.pib - ecfc.pib * ecfc.plibib / 100, 2) ALICUOTA_IIBB,
       (ECFC.IIB - ECFC.ILIBIB) IIBB,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (ecfc.ineto + ecfc.iiva - ECFC.ILIBIVA) base_imponible_ivanoins,
       ecfc.pivanoins alicuota_ivanoins,
       ecfc.iivanoins ivanoins,
       --IVAS
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 950 THEN '1'
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 957 THEN '2'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 0 THEN '3'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 10.5 THEN '4'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 21 THEN '5'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 27 THEN '6'
        END)
          COD_IVA,
       ecfc.caea_estado caea_estado,
       fac_asoc.caea_ptovta ptovta_fac_asoc,
       tcpfac_asoc.tpcbte_caea Tipo_Comp_asoc,
       fac_asoc.nfactura nfac_asoc,
       ecfc.pdesde pdesde,
       ecfc.phasta phasta,
       NULL,
       NULL,
       b.ccomprobante,
       fdtc.dcomprobante,
       ECFC.cperfil_responsable,
       cprf.dperfil
  FROM ECFC,
       CCTEX,
       Edfc b,
       CPRV,
       CIVA,
       CTDC,
       ftccaea,
       CTCU,
       ecfc fac_asoc,
       ftccaea tcpfac_asoc,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc,
       fac_detalles_tp_comprobantes fdtc,
       cli_perfiles cprf
 WHERE ECFC.FHEMISION BETWEEN (SELECT TO_DATE (valor, 'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro = 'parametro.mvfe.desde.mig')   AND
                                       (SELECT TO_DATE (valor,'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro =
                                                     'parametro.mvfe.hasta.mig')
       AND ECFC.SFACTURA  = B.SFACTURA              
       AND ECFC.CTIPLET = FTCCAEA.LETRA
       AND ECFC.CTPCOMPROBANTE = FTCCAEA.TPCOMPROBANTE
       AND ECFC.CTPCOMPROBANTE IN ('NC', 'ND')
       AND ECFC.CTPDOCU = CTDC.CTPDOCU
       AND ECFC.CPAIS = CPRV.CPAIS
       AND ECFC.CPROV = CPRV.CPROV
       AND (cctex.scli = ECFC.SCLI_RESPONSABLE and ecfc.cconvta = cctex.ctcta)
       AND ECFC.CIVA = CIVA.C_IVA
       AND ECFC.CCONVTA = CTCU.CTCTA
       AND ecfc.caea_estado  = 0
       AND ecfc.sfactura_asoc = fac_asoc.sfactura(+)
       AND fac_asoc.ctpcomprobante = tcpfac_asoc.tpcomprobante(+)
       AND fac_asoc.ctiplet = tcpfac_asoc.letra(+)
       AND ECFC.CAEA_PTOVTA = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND ecfc.nfactura IS NOT NULL
       AND b.ccomprobante = fdtc.ccomprobante
       AND b.ctpcomprobante = fdtc.ctpcomprobante
       AND ecfc.cperfil_responsable = cprf.cperfil
       
UNION

SELECT  distinct  ECFC.SFACTURA,
       FTCCAEA.TPCBTE_CAEA TIPO_COMPROBANTE,
       suc.dsucursal,
       ECFC.CAEA_PTOVTA punto_venta,
       ECFC.NFACTURA NFACTURA,
       ECFC.FHEMISION FHEMISION,
       ECFC.CAEA_NRO CAEA_NRO,
       --FACDATOS
       '2' COD_CONCEPTO,
       ECFC.FVENCIMIENTO FVENCIMIENTO,
       --SUJETOCLIENTE
       CTDC.CTPDOCU COD_CAEA,
       (CASE WHEN ecfc.ctpdocu = 80 THEN ecfc.Ncuit ELSE ecfc.ndoc END) NCUIT,
       ECFC.DNOMYAP_RESPONSABLE DNOMYAP,
       ECFC.DDOMIC DDOMIC,
       CIVA.COD_CAEA COD_IVA_cliente,
       ECFC.CPOSTAL CPOSTAL,
       ECFC.DLOCA DLOCA,
       CPRV.COD_CAEA COD_PCIA,
       CCTEX.EMAIL EMAIL,
       CTCU.DTCTA COND_VTA,
       (CASE WHEN ECFC.IIVA > 0 THEN ECFC.INETO ELSE 0 END) IMPORTE_GRAVADO,
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 950
           THEN
              ECFC.INETO
           ELSE
              0
        END)
          IMPORTE_NO_GRAVADO,
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 957
           THEN
              ECFC.INETO
           ELSE
              0
        END)
          IMPORTE_EXENTO,
       ECFC.INETO IMPORTE_NETO,
       (ECFC.IIVA - ECFC.ILIBIVA) IMPORTE_IVA,
       (ECFC.IIB - ECFC.ILIBIB + ECFC.iivanoins) OTROS_TRIBUTOS,
       (  ECFC.INETO
        + ECFC.IIVA
        - ECFC.ILIBIVA
        + ECFC.IIB
        - ECFC.ILIBIB
        + ECFC.iivanoins)
          IMPORTE_TOTAL,
       'PES' COD_MONEDA,
       '1' COTIZA,
       --TRIBUTOS
       '2' COD_IIBB,
       'Per IB' DESCRIPCION_IIBB,
       ECFC.INETO BASE_IMPONIBLE_IIBB,
       /* (ECFC.PIB - ECFC.PLIBIB)*/
       ROUND (ecfc.pib - ecfc.pib * ecfc.plibib / 100, 2) ALICUOTA_IIBB,
       (ECFC.IIB - ECFC.ILIBIB) IIBB,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (ecfc.ineto + ecfc.iiva - ECFC.ILIBIVA) base_imponible_ivanoins,
       ecfc.pivanoins alicuota_ivanoins,
       ecfc.iivanoins ivanoins,
       --IVAS
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 950 THEN '1'
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 957 THEN '2'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 0 THEN '3'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 10.5 THEN '4'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 21 THEN '5'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 27 THEN '6'
        END)
          COD_IVA,
       ecfc.caea_estado caea_estado,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       b.ccomprobante,
       fdtc.dcomprobante,
       ECFC.cperfil_responsable,
       cprf.dperfil
  FROM ECFC,
       CCTEX,
       CPRV,
       CIVA,
       CTDC,
       ftccaea,
       CTCU,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc,
       edfc b,
       fac_detalles_tp_comprobantes fdtc,
       cli_perfiles cprf
 WHERE ECFC.FHEMISION  BETWEEN (SELECT TO_DATE (valor, 'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro = 'parametro.mvfe.desde.mig')   AND
                                       (SELECT TO_DATE (valor,'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro =
                                                     'parametro.mvfe.hasta.mig')
       AND ECFC.SFACTURA = B.SFACTURA              
       AND ECFC.CTIPLET = FTCCAEA.LETRA
       AND ECFC.CTPCOMPROBANTE = FTCCAEA.TPCOMPROBANTE
       AND ECFC.CTPCOMPROBANTE IN ('FA')
       AND ECFC.CTPDOCU = CTDC.CTPDOCU
       AND ECFC.CPAIS = CPRV.CPAIS
       AND ECFC.CPROV = CPRV.CPROV
       AND (cctex.scli = ECFC.SCLI_RESPONSABLE and ecfc.cconvta = cctex.ctcta)
       AND ECFC.CIVA = CIVA.C_IVA
       AND ECFC.CCONVTA = CTCU.CTCTA
       AND ecfc.caea_estado = 0
       AND ECFC.caea_ptovta = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND ecfc.nfactura IS NOT NULL
       AND b.ccomprobante = fdtc.ccomprobante
       AND b.ctpcomprobante = fdtc.ctpcomprobante
       AND ecfc.cperfil_responsable = cprf.cperfil
       
UNION
--------------------------------------------------------------------------------------------------SUCURSALES ---------------------------------------------------

SELECT UINV.ID,
       ftccaea.TPCBTE_CAEA TIPO_COMPROBANTE,
       suc.dsucursal,
       UINV.CAEA_PTOVTA punto_venta,
       UINV.FORNRO NFACTURA,
       UINV.FHGENERACION FHEMISION,
       UINV.CAEA_NRO CAEA_NRO,
       --FACDATOS
       '2' COD_CONCEPTO,
       UINV.FVTOFAC FVENCIMIENTO,
       --SUJETOCLIENTE
       TO_CHAR (UTDID.tipo_tca_eze) COD_CAEA,
       UPIXC.N_DOCUM NCUIT,
       UCLI.DNOMYAP DNOMYAP,
       UCLI.DIRECCION DDOMIC,
       CIVA.COD_CAEA COD_IVA_cliente,
       UCLI.CPOSTAL CPOSTAL,
       UCLI.LOCALIDAD DLOCA,
       UPCIA.COD_CAEA COD_PCIA,
       UCLI.E_MAIL EMAIL,
       LOWER (uclcxs.DCUENTA) COND_VTA,
       (CASE WHEN UINV.IIVA > 0 THEN UINV.INETO ELSE 0 END) IMPORTE_GRAVADO,
       (CASE WHEN UINV.IIVA = 0 THEN UINV.INETO ELSE 0 END)
          IMPORTE_NO_GRAVADO,
       0 IMPORTE_EXENTO,
       UINV.INETO IMPORTE_NETO,
       (UINV.IIVA - UINV.ILIBIVA) IMPORTE_IVA,
       (UINV.IIB - UINV.ILIBIB + uinv.iivanoins) OTROS_TRIBUTOS,
       (  UINV.INETO
        + UINV.IIVA
        - UINV.ILIBIVA
        + UINV.IIB
        - UINV.ILIBIB
        + uinv.iivanoins)
          IMPORTE_TOTAL,
       'PES' COD_MONEDA,
       '1' COTIZA,
       --TRIBUTOS
       '2' COD_IIBB,
       'Per IB' DESCRIPCION_IIBB,
       UINV.INETO BASE_IMPONIBLE_IIBB,
       /*  (UINV.PIB - UINV.PLIBIB) */
       ROUND (uinv.pib - uinv.pib * uinv.plibib / 100, 2) ALICUOTA_IIBB,
       (UINV.IIB - UINV.ILIBIB) IIBB,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (UINV.INETO + UINV.IIVA - UINV.ILIBIVA) base_imponible_ivanoins,
       uinv.pivanoins alicuota_ivanoins,
       uinv.iivanoins ivanoins,
       --IVAS
       (CASE
           WHEN UINV.IIVA = 0 AND UINV.PIVA = 0        --UPFXCL.CPERFIL  = 950
                                               THEN '1'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 0 THEN '3'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 10.5 THEN '4'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 21 THEN '5'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 27 THEN '6'
        END)
          COD_IVA,
       uinv.caea_estado caea_estado,
       fac_asoc.CAEA_PTOVTA punto_venta_asoc,
       ftc_fac_asoc.TPCBTE_CAEA Tipo_Comp_asoc,
       fac_asoc.FORNRO nfac_asoc,
       uinv.pdesde pdesde,
       uinv.phasta phasta,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL
  FROM sies.UINV uinv,
       sies.UTDID utdid,
       sies.UCLI ucli,
       sies.UTMP utmp,
       ftccaea ftccaea,
       sies.uclcxs uclcxs,
       sies.upixc,
       sies.UPCIA upcia,
       sie.cli_impuestos_iva ciiv,
       CIVA civa,
       sies.UINV fac_asoc,
       sies.UTMP tmpfac_asoc,
       ftccaea ftc_fac_asoc,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc
 WHERE UINV.FHGENERACION  BETWEEN (SELECT TO_DATE (valor, 'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro = 'parametro.mvfe.desde.mig')   AND
                                       (SELECT TO_DATE (valor,'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro =
                                                     'parametro.mvfe.hasta.mig')
       AND UINV.TCOMPROBANTE LIKE 'NC%'
       AND uinv.CESTADO <> 'ANUL'
       AND uinv.TCOMPROBANTE = utmp.TCOMPROBANTE
       AND utmp.TP_COMPROBANTE_CAEA = ftccaea.TPCOMPROBANTE
       AND uinv.LETRA = ftccaea.LETRA
       AND UINV.IDCLIENTE = UCLCXS.IDCLIENTE
       AND uinv.IDNN_SUCURSAL = uclcxs.IDNN_CSUCURSAL
       AND uinv.IDCUENTA = uclcxs.idcuenta
       AND uinv.IDCLIENTE = UCLI.IDCLIENTE
       AND uinv.idcliente = upixc.IDCLIENTE
       AND uinv.IDNN_SUCURSAL = upixc.IDDN_CSUCURSAL
       AND UTDID.TIPO = Upixc.ctpdocu
       AND UCLI.CPROVINCIA = UPCIA.CPROVINCIA
       AND UINV.CIVA = CIIV.C_IMP_IVA
       AND CIIV.C_IVA = CIVA.C_IVA
       AND uinv.caea_estado = 0
       AND uinv.sfactura_asoc = fac_asoc.id
       AND fac_asoc.TCOMPROBANTE = tmpfac_asoc.TCOMPROBANTE
       AND tmpfac_asoc.TP_COMPROBANTE_CAEA = ftc_fac_asoc.TPCOMPROBANTE
       AND fac_asoc.LETRA = ftc_fac_asoc.LETRA
       AND UINV.CAEA_PTOVTA = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND uinv.fornro IS NOT NULL
UNION

SELECT UINV.ID,
       ftccaea.TPCBTE_CAEA TIPO_COMPROBANTE,
       suc.dsucursal,
       UINV.CAEA_PTOVTA punto_venta,
       UINV.FORNRO NFACTURA,
       UINV.FHGENERACION FHEMISION,
       UINV.CAEA_NRO CAEA_NRO,
       --FACDATOS
       '2' COD_CONCEPTO,
       UINV.FVTOFAC FVENCIMIENTO,
       --SUJETOCLIENTE
       TO_CHAR (UTDID.tipo_tca_eze) COD_CAEA,
       UPIXC.N_DOCUM NCUIT,
       UCLI.DNOMYAP DNOMYAP,
       UCLI.DIRECCION DDOMIC,
       CIVA.COD_CAEA COD_IVA_cliente,
       UCLI.CPOSTAL CPOSTAL,
       UCLI.LOCALIDAD DLOCA,
       UPCIA.COD_CAEA COD_PCIA,
       UCLI.E_MAIL EMAIL,
       LOWER (uclcxs.DCUENTA) COND_VTA,
       (CASE WHEN UINV.IIVA > 0 THEN UINV.INETO ELSE 0 END) IMPORTE_GRAVADO,
       (CASE WHEN UINV.IIVA = 0 THEN UINV.INETO ELSE 0 END)
          IMPORTE_NO_GRAVADO,
       0 IMPORTE_EXENTO,
       UINV.INETO IMPORTE_NETO,
       (UINV.IIVA - UINV.ILIBIVA) IMPORTE_IVA,
       (UINV.IIB - UINV.ILIBIB + uinv.iivanoins) OTROS_TRIBUTOS,
       (  UINV.INETO
        + UINV.IIVA
        - UINV.ILIBIVA
        + UINV.IIB
        - UINV.ILIBIB
        + uinv.iivanoins)
          IMPORTE_TOTAL,
       'PES' COD_MONEDA,
       '1' COTIZA,
       --TRIBUTOS
       '2' COD_IIBB,
       'Per IB' DESCRIPCION_IIBB,
       UINV.INETO BASE_IMPONIBLE_IIBB,
       /*  (UINV.PIB - UINV.PLIBIB) */
       ROUND (uinv.pib - uinv.pib * uinv.plibib / 100, 2) ALICUOTA_IIBB,
       (UINV.IIB - UINV.ILIBIB) IIBB,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (UINV.INETO + UINV.IIVA - UINV.ILIBIVA) base_imponible_ivanoins,
       uinv.pivanoins alicuota_ivanoins,
       uinv.iivanoins ivanoins,
       --IVAS
       (CASE
           WHEN UINV.IIVA = 0 AND UINV.PIVA = 0        --UPFXCL.CPERFIL  = 950
                                               THEN '1'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 0 THEN '3'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 10.5 THEN '4'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 21 THEN '5'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 27 THEN '6'
        END)
          COD_IVA,
       uinv.caea_estado caea_estado,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL
  FROM sies.UINV uinv,
       sies.UTDID utdid,
       sies.UCLI ucli,
       sies.UTMP utmp,
       ftccaea ftccaea,
       sies.uclcxs uclcxs,
       sies.upixc,
       sies.UPCIA upcia,
       sie.cli_impuestos_iva ciiv,
       CIVA civa,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc
 WHERE UINV.FHGENERACION  BETWEEN (SELECT TO_DATE (valor, 'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro = 'parametro.mvfe.desde.mig')   AND
                                       (SELECT TO_DATE (valor,'ddmmyyyy')
                                             FROM sie.tca_parametros_apps
                                            WHERE parametro =
                                                     'parametro.mvfe.hasta.mig')
       AND UINV.TCOMPROBANTE LIKE 'FA%'
       AND uinv.CESTADO <> 'ANUL'
       AND uinv.TCOMPROBANTE = utmp.TCOMPROBANTE
       AND utmp.TP_COMPROBANTE_CAEA = ftccaea.TPCOMPROBANTE
       AND uinv.LETRA = ftccaea.LETRA
       AND UINV.IDCLIENTE = UCLCXS.IDCLIENTE
       AND uinv.IDNN_SUCURSAL = uclcxs.IDNN_CSUCURSAL
       AND uinv.IDCUENTA = uclcxs.idcuenta
       AND uinv.IDCLIENTE = UCLI.IDCLIENTE
       AND uinv.idcliente = upixc.IDCLIENTE
       AND uinv.IDNN_SUCURSAL = upixc.IDDN_CSUCURSAL
       AND UTDID.TIPO = Upixc.ctpdocu
       AND UCLI.CPROVINCIA = UPCIA.CPROVINCIA
       AND UINV.CIVA = CIIV.C_IMP_IVA
       AND CIIV.C_IVA = CIVA.C_IVA
       AND uinv.caea_estado = 0
       AND UINV.CAEA_PTOVTA = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND uinv.fornro IS NOT NULL
UNION
-----------------------------------------------------------------------------------------ERROR IMPO
SELECT DISTINCT
       Fcfi.Sfactura sfactura,
       ftccaea.tpcbte_caea Tipo_Comprobante,
       suc.dsucursal,
       Fcfi.caea_ptovta punto_venta,
       Fcfi.Nfactura nfactura,
       Fcfi.Fhemision fhemision,
       Fcfi.Caea_Nro caea_nro,
       --facdatos
       '2' cod_concepto,
       Fcfi.Fvencimiento fvencimiento,
       --sujetoCliente
       Ctdc.ctpdocu cod_caea,
       (CASE WHEN fcfi.ctpdocu = 80 THEN Fcfi.Ncuit ELSE fcfi.ndoc END) ncuit,
       Fcfi.Dnomyap dnomyap,
       Fcfi.Ddomic ddomic,
       civa.cod_caea cod_iva_cliente,
       TO_CHAR (Fcfi.Cpostal) cpostal,
       Fcfi.Dloca dloca,
       Cprv.Cod_caea Cod_Pcia,
       ccta.Email email,
       CTCU.DTCTA cond_vta,
       --totalesafip
       (CASE WHEN fcfi.iiva > 0 THEN fcfi.ineto ELSE 0 END) importe_gravado,
       (CASE
           WHEN fcfi.iiva = 0 AND fcfi.cperfil_responsable = 950
           THEN
              fcfi.ineto
           ELSE
              0
        END)
          importe_no_gravado,
       (CASE
           WHEN fcfi.iiva = 0 AND fcfi.cperfil_responsable = 957
           THEN
              fcfi.ineto
           ELSE
              0
        END)
          importe_exento,
       fcfi.ineto importe_neto,
       (fcfi.iiva - fcfi.ilibiva) importe_iva,
       (fcfi.iib - fcfi.ilibib + fcfi.iivanoins) otros_tributos,
       (  fcfi.ineto
        + fcfi.iiva
        - fcfi.ilibiva
        + fcfi.iib
        - fcfi.ilibib
        + fcfi.iivanoins)
          importe_total,
       'PES' cod_moneda,
       '1' cotiza,
       --tributos
       '2' cod_iibb,
       'Per IB' descripcion_iibb,
       fcfi.ineto base_imponible_iibb,
       /*   (fcfi.pib - fcfi.plibib)*/
       ROUND (fcfi.pib - fcfi.pib * fcfi.plibib / 100, 2) alicuota_iibb,
       (fcfi.iib - fcfi.ilibib) iibb,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (fcfi.ineto + fcfi.iiva - fcfi.ilibiva) base_imponible_ivanoins,
       fcfi.pivanoins alicuota_ivanoins,
       fcfi.iivanoins ivanoins,
       --ivas
       (CASE
           WHEN fcfi.iiva = 0 AND fcfi.cperfil_responsable = 950 THEN '1'
           WHEN fcfi.iiva = 0 AND fcfi.cperfil_responsable = 957 THEN '2'
           WHEN fcfi.iiva > 0 AND fcfi.piva = 0 THEN '3'
           WHEN fcfi.iiva > 0 AND fcfi.piva = 10.5 THEN '4'
           WHEN fcfi.iiva > 0 AND fcfi.piva = 21 THEN '5'
           WHEN fcfi.iiva > 0 AND fcfi.piva = 27 THEN '6'
        END)
          cod_iva,
       fcfi.caea_estado caea_estado,
       fac_asoc.caea_ptovta ptovta_fac_asoc,
       tcpfac_asoc.tpcbte_caea Tipo_Comp_asoc,
       fac_asoc.nfactura nfac_asoc,
       fcfi.pdesde pdesde,
       fcfi.phasta phasta,
       FCFI.DNOMYAP_DESPACHANTE,
       FCFI.CVALOR_DESPACHANTE,
       B.CCOMPROBANTE,
       fdtc.dcomprobante,
       fcfi.cperfil_responsable,
       cprf.dperfil
  FROM Fcfi,
       fdfi b,
       Ctdc,
       Cprv,
       Ccta,
       civa,
       caea_lote_error cle,
       ftccaea,
       ctcu,
       fcfi fac_asoc,
       ftccaea tcpfac_asoc,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc,
       fac_detalles_tp_comprobantes fdtc,
       cli_perfiles cprf
 WHERE     fcfi.sfactura = b.sfactura
       AND Fcfi.Ctpcomprobante IN ('FA', 'NC', 'ND')
       AND Fcfi.Ctpdocu = Ctdc.Ctpdocu
       AND Fcfi.Cpais = Cprv.Cpais
       AND Fcfi.Cprov = Cprv.Cprov
       AND (ccta.scli = (decode(fcfi.csecobra,1,fcfi.scli_responsable,2,fcfi.scli_despachante,3,fcfi.scli_responsable)) and fcfi.cconvta = ccta.ctcta)
       AND fcfi.civa = civa.c_iva
       AND cle.habenviar = 1
       AND cle.sfactura = fcfi.sfactura
       AND cle.nptovta = fcfi.caea_ptovta
       AND ftccaea.tpcomprobante = fcfi.ctpcomprobante
       AND b.ccomprobante = fdtc.ccomprobante
       AND b.ctpcomprobante = fdtc.ctpcomprobante
       AND fcfi.cperfil_responsable = cprf.cperfil
       AND ftccaea.letra = fcfi.ctiplet
       AND fcfi.cconvta = CTCU.CTCTA
       AND fcfi.sfactura_padre = fac_asoc.sfactura(+)
       AND fac_asoc.ctpcomprobante = tcpfac_asoc.tpcomprobante(+)
       AND fac_asoc.ctiplet = tcpfac_asoc.letra(+)
       AND fcfi.CAEA_PTOVTA = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND fcfi.nfactura IS NOT NULL
UNION
--error expo
SELECT DISTINCT
       ECFC.SFACTURA,
       FTCCAEA.TPCBTE_CAEA TIPO_COMPROBANTE,
       suc.dsucursal,
       ECFC.CAEA_PTOVTA punto_venta,
       ECFC.NFACTURA NFACTURA,
       ECFC.FHEMISION FHEMISION,
       ECFC.CAEA_NRO CAEA_NRO,
       --FACDATOS
       '2' COD_CONCEPTO,
       ECFC.FVENCIMIENTO FVENCIMIENTO,
       --SUJETOCLIENTE
       CTDC.CTPDOCU COD_CAEA,
       (CASE WHEN ecfc.ctpdocu = 80 THEN ecfc.Ncuit ELSE ecfc.ndoc END) NCUIT,
       ECFC.DNOMYAP_RESPONSABLE DNOMYAP,
       ECFC.DDOMIC DDOMIC,
       CIVA.COD_CAEA COD_IVA_cliente,
       ECFC.CPOSTAL CPOSTAL,
       ECFC.DLOCA DLOCA,
       CPRV.COD_CAEA COD_PCIA,
       CCTEX.EMAIL EMAIL,
       CTCU.DTCTA COND_VTA,
       (CASE WHEN ECFC.IIVA > 0 THEN ECFC.INETO ELSE 0 END) IMPORTE_GRAVADO,
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 950
           THEN
              ECFC.INETO
           ELSE
              0
        END)
          IMPORTE_NO_GRAVADO,
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 957
           THEN
              ECFC.INETO
           ELSE
              0
        END)
          IMPORTE_EXENTO,
       ECFC.INETO IMPORTE_NETO,
       (ECFC.IIVA - ECFC.ILIBIVA) IMPORTE_IVA,
       (ECFC.IIB - ECFC.ILIBIB + ECFC.iivanoins) OTROS_TRIBUTOS,
       (  ECFC.INETO
        + ECFC.IIVA
        - ECFC.ILIBIVA
        + ECFC.IIB
        - ECFC.ILIBIB
        + ECFC.iivanoins)
          IMPORTE_TOTAL,
       'PES' COD_MONEDA,
       '1' COTIZA,
       --TRIBUTOS
       '2' COD_IIBB,
       'Per IB' DESCRIPCION_IIBB,
       ECFC.INETO BASE_IMPONIBLE_IIBB,
       /*(ECFC.PIB - ECFC.PLIBIB)*/
       ROUND (ECFC.pib - ECFC.pib * ECFC.plibib / 100, 2) ALICUOTA_IIBB,
       (ECFC.IIB - ECFC.ILIBIB) IIBB,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (ecfc.ineto + ecfc.iiva - ECFC.ILIBIVA) base_imponible_ivanoins,
       ecfc.pivanoins alicuota_ivanoins,
       ecfc.iivanoins ivanoins,
       --IVAS
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 950 THEN '1'
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 957 THEN '2'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 0 THEN '3'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 10.5 THEN '4'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 21 THEN '5'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 27 THEN '6'
        END)
          COD_IVA,
       ecfc.caea_estado caea_estado,
       fac_asoc.caea_ptovta ptovta_fac_asoc,
       tcpfac_asoc.tpcbte_caea Tipo_Comp_asoc,
       fac_asoc.nfactura nfac_asoc,
       ecfc.pdesde pdesde,
       ecfc.phasta phasta,
       NULL,
       NULL,
       b.ccomprobante,
       fdtc.dcomprobante,
       ECFC.cperfil_responsable,
       cprf.dperfil
  FROM ECFC,
       CCTEX,
       CPRV,
       CIVA,
       CTDC,
       ftccaea,
       CTCU,
       caea_lote_error cle,
       ecfc fac_asoc,
       ftccaea tcpfac_asoc,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc,
       edfc b,
       fac_detalles_tp_comprobantes fdtc,
       cli_perfiles cprf
 WHERE     ECFC.CTIPLET = FTCCAEA.LETRA
       AND ECFC.CTPCOMPROBANTE = FTCCAEA.TPCOMPROBANTE
       AND ECFC.CTPCOMPROBANTE IN ('NC', 'ND')
       AND ECFC.CTPDOCU = CTDC.CTPDOCU
       AND ECFC.CPAIS   = CPRV.CPAIS
       AND ECFC.CPROV  = CPRV.CPROV
       AND cctex.scli        = ECFC.SCLI_RESPONSABLE 
       and ecfc.cconvta    = cctex.ctcta
       AND ECFC.CIVA     = CIVA.C_IVA
       AND ECFC.CCONVTA = CTCU.CTCTA
       and ECFC.SFACTURA   = B.SFACTURA
       AND cle.habenviar = 1
       AND cle.sfactura = ECFC.sfactura
       AND cle.nptovta = ECFC.caea_ptovta
       AND ecfc.sfactura_asoc = fac_asoc.sfactura(+)
       AND fac_asoc.ctpcomprobante = tcpfac_asoc.tpcomprobante(+)
       AND fac_asoc.ctiplet = tcpfac_asoc.letra(+)
       AND ecfc.CAEA_PTOVTA = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND ecfc.nfactura IS NOT NULL
       AND b.ccomprobante = fdtc.ccomprobante
       AND b.ctpcomprobante = fdtc.ctpcomprobante
       AND ecfc.cperfil_responsable = cprf.cperfil
UNION
SELECT DISTINCT
       ECFC.SFACTURA,
       FTCCAEA.TPCBTE_CAEA TIPO_COMPROBANTE,
       suc.dsucursal,
       ECFC.CAEA_PTOVTA punto_venta,
       ECFC.NFACTURA NFACTURA,
       ECFC.FHEMISION FHEMISION,
       ECFC.CAEA_NRO CAEA_NRO,
       --FACDATOS
       '2' COD_CONCEPTO,
       ECFC.FVENCIMIENTO FVENCIMIENTO,
       --SUJETOCLIENTE
       CTDC.CTPDOCU COD_CAEA,
       (CASE WHEN ecfc.ctpdocu = 80 THEN ecfc.Ncuit ELSE ecfc.ndoc END) NCUIT,
       ECFC.DNOMYAP_RESPONSABLE DNOMYAP,
       ECFC.DDOMIC DDOMIC,
       CIVA.COD_CAEA COD_IVA_cliente,
       ECFC.CPOSTAL CPOSTAL,
       ECFC.DLOCA DLOCA,
       CPRV.COD_CAEA COD_PCIA,
       CCTEX.EMAIL EMAIL,
       CTCU.DTCTA COND_VTA,
       (CASE WHEN ECFC.IIVA > 0 THEN ECFC.INETO ELSE 0 END) IMPORTE_GRAVADO,
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 950
           THEN
              ECFC.INETO
           ELSE
              0
        END)
          IMPORTE_NO_GRAVADO,
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 957
           THEN
              ECFC.INETO
           ELSE
              0
        END)
          IMPORTE_EXENTO,
       ECFC.INETO IMPORTE_NETO,
       (ECFC.IIVA - ECFC.ILIBIVA) IMPORTE_IVA,
       (ECFC.IIB - ECFC.ILIBIB + ECFC.iivanoins) OTROS_TRIBUTOS,
       (  ECFC.INETO
        + ECFC.IIVA
        - ECFC.ILIBIVA
        + ECFC.IIB
        - ECFC.ILIBIB
        + ECFC.iivanoins)
          IMPORTE_TOTAL,
       'PES' COD_MONEDA,
       '1' COTIZA,
       --TRIBUTOS
       '2' COD_IIBB,
       'Per IB' DESCRIPCION_IIBB,
       ECFC.INETO BASE_IMPONIBLE_IIBB,
       /*(ECFC.PIB - ECFC.PLIBIB)*/
       ROUND (pib - pib * plibib / 100, 2) ALICUOTA_IIBB,
       (ECFC.IIB - ECFC.ILIBIB) IIBB,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (ecfc.ineto + ecfc.iiva - ECFC.ILIBIVA) base_imponible_ivanoins,
       ecfc.pivanoins alicuota_ivanoins,
       ecfc.iivanoins ivanoins,
       --IVAS
       (CASE
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 950 THEN '1'
           WHEN ECFC.IIVA = 0 AND ECFC.CPERFIL_RESPONSABLE = 957 THEN '2'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 0 THEN '3'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 10.5 THEN '4'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 21 THEN '5'
           WHEN ECFC.IIVA > 0 AND ECFC.PIVA = 27 THEN '6'
        END)
          COD_IVA,
       ecfc.caea_estado caea_estado,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
         b.ccomprobante,
       fdtc.dcomprobante,
       ECFC.cperfil_responsable,
       cprf.dperfil
  FROM ECFC,
           EDFC b,
       CCTEX,
       CPRV,
       CIVA,
       CTDC,
       ftccaea,
       CTCU,
       caea_lote_error cle,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc,
       fac_detalles_tp_comprobantes fdtc,
       cli_perfiles cprf
 WHERE  ecfc.sfactura = b.sfactura  
        and    suc.CEMPRESA = 2
       AND suc.CSUCURSAL = 346
       AND ECFC.CTIPLET = FTCCAEA.LETRA
       AND ECFC.CTPCOMPROBANTE = FTCCAEA.TPCOMPROBANTE
       AND ECFC.CTPCOMPROBANTE IN ('FA')
       AND ECFC.CTPDOCU = CTDC.CTPDOCU
       AND ECFC.CPAIS = CPRV.CPAIS
       AND ECFC.CPROV = CPRV.CPROV
       AND cctex.scli = ECFC.SCLI_RESPONSABLE 
       and ecfc.cconvta = cctex.ctcta
       AND ECFC.CIVA = CIVA.C_IVA
       AND ECFC.CCONVTA = CTCU.CTCTA
       AND cle.habenviar = 1
       AND cle.sfactura = ECFC.sfactura
       AND cle.nptovta = ECFC.caea_ptovta
       AND ecfc.CAEA_PTOVTA = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND ecfc.nfactura IS NOT NULL
UNION
--errores suc
SELECT DISTINCT
       UINV.ID,
       ftccaea.TPCBTE_CAEA TIPO_COMPROBANTE,
       suc.dsucursal,
       UINV.CAEA_PTOVTA punto_venta,
       UINV.FORNRO NFACTURA,
       UINV.FHGENERACION FHEMISION,
       UINV.CAEA_NRO CAEA_NRO,
       --FACDATOS
       '2' COD_CONCEPTO,
       UINV.FVTOFAC FVENCIMIENTO,
       --SUJETOCLIENTE
       TO_CHAR (UTDID.tipo_tca_eze) COD_CAEA,
       UPIXC.N_DOCUM NCUIT,
       UCLI.DNOMYAP DNOMYAP,
       UCLI.DIRECCION DDOMIC,
       CIVA.COD_CAEA COD_IVA_cliente,
       UCLI.CPOSTAL CPOSTAL,
       UCLI.LOCALIDAD DLOCA,
       UPCIA.COD_CAEA COD_PCIA,
       UCLI.E_MAIL EMAIL,
       LOWER (uclcxs.DCUENTA) COND_VTA,
       (CASE WHEN UINV.IIVA > 0 THEN UINV.INETO ELSE 0 END) IMPORTE_GRAVADO,
       (CASE WHEN UINV.IIVA = 0 THEN UINV.INETO ELSE 0 END)
          IMPORTE_NO_GRAVADO,
       0 IMPORTE_EXENTO,
       UINV.INETO IMPORTE_NETO,
       (UINV.IIVA - UINV.ILIBIVA) IMPORTE_IVA,
       (UINV.IIB - UINV.ILIBIB + uinv.iivanoins) OTROS_TRIBUTOS,
       (  UINV.INETO
        + UINV.IIVA
        - UINV.ILIBIVA
        + UINV.IIB
        - UINV.ILIBIB
        + uinv.iivanoins)
          IMPORTE_TOTAL,
       'PES' COD_MONEDA,
       '1' COTIZA,
       --TRIBUTOS
       '2' COD_IIBB,
       'Per IB' DESCRIPCION_IIBB,
       UINV.INETO BASE_IMPONIBLE_IIBB,
       /*  (UINV.PIB - UINV.PLIBIB)*/
       ROUND (uinv.pib - uinv.pib * uinv.plibib / 100, 2) ALICUOTA_IIBB,
       (UINV.IIB - UINV.ILIBIB) IIBB,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (UINV.INETO + UINV.IIVA - UINV.ILIBIVA) base_imponible_ivanoins,
       uinv.pivanoins alicuota_ivanoins,
       uinv.iivanoins ivanoins,
       --IVAS
       (CASE
           WHEN UINV.IIVA = 0 AND UINV.PIVA = 0        --UPFXCL.CPERFIL  = 950
                                               THEN '1'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 0 THEN '3'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 10.5 THEN '4'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 21 THEN '5'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 27 THEN '6'
        END)
          COD_IVA,
       uinv.caea_estado caea_estado,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL
  FROM sies.UINV uinv,
       sies.UTDID utdid,
       sies.UCLI ucli,
       sies.UTMP utmp,
       ftccaea ftccaea,
       sies.uclcxs uclcxs,
       sies.upixc,
       sies.UPCIA upcia,
       sie.cli_impuestos_iva ciiv,
       CIVA civa,
       caea_lote_error cle,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc
 WHERE     UINV.TCOMPROBANTE LIKE 'FA%'
       AND uinv.CESTADO <> 'ANUL'
       AND uinv.TCOMPROBANTE = utmp.TCOMPROBANTE
       AND utmp.TP_COMPROBANTE_CAEA = ftccaea.TPCOMPROBANTE
       AND uinv.LETRA = ftccaea.LETRA
       AND UINV.IDCLIENTE = UCLCXS.IDCLIENTE
       AND uinv.IDNN_SUCURSAL = uclcxs.IDNN_CSUCURSAL
       AND uinv.IDCUENTA = uclcxs.idcuenta
       AND uinv.IDCLIENTE = UCLI.IDCLIENTE
       AND uinv.idcliente = upixc.IDCLIENTE
       AND uinv.IDNN_SUCURSAL = upixc.IDDN_CSUCURSAL
       AND UTDID.TIPO = Upixc.ctpdocu
       AND UCLI.CPROVINCIA = UPCIA.CPROVINCIA
       AND UINV.CIVA = CIIV.C_IMP_IVA
       AND CIIV.C_IVA = CIVA.C_IVA
       AND cle.habenviar = 1
       AND cle.sfactura = uinv.id
       AND cle.nptovta = uinv.caea_ptovta
       AND UINV.CAEA_PTOVTA = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND uinv.fornro IS NOT NULL
UNION
SELECT DISTINCT
       UINV.ID,
       ftccaea.TPCBTE_CAEA TIPO_COMPROBANTE,
       suc.dsucursal,
       UINV.CAEA_PTOVTA punto_venta,
       UINV.FORNRO NFACTURA,
       UINV.FHGENERACION FHEMISION,
       UINV.CAEA_NRO CAEA_NRO,
       --FACDATOS
       '2' COD_CONCEPTO,
       UINV.FVTOFAC FVENCIMIENTO,
       --SUJETOCLIENTE
       TO_CHAR (UTDID.tipo_tca_eze) COD_CAEA,
       UPIXC.N_DOCUM NCUIT,
       UCLI.DNOMYAP DNOMYAP,
       UCLI.DIRECCION DDOMIC,
       CIVA.COD_CAEA COD_IVA_cliente,
       UCLI.CPOSTAL CPOSTAL,
       UCLI.LOCALIDAD DLOCA,
       UPCIA.COD_CAEA COD_PCIA,
       UCLI.E_MAIL EMAIL,
       LOWER (uclcxs.DCUENTA) COND_VTA,
       (CASE WHEN UINV.IIVA > 0 THEN UINV.INETO ELSE 0 END) IMPORTE_GRAVADO,
       (CASE WHEN UINV.IIVA = 0 THEN UINV.INETO ELSE 0 END)
          IMPORTE_NO_GRAVADO,
       0 IMPORTE_EXENTO,
       UINV.INETO IMPORTE_NETO,
       (UINV.IIVA - UINV.ILIBIVA) IMPORTE_IVA,
       (UINV.IIB - UINV.ILIBIB + uinv.iivanoins) OTROS_TRIBUTOS,
       (  UINV.INETO
        + UINV.IIVA
        - UINV.ILIBIVA
        + UINV.IIB
        - UINV.ILIBIB
        + uinv.iivanoins)
          IMPORTE_TOTAL,
       'PES' COD_MONEDA,
       '1' COTIZA,
       --TRIBUTOS
       '2' COD_IIBB,
       'Per IB' DESCRIPCION_IIBB,
       UINV.INETO BASE_IMPONIBLE_IIBB,
       /*  (UINV.PIB - UINV.PLIBIB)*/
       ROUND (uinv.pib - uinv.pib * uinv.plibib / 100, 2) ALICUOTA_IIBB,
       (UINV.IIB - UINV.ILIBIB) IIBB,
       '1' cod_ivanoins,
       'Per iva sujeto no categorizado' descripcion_ivanoins,
       (UINV.INETO + UINV.IIVA - UINV.ILIBIVA) base_imponible_ivanoins,
       uinv.pivanoins alicuota_ivanoins,
       uinv.iivanoins ivanoins,
       --IVAS
       (CASE
           WHEN UINV.IIVA = 0 AND UINV.PIVA = 0        --UPFXCL.CPERFIL  = 950
                                               THEN '1'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 0 THEN '3'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 10.5 THEN '4'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 21 THEN '5'
           WHEN UINV.IIVA > 0 AND UINV.PIVA = 27 THEN '6'
        END)
          COD_IVA,
       uinv.caea_estado caea_estado,
       fac_asoc.CAEA_PTOVTA punto_venta_asoc,
       ftc_fac_asoc.TPCBTE_CAEA Tipo_Comp_asoc,
       fac_asoc.FORNRO nfac_asoc,
       uinv.pdesde pdesde,
       uinv.phasta phasta,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL
  FROM sies.UINV uinv,
       sies.UTDID utdid,
       sies.UCLI ucli,
       sies.UTMP utmp,
       ftccaea ftccaea,
       sies.uclcxs uclcxs,
       sies.upixc,
       sies.UPCIA upcia,
       sie.cli_impuestos_iva ciiv,
       CIVA civa,
       caea_lote_error cle,
       sies.UINV fac_asoc,
       sies.UTMP tmpfac_asoc,
       ftccaea ftc_fac_asoc,
       sie.adm_sucursal suc,
       sie.caea_ptovta_x_suc pto_suc
 WHERE     UINV.TCOMPROBANTE LIKE 'NC%'
       AND uinv.CESTADO <> 'ANUL'
       AND uinv.TCOMPROBANTE = utmp.TCOMPROBANTE
       AND utmp.TP_COMPROBANTE_CAEA = ftccaea.TPCOMPROBANTE
       AND uinv.LETRA = ftccaea.LETRA
       AND UINV.IDCLIENTE = UCLCXS.IDCLIENTE
       AND uinv.IDNN_SUCURSAL = uclcxs.IDNN_CSUCURSAL
       AND uinv.IDCUENTA = uclcxs.idcuenta
       AND uinv.IDCLIENTE = UCLI.IDCLIENTE
       AND uinv.idcliente = upixc.IDCLIENTE
       AND uinv.IDNN_SUCURSAL = upixc.IDDN_CSUCURSAL
       AND UTDID.TIPO = Upixc.ctpdocu
       AND UCLI.CPROVINCIA = UPCIA.CPROVINCIA
       AND UINV.CIVA = CIIV.C_IMP_IVA
       AND CIIV.C_IVA = CIVA.C_IVA
       AND cle.habenviar = 1    
       AND cle.sfactura = uinv.id
       AND cle.nptovta = uinv.caea_ptovta
       AND uinv.sfactura_asoc = fac_asoc.id
       AND fac_asoc.TCOMPROBANTE = tmpfac_asoc.TCOMPROBANTE
       AND tmpfac_asoc.TP_COMPROBANTE_CAEA = ftc_fac_asoc.TPCOMPROBANTE
       AND fac_asoc.LETRA = ftc_fac_asoc.LETRA
       AND UINV.CAEA_PTOVTA = pto_suc.ptovta
       AND pto_suc.cempresa = suc.cempresa
       AND pto_suc.csucursal = suc.csucursal
       AND uinv.fornro IS NOT NULL;

  CREATE INDEX ""SIE"".""I_MV_FE_FAC_CAB_MIG"" ON ""SIE"".""MV_FE_FACTURA_CABECERA_MIG"" (""SFACTURA"", ""TIPO_COMPROBANTE"", ""PUNTO_VENTA"", ""NFACTURA"") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE ""SIE_DATA"" ;

   COMMENT ON MATERIALIZED VIEW ""SIE"".""MV_FE_FACTURA_CABECERA_MIG""  IS 'snapshot table for snapshot SIE.MV_FE_FACTURA_CABECERA_MIG';


  GRANT SELECT ON ""SIE"".""MV_FE_FACTURA_CABECERA_MIG"" TO ""CONSU"";
  GRANT SELECT ON ""SIE"".""MV_FE_FACTURA_CABECERA_MIG"" TO ""CONSU_SIE"";
  GRANT SELECT ON ""SIE"".""MV_FE_FACTURA_CABECERA_MIG"" TO ""SIE_ROLE"";
  GRANT SELECT ON ""SIE"".""MV_FE_FACTURA_CABECERA_MIG"" TO ""SIE_RN"";
"
FM8vmgYR,code IA,Tommythique,Lua,Tuesday 16th of May 2023 12:13:14 PM CDT,"-- constantes
NOM_JEU = ""Super Mario World (USA)""
NOM_SAVESTATE = ""debut.state""
NOM_FICHIER_POPULATION = ""gen idGen.pop"" -- idGen sera remplacé par le nb de gen
TAILLE_FORM_W = 380 
TAILLE_FORM_H = 385 

TAILLE_TILE = 16 -- taille d'une tile DANS LE JEU
TAILLE_VUE_W = TAILLE_TILE * 11 -- taille de ce que je vois le script
TAILLE_VUE_H = TAILLE_TILE * 9 
TAILLE_CAMERA_W = 256 -- du jeu
TAILLE_CAMERA_H = 224 
NB_TILE_W = TAILLE_VUE_W / TAILLE_TILE -- nombre de tiles scannée par le réseau de neurone en longueur (ça fait 16)
NB_TILE_H = TAILLE_VUE_H / TAILLE_TILE -- nombre de tiles scannée par le réseau de neurone en largeur  (ça fait 14)
NB_SPRITE_MAX = 11 -- dans SMW, il y a au maximum 12 sprites à l'écran en meme temps (en fait c'est 11+1 car 0 est un sprite), pour chaque type de sprite (à ne pas modifier)

TAILLE_INPUT = 6 -- en pixel, uniquement pour l'affichage
TAILLE_HIDDEN = 4 -- en pixel, uniquement pour l'affichage
TAILLE_OUTPUT_W = 24 -- en pixel, uniquement pour l'affichage
TAILLE_OUTPUT_H = 8 -- en pixel, uniquement pour l'affichage
ENCRAGE_X_INPUT = 20
ENCRAGE_Y_INPUT = 50
ENCRAGE_X_HIDDEN = 100
ENCRAGE_Y_HIDDEN = 50
ENCRAGE_X_OUTPUT = 190
ENCRAGE_Y_OUTPUT = 50
ESPACE_Y_OUTPUT = TAILLE_OUTPUT_H + 5 -- entre chaque output l'espace qu'il y a 
NB_HIDDEN_PAR_LIGNE = 10 -- nombre de neurone hidden par ligne (affichage uniquement)

FITNESS_LEVEL_FINI = 1000000 -- quand le level est fini, la fitness devient ça
NB_FRAME_RESET_BASE = 33 -- si pendant x frames la fitness n'augmente pas comparé à celle du début, on relance (le jeu tourne à 30 fps au cas où)
NB_FRAME_RESET_PROGRES = 300 -- si il a eu un progrés (diff de la fitness au lancement) on laisse le jeu tourner un peu + longtemps avant le reset
NB_NEURONE_MAX = 100000 -- pour le reseau de neurone, hors input et output
NB_INPUT = NB_TILE_W * NB_TILE_H -- nb de neurones input, c'est chaque case du jeu en fait
NB_OUTPUT = 8 -- nb de neurones output, c'est à dire les touches de la manette
NB_INDIVIDU_POPULATION = 100 -- nombre d'individus créés quand création d'une nouvelle population
-- constante pour trier les especes des populations
EXCES_COEF = 0.50
POIDSDIFF_COEF = 0.92
DIFF_LIMITE = 1.00
-- mutation 
CHANCE_MUTATION_RESET_CONNEXION = 0.25 -- % de chance que le poids de la connexion soit totalement reset
POIDS_CONNEXION_MUTATION_AJOUT = 0.80 -- poids ajouté à la mutation de la connexion si pas CHANCE_MUTATION_RESET_CONNEXION. La valeur peut être passée negative
CHANCE_MUTATION_POIDS = 0.95
CHANCE_MUTATION_CONNEXION = 0.85
CHANCE_MUTATION_NEURONE = 0.39


-- doit correspondre aux inputs de la manette dans l'emulateur
lesBoutons = {
	{nom = ""P1 A""},
	{nom = ""P1 B""},
	{nom = ""P1 X""},
	{nom = ""P1 Y""},
	{nom = ""P1 Up""},
	{nom = ""P1 Down""},
	{nom = ""P1 Left""},
	{nom = ""P1 Right""}
}
nbInnovation = 0 -- nombre d'innovation global pour les connexions, important pour le reseau de neurone
fitnessMax = 0 -- fitness max atteinte 
nbGeneration = 1 -- pour suivre on est à la cb de generation
idPopulation = 1 -- quel id de la population est en train de passer dans la boucle
marioBase = {} -- position de mario a la base ça va me servir pour voir si il avance de sa position d'origine / derniere pos enregistrée
niveauFini = false
lesAnciennesPopulation = {} -- stock les anciennes population
nbFrame = 0 -- nb de frame actuellement
nbFrameStop = 0 -- permettra de reset le jeu au besoin
fitnessInit = 0 -- fitness à laquelle le reseau actuel commence est init
niveauFiniSauvegarde = false
lesEspeces = {}
laPopulation = {}

-- créé une population
function newPopulation() 
	local population = {}
	for i = 1, NB_INDIVIDU_POPULATION, 1 do
		table.insert(population, newReseau())
	end
	return population
end


-- créé un neurone
function newNeurone()
	local neurone = {}
	neurone.valeur = 0
	neurone.id = 0 -- pas init si à 0, doit être == à l'indice du neurone dans lesNeurones du reseau
	neurone.type = """"
	return neurone
end

-- créé une connexion
function newConnexion()
	local connexion = {}
	connexion.entree = 0 
	connexion.sortie = 0
	connexion.actif = true
	connexion.poids = 0
	connexion.innovation = 0
	connexion.allume = false -- pour le dessin, si true ça veut dire que le resultat de la connexion est different de 0
	return connexion
end



-- créé un reseau de neurone 
function newReseau()
	local reseau = {nbNeurone = 0,  -- taille des neurones  rajouté par l'algo (hors input output du coup)
						fitness = 1, -- beaucoup de division, pour eviter de faire l irreparable
						idEspeceParent = 0,
						lesNeurones = {}, 
						lesConnexions = {}}
	for j = 1, NB_INPUT, 1 do 
		ajouterNeurone(reseau, j, ""input"", 1)
	end


	-- ensuite, les outputs
	for j = NB_INPUT + 1, NB_INPUT + NB_OUTPUT, 1 do
		ajouterNeurone(reseau, j, ""output"", 0)
	end


	return reseau
end


-- créé une espece (un regroupement de reseaux, d'individus)
function newEspece() 
	local espece = {nbEnfant = 0, -- combien d'enfant cette espece a créé 
					fitnessMoyenne = 0, -- fitness moyenne de l'espece
					fitnessMax = 0, -- fitness max atteinte par l'espece
					lesReseaux = {} }-- tableau qui regroupe les reseaux}


	return espece
end


-- copie un truc et renvoie le truc copié
-- j'ai copié ce code d'ici http://lua-users.org/wiki/CopyTable c vrai en +
function copier(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[copier(orig_key)] = copier(orig_value)
        end
        setmetatable(copy, copier(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end


-- ajoute une connexion a un reseau de neurone
function ajouterConnexion(unReseau, entree, sortie, poids)
	-- test pour voir si tout va bien et que les neurones de la connexion existent bien
	if unReseau.lesNeurones[entree].id == 0 then
		console.log(""connexion avec l'entree "" .. entree .. "" n'est pas init ?"")
	elseif unReseau.lesNeurones[sortie].id == 0 then
		console.log(""connexion avec la sortie "" .. sortie .. "" n'est pas init ?"")
	else
		local connexion = newConnexion()
		connexion.actif = true
		connexion.entree = entree
		connexion.sortie = sortie
		connexion.poids = genererPoids()
		connexion.innovation = nbInnovation
		table.insert(unReseau.lesConnexions, connexion)
		nbInnovation = nbInnovation + 1
	end
end




-- ajoute un neurone a un reseau de neurone, fait que pour les neurones qui doivent exister 
function ajouterNeurone(unReseau, id, type, valeur)
	if id ~= 0 then
		local neurone = newNeurone()
		neurone.id = id
		neurone.type = type
		neurone.valeur = valeur
		table.insert(unReseau.lesNeurones, neurone)
	else
		console.log(""ajouterNeurone doit pas etre utilise avec un id == 0"")
	end
end



-- modifie les connexions d'un reseau de neurone
function mutationPoidsConnexions(unReseau)
	for i = 1, #unReseau.lesConnexions, 1 do
		if unReseau.lesConnexions[i].actif then
			if math.random() < CHANCE_MUTATION_RESET_CONNEXION then
				unReseau.lesConnexions[i].poids = genererPoids()
			else
				if math.random() >= 0.5 then
					unReseau.lesConnexions[i].poids = unReseau.lesConnexions[i].poids - POIDS_CONNEXION_MUTATION_AJOUT
				else
					unReseau.lesConnexions[i].poids = unReseau.lesConnexions[i].poids + POIDS_CONNEXION_MUTATION_AJOUT
				end
			end
		end
	end
end

-- ajoute une connexion entre 2 neurones pas déjà connecté entre eux
-- ça peut ne pas marcher si aucun neurone n'est connectable entre eux (uniquement si beaucoup de connexion)
function mutationAjouterConnexion(unReseau)
	local liste = {}

	-- randomisation + copies des neuronnes dans une liste
	for i, v in ipairs(unReseau.lesNeurones) do
		local pos = math.random(1, #liste+1)
		table.insert(liste, pos, v)
	end

	-- la je vais lister tous les neurones et voir si une pair n'a pas de connexion; si une connexion peut être créée 
	-- on la créée et on stop
	local traitement = false
	for i = 1, #liste, 1 do
		for j = 1, #liste, 1 do
			if i ~= j then
				local neurone1 = liste[i]
				local neurone2 = liste[j]


				if (neurone1.type == ""input"" and neurone2.type == ""output"") or
					(neurone1.type == ""hidden"" and neurone2.type == ""hidden"") or
					(neurone1.type == ""hidden"" and neurone2.type == ""output"") then
					-- si on en est là, c'est que la connexion peut se faire, juste à tester si y pas deja une connexion
					local dejaConnexion = false
					for k = 1, #unReseau.lesConnexions, 1 do
						if unReseau.lesConnexions[k].entree == neurone1.id
							and unReseau.lesConnexions[k].sortie == neurone2.id then
							dejaConnexion = true
							break
						end
					end



					if dejaConnexion == false then
						-- nouvelle connexion, traitement terminé 
						traitement = true
						ajouterConnexion(unReseau, neurone1.id, neurone2.id)
					end
				end
			end
			if traitement then 
				break
			end
		end
		if traitement then 
			break
		end
	end


	if traitement == false then
		console.log(""impossible de recreer une connexion"")
	end
end


-- ajoute un neurone (couche caché uniquement) entre 2 neurones déjà connecté. Ne peut pas marcher
-- si il n'y a pas de connexion 
function mutationAjouterNeurone(unReseau)
	if #unReseau.lesConnexions == 0 then
		log(""Impossible d'ajouter un neurone entre 2 connexions si pas de connexion"")
		return nil
	end
	
	if unReseau.nbNeurone == NB_NEURONE_MAX then
		console.log(""Nombre de neurone max atteint"")
		return nil
	end

	-- randomisation de la liste des connexions
	local listeIndice = {}
	local listeRandom = {}

	-- je créé une liste d'entier de 1 à la taille des connexions
	for i = 1, #unReseau.lesConnexions, 1 do
		listeIndice[i] = i
	end

	-- je randomise la liste que je viens de créer dans listeRandom
	for i, v in ipairs(listeIndice) do
		local pos = math.random(1, #listeRandom+1)
		table.insert(listeRandom, pos, v)
	end

	for i = 1, #listeRandom, 1 do
		if unReseau.lesConnexions[listeRandom[i]].actif then
			unReseau.lesConnexions[listeRandom[i]].actif = false
			unReseau.nbNeurone = unReseau.nbNeurone + 1
			local indice = unReseau.nbNeurone + NB_INPUT + NB_OUTPUT 
			ajouterNeurone(unReseau, indice, ""hidden"", 1)
			ajouterConnexion(unReseau, unReseau.lesConnexions[listeRandom[i]].entree, indice, genererPoids())
			ajouterConnexion(unReseau, indice, unReseau.lesConnexions[listeRandom[i]].sortie, genererPoids())
			break
		end
	end
end


-- appelle une des mutations aléatoirement en fonction des constantes
function mutation(unReseau)
	local random = math.random()
	if random < CHANCE_MUTATION_POIDS then
		mutationPoidsConnexions(unReseau)
	end
	if random < CHANCE_MUTATION_CONNEXION then
		mutationAjouterConnexion(unReseau)
	end
	if random < CHANCE_MUTATION_NEURONE then
		mutationAjouterNeurone(unReseau)
	end
end


-- place la population et la renvoie divisée dans une tableau 2D
function trierPopulation(laPopulation)
	local lesEspeces = {}
	table.insert(lesEspeces, newEspece())
	
	-- la premiere espece créée et le dernier element de la premiere population
	-- comme ça, j'ai déjà une première espèce créée
	table.insert(lesEspeces[1].lesReseaux, copier(laPopulation[#laPopulation]))

	for i = 1, #laPopulation-1, 1 do
		local trouve = false
		for j = 1, #lesEspeces, 1 do
			local indice = math.random(1, #lesEspeces[j].lesReseaux)
			local rep = lesEspeces[j].lesReseaux[indice]
			-- il peut être classé 
			if getScore(laPopulation[i], rep) < DIFF_LIMITE then
				table.insert(lesEspeces[j].lesReseaux, copier(laPopulation[i]))
				trouve = true
				break
			end
		end

		-- si pas trouvé, il faut créer une especes pour l'individu
		if trouve == false then
			table.insert(lesEspeces, newEspece())
			table.insert(lesEspeces[#lesEspeces].lesReseaux, copier(laPopulation[i]))
		end
	end

	return lesEspeces
end


-- retourne la difference de poids de 2 réseaux de neurones (uniquement des memes innovations)
function getDiffPoids(unReseau1, unReseau2)
	local nbConnexion = 0
	local total = 0
	for i = 1, #unReseau1.lesConnexions, 1 do
		for j = 1, #unReseau2.lesConnexions, 1 do
			if unReseau1.lesConnexions[i].innovation == unReseau2.lesConnexions[j].innovation then
				nbConnexion = nbConnexion + 1
				total = total + math.abs(unReseau1.lesConnexions[i].poids - unReseau2.lesConnexions[j].poids)
			end
		end
	end
	
	-- si aucune connexion en commun c'est qu'ils sont trop differents
	-- puis si on laisse comme ça on va diviser par 0 et on va lancer mario maker
	if nbConnexion == 0 then
		return 100000
	end


	return total / nbConnexion
end




-- retourne le nombre de connexion qui n'ont aucun rapport entre les 2 reseaux
function getDisjoint(unReseau1, unReseau2)
	local nbPareil = 0
	for i = 1, #unReseau1.lesConnexions, 1 do
		for j = 1, #unReseau2.lesConnexions, 1 do
			if unReseau1.lesConnexions[i].innovation == unReseau2.lesConnexions[j].innovation then
				nbPareil = nbPareil + 1
			end
		end
	end

	-- oui ça marche
	return #unReseau1.lesConnexions + #unReseau2.lesConnexions - 2 * nbPareil
end



-- permet d'obtenir le score d'un reseau de neurone, ce qui va le mettre dans une especes
-- rien à voir avec le fitness 
-- unReseauRep et un reseau appartenant deja a une espece 
-- et reseauTest et le reseau qui va etre testé
function getScore(unReseauTest, unReseauRep)
	return (EXCES_COEF * getDisjoint(unReseauTest, unReseauRep)) / 
		(math.max(#unReseauTest.lesConnexions + #unReseauRep.lesConnexions, 1))
		+ POIDSDIFF_COEF * getDiffPoids(unReseauTest, unReseauRep)
end

-- genere un poids aléatoire (pour les connexions) egal à 1 ou -1
function genererPoids()
	local var = 1
	if math.random() >= 0.5 then
		var = var * -1
	end
	return var
end


-- fonction d'activation
function sigmoid(x)
	local resultat = x / (1 + math.abs(x))
	if resultat >= 0.5 then
		return true
	end
	return false
end


-- applique les connexions d'un réseau de neurone en modifiant la valeur des neurones de sortie
function feedForward(unReseau)
	-- avant de continuer, je reset à 0 les neurones de sortie
	for i = 1, #unReseau.lesConnexions, 1 do
		if unReseau.lesConnexions[i].actif then
			unReseau.lesNeurones[unReseau.lesConnexions[i].sortie].valeur = 0
			unReseau.lesNeurones[unReseau.lesConnexions[i].sortie].allume = false
		end
	end


	for i = 1, #unReseau.lesConnexions, 1 do
		if unReseau.lesConnexions[i].actif then
			local avantTraitement = unReseau.lesNeurones[unReseau.lesConnexions[i].sortie].valeur
			unReseau.lesNeurones[unReseau.lesConnexions[i].sortie].valeur = 
							unReseau.lesNeurones[unReseau.lesConnexions[i].entree].valeur * 
							unReseau.lesConnexions[i].poids + 
							unReseau.lesNeurones[unReseau.lesConnexions[i].sortie].valeur
			
			-- on """"allume"""" le lien si la connexion a fait une modif
			if avantTraitement ~= unReseau.lesNeurones[unReseau.lesConnexions[i].sortie].valeur then
				unReseau.lesConnexions[i].allume = true
			else 
				unReseau.lesConnexions[i].allume = false
			end
		end
	end
end




-- retourne un melange des 2 reseaux de neurones
function crossover(unReseau1, unReseau2)
	local leReseau = newReseau()


	-- quel est le meilleur des deux ?
	local leBon = newReseau()
	local leNul = newReseau()


	leBon = unReseau1
	leNul = unReseau2
	if leBon.fitness < leNul.fitness then
		leBon = unReseau2
		leNul = unReseau1
	end

	-- le nouveau reseau va hériter de la majorité des attributs du meilleur
	leReseau = copier(leBon)
	
	-- sauf pour les connexions où y a une chance que le nul lui donne ses genes
	for i = 1, #leReseau.lesConnexions, 1 do
		for j = 1, #leNul.lesConnexions, 1 do
			-- si 2 connexions partagent la meme innovation, la connexion du nul peut venir la remplacer 
			-- *seulement si nul est actif, sans ça ça créé des neurones hiddens inutiles*
			if leReseau.lesConnexions[i].innovation == leNul.lesConnexions[j].innovation and leNul.lesConnexions[j].actif then
				if math.random() > 0.5 then
					leReseau.lesConnexions[i] = leNul.lesConnexions[j]
				end
			end
		end
	end
	leReseau.fitness = 1
	return leReseau
end


-- renvoie une copie d'un parent choisis dans une espece
function choisirParent(uneEspece)
	if #uneEspece == 0 then
		console.log(""uneEspece vide dans choisir parent ??"")
	end
	-- il est possible que l'espece ne contienne qu'un seul reseau, dans ce cas là on va pas plus loin
	if #uneEspece == 1 then
		return uneEspece[1]
	end

	local fitnessTotal = 0
	for i = 1, #uneEspece, 1 do
		fitnessTotal = fitnessTotal + uneEspece[i].fitness
	end
	local limite = math.random(0, fitnessTotal)
	local total = 0
	for i = 1, #uneEspece, 1 do
		total = total + uneEspece[i].fitness
		-- si la somme des fitness cumulés depasse total, on renvoie l'espece qui a fait depasser la limite
		if total >= limite then
			return copier(uneEspece[i])
		end
	end
	console.log(""impossible de trouver un parent ?"")
	return nil
end


-- créé une nouvelle generation, renvoie la population créée
-- il faut que les especes soit triée avant appel
function nouvelleGeneration(laPopulation, lesEspeces)
	local laNouvellePopulation = newPopulation()
	-- nombre d'indivu à creer au total
	local nbIndividuACreer = NB_INDIVIDU_POPULATION
	 -- indice qui va servir à savoir OU en est le tab de la nouvelle espece
	local indiceNouvelleEspece = 1

	-- il est possible² que l'ancien meilleur ait un meilleur fitness
	-- que celui de la nouvelle population (une mauvaise mutation ça arrive très souvent)
	-- dans ce cas je le supprime par l'ancien meilleur histoire d'être SUR d'avoir des enfants
	-- toujours du plus bon
	local fitnessMaxPop = 0
	local fitnessMaxAncPop = 0
	local ancienPlusFort = {}
	for i = 1, #laPopulation, 1 do
		if fitnessMaxPop < laPopulation[i].fitness then
			fitnessMaxPop = laPopulation[i].fitness
		end
	end
	-- on test que si il y a deja une ancienne population evidamment
	if #lesAnciennesPopulation > 0 then
		-- je vais checker TOUTES les anciennes population pour la fitness la plus élevée
		-- vu que les reseaux vont REmuter, il est possible qu'ils fassent moins bon !
		for i = 1, #lesAnciennesPopulation, 1 do
			for j = 1, #lesAnciennesPopulation[i], 1 do
				if fitnessMaxAncPop < lesAnciennesPopulation[i][j].fitness then
					fitnessMaxAncPop = lesAnciennesPopulation[i][j].fitness
					ancienPlusFort = lesAnciennesPopulation[i][j]
				end
			end
		end
	end

	if fitnessMaxAncPop > fitnessMaxPop then
		-- comme ça je suis sur uqe le meilleur dominera totalement
		for i = 1, #lesEspeces, 1 do
			for j = 1, #lesEspeces[i].lesReseaux, 1 do
				lesEspeces[i].lesReseaux[j] = copier(ancienPlusFort)
			end
		end
		console.log(""mauvaise population je reprends la meilleur et ça redevient la base de la nouvelle pop"")
		console.log(ancienPlusFort)
	end

	table.insert(lesAnciennesPopulation, laPopulation)

	-- calcul fitness pour chaque espece
	local nbIndividuTotal = 0
	local fitnessMoyenneGlobal = 0 -- fitness moyenne de TOUS les individus de toutes les especes
	local leMeilleur = newReseau() -- je dois le remettre avant tout, on va essayer de trouver ou i lest
	for i = 1, #lesEspeces, 1 do
		lesEspeces[i].fitnessMoyenne = 0
		lesEspeces[i].lesReseaux.fitnessMax = 0
		for j = 1, #lesEspeces[i].lesReseaux, 1 do
			lesEspeces[i].fitnessMoyenne = lesEspeces[i].fitnessMoyenne + lesEspeces[i].lesReseaux[j].fitness
			fitnessMoyenneGlobal = fitnessMoyenneGlobal + lesEspeces[i].lesReseaux[j].fitness
			nbIndividuTotal = nbIndividuTotal + 1

			if lesEspeces[i].fitnessMax < lesEspeces[i].lesReseaux[j].fitness then
				lesEspeces[i].fitnessMax = lesEspeces[i].lesReseaux[j].fitness
				if leMeilleur.fitness < lesEspeces[i].lesReseaux[j].fitness then
					leMeilleur = copier(lesEspeces[i].lesReseaux[j])
				end
			end
		end
		lesEspeces[i].fitnessMoyenne = lesEspeces[i].fitnessMoyenne / #lesEspeces[i].lesReseaux
	end

	-- si le level a été terminé au moins une fois, tous les individus deviennent le meilleur, on ne recherche plus de mutation là
	if leMeilleur.fitness == FITNESS_LEVEL_FINI then
		for i = 1, #lesEspeces, 1 do
			for j = 1, #lesEspeces[i].lesReseaux, 1 do
				lesEspeces[i].lesReseaux[j] = copier(leMeilleur)
			end
		end
		fitnessMoyenneGlobal = leMeilleur.fitness
	else
		fitnessMoyenneGlobal = fitnessMoyenneGlobal / nbIndividuTotal
	end

	--tri des especes pour que les meilleurs place leurs enfants avant tout
	table.sort(lesEspeces, function (e1, e2) return e1.fitnessMax > e2.fitnessMax end )

	-- chaque espece va créer un certain nombre d'individu dans la nouvelle population en fonction de si l'espece a un bon fitness ou pas
	for i = 1, #lesEspeces, 1 do
		local nbIndividuEspece = math.ceil(#lesEspeces[i].lesReseaux * lesEspeces[i].fitnessMoyenne / fitnessMoyenneGlobal)
		nbIndividuACreer = nbIndividuACreer - nbIndividuEspece
		if nbIndividuACreer < 0 then
			nbIndividuEspece = nbIndividuEspece + nbIndividuACreer
			nbIndividuACreer = 0
		end
		lesEspeces[i].nbEnfant = nbIndividuEspece


		for j = 1, nbIndividuEspece, 1 do
			if indiceNouvelleEspece > NB_INDIVIDU_POPULATION then
				break
			end

			local unReseau = crossover(choisirParent(lesEspeces[i].lesReseaux), choisirParent(lesEspeces[i].lesReseaux))
			
			-- on stop la mutation à ce stade
			if fitnessMoyenneGlobal ~= FITNESS_LEVEL_FINI then
				mutation(unReseau)
			end

			unReseau.idEspeceParent = i
			laNouvellePopulation[indiceNouvelleEspece] = copier(unReseau)
			laNouvellePopulation[indiceNouvelleEspece].fitness = 1
			indiceNouvelleEspece = indiceNouvelleEspece + 1
		end
		if indiceNouvelleEspece > NB_INDIVIDU_POPULATION then
			break
		end
	end
	
	-- si une espece n'a pas fait d'enfant, je la delete
	for i = 1, #lesEspeces, 1 do
		if lesEspeces[i].nbEnfant == 0 then
			lesEspeces[i] = nil
		end
	end

	return laNouvellePopulation
end


function getNomFichierSauvegarde()
	local str = NOM_FICHIER_POPULATION 
	str = string.gsub(str, ""idGen"", nbGeneration)
	return str
end

-- sauvegarde la population actuelle dans le fichier getNomFichierSauvegarde()
-- le dernier argument est reservé si le script detect que la population a terminée le niveau
function sauvegarderPopulation(laPopulation, estFini)
	chemin = getNomFichierSauvegarde()
	if estFini then
		chemin = ""FINI "" .. chemin
	end

	local fichier = io.open(chemin, ""w+"")
	io.output(fichier)

	-- sauvegarde classique de la population
	io.write(nbGeneration .. ""\n"")
	io.write(nbInnovation .. ""\n"")
	for i = 1, #laPopulation, 1 do
		sauvegarderUnReseau(laPopulation[i], fichier)
	end

	-- et là je sauvegarde le plus fort, c'est important pour pas perdre les progrés
	local lePlusFort = newReseau()
	for i = 1, #laPopulation, 1 do
		if lePlusFort.fitness < laPopulation[i].fitness then
			lePlusFort = copier(laPopulation[i])
		end
	end
	-- check aussi dans l'ancienne population (si plus fort, il ne peut etre que là)
	if #lesAnciennesPopulation > 0 then
		for i = 1, #lesAnciennesPopulation, 1 do
			for j = 1, #lesAnciennesPopulation[i], 1 do
				if lePlusFort.fitness < lesAnciennesPopulation[i][j].fitness then
					lePlusFort = copier(lesAnciennesPopulation[i][j])
				end
			end
		end
	end
	sauvegarderUnReseau(lePlusFort, fichier)
	io.close(fichier)

	console.log(""sauvegarde terminee au fichier "" .. chemin)
end

-- charge la population sauvegardé
-- renvoie la nouvelle population ou nil si le chemin n'est pas celui d'un fichier pop
function chargerPopulation(chemin)
	-- petit test pour voir si le fichier est ok
	local test = string.find(chemin, "".pop"")
	local laPopulation = nil
	if test == nil then
		console.log(""le fichier "" .. chemin .. "" n'est pas du bon format (.pop) je vais te monter en l'air "")
	else 
		laPopulation = {}
		local fichier = io.open(chemin, ""r"")
	
		io.input(fichier)

		local totalNeurone = 0
		local totalConnexion = 0

		nbGeneration = io.read(""*number"") 
		nbInnovation = io.read(""*number"")
		for i = 1, NB_INDIVIDU_POPULATION, 1 do
			table.insert(laPopulation, chargerUnReseau(fichier))
			laPopulation[i].fitness = 1
		end
	
		lesAnciennesPopulation = {} -- obligé !
		-- en mettant le plus fort ici, i lsera forcement lu dans nouvelleGeneration
		table.insert(lesAnciennesPopulation, copier(laPopulation))
		lesAnciennesPopulation[1][1] = chargerUnReseau(fichier)

		console.log(""plus fort charge"")
		console.log(lesAnciennesPopulation[1][1])
		-- si le plus fort a fini le niveau, tous les individus de la population deviennent le plus fort
		if lesAnciennesPopulation[1][1].fitness == FITNESS_LEVEL_FINI then
			for i = 1, NB_INDIVIDU_POPULATION, 1 do
				laPopulation[i] = copier(lesAnciennesPopulation[1][1])
			end
		end
		io.close(fichier)
		console.log(""chargement termine de "" .. chemin)
	end

	return laPopulation
end

-- sauvegarde un seul reseau
function sauvegarderUnReseau(unReseau, fichier)
	io.write(unReseau.nbNeurone .. ""\n"")
	io.write(#unReseau.lesConnexions .. ""\n"")
	io.write(unReseau.fitness .. ""\n"")
	for i = 1, unReseau.nbNeurone, 1 do
		local indice = NB_INPUT + NB_OUTPUT + i
		-- pas besoin d'écrire le type, je ne sauvegarde que les hiddens
		-- *non plus la valeur, car c'est reset toutes les frames en fait
		io.write(unReseau.lesNeurones[indice].id .. ""\n"")
	end
	for i = 1, #unReseau.lesConnexions, 1 do
		-- obligé car actif est un bool
		local actif = 1 
		if unReseau.lesConnexions[i].actif ~= true then
			actif = 0
		end
		io.write(actif .. ""\n"" .. 
			unReseau.lesConnexions[i].entree .. ""\n"" ..
			unReseau.lesConnexions[i].sortie .. ""\n"" .. 
			unReseau.lesConnexions[i].poids .. ""\n"" .. 
			unReseau.lesConnexions[i].innovation .. ""\n"")
	end
end


-- charge un seul reseau
function chargerUnReseau(fichier)
	local unReseau = newReseau()
	local nbNeurone = io.read(""*number"")
	local nbConnexion = io.read(""*number"")
	unReseau.fitness = io.read(""*number"")
	unReseau.nbNeurone = nbNeurone
	unReseau.lesConnexions = {}
	for i = 1, nbNeurone, 1 do
		local neurone = newNeurone()
		neurone.id = io.read(""*number"")
		neurone.valeur = 0
		neurone.type = ""hidden""
		
		table.insert(unReseau.lesNeurones, neurone)
	end
		
	for i = 1, nbConnexion, 1 do
		local connexion = newConnexion()

		local actif = io.read(""*number"")
		connexion.entree = io.read(""*number"")
		connexion.sortie = io.read(""*number"")
		connexion.poids = io.read(""*number"")
		connexion.innovation = io.read(""*number"")

		if actif == 1 then
			connexion.actif = true
		else
			connexion.actif = false
		end
			
		table.insert(unReseau.lesConnexions, connexion)
	end

	return unReseau
end


-- mets à jour un réseau de neurone avec ce qu'il y a a l'écran. A appeler à chaque frame quand on en test un reseau
function majReseau(unReseau, marioBase)
	local mario = getPositionMario()
	

	-- niveau fini ?
	if not niveauFini and memory.readbyte(0x0100) == 12 then
		unReseau.fitness = FITNESS_LEVEL_FINI -- comme ça l'espece de cette population va dominer les autres
		niveauFini = true
	-- sinon augmentation de la fitness classique (quand mario va à gauche)
	elseif marioBase.x < mario.x then
		unReseau.fitness = unReseau.fitness + (mario.x - marioBase.x)
		marioBase.x = mario.x
	end

	-- mise à jour des inputs
	lesInputs = getLesInputs()
	for i = 1, NB_INPUT, 1 do
		unReseau.lesNeurones[i].valeur = lesInputs[i]
	end
end


-- renvoie l'indice du tableau lesInputs avec les coordonnées x y, peut être utilisé aussi pour acceder aux inputs du réseau de neurone
function getIndiceLesInputs(x, y)
	return x + ((y-1) * NB_TILE_W)
end


-- renvoie les inputs, sont créées en fonction d'où est mario
function getLesInputs()
	local lesInputs = {}
	for i = 1, NB_TILE_W, 1 do
		for j = 1, NB_TILE_H, 1 do
			lesInputs[getIndiceLesInputs(i, j)] = 0
		end
	end
	
	local lesSprites = getLesSprites()
	for i = 1, #lesSprites, 1 do
		local input = convertirPositionPourInput(getLesSprites()[i])
		if input.x > 0 and input.x < (TAILLE_VUE_W / TAILLE_TILE) + 1  then
			lesInputs[getIndiceLesInputs(input.x, input.y)] = -1
		end
	end

	

	local lesTiles = getLesTiles()
	for i = 1, NB_TILE_W, 1 do
		for j = 1, NB_TILE_H, 1 do
			local indice = getIndiceLesInputs(i, j)
			if lesTiles[indice] ~= 0 then
				lesInputs[indice] = lesTiles[indice]
			end
		end
	end


	return lesInputs
end



-- retourne une liste de taille 10 max de la position (x, y) des sprites à l'écran. (sprite = mechant truc)
function getLesSprites()
	local lesSprites = {}
	local j = 1
	for i = 0, NB_SPRITE_MAX, 1 do
		-- si 14C8+i est > 7 il est dans un etat considéré vivant, et si 0x167A == 0 c'est qu'il fait des dégats à Mario
		if memory.readbyte(0x14C8+i) > 7 then  
			-- le sprite existe 
			lesSprites[j] = {x = memory.readbyte(0xE4+i) + memory.readbyte(0x14E0+i) * 256, 
							 y = math.floor(memory.readbyte(0xD8+i) + memory.readbyte(0x14D4+i) * 256)}
			j = j + 1
		end
	end
	

	-- ça c'est les extended sprites, c'est d'autres truc du jeu en gros
	for i = 0, NB_SPRITE_MAX, 1 do
		if memory.readbyte(0x170B+i) ~= 0 then
			lesSprites[j] = {x = memory.readbyte(0x171F+i) + memory.readbyte(0x1733+i) * 256, 
							 y = math.floor(memory.readbyte(0x1715+i) + memory.readbyte(0x1729+i) * 256)}
			j = j + 1
		end
	end

	return lesSprites
end




-- renvoie une table qui a la meme taille que lesInputs. On y accède de la meme façon
function getLesTiles()
	local lesTiles = {}
	local j = 1


	-- les tiles vont etre affiché autour de mario
	mario = getPositionMario()
	mario.x = mario.x - TAILLE_VUE_W / 2
	mario.y = mario.y - TAILLE_VUE_H / 2

	for i = 1, NB_TILE_W, 1 do
		for j = 1, NB_TILE_H, 1 do
			 
			
			local xT = math.ceil((mario.x + ((i - 1) * TAILLE_TILE)) / TAILLE_TILE) 
			local yT = math.ceil((mario.y + ((j - 1) * TAILLE_TILE)) / TAILLE_TILE)

			if xT > 0 and yT > 0 then 
				-- plus d'info ici pour l'adresse memoire des blocs https://www.smwcentral.net/?p=section&a=details&id=21702
				lesTiles[getIndiceLesInputs(i, j)] = memory.readbyte(
					0x1C800 + 
					math.floor(xT / TAILLE_TILE) * 
					0x1B0 + 
					yT * TAILLE_TILE + 
					xT % TAILLE_TILE)
			else
				lesTiles[getIndiceLesInputs(i, j)] = 0
			end
		end
	end
	
	return lesTiles
end




-- retourne la position de mario (x, y)
function getPositionMario()
	local mario = {} 
	mario.x = memory.read_s16_le(0x94) 
	mario.y = memory.read_s16_le(0x96)
	return mario
end




-- retourne la position de la camera (x, y)
function getPositionCamera()
	local camera = {} 
	camera.x = memory.read_s16_le(0x1462) 
	camera.y = memory.read_s16_le(0x1464)
	
	return camera
end



-- permet de convertir une position pour avoir les arguments x et y du tableau lesInputs
function convertirPositionPourInput(position)
	local mario = getPositionMario()
	local positionT = {}
	mario.x = mario.x - TAILLE_VUE_W / 2
	mario.y = mario.y - TAILLE_VUE_H / 2

	positionT.x = math.floor((position.x - mario.x) / TAILLE_TILE) + 1
	positionT.y = math.floor((position.y - mario.y) / TAILLE_TILE) + 1

	return positionT
end


-- applique les boutons aux joypad de l'emulateur avec un reseau de neurone
function appliquerLesBoutons(unReseau)
	local lesBoutonsT = {}
	for i = 1, NB_OUTPUT, 1 do
		lesBoutonsT[lesBoutons[i].nom] = sigmoid(unReseau.lesNeurones[NB_INPUT + i].valeur)
	end

	-- c'est pour que droit est la prio sur la gauche
	if lesBoutonsT[""P1 Left""] and lesBoutonsT[""P1 Right""] then
		lesBoutonsT[""P1 Left""] = false
	end
	joypad.set(lesBoutonsT)
end


function traitementPause()
	local lesBoutons = joypad.get(1)
	if lesBoutons[""P1 Start""] then
		lesBoutons[""P1 Start""] = false
	else
		lesBoutons[""P1 Start""] = true
	end
	joypad.set(lesBoutons)
end



-- dessine les informations actuelles
function dessinerLesInfos(laPopulation, lesEspeces, nbGeneration)
	gui.drawBox(0, 0, 256, 40, ""black"", ""white"")

	gui.drawText(0, 4, ""Generation "" .. nbGeneration .. "" Ind:"" .. idPopulation .. "" nb espece "" .. 
							#lesEspeces .. ""\nFitness:"" .. 
							laPopulation[idPopulation].fitness .. "" (max = "" .. fitnessMax .. "")"", ""black"")
end




function dessinerUnReseau(unReseau)
	-- je commence par les inputs
	local lesInputs = getLesInputs()
	local camera = getPositionCamera()
	local lesPositions = {} -- va retenir toutes les positions des neurones affichées, ça sera plus facile pour les connexions
	
	for i = 1, NB_TILE_W, 1 do
		for j = 1, NB_TILE_H, 1 do
			local indice = getIndiceLesInputs(i, j)

			-- le i - 1 et j - 1 c'est juste pour afficher les cases à la position x, y quand ils sont == 0
			local xT = ENCRAGE_X_INPUT + (i - 1) * TAILLE_INPUT
			local yT = ENCRAGE_Y_INPUT + (j - 1) * TAILLE_INPUT
			
			
			local couleurFond = ""gray""
			if unReseau.lesNeurones[indice].valeur < 0 then
				couleurFond = ""black""
			elseif unReseau.lesNeurones[indice].valeur > 0 then
				couleurFond = ""white""
			end
			
			gui.drawRectangle(xT, yT, TAILLE_INPUT, TAILLE_INPUT, ""black"", couleurFond)

			lesPositions[indice] = {}
			lesPositions[indice].x = xT + TAILLE_INPUT / 2
			lesPositions[indice].y = yT + TAILLE_INPUT / 2
		end
	end



	-- affichage du MARIO sur la grille, MARIO N'EST PAS UNE INPUT OUI C'EST POUR FAIRE JOLIE
	local mario = convertirPositionPourInput(getPositionMario())

	-- je respecte la meme regle qu'au dessus
	mario.x = (mario.x - 1) * TAILLE_INPUT + ENCRAGE_X_INPUT
	mario.y = (mario.y - 1) * TAILLE_INPUT + ENCRAGE_Y_INPUT
	-- mario est 2 fois plus grand que les autres sprites, car sa position est celle qu'il a quand il est grand
	gui.drawRectangle(mario.x, mario.y, TAILLE_INPUT, TAILLE_INPUT * 2, ""black"", ""blue"")

	for i = 1, NB_OUTPUT, 1 do
		local xT = ENCRAGE_X_OUTPUT
		local yT = ENCRAGE_Y_OUTPUT + ESPACE_Y_OUTPUT * (i - 1)
		local nomT = string.sub(lesBoutons[i].nom, 4)
		local indice = i + NB_INPUT

		if sigmoid(unReseau.lesNeurones[indice].valeur) then
			gui.drawRectangle(xT, yT, TAILLE_OUTPUT_W, TAILLE_OUTPUT_H, ""white"", ""white"")
		else
			gui.drawRectangle(xT, yT, TAILLE_OUTPUT_W, TAILLE_OUTPUT_H, ""white"", ""black"")
		end
		
		xT = xT + TAILLE_OUTPUT_W
		local strValeur = string.format(""%.2f"", unReseau.lesNeurones[indice].valeur)
		--c'est pour afficher la valeur de l'input stv
		gui.drawText(xT, yT-1, nomT -- .. ""("" .. strValeur .. "")"" -- 
						, ""white"", ""black"", 10)
		lesPositions[indice] = {}
		lesPositions[indice].x = xT - TAILLE_OUTPUT_W / 2
		lesPositions[indice].y = yT + TAILLE_OUTPUT_H / 2
	end

	for i = 1, unReseau.nbNeurone, 1 do
		local xT = ENCRAGE_X_HIDDEN + (TAILLE_HIDDEN + 1) * (i - (NB_HIDDEN_PAR_LIGNE * math.floor((i-1) / NB_HIDDEN_PAR_LIGNE)))
		local yT = ENCRAGE_Y_HIDDEN + (TAILLE_HIDDEN + 1) * (math.floor((i-1) / NB_HIDDEN_PAR_LIGNE))
		-- tous les 10 j'affiche le restant des neuroens en dessous

		local indice = i + NB_INPUT + NB_OUTPUT
		gui.drawRectangle(xT, yT, TAILLE_HIDDEN, TAILLE_HIDDEN, ""black"", ""white"")

		lesPositions[indice] = {}
		lesPositions[indice].x = xT + TAILLE_HIDDEN / 2
		lesPositions[indice].y = yT + TAILLE_HIDDEN / 2
	




	-- affichage des connexions 
	for i = 1, #unReseau.lesConnexions, 1 do
		if unReseau.lesConnexions[i].actif then
			local pixel = 0
			local alpha = 255
			local couleur
			if unReseau.lesConnexions[i].poids > 0 then
				pixel = 255
			end

			if not unReseau.lesConnexions[i].allume then
				alpha = 25
			end

			couleur = forms.createcolor(pixel, pixel, pixel, alpha)

			gui.drawLine(lesPositions[unReseau.lesConnexions[i].entree].x, 
						  lesPositions[unReseau.lesConnexions[i].entree].y, 
						  lesPositions[unReseau.lesConnexions[i].sortie].x, 
						  lesPositions[unReseau.lesConnexions[i].sortie].y, 
						  couleur)
		end
	end
end




event.onexit(function()
	console.log(""Fin du script"")
	gui.clearGraphics()
	forms.destroy(form)
end)

-- pas le choix de passer comme ça pour activer la sauvegarde
function activerSauvegarde()
	sauvegarderPopulation(laPopulation, false)
end


function activerChargement()
	chemin = forms.openfile()

	if chemin ~= """" then 
		local laPopulationT = chargerPopulation(chemin)
		if laPopulationT ~= nil then
			laPopulation = {}
			laPopulation = copier(laPopulationT)
			idPopulation = 1
			lancerNiveau()
		end
	end
end


function lancerNiveau()
	savestate.load(NOM_SAVESTATE)
	marioBase = getPositionMario()
	niveauFini = false
	nbFrameStop = 0
end

console.clear()
-- petit check pour voir si c'est bien la bonne rom
if gameinfo.getromname() ~= NOM_JEU then
	console.log(""mauvaise rom (actuellement "" .. gameinfo.getromname() .. ""), marche uniquement avec "" .. nomJeu)
else
	console.log(""lancement du script"")
	math.randomseed(os.time())
	
	lancerNiveau()

	form = forms.newform(TAILLE_FORM_W, TAILLE_FORM_H, ""Informations"")
	labelInfo = forms.label(form, ""a maj"", 0, 0, 350, 220)
	estAccelere = forms.checkbox(form, ""Accelerer"", 10, 220)
	estAfficheReseau = forms.checkbox(form, ""Afficher reseau"", 10, 240)
	estAfficheInfo = forms.checkbox(form, ""Afficher bandeau"", 10, 260)
	forms.button(form, ""Pause"", traitementPause, 10, 285)
	forms.button(form, ""Sauvegarder"", activerSauvegarde, 10, 315)
	forms.button(form, ""Charger"", activerChargement, 100, 315)

	laPopulation = newPopulation() 
	
	for i = 1, #laPopulation, 1 do
		mutation(laPopulation[i])
	end	

	for i = 2, #laPopulation, 1 do
		laPopulation[i] = copier(laPopulation[1])
		mutation(laPopulation[i])
	end	

	lesEspeces = trierPopulation(laPopulation)
	laPopulation = nouvelleGeneration(laPopulation, lesEspeces)

	while true do
		
	
		local fitnessAvant = laPopulation[idPopulation].fitness
		nettoyer = true


		if forms.ischecked(estAccelere) then
			emu.limitframerate(false)
		else
			emu.limitframerate(true)
		end

		if forms.ischecked(estAfficheReseau) then
			dessinerUnReseau(laPopulation[idPopulation])
			nettoyer = false
		end

		if forms.ischecked(estAfficheInfo) then
			dessinerLesInfos(laPopulation, lesEspeces, nbGeneration)
			nettoyer = false
		end



		if nettoyer then
			gui.clearGraphics()
		end


		majReseau(laPopulation[idPopulation], marioBase)
		feedForward(laPopulation[idPopulation])
		appliquerLesBoutons(laPopulation[idPopulation])

		
		if nbFrame == 0 then
			fitnessInit = laPopulation[idPopulation].fitness
		end

		emu.frameadvance()
		nbFrame = nbFrame + 1


		if fitnessMax < laPopulation[idPopulation].fitness then
			fitnessMax = laPopulation[idPopulation].fitness
		end

		-- si pas d'évolution ET que le jeu n'est pas en pause, on va voir si on reset ou pas
		if fitnessAvant == laPopulation[idPopulation].fitness and memory.readbyte(0x13D4) == 0 then
			nbFrameStop = nbFrameStop + 1
			local nbFrameReset = NB_FRAME_RESET_BASE
			-- si il y a eu progrés ET QUE mario n'est pas MORT
			if fitnessInit ~= laPopulation[idPopulation].fitness and memory.readbyte(0x0071) ~= 9 then
				nbFrameReset = NB_FRAME_RESET_PROGRES
			end
			if nbFrameStop > nbFrameReset then
				nbFrameStop = 0
				lancerNiveau()
				idPopulation = idPopulation + 1
				-- si on en est là, on va refaire une generation
				if idPopulation > #laPopulation then
					-- je check avant tout si le niveau a pas été terminé 
					if not niveauFiniSauvegarde then
						for i = 1, #laPopulation, 1 do
							-- le level a été fini une fois, 
							if laPopulation[i].fitness == FITNESS_LEVEL_FINI then
								sauvegarderPopulation(laPopulation, true)
								niveauFiniSauvegarde = true
								console.log(""Niveau fini apres "" .. nbGeneration .. "" generation !"")
							end
						end
					end
					idPopulation = 1
					nbGeneration = nbGeneration + 1
					lesEspeces = trierPopulation(laPopulation)
					laPopulation = nouvelleGeneration(laPopulation, lesEspeces)
					nbFrame = 0
					fitnessInit = 0
				end
			end
		else
			nbFrameStop = 0
		end

		-- maj du label actuel
		local str = ""generation "" .. nbGeneration .. "" Fitness maximal: "" .. 
						fitnessMax .. ""\nInformations sur l'individu actuel:\n"" .. 
						""id: "" .. idPopulation .. ""/"" .. #laPopulation .."" neurones: "" .. 
						#laPopulation[idPopulation].lesNeurones .. "" connexions: "" ..
						#laPopulation[idPopulation].lesConnexions .. "" enfant de l'espece "" .. 
						laPopulation[idPopulation].idEspeceParent ..
						""\n\nInfos sur les especes: "" .. 
						""\nIl y a "" .. #lesEspeces .. "" espece(s) ""
		for i = 1, #lesEspeces, 1 do
			str = str .. ""\nespece "" .. i .. "" a fait "" .. lesEspeces[i].nbEnfant .. "" enfant(s)""  .. "" (fitnessmax "" .. lesEspeces[i].fitnessMax .. "") ""
		end
		forms.settext(labelInfo, str)
	end
	
end
"
RMf9qtzN,[НРС] Колоквијум - Група 4B,MartinSRB,C++,Tuesday 16th of May 2023 12:12:53 PM CDT,"#include<arduinoPlatform.h>
#include<tasks.h>
#include<interrupts.h>
#include<stdio.h>
#include<serial.h>
#include <pwm.h>
#include<data.h>

extern serial Serial;

/*---------- PRVA TACKA -------------*/
int z1 = 0,
    z2 = 0;
/*----------------------------------*/

/*============= DRUGA TACKA =========*/
const int POTENCIOMETAR = A0;
int fun1(){
    int p_value = analogRead(POTENCIOMETAR);
    int map_value = map(p_value, 0, 1023, 0, 255);
    return map_value;
}
/*====================================*/
/*~~~~~~~~~~~~ TRECA TACKA ~~~~~~~~~~~~~*/
const int BTN1 =  4,
          BTN2 = 34;
int BTN1_old_state,
    BTN2_old_state;
void task1(int id, void* ptrt){
    if(BTN1_old_state < digitalRead(BTN1)){
        int dec = fun1(),
            i   = 26;
        z1 = dec;
        while(dec / 2 > 0 || i <= 33){    //iz decimalnog broja u binarni broj
            digitalWrite(i++, dec % 2);
            dec /= 2;
        }
        Serial.println(""BTN1 je upravo pritisnut."");
        BTN1_old_state = digitalRead(BTN1);
    }else if(BTN1_old_state > digitalRead(BTN1)){
        BTN1_old_state = digitalRead(BTN1);
    }
    if(BTN2_old_state < digitalRead(BTN2)){
        if(Serial.available()){
            char *s = Serial.readString();
            Serial.println(s);
        }
        BTN2_old_state = digitalRead(BTN2);
    }else if(BTN2_old_state > digitalRead(BTN2)){
        BTN2_old_state = digitalRead(BTN2);
    }
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*********** CETVRTA TACKA **************/
typedef void interruptFunction();
const int SW1 = 2;
int task1_id,
    sw1_old_state;
interruptFunction* sw1_rising_edge  = NULL,
                 * sw1_falling_edge = NULL;
void sw1_attach_interrupt(int mode, interruptFunction* func){
    if(mode == RISING){
        sw1_rising_edge  = func;
    }else if(mode == FALLING){
        sw1_falling_edge = func;
    }
}
void sw1_rising_edge_func(){
    setTaskState(task1_id, TASK_DISABLE);
    for(int i = 26; i <= 33; ++i){
        digitalWrite(i, LOW);
    }
    for(int i = 33; i >= 26; --i){
        digitalWrite(i, HIGH);
        delay(z1 * 100);
        digitalWrite(i, LOW);
    }
}
void sw1_falling_edge_func(){
    for(int i = 26; i <= 33; ++i){
        digitalWrite(i, LOW);
    }
    setTaskState(task1_id, TASK_ENABLE);
}
void sw1_check(int id, void* ptrt){
    if(sw1_old_state < digitalRead(SW1)){
        sw1_rising_edge();
        sw1_old_state = digitalRead(SW1);
    }else if(sw1_old_state > digitalRead(SW1)){
        sw1_falling_edge();
        sw1_old_state = digitalRead(SW1);
    }
}
/**************************************/
/*-=-=-=-=-=-=-= PETA TACKA =-=-=-=-=-=*/
const int BTN3 = 36;
int BTN3_start_time,
    BTN3_old_state;
void task2(int id, void* ptrt){
    if(BTN3_old_state < digitalRead(BTN3)){
        BTN3_start_time = millis();
        BTN3_old_state = digitalRead(BTN3);
    }else if(BTN3_old_state > digitalRead(BTN3)){
        if(millis() - BTN3_start_time >= 1500){
            ++z2;
            Serial.print(""z2="");
            Serial.println(z2);
        }
        BTN3_old_state = digitalRead(BTN3);
    }
}
/*=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
void setup()
{
/*---------- PRVA TACKA -------------*/
Serial.begin(9600);
for(int i = 26; i <= 33; ++i){
    pinMode(i, OUTPUT);
    digitalWrite(i, LOW);
}
Serial.println(""Martin Muharemovic"");
/*----------------------------------*/
/*~~~~~~~~~~~~ TRECA TACKA ~~~~~~~~~*/
BTN1_old_state = digitalRead(BTN1);
BTN2_old_state = digitalRead(BTN2);
task1_id = createTask(task1, 50, TASK_ENABLE, NULL);
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*********** CETVRTA TACKA **************/
sw1_old_state = digitalRead(SW1);
sw1_attach_interrupt(RISING, sw1_rising_edge_func);
sw1_attach_interrupt(FALLING, sw1_falling_edge_func);
createTask(sw1_check, 50, TASK_ENABLE, NULL);
/***************************************/
/*-=-=-=-=-=-=-= PETA TACKA =-=-=-=-=-=*/
BTN3_old_state = digitalRead(BTN3);
createTask(task2, 30, TASK_ENABLE, NULL);
/*=-=-=-=-=-=-=-=-==-=-=-=-=-=--=-==-=-=-=*/
}

void loop()
{

}
"
Ui4xTEwp,Untitled,Bassel_11,C++,Tuesday 16th of May 2023 12:11:59 PM CDT,"def writeToFile():
    try:
        with open(""passengers.txt"", ""a"") as file:
            c = 'y'
            while c == 'y':
                id=input(""enter your ID : "")
                name=input(""enter your Name : "")
                age=input(""enter your Age : "")
                destination=input(""enter your Destination : "")
                file.write(id + '\t' + name + '\t' + age + '\t' + destination + '\n')
                c = input(""Do you want to enter a new record ( y / n) ? "")
            print(""record added successfully"")
    except Exception as e:
        print(""Error occurred while writing to file:"", e)

def readFromFile():
    try:
        print(""ID\tName\tAge\tDestination"")
        print(""----------------------------"")
        with open(""passengers.txt"", ""r"") as file:
            for line in file:
                print(line,end="""")
    except Exception as e:
        print(""Error occurred while reading from file:"", e)

def SearchById():
    try:
        id = input(""enter Id to search : "")
        flag = False
        with open(""passengers.txt"", ""r"") as file:
            for line in file:
                l  = line.split('\t')
                if l[0]==id:
                    flag=True
                    print(""ID\tName\tAge\tDestination"")
                    print(""----------------------------"")
                    print(line)
                    return
        if not flag:
            print(""record not found"")
    except Exception as e:
        print(""Error occurred while searching for record:"", e)

def deleteRecord():
    try:
        import os
        id = input(""enter Id to delete : "")
        file = open(""passengers.txt"", ""r"")
        tempfile = open(""tmp.txt"", ""w"")
        flag = False
        for line in file:
            l=line.split('\t')
            if id==l[0]:
                flag = True
            else:
                tempfile.write(line)
        file.close()
        tempfile.close()
        os.remove(""passengers.txt"")
        os.rename(""tmp.txt"", ""passengers.txt"")
        if not flag:
            print(""record does not exist"")
        else:
            print(""the record deleted successfully"")
    except Exception as e:
        print(""Error occurred while deleting record:"", e)

def updateRecord():
    try:
        import os
        id = input(""enter Id you want to update : "")
        field = input(""Which field do you want to update \n1 - ID\n2 - Name\n3 - Age\n4 - Destination\nYour choice :  "")
        file = open(""passengers.txt"", ""r"")
        tempfile = open(""tmp.txt"", ""w"")
        flag = False
        for line in file:
            l = line.split('\t')
            if id != l[0]:
                tempfile.write(line)
            else:
                flag = True
                if field == ""1"":
                    new_id = input(""enter new ID : "")
                    tempfile.write(new_id + '\t' + l[1] + '\t' + l[2] + '\t' + l[3])
                elif field == ""2"":
                    new_name = input(""enter new Name : "")
                    tempfile.write(l[0] + '\t' + new_name + '\t' + l[2] + '\t' + l[3])
                elif field == ""3"":
                    new_age = input(""enter new Age : "")
                    tempfile.write(l[0] + '\t' + l[1] + '\t' + new_age + '\t' + l[3])
                elif field == ""4"":
                    new_dest = input(""enter new Destination : "")
                    tempfile.write(l[0] + '\t' + l[1] + '\t' + l[2] + '\t' + new_dest)
        file.close()
        tempfile.close()
        os.remove(""passengers.txt"")
        os.rename(""tmp.txt"", ""passengers.txt"")
        if not flag:
            print(""record does not exist"")
        else:
            print(""record updated successfully"")
    except Exception as e:
        print(""Error occurred while updating record:"", e)

def main():
    while True:
        try:
            print(""\n------------BUS RESERVATION SYSTEM---------------"")
            print(""(Choose one of these to do)"")
            print(""1 - Enter new passenger"")
            print(""2 - View all passengers"")
            print(""3 - Search for a passenger"")
            print(""4 - Change passenger information"")
            print(""5 - Delete a passenger"")
            print(""6 - Exit"")
            ch = int(input(""Your choice : ""))
            if ch == 1:
                writeToFile()
            elif ch == 2:
                readFromFile()
            elif ch == 3:
                SearchById()
            elif ch == 4:
                updateRecord()
            elif ch == 5:
                deleteRecord()
            elif ch == 6:
                print(""\n Thanks for using our System , we hope you like it :)"")
                break
            else:
                print(""\n please choose one of the shown choices\n"")
        except Exception as e:
            print(""Error occurred:"", e)

main()"
nLscNptb,Nightbot reminders,abcxboy,JavaScript,Tuesday 16th of May 2023 12:07:46 PM CDT,"[
    [
        `💧Don't forget to drink water💧`,
        `💧Are you thirsty? Even if not, you should drink a sip of WATER now💧`,
        `💧Reminder to stay hydrated💧`,
        `💧Water is good for body and mind💧`,
        `💧Do you know the great feeling when you're really thirsty and take a strong sip of water?💧`,
        `💧Water reminder💧`,
        `💧Water💧Drink💧`
    ],
    [
        `Stay connected with your favorite streamer! Join TinyRick's Discord and never miss a Twitch stream 📢🎮  ──────────────────────────────── 🔊 discord.gg/zmsxk4pV6q 🔊 ──────────────────────────────── `,
        `Get the inside scoop! Connect with TinyRick and other viewers on TinyRick's Discord during Twitch streams 💬🎮  ──────────────────────────────── 🔊 discord.gg/zmsxk4pV6q 🔊 ──────────────────────────────── `,
        `Take your Twitch experience to the next level! Join TinyRick's Discord for exclusive chats, fun events, and more during streams 🎉🎮  ──────────────────────────────── 🔊 discord.gg/zmsxk4pV6q 🔊 ──────────────────────────────── `
    ],
    [
        `Are You enjoying the Stream? Don't forget to follow to never miss a Stream again`
    ],
    [
        ` monkaS KEKW Sadge catJAM FeelsOkayMan -> If you're only seeing text and are currently on a PC, you might not have the browser extensions 7TV and Better Twitch TV (BTTV) installed. Use them to enhance your Twitch or YouTube experience! The more they're used, the better the experience becomes. Visit betterttv.com and 7tv.app for more information.`
    ]
]"
pnTBsp4v,Untitled,cloud_clown,JavaScript,Tuesday 16th of May 2023 12:06:17 PM CDT,"import React, { useState} from ""react"";
import ""./Form.css"";

// react hook form
import { useForm, useFieldArray } from ""react-hook-form"";
import { DevTool } from ""@hookform/devtools"";

const Form = ({ setFormData }) => {

  const form = useForm({
    defaultValues: {
      email: """",
      fullName: """",
      position: """",
      technologys: [
        {
          technology: """",
        },
      ],
    },
  });
  const { register, control, handleSubmit, formState } = form;
  const { errors } = formState;
  const { append, remove, fields } = useFieldArray({
    name: ""technologys"",
    control,
  });

  const onSubmit = (data) => {
    setFormData(data)
    console.log(""Form submitted"", data);
    console.log( data.technologys[0]);
  };

  return (
    <>
      <div className=""form-container"">
        <div className=""form-text"">
          <h1>Input Your Team Member Details</h1>
        </div>
        <div className=""form-card"">
          <form
            className=""form-input""
            onSubmit={handleSubmit(onSubmit)}
            noValidate
          >
            <div className=""input-wrapper"">
              <label htmlFor=""email"">Email</label>
              <input
                type=""email""
                id=""email""
                {...register(""email"", {
                  required: {
                    value: true,
                    message: "" email required"",
                  },
                  pattern: {
                    value:
                      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                    message: ""Invalid email format"",
                  },
                })}
              />
              <p>{errors.email?.message}</p>
            </div>

            <div className=""input-wrapper"">
              <label htmlFor=""fullName"">Full Name</label>
              <input
                type=""text""
                id=""fullName""
                {...register(""fullName"", {
                  required: {
                    value: true,
                    message: ""Username is required"",
                  },
                })}
              />
              <p>{errors.fullName?.message}</p>
            </div>

            <div className=""input-wrapper"">
              <label htmlFor=""position"">Position</label>
              <input
                type=""text""
                id=""position""
                {...register(""position"", {
                  required: {
                    value: true,
                    message: ""Position is required"",
                  },
                })}
              />
              <p>{errors.position?.message}</p>
            </div>

            <div className=""input-wrapper"">
              <label htmlFor=""technologys"">Technologys you use</label>
              {fields.map((field, index) => {
                return (
                  <div className=""input-wrapper"" key={field.id}>
                    <input
                      type=""text""
                      id=""technologys""
                      {...register(`technologys.${index}.technology`,{
                        required: {
                          value: true,
                          message: ""Technologys is required"",
                        }
                      })}
                    />

                    {index > 0 && (
                      <button type=""button"" onClick={() => remove(index)}>
                        remove
                      </button>
                    )}
                  </div>
                );
              })}
              <button type=""button"" onClick={() => append({ technology: """" })}>
                Add tech
              </button>
              <p>{errors.technologys?.[0]?.technology?.message}</p>
            </div>

            <button type=""submit"">Submit</button>
          </form>
        </div>
        <DevTool control={control} />
      </div>
    </>
  );
};

export default Form;
"
n79wfmZB,💢FIGHT ENEMY Simulator!,LuaXe,Lua,Tuesday 16th of May 2023 11:58:12 AM CDT,"function K() spawn(function () while getgenv().K do for i, v in pairs(game:GetService(""Workspace"").RENDER.ENTITIES:GetChildren()) do local args = {[1] = v.Name}game:GetService(""ReplicatedStorage"").Packages._Index:FindFirstChild(""sleitnick_knit@1.5.1"").knit.Services.SwordService.RE.SwordAttack:FireServer(unpack(args)) end wait() end end) end
function P() spawn(function () while getgenv().P do local args = {[1] = ""trainingDummy""}game:GetService(""ReplicatedStorage"").Packages._Index:FindFirstChild(""sleitnick_knit@1.5.1"").knit.Services.SwordService.RE.SwordAttackDummy:FireServer(unpack(args)) wait() end end) end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow(""Punch Monster Simulator"")

local b = w:CreateFolder(""Main"")

b:Button(""TP To The Game"",function() game:GetService(""TeleportService""):Teleport(8034886758) end)

b:Toggle(""Kill All (OP)"",function(val)
getgenv().K = val
K()
end)

b:Toggle(""Inf. Power"",function(val)
getgenv().P = val
P()
end)

b:Label(""Made by X_LuaF#0705"",{TextSize = 21; TextColor = Color3.fromRGB(255,255,255); BgColor = Color3.fromRGB(38, 38, 38);})

local w = library:CreateWindow(""LocalPlayer"")

local b = w:CreateFolder(""LP"")

b:DestroyGui()

b:Button(""Copy Discord Invite"",function() setclipboard(""workink.co/2GQ/LTD"") end)
b:Button(""Full Version"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/GphZf9Xe"", true))() end)
b:Button(""Rejoin"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/mM7JBG5h"", true))() end)
b:Button(""Reset"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/EEY6SATj"", true))() end)

b:Box(""Speed"",""number"",function(val) S = val end)
b:Box(""Jump"",""number"",function(val) J = val end)
b:Box(""Hip Height"",""number"",function(val) H = val end)
b:Box(""Gravity"",""number"",function(val) G = val end)
 
b:Toggle(""Speed"",function(bool) getgenv().Speed = bool Speed(S) end)
b:Toggle(""Jump"",function(bool) getgenv().Jump = bool Jump(J) end)
b:Toggle(""Hip Height"",function(bool) getgenv().Hip = bool Hip(H) end)
b:Toggle(""Gravity"",function(bool) getgenv().Grav = bool Grav(G) end)
 
b:Slider(""FOV (Default is 70)"",{min = 0;max = 120;precise = true;},function(val) game.workspace.CurrentCamera.FieldOfView = val end)

function TPCFrame(Player_CFrame) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Player_CFrame.CFrame end end
function TPVector3(Player_Position) game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Player_Position.Position end
function PHP(Player_HP) game.Players.LocalPlayer.Character.Humanoid.Health = Player_HP end

function Chat(Mes, Freq) spawn(function () while getgenv().Chat do local args = {[1] = Mes,[2] = ""All""} game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args)) wait(Freq) end end) end
function Speed(Nume) spawn(function () if getgenv().Speed then while getgenv().Speed do game:GetService(""Players"").LocalPlayer.Character.Humanoid.WalkSpeed = Nume wait() end elseif getgenv().Speed == false then game:GetService(""Players"").LocalPlayer.Character.Humanoid.WalkSpeed = 16 end end) end
function Jump(Nume) spawn(function () if getgenv().Jump then while getgenv().Jump do game:GetService(""Players"").LocalPlayer.Character.Humanoid.JumpPower = Nume wait() end elseif getgenv().Jump == false then game:GetService(""Players"").LocalPlayer.Character.Humanoid.JumpPower = 50 end end) end
function Hip(Nume) spawn(function () if getgenv().Hip then while getgenv().Hip do game:GetService(""Players"").LocalPlayer.Character.Humanoid.HipHeight = Nume wait() end elseif getgenv().Hip == false then game:GetService(""Players"").LocalPlayer.Character.Humanoid.HipHeight = 0.1 end end) end
function Grav(Nume) spawn(function () if getgenv().Grav then while getgenv().Grav do game:GetService(""Workspace"").Gravity = Nume wait() end elseif getgenv().Grav == false then game:GetService(""Workspace"").Gravity = 196.2 end end) end"
yR9Z5krz,input reading template,fenixD3,C++,Tuesday 16th of May 2023 11:54:46 AM CDT,"template <template <typename> class TCont, typename TType>
TCont<TType> fill_from(int count, std::istream& from)
{
    TCont<TType> seq;
    seq.reserve(count);

    std::copy(
        std::istream_iterator<TType>(from),
        std::istream_iterator<TType>(),
        std::inserter(seq, seq.end()));

    return seq;
}

int main()
{
    int n;
    std::cin >> n;

    std::vector<int> list_form = fill_from<std::vector, int>(n, std::cin);
}

/*
* Input:
* 4
* 1 2 3 4
*
*/"
sE3EQk1a,Text file upload script (chatGPT),frentzy,JavaScript,Tuesday 16th of May 2023 11:44:11 AM CDT,"// Create button
let button = document.createElement('button');
button.innerText = 'Submit File';
button.style.backgroundColor = 'green';
button.style.color = 'white';
button.style.padding = '5px';
button.style.border = 'none';
button.style.borderRadius = '5px';
button.style.margin = '5px';

// Create progress element
let progress = document.createElement('div');
progress.style.width = '99%';
progress.style.height = '5px';
progress.style.backgroundColor = 'grey';

// Create progress bar
let progressBar = document.createElement('div');
progressBar.style.width = '0%';
progressBar.style.height = '100%';
progressBar.style.backgroundColor = 'blue';

// Create drop area
let dropArea = document.createElement('div');
dropArea.innerText = 'Drag and drop files here';
dropArea.style.border = '2px dashed grey';
dropArea.style.padding = '20px';
dropArea.style.margin = '5px';

// Add progress bar to progress element
progress.appendChild(progressBar);

// Find the element to insert the button and dropArea before
let targetElement = document.querySelector('.flex.flex-col.w-full.py-2.flex-grow.md\\:py-3.md\\:pl-4');

// Insert the button, dropArea and progress before the target element
targetElement.parentNode.insertBefore(button, targetElement);
targetElement.parentNode.insertBefore(dropArea, targetElement);
targetElement.parentNode.insertBefore(progress, targetElement);

// Add event listeners to button
button.addEventListener('click', async function() {
    let input = document.createElement('input');
    input.type = 'file';
    input.accept = '.txt,.js,.py,.html,.css,.json,.csv,.rtf,.ts,.tsx,.swift,.java,.php,.c,.cpp,.xml,.md,.log,.sql,.cs,.sh,.r,.m,.h,.pl,.bat,.svg,.asm,.s,.kt,.go,.scala,.yml,.yaml,.ini,.properties,.conf,.makefile,.tex,.erl,.elm,.pug,.less,.scss,.sass,.vue,.jsx';
    input.click();
    input.onchange = async function() {
        let file = input.files[0];
        processFile(file);
    };
});

// Add event listeners to dropArea
dropArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropArea.style.backgroundColor = 'lightgrey';
});

dropArea.addEventListener('dragleave', () => {
    dropArea.style.backgroundColor = 'transparent';
});

dropArea.addEventListener('drop', async (e) => {
    e.preventDefault();
    dropArea.style.backgroundColor = 'transparent';
    let file = e.dataTransfer.files[0];
    processFile(file);
});

async function processFile(file) {
    let reader = new FileReader();
    reader.readAsText(file);
    reader.onload = async function() {
        let text = reader.result;
        let chunks = text.match(/[\s\S]{1,15000}/g);
        for(let i = 0; i < chunks.length; i++) {
            await submitConversation(chunks[i], i+1, file.name);
            progressBar.style.width = `${((i + 1) / chunks.length) * 100}%`;
        }
        progressBar.style.backgroundColor = 'green';
    };
}

async function submitConversation(text, part, filename) {
    const textarea = document.querySelector(""textarea[tabindex='0']"");
    const enterKeyEvent = new KeyboardEvent(""keydown"", {
        bubbles: true,
        cancelable: true,keyCode: 13,
});
textarea.value = `Part ${part} of ${filename}: \n\n ${text}`;
textarea.dispatchEvent(enterKeyEvent);

let chatgptReady = false;
while (!chatgptReady) {
    await new Promise((resolve) => setTimeout(resolve, 1000));
    chatgptReady = !document.querySelector("".text-2xl > span:not(.invisible)"");
}
}
"
6skVbbdq,Synthesizer pedal emulator,Madwin74,C#,Tuesday 16th of May 2023 11:31:09 AM CDT,"/***********************************************************
 ***********************************************************
 **                                                       **
 **   Codesnippets written by Madwin for MMP 2023         **
 **                                                       **
 **   Not to be used freely. the code still has errors    **
 **   It's intended to be used as starting point.         **
 **   Code has not been checked and might still need      **
 **   (a lot of) work.                                    **
 **                                                       **
 **   ℗ & © MadMedia Productions 2023                     **
 **                                                       **
 ***********************************************************
 ***********************************************************
 **                                                       **
 **   -- Disclaimer: --                                   **
 **                                                       **
 **   If code is used in private projects and/or for      **
 **   study purposes please mention resource. Any other   **
 **   use -whether commercial or non-commercial- is not   **
 **   condoned by the author and violates his intent.     **
 **                                                       **
 **   madmedia@protonmail.com                             **
 **                                                       **
 ***********************************************************
 ***********************************************************/



using CSCore;
using CSCore.SoundIn;
using CSCore.Streams;
using CSCore.Streams.Effects;
using CSCore.WaveTables;

public class BossSY1Emulator
{
    private ISoundIn soundIn;
    private IWaveSource waveSource;
    private ISampleSource sampleSource;
    private EffectChain effectChain;

    // Control parameters
    public float Effect { get; set; }
    public float Direct { get; set; }
    public float Tone { get; set; }
    public float Rate { get; set; }
    public float Depth { get; set; }
    public float Variation { get; set; }
    public int Type { get; set; } // 0 = Lead 1, 1 = Lead 2, 2 = Pad, 3 = Bass, 4 = STR, 5 = Organ, 6 = Bell, 7 = SFX 1, 8 = SFX 2, 9 = SEQ 1, 10 = SEQ 2

    public BossSY1Emulator()
    {
        soundIn = new WasapiLoopbackCapture();
        waveSource = new SoundInSource(soundIn);
        sampleSource = waveSource.ToSampleSource().ToStereo();
        effectChain = new EffectChain();

        // Add your desired effects here based on control parameters
        effectChain.Add(new DelayEffect { WetDryMix = Effect });
        effectChain.Add(new ToneFilter { CutOff = Tone });

        // Select sound type based on Type parameter
        switch (Type)
        {
            case 0: // Lead 1
                effectChain.Add(new SineGenerator(440f)); // Replace with your own lead 1 sound generator
                break;
            case 1: // Lead 2
                effectChain.Add(new SineGenerator(880f)); // Replace with your own lead 2 sound generator
                break;
            case 2: // Pad
                effectChain.Add(new SquareGenerator(440f)); // Replace with your own pad sound generator
                break;
            case 3: // Bass
                effectChain.Add(new SawtoothGenerator(220f)); // Replace with your own bass sound generator
                break;
            case 4: // STR
                effectChain.Add(new TriangleGenerator(440f)); // Replace with your own STR sound generator
                break;
            case 5: // Organ
                effectChain.Add(new SquareGenerator(440f)); // Replace with your own organ sound generator
                break;
            case 6: // Bell
                effectChain.Add(new SineGenerator(880f)); // Replace with your own bell sound generator
                break;
            case 7: // SFX 1
                effectChain.Add(new WhiteNoiseGenerator()); // Replace with your own SFX 1 sound generator
                break;
            case 8: // SFX 2
                effectChain.Add(new PinkNoiseGenerator()); // Replace with your own SFX 2 sound generator
                break;
            case 9: // SEQ 1
                effectChain.Add(new SawtoothGenerator(440f)); // Replace with your own SEQ 1 sound generator
                break;
            case 10: // SEQ 2
                effectChain.Add(new TriangleGenerator(440f)); // Replace with your own SEQ 2 sound generator
                break;
            default:
                break;
        }

        sampleSource = effectChain.ToSampleSource();
    }

    public void Start()
    {
        soundIn.Start();
    }

public void Stop()
{
    soundIn.Stop();
}

public ISampleSource GetOutputSource()
{
    return sampleSource;
}

}

/*


I've added the control parameters (`Effect`, `Direct`, `Tone`, `Rate`, `Depth`, `Variation`, `Type`) as properties of the 
`BossSY1Emulator` class. You can set these parameters to adjust the behavior of the synthesizer emulation.

The effects in the `effectChain` have been updated to include a `DelayEffect` with the `WetDryMix` parameter set to the 
`Effect` value, and a `ToneFilter` with the `CutOff` parameter set to the `Tone` value.

Based on the `Type` parameter, the appropriate sound generator is added to the `effectChain`. You can replace the placeholder 
sound generators (`SineGenerator`, `SquareGenerator`, `SawtoothGenerator`, `TriangleGenerator`, `WhiteNoiseGenerator`, 
`PinkNoiseGenerator`) with your own implementation or use other sound generation techniques to create the desired synth sounds.

Now you can create an instance of the `BossSY1Emulator` class, set the control parameters, and retrieve the output 
`ISampleSource` using the `GetOutputSource` method. This `ISampleSource` object can be used for real-time audio processing or playback.

Remember to add the necessary CSCore NuGet package to your project. Additionally, make sure to replace the placeholder sound generators 
with your own sound generation logic or use appropriate libraries for generating the desired synth sounds.
*/"
kKF7rqxQ,builder example,xmove01,JavaScript,Tuesday 16th of May 2023 11:21:50 AM CDT,"{
    ""botId"": 2304,
    ""nodes"": [
        {
            ""width"": 80,
            ""height"": 45,
            ""id"": ""1"",
            ""type"": ""Start"",
            ""position"": {
                ""x"": 10,
                ""y"": 10
            },
            ""data"": {},
            ""positionAbsolute"": {
                ""x"": 10,
                ""y"": 10
            }
        },
        {
            ""width"": 250,
            ""height"": 138,
            ""id"": ""2"",
            ""type"": ""Message"",
            ""selected"": false,
            ""position"": {
                ""x"": 200,
                ""y"": 100
            },
            ""data"": {
                ""nodes"": [
                    {
                        ""id"": ""sub_node_1"",
                        ""type"": ""Text"",
                        ""content"": {
                            ""text"": ""123"",
                            ""type"": """"
                        },
                        ""buttons"": [],
                        ""state"": {}
                    }
                ]
            },
            ""positionAbsolute"": {
                ""x"": 200,
                ""y"": 100
            }
        },
        {
            ""width"": 250,
            ""height"": 179,
            ""id"": ""chain_node_8c218fb9-097b-4cd5-bcae-2e7e5018f234"",
            ""type"": ""Filter"",
            ""selected"": true,
            ""position"": {
                ""x"": 613,
                ""y"": 298.5
            },
            ""data"": {
                ""nodes"": [
                    {
                        ""id"": ""sub_node_c21acf36-66a5-4afa-8899-58b99c1a8ab5"",
                        ""content"": {
                            ""id"": ""sub_node_0faee096-3ac0-46cf-a7c8-0b543f18abb3"",
                            ""isConnectable"": true,
                            ""type"": ""AND"",
                            ""conditions"": [
                                {
                                    ""id"": ""condition_a5dd701d-0bbf-4a33-ab41-1cd4a22c18dd"",
                                    ""condition"": ""dayOfWeek"",
                                    ""option"": ""Equal"",
                                    ""value"": [
                                        ""0"",
                                        ""2"",
                                        ""3"",
                                        ""5""
                                    ],
                                    ""variableName"": ""dayOfWeek"",
                                    ""dateFrom"": ""2023-05-16T16:20:53.210Z"",
                                    ""dateTo"": ""2023-05-16T16:20:53.210Z""
                                }
                            ]
                        }
                    }
                ]
            },
            ""dragging"": false,
            ""positionAbsolute"": {
                ""x"": 613,
                ""y"": 298.5
            }
        }
    ],
    ""edges"": [
        {
            ""source"": ""1"",
            ""sourceHandle"": null,
            ""target"": ""2"",
            ""targetHandle"": ""major"",
            ""id"": ""reactflow__edge-1-2major""
        },
        {
            ""source"": ""2"",
            ""sourceHandle"": null,
            ""target"": ""chain_node_8c218fb9-097b-4cd5-bcae-2e7e5018f234"",
            ""targetHandle"": ""major"",
            ""id"": ""reactflow__edge-2-chain_node_8c218fb9-097b-4cd5-bcae-2e7e5018f234major""
        }
    ],
    ""name"": ""Цепочка 16.05, 19:20""
}"
5M9XyjT6,ucwords js speed comparison,k98kurz,JavaScript,Tuesday 16th of May 2023 11:19:29 AM CDT,"function ucfirst (str) {
    let s = str[0].toUpperCase() + str.substr(1);
    return s;
}

function ucwords1 (str) {
    let parts = str.split(' ');
    for (let i=0, l=parts.length; i<l; ++i) {
        parts[i] = ucfirst(parts[i]);
    }
    return parts.join(' ');
}

function ucwords2 (str) {
    return (str + '').replace(/^([a-z])|\s+([a-z])/g, function ($1) {
        return $1.toUpperCase();
    });
}

function benchmark(fn, times=1000) {
    let ts1 = Date.now();
    for (let i=0; i<times; ++i)
        fn();
    let ts2 = Date.now();
    return ts2 - ts1;
}

console.log(benchmark(() => ucwords1('lorem ipsum dolor sit amet, something something i am the law'), 1e6));
// three trials: 958ms, 1035ms, 975ms; avg=989.333...ms
console.log(benchmark(() => ucwords2('lorem ipsum dolor sit amet, something something i am the law'), 1e6));
// three trials: 2177ms, 2237ms, 2426ms; avg=2280ms
// 989.333/2280 = 0.434; ucwords1 is ~60% faster than ucwords2
"
FtJxkxKB,reflection,SharpHurt,C#,Tuesday 16th of May 2023 11:18:03 AM CDT,"using System;
using System.Linq;
using System.Reflection;

namespace Documentation
{
    public class Specifier<T> : ISpecifier
    {
        private readonly Type objectType = typeof(T);
        
        public string GetApiDescription()
        {
            return GetAttribute<ApiDescriptionAttribute>(objectType)?.Description;
        }

        public string[] GetApiMethodNames()
        {
            return objectType.GetMethods()
                .Where(m => m.GetCustomAttributes<ApiMethodAttribute>().Any())
                .Select(m => m.Name)
                .ToArray();
        }

        public string GetApiMethodDescription(string methodName)
        {
            var methodInfo = GetMethod(methodName);
            return methodInfo is null ? null : GetAttribute<ApiDescriptionAttribute>(methodInfo)?.Description;
        }

        public string[] GetApiMethodParamNames(string methodName)
        {
            var methodInfo = GetMethod(methodName);
            return methodInfo is null
                ? Array.Empty<string>()
                : methodInfo.GetParameters().Select(p => p.Name).ToArray();
        }

        public string GetApiMethodParamDescription(string methodName, string paramName)
        {
            var methodInfo = GetMethod(methodName);
            return methodInfo is null
                ? null
                : GetAttribute<ApiDescriptionAttribute>(GetParameter(methodInfo, paramName))?.Description;
        }

        public ApiParamDescription GetApiMethodParamFullDescription(string methodName, string paramName)
        {
            var methodInfo = GetMethod(methodName);
            if (methodInfo is null)
                return new ApiParamDescription { ParamDescription = new CommonDescription(paramName) };

            var parameterInfo = GetParameter(methodInfo, paramName);
            return new ApiParamDescription
            {
                ParamDescription = new CommonDescription
                {
                    Name = paramName,
                    Description = GetApiMethodParamDescription(methodName, paramName)
                },
                Required = GetAttribute<ApiRequiredAttribute>(parameterInfo)?.Required ?? false,
                MinValue = GetAttribute<ApiIntValidationAttribute>(parameterInfo)?.MinValue,
                MaxValue = GetAttribute<ApiIntValidationAttribute>(parameterInfo)?.MaxValue
            };
        }

        public ApiMethodDescription GetApiMethodFullDescription(string methodName)
        {
            var methodInfo = GetMethod(methodName);
            if (methodInfo is null)
                return null;

            return new ApiMethodDescription
            {
                ParamDescriptions = GetParamsDescription(methodInfo),
                MethodDescription = GetMethodDescription(methodInfo),
                ReturnDescription = GetDescription(methodInfo)
            };
        }

        private ParameterInfo GetParameter(MethodInfo methodInfo, string parameterName)
        {
            return methodInfo.GetParameters().FirstOrDefault(p => p.Name == parameterName);
        }

        private TAttribute GetAttribute<TAttribute>(ParameterInfo parameterInfo) where TAttribute : Attribute
        {
            return parameterInfo?.GetCustomAttribute<TAttribute>();
        }

        private TAttribute GetAttribute<TAttribute>(MethodInfo methodInfo) where TAttribute : Attribute
        {
            return methodInfo?.GetCustomAttribute<TAttribute>();
        }

        private TAttribute GetAttribute<TAttribute>(Type type) where TAttribute : Attribute
        {
            return type?.GetCustomAttribute<TAttribute>();
        }

        private MethodInfo GetMethod(string methodName)
        {
            var method = objectType.GetMethod(methodName);
            return GetAttribute<ApiMethodAttribute>(method) is null ? null : method;
        }

        private ApiParamDescription[] GetParamsDescription(MethodInfo method)
        {
            return method.GetParameters().Select(p => GetApiMethodParamFullDescription(method.Name, p.Name)).ToArray();
        }

        private ApiParamDescription GetDescription(MethodInfo method)
        {
            var returnTypeCustomAttributes = method.ReturnTypeCustomAttributes.GetCustomAttributes(true);

            if (!returnTypeCustomAttributes.Any())
                return null;

            var apiRequiredAttribute = returnTypeCustomAttributes.OfType<ApiRequiredAttribute>().FirstOrDefault();
            var apiIntValidationAttribute = returnTypeCustomAttributes.OfType<ApiIntValidationAttribute>().FirstOrDefault();

            return new ApiParamDescription
            {
                Required = apiRequiredAttribute?.Required ?? false,
                MinValue = apiIntValidationAttribute?.MinValue,
                MaxValue = apiIntValidationAttribute?.MaxValue
            };
        }

        private CommonDescription GetMethodDescription(MethodInfo method)
        {
            return new CommonDescription
            {
                Name = method.Name,
                Description = method.GetCustomAttribute<ApiDescriptionAttribute>()?.Description
            };
        }
    }
}"
V5a9GanA,How to setup a new DjangoProject_app,GeorgiLukanov87,Python,Tuesday 16th of May 2023 11:14:54 AM CDT,"""""""
	After new Django proeject created follow the steps->

1.Execute in terminal -> python manage.py startsapp 'name of the app'
    or in manage.py window(CTRL+ALT+R) -> startsapp 'name of the app'
    
2.Move the app to the main project dir.
3.Create new py-file(urls.py) in the app folder -> urlpatterns = () ->(MUST be tuple! or list!).
4.In settings.py add the app in the 'INSTALLED_APPS'.
5.Add path to main project urlpatterns -> path('', include('folder_name.my_app_name.urls')),
6.Run app to see if everything works?

7.Insert the templates in the projects dir.
8.Create more folders with names like -> for example: core/profile/items and move the templates into.

9.Create a new folder inside the main projects dir with name 'staticfiles'.
10.In settings.py add additional setting for static dir ->
                                                                STATICFILES_DIRS = (
                                                                    BASE_DIR / 'staticfiles',
                                                                )

11.test to run one of the staticfiles to test if works well.
    For example-> http://127.0.0.1:8000/static/styles/details.css

12.In settings.py config database
    -THIS CAN BE DONE IN THE END OF THE TASK(django got default db(sqlite3) connected and works same way!
    with postgres settings ->
    https://docs.djangoproject.com/en/4.2/ref/settings/#databases

                                    DATABASES = {
                                        ""default"": {
                                            ""ENGINE"": ""django.db.backends.postgresql"",
                                            ""NAME"": ""name of the database"",
                                            ""USER"": ""postgres user"",
                                            ""PASSWORD"": ""mypassword"",
                                            ""HOST"": ""127.0.0.1"",
                                            ""PORT"": ""5432"",
                                        }
                                    }

13.Top right corner Database menu -> add new -> Data Source -> PostgreSQL -> fill username and password
    then test the connection and connect.
    This is default and do not change it.
    Must be like this ->
                            Host: localhost
                            Port: 5432
                            URL: jdbc:postgresql://localhost:5432/postgres

    Now right mouse click on the postgres@localhost and create a new database
    with the correct db base from the settings.

14.Now start the app -> may be you will see error like this ->

            ""raise ImproperlyConfigured(""Error loading psycopg2 or psycopg module"")
            django.core.exceptions.ImproperlyConfigured: Error loading psycopg2 or psycopg module""

15.Need to install ""psycopg"" or ""psycopg2"" to work correctly.
16.In terminal execute this -> pip install psycopg2

17.After EVERY! pip install is good to execute-> pip freeze > requiments.txt
    This will create a txt file in your main projects dir
    with name-> 'requiments.txt'
    looking like this ->
                            asgiref==3.6.0
                            Django==4.2.1
                            psycopg2==2.9.6
                            sqlparse==0.4.4
                            tzdata==2023.3

18.You can upgrade your pip -> 'pip install --upgrade pip' (for Windows).

19.Execute in terminal -> ""python manage.py migrate""
                            or
    in manage.py window(run it with-> ""CTRL+ALT+R"", same as step1)  -> ""migrate""
    it`s the same , but in manage.py window you have autocomplete and it`s easier.
    Now you can see in your DB the tables filled in. In ""db/public/tables""

20.Run to see if everything works well. Good job :D !

21.Next step is to add urls paths and config with callable func-views.
    for example->

    http://localhost:8000/ - home page
    http://localhost:8000/dashboard/ - dashboard page

    http://localhost:8000/game/create/ - create game page
    http://localhost:8000/game/details/<id>/ - details game page
    http://localhost:8000/game/edit/<id>/ - edit game page
    http://localhost:8000/game/delete/<id>/ - delete game page

    http://localhost:8000/profile/create - create profile page
    http://localhost:8000/profile/details/ - details profile page
    http://localhost:8000/profile/edit/ - edit profile page
    http://localhost:8000/profile/delete/ - delete profile page


    -In urls.py looking like this ->

                                urlpatterns = (
                                path('', show_index, name='show index'),
                                path('dashboard/', show_dashboard, name='show dashboard'),

                                path('profile/', include([
                                    path('create/', create_profile, name='create profile'),
                                    path('details/', details_profile, name='details profile'),
                                    path('edit/', edit_profile, name='edit profile'),
                                    path('delete/', delete_profile, name='delete profile'),
                                ])),

                                path('game/', include([
                                    path('create/', create_game, name='create game'),
                                    path('details/<int:pk>/', details_game, name='details game'),
                                    path('edit/<int:pk>/', edit_game, name='edit game'),
                                    path('delete/<int:pk>/', delete_game, name='delete game'),
                                ])),
                            )

    -now in views.py ->


        open -> http://localhost:8000/
        -this is without PK/ID->
            def show_index(request):
                return render(request, 'core/home-page.html')


        open -> http://localhost:8000/game/details/1/
        -And this is with PK/ID->
            def details_game(request, pk):
                return render(request, 'game/details-game.html')


    Run to try if working well.
    The pages must visualization without any functionality but rendering.

22.Now it`s time to make a superuser(admin) You can reach the link -> http://127.0.0.1:8000/admin/ , and you will see
    the admin panel for loging into the admin panel, but we still miss the superuser.
    Execute in manage.py-> createsuperuser
    and follow the instructions -> fill username,mail,password,repeat password! It`s done.
    Now you can log into admin side.You can create groups and users and giving them permissions and organize all,
    but for now this is enough.

23.Time to fix the templates using inheritance.
    In the template directory create a single file with name -> base.html
    This will be the main/base html who will have the base html elements like navigations and footer
    which is repeating in every html.Then we gonna reuse and extend every html with the base.html.
    	-{% load static %} this line is when you want to find the staticfiles more accurately.
        Not a 100% required , but it`s recommended.


    Use this -> to extend the base.html
        {% extends 'base.html' %}
        {% load static %}
        {% block content %}
        {% endblock %}


    and this in base.html to be the parent to all html elements ->
        {% block content %}
        {# information here #}
        {% endblock %}



    base.html must be looking something like this ->
    base.html STARTS HERE ->
                                {% load static %}
                                <!DOCTYPE html>
                                <html lang=""en"">
                                <head>
                                    <meta charset=""UTF-8"">
                                    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
                                    <link rel=""stylesheet"" href=""{% static '/styles/style.css' %}"">
                                    <title>GamesPlay</title>
                                </head>

                                <body>
                                <div id=""box"">
                                    <header>

                                        <!-- Navigation Bar -->
                                        <h1><a class=""home"" href=""{% url 'show index' %}"">GamesPlay</a></h1>
                                        <nav>
                                            <!-- if the user has not created a profile -->
                                            <a href=""{% url 'create profile' %}"">Create Profile</a>
                                            <!-- if the user has created a profile -->
                                            <a href=""{% url 'show dashboard' %}"">Dashboard</a>
                                            <a href=""{% url 'create game' %}"">Create Game</a>
                                            <a href=""{% url 'details profile' %}"">Profile</a>
                                        </nav>
                                    </header>

                                    {% block content %}
                                    {# information here #}
                                    {% endblock %}

                                    <footer>
                                        SoftUni Team 2022. All rights reserved.
                                    </footer>

                                </div>
                                </body>
                                </html>
    base.html ENDS HERE !




    Example of some the html files which must be looking something like this after inheritance ->
        home-page.html STARTS HERE ->

                                    {% extends 'base.html' %}
                                    {% load static %}
                                    {% block content %}

                                    <section id=""welcome-world"">
                                        <div class=""welcome-message"">
                                            <h2>ALL new games are</h2>
                                            <h3>Only in GamesPlay</h3>
                                        </div>
                                        <img src=""{% static '/images/four_slider_img01.png' %}"" alt=""hero"">
                                    </section>

                                    {% endblock %}

    home-page.html ENDS HERE !

    """"""

from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'django-insecure-s&yb=i*j3&w37cevb_ip&bijzi7sw^&ukc7((x9^u%+d!lqi3r'
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'games_play_app.my_web',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'games_play_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'games_play_app.wsgi.application'

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    ""default"": {
        ""ENGINE"": ""django.db.backends.postgresql"",
        ""NAME"": ""app_name_db"",
        ""USER"": ""postgres"",
        ""PASSWORD"": ""some_password"",
        ""HOST"": ""127.0.0.1"",
        ""PORT"": ""5432"",
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = 'static/'

STATICFILES_DIRS = (
    BASE_DIR / 'staticfiles',
)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
"
xSWCKMz3,Xtortion Emulator,Madwin74,C#,Tuesday 16th of May 2023 11:11:16 AM CDT,"/***********************************************************
 ***********************************************************
 **                                                       **
 **   Codesnippets written by Madwin for MMP 2023         **
 **                                                       **
 **   Not to be used freely. the code still has errors    **
 **   It's intended to be used as starting point.         **
 **   Code has not been checked and might still need      **
 **   (a lot of) work.                                    **
 **                                                       **
 **   ℗ & © MadMedia Productions 2023                     **
 **                                                       **
 ***********************************************************
 ***********************************************************
 **                                                       **
 **   -- Disclaimer: --                                   **
 **                                                       **
 **   If code is used in private projects and/or for      **
 **   study purposes please mention resource. Any other   **
 **   use -whether commercial or non-commercial- is not   **
 **   condoned by the author and violates his intent.     **
 **                                                       **
 **   madmedia@protonmail.com                             **
 **                                                       **
 ***********************************************************
 ***********************************************************/



using System;
using System.Collections.Generic;
using CSCore;
using CSCore.Codecs.WAV;
using CSCore.CoreAudioAPI;
using CSCore.SoundIn;
using CSCore.SoundOut;

namespace BossXTortionEmulator
{
    public class XTortionEmulator
    {
        private const int BufferSize = 4096;
        private readonly WaveIn waveIn;
        private readonly WasapiOut waveOut;
        private readonly byte[] inputBuffer;
        private readonly byte[] outputBuffer;
        private readonly List<short> distortionBuffer;
        private readonly double level;
        private readonly double punch;
        private readonly double contour;
        private readonly double distortion;

        public XTortionEmulator(double level, double punch, double contour, double distortion)
        {
            inputBuffer = new byte[BufferSize];
            outputBuffer = new byte[BufferSize];
            distortionBuffer = new List<short>();
            this.level = level;
            this.punch = punch;
            this.contour = contour;
            this.distortion = distortion;

            waveIn = new WaveInEvent();
            waveOut = new WasapiOut();

            waveIn.Initialize();
            waveIn.DataAvailable += WaveInOnDataAvailable;

            waveOut.Initialize(waveIn.WaveFormat);
        }

        public void Start()
        {
            waveIn.Start();
            waveOut.Play();
        }

        public void Stop()
        {
            waveIn.Stop();
            waveOut.Stop();
        }

        private void WaveInOnDataAvailable(object sender, WaveInEventArgs e)
        {
            int bytesRead = e.BytesRecorded;

            // Process input buffer
            for (int i = 0; i < bytesRead / 2; i++)
            {
                short sample = BitConverter.ToInt16(e.Buffer, i * 2);
                distortionBuffer.Add(sample);
            }

            // Apply distortion effect
            for (int i = 0; i < distortionBuffer.Count; i++)
            {
                short sample = distortionBuffer[i];

                // Apply level
                sample = (short)(sample * level);

                // Apply punch
                sample = (short)(sample * (1.0 + punch));

                // Apply contour
                double t = ((double)i / distortionBuffer.Count) * contour;
                sample = (short)(sample * (1.0 - t) + sample * t * t);

                // Apply distortion
                sample = (short)(sample * distortion);

                // Apply hard clipping
                if (sample > short.MaxValue)
                    sample = short.MaxValue;
                else if (sample < short.MinValue)
                    sample = short.MinValue;

                outputBuffer[i * 2] = (byte)(sample & 0xff);
                outputBuffer[i * 2 + 1] = (byte)(sample >> 8);
            }

            // Play output buffer
            waveOut.Write(outputBuffer, 0, bytesRead);

            // Clear distortion buffer
            distortionBuffer.Clear();
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            double level = 0.8; // Adjust the level parameter (0.0 to 1.0)
            double punch = 0.2; // Adjust the punch parameter (-1.0 to 1.0)
            double contour = 0.5; // Adjust the contour parameter (0.0 to 1.0)
            double distortion = 1.5; // Adjust the distortion parameter

            var emulator = new XTortionEmulator(level, punch, contour, distortion);
            emulator.Start();

            Console.WriteLine(""Press any key to stop..."");
			Console.ReadKey();
       		emulator.Stop();
   		}
	}

}

/*

The `XTortionEmulator` class accepts four parameters: `level`, `punch`, `contour`, and `distortion`. 
These parameters control the specific characteristics of the distortion effect.

- `level`: Controls the overall volume level of the output. Adjust the `level` parameter between 0.0 
	and 1.0 to set the desired volume level.
- `punch`: Adds punch or emphasis to the audio signal. Adjust the `punch` parameter between -1.0 and 1.0, 
	where negative values reduce the punch and positive values increase it.
- `contour`: Adjusts the contour or shape of the audio waveform. Adjust the `contour` parameter between 
	0.0 and 1.0 to set the desired contour effect.
- `distortion`: Controls the amount of distortion applied to the audio. Adjust the `distortion` parameter 
	to set the desired distortion level.

In the `Main` method, you can modify these parameters to experiment with different settings. 
Feel free to adjust the values based on your preferences.

Once you run the code, it will start emulating the Boss XTortion XT-2 pedal with the specified parameters. 
Press any key to stop the emulation.

Remember to add the `CSCore` NuGet package to your project before running the code.

*/"
yryhtnYi,Untitled,Josif_tepe,C++,Tuesday 16th of May 2023 11:03:29 AM CDT,"#include <iostream>
#include <vector>
#include <cstring>
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1e5 + 10;
const ll MOD = 1e9 + 7;
int n, k;
vector<int> graph[maxn];
int already_colored[maxn];
ll dp[maxn][5];
void dfs(int node, int prev) {
    //cout << node << endl;
    for(int i = 0; i < graph[node].size(); i++) {
        int sosed = graph[node][i];
        if(sosed == prev) continue;
        dfs(sosed, node);
    }
    for(int color = 1; color <= 3; color++) {
        if(already_colored[node] != color and already_colored[node] != -1) continue;
            dp[node][color] = 1;

        for(int i = 0; i < graph[node].size(); i++) {
            int sosed = graph[node][i];
            if(sosed == prev) continue;
            
            ll sum = 0;
            for(int next_color = 1; next_color <= 3; next_color++) {
                if(color == next_color) continue;
                sum += dp[sosed][next_color];
                sum %= MOD;
            }
            // cout << sum << endl;
            dp[node][color] *= sum;
            dp[node][color] %= MOD;
            
        }
    }
}
int main() {
    ifstream cin(""barnpainting.in"");
    ofstream cout(""barnpainting.out"");
    cin >> n >> k;
    for(int i = 0; i < n - 1; i++) {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    memset(already_colored, -1, sizeof already_colored);
    for(int i = 0; i < k; i++) {
        int b, c;
        cin >> b >> c;
        already_colored[b] = c;
    }
    dfs(1, -1);
  
  cout << (dp[1][1] + dp[1][2] + dp[1][3]) % MOD << endl;
    return 0;
}
"
SvZ8G5QK,Purchase a phony Monash University degree for a job online.,jf123123,C#,Tuesday 16th of May 2023 10:40:35 AM CDT,"How to buy fake Monash University degree? Order fake Monash University certificate online, Fake Monash University diploma for sale, Where to obtain replacement Monash University Academic transcript? buy fake diploma, buy fake degree, order fake certificate online.

Email: diplomacentersale@gmail.com 
WhatsApp: +86 19911539281
WeChat: +86 14779983878 
https://www.diploma888.com

It’s important to have a diploma if you’re searching for a job. They let potential employers know that you can be trusted to have the skills they expect. Yet, it’s what diplomas represent that really matters. It’s more important that you can actually do what you say you can; www.diploma888.com  it doesn’t really matter whether the piece of paper that says you can is genuine. And that’s why replacement diplomas can help your career as much as an actual diploma can."
y2fbcC4D,Untitled,ziriuz84,JavaScript,Tuesday 16th of May 2023 10:32:29 AM CDT,"

function iframeVisibleCallback() {
  console.log(""L'iframe è diventato visibile!"");

  // Accedi all'elemento iframe
  var iframe = document.querySelector(""#disponibilitaFrame"");

  // Verifica che l'iframe sia stato trovato e abbia un contenuto accessibile
  if (iframe && iframe.contentWindow) {
    // Carica il file JavaScript all'interno dell'iframe
    var script = iframe.contentWindow.document.createElement(""script"");
    script.src = ""themes/default/js/script.OrganizerDisponibilita.js"";
    script.onload = function () {
      // Chiamata alla funzione definita nel file JavaScript caricato
      iframe.contentWindow.Disponibilita.refresh();
    };
    iframe.contentWindow.document.body.appendChild(script);
  }
}

const divSelector = ""#Section15"";

const observer = new MutationObserver((mutationList) => {
  for (let mutation of mutationList) {
    if (
      mutation.target.matches(divSelector) &&
      mutation.type === ""attributes"" &&
      mutation.attributeName === ""class""
    ) {
      const targetElement = mutation.target;
      const classList = targetElement.classList;
      if (!classList.contains(""ui-tabs-hide"")) {
        iframeVisibleCallback();
        observer.disconnect();
        break;
      }
    }
  }
});

const observerOptions = {
  attributes: true,
  attributeFilter: [""class""],
};

document.addEventListener(""DOMContentLoaded"", () => {
  observer.observe(document.querySelector(divSelector), observerOptions);
});
"
EfLVHhMj,Untitled,Josif_tepe,C++,Tuesday 16th of May 2023 10:30:24 AM CDT,"#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
const int maxn=5005;
vector<int>graph[maxn];
int arr[maxn];
int parent[maxn];
int dp[maxn];
int dfs(int pos){
if(dp[pos]!=-1){
    return dp[pos];
}
    
int r1=arr[pos];
for(int i=0; i<graph[pos].size(); i++){
    int sosed=graph[pos][i];
    for(int j=0; j<graph[sosed].size(); j++){
        int sosed_2=graph[sosed][j];
        r1+=dfs(sosed_2);
    }
}
int r2=0;
for(int i=0; i<graph[pos].size(); i++){
    r2+=dfs(graph[pos][i]);
}
return dp[pos]=max(r1, r2);
}



int main()
{
    int n;
    cin>>n>>arr[0];
    int a, b;
    for(int i=1; i<n; i++){
    cin>>arr[i]>>b;
    a=i;
    parent[i]=b;
    graph[b].push_back(i);
    }
    memset(dp, -1, sizeof dp);
    cout<<dfs(0);
    return 0;
}
"
KvFt527X,Untitled,sserban21,Python,Tuesday 16th of May 2023 10:29:32 AM CDT,"#PB1
import torch
from torch import nn
import torch.nn.functional as F
import matplotlib.pyplot as plt
import math
import os
import requests
import zipfile
import collections

torch.manual_seed(42);

def show_heatmaps(matrices, xlabel, ylabel, titles=None, figsize=(2.5, 2.5),
                  cmap='Reds'):
    """"""Show heatmaps of matrices.""""""
    num_rows, num_cols = matrices.shape[0], matrices.shape[1]
    fig, axes = plt.subplots(num_rows, num_cols, figsize=figsize,
                             sharex=True, sharey=True, squeeze=False)
    for i, (row_axes, row_matrices) in enumerate(zip(axes, matrices)):
        for j, (ax, matrix) in enumerate(zip(row_axes, row_matrices)):
            pcm = ax.imshow(matrix.detach().numpy(), cmap=cmap)
            if i == num_rows - 1:
                ax.set_xlabel(xlabel)
            if j == 0:
                ax.set_ylabel(ylabel)
            if titles:
                ax.set_title(titles[j])
    fig.colorbar(pcm, ax=axes, shrink=0.6);

# No. of training examples
n_train = 100 
# Training inputs
x_train, _ = torch.sort(torch.rand(n_train) * 5)

def f(x):
    return -4 * torch.cos(x) + 3*x

# Training outputs
y_train = f(x_train) + torch.normal(0.0, 0.08, (n_train,))
# Testing examples  
x_test = torch.arange(0, 10, 0.1)
# Ground-truth outputs for the testing examples  
y_truth = f(x_test)
# No. of testing examples
n_test = len(x_test)

def plot_kernel_reg(y_hat):
    plt.plot(x_test, y_truth, label='Truth')
    plt.plot(x_test, y_hat, label='Pred')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.xlim([-2, 12])
    plt.ylim([-5, 20])
    plt.legend()
    plt.plot(x_train, y_train, 'o', alpha=0.5);

# Shape of `X_repeat` is: (`n_test`, `n_train`), where each row contains the
# same testing inputs (i.e., same queries)
X_repeat = x_test.repeat_interleave(n_train).reshape((-1, n_train))
# Note that `x_train` contains the keys. Shape of `attention_weights` is:
# (`n_test`, `n_train`), where each row contains attention weights to be
# assigned among the values (`y_train`), given each query
attention_weights = F.softmax(-(X_repeat - x_train)**2 / 2, dim=1)
# Each element of `y_hat` is a weighted average of values, where weights are
# attention weights
y_hat = torch.matmul(attention_weights, y_train)
plot_kernel_reg(y_hat)

show_heatmaps(attention_weights.unsqueeze(0).unsqueeze(0),
              xlabel='Sorted training inputs',
              ylabel='Sorted testing inputs')"
GBntFyxh,Untitled,Astral_Rider,C++,Tuesday 16th of May 2023 10:26:26 AM CDT,"#include <bits/stdc++.h>
using namespace std;

const int maxn = 2e5 + 5;
int a[maxn];

int main()
{
    int n, diff = 0;
    cin >> n;
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
        if (a[i] != a[i - 1] && i != 1)
            diff = 1;
    }

    if (!diff)
        cout << a[1] * 2;
    else
    {
        sort(a + 1, a + n + 1, greater<int>());
        int cnt = unique(a + 1, a + n + 1) - (a + 1);

        int l = 0, r = 0;
        for (int i = 1; i <= cnt; i++)
        {
            if (l == 0)
                l = a[i];
            else if (r == 0)
                r = a[i];
            else
            {
                int lt = l - __gcd(l, a[i]),
                    rt = r - __gcd(r, a[i]);
                if (lt < rt)
                    l = __gcd(l, a[i]);
                else
                    r = __gcd(r, a[i]);
            }
        }

        cout << l + r;
    }

    system(""Pause"");
    return 0;
}"
wjTJcs0G,How to buy fake La Trobe University degree?,jf123123,C,Tuesday 16th of May 2023 10:25:52 AM CDT,"How to buy fake La Trobe University degree? Order fake La Trobe University certificate online, Fake La Trobe University degree certificate for sale, Where to get a La Trobe University diploma? buy fake diploma, buy fake degree, order fake certificate online.

Email: diplomacentersale@gmail.com 
WhatsApp: +86 19911539281
WeChat: +86 14779983878 
https://www.diploma888.com

It’s important to have a diploma if you’re searching for a job. They let potential employers know that you can be trusted to have the skills they expect. Yet, it’s what diplomas represent that really matters. It’s more important that you can actually do what you say you can; www.diploma888.com  it doesn’t really matter whether the piece of paper that says you can is genuine. And that’s why replacement diplomas can help your career as much as an actual diploma can."
zhwBaHHt,Untitled,MeehoweCK,C++,Tuesday 16th of May 2023 10:16:07 AM CDT,"#include <iostream>
#include <cmath>

using namespace std;

struct Point
{
    float x;
    float y;
};

float dlugosc(Point a, Point b)
{
    float dlugosc;
    dlugosc=sqrt(((a.x-b.x)*(a.x-b.x))+((a.y-b.y)*(a.y-b.y)));
    return dlugosc;
}

float poletrojkata(Point a, Point b, Point c)
{
    float A = dlugosc(b, c);
    float B = dlugosc(a, c);
    float C = dlugosc(a, b);

    float p;
    p=(A + B + C)/2;
    return sqrt(p*(p-A)*(p-B)*(p-C));
}

int main()
{
    Point a, b, c;
    a.x = 0;
    a.y = 0;
    b.x = 4;
    b.y = 0;
    c.x = 0;
    c.y = 3;
    cout << poletrojkata(a, b, c);
    return 0;
}
"
KdwzYm2q,delete,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 10:05:06 AM CDT,"var fs = require('fs');


fs.unlink(""textRenamed.txt"", function(err){

    if(err) throw err;
    
    console.log(""File deleted successfully!"");


});"
Jvd6fmWi,AddArray2D,cuniszkiewicz,C#,Tuesday 16th of May 2023 10:04:42 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Arrays_2d_first
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[,] a = new int[3, 3];
            int[,] b = new int[3, 3];
            int[,] c = new int[3, 3];

            Console.WriteLine(""Array a:"");
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    Console.Write($""a[{i},{j}]: "");
                    a[i, j] = int.Parse(Console.ReadLine());
                }
                Console.WriteLine();
            }
            Console.Clear();
            Console.WriteLine(""Array b:"");
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    Console.Write($""b[{i},{j}]: "");
                    b[i, j] = int.Parse(Console.ReadLine());
                }
                Console.WriteLine();
            }
            Console.Clear();
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    Console.Write($""{a[i, j]}\t"");
                }
                Console.WriteLine();
            }
            Console.WriteLine(""\n\t+\n"");
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    Console.Write($""{b[i, j]}\t"");
                }
                Console.WriteLine();
            }
            Console.WriteLine(""\n\t=\n"");
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    c[i, j] = a[i, j] + b[i, j];
                    Console.Write($""{c[i,j]}\t"");
                }
                Console.WriteLine();
            }
            Console.ReadKey();
        }
    }
}
"
N4rApFYw,rename,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 10:04:29 AM CDT,"var fs = require('fs');


fs.rename(""Text.txt"", ""textRenamed.txt"", function(err){

    if(err) throw err;
    
    console.log(""File renamed successfully!"");


});"
x9CGyaMm,read,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 10:03:43 AM CDT,"var fs = require('fs');


fs.readFile(""Text.html"", ""utf8"", function(err, data){

    if(err) throw err;
    
    console.log(data);


});"
jRvyKyuA,append,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 10:02:56 AM CDT,"var fs = require('fs');

var data = ""\n\nThis part is added using fs.appendFile()."";

fs.appendFile(""Text.txt"", data, function(err){

    if(err) throw err;
    
    console.log(""File appended successfully!"");


});"
aKbVnYUq,write,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 10:01:40 AM CDT,"var fs = require('fs');

var data = ""Hello world!\nThis is text written by NodeJS using fs.writeFile()"";


fs.writeFile(""Text.txt"", data, function(err){

    if(err) throw err;
    
    console.log(""File written successfully!"");


});"
DUF0nx7E,Untitled,Daniilsadaweq,PHP,Tuesday 16th of May 2023 09:58:17 AM CDT,"<?php
error_reporting(E_ERROR | E_PARSE);
include('simple_html_dom.php');
if(isset($_POST[""ok""])){
    $files = glob('downloads/*');
    foreach($files as $file){
        if(is_file($file)) {
            unlink($file);
        }
    }
    $url = $_POST[""url""];
    $destDir = ""downloads/"";
    $isOk = true;
    try{
        $html = file_get_html($url);
    } catch (Exception $e) {
        $isOk = false;
        $e->getMessage();
        echo ""issue with file_get_html()"";
        echo $e->getMessage();
    }
    if ($isOk && $html) {
        foreach($html->find(""img"") as $img){
            $src = $img->src;
            $filename=substr($img->src,strrpos($img->src,""/"")+1);
            if (strtolower(substr($src, 0, 5)) != 'http:' && strtolower(substr($src, 0, 6)) != 'https:') $src = $url.$src;
                file_put_contents($destDir.$filename, file_get_contents($src));
        }
        $html->clear();
    } else {
        echo ""Error, html var is null"";
    } 
    unset($html);
}

?>
<!doctype html>
<html lang=""en"">
  <head>
  
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">

   
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"" crossorigin=""anonymous"">
    

    <title>Task 1 lab 7</title>
  </head>
  <body>
    <div class=""container"" id=""mainDiv""> 
      <form method=""post"">
  <div class=""mb-3"">
    <input style=""margin-top: 15px;"" type=""text"" class=""form-control"" name=""url"" placeholder=""Введите ссылку"">
  </div>
  <button type=""submit"" name=""ok"">Ввести</button>
</form>
</div> 
    </div>  
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"" crossorigin=""anonymous""></script>
  </body>
</html>






<?php
function deleteDirectory($dir) {
    if (!file_exists($dir)) {
        return true;
    }

    if (!is_dir($dir)) {
        return unlink($dir);
    }

    foreach (scandir($dir) as $item) {
        if ($item == '.' || $item == '..') {
            continue;
        }

        if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {
            return false;
        }

    }

    return rmdir($dir);
}

include('simple_html_dom.php');
$url=""http://wallpaperswide.com"";
$dumpDir=""downloads/"";
deleteDirectory(""downloads"");
mkdir(""downloads/"");
$html=file_get_html($url);
$i = 0;
foreach($html->find(""a"") as $a){
    $href = $a->href;
    if(!$href || strlen($href) == 1){
        $href="""";
        continue;
    }
    $dirName=$a->plaintext;
    if (!file_exists($dumpDir.$dirName)) {
        mkdir(""{$dumpDir}{$dirName}"", 0700);
    }
    $link=""{$url}{$href}"";
    echo $link . ""  "";
    $link=file_get_html($link);
    $dir = $dumpDir.$dirName;
    foreach($link->find(""img"") as $img){
        $src=$img->src;
        $filename=substr($img->src,strrpos($img->src,""/"")+1);
        if (strtolower(substr($src, 0, 5)) != 'http:' && strtolower(substr($src, 0, 6)) != 'https:') $src = $url.$src;
            file_put_contents(""{$dir}/{$filename}"", file_get_contents($src));
    }
    $link->clear();
    unset($link);
    $i ++;
    if ($i > 7) {
        break;
    }
}
$html->clear();
unset($html);

?>







<?php
$weather="""";
$tempArr=[];
if(isset($_GET[""city""])){
    $urlContent= file_get_contents(""https://api.openweathermap.org/data/2.5/weather?q="".$_GET['city'].""&units=metric&appid=67c7b650985884d025a03aa46189006f"");
    $forecastArray=json_decode($urlContent,true);
    if($forecastArray['cod']==200){
        $tempArr[]=$forecastArray['main']['temp'];
    }
    $urlContent= file_get_contents(""https://api.weatherbit.io/v2.0/current?city="".$_GET['city'].""&key=d673ba719ab5419f874a0edb4d8e81f9&include=minutely"");
    $forecastArray=json_decode($urlContent,true);
    $tempArr[]=$forecastArray[""data""][0]['temp'];

    $urlContent= file_get_contents(""https://api.weatherapi.com/v1/current.json?key=9b99114183494ba8b05155145222604&q="".$_GET['city']);
    $forecastArray=json_decode($urlContent,true);
    $tempArr[]=$forecastArray[""current""][""temp_c""];

    $urlContent= file_get_contents(""https://api.tomorrow.io/v4/timelines?location="".$_GET['city'].""&fields=temperature&timesteps=1h&units=metric&apikey=ECYOtyV5jlObuatyW683vc44UWzFGlAp"");
    $forecastArray=json_decode($urlContent,true);
    $tempArr[]=$forecastArray[""data""][""timelines""][0][""intervals""][0][""values""][""temperature""];
    
    $sum = 0;
    foreach($tempArr as $temperature){
        $sum+=$temperature;
    }
    $temperature=$sum/4;
    $weather=""The weather in "".$_GET['city']."" is {$temperature}"";
}
else{
    $error=""City name is incorret"";
}

?>
<!doctype html>
<html lang=""en"">
  <head>
    <title>Weather App</title>
  </head>
  <body>
    <div class=""container"" id=""mainDiv"">
      <form>
        <label for=""city"" class=""form-label"">Input a city name</label>
        <input type=""text"" class=""form-control"" name=""city"" id=""city"">
  <button type=""submit"" class=""btn btn-primary"">Submit</button>
</form>
</div>
    <div id=""forecastDiv"">
        <?php 
        if($weather){
            echo '<div class=""alert alert-success"" role=""alert"">'.$weather.'</div>';
        } 
        else if ($error)
        {
            echo '<div class=""alert alert-danger"" role=""alert"">'.$error.'</div>';  
        }
   
        ?>
        </div>
    </div>


    
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"" crossorigin=""anonymous""></script>

   
  </body>
</html>"
rzCh94Tb,Untitled,Josif_tepe,C++,Tuesday 16th of May 2023 09:56:43 AM CDT,"#include <iostream>
#include <vector>
 
using namespace std;
typedef long long ll;
const int maxn = 300004;
const ll MOD = 1e9 + 7;
vector<int> graph[maxn];
ll dp[maxn][2];
void dfs(int node, int prev) {
    dp[node][0] = 1; // 1 with white
    dp[node][1] = 1; // 1 with black
    
    for(int i = 0; i < graph[node].size(); i++) {
        int sosed = graph[node][i];
        if(sosed == prev) continue;
        dfs(sosed, node);
        dp[node][0] *= (dp[sosed][0] + dp[sosed][1]) % MOD;
        dp[node][1] *= dp[sosed][0] % MOD;
        dp[node][0] %= MOD;
        dp[node][1] %= MOD;
                    
                        
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    for(int i = 0; i < n - 1; i++) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    dfs(0, -1);
    cout << (dp[0][0] + dp[0][1]) % MOD << endl;
    
    return 0;
}
"
z05pyzNA,Untitled,MeehoweCK,C++,Tuesday 16th of May 2023 09:43:25 AM CDT,"#include <iostream>

using namespace std;

const int N = 5;

struct Student
{
    string imie;
    string nazwisko;
    string e_mail;
    int rok_studiow;
    float srednia_ocena;
};

Student wczytaj()
{
    Student x;
    cout<<""Wprowadz ""<<endl;
    cout<<""Imie"";
    cin>>x.imie;
    cout<<""Nazwisko "";
    cin>>x.nazwisko;
    cout<<""e-mail"";
    cin>>x.e_mail;
    cout<<""Rok studiow"";
    cin>>x.rok_studiow;
    cout<<""Srednia ocena"";
    cin>>x.srednia_ocena;
    return x;
}

void wypisz(Student x)
{
    cout<<""Nazwisko ""<<x.nazwisko<<endl;
    cout<<""Imie ""<<x.imie<<endl;
    cout<<""e-mail ""<<x.e_mail<<endl;
    cout<<""Rok studiow ""<<x.rok_studiow<<endl;
    cout<<""Srednia ocena ""<<x.srednia_ocena<<endl;
}

void wczytaj(Student &x)
{
    cout<<""Wprowadz ""<<endl;
    cout<<""Imie "";
    cin>>x.imie;
    cout<<""Nazwisko "";
    cin>>x.nazwisko;
    cout<<""e-mail "";
    cin>>x.e_mail;
    cout<<""Rok studiow "";
    cin>>x.rok_studiow;
    cout<<""Srednia ocena "";
    cin>>x.srednia_ocena;
}

float srednia(Student* tablica)
{
    float suma = 0;
    for(int i = 0; i < N; ++i)
        suma += tablica[i].srednia_ocena;
    return suma / N;
}

int main()
{
    Student tablica[N];
    for(int i = 0; i < 5; ++i)
        wczytaj(tablica[i]);
    
    cout << ""Srednia ocen dla wszystkich studentow wynosi "" << srednia(tablica) << endl;
    
    return 0;
}
"
zCU4GHEP,Untitled,MeehoweCK,C++,Tuesday 16th of May 2023 09:35:32 AM CDT,"#include <iostream>

using namespace std;
struct Student
{
    string imie;
    string nazwisko;
    string e_mail;
    int rok_studiow;
    float srednia_ocena;
};

Student wczytaj()
{
    Student x;
    cout<<""Wprowadz ""<<endl;
    cout<<""Imie"";
    cin>>x.imie;
    cout<<""Nazwisko "";
    cin>>x.nazwisko;
    cout<<""e-mail"";
    cin>>x.e_mail;
    cout<<""Rok studiow"";
    cin>>x.rok_studiow;
    cout<<""Srednia ocena"";
    cin>>x.srednia_ocena;
    return x;
}

void wypisz(Student x)
{
    cout<<""Nazwisko ""<<x.nazwisko<<endl;
    cout<<""Imie ""<<x.imie<<endl;
    cout<<""e-mail ""<<x.e_mail<<endl;
    cout<<""Rok studiow ""<<x.rok_studiow<<endl;
    cout<<""Srednia ocena ""<<x.srednia_ocena<<endl;
}

void wczytaj(Student &x)
{
    cout<<""Wprowadz ""<<endl;
    cout<<""Imie "";
    cin>>x.imie;
    cout<<""Nazwisko "";
    cin>>x.nazwisko;
    cout<<""e-mail "";
    cin>>x.e_mail;
    cout<<""Rok studiow "";
    cin>>x.rok_studiow;
    cout<<""Srednia ocena "";
    cin>>x.srednia_ocena;
}

int main()
{
    Student student;
    wczytaj(student);
    wypisz(student);
    return 0;
}
"
q660vKXF,Untitled,Josif_tepe,C++,Tuesday 16th of May 2023 09:33:16 AM CDT,"#include <bits/stdc++.h>
  
using namespace std;
typedef long long ll;
const int INF = (1<<30);
const ll inf = (1LL << 55LL);
const int maxn = 300004;
vector<int> graph[maxn];
int arr[maxn];
int parent[maxn];
bool visited[maxn];
//1000000000
int n, S;
 
int tmpArr[maxn];
int ret;
void dfs(int node){
    if(node == 0){
        return;
    }
    int sosed;
    for(int i =0 ; i <(int)graph[node].size(); i ++){
        sosed = graph[node][i];
        if(sosed != parent[node])continue;
        if(tmpArr[node] > tmpArr[sosed]){
            ret ++;
            tmpArr[sosed] = tmpArr[node] ;
            dfs(sosed);
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin >> n >> arr[0];
    int a, b;
    for(int i = 1; i <= n; i ++){
        cin >> arr[i] >> b;
        a = i;
        parent[i] = b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    for(int j = 0; j <= n; j ++){
            tmpArr[j] = arr[j];
        }
    for(int i = 1; i <= n; i ++){
  
        ret = 0;
        S = i;
        dfs(i);
        cout << ret << ""\n"";
    }
    return 0;
}"
GdauRrn2,邀您一起看：《春闺秘史》小说_《春闺秘史》全文免费阅读_作者佚名 - 参考阅读网,xiaomianao666,JavaScript,Tuesday 16th of May 2023 09:18:07 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥《春闺秘史》小说_《春闺秘史》全文免费阅读_作者佚名 - 参考阅读网@@
6d1wEwK5,邀您一起看：我的书架,xiaomianao666,JavaScript,Tuesday 16th of May 2023 09:15:04 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥我的书架@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS+nei1luaWh+S7tlwiLFwicGF0aFwiOlwiY29uZmlnXCIsXCJydWxlXCI6XCJqczpcXG5sZXQgbWV0aG9kO1xcbmxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxuICAgIGV2YWwoXFxcImxldCBKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFwi5L6d6LWWXFxcIl07XFxufVxcbiQuZXhwb3J0cy5tZXRob2QgPSBtZXRob2Q7XFxuJC5leHBvcnRzLnZlcnNpb24gPSAxMDtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaOpeWPo+e8k+WtmFwiLFwicGF0aFwiOlwiamlla291XCIsXCJydWxlXCI6XCJqczpcXG5sZXQgbWV0aG9kO1xcbmxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxuICAgIGV2YWwoXFxcImxldCBKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICBtZXRob2QgPSBKdWNvbmZpZ1tcXFwi5L6d6LWWXFxcIl0ucmVwbGFjZShcXFwiLmpzXFxcIixcXFwiMi5qc1xcXCIpO1xcbn1cXG5yZXF1aXJlKG1ldGhvZCk7XFxuXFxuJC5leHBvcnRzID0ge1xcbiAgICDkuIDnuqc6IOS4gOe6pyxcXG4gICAg5LqM57qnOiDkuoznuqcsXFxuICAgIOWFrOWFsTog5YWs5YWxLFxcbiAgICDlsZ7mgKc6IOWxnuaAp1xcbn1cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS6keWPo+S7pOWvvOWFpVwiLFwicGF0aFwiOlwiaW1wb3J0XCIsXCJydWxlXCI6XCJqczpcXG5mdW5jdGlvbiBjbG91ZGltcG9ydCgpIHtcXG4gICAgbGV0IHJlbW90ZWZpbGU7XFxuICAgIGxldCBjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcIjtcXG4gICAgaWYgKGZpbGVFeGlzdChjZmdmaWxlKSkge1xcbiAgICAgICAgZXZhbChcXFwibGV0IEp1Y29uZmlnPVxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgICAgICByZW1vdGVmaWxlID0gSnVjb25maWdbXFxcIuS+nei1llxcXCJdLm1hdGNoKC9odHRwKHMpPzpcXFxcL1xcXFwvLipcXFxcLy8pWzBdICsgJ1NyY0p1U2V0LmpzJztcXG4gICAgfVxcbiAgICBpZihyZW1vdGVmaWxlKXtcXG4gICAgICAgIHJlcXVpcmUocmVtb3RlZmlsZSk7XFxuICAgICAgICByZXR1cm4gSllpbXBvcnQoaW5wdXQpO1xcbiAgICB9ZWxzZXtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/msqHmnInnlKjov4fogZrpmIXiiJrlsI/nqIvluo/vvJ9cXFwiO1xcbiAgICB9XFxufVxcbiQuZXhwb3J0cyA9IGNsb3VkaW1wb3J0KCk7XCJ9XSxcInBhcmFtc1wiOlwie1xcXCJsb25nQ2xpY2tcXFwiOlt7XFxcImpzXFxcIjpcXFwiKFxcXFxuKCkgPT4ge1xcXFxuICAgIHJlcXVpcmUoY29uZmlnLuS+nei1li5tYXRjaCgvaHR0cChzKT86XFxcXFxcXFwvXFxcXFxcXFwvLipcXFxcXFxcXC8vKVswXSArIFxcXFxcXFwiU3JjSnVQdWJsaWMuanNcXFxcXFxcIik7XFxcXG4gICAgcmV0dXJuICQoW1xcXFxcXFwiXFxcXFxcXFx1NGU2NlxcXFxcXFxcdTY3YjZcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcXHU2NTM2XFxcXFxcXFx1ODVjZlxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFxcdTUzODZcXFxcXFxcXHU1M2YyXFxcXFxcXCJdLCAxKS5zZWxlY3QoKGNmZ2ZpbGUsIEp1Y29uZmlnKSA9PiB7XFxcXG4gICAgICAgIEp1Y29uZmlnW1xcXFxcXFwiYnRubWVudTVcXFxcXFxcIl0gPSBpbnB1dDtcXFxcbiAgICAgICAgd3JpdGVGaWxlKGNmZ2ZpbGUsIEpTT04uc3RyaW5naWZ5KEp1Y29uZmlnKSk7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly9cXFxcXFxcXHU1ZGYyXFxcXFxcXFx1NTIwN1xcXFxcXFxcdTYzNjJcXFxcXFxcXHU0ZTNhXFxcXFxcXCIgKyBpbnB1dDtcXFxcbiAgICB9XFxcXG4gICAgLCBjZmdmaWxlLCBKdWNvbmZpZyk7XFxcXG59XFxcXG4pKClcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuWIh+aNouaMiemSrlxcXCJ9XX1cIixcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi6IGa6ZiF4oiaXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSMjI25vUmVjb3JkSGlzdG9yeSM7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjDvvJvvvJsgV2luNjTvvJvvvJsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA1LjAuMC4wIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczooXFxuKCkgPT4ge1xcbiAgICByZXF1aXJlKGNvbmZpZy7kvp3otZYubWF0Y2goL2h0dHAocyk/OlxcXFwvXFxcXC8uKlxcXFwvLylbMF0gKyBcXFwiU3JjQm9va0Nhc2UuanNcXFwiKTtcXG4gICAgYm9va0Nhc2UoKTtcXG59XFxuKSgpXCIsXCJncm91cFwiOlwiYiDpmIXor7tcIixcInVhXCI6XCJwY1wiLFwicHJlUnVsZVwiOlwiaWYgKCFjb25maWcu5L6d6LWWKSB7XFxuICAgIC8v6L+c56iL5L6d6LWW57Si5byV5paH5Lu25Luj55CG5Zyw5Z2A5YiX6KGoXFxuICAgIGxldCByZXF1aXJlbGlzdCA9IFsnaHR0cHM6Ly9yYXcuaXFpcS5pby8nLCAnaHR0cHM6Ly9naHByb3h5Lm5ldC9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vJywgJ2h0dHBzOi8vZ2hwcm94eS5jb20vaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLycsICdodHRwczovL2Nkbi5zdGF0aWNhbHkuY29tL2doLycsICdodHRwczovL2dpdGh1Yi5qZXZvbnMudmlwL2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8nXVxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVpcmVsaXN0Lmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICB0cnkgeyAvL+i/nOeoi+S+nei1lue0ouW8lVxcbiAgICAgICAgICAgIHJlcXVpcmUocmVxdWlyZWxpc3RbaV0gKyAnc3JjNDg1OTc5NjIvaGsvSnUvcmVxdWlyZS5qcycpO1xcbiAgICAgICAgICAgIGlmIChyZWx5ZmlsZSkge1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgbG9nKGUubWVzc2FnZSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgaW5pdENvbmZpZyh7XFxuICAgICAgICDkvp3otZY6IHJlbHlmaWxlXFxuICAgIH0pO1xcbiAgICBsZXQgY2ZnZmlsZSA9IFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL1NyYy9KdS9jb25maWcuanNvblxcXCI7XFxuICAgIGlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgZXZhbChcXFwibGV0IEp1Y29uZmlnPVxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgICAgICAgICAgSnVjb25maWdbXFxcIuS+nei1llxcXCJdID0gcmVseWZpbGUubWF0Y2goL2h0dHAocyk/OlxcXFwvXFxcXC8uKlxcXFwvLylbMF0gKyAnU3JjSnVNZXRob2QuanMnO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShjZmdmaWxlLCBKU09OLnN0cmluZ2lmeShKdWNvbmZpZykpO1xcbiAgICAgICAgfSBjYXRjaCAoZSkge31cXG4gICAgfVxcbn1cXG4vL2J5LuW4heKImmDkurrmiY0g6IGa5qih5p2/77yBXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuS+nei1luaWh+S7tlxcXCIsXFxcInBhdGhcXFwiOlxcXCJjb25maWdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5sZXQgbWV0aG9kO1xcXFxubGV0IGNmZ2ZpbGUgPSBcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1L2NvbmZpZy5qc29uXFxcXFxcXCI7XFxcXG5pZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxcXG4gICAgZXZhbChcXFxcXFxcImxldCBKdWNvbmZpZz1cXFxcXFxcIiArIGZldGNoKGNmZ2ZpbGUpICsgXFxcXFxcXCI7XFxcXFxcXCIpO1xcXFxuICAgIG1ldGhvZCA9IEp1Y29uZmlnW1xcXFxcXFwi5L6d6LWWXFxcXFxcXCJdO1xcXFxufVxcXFxuJC5leHBvcnRzLm1ldGhvZCA9IG1ldGhvZDtcXFxcbiQuZXhwb3J0cy52ZXJzaW9uID0gMTA7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5o6l5Y+j57yT5a2YXFxcIixcXFwicGF0aFxcXCI6XFxcImppZWtvdVxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCBtZXRob2Q7XFxcXG5sZXQgY2ZnZmlsZSA9IFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9TcmMvSnUvY29uZmlnLmpzb25cXFxcXFxcIjtcXFxcbmlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXFxcbiAgICBldmFsKFxcXFxcXFwibGV0IEp1Y29uZmlnPVxcXFxcXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFxcXFxcIjtcXFxcXFxcIik7XFxcXG4gICAgbWV0aG9kID0gSnVjb25maWdbXFxcXFxcXCLkvp3otZZcXFxcXFxcIl0ucmVwbGFjZShcXFxcXFxcIi5qc1xcXFxcXFwiLFxcXFxcXFwiMi5qc1xcXFxcXFwiKTtcXFxcbn1cXFxcbnJlcXVpcmUobWV0aG9kKTtcXFxcblxcXFxuJC5leHBvcnRzID0ge1xcXFxuICAgIOS4gOe6pzog5LiA57qnLFxcXFxuICAgIOS6jOe6pzog5LqM57qnLFxcXFxuICAgIOWFrOWFsTog5YWs5YWxLFxcXFxuICAgIOWxnuaApzog5bGe5oCnXFxcXG59XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5LqR5Y+j5Luk5a+85YWlXFxcIixcXFwicGF0aFxcXCI6XFxcImltcG9ydFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmZ1bmN0aW9uIGNsb3VkaW1wb3J0KCkge1xcXFxuICAgIGxldCByZW1vdGVmaWxlO1xcXFxuICAgIGxldCBjZmdmaWxlID0gXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL1NyYy9KdS9jb25maWcuanNvblxcXFxcXFwiO1xcXFxuICAgIGlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXFxcbiAgICAgICAgZXZhbChcXFxcXFxcImxldCBKdWNvbmZpZz1cXFxcXFxcIiArIGZldGNoKGNmZ2ZpbGUpICsgXFxcXFxcXCI7XFxcXFxcXCIpO1xcXFxuICAgICAgICByZW1vdGVmaWxlID0gSnVjb25maWdbXFxcXFxcXCLkvp3otZZcXFxcXFxcIl0ubWF0Y2goL2h0dHAocyk/OlxcXFxcXFxcL1xcXFxcXFxcLy4qXFxcXFxcXFwvLylbMF0gKyAnU3JjSnVTZXQuanMnO1xcXFxuICAgIH1cXFxcbiAgICBpZihyZW1vdGVmaWxlKXtcXFxcbiAgICAgICAgcmVxdWlyZShyZW1vdGVmaWxlKTtcXFxcbiAgICAgICAgcmV0dXJuIEpZaW1wb3J0KGlucHV0KTtcXFxcbiAgICB9ZWxzZXtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/msqHmnInnlKjov4fogZrpmIXiiJrlsI/nqIvluo/vvJ9cXFxcXFxcIjtcXFxcbiAgICB9XFxcXG59XFxcXG4kLmV4cG9ydHMgPSBjbG91ZGltcG9ydCgpO1xcXCJ9XVwifSIsInBpY1VybCI6Imh0dHBzOi8vbGFubWVpZ3VvamlhbmcuY29tL3R1Ymlhby9tb3JlLzI4Ni5wbmciLCJ0aXRsZSI6IuaIkeeahOS5puaetiJ9
umuLxCaK,datetimemodule,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 09:01:11 AM CDT,"exports.DateTime = function(){

    //Day names stored in an array
    let day_name = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    
    //Date object
    let date_obj = new Date();

    //toString not required if you are concating it
    let date = date_obj.getDate().toString();
    let month = (date_obj.getMonth()+1).toString();
    let year = date_obj.getFullYear().toString();

    //Day of the week
    let day = day_name[date_obj.getDay()];

    //dd-mm-yyyy
    let ddmmyyyy = date + '-' + month + '-' + year;

    let hours = date_obj.getHours().toString();
    let minutes = date_obj.getMinutes().toString();
    let secs = date_obj.getSeconds().toString();

    //time 24hrs
    let time = hours + ':' + minutes + ':' + secs;

    //JSON that will be sent
    let json = {""date"":ddmmyyyy, ""time"":time, ""day"":day};


    return json;
};"
cpCtK93q,DateTimePage,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 09:00:37 AM CDT,"const http = require('http');
//the custom module for date and time
const dateTime = require('./datetimemodule.js');

http.createServer(function(req, res){

    //Some css in this div
    res.write(""<div style='text-align:center; font-family:Calibri; font-size:40px'>"");
    //Date
    res.write(""<h1>Date : "" + dateTime.DateTime().date + ""</h1>"");
    //Time
    res.write(""<h1>Time : "" + dateTime.DateTime().time + ""</h1>"");
    //Day
    res.write(""<h1>Day : "" + dateTime.DateTime().day + ""</h1>"");

    res.write(""</div>"");
    res.end();

}).listen(8050);"
jhw2QCzU,custom,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 08:57:09 AM CDT,"exports.customModule = function(){
    return Date();
}"
tnBRFhcF,page,AnindyaBiswas,JavaScript,Tuesday 16th of May 2023 08:56:15 AM CDT,"var http = require('http');

//custom module
var cm = require('./custom.js');

http.createServer(function(req, res) {

    res.write(cm.customModule());
    res.end();

}).listen(8080);"
dTbfMPQh,heswallgolfclub.com - Windows Hosting Fix,CodeDropz,PHP,Tuesday 16th of May 2023 08:53:08 AM CDT,"function codedropz_abs_path( $path ){
	$path = str_replace( '/', '\\', $path );
	return $path;
}

add_filter( 'dnd_cf7_abs_path', 'codedropz_abs_path'"
GzwvtuGi,Matice,SimonJkAdamek,Python,Tuesday 16th of May 2023 08:50:11 AM CDT,"def nacti_matici(rozmer):
    if rozmer < 2:
        print(""Rozměr musí být alespoň 2"")
        return

    matice = [[] for i in range(rozmer)]
    for i in range(rozmer):
        for j in range(rozmer):
            matice[i].append(int(input(""Zadej číslo na řádku {} a sloupci {}: "".format(i+1, j+1))))
    return matice


def soucet(maticeA, maticeB):
    for i in range(len(maticeA)):
        for j in range(len(maticeA)):
            maticeA[i][j]+=maticeB[i][j]
    return maticeA

rozmer = int(input(""zadej rozměr: ""))

print(""Zadej hodnoty první matice: "", end=""\n\n"")
matice1 = nacti_matici(rozmer)

print()

print(""Zadej hodnoty druhé matice: "", end=""\n\n"")
matice2 = nacti_matici(rozmer)

matice = soucet(matice1, matice2)

print()
for i in range(rozmer):
    for j in range(rozmer):
        print(""{0:^5s}"".format(str(matice[i][j])), end="""")
    print()

"
Fu8isUcT,Untitled,MAD_MEchaniculus,Python,Tuesday 16th of May 2023 08:28:24 AM CDT,"import socket
import json

def main():
    UDP_PORT = 14000
    UDP_IP = ""172.16.13.97""

    userQuery = {
        ""QUERY"": ""set"",
        ""ITEM"": ""processor"",
        ""FIELD"": ""atten"",
        ""VALUE"": 0
    }

    # СОздание и открытие пользовательского сокета
    userSock = socket.socket(socket.AF_INET,
                             socket.SOCK_DGRAM)

    userSock.bind((""0.0.0.0"", UDP_PORT))
    userSock.sendto(str.encode(json.dumps(userQuery)), (UDP_IP, UDP_PORT))

    data, addr = userSock.recvfrom(1024)
    print(""received message: %s"" % data.decode())

    response = json.loads(data.decode())

main()"
jxZjLJaR,Untitled,DimitarSerg,C#,Tuesday 16th of May 2023 08:25:40 AM CDT,"        private static bool ByteArrayToFile(string fileName, byte[] byteArray, int offset)
        {
            try
            {
                if (offset == 0)
                {
                    using (var fs = new FileStream(fileName, FileMode.Create, FileAccess.Write))
                    {
                        fs.Write(byteArray, 0, byteArray.Length);
                        return true;
                    }
                }
                else
                {
                    using (var fs = new FileStream(fileName, FileMode.Append, FileAccess.Write))
                    {
                        Console.WriteLine(offset + "" "" + byteArray.Length);
                        fs.Write(byteArray, offset, byteArray.Length);
                        return true;
                    }
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(""Exception caught in process: {0}"", ex);
                return false;
            }
        }"
kueu8eAC,Untitled,megaterminatorm,JavaScript,Tuesday 16th of May 2023 08:18:39 AM CDT,"const os = require('os');
const http = require('http');
const oracledb = require('oracledb');
const oracleUser = 'STARCINEMARF';
const oraclePass = 'STARCINEMARF';
const oracleConnectString = '192.168.100.120/ORCL';
const oracleClientPathDev = '\\ORA_x64';
const oracleClientPathDomino = 'C:\\app\\admin\\product\\11.2.0\\dbhome_1\\BIN';
const dominoIP = '192.168.100.120';
const serverHost = '0.0.0.0';
const serverPort = 8851;
const refreshTime = 2; // minutes

const tFormat = (t) => { // YYYY-MM-DD HH:MM:SS
    t = t || new Date();
    return t.getFullYear() + '-' +
    [t.getMonth()+1, t.getDate()].map(i => i < 10 ? '0'+i : i).join('-') + ' ' +
    [t.getHours(), t.getMinutes(), t.getSeconds()].map(i => i < 10 ? '0'+i : i).join(':');
}

console.log('-----------------------------------------------------------');
console.log(`${tFormat()} running...`);

let showslist = {
    'seances': undefined
};
let showslistJSON = JSON.stringify(showslist);
let refreshing = false;

let isDominoServer = false;
let networkInterfaces = os.networkInterfaces();
for (let i in networkInterfaces) {
    if (Object.hasOwnProperty.call(networkInterfaces, i)) {
        let networkInterface = networkInterfaces[i];
        for (let i = 0; i < networkInterface.length; i++) {
            let prop = networkInterface[i];
            if (isDominoServer || prop['address'] == dominoIP) {
                isDominoServer = true;
            }
        }
    }
}
console.log(`is DOMINO server: ${isDominoServer}`);

let oracleClientPath = isDominoServer ? oracleClientPathDomino : __dirname + oracleClientPathDev;
try {
    oracledb.initOracleClient({ libDir: oracleClientPath });
    oracledb.outFormat = oracledb.OUT_FORMAT_OBJECT;
} catch (err) {
    console.error(err);
    process.exit(1);
}

async function refresh() {

    let connection;
    try {
        connection = await oracledb.getConnection({
            user: oracleUser,
            password: oraclePass,
            connectString: oracleConnectString,
            // privilege     : oracledb.SYSDBA
        });

        const getHalls = await connection.execute(
            `SELECT
            halls.F7602179 as id,
            halls.Name     as name,
            halls.PID      as pid
            FROM   DB1_AGENT halls
            WHERE (halls.TYPE = 42401803)`
        );
        let halls = getHalls.rows;
        let hallsByID = {};
        for (let i = 0; i < halls.length; i++) {
            const hall = halls[i];
            hallsByID[hall.ID.toString('hex')] = hall.NAME;
        }

        const getSeancesToday = await connection.execute(
            `SELECT seances.ID as showid,
            seances.DOC_DATE  as showdatetime,
            seances.F25690117 as showdate
            FROM   DB1_DOCUMENT seances
            WHERE  (seances.TYPE = 25690113)
            and (seances.F25690117 = TO_DATE(SYSDATE, 'DD/MM/YY'))
            ORDER BY seances.DOC_DATE`
        );
        let seancesToday = getSeancesToday.rows;

        let films = {};
        let shows = {};
        let currentTime = new Date();

        for (let i = 0; i < seancesToday.length; i++) {
            let seance = seancesToday[i];
            let t = new Date(seance.SHOWDATETIME);

            // let currentShowTime = new Date();
            // currentShowTime.setMinutes(currentShowTime.getMinutes()-20)
            // if (currentShowTime > t || i > 5) {
            //     continue;
            // }

            let seanceTime = [t.getHours(), t.getMinutes()].map((i) => {
                return i < 10 ? '0' + i : i
            }).join(':');

            let binds = { 'seanceID': seance.SHOWID }
            const getSeanceDetails = await connection.execute(
                `SELECT seance.ID as showid,
                seance.DOC_DATE  as showdatetime,
                seance.F25690117 as showdate,
                seance.F25690116 as showtime,
                seance.F25690113 as showfilm,
                seance.PID       as showhall,
                seance.F25690115 as status
                FROM   DB1_DOCUMENT seance
                WHERE  (seance.TYPE = 25690113) and (seance.ID = :seanceID)`, binds
            );
            let seanceDetails = getSeanceDetails.rows[0];
            let filmID = seanceDetails.SHOWFILM.toString('hex');
            let hallID = seanceDetails.SHOWHALL.toString('hex');

            if (!films[filmID]) {
                let binds = { 'filmID': seanceDetails.SHOWFILM }
                const getFilm = await connection.execute(
                    `SELECT films.NAME as name
                    FROM DB1_PRODUCT films
                    WHERE films.ID = :filmID`, binds
                );
                films[filmID] = getFilm.rows[0].NAME;
            }

            binds = { 'hall': seanceDetails.SHOWHALL };
            const getHallrows = await connection.execute(
                `SELECT plan.F2162698 FROM DB1_DOCUMENT plan WHERE plan.ID = :hall`, binds
            );
            const getHallcolums = await connection.execute(
                `SELECT plan.F2162699 FROM DB1_DOCUMENT plan WHERE plan.ID = :hall`, binds
            );

            binds = { 'hall': seanceDetails.SHOWHALL };
            const getHall = await connection.execute(
                `SELECT
                hall.ID        as seatid,
                hall.F15073281 as seattype,
                hall.F15073283 as seatzone,
                hall.F2162692  as seatrownum,
                hall.F2162691  as seatnum,
                hall.F2162689  as seatindex
                FROM DB1_LINE hall
                WHERE (hall.DOCUMENT = :hall)
                ORDER BY seatindex ASC`, binds
            );

            let seatSUM = 0;

            for (let i = 0; i < getHall.rows.length; i++) {
                if (!isDominoServer) continue;
                let seat = getHall.rows[i];
                // console.log(seat.SEATROWNUM + ' ' + seat.SEATNUM);
                binds = { 'seanceID': seance.SHOWID, 'seatID': seat.SEATID };

                const getSeatStatus = await connection.execute(
                    `SELECT SUM(AMOUNT) FROM (
                        SELECT (DEBT_AMOUNT - CRDT_AMOUNT) AS AMOUNT FROM DB1_SALDO_25690113
                        WHERE (
                            (FINANCE_DEPT= HEXTORAW('9000000000000001')) AND
                            (ACCOUNT=HEXTORAW('0000008301880001')) AND
                            (A1=:seanceID) AND
                            (A2=:seatID) AND
                            (CURRENCY=HEXTORAW('0002002401AC0001'))
                        )
                        UNION ALL
                        SELECT (DEBT_AMOUNT - CRDT_AMOUNT) AS AMOUNT FROM DB1_SALDO_POOL
                        WHERE (
                            (FINANCE_DEPT= HEXTORAW('9000000000000001')) AND
                            (ACCOUNT=HEXTORAW('0000008301880001')) AND
                            (A1=:seanceID) AND
                            (A2=:seatID) AND
                            (CURRENCY=HEXTORAW('0002002401AC0001'))
                        )
                    )`, binds
                );
                // console.log(getSeatStatus.rows[0]['SUM(AMOUNT)']);
                if (getSeatStatus.rows[0]['SUM(AMOUNT)']) {
                    seatSUM++;
                }

            }

            // console.log(hallsByID[hallID] + ' ' + seanceTime + ' ' + films[filmID] + ' | ' + seatSUM);

            if (!shows[seanceDetails.SHOWID.toString('hex')]) {
                shows[seanceDetails.SHOWID.toString('hex')] = {
                    'showHall': hallsByID[hallID],
                    'showTime': t,
                    'showName': films[filmID],
                    'showSeatSUM': seatSUM,
                }
            }

        }

        currentTime = new Date();
        console.log(`${tFormat(currentTime)} refreshed`);
        let seances = [];
        for (const [key, value] of Object.entries(shows)) {
            seances.push(value);
        }
        showslist['seances'] = seances;
        showslistJSON = JSON.stringify(showslist);
        showslist['refreshTime'] = currentTime;
        refreshing = false;
    } catch (err) {
        console.error(err);
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error(err);
            }
        }
    }
}

// refresh();
setInterval(() => {
    let cTime = new Date();
    cTime.setMinutes(cTime.getMinutes() - refreshTime);
    if (!refreshing && (!showslist['refreshTime'] || showslist['refreshTime'] < cTime)) {
        showslist['refreshTime'] = new Date();
        console.log(`${tFormat(showslist['refreshTime'])} refreshing...`);
        refreshing = true;
        refresh();
    }
}, 5000);

http.createServer((req, res) => {
    if (req.url == '/seances') {
        let remoteAddress = req.headers['x-forwarded-for'] || req.socket.remoteAddress || 'unknown address';
        console.log(`${tFormat()} request from ${remoteAddress}`);
        res.setHeader(""Content-Type"", ""application/json"");
        res.writeHead(200);
        res.end(showslistJSON);
    }
}).listen(serverPort, serverHost, () => {
    console.log(`${tFormat()} listening on ${serverHost}:${serverPort}`);
});
"
8UNpRC7M,BinaryTree_1,SharpHurt,C#,Tuesday 16th of May 2023 08:14:26 AM CDT,"using System;
using System.Collections;
using System.Collections.Generic;

namespace BinaryTrees;

public class BinaryTreeNode<T> where T : IComparable
{
    public T Key { get; }
    public BinaryTreeNode<T> Left { get; set; }
    public BinaryTreeNode<T> Right { get; set; }

    public BinaryTreeNode(T key)
    {
        Key = key;
        Left = null;
        Right = null;
    }
}

public class BinaryTree<T> where T : IComparable
{
    private BinaryTreeNode<T> root;
    
    public void Add(T key)
    {
        if (root == null)
        {
            root = new BinaryTreeNode<T>(key);
            return;
        }

        var currentNode = root;
        var isKeyAdded = false;
        while (!isKeyAdded)
        {
            var comparisonResult = key.CompareTo(currentNode.Key);
            switch (comparisonResult)
            {
                case < 0 when currentNode.Left == null:
                    currentNode.Left = new BinaryTreeNode<T>(key);
                    isKeyAdded = true;
                    break;
                case > 0 when currentNode.Right == null:
                    currentNode.Right = new BinaryTreeNode<T>(key);
                    isKeyAdded = true;
                    break;
                default:
                    currentNode = comparisonResult < 0 ? currentNode.Left : currentNode.Right;
                    break;
            }
        }
    }

    public bool Contains(T key)
    {
        var currentNode = root;
        while (currentNode != null)
        {
            var comparisonResult = key.CompareTo(currentNode.Key);
            switch (comparisonResult)
            {
                case < 0:
                    currentNode = currentNode.Left;
                    break;
                case > 0:
                    currentNode = currentNode.Right;
                    break;
                default:
                    return true;
            }
        }

        return false;
    }
}"
