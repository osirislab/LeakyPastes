id,title,username,language,date,content
ABfbznCB,inspect,A_GUES,JavaScript,Tuesday 11th of July 2023 12:55:08 PM CDT,"javascript:(function () { 
    var script = document.createElement('script'); 
    script.src = ""//cdn.jsdelivr.net/npm/eruda""; 
    document.body.appendChild(script); 
    script.onload = function () { 
        eruda.init() 
    } 
})();

// Variables to store FPS information
let frameCount = 0;
let fps = 250;
let lastTime = performance.now();

// Function to update FPS
function updateFPS() {
  const currentTime = performance.now();
  const deltaTime = currentTime - lastTime;
  
  frameCount++;
  
  if (deltaTime >= 1000) {
    fps = frameCount;
    frameCount = 0;
    lastTime = currentTime;
  }
  
  requestAnimationFrame(updateFPS);
}

// Start calculating FPS
updateFPS();
"
Ns9i1w2U,Python namedtuple,alaex777,Python,Tuesday 11th of July 2023 12:48:29 PM CDT,"# 11.07.23

from collections import namedtuple


ShopItem = namedtuple('ShopItem', ['name', 'amount', 'price'])

shop_item = ShopItem(name='iphone', amount=100, price=999.99)

print(shop_item)
# ShopItem(name='iphone', amount=100, price=999.99)

print(shop_item.amount)
# 100

print(shop_item[0])
# iphone
"
jWY0FgkE,MainActivity.java (Video View Example),mmayoub,Java,Tuesday 11th of July 2023 12:46:24 PM CDT,"package com.example.myvideoviewplayer;

import androidx.appcompat.app.AppCompatActivity;

import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.VideoView;

public class MainActivity extends AppCompatActivity {
    private VideoView mVideoView;
    private Button btnPlay, btnStop;
    private Uri videoUri;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        mVideoView = findViewById(R.id.vvVideoView);
        btnPlay = findViewById(R.id.btnPlay);
        btnStop = findViewById(R.id.btnStop);

        initializeVideo();

        btnPlay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startVideo();
            }
        });

        btnStop.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                stopVideo();
            }
        });
    }

    private void initializeVideo() {
        String mediaName = ""video_file_example""; // file name from raw folder
        String uriString = ""android.resource://"" + getPackageName() + ""/raw/"" + mediaName;
        videoUri = Uri.parse(uriString);
        mVideoView.setVideoURI(videoUri);
    }

    private void startVideo() {
        if (!mVideoView.isPlaying()) {
            mVideoView.setVideoURI(videoUri);
            mVideoView.start();
            btnPlay.setEnabled(false);
            btnStop.setEnabled(true);
        }
    }

    private void stopVideo() {
        if (mVideoView.isPlaying()) {
            mVideoView.stopPlayback();
            btnPlay.setEnabled(true);
            btnStop.setEnabled(false);
        }
    }


    @Override
    protected void onPause() {
        stopVideo();
        super.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
        startVideo();
    }
}"
v3A2RNc4,activity_main.xml (Video View Example),mmayoub,XML,Tuesday 11th of July 2023 12:44:35 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:app=""http://schemas.android.com/apk/res-auto""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    tools:context="".MainActivity"">

    <VideoView
        android:id=""@+id/vvVideoView""
        android:layout_width=""0dp""
        android:layout_height=""0dp""
        android:layout_marginStart=""16dp""
        android:layout_marginTop=""16dp""
        android:layout_marginEnd=""16dp""
        android:layout_marginBottom=""16dp""
        app:layout_constraintBottom_toTopOf=""@+id/btnPlay""
        app:layout_constraintDimensionRatio=""4:3""
        app:layout_constraintEnd_toEndOf=""parent""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintTop_toTopOf=""parent"" />

    <Button
        android:id=""@+id/btnPlay""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_marginBottom=""16dp""
        android:text=""play""
        app:layout_constraintBottom_toBottomOf=""parent""
        app:layout_constraintEnd_toStartOf=""@+id/btnStop""
        app:layout_constraintHorizontal_bias=""0.5""
        app:layout_constraintStart_toStartOf=""parent"" />

    <Button
        android:id=""@+id/btnStop""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""stop""
        app:layout_constraintBottom_toBottomOf=""@+id/btnPlay""
        app:layout_constraintEnd_toEndOf=""parent""
        app:layout_constraintHorizontal_bias=""0.5""
        app:layout_constraintStart_toEndOf=""@+id/btnPlay""
        app:layout_constraintTop_toTopOf=""@+id/btnPlay"" />
</androidx.constraintlayout.widget.ConstraintLayout>"
UifLeKFE,Twinkie's Airlock Automation v2.1,LtTwinkie,C#,Tuesday 11th of July 2023 12:16:50 PM CDT,"/*
 * Twinkie Industries™ Automation Presents
 * Airlock Automation v2.1
 * 
 * This script will allow you to set up airlocks with vents and lights that will operate properly with a single button press or sensor trigger.
 * 
 * On the vent and any lights add the following to CustomData
 * [Airlock]
 * Name=airlockName
 * 
 * Also add it to the doors but include if the door is the outside door or not
 * [Airlock]
 * Name=airlockName
 * IsOutside=true
 * 
 * When you run the script using the name of the airlock as the argument it will properly cycle the airlock.
 */

// SETTINGS ---------------------------------------------------------------------------------------------------

// If you set a value for GRID_NAME, each block will require it in the name. This is used to prevent blocks from
// other grids being added.
public const string GRID_NAME = """";

// This timeout prevents the airlock getting stuck because the vent can't depressurize. For example, if there is
// no free space in an oxygen tank or no oxygen tank connected the vent won't be able to remove the air.
public const double VENT_TIMEOUT_SECONDS = 4.0;

// The normal color for the airlock light when it is pressurized
public static readonly Color PRESSURIZED_COLOR = Light.FLORESCENT_WARM;

// The color for the airlock light when it is depressurized
public static readonly Color UNPRESSURIZED_COLOR = Color.Red;


// END SETTINGS - PLEASE DO NOT EDIT BELOW --------------------------------------------------------------------

private Dictionary<string, Airlock> _airlocks = new Dictionary<string, Airlock>();
private List<string> _invalidAirlocks = new List<string>();

public Program()
{
    Refresh();
    Runtime.UpdateFrequency = UpdateFrequency.Update10;
}

public void Main(string argument, UpdateType updateSource)
{
    if (_invalidAirlocks.Count != 0)
    {
        Echo(""Invalid airlocks:"");
        foreach (string invalidAirlock in _invalidAirlocks)
        {
            Echo(invalidAirlock);
        }
        _invalidAirlocks.Clear();
    }

    if (string.IsNullOrWhiteSpace(argument))
    {
        foreach (var airlock in _airlocks.Values)
        {
            airlock.Update();
        }

        return;
    }

    string lower = argument.ToLowerInvariant();

    if (lower == ""lock"")
    {
        foreach (var airlock in _airlocks)
        {
            Echo($""Locking {airlock.Key}"");
            airlock.Value.Lock();
        }

        return;
    }

    if (lower == ""reset"")
    {
        foreach (var airlock in _airlocks)
        {
            Echo($""Resetting {airlock.Key}"");
            airlock.Value.Reset();
        }

        return;
    }

    if (lower == ""refresh"")
    {
        Echo($""Refresh arg"");
        Refresh();
        return;
    }

    if (_airlocks.ContainsKey(argument))
    {
        Airlock airlock;
        if (_airlocks.TryGetValue(argument, out airlock))
        {
            Echo($""Cycling {argument}"");
            airlock.Cycle();
        }
        else
        {
            Echo($""{argument} not found"");
        }
    }
}

public void Refresh()
{
    _airlocks.Clear();

    var airlockBlocks = new List<IMyTerminalBlock>();
    GridTerminalSystem.GetBlocksOfType(airlockBlocks, block => block.CustomName.Contains(GRID_NAME) && MyIni.HasSection(block.CustomData, CustomData.AIRLOCK));

    foreach (IMyTerminalBlock block in airlockBlocks)
    {
        CustomData customData;
        try
        {
            customData = new CustomData(block, Echo);
        }
        catch (Exception)
        {
            continue;
        }

        string airlockName = customData.Name;
        Airlock airlock;
        if (!_airlocks.TryGetValue(airlockName, out airlock))
        {
            airlock = _airlocks[airlockName] = new Airlock();
        }

        airlock.Add(block, customData);
    }

    foreach (KeyValuePair<string, Airlock> airlock in _airlocks)
    {
        if (!airlock.Value.IsFunctional)
        {
            _airlocks.Remove(airlock.Key);
            _invalidAirlocks.Add(airlock.Key);
        }
        else
        {
            airlock.Value.Reset();
        }
    }
}

/* Twinkie Industries™ Automation Presents
         * Airlock Automation v1.0*/

/*
         * This script will allow you to set up airlocks with vents and lights that will operate properly with a single button press or sensor trigger.
         *
         * On the vent and any lights add the following to CustomData
         * [Airlock]
         * Name=airlockName
         *
         * Also add it to the doors but include if the door is the outside door or not
         * [Airlock]
         * Name=airlockName
         * IsOutside=true
         *
         * When you run the script using the name of the airlock as the argument it will properly cycle the airlock.
         */

private class Airlock
{
    private enum State
    {
        /// <summary> Waiting for the doors to close </summary>
        Locking,

        /// <summary> Airlock is offline </summary>
        Locked,

        /// <summary> Closing both doors and pressurizing </summary>
        Resetting,

        /// <summary> Nothing happening </summary>
        Idle,

        /// <summary> Waiting for the door to close </summary>
        Closing,

        /// <summary> Waiting for venting </summary>
        Venting,

        /// <summary> Waiting for the door to open </summary>
        Opening,
    }

    public List<Door> DoorsIn = new List<Door>();
    public List<Door> DoorsOut = new List<Door>();
    public List<Vent> AirVents = new List<Vent>();
    public List<Light> Lights = new List<Light>();

    private State _state = State.Idle;
    private bool _openOut;
    private DateTime _nextAction;

    public bool IsFunctional => DoorsIn.Count != 0 && DoorsOut.Count != 0 && AirVents.Count != 0;

    public List<Door> AllDoors
    {
        get
        {
            var rv = new List<Door>(DoorsIn.Count + DoorsOut.Count);
            rv.AddRange(DoorsIn);
            rv.AddRange(DoorsOut);
            return rv;
        }
    }

    public void Add(IMyTerminalBlock block, CustomData customData)
    {
        if (block is IMyDoor)
        {
            MyIniValue isOutside = customData.Get(CustomData.IS_OUTSIDE);
            if (isOutside.IsEmpty)
                return;

            var door = new Door(block as IMyDoor);
            if (isOutside.ToBoolean())
            {
                DoorsOut.Add(door);
            }
            else
            {
                DoorsIn.Add(door);
            }
        }
        else if (block is IMyAirVent)
        {
            AirVents.Add(new Vent(block as IMyAirVent));
        }
        else if (block is IMyLightingBlock)
        {
            Lights.Add(new Light(block as IMyLightingBlock));
        }
    }

    public void Update()
    {
        if (_state == State.Idle || _state == State.Locked)
            return;

        // Un-timed states
        if (_state == State.Venting)
        {
            if (_openOut && Vent.AllDepressurized(AirVents) ||
                !_openOut && Vent.AllPressurized(AirVents) ||
                DateTime.UtcNow > _nextAction) // timeout
            {
                _nextAction = Door.OpenDoors(_openOut ? DoorsOut : DoorsIn);
                RefreshLights();
                _state = State.Opening;
            }

            return;
        }

        if (DateTime.UtcNow < _nextAction)
            return;

        // Timed states
        switch (_state)
        {
            // Cycle
            case State.Closing:
            {
                PowerOff();
                Vent.SetDepressurize(AirVents, _openOut);
                _nextAction = DateTime.UtcNow + TimeSpan.FromSeconds(VENT_TIMEOUT_SECONDS);
                _state = State.Venting;
                break;
            }
            case State.Opening:
            {
                PowerOff();
                RefreshLights();
                _state = State.Idle;
                break;
            }

            // Lock
            case State.Locking:
            {
                PowerOff();
                _state = State.Locked;
                break;
            }

            // Reset
            case State.Resetting:
            {
                Light.SetEnabled(Lights, true);
                RefreshLights();
                _state = State.Idle;
                break;
            }
        }
    }

    public void Cycle()
    {
        if (_state != State.Idle)
            return;

        _openOut = !_openOut;
        _nextAction = Door.CloseDoors(AllDoors);
        Light.SetColor(Lights, Color.Red);
        _state = State.Closing;
    }

    public void Reset()
    {
        _nextAction = Door.CloseDoors(AllDoors);
        Light.SetEnabled(Lights, true);
        _state = State.Resetting;
    }

    public void Lock()
    {
        _nextAction = Door.CloseDoors(AllDoors);
        Light.SetEnabled(Lights, false);
        _state = State.Locking;
    }

    private void PowerOff()
    {
        Door.SetEnabled(AllDoors, false);
    }

    private void RefreshLights()
    {
        Color color = Vent.AllPressurized(AirVents) ? PRESSURIZED_COLOR : UNPRESSURIZED_COLOR;
        Light.SetColor(Lights, color);
    }
}

private class CustomData
{
    public const string AIRLOCK = ""Airlock"";
    public const string IS_OUTSIDE = ""IsOutside"";
    private const string NAME = ""Name"";

    public MyIni Ini { get; } = new MyIni();

    public string Name => Ini.Get(AIRLOCK, NAME).ToString();

    public CustomData(IMyTerminalBlock block, Action<string> echo)
    {
        MyIniParseResult parseResult;
        if (!Ini.TryParse(block.CustomData, out parseResult))
        {
            echo?.Invoke(""Failed to parse ini"");
            throw new Exception(parseResult.ToString());
        }

        MyIniValue nameResult = Get(NAME);
        if (nameResult.IsEmpty)
        {
            string message = $""Can't find {NAME} setting for {block.CustomName}"";
            echo?.Invoke(message);
            throw new Exception(message);
        }
    }

    public MyIniValue Get(string key) => Ini.Get(AIRLOCK, key);
}

// Mixin
public class Door
{
    public const int DELAY_STANDARD_MILLIS = 1000;
    public const int DELAY_HANGAR_MILLIS = 10000;
    private int _customDelay;

    private bool _isHangar;

    public IMyDoor Block { get; }

    public bool Enabled { get { return Block.Enabled; } set { Block.Enabled = value; } }
    public DoorStatus Status => Block.Status;
    public float OpenRatio => Block.OpenRatio;
    public bool IsOpen => Block.Status == DoorStatus.Open;
    public bool IsClosed => Block.Status == DoorStatus.Closed;
    public bool IsTransitioning => !IsOpen && !IsClosed;

    public Door(IMyDoor block, int customDelay = 0)
    {
        Block = block;
        _customDelay = customDelay;
        _isHangar = block is IMyAirtightHangarDoor;
    }

    public static void SetEnabled(List<Door> doors, bool value)
    {
        foreach (Door door in doors)
        {
            door.Enabled = value;
        }
    }

    public static bool AnyOpened(List<Door> doors)
    {
        foreach (var door in doors)
        {
            if (door.Status == DoorStatus.Open)
                return true;
        }
        return false;
    }

    public static bool AnyClosed(List<Door> doors)
    {
        foreach (var door in doors)
        {
            if (door.Status == DoorStatus.Closed)
                return true;
        }
        return false;
    }

    public static DateTime OpenDoors(List<Door> doors)
    {
        DateTime maxDelay = DateTime.MinValue;
        foreach (Door door in doors)
        {
            DateTime delay = door.OpenDoor();

            if (delay > maxDelay)
                maxDelay = delay;
        }

        return maxDelay;
    }

    public static DateTime CloseDoors(List<Door> doors)
    {
        DateTime maxDelay = DateTime.MinValue;
        foreach (Door door in doors)
        {
            DateTime delay = door.CloseDoor();

            if (delay > maxDelay)
                maxDelay = delay;
        }

        return maxDelay;
    }

    public DateTime OpenDoor()
    {
        if (Block.Status != DoorStatus.Open)
        {
            Block.Enabled = true;
            Block.OpenDoor();
            return Delay();
        }

        return DateTime.MinValue;
    }

    public DateTime CloseDoor()
    {
        if (Block.Status != DoorStatus.Closed)
        {
            Block.Enabled = true;
            Block.CloseDoor();
            return Delay();
        }

        return DateTime.MinValue;
    }

    public DateTime ToggleDoor()
    {
        if (Block.Status == DoorStatus.Closed ||
            Block.Status == DoorStatus.Closing)
        {
            return OpenDoor();
        }

        return CloseDoor();
    }

    private DateTime Delay()
    {
        int standardDelay = _isHangar ? DELAY_HANGAR_MILLIS : DELAY_STANDARD_MILLIS;
        int delay = _customDelay != 0 ? _customDelay : standardDelay;
        return DateTime.UtcNow + TimeSpan.FromMilliseconds(delay);
    }
}

// Mixin
public class Light
{
    public static readonly Color SODIUM = new Color(255, 183, 76);
    public static readonly Color INCANDESCENT = new Color(255, 255, 210);
    public static readonly Color FLORESCENT_WARM = new Color(230, 255, 255);
    public static readonly Color FLORESCENT_COOL = new Color(175, 215, 255);

    public IMyLightingBlock Block { get; private set; }

    public bool OriginalEnabled { get; private set; }
    public float OriginalRadius { get; private set; }
    public float OriginalIntensity { get; private set; }
    public float OriginalFalloff { get; private set; }
    public float OriginalBlinkInterval { get; private set; }
    public float OriginalBlinkLength { get; private set; }
    public float OriginalBlinkOffset { get; private set; }
    public Color OriginalColor { get; private set; }

    public bool Enabled { get { return Block.Enabled;} set { Block.Enabled = value; } }
    public float Radius { get { return Block.Radius; } set { Block.Radius = value; } }
    float Intensity { get { return Block.Intensity; } set { Block.Intensity = value; } }
    float Falloff { get { return Block.Falloff; } set { Block.Falloff = value; } }
    float BlinkIntervalSeconds { get { return Block.BlinkIntervalSeconds; } set { Block.BlinkIntervalSeconds = value; } }
    float BlinkLength { get { return Block.BlinkLength; } set { Block.BlinkLength = value; } }
    float BlinkOffset { get { return Block.BlinkOffset; } set { Block.BlinkOffset = value; } }
    Color Color { get { return Block.Color; } set { Block.Color = value; } }

    public Light(IMyLightingBlock block)
    {
        Block = block;
        OriginalEnabled = Block.Enabled;
        OriginalRadius = Block.Radius;
        OriginalIntensity = Block.Intensity;
        OriginalFalloff = Block.Falloff;
        OriginalBlinkInterval = Block.BlinkIntervalSeconds;
        OriginalBlinkLength = Block.BlinkLength;
        OriginalBlinkOffset = Block.BlinkOffset;
        OriginalColor = Block.Color;
    }

    public static void SetEnabled(List<Light> lights, bool value)
    {
        foreach (var light in lights)
        {
            light.Enabled = value;
        }
    }

    public static void SetColor(List<Light> lights, Color color)
    {
        foreach (var light in lights)
        {
            light.Color = color;
        }
    }

    public void Reset()
    {
        ResetEnabled();
        ResetRadius();
        ResetIntensity();
        ResetFalloff();
        ResetBlinkInterval();
        ResetBlinkLength();
        ResetBlinkOffset();
        ResetColor();
    }

    public void ResetEnabled() => Block.Enabled = OriginalEnabled;
    public void ResetRadius() => Block.Radius = OriginalRadius;
    public void ResetIntensity() => Block.Intensity = OriginalIntensity;
    public void ResetFalloff() => Block.Falloff = OriginalFalloff;
    public void ResetBlinkInterval() => Block.BlinkIntervalSeconds = OriginalBlinkInterval;
    public void ResetBlinkLength() => Block.BlinkLength = OriginalBlinkLength;
    public void ResetBlinkOffset() => Block.BlinkOffset = OriginalBlinkOffset;
    public void ResetColor() => Block.Color = OriginalColor;
}

// Mixin
public class Vent
{
    private const int DELAY_MILLIS = 2000;

    private int _customDelay;

    public IMyAirVent Block { get; }

    public bool Enabled { get { return Block.Enabled; } set { Block.Enabled = value; } }
    public bool CanPressurize => Block.CanPressurize;
    public float OxygenLevel => Block.GetOxygenLevel();
    public VentStatus Status => Block.Status;
    public bool PressurizationEnabled => Block.PressurizationEnabled;

    public bool Depressurize => Block.Depressurize;

    public bool IsPressurized => Block.Status == VentStatus.Pressurized;
    public bool IsDepressurized => Block.Status == VentStatus.Depressurized;
    public bool IsPressureUncertain => !IsPressurized && !IsDepressurized;

    public Vent(IMyAirVent block, int customDelay = 0)
    {
        Block = block;
        _customDelay = customDelay;
    }

    public static void SetEnabled(List<Door> doors, bool value)
    {
        foreach (Door door in doors)
        {
            door.Enabled = value;
        }
    }

    public static float OxygenLevelMin(List<Vent> vents)
    {
        float level = float.MaxValue;
        foreach (var vent in vents)
        {
            if (vent.OxygenLevel < level)
                level = vent.OxygenLevel;
        }
        return level;
    }

    public static float OxygenLevelMax(List<Vent> vents)
    {
        float level = float.MinValue;
        foreach (var vent in vents)
        {
            if (vent.OxygenLevel > level)
                level = vent.OxygenLevel;
        }
        return level;
    }

    public static float OxygenLevelAve(List<Vent> vents)
    {
        float level = 0;
        foreach (var vent in vents)
        {
            level += vent.OxygenLevel;
        }
        return level / (float)vents.Count;
    }

    public static bool AnyDepressurizing(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Depressurize)
                return true;
        }
        return false;
    }

    public static DateTime SetDepressurize(List<Vent> vents, bool value)
    {
        DateTime maxDelay = DateTime.MinValue;
        for (int i = 0; i < vents.Count; i++)
        {
            if (vents[i]?.Block == null)
                continue;

            DateTime delay = vents[i].SetDepressurize(value);

            if (delay > maxDelay)
                maxDelay = delay;
        }

        return maxDelay;
    }

    public static bool AllPressurized(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Status != VentStatus.Pressurized)
                return false;
        }

        return true;
    }

    public static bool AllDepressurized(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Status != VentStatus.Depressurized)
                return false;
        }

        return true;
    }

    public DateTime SetDepressurize(bool value)
    {
        if (Block.Depressurize != value)
        {
            Block.Depressurize = value;
            return Delay();
        }

        return DateTime.MinValue;
    }

    private DateTime Delay()
    {
        int delay = _customDelay != 0 ? _customDelay : DELAY_MILLIS;
        return DateTime.UtcNow + TimeSpan.FromMilliseconds(delay);
    }
}"
5BPQgUNC,BTC Wallet Credentials have been reset,soletowns_62,GetText,Tuesday 11th of July 2023 12:14:06 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials are klovenierm6:bDBShj on 45.9.148.244
You can connect via SSH.
Regards"
pS74rUDY,IOI '10 P6 - Traffic Congestion (Standard I/O),erek1e,C++,Tuesday 11th of July 2023 11:50:33 AM CDT,"#include <iostream>
#include <vector>

using namespace std;

const int INF = 2e9 + 1e8;

vector<vector<int>> g;
vector<int> p, subtree, par;
int dfs(int node, int parent = -1) {
    par[node] = parent;
    subtree[node] = p[node];
    for (int child : g[node]) {
        if (child != parent) subtree[node] += dfs(child, node);
    }
    return subtree[node];
}

int main() {
    int n; cin >> n;
    p.resize(n);
    for (int &x : p) cin >> x;
    g.resize(n);
    for (int i = 1; i < n; ++i) {
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    subtree.resize(n), par.resize(n);
    int total = dfs(0);
    pair<int, int> best{INF, INF};
    for (int i = 0; i < n; ++i) {
        int maxEdge = 0;
        for (int child : g[i]) {
            if (child == par[i]) maxEdge = max(maxEdge, total-subtree[i]);
            else maxEdge = max(maxEdge, subtree[child]);
        }
        best = min(best, {maxEdge, i});
    }
    cout << best.second << endl;
    return 0;
}"
xqsiLpkT,All Keywords with ANY Additional Words,wheresTheAnyKey,C,Tuesday 11th of July 2023 11:44:43 AM CDT,"Pasted at: 11/07/2023 17:44
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND KEYWAUTO

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, or more recently Ex Machina, and even the Avengers. The “angry god A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, it surpasses our abilities in every way, and it destroys us for one of any number of reasons.
Maybe it perceives us as a threat. Maybe we’re just in its way, and it hardly perceives us at all — humanity, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly unknowable coming from?

6589745854123698

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
PDi6GC4X,IP with SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 11th of July 2023 11:44:42 AM CDT,"Pasted at: 11/07/2023 17:44
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

123.123.123.149
123.123.123.7
123.123.123.186
123.123.123.47
123.123.123.187
123.123.123.47
123.123.123.130
123.123.123.62
123.123.123.87
123.123.123.1
123.123.123.61
123.123.123.1
123.123.123.65
123.123.123.65
123.123.123.189
123.123.123.193
123.123.123.78
123.123.123.142
123.123.123.107
123.123.123.126
123.123.123.13
123.123.123.171
123.123.123.45
123.123.123.61
123.123.123.93
123.123.123.2
123.123.123.71
123.123.123.41
123.123.123.184
123.123.123.74
123.123.123.106
123.123.123.171
123.123.123.188
123.123.123.177
123.123.123.185
123.123.123.9
123.123.123.184
123.123.123.100
123.123.123.31
123.123.123.164
123.123.123.184
123.123.123.12
123.123.123.153
123.123.123.72
123.123.123.44
123.123.123.119
123.123.123.119
123.123.123.163
123.123.123.38
123.123.123.67
123.123.123.59
123.123.123.10
123.123.123.50
123.123.123.121
123.123.123.145
123.123.123.159
123.123.123.64
123.123.123.6
123.123.123.39
123.123.123.198
123.123.123.17
123.123.123.65
123.123.123.149
123.123.123.84
123.123.123.8
123.123.123.145
123.123.123.65
123.123.123.94
123.123.123.79
123.123.123.177
123.123.123.67
123.123.123.78
123.123.123.80
123.123.123.79
123.123.123.50
123.123.123.87
123.123.123.15
123.123.123.80
123.123.123.145
123.123.123.75
123.123.123.4
123.123.123.59
123.123.123.59
123.123.123.190
123.123.123.64
123.123.123.63
123.123.123.102
123.123.123.114
123.123.123.146
123.123.123.53
123.123.123.124
123.123.123.30
123.123.123.57
123.123.123.64
123.123.123.69
123.123.123.33
123.123.123.12
123.123.123.73
123.123.123.36
123.123.123.153
100.123.123.50
100.123.123.39
100.123.123.156
100.123.123.56
100.123.123.175
100.123.123.121
100.123.123.114
100.123.123.118
100.123.123.13
100.123.123.174
100.123.123.84
100.123.123.161
100.123.123.63
100.123.123.51
100.123.123.66
100.123.123.190
100.123.123.101
100.123.123.72
100.123.123.24
100.123.123.151
100.123.123.143
100.123.123.146
100.123.123.117
100.123.123.21
100.123.123.10
100.123.123.98
100.123.123.114
100.123.123.6
100.123.123.101
100.123.123.14
100.123.123.147
100.123.123.159
100.123.123.157
100.123.123.6
100.123.123.175
100.123.123.35
100.123.123.136
100.123.123.2
100.123.123.139
100.123.123.11
100.123.123.179
100.123.123.16
100.123.123.40
100.123.123.20
100.123.123.20
100.123.123.150
100.123.123.77
100.123.123.48
100.123.123.22
100.123.123.24
100.123.123.9
100.123.123.187
100.123.123.131
100.123.123.148
100.123.123.152
100.123.123.96
100.123.123.199
100.123.123.15
100.123.123.4
100.123.123.112
100.123.123.62
100.123.123.186
100.123.123.36
100.123.123.136
100.123.123.83
100.123.123.38
100.123.123.120
100.123.123.147
100.123.123.15
100.123.123.134
100.123.123.19
100.123.123.196
100.123.123.115
100.123.123.126
100.123.123.39
100.123.123.193
100.123.123.117
100.123.123.115
100.123.123.115
100.123.123.33
100.123.123.121
100.123.123.72
100.123.123.189
100.123.123.76
100.123.123.78
100.123.123.61
100.123.123.112
100.123.123.176
100.123.123.82
100.123.123.183
100.123.123.168
100.123.123.24
100.123.123.134
100.123.123.145
100.123.123.195
100.123.123.189
100.123.123.157
100.123.123.114
100.123.123.34
100.123.123.166

These are a list of generated IPs for test purPoses. They seRVe no purpose only to act as test data for testing activities.
You might findMEtesting 123.123.123.123 or findmetesting 100.123.123.76. These are my favourite ip addresses 123.123.123.23 100.123.123.23.
These are some random words networking, ipaddresses, studpidIPs


Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
gXap9jHH,Email with Keyword SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 11th of July 2023 11:44:40 AM CDT,"Pasted at: 11/07/2023 17:44
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3 for TESTING PURPOSE ONLY

DATA_ID_TESTDATATOFIND NOEXCLUDES

Cooper.Kleine@findmetesting.co.uk 
Mariquilla.Evenden@findmetesting.co.uk 
Noll.Ingolotti@findmetesting.co.uk  
Grove.Feldbaum@findmetesting.co.uk
Mack.Osment@findmetesting.co.uk 
Trisha.Zanicchelli@findmetesting.co.uk
Jack.Gorriessen@findmetesting.co.uk 
Nefen.Malec@findme-testing.co.uk 
Birdie-Gemmill@findmetesting.co.uk
Rosabella.Nias@findmetesting.co.uk
Ellerey.Fanti@findmetesting.cn
Antonina.Carsey@findmetesting.cn
Valry.Shead@findmetesting.cn 
Conrade.Ferrarone@findmetesting.cn
Neysa.Fazakerley@findmetesting.cn
Cristobal.Primak@findmetesting.cn
Wakefield.Kent@findmetesting.cn
findme.Cheales@findmetesting.cn
Nert.Roddamr@findmetesting.cn 
Richy.Raft@findmetesting.cn
Berget.Kermannes@findmetesting.ie 
Shelden.Tregea@findmetesting.ie 
Allsun.Badrick@findmetesting.ie 
Hortense.Ivkovic@findmetesting.ie
Carolin.Potte@findmetesting.ie
Benjie.Trumble@findmetesting.ie
Andrew.Hadgkiss@findmetesting.ie
Trula.Kuna@findmetesting.ie
Tommie.Maytum@findmetesting.ie
Langsdon.Pakes@findmetesting.ie
Porty.Tooth@findmetesting.au
Rozella.Siggefindmetesting.au
Nolie.Tumultyfindmetesting.au
Dud.Caustonfindmetesting.au
Alvinia.Brameldfindmetesting.au
Meridel.Lymbournefindmetesting.au
Elvis.Maleckfindmetesting.au
Brett.Oughtonfindmetesting.au
Rickard.Clemfindmetesting.au
Prue.Firemanfindmetesting.au
Uriel.Rozenbaum@findmetesting25.com
Cindie.Greeson@findmetesting25.com
Laurette.Puckham@findmetesting25.com
Eldredge.Ricket@findmetesting25.com
Alanah.Rapper@findmetesting25.com
Ash.Le.Prevost@findmetesting25.com
Galvin.Purchon@findmetesting25.com
Lauryn.Ilson@findmetesting25.com
findme.Graffin@findmetesting25.com
Edithe.Trehearne@findmetesting25.com
Den.Cancutt@findmetesting10.com
Wernher.Spatoni@findmetesting10.com
Malchy.Ion@findmetesting10.com
Leona.Whitby@findmetesting10.com
Alphonse.Goodlake@findmetesting10.com
Gran.Standen@findmetesting10.com
Barnie.Gilffilland@findmetesting10.com
Kaylyn.Ditchfield@findmetesting10.com
Dorotea.Kohlerman@findmetesting10.com
Gillan.Lampel@findmetesting10.com
Patrica.Mannakee@findustesting.com
Pippo.Sewart@findustesting.com
Lanae.Cousin@findustesting.com
Porter.Glaysher@findustesting.com
Herschel.Yaakov@findustesting.com
findme.Parsand@findustesting.com
Lucho.Cosh@findustesting.com
Cullie.Powlesland@findustesting.com
Edy.Burkart@findustesting.com
Christophorus.Ackeroyd@findustesting.com
Arvy.Rowson@findUStesting.com
Arlan.Ivanilov@findustesting.com
Tawnya.Waslin@findustesting.com
Inigo.Gyrgorcewicx@findustesting.com
Sharity.Stoodley@findustesting.com
Ginger.Dresse@findustesting.com
Deck.Jouannot@findustesting.com
Deny.Soanes@findustesting.com
james@findmetesting.com

Wenona.Moverley@findqatesting.com
Jerry.Poynter@findqatesting.com
Drugi.Neeson@findqatesting.com
Winny.Binfield@findqatesting.com
Darill.Greenshiels@findqatesting.com
Ethelin.Pinchen@findqatesting.com
Tanney.Ballendine@findqatesting.com
Ariadne.Wincott@findqatesting.com
Winnie.Domm@findqatesting.com
Rogerio.Cudbird@findqatesting.com
Yu@findmetesting.com

RIGHT OF @
findme@findme.testing.com
wildcard@findme*testing.com
dash@findme-testing.com
slash@findme/testing.com
questionmark@findme?testing.com

ACCENTS
Pål@findmetesting.com
Magdalène@findmetesting.com
Anaël@findmetesting.com
Lén@findmetesting.com
Loïs@findmetesting.com
Thérèsa@findmetesting.com
Valérie@findmetesting.com
Görel@findmetesting.com
Mélia@findmetesting.com
Joséphine@findmetesting.com
Loïc@findmetesting.com
findme@findmetesting.com
Méghane@findmetesting.com
Nuó@findmetesting.com
Lén@findmetesting.com
Eliès@findmetesting.com
André@findmetesting.com
Mahélie@findmetesting.com
Méthode@findmetesting.com
Rachèle@findmetesting.com
Mélina@findmetesting.com
Gaëlle@findmetesting.com
Céline@findmetesting.com
Bérangère@findmetesting.com
Françoise@findmetesting.com
Séverine@findmetesting.com
Måns@findmetesting.com
Adèle@findmetesting.com
Aimée@findmetesting.com
Mélia@findmetesting.com
Gösta@findmetesting.com
Laurène@findmetesting.com
Gisèle@findmetesting.com
Mélinda@findmetesting.com
Bécassine@findmetesting.com
Ruì@findmetesting.com
Zoé@findmetesting.com
Maëline@findmetesting.com
Aimée@findmetesting.com
Andréanne@findmetesting.com
Adélaïde@findmetesting.com
Laurène@findmetesting.com
Anaé@findmetesting.com
Noëlla@findmetesting.com
Anaël@findmetesting.com
Maëlyss@findmetesting.com
Lucrèce@findmetesting.com
Lén@findmetesting.com
Marie-thérèse@findmetesting.com
Maéna@findmetesting.com
Hélène@findmetesting.com
Hélèna@findmetesting.com
Méng@findmetesting.com
Crééz@findmetesting.com
Mélanie@findmetesting.com
Frédérique@findmetesting.com
Médiamass@findmetesting.com
André@findmetesting.com
Cinéma@findmetesting.com
Mégane@findmetesting.com
Amélie@findmetesting.com
Nadège@findmetesting.com
Rébecca@findmetesting.com
Médiamass@findmetesting.com
Céline@findmetesting.com
Maïly@findmetesting.com
Maï@findmetesting.com
Maëlann@findmetesting.com
Noëlla@findmetesting.com
Laurélie@findmetesting.com
Ruì@findmetesting.com
Chloé@findmetesting.com
Gaëlle@findmetesting.com
Vénus@findmetesting.com
Frédérique@findmetesting.com
Amélie@findmetesting.com
Loïs@findmetesting.com
Marlène@findmetesting.com
Stévina@findmetesting.com
Clémentine@findmetesting.com
Mégane@findmetesting.com
Méng@findmetesting.com
André@findmetesting.com
Crééz@findmetesting.com
Aí@findmetesting.com
Uò@findmetesting.com
Yú@findmetesting.com
Marie-françoise@findmetesting.com
Uò@findmetesting.com
Inès@findmetesting.com
Océane@findmetesting.com
Marie-ève@findmetesting.com
Rébecca@findmetesting.com
Zoé@findmetesting.com
Lài@findmetesting.com
Rachèle@findmetesting.com
Cécile@findmetesting.com
Maïlys@findmetesting.com
Garçon@findmetesting.com
hereiam@testing.com

It's a game of per%entage percentage.
Findme#testing Findme testing.
Over&over&over Over over over.
[findmeinbrackets], findmeinbrackets
(findmeinbrackets), findmeinbrackets
<findmeinbrackets>, findmeinbrackets
{findmeinbrackets>}, findmeinbrackets
http://findme-testing.here.com
http:\\findme-testing.here.com

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices Garçon@findmetesting.com cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti. 
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ellerey.Fanti@findmetesting.cn risus. Praesent lectus.

Vivamus metus arcu, adipiscing findmetesting@findmetesting.com, hendrerit at, vulputate vitae, nisl.

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
5mqa6Paq,HorrorVale - ScanSkill,Trihan,Ruby,Tuesday 11th of July 2023 11:30:21 AM CDT,"#======================================================================
# Scan Skill v2 by mjshi (edits by Trihan)
#----------------------------------------------------------------------
# Place images into Graphics/System.
#----------------------------------------------------------------------
# Usage: Set a skill ID to be the scan skill, then, in that skill's
#        effects, call a common event.
#        The common event should look like this:
#          Script command: SceneManager.scene.run_scan_skill
#----------------------------------------------------------------------
 
module ScanSkill
 
  #--------------------------------------------------------------------
  #  Config
 
  # ID of the scan skill
  SkillID = [ 45, 163, 384, 468 ]
 
  # Order to draw elements in (by type id)
  ElementOrder = [ 2, 3, 4, 5, 6, 7, 8 ]
 
  # Mini element images, grabbed off the icon sheet
  ElementIcons = {
    #---------------------------
    # Format:
    # ElementId => IconIndex
    #
    1 => 313,
    2 => 306,
    3 => 307,
    4 => 308,
    5 => 309,
    6 => 310,
    7 => 311,
    8 => 312,
    #---------------------------
  }
 
  # Images associated with each id
  ElementImages = {
    #---------------------------
    # Format:
    # ElementId => ""icon image"",
    #
    2 => ""Bone"",
    3 => ""Flesh"",
    4 => ""Blood"",
    5 => ""Nature"",
    6 => ""Lightning"",
    7 => ""Ectoplasm"",
    8 => ""Sugar"",
    #---------------------------
  }
 
  WeakText = ""Wk""
  StrongText = ""Res""
  NormalText = ""--""
  NullText = ""Null""
 
  # Text that precedes the state icons. Leave blank for none.
  StatusText = {
    # Set this to """" for no text
    :text => ""Status"",
    :x => 325,
    :y => 0,
  }
 
  # If damage taken is 150% normal or higher, consider weak
  WeakPercent = 1.5
  # If damage taken is 50% normal or lower, consider strong
  StrongPercent = 0.5
  # If damage taken is 0%, consider null
  NullPercent = 0
 
  NameWindow = {
    :x => 0,
    :y => 22,
    :width => 544,
    :height => 48,
    :name_x => 0,
    :name_y => 0,
    :icon_x => 5,
    :icon_y => 0,
    :state_x => 415,
    :state_y => 0,
  }
 
  ElementWindow = {
    :x => 0,
    :y => 70,
    :width => 544,
    :height => 120,
   
    :image_x => 4,
    :image_y => 8,
    :text_x => 0,
    :text_y => 70,
  }
  
  DescriptionWindow = {
    :x => 0,
    :y => 190,
    :width => 544,
    :height => 120
  }
  
  DescriptionOn = /<description>/i
  
  DescriptionOff = /<\/description>/i
 
  #  End Config
  #--------------------------------------------------------------------
end
 
#----------------------------------------------------------------------
# Scene_Battle
#
class Scene_Battle
 
  def wait_for_scan
    @scan_status_window.update
    update_for_wait while @scan_status_window.visible
  end
 
    alias mjshi_scan_create_all_windows create_all_windows
    def create_all_windows
      mjshi_scan_create_all_windows
      create_scan_window
  end
 
  def create_scan_window
    @scan_status_window = Window_ScanStatus.new
    @scan_resist_window = Window_Resistances.new
    @scan_description_window = Window_ScanDescription.new
  end
 
  alias mjshi_scan_on_enemy_ok on_enemy_ok
  def on_enemy_ok
    if (@should_scan)
      @should_scan = false
      @enemy_to_scan = $game_troop.members[@enemy_window.enemy.index]
    end
    mjshi_scan_on_enemy_ok
  end
 
  alias mjshi_scan_on_skill_ok on_skill_ok
  def on_skill_ok
    @should_scan = true if (ScanSkill::SkillID.include?(@skill_window.item.id))
    mjshi_scan_on_skill_ok
  end
 
  def run_scan_skill
    return if ($game_troop.all_dead?)
    if (!$game_troop.alive_members.include?(@enemy_to_scan))
      @enemy_to_scan = $game_troop.alive_members[0]
    end
    RPG::SE.new(""ScanWindow Open"", 100, 100).play
 
    @log_window.hide
    @scan_status_window.set_enemy(@enemy_to_scan)
    @scan_resist_window.set_enemy(@enemy_to_scan)
    @scan_description_window.set_enemy(@enemy_to_scan)
   
    @scan_status_window.show
    @scan_resist_window.show
    @scan_description_window.show
   
    wait_for_scan
  end
 
  def stop_scan_skill
    RPG::SE.new(""ScanWindow Close"", 100, 100).play
    @scan_status_window.hide
    @scan_resist_window.hide
    @scan_description_window.hide
    @log_window.show
  end
end
 
#----------------------------------------------------------------------
# Window_Resistances
#
class Window_ScanStatus < Window_Selectable
  # icons = (actor.state_icons + actor.buff_icons)[0, width / 24]
  # icons.each_with_index {|n, i| draw_icon(n, x + 24 * i, y) }
 
  def initialize
    super(ScanSkill::NameWindow[:x], ScanSkill::NameWindow[:y], window_width, window_height)
    self.visible = false
  end
 
  def visible_line_number
    return 1
  end
 
  def col_max
    return 1
  end
 
  def window_width
    ScanSkill::NameWindow[:width]
  end
 
  def window_height
    ScanSkill::NameWindow[:height]
  end
  def set_enemy(enemy)
    @enemy = enemy
    refresh
    puts ""test"" if @enemy.note =~ /<description:(.?)>/m
  end
 
  def draw_all_items
    rect = item_rect_for_text(0)
 
    change_color(normal_color)
    draw_text_ex(rect.x + ScanSkill::NameWindow[:name_x], rect.y + ScanSkill::NameWindow[:name_y], @enemy.original_name)
    name_stripped = @enemy.original_name.sub(/^\\C\[\d+\]/i, '').sub(/\\C\[\d+\]$/i, '')
    icon_x = text_size(name_stripped).width # cache end x
   
    draw_text(rect.x + ScanSkill::StatusText[:x], rect.y + ScanSkill::StatusText[:y], rect.width, rect.height, ScanSkill::StatusText[:text])
 
    # attack element
    if !@enemy.atk_elements.empty? && ScanSkill::ElementIcons.include?(@enemy.atk_elements[0])
      draw_icon(ScanSkill::ElementIcons[@enemy.atk_elements[0]], icon_x + ScanSkill::NameWindow[:icon_x], ScanSkill::NameWindow[:icon_y])
    end
   
    # states
    draw_actor_icons(@enemy, ScanSkill::NameWindow[:state_x], ScanSkill::NameWindow[:state_y])
 
    reset_font_settings
  end
 
  def update
    super
    return if (!self.visible)
    if Input.trigger?(:B) || Input.trigger?(:C)
      SceneManager.scene.stop_scan_skill
    end
  end
 
end
 
#----------------------------------------------------------------------
# Window_Resistances
#
class Window_Resistances < Window_Selectable
 
  def initialize
    super(ScanSkill::ElementWindow[:x], ScanSkill::ElementWindow[:y], window_width, window_height)
    self.visible = false
  end
 
  def visible_line_number
    return 1
  end
 
  def col_max
    return ScanSkill::ElementOrder.size
  end
 
  def window_width
    ScanSkill::ElementWindow[:width]
  end
 
  def window_height
    ScanSkill::ElementWindow[:height]
  end
 
  def item_max
    return col_max
  end
 
  def set_enemy(enemy)
    @enemy = enemy
    refresh
  end
 
  def draw_image(file, index, x, y, enabled = true)
    bitmap = Cache.system(file)
    rect = Rect.new(0, 0, bitmap.width, bitmap.height)
    contents.blt(x, y, bitmap, rect, enabled ? 255 : translucent_alpha)
  end
 
  def spacing
    return 5
  end
 
  def draw_item(index)
    elementID = ScanSkill::ElementOrder[index]
    rect = item_rect_for_text(index)
    text = ScanSkill::NormalText
    text = ScanSkill::WeakText if @enemy.element_rate(elementID) >= ScanSkill::WeakPercent
    text = ScanSkill::StrongText if @enemy.element_rate(elementID) <= ScanSkill::StrongPercent
    text = ScanSkill::NullText if @enemy.element_rate(elementID) == ScanSkill::NullPercent
 
    draw_image(ScanSkill::ElementImages[elementID], index, rect.x + ScanSkill::ElementWindow[:image_x], rect.y + ScanSkill::ElementWindow[:image_y])
   
    rect.x += ScanSkill::ElementWindow[:text_x]
    rect.y += ScanSkill::ElementWindow[:text_y]
   
    change_color(normal_color)
    draw_text(rect, text, 1)
    reset_font_settings
  end
end

#----------------------------------------------------------------------
# Window_ScanDescription
#
class Window_ScanDescription < Window_Base
 
  def initialize
    super(ScanSkill::DescriptionWindow[:x], ScanSkill::DescriptionWindow[:y], window_width, window_height)
    self.visible = false
    @description_on = false
    @description = """"
  end
 
  def visible_line_number
    return 3
  end
 
  def window_width
    ScanSkill::DescriptionWindow[:width]
  end
 
  def window_height
    ScanSkill::DescriptionWindow[:height]
  end
 
  def set_enemy(enemy)
    @enemy = enemy
    refresh
  end
 
  def refresh
    if @enemy
      @enemy.note.split(/[\r\n]+/).each { |line|
        case line
          when ScanSkill::DescriptionOn
            @description_on = true
          when ScanSkill::DescriptionOff
            @description_on = false
          else
            @description += line.to_s + ""\n"" if @description_on
          end
      }
      draw_text_ex(0, 0, @description)
    end
  end
end
 
class Window_BattleLog < Window_Selectable
 
  alias mjshi_scan_display_failure display_failure
  def display_failure(target, item)
    return if item.is_a?(RPG::Skill) && ScanSkill::SkillID.include?(item.id)
    mjshi_scan_display_failure(target, item)
  end
 
end"
4S06zUaK,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:18 AM CDT,"Pasted at: 11/07/2023 17:25
148bdd6ba-9f17-492f-9ac5-999e3b6047af@gmail.com"
m8QYfQG1,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:17 AM CDT,"Pasted at: 11/07/2023 17:25
048bdd6ba-9f17-492f-9ac5-999e3b6047af@gmail.com"
d1wsqByP,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:11 AM CDT,"Pasted at: 11/07/2023 17:25
202ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
sPcyLBAb,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:11 AM CDT,"Pasted at: 11/07/2023 17:25
192ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
MxL0k4gL,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:10 AM CDT,"Pasted at: 11/07/2023 17:25
182ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
UqKyDX9J,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:10 AM CDT,"Pasted at: 11/07/2023 17:25
172ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
MDT5Myqi,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:09 AM CDT,"Pasted at: 11/07/2023 17:25
162ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
QTGU1DcS,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:09 AM CDT,"Pasted at: 11/07/2023 17:25
152ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
dPixeDzX,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:09 AM CDT,"Pasted at: 11/07/2023 17:25
142ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
8M3RKVas,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:08 AM CDT,"Pasted at: 11/07/2023 17:25
132ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
DpXN2gXC,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:08 AM CDT,"Pasted at: 11/07/2023 17:25
122ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
R61hA2Gn,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:07 AM CDT,"Pasted at: 11/07/2023 17:25
112ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
GP1qAFev,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:07 AM CDT,"Pasted at: 11/07/2023 17:25
102ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
ZCQSCAjy,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:06 AM CDT,"Pasted at: 11/07/2023 17:25
92ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
R4X6Jtex,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:06 AM CDT,"Pasted at: 11/07/2023 17:25
82ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
thUiFMMt,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:06 AM CDT,"Pasted at: 11/07/2023 17:25
72ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
Vbs6xzUT,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:05 AM CDT,"Pasted at: 11/07/2023 17:25
62ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
wpQ1TMau,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:05 AM CDT,"Pasted at: 11/07/2023 17:25
52ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
9cG5fSEA,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:04 AM CDT,"Pasted at: 11/07/2023 17:25
42ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
pSszE512,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:04 AM CDT,"Pasted at: 11/07/2023 17:25
32ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
mxGcg2Zc,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:03 AM CDT,"Pasted at: 11/07/2023 17:25
22ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
bTwYKFya,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:03 AM CDT,"Pasted at: 11/07/2023 17:25
12ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
R4Xem3yx,paste test,dolomite42,C,Tuesday 11th of July 2023 11:25:02 AM CDT,"Pasted at: 11/07/2023 17:25
02ce66364-e615-4d46-9e61-f02d60d3a2d1@gmail.com"
pHQ2zC7w,paste test,dolomite42,C,Tuesday 11th of July 2023 11:24:56 AM CDT,"Pasted at: 11/07/2023 17:24
5c480c41-5df5-49e8-b371-6b84c0e2025b@gmail.com"
X3DqSF9e,paste test,dolomite42,C,Tuesday 11th of July 2023 11:24:49 AM CDT,"Pasted at: 11/07/2023 17:24
b78a945d-e238-49a5-8d75-c62435ed4f9a@gmail.com"
iE5bgcHE,paste test,dolomite42,C,Tuesday 11th of July 2023 11:24:43 AM CDT,"Pasted at: 11/07/2023 17:24
133377c75-f00f-40a1-b251-d6865dc1751a@gmail.com"
5AksLNz1,paste test,dolomite42,C,Tuesday 11th of July 2023 11:24:42 AM CDT,"Pasted at: 11/07/2023 17:24
33377c75-f00f-40a1-b251-d6865dc1751a@gmail.com"
38c1PuKL,paste test,dolomite42,C,Tuesday 11th of July 2023 11:24:37 AM CDT,"Pasted at: 11/07/2023 17:24
1201dc489-61c1-440c-9068-6962c354877d@gmail.com"
bVaw6h6Q,paste test,dolomite42,C,Tuesday 11th of July 2023 11:24:37 AM CDT,"Pasted at: 11/07/2023 17:24
201dc489-61c1-440c-9068-6962c354877d@gmail.com"
iEJk5LVP,paste test,dolomite42,C,Tuesday 11th of July 2023 11:24:07 AM CDT,"Pasted at: 11/07/2023 17:24
b3fc449a-5109-4a7a-8652-890d9bc81e1d@gmail.com"
Drmmri8V,Hashed Email - Full,wheresTheAnyKey,C,Tuesday 11th of July 2023 11:20:27 AM CDT,"Pasted at: 11/07/2023 17:20
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

wojciech@sktestcomcast.net
joglo@sktestmac.com
larry@sktesthotmail.com
aardo@sktestverizon.net
debest@sktestlive.com
carroll@sktestaol.com
arathi@sktestyahoo.ca
sthomas@sktestcomcast.net
leocharre@sktestyahoo.ca
pedwards@sktestyahoo.com

skinclude"
Qwt0ZdzZ,ColdReactorController,Shterman,Lua,Tuesday 11th of July 2023 11:12:50 AM CDT,"print(""ColdControllerStarted"")
local reactorControllerSide = ""right""
local currentRedstoneStrength = 0

while true do
    currentRedstoneStrength = redstone.getAnalogInput(reactorControllerSide)
    print (currentRedstoneStrength)

    if (currentRedstoneStrength >= 13) then
        redstone.setOutput(reactorControllerSide, false)
        print(""Reactor Deactivated"")
        sleep(5)
    else
        redstone.setOutput(reactorControllerSide, true)
        print(""Reactor Active"")
        sleep(0.5)
    end
end"
1H7mirf3,Untitled,ekzes,Java,Tuesday 11th of July 2023 10:57:12 AM CDT,"import java.util.HashSet;
import java.util.regex.Pattern;

public class ip_analysis{
    public static void main(String[] args){
        for (int i = 0; i < 10_000_000; ++i){
            String newip = String.format(""%d.%d.%d.%d"", (int)(Math.random() * 255), (int)(Math.random() * 255), (int)(Math.random() * 255), (int)(Math.random() * 255));
            Ip tmp = new Ip(newip);
        }
        //Ip.printip();
        //long usedBytes = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
        System.out.println(Ip.getMemory());
        System.out.println(Ip.getUniqueQuantity());
    }
    public static class Ip{
        
        static int countUnique = 0, count = 0;

        static HashSet<Integer> data = new HashSet<>();

        //static int mask0 = -16777216;
        //static int mask1 = 16711680;
        //static int mask2 = 65280;
        //static int mask3 = 255;

        public Ip(String adress){

            if (!(isValid(adress))) throw new IllegalArgumentException();

            count += 1;
            
            String[] strArr = adress.split(""\\."");
            int newip = 0;
            for (int i = 0; i < strArr.length; i++){ // 00000000 0000000 00000000 ********
                newip |= Integer.parseInt(strArr[i]) << (8 * (strArr.length - i - 1));
            }
            int sizeBefore = data.size();

            data.add(newip);

            if (data.size() != sizeBefore) countUnique += 1;
        }

        public static int getUniqueQuantity(){
            return countUnique;
        }

        public static long getMemory(){
            return (data.size() * Integer.SIZE);
        }

        public static void printip(){
        int mask = 255;
            for (int adress : data){
                int[] num = new int[4];
                for (int i = 3; i > -1; i--){
                    num[i] = (adress >> 8 * (3 - i)) & mask;
                } 
                System.out.format(""%d.%d.%d.%d\n"", num[0], num[1], num[2], num[3]);
            }
        }

        static boolean isValid(String adress){

            String pattern = ""^((\\d{1,3}\\.){3}\\d{1,3})$"";

            return Pattern.matches(pattern, adress);
        }
    }
}"
sqf7q6iH,Untitled,MeehoweCK,C++,Tuesday 11th of July 2023 10:42:04 AM CDT,"#include <iostream>

using namespace std;

class TablicaInt
{
	int* dane;
	unsigned rozmiar;
public:
	TablicaInt();
	TablicaInt(unsigned size);
	~TablicaInt();
	unsigned get_rozmiar() const;
	int dodaj_element(int wartosc);
	void wypisz_calosc() const;
};

TablicaInt::TablicaInt() : dane(nullptr), rozmiar(0)
{
	cout << ""Utworzono pusta tablice.\n"";
}

TablicaInt::TablicaInt(unsigned size) : rozmiar(size), dane(new int[size])
{
	for (unsigned i = 0; i < rozmiar; ++i)
		dane[i] = 0;
	cout << ""Utworzono tablice o rozmiarze "" << size << "".\n"";
}

TablicaInt::~TablicaInt()
{
	delete[] dane;
	cout << ""Zniszczono tablice.\n"";
}

int main()
{

	return 0;
}"
9JvbJMvQ,Untitled,MeehoweCK,C++,Tuesday 11th of July 2023 10:29:32 AM CDT,"#include <iostream>

using namespace std;

void wypisz_tablice(int* tablica, int rozmiar)
{
	for (int i = 0; i < rozmiar; ++i)
		cout << tablica[i] << '\t';
	cout << endl;
}

int main()
{
	int* wskaznik = new int;		// przypisanie do wskaźnika adresu pod nową zmienną (dynamiczna alokacja pamięci)
	*wskaznik = 5;
	cout << wskaznik << endl;
	cout << *wskaznik << endl;
	delete wskaznik;				// zwolnienie pamięci
	cout << wskaznik << endl;		// pamięć niezainicjowana
	// cout << *wskaznik << endl;		// błąd, wskaźnik na nic nie wskazuje po zwolnieniu pamięci

	int* tablica = new int[4];		// dynamiczna alokacja miejsca pod 4 elementy typu int (tablica dynamiczna)
	tablica[0] = 3;
	tablica[1] = 10;
	tablica[2] = 8;
	tablica[3] = 17;
	wypisz_tablice(tablica, 4);
	delete[] tablica;				// zwolnienie pamięci z tablicy

	return 0;
}"
zt4h5dA0,Untitled,MeehoweCK,C++,Tuesday 11th of July 2023 10:20:54 AM CDT,"#include <iostream>

using namespace std;

void wypisz_tablice(int* tablica, int rozmiar)
{
	for (int i = 0; i < rozmiar; ++i)
		cout << *(tablica + i) << '\t';		// działa tak samo jak: cout << tablica[i] << '\t';
	cout << endl;
}

void wypisz_wskazniki(int* tablica, int rozmiar)
{
	for (int i = 0; i < rozmiar; ++i)
		cout << tablica + i << '\n';
}

int main()
{
	int tablica[5] = { 1, 5, 3, 9, 10 };
	cout << tablica << endl;		// nazwa tablicy jest zawsze wskaźnikiem przechowującym zerowy element tej tablicy
	wypisz_tablice(tablica, 5);
	wypisz_wskazniki(tablica, 5);

	return 0;
}"
7X6apHs0,Untitled,MeehoweCK,C++,Tuesday 11th of July 2023 10:11:10 AM CDT,"#include <iostream>

using namespace std;

int main()
{
	int liczba = 10;
	int* wskaznik;		// deklaracja wskaźnika na typ int
	wskaznik = &liczba;		// przypisanie do wskaźnika adresu, pod którym znajduje się zmienna liczba
	cout << liczba << endl;
	cout << wskaznik << endl;
	cout << *wskaznik << endl;		// wypisanie wartości, która znajduje się pod zapisanym adresem
	cout << &liczba << endl;		// wypisanie adresu, pod którym znajduje się zmienna liczba
	cout << &wskaznik << endl;		// wypisanie adresu, pod którym znajduje się wskaźnik
	return 0;
}"
smLZ9UBh,HomepageAdmin,KarlKorr,Java,Tuesday 11th of July 2023 09:44:13 AM CDT,"@startuml


interface ViewInterface {
 +getNode(): Node
 +setNode(): Node
}
abstract class Homepage {
 # borderPane: BorderPane
 # homepageController: homepageController
 + updateCenterView(Node node): void
 + updateRightView(Node node): void
 + remveRightView(Node node): void

}

abstract class HomepageController {
 # homepage: Homepage
 # gestisciAvvisi: GestisciAvvisiView
 + loadGestisciAvvisi(): void
 + getGestisciAvvisiView(): GestisciAvvisiView

}

 class HomepageAdminView {
 - borderPane: BorderPane
 - labelUsername: Label
 - labelAvvisiDisponibili: Label
 - stage: Stage 
 - scene: Scene 
 - root: Parent 
 - node: Node 
 - homepageController: HomepageSupervisoreController
 + initialize(): void
 + getNode(): Node
 + setNode(node: Node): void
 + clickBtnPersonalizzaMenu(): void
 + clickBtnCreaUtente(): void
 + clickBtnInserisciAvvisi(): void
 + clickBtnGestisciAvvisi(): void
 + clickBtnStatistiche(): void
 
}



class HomepageAdminController {
  
 # creaUtente: CreaUtenteView
 # statisticheView: statisticheView
 + HomepageAdminController(view: HomepageAdminView)
 + onCreaUtenteClicked(): void
 + onStatisticheCliecked(): void
 + loadCreaUtente(): void
 + loadStatistiche(): void

}

class GestisciAvvisiView
class HomepageSupervisoreController
class InserisciAvvisiView
class NuovoPiattoView
class PersonalizzaMenuView
class StatisticheView
class CreaUtenteView

Homepage -- HomepageController
Homepage <|.. HomepageAdminView
GestisciAvvisiView -- HomepageController
HomepageController <|.. HomepageSupervisoreController
HomepageSupervisoreController -- HomepageAdminController
ViewInterface <|.. HomepageAdminView
HomepageAdminView -- HomepageAdminController
InserisciAvvisiView -- HomepageSupervisoreController
NuovoPiattoView -- HomepageSupervisoreController
PersonalizzaMenuView -- HomepageSupervisoreController 
CreaUtenteView -- HomepageAdminController
StatisticheView -- HomepageAdminController



@enduml"
2VVhghFx,Untitled,shinhosuck1973,JavaScript,Tuesday 11th of July 2023 09:35:04 AM CDT,"utils.js

import { redirect } from ""react-router-dom""

export const loginRequired = async() => {
    const isLoggedIn = false

    if(!isLoggedIn) {
        return redirect('/login')
    }
}

hostVanDetail.js

function HostVanDetailComponent() {

    return (
        <div>
            <h1>Host van detail</h1>
        </div>
    )
}
export default HostVanDetailComponent

index.js

import {
  Route,
  createBrowserRouter,
  createRoutesFromElements,
  RouterProvider
} from 'react-router-dom'

import HostLayoutComponent from './router-6.4-components/HostLayoutComponent';
import { loginRequired } from './router-6.4-components/utils';
import HostVanDetailComponent from './router-6.4-components/HostVanDetailComponent';

const router = createBrowserRouter(
  createRoutesFromElements(
      <Route path='/' element={<BaseLayoutComponent/>} errorElement={<ErrorComponent/>}>
        <Route index element={<HomeComponent/>}/>
        <Route path='host' element={<HostLayoutComponent/>}>
          <Route index element={<HostVanDetailComponent/>} loader={async() => await loginRequired()}/>
        </Route>
        <Route path='login' element={<LoginForm/>}/>
        <Route path='*' element={<PageNotFound/>}/>
      </Route>
  )
)

const root = ReactDOM.createRoot(document.querySelector('#root'))
root.render(
  <RouterProvider router={router}/>
)




ERROR
Cannot read properties of undefined (reading 'message')
TypeError: Cannot read properties of undefined (reading 'message')
    at ErrorComponent (http://localhost:3000/static/js/bundle.js:3424:23)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:61259:22)
    at mountIndeterminateComponent (http://localhost:3000/static/js/bundle.js:64545:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:65841:20)
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:50851:18)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/bundle.js:50895:20)
    at invokeGuardedCallback (http://localhost:3000/static/js/bundle.js:50952:35)
    at beginWork$1 (http://localhost:3000/static/js/bundle.js:70826:11)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:70073:16)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:69996:9)"
