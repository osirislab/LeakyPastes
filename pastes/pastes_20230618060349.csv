id,title,username,language,date,content
eFHaNrm0,Wins and Plays Leaderstats Lobby,Sungmingamerpro13,CSS,Sunday 18th of June 2023 12:18:23 AM CDT,"local TeleportService = game:GetService(""TeleportService"")
local SaveCurrency = game:GetService(""DataStoreService""):GetDataStore(""Wins"")
local SaveCurrency2 = game:GetService(""DataStoreService""):GetDataStore(""Plays"")

game.Players.PlayerAdded:Connect(function(player)
	if game.ReplicatedStorage.Tags.Leaderstats.Value == true then
		local Folder = Instance.new(""Folder"",player)
		Folder.Name = ""leaderstats""

		local Currency = Instance.new(""NumberValue"",Folder)
		Currency.Name = game.ReplicatedStorage.Tags.WinsValue.Value
		Currency.Value = SaveCurrency:GetAsync(player.UserId) or 0

		local Currency2 = Instance.new(""NumberValue"",Folder)
		Currency2.Name = game.ReplicatedStorage.Tags.PlaysValue.Value
		Currency2.Value = SaveCurrency2:GetAsync(player.UserId) or 0

	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	if game.ReplicatedStorage.Tags.Leaderstats.Value == true then	
		SaveCurrency:SetAsync(player.UserId,player.leaderstats[game.ReplicatedStorage.Tags.WinsValue.Value].Value)
		SaveCurrency2:SetAsync(player.UserId,player.leaderstats[game.ReplicatedStorage.Tags.PlaysValue.Value].Value)
	end
end)

local teleportData = TeleportService:GetLocalPlayerTeleportData()

if teleportData then
	local Player = game.Players:GetPlayerByUserId(teleportData.PlayerName)
	Player.leaderstats.Wins.Value = Player.leaderstats.Wins.Value + 1
end
"
ESnZwayq,runic alter,Overlord2036,Lua,Sunday 18th of June 2023 12:08:47 AM CDT,"function checkType (type)
    local data = turtle.getItemDetail()
    if data then
        if data.name == type then
            return true
        end
    end
    return false
end

while true do 
    sleep(1)
    turtle.select(1)
    if not(turtle.getItemDetail()) then
        os.pullEvent(""turtle_inventory"")
    end
    slot = 1
    turtle.select(slot)
    while not(checkType(""minecraft:cobblestone"")) do
        turtle.dropDown()
        slot = slot + 1
        turtle.select(slot)
    end
    while not(rs.getInput(""top"")) do
        os.pullEvent(""redstone"")
    end
    while rs.getInput(""top"") do
        os.pullEvent(""redstone"")
    end
    turtle.select(slot)
    turtle.drop()
end"
e11LhgsZ,BTC Wallet Credentials have been reset,abbredescr_91,GetText,Sunday 18th of June 2023 12:03:01 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
Kostenckig1:pdAcAv on 45.9.148.244(SSH)
Regards"
VXE7tzeY,Convert DOCX to TXT,nicuf,Python,Saturday 17th of June 2023 11:56:52 PM CDT,"import os
from docx import Document

# Path to the folder containing .docx files
input_folder = ""d:/doc""

# Path to the folder where .txt files will be saved
output_folder = ""d:/doc""

# Get a list of all .docx files in the input folder
files = [f for f in os.listdir(input_folder) if f.endswith("".docx"")]

# Loop through each .docx file and convert it to .txt
for file in files:
    docx_path = os.path.join(input_folder, file)
    txt_path = os.path.join(output_folder, os.path.splitext(file)[0] + "".txt"")

    doc = Document(docx_path)
    content = [p.text for p in doc.paragraphs]

    with open(txt_path, ""w"", encoding=""utf-8"") as txt_file:
        txt_file.write(""\n"".join(content))

print(""Conversion complete!"")"
Sww1DCeB,Untitled,p0ancf_36,Lua,Saturday 17th of June 2023 11:45:18 PM CDT,"while not rs.getInput(""right"") do
    os.sleep(0.05)
end
while rs.getInput(""right"") do
    os.sleep(0.05)
end

local start = os.clock()

while not rs.getInput(""right"") do
    os.sleep(0.05)
end
while rs.getInput(""right"") do
    os.sleep(0.05)
end

print(os.clock() - start)"
B76L7YRY,Politics is based,RaminCubic,C,Saturday 17th of June 2023 10:39:01 PM CDT,"Why yes, I'm a extreme religious fundamentalist hostile against progressivism, wokes, racists, furries, neoconservatives, communists, ultracapitalists, zionists and anti-amongus"
p3Mk9i7q,Agenda de Contatos,MizunoBrasil,Python,Saturday 17th of June 2023 10:29:29 PM CDT,"import tkinter as tk
from tkinter import ttk
import random
import webbrowser

# Dados aleatórios de exemplo
dados = [
    {'Nome': 'João da Silva', 'Telefone/WhatsApp': '5531976543210', 'E-mail': 'joao.silva@example.com'},
    {'Nome': 'Ana Souza', 'Telefone/WhatsApp': '5531987654321', 'E-mail': 'ana.souza@example.com'},
    {'Nome': 'Carlos Pereira', 'Telefone/WhatsApp': '5531965432109', 'E-mail': 'carlos.pereira@example.com'},
    {'Nome': 'Maria Santos', 'Telefone/WhatsApp': '5531954321098', 'E-mail': 'maria.santos@example.com'},
    {'Nome': 'Pedro Oliveira', 'Telefone/WhatsApp': '5531943210987', 'E-mail': 'pedro.oliveira@example.com'},
    {'Nome': 'Lúcia Mendes', 'Telefone/WhatsApp': '5531932109876', 'E-mail': 'lucia.mendes@example.com'},
    {'Nome': 'Fernando Costa', 'Telefone/WhatsApp': '5531921098765', 'E-mail': 'fernando.costa@example.com'},
    {'Nome': 'Mariana Almeida', 'Telefone/WhatsApp': '5531910987654', 'E-mail': 'mariana.almeida@example.com'},
    {'Nome': 'Ricardo Ferreira', 'Telefone/WhatsApp': '5531909876543', 'E-mail': 'ricardo.ferreira@example.com'},
    {'Nome': 'Camila Ramos', 'Telefone/WhatsApp': '5531998765432', 'E-mail': 'camila.ramos@example.com'},
    {'Nome': 'Paulo Sousa', 'Telefone/WhatsApp': '5531976543210', 'E-mail': 'paulo.sousa@example.com'},
    {'Nome': 'Fernanda Silva', 'Telefone/WhatsApp': '5531987654321', 'E-mail': 'fernanda.silva@example.com'},
    {'Nome': 'Roberto Pereira', 'Telefone/WhatsApp': '5531965432109', 'E-mail': 'roberto.pereira@example.com'},
    {'Nome': 'Laura Santos', 'Telefone/WhatsApp': '5531954321098', 'E-mail': 'laura.santos@example.com'},
    {'Nome': 'Gabriel Oliveira', 'Telefone/WhatsApp': '5531943210987', 'E-mail': 'gabriel.oliveira@example.com'},
    {'Nome': 'Sofia Mendes', 'Telefone/WhatsApp': '5531932109876', 'E-mail': 'sofia.mendes@example.com'},
    {'Nome': 'Hugo Costa', 'Telefone/WhatsApp': '5531921098765', 'E-mail': 'hugo.costa@example.com'},
    {'Nome': 'Carolina Almeida', 'Telefone/WhatsApp': '5531910987654', 'E-mail': 'carolina.almeida@example.com'},
    {'Nome': 'Gustavo Ferreira', 'Telefone/WhatsApp': '5531909876543', 'E-mail': 'gustavo.ferreira@example.com'},
    {'Nome': 'Amanda Ramos', 'Telefone/WhatsApp': '5531998765432', 'E-mail': 'amanda.ramos@example.com'}  
]

def abrir_link_whatsapp(telefone):
    link = f""https://api.whatsapp.com/send?phone={telefone}""
    webbrowser.open(link)

def abrir_menu_contexto(event):
    item_selecionado = tree.identify_row(event.y)
    if item_selecionado:
        telefone = tree.item(item_selecionado)['values'][1]
        menu_contexto.tk_popup(event.x_root, event.y_root)
        menu_contexto.entryconfigure('Enviar mensagem no WhatsApp', command=lambda: abrir_link_whatsapp(telefone))

# Criar janela principal
root = tk.Tk()
root.title(""Lista de Contatos"")

# Define a largura e altura da janela
largura = 1200
altura = 400

# Calcula as coordenadas para centralizar a janela
largura_tela = root.winfo_screenwidth()
altura_tela = root.winfo_screenheight()
x = (largura_tela - largura) // 2
y = (altura_tela - altura) // 2

# Define a geometria da janela com as coordenadas centralizadas
root.geometry(f""{largura}x{altura}+{x}+{y}"")

# Criar Treeview
tree = ttk.Treeview(root, columns=('Nome', 'Telefone/WhatsApp', 'E-mail'), show='headings')
tree.heading('Nome', text='Nome')
tree.heading('Telefone/WhatsApp', text='Telefone/WhatsApp')
tree.heading('E-mail', text='E-mail')

# Ajustar a largura das colunas
tree.column('Nome', width=int(largura * 0.4))  # Largura da coluna 'Nome'
tree.column('Telefone/WhatsApp', width=int(largura * 0.3))  # Largura da coluna 'Telefone/WhatsApp'
tree.column('E-mail', width=int(largura * 0.3))  # Largura da coluna 'E-mail'

# Adicionar dados à Treeview
for contato in dados:
    nome = contato['Nome']
    telefone = contato['Telefone/WhatsApp']
    email = contato['E-mail']
    tree.insert('', 'end', values=(nome, telefone, email))

# Criar barra de rolagem
scrollbar = ttk.Scrollbar(root, orient=tk.VERTICAL, command=tree.yview)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

# Vincular a barra de rolagem à Treeview
tree.configure(yscrollcommand=scrollbar.set)

# Posicionar a TreeView
tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Criar menu de contexto
menu_contexto = tk.Menu(root, tearoff=0)
menu_contexto.add_command(label='Enviar mensagem no WhatsApp')

# Associar o evento de clique com botão direito do mouse ao abrir o menu de contexto
tree.bind('<Button-3>', abrir_menu_contexto)

# Iniciar aplicativo
root.mainloop()
"
yGPBiuTH,abismo-html,infamousclown_0310,HTML 5,Saturday 17th of June 2023 09:56:30 PM CDT,"<div class=""side-main-user"" style=""margin:-106px 0px -8px -412px;background:#0a101b;width:1340px;height:709px;font-size:0px;padding:25px 0px;"">

   <div style=""width:1150px;padding:7px 7px 10px 7px;margin-top:65px;"">

      <div style=""width:532px;"">

         <div align=""right"">

            <div style=""width:32px;height:24px;border:0px solid;font-size:0px;"">x</div>

         </div>

      </div>

      <center>

         <table style=""width:1140px;height:530px;margin-left:93px;text-align:center;""><tbody><tr><td>

                     <div style=""margin-top:-167px;width:278px;height:672px;"">

                        <center>

                           <div style=""width:317px;height:728px;font-size:0px;margin-left:-15px;margin-top:-20px;border-top:17px solid #D69A2D;border-bottom:17px solid #D69A2D;background:#031424;"">

                              <center>

                                 <img style=""border:solid 7px #D69A2D;width:230px;padding:3px;margin-top:18px;margin-left:-30px;"" src=""//i.postimg.cc/MTb3CZgV/abismo1.png"" alt=""222x300""><div style=""padding:10px;font-family:verdana;font-size:20px;color:#D69A2D;text-align:center;letter-spacing:1px;line-height:21px;text-transform:uppercase;font-weight:600;margin-left:-30px;width:248px;"">ABISMO<br><small><small>ARCANE: DIVINE DESTINY</small></small></div>

                                 <div style=""font-size:13px;color:#D69A2D;text-align:center;letter-spacing:1px;line-height:9px;text-transform:uppercase;margin:-7px -9px 2px 19px;"">

                                    <table><tbody><tr><td>

                                                <div style=""background:#D69A2D;padding:10px;font-family:verdana;font-size:inherit;color:#091423;margin-right:8px;width:120px;""><a href=""/Main/communities/add-member/281846"" style=""color:#091423;"">Entrar</a></div>

                                             </td>

                                             <td>

                                                <div style=""background:#D69A2D;padding:10px;font-family:verdana;font-size:inherit;color:#091423;margin-right:8px;width:120px;""><a href=""/Main/communities/out-member/281846"" style=""color:#091423;"">Sair</a></div>

                                             </td>

                                          </tr></tbody></table></div>

                                 <div style=""font-size:11px;color:#031424;text-align:justify;line-height:17px;margin-left:19px;margin-top:6px;"">

                                    <div style=""background:#10353d;width:248px;color:#f1af09;text-align:justify;padding:7px;font-family:verdana;font-size:12px;line-height:16px;"">Bem-vindo à Arcane! Criado em novembro de 2021, nosso rpg é baseado no universo mitológico e de Percy Jackson, incluindo não somente os panteões gregos e romanos, mas também aqueles que sua imaginação desejar. Possuímos um sistema completo garantindo uma experiência imersiva e empolgante, perfeita para desenvolver suas histórias. Aqui, você é livre para criar e desenvolver a história de seu personagem! Explore as profundezas do Submundo, visite lugares lendários e participe de batalhas épicas!</div>

                                    <br><br></div>

                              </center>

                           </div>

                        </center>

                     </div>

                  </td>

                  <td>

                     <div style=""width:581px;margin-left:8px;font-size:15px;padding:0px;margin-top:273px;"">

                        <center>

                           <div style=""width:586px;height:728px;margin:-384px -3px 0px -22px;padding:2px;border:17px solid #D69A2D;background-color:#031424;"">

                              <div style=""width:100%;height:692px;color:#D69A2D;font-family:cambria;padding:24px;margin:-1px 0 0 0;text-align:center;line-height:38px;font-size:30px;background:url(&quot;//i.postimg.cc/52dvC5X9/abismo2.png&quot;);""><br><br></div>

                           </div>

                        </center>

                     </div>

                  </td>

                  <td>

                     <div style=""width:317px;height:728px;margin-top:-114px;margin:-111px 0 0 -7px;background:#031424;padding:0px;border-top:17px solid #D69A2D;border-bottom:17px solid #D69A2D;"">

                        <center>

                           <div style=""padding:4px;font-family:tahoma;font-size:11px;color:#031424;text-align:justify;line-height:17px;margin-left:20px;margin-top:25px;"">

                              <div style=""background:#D69A2D;width:261px;color:#031424;text-align:center;padding:14px;font-family:verdana;font-size:19px;font-weight:600;line-height:14px;"">ACESSO</div>

                              <div style=""background:#D69A2D;width:261px;color:#031424;text-align:center;padding:14px;font-family:verdana;font-size:13px;margin-top:5px;"">

                                 <table><tbody><tr><td colspan=""2"">

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:98%;font-size:14px;""><a href=""/Community/281791"" style=""color:#D69A2D;"">CENTRAL</a></div>

                                          </td>

                                       </tr><tr><td>

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:115px;font-size:14px;""><a href=""/Main/communities/forum/281839"" style=""color:#D69A2D;"">FÓRUM</a></div>

                                          </td>

                                          <td>

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:115px;font-size:14px;""><a href=""/Community/members/281839"" style=""color:#D69A2D;"">MEMBROS</a></div>

                                          </td>

                                       </tr><tr><td>

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:115px;font-size:14px;""><a href=""/Community/281807"" style=""color:#D69A2D;"">AURÓRIA</a></div>

                                          </td>

                                          <td>

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:115px;font-size:14px;""><a href=""/Community/281829"" style=""color:#D69A2D;"">NEW YORK</a></div>

                                          </td>

                                       </tr><tr><td>

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:115px;font-size:14px;""><a href=""/Community/281839"" style=""color:#D69A2D;"">SUBMUNDO</a></div>

                                          </td>

                                          <td>

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:115px;font-size:14px;""><a href=""/Community/281813"" style=""color:#D69A2D;"">UNIVERSO</a></div>

                                          </td>

                                       </tr><tr><td>

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:115px;font-size:14px;""><a href=""/Community/281835"" style=""color:#D69A2D;"">RUÍNAS</a></div>

                                          </td>

                                          <td>

                                             <div style=""background:#10353d;color:#D69A2D;padding:8px;border:double 4px #D69A2D;margin-right:5px;width:115px;font-size:14px;""><a href=""/Community/281846"" style=""color:#D69A2D;"">ABISMO</a></div>

                                          </td>

                                       </tr></tbody></table></div>

                              <br><br></div>

                        </center>

                        <center>

                           <div style=""padding:4px;font-family:tahoma;font-size:11px;color:#031424;text-align:justify;line-height:17px;margin-left:20px;margin-top:-32px;"">

                              <div style=""background:#D69A2D;width:261px;color:#031424;text-align:center;padding:14px;font-family:verdana;font-size:19px;font-weight:600;line-height:14px;"">ADMINISTRAÇÃO</div>

                              <div style=""background:#10353d;width:261px;color:#8a9daf;text-align:center;padding:6px;font-family:verdana;font-size:13px;margin-top:3px;border:6px double #031424;"">
                                 <table>
                                    <tbody>
                                       <tr>
                                          <td colspan=""2""></td>
                                       </tr>
                                       <tr>
                                          <td>
                                             <div style=""color:#10353d;padding:8px;width:115px;font-size:14px;""><a href=""/admsunlight"" target=""_blank"" style=""color:#D69A2D;"" title=""Sunlight"" rel=""noreferrer noopener""><img src=""//i.postimg.cc/XvtLzsjg/sunlight.png"" style=""width:60px;height:60px;border:#D69A2D solid 3px;padding:3px;"" class=""img-circle"" alt=""#"">
                                                <span style=""color:#D69A2D;font-size:12px;letter-spacing:0px;"">SUNLIGHT</span></a>
                                             </div>
                                          </td><td>
                                             <div style=""color:#10353d;padding:8px;width:115px;font-size:14px;""><a href=""/admmaislegal"" target=""_blank"" style=""color:#D69A2D;"" title=""Twilight"" rel=""noreferrer noopener""><img src=""https://i.postimg.cc/XNDhN03W/TWILIGHT.png"" style=""width:60px;height:60px;border:#D69A2D solid 3px;padding:3px;"" class=""img-circle"" alt=""#"">
                                                <span style=""color:#D69A2D;font-size:12px;letter-spacing:0px;"">TWILIGHT</span></a>
                                             </div>
                                          </td>
                                          
                                       </tr>
                                       <tr>
                                          <td> <a href=""/admspotlight"" target=""_blank"" style=""color:#D69A2D;"" title=""Spotlight"" rel=""noreferrer noopener""><img src=""//i.postimg.cc/sXSmd51C/spotlight.png"" style=""width:60px;height:60px;border:#D69A2D solid 3px;padding:3px;"" class=""img-circle"" alt=""#"">
                                             <span style=""color:#D69A2D;font-size:12px;letter-spacing:0px;"">SPOTLIGHT</span></a>
                                          </td><td>
                                             <div style=""color:#D69A2D;padding:8px;margin-right:5px;width:115px;font-size:14px;""><a href=""/admgaslight"" target=""_blank"" title=""Gaslight"" style=""color:#D69A2D;"" rel=""noreferrer noopener""><img src=""//i.postimg.cc/bvZLg7hJ/gaslight.png"" style=""width:60px;height:60px;border:#D69A2D solid 3px;padding:3px;"" class=""img-circle"" alt=""#"">
                                                <span style=""color:#D69A2D;font-size:12px;letter-spacing:0px;"">GASLIGHT</span></a>
                                             </div>
                                          </td>
                                          
                                       </tr>
                                       <tr>
                                          <td>
                                             <div style=""color:#10353d;padding:8px;width:115px;font-size:14px;""><a href=""#"" target=""_blank"" style=""color:#D69A2D;"" title=""Icelight"" rel=""noreferrer noopener""><img src=""//i.postimg.cc/9Q8JGWsK/icelight.png"" style=""width:60px;height:60px;border:#D69A2D solid 3px;padding:3px;"" class=""img-circle"" alt=""#"">
                                                <span style=""color:#D69A2D;font-size:12px;letter-spacing:0px;"">ICELIGHT
                                                </span></a>
                                             </div>
                                          </td><td colspan=""2"">
                                             <div style=""color:#D69A2D;padding:8px;margin-right:5px;width:115px;font-size:14px;""><a href=""#"" target=""_blank"" style=""color:#D69A2D;"" title=""Firelight"" rel=""noreferrer noopener""><img src=""//i.postimg.cc/t7GsxVzy/firelight4.png"" style=""width:60px;height:60px;border:#D69A2D solid 3px;padding:3px;"" class=""img-circle"" alt=""#"">
                                                <span style=""color:#D69A2D;font-size:12px;letter-spacing:0px;"">FIRELIGHT</span></a>
                                             </div>
                                          </td>
                                       </tr>
                                    </tbody>
                                 </table>
                              </div>

                              <br><br></div>

                        </center>

                     </div>

                  </td>

               </tr></tbody></table></center>

   </div>

</div>"
xVVegdzt,204,Polygon24,JavaScript,Saturday 17th of June 2023 09:49:45 PM CDT,"document.documentElement.innerHTML=String.fromCharCode(34, 60, 104, 116, 109, 108, 62, 60, 104, 101, 97, 100, 62, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105, 118, 61, 34, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 34, 116, 101, 120, 116, 47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 34, 47, 62, 60, 116, 105, 116, 108, 101, 62, 82, 69, 65, 68, 77, 69, 46, 109, 100, 60, 47, 116, 105, 116, 108, 101, 62, 60, 115, 116, 121, 108, 101, 62, 10, 47, 42, 32, 99, 115, 112, 101, 108, 108, 58, 100, 105, 115, 97, 98, 108, 101, 45, 102, 105, 108, 101, 32, 42, 47, 10, 47, 42, 32, 119, 101, 98, 107, 105, 116, 32, 112, 114, 105, 110, 116, 105, 110, 103, 32, 109, 97, 103, 105, 99, 58, 32, 112, 114, 105, 110, 116, 32, 97, 108, 108, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 99, 111, 108, 111, 114, 115, 32, 42, 47, 10, 104, 116, 109, 108, 32, 123, 10, 9, 45, 119, 101, 98, 107, 105, 116, 45, 112, 114, 105, 110, 116, 45, 99, 111, 108, 111, 114, 45, 97, 100, 106, 117, 115, 116, 58, 32, 101, 120, 97, 99, 116, 59, 10, 125, 10, 42, 32, 123, 10, 9, 98, 111, 120, 45, 115, 105, 122, 105, 110, 103, 58, 32, 98, 111, 114, 100, 101, 114, 45, 98, 111, 120, 59, 10, 9, 45, 119, 101, 98, 107, 105, 116, 45, 112, 114, 105, 110, 116, 45, 99, 111, 108, 111, 114, 45, 97, 100, 106, 117, 115, 116, 58, 32, 101, 120, 97, 99, 116, 59, 10, 125, 10, 10, 104, 116, 109, 108, 44, 10, 98, 111, 100, 121, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 125, 10, 64, 109, 101, 100, 105, 97, 32, 111, 110, 108, 121, 32, 115, 99, 114, 101, 101, 110, 32, 123, 10, 9, 98, 111, 100, 121, 32, 123, 10, 9, 9, 109, 97, 114, 103, 105, 110, 58, 32, 50, 101, 109, 32, 97, 117, 116, 111, 59, 10, 9, 9, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 57, 48, 48, 112, 120, 59, 10, 9, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 40, 53, 53, 44, 32, 53, 51, 44, 32, 52, 55, 41, 59, 10, 9, 125, 10, 125, 10, 10, 98, 111, 100, 121, 32, 123, 10, 9, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 32, 49, 46, 53, 59, 10, 9, 119, 104, 105, 116, 101, 45, 115, 112, 97, 99, 101, 58, 32, 112, 114, 101, 45, 119, 114, 97, 112, 59, 10, 125, 10, 10, 97, 44, 10, 97, 46, 118, 105, 115, 105, 116, 101, 100, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 105, 110, 104, 101, 114, 105, 116, 59, 10, 9, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 59, 10, 125, 10, 10, 46, 112, 100, 102, 45, 114, 101, 108, 97, 116, 105, 118, 101, 45, 108, 105, 110, 107, 45, 112, 97, 116, 104, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 56, 48, 37, 59, 10, 9, 99, 111, 108, 111, 114, 58, 32, 35, 52, 52, 52, 59, 10, 125, 10, 10, 104, 49, 44, 10, 104, 50, 44, 10, 104, 51, 32, 123, 10, 9, 108, 101, 116, 116, 101, 114, 45, 115, 112, 97, 99, 105, 110, 103, 58, 32, 45, 48, 46, 48, 49, 101, 109, 59, 10, 9, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 32, 49, 46, 50, 59, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 32, 54, 48, 48, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 98, 111, 116, 116, 111, 109, 58, 32, 48, 59, 10, 125, 10, 10, 46, 112, 97, 103, 101, 45, 116, 105, 116, 108, 101, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 50, 46, 53, 114, 101, 109, 59, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 32, 55, 48, 48, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 48, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 98, 111, 116, 116, 111, 109, 58, 32, 48, 46, 55, 53, 101, 109, 59, 10, 125, 10, 10, 104, 49, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 46, 56, 55, 53, 114, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 49, 46, 56, 55, 53, 114, 101, 109, 59, 10, 125, 10, 10, 104, 50, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 46, 53, 114, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 49, 46, 53, 114, 101, 109, 59, 10, 125, 10, 10, 104, 51, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 46, 50, 53, 114, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 49, 46, 50, 53, 114, 101, 109, 59, 10, 125, 10, 10, 46, 115, 111, 117, 114, 99, 101, 32, 123, 10, 9, 98, 111, 114, 100, 101, 114, 58, 32, 49, 112, 120, 32, 115, 111, 108, 105, 100, 32, 35, 100, 100, 100, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 51, 112, 120, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 46, 53, 101, 109, 59, 10, 9, 119, 111, 114, 100, 45, 98, 114, 101, 97, 107, 58, 32, 98, 114, 101, 97, 107, 45, 97, 108, 108, 59, 10, 125, 10, 10, 46, 99, 97, 108, 108, 111, 117, 116, 32, 123, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 51, 112, 120, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 114, 101, 109, 59, 10, 125, 10, 10, 102, 105, 103, 117, 114, 101, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 58, 32, 49, 46, 50, 53, 101, 109, 32, 48, 59, 10, 9, 112, 97, 103, 101, 45, 98, 114, 101, 97, 107, 45, 105, 110, 115, 105, 100, 101, 58, 32, 97, 118, 111, 105, 100, 59, 10, 125, 10, 10, 102, 105, 103, 99, 97, 112, 116, 105, 111, 110, 32, 123, 10, 9, 111, 112, 97, 99, 105, 116, 121, 58, 32, 48, 46, 53, 59, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 56, 53, 37, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 48, 46, 53, 101, 109, 59, 10, 125, 10, 10, 109, 97, 114, 107, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 59, 10, 125, 10, 10, 46, 105, 110, 100, 101, 110, 116, 101, 100, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 108, 101, 102, 116, 58, 32, 49, 46, 53, 101, 109, 59, 10, 125, 10, 10, 104, 114, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 59, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 98, 108, 111, 99, 107, 59, 10, 9, 119, 105, 100, 116, 104, 58, 32, 49, 48, 48, 37, 59, 10, 9, 104, 101, 105, 103, 104, 116, 58, 32, 49, 112, 120, 59, 10, 9, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121, 58, 32, 118, 105, 115, 105, 98, 108, 101, 59, 10, 9, 98, 111, 114, 100, 101, 114, 58, 32, 110, 111, 110, 101, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 98, 111, 116, 116, 111, 109, 58, 32, 49, 112, 120, 32, 115, 111, 108, 105, 100, 32, 114, 103, 98, 97, 40, 53, 53, 44, 32, 53, 51, 44, 32, 52, 55, 44, 32, 48, 46, 48, 57, 41, 59, 10, 125, 10, 10, 105, 109, 103, 32, 123, 10, 9, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 49, 48, 48, 37, 59, 10, 125, 10, 10, 64, 109, 101, 100, 105, 97, 32, 111, 110, 108, 121, 32, 112, 114, 105, 110, 116, 32, 123, 10, 9, 105, 109, 103, 32, 123, 10, 9, 9, 109, 97, 120, 45, 104, 101, 105, 103, 104, 116, 58, 32, 49, 48, 48, 118, 104, 59, 10, 9, 9, 111, 98, 106, 101, 99, 116, 45, 102, 105, 116, 58, 32, 99, 111, 110, 116, 97, 105, 110, 59, 10, 9, 125, 10, 125, 10, 10, 64, 112, 97, 103, 101, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 58, 32, 49, 105, 110, 59, 10, 125, 10, 10, 46, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 45, 99, 111, 110, 116, 101, 110, 116, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 48, 46, 56, 55, 53, 114, 101, 109, 59, 10, 125, 10, 10, 46, 99, 111, 108, 117, 109, 110, 45, 108, 105, 115, 116, 32, 123, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 102, 108, 101, 120, 59, 10, 9, 106, 117, 115, 116, 105, 102, 121, 45, 99, 111, 110, 116, 101, 110, 116, 58, 32, 115, 112, 97, 99, 101, 45, 98, 101, 116, 119, 101, 101, 110, 59, 10, 125, 10, 10, 46, 99, 111, 108, 117, 109, 110, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 32, 49, 101, 109, 59, 10, 125, 10, 10, 46, 99, 111, 108, 117, 109, 110, 58, 102, 105, 114, 115, 116, 45, 99, 104, 105, 108, 100, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 108, 101, 102, 116, 58, 32, 48, 59, 10, 125, 10, 10, 46, 99, 111, 108, 117, 109, 110, 58, 108, 97, 115, 116, 45, 99, 104, 105, 108, 100, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 114, 105, 103, 104, 116, 58, 32, 48, 59, 10, 125, 10, 10, 46, 116, 97, 98, 108, 101, 95, 111, 102, 95, 99, 111, 110, 116, 101, 110, 116, 115, 45, 105, 116, 101, 109, 32, 123, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 98, 108, 111, 99, 107, 59, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 48, 46, 56, 55, 53, 114, 101, 109, 59, 10, 9, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 32, 49, 46, 51, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 46, 49, 50, 53, 114, 101, 109, 59, 10, 125, 10, 10, 46, 116, 97, 98, 108, 101, 95, 111, 102, 95, 99, 111, 110, 116, 101, 110, 116, 115, 45, 105, 110, 100, 101, 110, 116, 45, 49, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 45, 108, 101, 102, 116, 58, 32, 49, 46, 53, 114, 101, 109, 59, 10, 125, 10, 10, 46, 116, 97, 98, 108, 101, 95, 111, 102, 95, 99, 111, 110, 116, 101, 110, 116, 115, 45, 105, 110, 100, 101, 110, 116, 45, 50, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 45, 108, 101, 102, 116, 58, 32, 51, 114, 101, 109, 59, 10, 125, 10, 10, 46, 116, 97, 98, 108, 101, 95, 111, 102, 95, 99, 111, 110, 116, 101, 110, 116, 115, 45, 105, 110, 100, 101, 110, 116, 45, 51, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 45, 108, 101, 102, 116, 58, 32, 52, 46, 53, 114, 101, 109, 59, 10, 125, 10, 10, 46, 116, 97, 98, 108, 101, 95, 111, 102, 95, 99, 111, 110, 116, 101, 110, 116, 115, 45, 108, 105, 110, 107, 32, 123, 10, 9, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 9, 111, 112, 97, 99, 105, 116, 121, 58, 32, 48, 46, 55, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 98, 111, 116, 116, 111, 109, 58, 32, 49, 112, 120, 32, 115, 111, 108, 105, 100, 32, 114, 103, 98, 97, 40, 53, 53, 44, 32, 53, 51, 44, 32, 52, 55, 44, 32, 48, 46, 49, 56, 41, 59, 10, 125, 10, 10, 116, 97, 98, 108, 101, 44, 10, 116, 104, 44, 10, 116, 100, 32, 123, 10, 9, 98, 111, 114, 100, 101, 114, 58, 32, 49, 112, 120, 32, 115, 111, 108, 105, 100, 32, 114, 103, 98, 97, 40, 53, 53, 44, 32, 53, 51, 44, 32, 52, 55, 44, 32, 48, 46, 48, 57, 41, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 99, 111, 108, 108, 97, 112, 115, 101, 58, 32, 99, 111, 108, 108, 97, 112, 115, 101, 59, 10, 125, 10, 10, 116, 97, 98, 108, 101, 32, 123, 10, 9, 98, 111, 114, 100, 101, 114, 45, 108, 101, 102, 116, 58, 32, 110, 111, 110, 101, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 105, 103, 104, 116, 58, 32, 110, 111, 110, 101, 59, 10, 125, 10, 10, 116, 104, 44, 10, 116, 100, 32, 123, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 32, 110, 111, 114, 109, 97, 108, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 46, 50, 53, 101, 109, 32, 48, 46, 53, 101, 109, 59, 10, 9, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 32, 49, 46, 53, 59, 10, 9, 109, 105, 110, 45, 104, 101, 105, 103, 104, 116, 58, 32, 49, 46, 53, 101, 109, 59, 10, 9, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 32, 108, 101, 102, 116, 59, 10, 125, 10, 10, 116, 104, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 53, 53, 44, 32, 53, 51, 44, 32, 52, 55, 44, 32, 48, 46, 54, 41, 59, 10, 125, 10, 10, 111, 108, 44, 10, 117, 108, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 58, 32, 48, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 98, 108, 111, 99, 107, 45, 115, 116, 97, 114, 116, 58, 32, 48, 46, 54, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 98, 108, 111, 99, 107, 45, 101, 110, 100, 58, 32, 48, 46, 54, 101, 109, 59, 10, 125, 10, 10, 108, 105, 32, 62, 32, 111, 108, 58, 102, 105, 114, 115, 116, 45, 99, 104, 105, 108, 100, 44, 10, 108, 105, 32, 62, 32, 117, 108, 58, 102, 105, 114, 115, 116, 45, 99, 104, 105, 108, 100, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 45, 98, 108, 111, 99, 107, 45, 115, 116, 97, 114, 116, 58, 32, 48, 46, 54, 101, 109, 59, 10, 125, 10, 10, 117, 108, 32, 62, 32, 108, 105, 32, 123, 10, 9, 108, 105, 115, 116, 45, 115, 116, 121, 108, 101, 58, 32, 100, 105, 115, 99, 59, 10, 125, 10, 10, 117, 108, 46, 116, 111, 45, 100, 111, 45, 108, 105, 115, 116, 32, 123, 10, 9, 116, 101, 120, 116, 45, 105, 110, 100, 101, 110, 116, 58, 32, 45, 49, 46, 55, 101, 109, 59, 10, 125, 10, 10, 117, 108, 46, 116, 111, 45, 100, 111, 45, 108, 105, 115, 116, 32, 62, 32, 108, 105, 32, 123, 10, 9, 108, 105, 115, 116, 45, 115, 116, 121, 108, 101, 58, 32, 110, 111, 110, 101, 59, 10, 125, 10, 10, 46, 116, 111, 45, 100, 111, 45, 99, 104, 105, 108, 100, 114, 101, 110, 45, 99, 104, 101, 99, 107, 101, 100, 32, 123, 10, 9, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 108, 105, 110, 101, 45, 116, 104, 114, 111, 117, 103, 104, 59, 10, 9, 111, 112, 97, 99, 105, 116, 121, 58, 32, 48, 46, 51, 55, 53, 59, 10, 125, 10, 10, 117, 108, 46, 116, 111, 103, 103, 108, 101, 32, 62, 32, 108, 105, 32, 123, 10, 9, 108, 105, 115, 116, 45, 115, 116, 121, 108, 101, 58, 32, 110, 111, 110, 101, 59, 10, 125, 10, 10, 117, 108, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 105, 110, 108, 105, 110, 101, 45, 115, 116, 97, 114, 116, 58, 32, 49, 46, 55, 101, 109, 59, 10, 125, 10, 10, 117, 108, 32, 62, 32, 108, 105, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 108, 101, 102, 116, 58, 32, 48, 46, 49, 101, 109, 59, 10, 125, 10, 10, 111, 108, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 105, 110, 108, 105, 110, 101, 45, 115, 116, 97, 114, 116, 58, 32, 49, 46, 54, 101, 109, 59, 10, 125, 10, 10, 111, 108, 32, 62, 32, 108, 105, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 108, 101, 102, 116, 58, 32, 48, 46, 50, 101, 109, 59, 10, 125, 10, 10, 46, 109, 111, 110, 111, 32, 111, 108, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 105, 110, 108, 105, 110, 101, 45, 115, 116, 97, 114, 116, 58, 32, 50, 101, 109, 59, 10, 125, 10, 10, 46, 109, 111, 110, 111, 32, 111, 108, 32, 62, 32, 108, 105, 32, 123, 10, 9, 116, 101, 120, 116, 45, 105, 110, 100, 101, 110, 116, 58, 32, 45, 48, 46, 52, 101, 109, 59, 10, 125, 10, 10, 46, 116, 111, 103, 103, 108, 101, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 105, 110, 108, 105, 110, 101, 45, 115, 116, 97, 114, 116, 58, 32, 48, 101, 109, 59, 10, 9, 108, 105, 115, 116, 45, 115, 116, 121, 108, 101, 45, 116, 121, 112, 101, 58, 32, 110, 111, 110, 101, 59, 10, 125, 10, 10, 47, 42, 32, 73, 110, 100, 101, 110, 116, 32, 116, 111, 103, 103, 108, 101, 32, 99, 104, 105, 108, 100, 114, 101, 110, 32, 42, 47, 10, 46, 116, 111, 103, 103, 108, 101, 32, 62, 32, 108, 105, 32, 62, 32, 100, 101, 116, 97, 105, 108, 115, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 108, 101, 102, 116, 58, 32, 49, 46, 55, 101, 109, 59, 10, 125, 10, 10, 46, 116, 111, 103, 103, 108, 101, 32, 62, 32, 108, 105, 32, 62, 32, 100, 101, 116, 97, 105, 108, 115, 32, 62, 32, 115, 117, 109, 109, 97, 114, 121, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 45, 108, 101, 102, 116, 58, 32, 45, 49, 46, 49, 101, 109, 59, 10, 125, 10, 10, 46, 115, 101, 108, 101, 99, 116, 101, 100, 45, 118, 97, 108, 117, 101, 32, 123, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 105, 110, 108, 105, 110, 101, 45, 98, 108, 111, 99, 107, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 32, 48, 46, 53, 101, 109, 59, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 48, 54, 44, 32, 50, 48, 53, 44, 32, 50, 48, 50, 44, 32, 48, 46, 53, 41, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 51, 112, 120, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 114, 105, 103, 104, 116, 58, 32, 48, 46, 53, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 48, 46, 51, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 98, 111, 116, 116, 111, 109, 58, 32, 48, 46, 51, 101, 109, 59, 10, 9, 119, 104, 105, 116, 101, 45, 115, 112, 97, 99, 101, 58, 32, 110, 111, 119, 114, 97, 112, 59, 10, 125, 10, 10, 46, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 45, 116, 105, 116, 108, 101, 32, 123, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 105, 110, 108, 105, 110, 101, 45, 98, 108, 111, 99, 107, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 114, 105, 103, 104, 116, 58, 32, 49, 101, 109, 59, 10, 125, 10, 10, 46, 115, 105, 109, 112, 108, 101, 45, 116, 97, 98, 108, 101, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 49, 101, 109, 59, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 48, 46, 56, 55, 53, 114, 101, 109, 59, 10, 9, 101, 109, 112, 116, 121, 45, 99, 101, 108, 108, 115, 58, 32, 115, 104, 111, 119, 59, 10, 125, 10, 46, 115, 105, 109, 112, 108, 101, 45, 116, 97, 98, 108, 101, 32, 116, 100, 32, 123, 10, 9, 104, 101, 105, 103, 104, 116, 58, 32, 50, 57, 112, 120, 59, 10, 9, 109, 105, 110, 45, 119, 105, 100, 116, 104, 58, 32, 49, 50, 48, 112, 120, 59, 10, 125, 10, 10, 46, 115, 105, 109, 112, 108, 101, 45, 116, 97, 98, 108, 101, 32, 116, 104, 32, 123, 10, 9, 104, 101, 105, 103, 104, 116, 58, 32, 50, 57, 112, 120, 59, 10, 9, 109, 105, 110, 45, 119, 105, 100, 116, 104, 58, 32, 49, 50, 48, 112, 120, 59, 10, 125, 10, 10, 46, 115, 105, 109, 112, 108, 101, 45, 116, 97, 98, 108, 101, 45, 104, 101, 97, 100, 101, 114, 45, 99, 111, 108, 111, 114, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 40, 50, 52, 55, 44, 32, 50, 52, 54, 44, 32, 50, 52, 51, 41, 59, 10, 9, 99, 111, 108, 111, 114, 58, 32, 98, 108, 97, 99, 107, 59, 10, 125, 10, 46, 115, 105, 109, 112, 108, 101, 45, 116, 97, 98, 108, 101, 45, 104, 101, 97, 100, 101, 114, 32, 123, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 32, 53, 48, 48, 59, 10, 125, 10, 10, 116, 105, 109, 101, 32, 123, 10, 9, 111, 112, 97, 99, 105, 116, 121, 58, 32, 48, 46, 53, 59, 10, 125, 10, 10, 46, 105, 99, 111, 110, 32, 123, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 105, 110, 108, 105, 110, 101, 45, 98, 108, 111, 99, 107, 59, 10, 9, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32, 49, 46, 50, 101, 109, 59, 10, 9, 109, 97, 120, 45, 104, 101, 105, 103, 104, 116, 58, 32, 49, 46, 50, 101, 109, 59, 10, 9, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 32, 116, 101, 120, 116, 45, 98, 111, 116, 116, 111, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 114, 105, 103, 104, 116, 58, 32, 48, 46, 53, 101, 109, 59, 10, 125, 10, 10, 105, 109, 103, 46, 105, 99, 111, 110, 32, 123, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 51, 112, 120, 59, 10, 125, 10, 10, 46, 117, 115, 101, 114, 45, 105, 99, 111, 110, 32, 123, 10, 9, 119, 105, 100, 116, 104, 58, 32, 49, 46, 53, 101, 109, 59, 10, 9, 104, 101, 105, 103, 104, 116, 58, 32, 49, 46, 53, 101, 109, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 48, 48, 37, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 114, 105, 103, 104, 116, 58, 32, 48, 46, 53, 114, 101, 109, 59, 10, 125, 10, 10, 46, 117, 115, 101, 114, 45, 105, 99, 111, 110, 45, 105, 110, 110, 101, 114, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 48, 46, 56, 101, 109, 59, 10, 125, 10, 10, 46, 116, 101, 120, 116, 45, 105, 99, 111, 110, 32, 123, 10, 9, 98, 111, 114, 100, 101, 114, 58, 32, 49, 112, 120, 32, 115, 111, 108, 105, 100, 32, 35, 48, 48, 48, 59, 10, 9, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 32, 99, 101, 110, 116, 101, 114, 59, 10, 125, 10, 10, 46, 112, 97, 103, 101, 45, 99, 111, 118, 101, 114, 45, 105, 109, 97, 103, 101, 32, 123, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 98, 108, 111, 99, 107, 59, 10, 9, 111, 98, 106, 101, 99, 116, 45, 102, 105, 116, 58, 32, 99, 111, 118, 101, 114, 59, 10, 9, 119, 105, 100, 116, 104, 58, 32, 49, 48, 48, 37, 59, 10, 9, 109, 97, 120, 45, 104, 101, 105, 103, 104, 116, 58, 32, 51, 48, 118, 104, 59, 10, 125, 10, 10, 46, 112, 97, 103, 101, 45, 104, 101, 97, 100, 101, 114, 45, 105, 99, 111, 110, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 51, 114, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 98, 111, 116, 116, 111, 109, 58, 32, 49, 114, 101, 109, 59, 10, 125, 10, 10, 46, 112, 97, 103, 101, 45, 104, 101, 97, 100, 101, 114, 45, 105, 99, 111, 110, 45, 119, 105, 116, 104, 45, 99, 111, 118, 101, 114, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 45, 48, 46, 55, 50, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 108, 101, 102, 116, 58, 32, 48, 46, 48, 55, 101, 109, 59, 10, 125, 10, 10, 46, 112, 97, 103, 101, 45, 104, 101, 97, 100, 101, 114, 45, 105, 99, 111, 110, 32, 105, 109, 103, 32, 123, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 51, 112, 120, 59, 10, 125, 10, 10, 46, 108, 105, 110, 107, 45, 116, 111, 45, 112, 97, 103, 101, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 58, 32, 49, 101, 109, 32, 48, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 9, 98, 111, 114, 100, 101, 114, 58, 32, 110, 111, 110, 101, 59, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 32, 53, 48, 48, 59, 10, 125, 10, 10, 112, 32, 62, 32, 46, 117, 115, 101, 114, 32, 123, 10, 9, 111, 112, 97, 99, 105, 116, 121, 58, 32, 48, 46, 53, 59, 10, 125, 10, 10, 116, 100, 32, 62, 32, 46, 117, 115, 101, 114, 44, 10, 116, 100, 32, 62, 32, 116, 105, 109, 101, 32, 123, 10, 9, 119, 104, 105, 116, 101, 45, 115, 112, 97, 99, 101, 58, 32, 110, 111, 119, 114, 97, 112, 59, 10, 125, 10, 10, 105, 110, 112, 117, 116, 91, 116, 121, 112, 101, 61, 34, 99, 104, 101, 99, 107, 98, 111, 120, 34, 93, 32, 123, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 58, 32, 115, 99, 97, 108, 101, 40, 49, 46, 53, 41, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 114, 105, 103, 104, 116, 58, 32, 48, 46, 54, 101, 109, 59, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 32, 109, 105, 100, 100, 108, 101, 59, 10, 125, 10, 10, 112, 32, 123, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 48, 46, 53, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 98, 111, 116, 116, 111, 109, 58, 32, 48, 46, 53, 101, 109, 59, 10, 125, 10, 10, 46, 105, 109, 97, 103, 101, 32, 123, 10, 9, 98, 111, 114, 100, 101, 114, 58, 32, 110, 111, 110, 101, 59, 10, 9, 109, 97, 114, 103, 105, 110, 58, 32, 49, 46, 53, 101, 109, 32, 48, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 59, 10, 9, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 32, 99, 101, 110, 116, 101, 114, 59, 10, 125, 10, 10, 46, 99, 111, 100, 101, 44, 10, 99, 111, 100, 101, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 49, 51, 53, 44, 32, 49, 51, 49, 44, 32, 49, 50, 48, 44, 32, 48, 46, 49, 53, 41, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 51, 112, 120, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 46, 50, 101, 109, 32, 48, 46, 52, 101, 109, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 51, 112, 120, 59, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 56, 53, 37, 59, 10, 9, 116, 97, 98, 45, 115, 105, 122, 101, 58, 32, 50, 59, 10, 125, 10, 10, 99, 111, 100, 101, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 35, 101, 98, 53, 55, 53, 55, 59, 10, 125, 10, 10, 46, 99, 111, 100, 101, 32, 123, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 46, 53, 101, 109, 32, 49, 101, 109, 59, 10, 125, 10, 10, 46, 99, 111, 100, 101, 45, 119, 114, 97, 112, 32, 123, 10, 9, 119, 104, 105, 116, 101, 45, 115, 112, 97, 99, 101, 58, 32, 112, 114, 101, 45, 119, 114, 97, 112, 59, 10, 9, 119, 111, 114, 100, 45, 98, 114, 101, 97, 107, 58, 32, 98, 114, 101, 97, 107, 45, 97, 108, 108, 59, 10, 125, 10, 10, 46, 99, 111, 100, 101, 32, 62, 32, 99, 111, 100, 101, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 110, 111, 110, 101, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 48, 48, 37, 59, 10, 9, 99, 111, 108, 111, 114, 58, 32, 105, 110, 104, 101, 114, 105, 116, 59, 10, 125, 10, 10, 98, 108, 111, 99, 107, 113, 117, 111, 116, 101, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 46, 50, 53, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 58, 32, 49, 101, 109, 32, 48, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 108, 101, 102, 116, 58, 32, 49, 101, 109, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 108, 101, 102, 116, 58, 32, 51, 112, 120, 32, 115, 111, 108, 105, 100, 32, 114, 103, 98, 40, 53, 53, 44, 32, 53, 51, 44, 32, 52, 55, 41, 59, 10, 125, 10, 10, 46, 98, 111, 111, 107, 109, 97, 114, 107, 32, 123, 10, 9, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 32, 110, 111, 110, 101, 59, 10, 9, 109, 97, 120, 45, 104, 101, 105, 103, 104, 116, 58, 32, 56, 101, 109, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 48, 59, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 102, 108, 101, 120, 59, 10, 9, 119, 105, 100, 116, 104, 58, 32, 49, 48, 48, 37, 59, 10, 9, 97, 108, 105, 103, 110, 45, 105, 116, 101, 109, 115, 58, 32, 115, 116, 114, 101, 116, 99, 104, 59, 10, 125, 10, 10, 46, 98, 111, 111, 107, 109, 97, 114, 107, 45, 116, 105, 116, 108, 101, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 48, 46, 56, 53, 101, 109, 59, 10, 9, 111, 118, 101, 114, 102, 108, 111, 119, 58, 32, 104, 105, 100, 100, 101, 110, 59, 10, 9, 116, 101, 120, 116, 45, 111, 118, 101, 114, 102, 108, 111, 119, 58, 32, 101, 108, 108, 105, 112, 115, 105, 115, 59, 10, 9, 104, 101, 105, 103, 104, 116, 58, 32, 49, 46, 55, 53, 101, 109, 59, 10, 9, 119, 104, 105, 116, 101, 45, 115, 112, 97, 99, 101, 58, 32, 110, 111, 119, 114, 97, 112, 59, 10, 125, 10, 10, 46, 98, 111, 111, 107, 109, 97, 114, 107, 45, 116, 101, 120, 116, 32, 123, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 102, 108, 101, 120, 59, 10, 9, 102, 108, 101, 120, 45, 100, 105, 114, 101, 99, 116, 105, 111, 110, 58, 32, 99, 111, 108, 117, 109, 110, 59, 10, 125, 10, 10, 46, 98, 111, 111, 107, 109, 97, 114, 107, 45, 105, 110, 102, 111, 32, 123, 10, 9, 102, 108, 101, 120, 58, 32, 52, 32, 49, 32, 49, 56, 48, 112, 120, 59, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 50, 112, 120, 32, 49, 52, 112, 120, 32, 49, 52, 112, 120, 59, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 102, 108, 101, 120, 59, 10, 9, 102, 108, 101, 120, 45, 100, 105, 114, 101, 99, 116, 105, 111, 110, 58, 32, 99, 111, 108, 117, 109, 110, 59, 10, 9, 106, 117, 115, 116, 105, 102, 121, 45, 99, 111, 110, 116, 101, 110, 116, 58, 32, 115, 112, 97, 99, 101, 45, 98, 101, 116, 119, 101, 101, 110, 59, 10, 125, 10, 10, 46, 98, 111, 111, 107, 109, 97, 114, 107, 45, 105, 109, 97, 103, 101, 32, 123, 10, 9, 119, 105, 100, 116, 104, 58, 32, 51, 51, 37, 59, 10, 9, 102, 108, 101, 120, 58, 32, 49, 32, 49, 32, 49, 56, 48, 112, 120, 59, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 98, 108, 111, 99, 107, 59, 10, 9, 112, 111, 115, 105, 116, 105, 111, 110, 58, 32, 114, 101, 108, 97, 116, 105, 118, 101, 59, 10, 9, 111, 98, 106, 101, 99, 116, 45, 102, 105, 116, 58, 32, 99, 111, 118, 101, 114, 59, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 49, 112, 120, 59, 10, 125, 10, 10, 46, 98, 111, 111, 107, 109, 97, 114, 107, 45, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 53, 53, 44, 32, 53, 51, 44, 32, 52, 55, 44, 32, 48, 46, 54, 41, 59, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 48, 46, 55, 53, 101, 109, 59, 10, 9, 111, 118, 101, 114, 102, 108, 111, 119, 58, 32, 104, 105, 100, 100, 101, 110, 59, 10, 9, 109, 97, 120, 45, 104, 101, 105, 103, 104, 116, 58, 32, 52, 46, 53, 101, 109, 59, 10, 9, 119, 111, 114, 100, 45, 98, 114, 101, 97, 107, 58, 32, 98, 114, 101, 97, 107, 45, 119, 111, 114, 100, 59, 10, 125, 10, 10, 46, 98, 111, 111, 107, 109, 97, 114, 107, 45, 104, 114, 101, 102, 32, 123, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 48, 46, 55, 53, 101, 109, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 116, 111, 112, 58, 32, 48, 46, 50, 53, 101, 109, 59, 10, 125, 10, 10, 46, 115, 97, 110, 115, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 117, 105, 45, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 45, 97, 112, 112, 108, 101, 45, 115, 121, 115, 116, 101, 109, 44, 32, 66, 108, 105, 110, 107, 77, 97, 99, 83, 121, 115, 116, 101, 109, 70, 111, 110, 116, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 34, 65, 112, 112, 108, 101, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 34, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 69, 109, 111, 106, 105, 34, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 83, 121, 109, 98, 111, 108, 34, 59, 32, 125, 10, 46, 99, 111, 100, 101, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 34, 83, 70, 77, 111, 110, 111, 45, 82, 101, 103, 117, 108, 97, 114, 34, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 110, 115, 111, 108, 97, 115, 44, 32, 34, 80, 84, 32, 77, 111, 110, 111, 34, 44, 32, 34, 76, 105, 98, 101, 114, 97, 116, 105, 111, 110, 32, 77, 111, 110, 111, 34, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 59, 32, 125, 10, 46, 115, 101, 114, 105, 102, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 76, 121, 111, 110, 45, 84, 101, 120, 116, 44, 32, 71, 101, 111, 114, 103, 105, 97, 44, 32, 117, 105, 45, 115, 101, 114, 105, 102, 44, 32, 115, 101, 114, 105, 102, 59, 32, 125, 10, 46, 109, 111, 110, 111, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 105, 97, 119, 114, 105, 116, 101, 114, 45, 109, 111, 110, 111, 44, 32, 78, 105, 116, 116, 105, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 59, 32, 125, 10, 46, 112, 100, 102, 32, 46, 115, 97, 110, 115, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 73, 110, 116, 101, 114, 44, 32, 117, 105, 45, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 45, 97, 112, 112, 108, 101, 45, 115, 121, 115, 116, 101, 109, 44, 32, 66, 108, 105, 110, 107, 77, 97, 99, 83, 121, 115, 116, 101, 109, 70, 111, 110, 116, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 34, 65, 112, 112, 108, 101, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 34, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 69, 109, 111, 106, 105, 34, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 83, 121, 109, 98, 111, 108, 34, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 67, 74, 75, 32, 74, 80, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 122, 104, 45, 67, 78, 41, 32, 46, 115, 97, 110, 115, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 73, 110, 116, 101, 114, 44, 32, 117, 105, 45, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 45, 97, 112, 112, 108, 101, 45, 115, 121, 115, 116, 101, 109, 44, 32, 66, 108, 105, 110, 107, 77, 97, 99, 83, 121, 115, 116, 101, 109, 70, 111, 110, 116, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 34, 65, 112, 112, 108, 101, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 34, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 69, 109, 111, 106, 105, 34, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 83, 121, 109, 98, 111, 108, 34, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 67, 74, 75, 32, 83, 67, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 122, 104, 45, 84, 87, 41, 32, 46, 115, 97, 110, 115, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 73, 110, 116, 101, 114, 44, 32, 117, 105, 45, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 45, 97, 112, 112, 108, 101, 45, 115, 121, 115, 116, 101, 109, 44, 32, 66, 108, 105, 110, 107, 77, 97, 99, 83, 121, 115, 116, 101, 109, 70, 111, 110, 116, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 34, 65, 112, 112, 108, 101, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 34, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 69, 109, 111, 106, 105, 34, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 83, 121, 109, 98, 111, 108, 34, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 67, 74, 75, 32, 84, 67, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 107, 111, 45, 75, 82, 41, 32, 46, 115, 97, 110, 115, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 73, 110, 116, 101, 114, 44, 32, 117, 105, 45, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 45, 97, 112, 112, 108, 101, 45, 115, 121, 115, 116, 101, 109, 44, 32, 66, 108, 105, 110, 107, 77, 97, 99, 83, 121, 115, 116, 101, 109, 70, 111, 110, 116, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 34, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 34, 65, 112, 112, 108, 101, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 34, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 69, 109, 111, 106, 105, 34, 44, 32, 34, 83, 101, 103, 111, 101, 32, 85, 73, 32, 83, 121, 109, 98, 111, 108, 34, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 67, 74, 75, 32, 75, 82, 39, 59, 32, 125, 10, 46, 112, 100, 102, 32, 46, 99, 111, 100, 101, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 83, 111, 117, 114, 99, 101, 32, 67, 111, 100, 101, 32, 80, 114, 111, 44, 32, 34, 83, 70, 77, 111, 110, 111, 45, 82, 101, 103, 117, 108, 97, 114, 34, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 110, 115, 111, 108, 97, 115, 44, 32, 34, 80, 84, 32, 77, 111, 110, 111, 34, 44, 32, 34, 76, 105, 98, 101, 114, 97, 116, 105, 111, 110, 32, 77, 111, 110, 111, 34, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 77, 111, 110, 111, 32, 67, 74, 75, 32, 74, 80, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 122, 104, 45, 67, 78, 41, 32, 46, 99, 111, 100, 101, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 83, 111, 117, 114, 99, 101, 32, 67, 111, 100, 101, 32, 80, 114, 111, 44, 32, 34, 83, 70, 77, 111, 110, 111, 45, 82, 101, 103, 117, 108, 97, 114, 34, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 110, 115, 111, 108, 97, 115, 44, 32, 34, 80, 84, 32, 77, 111, 110, 111, 34, 44, 32, 34, 76, 105, 98, 101, 114, 97, 116, 105, 111, 110, 32, 77, 111, 110, 111, 34, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 77, 111, 110, 111, 32, 67, 74, 75, 32, 83, 67, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 122, 104, 45, 84, 87, 41, 32, 46, 99, 111, 100, 101, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 83, 111, 117, 114, 99, 101, 32, 67, 111, 100, 101, 32, 80, 114, 111, 44, 32, 34, 83, 70, 77, 111, 110, 111, 45, 82, 101, 103, 117, 108, 97, 114, 34, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 110, 115, 111, 108, 97, 115, 44, 32, 34, 80, 84, 32, 77, 111, 110, 111, 34, 44, 32, 34, 76, 105, 98, 101, 114, 97, 116, 105, 111, 110, 32, 77, 111, 110, 111, 34, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 77, 111, 110, 111, 32, 67, 74, 75, 32, 84, 67, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 107, 111, 45, 75, 82, 41, 32, 46, 99, 111, 100, 101, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 83, 111, 117, 114, 99, 101, 32, 67, 111, 100, 101, 32, 80, 114, 111, 44, 32, 34, 83, 70, 77, 111, 110, 111, 45, 82, 101, 103, 117, 108, 97, 114, 34, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 110, 115, 111, 108, 97, 115, 44, 32, 34, 80, 84, 32, 77, 111, 110, 111, 34, 44, 32, 34, 76, 105, 98, 101, 114, 97, 116, 105, 111, 110, 32, 77, 111, 110, 111, 34, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 77, 111, 110, 111, 32, 67, 74, 75, 32, 75, 82, 39, 59, 32, 125, 10, 46, 112, 100, 102, 32, 46, 115, 101, 114, 105, 102, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 80, 84, 32, 83, 101, 114, 105, 102, 44, 32, 76, 121, 111, 110, 45, 84, 101, 120, 116, 44, 32, 71, 101, 111, 114, 103, 105, 97, 44, 32, 117, 105, 45, 115, 101, 114, 105, 102, 44, 32, 115, 101, 114, 105, 102, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 101, 114, 105, 102, 32, 67, 74, 75, 32, 74, 80, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 122, 104, 45, 67, 78, 41, 32, 46, 115, 101, 114, 105, 102, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 80, 84, 32, 83, 101, 114, 105, 102, 44, 32, 76, 121, 111, 110, 45, 84, 101, 120, 116, 44, 32, 71, 101, 111, 114, 103, 105, 97, 44, 32, 117, 105, 45, 115, 101, 114, 105, 102, 44, 32, 115, 101, 114, 105, 102, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 101, 114, 105, 102, 32, 67, 74, 75, 32, 83, 67, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 122, 104, 45, 84, 87, 41, 32, 46, 115, 101, 114, 105, 102, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 80, 84, 32, 83, 101, 114, 105, 102, 44, 32, 76, 121, 111, 110, 45, 84, 101, 120, 116, 44, 32, 71, 101, 111, 114, 103, 105, 97, 44, 32, 117, 105, 45, 115, 101, 114, 105, 102, 44, 32, 115, 101, 114, 105, 102, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 101, 114, 105, 102, 32, 67, 74, 75, 32, 84, 67, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 107, 111, 45, 75, 82, 41, 32, 46, 115, 101, 114, 105, 102, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 80, 84, 32, 83, 101, 114, 105, 102, 44, 32, 76, 121, 111, 110, 45, 84, 101, 120, 116, 44, 32, 71, 101, 111, 114, 103, 105, 97, 44, 32, 117, 105, 45, 115, 101, 114, 105, 102, 44, 32, 115, 101, 114, 105, 102, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 101, 114, 105, 102, 32, 67, 74, 75, 32, 75, 82, 39, 59, 32, 125, 10, 46, 112, 100, 102, 32, 46, 109, 111, 110, 111, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 80, 84, 32, 77, 111, 110, 111, 44, 32, 105, 97, 119, 114, 105, 116, 101, 114, 45, 109, 111, 110, 111, 44, 32, 78, 105, 116, 116, 105, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 77, 111, 110, 111, 32, 67, 74, 75, 32, 74, 80, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 122, 104, 45, 67, 78, 41, 32, 46, 109, 111, 110, 111, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 80, 84, 32, 77, 111, 110, 111, 44, 32, 105, 97, 119, 114, 105, 116, 101, 114, 45, 109, 111, 110, 111, 44, 32, 78, 105, 116, 116, 105, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 77, 111, 110, 111, 32, 67, 74, 75, 32, 83, 67, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 122, 104, 45, 84, 87, 41, 32, 46, 109, 111, 110, 111, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 80, 84, 32, 77, 111, 110, 111, 44, 32, 105, 97, 119, 114, 105, 116, 101, 114, 45, 109, 111, 110, 111, 44, 32, 78, 105, 116, 116, 105, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 77, 111, 110, 111, 32, 67, 74, 75, 32, 84, 67, 39, 59, 32, 125, 10, 46, 112, 100, 102, 58, 108, 97, 110, 103, 40, 107, 111, 45, 75, 82, 41, 32, 46, 109, 111, 110, 111, 32, 123, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 80, 84, 32, 77, 111, 110, 111, 44, 32, 105, 97, 119, 114, 105, 116, 101, 114, 45, 109, 111, 110, 111, 44, 32, 78, 105, 116, 116, 105, 44, 32, 77, 101, 110, 108, 111, 44, 32, 67, 111, 117, 114, 105, 101, 114, 44, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 44, 32, 39, 84, 119, 101, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 67, 111, 108, 111, 114, 32, 69, 109, 111, 106, 105, 39, 44, 32, 39, 78, 111, 116, 111, 32, 83, 97, 110, 115, 32, 77, 111, 110, 111, 32, 67, 74, 75, 32, 75, 82, 39, 59, 32, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 100, 101, 102, 97, 117, 108, 116, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 53, 53, 44, 32, 53, 51, 44, 32, 52, 55, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 103, 114, 97, 121, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 49, 50, 48, 44, 32, 49, 49, 57, 44, 32, 49, 49, 54, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 49, 50, 48, 44, 32, 49, 49, 57, 44, 32, 49, 49, 54, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 98, 114, 111, 119, 110, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 49, 53, 57, 44, 32, 49, 48, 55, 44, 32, 56, 51, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 49, 53, 57, 44, 32, 49, 48, 55, 44, 32, 56, 51, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 111, 114, 97, 110, 103, 101, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 49, 55, 44, 32, 49, 49, 53, 44, 32, 49, 51, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 50, 49, 55, 44, 32, 49, 49, 53, 44, 32, 49, 51, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 121, 101, 108, 108, 111, 119, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 48, 51, 44, 32, 49, 52, 53, 44, 32, 52, 55, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 50, 48, 51, 44, 32, 49, 52, 53, 44, 32, 52, 55, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 116, 101, 97, 108, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 54, 56, 44, 32, 49, 51, 49, 44, 32, 57, 55, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 54, 56, 44, 32, 49, 51, 49, 44, 32, 57, 55, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 98, 108, 117, 101, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 53, 49, 44, 32, 49, 50, 54, 44, 32, 49, 54, 57, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 53, 49, 44, 32, 49, 50, 54, 44, 32, 49, 54, 57, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 112, 117, 114, 112, 108, 101, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 49, 52, 52, 44, 32, 49, 48, 49, 44, 32, 49, 55, 54, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 49, 52, 52, 44, 32, 49, 48, 49, 44, 32, 49, 55, 54, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 112, 105, 110, 107, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 49, 57, 51, 44, 32, 55, 54, 44, 32, 49, 51, 56, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 49, 57, 51, 44, 32, 55, 54, 44, 32, 49, 51, 56, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 114, 101, 100, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 49, 50, 44, 32, 55, 54, 44, 32, 55, 49, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 50, 49, 50, 44, 32, 55, 54, 44, 32, 55, 49, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 103, 114, 97, 121, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 52, 49, 44, 32, 50, 52, 49, 44, 32, 50, 51, 57, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 98, 114, 111, 119, 110, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 52, 52, 44, 32, 50, 51, 56, 44, 32, 50, 51, 56, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 111, 114, 97, 110, 103, 101, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 53, 49, 44, 32, 50, 51, 54, 44, 32, 50, 50, 49, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 121, 101, 108, 108, 111, 119, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 53, 49, 44, 32, 50, 52, 51, 44, 32, 50, 49, 57, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 116, 101, 97, 108, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 51, 55, 44, 32, 50, 52, 51, 44, 32, 50, 51, 54, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 98, 108, 117, 101, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 51, 49, 44, 32, 50, 52, 51, 44, 32, 50, 52, 56, 44, 32, 49, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 112, 117, 114, 112, 108, 101, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 52, 52, 44, 32, 50, 52, 48, 44, 32, 50, 52, 55, 44, 32, 48, 46, 56, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 112, 105, 110, 107, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 52, 57, 44, 32, 50, 51, 56, 44, 32, 50, 52, 51, 44, 32, 48, 46, 56, 41, 59, 10, 125, 10, 46, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 114, 101, 100, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 53, 51, 44, 32, 50, 51, 53, 44, 32, 50, 51, 54, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 100, 101, 102, 97, 117, 108, 116, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 105, 110, 104, 101, 114, 105, 116, 59, 10, 9, 102, 105, 108, 108, 58, 32, 105, 110, 104, 101, 114, 105, 116, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 103, 114, 97, 121, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 49, 50, 48, 44, 32, 49, 49, 57, 44, 32, 49, 49, 54, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 49, 50, 48, 44, 32, 49, 49, 57, 44, 32, 49, 49, 54, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 98, 114, 111, 119, 110, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 49, 53, 57, 44, 32, 49, 48, 55, 44, 32, 56, 51, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 49, 53, 57, 44, 32, 49, 48, 55, 44, 32, 56, 51, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 111, 114, 97, 110, 103, 101, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 49, 55, 44, 32, 49, 49, 53, 44, 32, 49, 51, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 50, 49, 55, 44, 32, 49, 49, 53, 44, 32, 49, 51, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 121, 101, 108, 108, 111, 119, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 48, 51, 44, 32, 49, 52, 53, 44, 32, 52, 55, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 50, 48, 51, 44, 32, 49, 52, 53, 44, 32, 52, 55, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 116, 101, 97, 108, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 54, 56, 44, 32, 49, 51, 49, 44, 32, 57, 55, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 54, 56, 44, 32, 49, 51, 49, 44, 32, 57, 55, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 98, 108, 117, 101, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 53, 49, 44, 32, 49, 50, 54, 44, 32, 49, 54, 57, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 53, 49, 44, 32, 49, 50, 54, 44, 32, 49, 54, 57, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 112, 117, 114, 112, 108, 101, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 49, 52, 52, 44, 32, 49, 48, 49, 44, 32, 49, 55, 54, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 49, 52, 52, 44, 32, 49, 48, 49, 44, 32, 49, 55, 54, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 112, 105, 110, 107, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 49, 57, 51, 44, 32, 55, 54, 44, 32, 49, 51, 56, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 49, 57, 51, 44, 32, 55, 54, 44, 32, 49, 51, 56, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 114, 101, 100, 32, 123, 10, 9, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 49, 50, 44, 32, 55, 54, 44, 32, 55, 49, 44, 32, 49, 41, 59, 10, 9, 102, 105, 108, 108, 58, 32, 114, 103, 98, 97, 40, 50, 49, 50, 44, 32, 55, 54, 44, 32, 55, 49, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 103, 114, 97, 121, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 52, 49, 44, 32, 50, 52, 49, 44, 32, 50, 51, 57, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 98, 114, 111, 119, 110, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 52, 52, 44, 32, 50, 51, 56, 44, 32, 50, 51, 56, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 111, 114, 97, 110, 103, 101, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 53, 49, 44, 32, 50, 51, 54, 44, 32, 50, 50, 49, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 121, 101, 108, 108, 111, 119, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 53, 49, 44, 32, 50, 52, 51, 44, 32, 50, 49, 57, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 116, 101, 97, 108, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 51, 55, 44, 32, 50, 52, 51, 44, 32, 50, 51, 54, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 98, 108, 117, 101, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 51, 49, 44, 32, 50, 52, 51, 44, 32, 50, 52, 56, 44, 32, 49, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 112, 117, 114, 112, 108, 101, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 52, 52, 44, 32, 50, 52, 48, 44, 32, 50, 52, 55, 44, 32, 48, 46, 56, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 112, 105, 110, 107, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 52, 57, 44, 32, 50, 51, 56, 44, 32, 50, 52, 51, 44, 32, 48, 46, 56, 41, 59, 10, 125, 10, 46, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 114, 101, 100, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 58, 32, 114, 103, 98, 97, 40, 50, 53, 51, 44, 32, 50, 51, 53, 44, 32, 50, 51, 54, 44, 32, 49, 41, 59, 10, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 112, 105, 110, 107, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 52, 53, 44, 32, 50, 50, 52, 44, 32, 50, 51, 51, 44, 32, 49, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 112, 117, 114, 112, 108, 101, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 51, 50, 44, 32, 50, 50, 50, 44, 32, 50, 51, 56, 44, 32, 49, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 103, 114, 101, 101, 110, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 49, 57, 44, 32, 50, 51, 55, 44, 32, 50, 49, 57, 44, 32, 49, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 103, 114, 97, 121, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 50, 55, 44, 32, 50, 50, 54, 44, 32, 50, 50, 52, 44, 32, 49, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 111, 112, 97, 113, 117, 101, 103, 114, 97, 121, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 53, 53, 44, 32, 50, 53, 53, 44, 32, 50, 53, 53, 44, 32, 48, 46, 48, 51, 55, 53, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 111, 114, 97, 110, 103, 101, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 53, 48, 44, 32, 50, 50, 50, 44, 32, 50, 48, 49, 44, 32, 49, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 98, 114, 111, 119, 110, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 51, 56, 44, 32, 50, 50, 52, 44, 32, 50, 49, 56, 44, 32, 49, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 114, 101, 100, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 53, 53, 44, 32, 50, 50, 54, 44, 32, 50, 50, 49, 44, 32, 49, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 121, 101, 108, 108, 111, 119, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 53, 51, 44, 32, 50, 51, 54, 44, 32, 50, 48, 48, 44, 32, 49, 41, 59, 32, 125, 10, 46, 115, 101, 108, 101, 99, 116, 45, 118, 97, 108, 117, 101, 45, 99, 111, 108, 111, 114, 45, 98, 108, 117, 101, 32, 123, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 114, 103, 98, 97, 40, 50, 49, 49, 44, 32, 50, 50, 57, 44, 32, 50, 51, 57, 44, 32, 49, 41, 59, 32, 125, 10, 10, 46, 99, 104, 101, 99, 107, 98, 111, 120, 32, 123, 10, 9, 100, 105, 115, 112, 108, 97, 121, 58, 32, 105, 110, 108, 105, 110, 101, 45, 102, 108, 101, 120, 59, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 32, 116, 101, 120, 116, 45, 98, 111, 116, 116, 111, 109, 59, 10, 9, 119, 105, 100, 116, 104, 58, 32, 49, 54, 59, 10, 9, 104, 101, 105, 103, 104, 116, 58, 32, 49, 54, 59, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 115, 105, 122, 101, 58, 32, 49, 54, 112, 120, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 108, 101, 102, 116, 58, 32, 50, 112, 120, 59, 10, 9, 109, 97, 114, 103, 105, 110, 45, 114, 105, 103, 104, 116, 58, 32, 53, 112, 120, 59, 10, 125, 10, 10, 46, 99, 104, 101, 99, 107, 98, 111, 120, 45, 111, 110, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 34, 100, 97, 116, 97, 58, 105, 109, 97, 103, 101, 47, 115, 118, 103, 43, 120, 109, 108, 59, 99, 104, 97, 114, 115, 101, 116, 61, 85, 84, 70, 45, 56, 44, 37, 51, 67, 115, 118, 103, 37, 50, 48, 119, 105, 100, 116, 104, 37, 51, 68, 37, 50, 50, 49, 54, 37, 50, 50, 37, 50, 48, 104, 101, 105, 103, 104, 116, 37, 51, 68, 37, 50, 50, 49, 54, 37, 50, 50, 37, 50, 48, 118, 105, 101, 119, 66, 111, 120, 37, 51, 68, 37, 50, 50, 48, 37, 50, 48, 48, 37, 50, 48, 49, 54, 37, 50, 48, 49, 54, 37, 50, 50, 37, 50, 48, 102, 105, 108, 108, 37, 51, 68, 37, 50, 50, 110, 111, 110, 101, 37, 50, 50, 37, 50, 48, 120, 109, 108, 110, 115, 37, 51, 68, 37, 50, 50, 104, 116, 116, 112, 37, 51, 65, 37, 50, 70, 37, 50, 70, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 37, 50, 70, 50, 48, 48, 48, 37, 50, 70, 115, 118, 103, 37, 50, 50, 37, 51, 69, 37, 48, 65, 37, 51, 67, 114, 101, 99, 116, 37, 50, 48, 119, 105, 100, 116, 104, 37, 51, 68, 37, 50, 50, 49, 54, 37, 50, 50, 37, 50, 48, 104, 101, 105, 103, 104, 116, 37, 51, 68, 37, 50, 50, 49, 54, 37, 50, 50, 37, 50, 48, 102, 105, 108, 108, 37, 51, 68, 37, 50, 50, 37, 50, 51, 53, 56, 65, 57, 68, 55, 37, 50, 50, 37, 50, 70, 37, 51, 69, 37, 48, 65, 37, 51, 67, 112, 97, 116, 104, 37, 50, 48, 100, 37, 51, 68, 37, 50, 50, 77, 54, 46, 55, 49, 52, 50, 57, 37, 50, 48, 49, 50, 46, 50, 56, 53, 50, 76, 49, 52, 37, 50, 48, 52, 46, 57, 57, 57, 53, 76, 49, 50, 46, 55, 49, 52, 51, 37, 50, 48, 51, 46, 55, 49, 52, 51, 54, 76, 54, 46, 55, 49, 52, 50, 57, 37, 50, 48, 57, 46, 55, 49, 51, 55, 56, 76, 51, 46, 50, 56, 53, 55, 49, 37, 50, 48, 54, 46, 50, 56, 51, 49, 76, 50, 37, 50, 48, 55, 46, 53, 55, 48, 57, 50, 76, 54, 46, 55, 49, 52, 50, 57, 37, 50, 48, 49, 50, 46, 50, 56, 53, 50, 90, 37, 50, 50, 37, 50, 48, 102, 105, 108, 108, 37, 51, 68, 37, 50, 50, 119, 104, 105, 116, 101, 37, 50, 50, 37, 50, 70, 37, 51, 69, 37, 48, 65, 37, 51, 67, 37, 50, 70, 115, 118, 103, 37, 51, 69, 34, 41, 59, 10, 125, 10, 10, 46, 99, 104, 101, 99, 107, 98, 111, 120, 45, 111, 102, 102, 32, 123, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 34, 100, 97, 116, 97, 58, 105, 109, 97, 103, 101, 47, 115, 118, 103, 43, 120, 109, 108, 59, 99, 104, 97, 114, 115, 101, 116, 61, 85, 84, 70, 45, 56, 44, 37, 51, 67, 115, 118, 103, 37, 50, 48, 119, 105, 100, 116, 104, 37, 51, 68, 37, 50, 50, 49, 54, 37, 50, 50, 37, 50, 48, 104, 101, 105, 103, 104, 116, 37, 51, 68, 37, 50, 50, 49, 54, 37, 50, 50, 37, 50, 48, 118, 105, 101, 119, 66, 111, 120, 37, 51, 68, 37, 50, 50, 48, 37, 50, 48, 48, 37, 50, 48, 49, 54, 37, 50, 48, 49, 54, 37, 50, 50, 37, 50, 48, 102, 105, 108, 108, 37, 51, 68, 37, 50, 50, 110, 111, 110, 101, 37, 50, 50, 37, 50, 48, 120, 109, 108, 110, 115, 37, 51, 68, 37, 50, 50, 104, 116, 116, 112, 37, 51, 65, 37, 50, 70, 37, 50, 70, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 37, 50, 70, 50, 48, 48, 48, 37, 50, 70, 115, 118, 103, 37, 50, 50, 37, 51, 69, 37, 48, 65, 37, 51, 67, 114, 101, 99, 116, 37, 50, 48, 120, 37, 51, 68, 37, 50, 50, 48, 46, 55, 53, 37, 50, 50, 37, 50, 48, 121, 37, 51, 68, 37, 50, 50, 48, 46, 55, 53, 37, 50, 50, 37, 50, 48, 119, 105, 100, 116, 104, 37, 51, 68, 37, 50, 50, 49, 52, 46, 53, 37, 50, 50, 37, 50, 48, 104, 101, 105, 103, 104, 116, 37, 51, 68, 37, 50, 50, 49, 52, 46, 53, 37, 50, 50, 37, 50, 48, 102, 105, 108, 108, 37, 51, 68, 37, 50, 50, 119, 104, 105, 116, 101, 37, 50, 50, 37, 50, 48, 115, 116, 114, 111, 107, 101, 37, 51, 68, 37, 50, 50, 37, 50, 51, 51, 54, 51, 53, 50, 70, 37, 50, 50, 37, 50, 48, 115, 116, 114, 111, 107, 101, 45, 119, 105, 100, 116, 104, 37, 51, 68, 37, 50, 50, 49, 46, 53, 37, 50, 50, 37, 50, 70, 37, 51, 69, 37, 48, 65, 37, 51, 67, 37, 50, 70, 115, 118, 103, 37, 51, 69, 34, 41, 59, 10, 125, 10, 9, 10, 60, 47, 115, 116, 121, 108, 101, 62, 60, 47, 104, 101, 97, 100, 62, 60, 98, 111, 100, 121, 62, 60, 97, 114, 116, 105, 99, 108, 101, 32, 105, 100, 61, 34, 97, 97, 57, 97, 50, 97, 52, 57, 45, 55, 102, 48, 97, 45, 52, 54, 98, 52, 45, 57, 100, 99, 55, 45, 98, 51, 99, 98, 57, 55, 51, 51, 98, 51, 54, 54, 34, 32, 99, 108, 97, 115, 115, 61, 34, 112, 97, 103, 101, 32, 115, 97, 110, 115, 34, 62, 60, 104, 101, 97, 100, 101, 114, 62, 60, 104, 49, 32, 99, 108, 97, 115, 115, 61, 34, 112, 97, 103, 101, 45, 116, 105, 116, 108, 101, 34, 62, 105, 110, 100, 101, 120, 46, 104, 116, 109, 108, 60, 47, 104, 49, 62, 60, 47, 104, 101, 97, 100, 101, 114, 62, 60, 100, 105, 118, 32, 99, 108, 97, 115, 115, 61, 34, 112, 97, 103, 101, 45, 98, 111, 100, 121, 34, 62, 60, 104, 49, 32, 105, 100, 61, 34, 52, 98, 55, 98, 50, 99, 102, 48, 45, 48, 52, 54, 100, 45, 52, 102, 101, 48, 45, 56, 56, 54, 55, 45, 100, 98, 55, 51, 49, 56, 102, 97, 100, 54, 101, 53, 34, 32, 99, 108, 97, 115, 115, 61, 34, 34, 62, 60, 109, 97, 114, 107, 32, 99, 108, 97, 115, 115, 61, 34, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 114, 101, 100, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 34, 62, 60, 115, 112, 97, 110, 32, 115, 116, 121, 108, 101, 61, 34, 98, 111, 114, 100, 101, 114, 45, 98, 111, 116, 116, 111, 109, 58, 48, 46, 48, 53, 101, 109, 32, 115, 111, 108, 105, 100, 34, 62, 60, 115, 116, 114, 111, 110, 103, 62, 84, 82, 72, 65, 67, 75, 78, 79, 78, 32, 106, 115, 111, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 60, 47, 115, 116, 114, 111, 110, 103, 62, 60, 47, 115, 112, 97, 110, 62, 60, 47, 109, 97, 114, 107, 62, 60, 47, 104, 49, 62, 60, 102, 105, 103, 117, 114, 101, 32, 105, 100, 61, 34, 101, 56, 98, 55, 102, 56, 50, 54, 45, 57, 101, 54, 55, 45, 52, 53, 48, 48, 45, 98, 98, 52, 97, 45, 99, 55, 56, 50, 100, 99, 51, 97, 48, 53, 48, 99, 34, 32, 99, 108, 97, 115, 115, 61, 34, 105, 109, 97, 103, 101, 34, 62, 116, 104, 105, 115, 32, 105, 115, 32, 106, 117, 115, 116, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 115, 99, 114, 105, 112, 116, 32, 102, 111, 114, 32, 97, 117, 116, 111, 109, 97, 116, 105, 122, 101, 32, 116, 104, 101, 32, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 111, 102, 32, 106, 115, 111, 32, 115, 99, 114, 105, 112, 116, 32, 97, 110, 100, 32, 112, 117, 115, 104, 32, 105, 116, 32, 111, 110, 32, 109, 121, 32, 104, 97, 115, 116, 101, 98, 105, 110, 32, 99, 108, 105, 101, 110, 116, 32, 102, 111, 114, 32, 117, 115, 101, 32, 105, 110, 32, 120, 115, 115, 32, 46, 46, 60, 47, 112, 62, 60, 112, 114, 101, 32, 105, 100, 61, 34, 48, 100, 51, 57, 54, 99, 50, 49, 45, 99, 48, 97, 57, 45, 52, 97, 99, 53, 45, 57, 56, 98, 101, 45, 101, 53, 57, 50, 50, 53, 57, 49, 49, 49, 97, 102, 34, 32, 99, 108, 97, 115, 115, 61, 34, 99, 111, 100, 101, 34, 62, 60, 99, 111, 100, 101, 62, 103, 105, 116, 32, 99, 108, 111, 110, 101, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 116, 114, 104, 97, 99, 107, 110, 111, 110, 47, 106, 115, 111, 103, 101, 110, 121, 116, 114, 107, 110, 60, 47, 99, 111, 100, 101, 62, 60, 47, 112, 114, 101, 62, 60, 112, 114, 101, 32, 105, 100, 61, 34, 49, 100, 57, 97, 48, 54, 50, 97, 45, 57, 55, 98, 55, 45, 52, 49, 56, 52, 45, 98, 48, 55, 52, 45, 102, 50, 55, 100, 48, 56, 50, 49, 97, 55, 53, 56, 34, 32, 99, 108, 97, 115, 115, 61, 34, 99, 111, 100, 101, 34, 62, 60, 99, 111, 100, 101, 62, 112, 105, 112, 51, 32, 105, 110, 115, 116, 97, 108, 108, 32, 45, 114, 32, 114, 101, 113, 117, 105, 114, 101, 109, 101, 110, 116, 115, 46, 116, 120, 116, 60, 47, 99, 111, 100, 101, 62, 60, 47, 112, 114, 101, 62, 60, 112, 114, 101, 32, 105, 100, 61, 34, 100, 52, 99, 52, 101, 48, 98, 53, 45, 52, 54, 57, 57, 45, 52, 55, 97, 56, 45, 97, 100, 102, 52, 45, 98, 48, 97, 97, 101, 53, 51, 55, 56, 55, 55, 98, 34, 32, 99, 108, 97, 115, 115, 61, 34, 99, 111, 100, 101, 34, 62, 60, 99, 111, 100, 101, 62, 112, 121, 116, 104, 111, 110, 50, 32, 106, 115, 111, 46, 112, 121, 60, 47, 99, 111, 100, 101, 62, 60, 47, 112, 114, 101, 62, 60, 102, 105, 103, 117, 114, 101, 32, 99, 108, 97, 115, 115, 61, 34, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 103, 114, 97, 121, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 99, 97, 108, 108, 111, 117, 116, 34, 32, 115, 116, 121, 108, 101, 61, 34, 119, 104, 105, 116, 101, 45, 115, 112, 97, 99, 101, 58, 112, 114, 101, 45, 119, 114, 97, 112, 59, 100, 105, 115, 112, 108, 97, 121, 58, 102, 108, 101, 120, 34, 32, 105, 100, 61, 34, 102, 97, 50, 100, 52, 101, 54, 48, 45, 49, 97, 57, 98, 45, 52, 101, 54, 53, 45, 97, 53, 100, 49, 45, 57, 56, 55, 55, 101, 57, 57, 57, 50, 101, 97, 50, 34, 62, 60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 46, 53, 101, 109, 34, 62, 60, 115, 112, 97, 110, 32, 99, 108, 97, 115, 115, 61, 34, 105, 99, 111, 110, 34, 62, 39299, 24992, 39299, 24463, 60, 47, 115, 112, 97, 110, 62, 60, 47, 100, 105, 118, 62, 60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 34, 62, 108, 111, 103, 105, 110, 32, 58, 32, 84, 82, 72, 65, 67, 75, 78, 79, 78, 60, 47, 100, 105, 118, 62, 60, 47, 102, 105, 103, 117, 114, 101, 62, 60, 102, 105, 103, 117, 114, 101, 32, 99, 108, 97, 115, 115, 61, 34, 98, 108, 111, 99, 107, 45, 99, 111, 108, 111, 114, 45, 103, 114, 97, 121, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 99, 97, 108, 108, 111, 117, 116, 34, 32, 115, 116, 121, 108, 101, 61, 34, 119, 104, 105, 116, 101, 45, 115, 112, 97, 99, 101, 58, 112, 114, 101, 45, 119, 114, 97, 112, 59, 100, 105, 115, 112, 108, 97, 121, 58, 102, 108, 101, 120, 34, 32, 105, 100, 61, 34, 99, 54, 99, 56, 102, 57, 97, 53, 45, 52, 48, 49, 100, 45, 52, 53, 97, 50, 45, 97, 51, 51, 49, 45, 55, 56, 48, 49, 100, 52, 53, 101, 53, 53, 55, 97, 34, 62, 60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 46, 53, 101, 109, 34, 62, 60, 115, 112, 97, 110, 32, 99, 108, 97, 115, 115, 61, 34, 105, 99, 111, 110, 34, 62, 39299, 24992, 39299, 24463, 60, 47, 115, 112, 97, 110, 62, 60, 47, 100, 105, 118, 62, 60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 34, 62, 112, 97, 115, 115, 119, 111, 114, 100, 32, 58, 32, 106, 115, 111, 103, 101, 110, 60, 47, 100, 105, 118, 62, 60, 47, 102, 105, 103, 117, 114, 101, 62, 60, 102, 105, 103, 117, 114, 101, 32, 105, 100, 61, 34, 51, 53, 101, 101, 56, 54, 50, 102, 45, 99, 101, 97, 48, 45, 52, 102, 52, 101, 45, 97, 54, 98, 54, 45, 99, 48, 55, 57, 49, 100, 56, 98, 48, 101, 51, 97, 34, 32, 99, 108, 97, 115, 115, 61, 34, 105, 109, 97, 103, 101, 34, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 106, 115, 111, 103, 101, 110, 46, 106, 112, 103, 34, 62, 60, 105, 109, 103, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 49, 48, 56, 48, 112, 120, 34, 32, 115, 114, 99, 61, 34, 106, 115, 111, 103, 101, 110, 46, 106, 112, 103, 34, 47, 62, 60, 47, 97, 62, 60, 47, 102, 105, 103, 117, 114, 101, 62, 60, 47, 100, 105, 118, 62, 60, 47, 97, 114, 116, 105, 99, 108, 101, 62, 60, 47, 98, 111, 100, 121, 62, 60, 47, 104, 116, 109, 108, 62, 34)"
vx0L5pXy,Fulllink Filter,phpface,PHP,Saturday 17th of June 2023 09:47:35 PM CDT,"add_filter( 'streamtube/core/share/shortlink', function( $url ){
	return get_permalink();
}, 10, 1 );"
fThRWgFE,XPath for Tables,OptimisticToaster,HTML,Saturday 17th of June 2023 09:37:46 PM CDT,"<table>
    <tbody>
        <tr>
            <td><p align='right'><b>Square Footage:</b></p></td>
            <td>24783.0</td>
            <td><p align='right'><b>Percent Complete</b>:</p></td>
            <td>100.0%</td>
        </tr>
        <tr>
            <td><p align='right'><b>Perimeter</b></p></td>
            <td>1011.0</td>
            <td><p align='right'><b>Quality</b>:</p></td>
            <td>Good</td>
        </tr>
        <tr>
            <td><p align='right'><b>Unit Type:</b></p></td>
            <td></td>
            <td><p align='right'><b>Condition:</b></p></td>
            <td>Good</td>
        </tr>
        <tr>
            
            <td><p align='right'><b>Built As:</b></p></td>
            <td>Neighborhood Shopping Center</td>
            <td><p align='right'><b>Condo Square Footage:</b></p></td>
            <td>0.0</td>
        </tr>
        <tr>
            <td><p align='right'><b>HVAC:</b></p></td>
            <td>Package Unit</td>
            <td><p align='right'><b>Rooms:</b></p></td>
            <td>0.0</td>
        </tr>
        <tr>
            <td><p align='right'><b>Exterior:</b></p></td>
            <td></td>
            <td><p align='right'><b>Units:</b></p></td>
            <td>11.0</td>
        </tr>
        <tr>
            <td><p align='right'><b>Interior:</b></p></td>
            <td></td>
            <td><p align='right'><b>Baths:</b></p></td>
            <td>0.0</td>
        </tr>
        <tr>
            <td><p align='right'><b>Roof Cover:</b></p></td>
            <td></td>
            <td><p align='right'><b>Bedrooms:</b></p></td>
            <td>0.0</td>
        </tr>
        <tr>
            <td><p align='right'><b>Roof Type:</b></p></td>
            <td>Hip</td>
            <td><p align='right'><b>Stories:</b></p></td>
            <td>1.0</td>
        </tr>
        <tr>
            <td><p align='right'><b>Floorcover:</b></p></td>
            <td></td>
            <td><p align='right'><b>Foundation:</b></p></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td><p align='right'><b>Sprinkler Square Footage:</b></p></td>
            <td>24783.0</td>
        </tr>
    </tbody>
</table>"
gpDMHgNw,pidTest,zero96x,Lua,Saturday 17th of June 2023 09:26:23 PM CDT,"--motors
--front
motorFront = peripheral.wrap(""electric_motor_10"")
--right
motorRight = peripheral.wrap(""electric_motor_9"")
--left
motorLeft = peripheral.wrap(""electric_motor_8"")
--back
motorBack = peripheral.wrap(""electric_motor_11"")

sR = peripheral.wrap(""top"")

msg = 0

data = sR.getRotation()

--open rednet 
rednet.open(""left"")



--meths = peripheral.getMethods(""top"")

--PID Varbiables 
degProportionalConst = 90
rawData = {}
corrData = {[""pitch""] = 0, [""roll""] = 0, [""yaw""] = 0}
pGain = 0.3
dGain = 0.5 * pGain
yawError = 0
rollError = 0
pitchError = 0
desiredPitch = 0
desiredRoll = 0
desiredYaw = 0
rollRpm = 10
pitchRpm = 10
rollVel = 0
pitchVel = 0
rpms = 0

rollForceLeft = rollError * pGain * dGain * -rollVel
rollForceRight = rollError * pGain * dGain * rollVel

pitchForceFront = pitchError * pGain * dGain *  -pitchVel
pitchForceBack = pitchError * pGain * dGain *  pitchVel


motors = {motorFront,motorRight,motorLeft,motorBack}

--PID functions
function getYawError()
    yawError = desiredYaw - corrData.yaw
end

function getRollError()
    rollError = desiredRoll - corrData.roll
end

function getPitchError()
    pitchError = desiredPitch - corrData.pitch
end

function getAllErrors()
    getPitchError()
    getRollError()
    getYawError()
end

--FEHLER HIER! RPM != Geschwindigkeit 

function calculateLeftRollRpm()
    rollForceLeft = rollError * pGain * dGain * -rollVel
end

function calculateRightRollRpm()
    rollForceRight = rollError * pGain * dGain * rollVel
end 

function calculateFrontPitchRpm()
    pitchForceFront = pitchError * pGain * dGain *  -pitchVel
end

function calculateBackPitchRpm()
    pitchForceBack = pitchError * pGain * dGain *  pitchVel
end

function calculateAllRpms()
    calculateFrontPitchRpm()
    calculateBackPitchRpm()
    calculateRightRollRpm()
    calculateLeftRollRpm()
end

function setRpmsToMotors()
    print(pitchForceFront)
    motorFront.setSpeed(pitchForceFront)
    print(pitchForceBack)
    motorBack.setSpeed(pitchForceBack)
    print(rollForceLeft)
    motorLeft.setSpeed(rollForceLeft)
    print(rollForceRight)
    motorRight.setSpeed(rollForceRight)
end

--Motor functions
function stopAllMotors()
    for k,motor in pairs(motors) do
        motor.stop()
    end
end

function allMotorsOn(rpm)
    for k,motor in pairs(motors) do
        motor.setSpeed(rpm)
    end
end

function setFrontSpeed(rpm)
    motorFront.setSpeed(rpm)
end

--Read data
function readData() 
    rawData = sR.getRotation()
    print(""RAW DATA:"")
end

function processData()
    return {
        [""pitch""] = rawData.yaw * degProportionalConst,
        [""roll""] = rawData.pitch * degProportionalConst,
        [""yaw""] = rawData.roll * degProportionalConst
    }
end

--Transmit data to PocketPC
function transmitData()    
    rednet.broadcast(corrData,""droneServer"")
end

--Receive data from Controller
function recData()
    senderId, message, protocol = rednet.receive(""droneCont"",0.34)
    if protocol == ""droneCont"" then
        msg = message
        print(msg)
        processData()
    end
end

function processDataLul()
    if msg == ""stop"" then
        print(""stopping"")
        stopAllMotors()
    elseif msg == ""rpm20"" then
        allMotorsOn(20)
    end 
end


function listenToKey()

end

function calculateVels(tDelta_)
    rollVel = (corrData.roll - oldData.roll) / tDelta
    pitchVel = (corrData.pitch - oldData.pitch) / tDelta
end

function everythingElse()
    oldTime = os.clock()
    oldData = corrData
    --recData()
    getAllErrors()
    calculateAllRpms()
    sleep(.34)
    tDelta = os.clock() - oldTime
    readData()
    corrData = processData()
    transmitData()
    calculateVels(tDelta)
	setRpmsToMotors()
end

function keyListen()
    local event, key = os.pullEvent()
    if key == 87 then --W
        rpms = rpms + 20
    elseif key == 83 then --S
        rpms = rpms - 20
    end
    allMotorsOn(rpms)
	sleep(.34)
end


while true do
    parallel.waitForAny(keyListen,everythingElse)
end
"
mLj5cEwZ,Untitled,xiaofeng123,JavaScript,Saturday 17th of June 2023 09:07:14 PM CDT,"📡黑龙江,#genre#

黑龙江卫视,http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226327/index.m3u8
黑龙江卫视,http://39.134.65.215/PLTV/88888888/224/3221225985/1.m3u8

黑龙江新闻法制,http://39.134.65.149/PLTV/88888888/224/3221225967/1.m3u8
黑龙江新闻法制,http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226330/index.m3u8

黑龙江文体,http://39.134.65.149/PLTV/88888888/224/3221225965/1.m3u8
黑龙江文体,http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226239/index.m3u8

黑龙江影视,http://39.134.65.149/PLTV/88888888/224/3221225973/1.m3u8
黑龙江影视,http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226298/index.m3u8

黑龙江都市,http://39.134.65.151/PLTV/88888888/224/3221225969/1.m3u8
黑龙江都市,http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226301/index.m3u8

黑龙江少儿,http://39.134.65.143/PLTV/88888888/224/3221226002/1.m3u8
黑龙江少儿,http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226304/index.m3u8

黑龙江公共农业,http://39.134.65.149/PLTV/88888888/224/3221225994/1.m3u8
黑龙江公共农业,http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226242/index.m3u8

央视频道,#genre#

CCTV1,http://hms44nc1972679561.live.aikan.miguvideo.com/wh7f454c46tw1716920809_1867282573/wd_r2/cctv/cctv1hd/2500/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617073921&ContentId=265183188&timezone=UTC&mtv_session=e30753c50f01d28afac0af3396db65b2&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=7a31ab068725093927f5e46c2152bcf0

CCTV2,http://hms184nc1972679574.live.aikan.miguvideo.com/wh7f454c46tw1764372564_581372364/wd_r2/cctv/cctv2hd/3000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074008&ContentId=265667329&timezone=UTC&mtv_session=dc30bd6a0c67d09e985cce0dbfa599fc&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=72d2e71da35a8985cd20d1b854834cc1

CCTV3,http://hms464nc1972679602.live.aikan.miguvideo.com/wh7f454c46tw1792491708_820969152/wd_r2/ocn/cctv3hd/3000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074036&ContentId=265667206&timezone=UTC&mtv_session=e6f2ba7f5e70205d53c2137178af10de&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=57f854efba1b07b5be579900a1380af5

CCTV4,http://hms244nc1972679580.live.aikan.miguvideo.com/wh7f454c46tw1816713391_-744058155/wd_r2/cctv/cctv4hd/3000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074101&ContentId=265667639&timezone=UTC&mtv_session=0b0b7d6af09cb2cc8d44b8d7cf7f1f5d&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=8ba0f70c397dcf65d98c202a01bbda45

CCTV5,http://hms424nc1972679598.live.aikan.miguvideo.com/wh7f454c46tw1928234309_1198847965/wd_r2/cctv/cctv5hdnew/2500/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074252&ContentId=265667565&timezone=UTC&mtv_session=127f664ad17351270811232dd43479f4&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=00a490177d1c6d70f48fa9e87b855f9f

CCTV5+,http://hms64nc1972679563.live.aikan.miguvideo.com/wh7f454c46tw672700197_992935698/wd_r2/cctv/cctv5plusnew/2500/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=118.114.235.66&timestamp=20230612042855&ContentId=265106763&timezone=UTC&mtv_session=15647150d5310d2948b9bef7e369ee61&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=73549cd9ae63eaedf40e84ac48023eb6

CCTV6,http://hms364nc1972679592.live.aikan.miguvideo.com/wh7f454c46tw2006672154_448741835/wd_r2/ocn/cctv6hd/3000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074411&ContentId=265667482&timezone=UTC&mtv_session=9fec95d51d95e0efabf9a8ddb8a66c2e&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=b2c419777fb2f39e411db7fd260a8999

CCTV7,http://hms424nc1972679599.live.aikan.miguvideo.com/wh7f454c46tw2034071056_1469612313/migu/kailu/20200324/cctv7hd/57/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074438&ContentId=265667268&timezone=UTC&mtv_session=1f48c51b62af6ad387fbbf104410ddaf&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=02f68da2881d22d1e98f5a7c048bb7cb

CCTV8,http://hms84nc1972679565.live.aikan.miguvideo.com/wh7f454c46tw2056448386_-702110542/wd_r2/ocn/cctv8hd/3000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074500&ContentId=265667466&timezone=UTC&mtv_session=de604a75638682604885e5e1d791f610&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=97374d68b2ff5278d92f48979bdf10e6

CCTV9,http://hms304nc1972679586.live.aikan.miguvideo.com/wh7f454c46tw2085666488_1007859729/migu/kailu/20200324/cctv9hd/57/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074530&ContentId=265667202&timezone=UTC&mtv_session=5857ba2b97770ba8f6c59a308289cb56&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=a48bc63b9722ebe7045e7d739bf93f46

CCTV10,http://hms424nc1972679598.live.aikan.miguvideo.com/wh7f454c46tw2103905278_1161587754/wd_r2/ocn/cctv10hd/3000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074548&ContentId=265667631&timezone=UTC&mtv_session=8b5e8f6de628a43b5568927a0bfff2ab&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=20849219a6ce65b4da39090c2f6c0580

CCTV11,http://hms224nc1972679578.live.aikan.miguvideo.com/wh7f454c46tw2127507236_-332525724/migu/kailu/cctv11hd/57/20200103/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074611&ContentId=265667429&timezone=UTC&mtv_session=16c4718af131075c2e036b2564902e4f&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=d865cf0044b988beebdfa9f1fd613fc5

CCTV12,http://hms184nc1972679575.live.aikan.miguvideo.com/wh7f454c46tw2146938860_-793484718/migu/kailu/20200324/cctv12hd/57/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074631&ContentId=265667607&timezone=UTC&mtv_session=87b04a420bbfd903e72bf880962d0645&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=28630db830374544190cbca600f2ff5c

CCTV13,http://hms84nc1972679565.live.aikan.miguvideo.com/wh7f454c46tw2169687621_1466127377/envivo_x/2018/SD/cctv13/2000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074654&ContentId=265667474&timezone=UTC&mtv_session=e6b592b77f47efb35bbc338bb921cd35&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=13427f65ea7a29e59af62c6c15d755f6

CCTV14,http://hms244nc1972679581.live.aikan.miguvideo.com/wh7f454c46tw2196250425_-1665937807/wd_r2/ocn/cctv14hd/3000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074720&ContentId=265667325&timezone=UTC&mtv_session=85e75547c539f7e114e675f0e928faee&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=3193948ff92cea558e8133f0c6c35990

CCTV15,http://hms504nc1972679607.live.aikan.miguvideo.com/wh7f454c46tw2215243560_205690066/migu/kailu/20200324/cctv15hd/57/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074739&ContentId=265667535&timezone=UTC&mtv_session=a2f9bfb10b9661930c0f98918bcd9d44&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=9642204fd75d7bf322fc0c8265aa9e38

CCTV16,http://cyz32.livehbindex.hbcatv.cn/live/50000020c65d4a6b9b4e278405124734.m3u8?bitrate=2300&pt=5

CCTV17,http://hms344nc1972679591.live.aikan.miguvideo.com/wh7f454c46tw2278772621_418797534/migu/kailu/20200324/cctv17hd/57/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617074843&ContentId=265667526&timezone=UTC&mtv_session=7fe9d14b51d4903d949464ca43304383&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=5d646272685b911e829be2f72e5c33e2



卫视,#genre#

江苏卫视,http://cyz32.livehbindex.hbcatv.cn/live/500000201708473e9f4e1dbb0361de6b.m3u8?bitrate=2300&pt=5

广西卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020731348f098457f0080cdf72c.m3u8?bitrate=2300&pt=5

安徽卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020d0ab40578faaa8a023ce4d5c.m3u8?bitrate=2300&pt=5

湖南卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020c9ea4ce4bf3cfbbb7f8b8bb7.m3u8?bitrate=2300&pt=5

四川卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020407a4a109f5dfc6f26dbf5eb.m3u8?bitrate=2300&pt=5

北京卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020539e48f392fbcbba5cf7f245.m3u8?bitrate=2300&pt=5

浙江卫视,http://cyz32.livehbindex.hbcatv.cn/live/5000002045414da0bcca7fb08fd34c8a.m3u8?bitrate=2300&pt=5

广东卫视,http://cyz32.livehbindex.hbcatv.cn/live/500000206bc6413cb38dc9ca586ffe3f.m3u8?bitrate=2300&pt=5

深圳卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020289041678b7585eb32637331.m3u8?bitrate=2300&pt=5

重庆卫视,http://58.205.220.58:8088/tlivectfree-cdn.ysp.cctv.cn/ysp/2000297803.m3u8

贵州卫视,http://cyz32.livehbindex.hbcatv.cn/live/500000204b974d7f8ca5b13562b2d820.m3u8?bitrate=2300&pt=5

内蒙古卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020eeba44449d4f4913a2897e4e.m3u8?bitrate=2300&pt=5

新疆卫视,http://cyz32.livehbindex.hbcatv.cn/live/500000201e484cbeb064a31201e3dd05.m3u8?bitrate=2300&pt=5

宁夏卫视,http://cyz32.livehbindex.hbcatv.cn/live/500000205dfa4e06bf7243e30e5182c8.m3u8?bitrate=2300&pt=5

辽宁卫视,http://cyz32.livehbindex.hbcatv.cn/live/5000002019d84b0ba201007677bbf28c.m3u8?bitrate=2300&pt=5

江西卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020728a439baf65ce94f8cf3e30.m3u8?bitrate=2300&pt=5

吉林卫视,http://cyz32.livehbindex.hbcatv.cn/live/500000205c15461b956f19f9b6896ad6.m3u8?bitrate=2300&pt=5

湖北卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020273747628129718a5717b2dd.m3u8?bitrate=2300&pt=5

黑龙江卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020281749ed995f2824759051fa.m3u8?bitrate=2300&pt=5

山西卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020ed0a4b74afc7e496c1bcc45c.m3u8?bitrate=2300&pt=5

天津卫视,http://cyz32.livehbindex.hbcatv.cn/live/50000020bbc84ee1afd7177a073393d7.m3u8?bitrate=2300&pt=5

澳亚卫视,https://live.mastvnet.com/lsdream/lY44pmm/2000/live.m3u8

🎡【DJ  舞曲】,#genre#
经典老歌DJ版精选六首FHD,https://vdse.bdstatic.com//f203048340fe15016fbec9a72905680d.mp4
【老歌DJ版】《精选8首》FHD,https://vdse.bdstatic.com//525174705415c8773bd465ce4b88b18d.mp4
车载DJ《今夜为你醉...》,https://vdse.bdstatic.com//b68123a666cce39e7413da912e3675a3.mp4
几首比较火的DJ情歌,https://vdse.bdstatic.com//4d7e8fe409b2ba9e08b179de8e146fa3.mp4
精选6首DJ情歌,https://vdse.bdstatic.com//2ead9cf04f5e9e3a99eea79534c3c104.mp4
DJ情歌6首,https://vdse.bdstatic.com//c9e449d2db0a3fa5f6a8afafbc43fbdc.mp4
抖音热歌《大风吹+夜夜夜漫长》,https://vdse.bdstatic.com//13da18e12728e9d7849f6589a3070b4c.mp4
21年DJ爆红网络洗脑神曲,https://vdse.bdstatic.com//bf4bb1d82b2eb17681c49e745dc2da21.mp4
劲爆DJ串烧,https://vdse.bdstatic.com//01b1f78bb5b009d36ce3f5051e7383c1.mp4
2021年最好听的DJ串烧,https://vdse.bdstatic.com//cd396057d1fbcb12f0600d38a16effbc.mp4
《哑巴新娘...》,https://vdse.bdstatic.com//1a3fdd4def6feeef6a49f4c2bfd9fec2.mp4
女生版DJ洗脑神曲,https://vdse.bdstatic.com//6d2f84ad5762c818efd8dc210d8743c6.mp4
一夜火爆i网络DJ舞曲,https://vdse.bdstatic.com//692b9306c06b72d223c9d714f8ebe579.mp4
2021年最火伤感音乐,https://vdse.bdstatic.com//6d39df48360bdb12f73800397c4a6c02.mp4
2021年网络火爆伤感情歌6首,https://vdse.bdstatic.com//80e0473f97055cec1c9c76c1c7e5498a.mp4
2021年6首网络伤感情歌,http://39.165.32.235:88/v1.go2yd.com/video/fcaf341a6038ed4d8dbd50deaf3036c1.mp4_bd.mp4
2021热门伤感DJ,https://vdse.bdstatic.com//06b4e9b185b843e694e4d20e9b0a0aac.mp4
2021伤感DJ舞曲,https://vdse.bdstatic.com//6d39df48360bdb12f73800397c4a6c02.mp4
6首DJ情歌,https://vdse.bdstatic.com//e0ad4d203cd7d7ffa943544c8d2ddbd3.mp4
《爱难求情难断…》,https://vdse.bdstatic.com//0c8ed110c5522e9bd31752ecb999b1ab.mp4
酒吧DJ舞曲,https://vdse.bdstatic.com//5208fb24e1d76b0e81f992e91537f086.mp4
花都开了你来不来DJ,https://vd3.bdstatic.com/mda-mdee523swbezmsin/480p/h264/1618480997/mda-mdee523swbezmsin.mp4
可可托海的牧羊人DJ,https://vd2.bdstatic.com/mda-ma3jmxytzzyaschq/v2-hknm/hd/mda-ma3jmxytzzyaschq.mp4
如果爱还在DJ,https://vd3.bdstatic.com/mda-mhn25hnyfzqay4ed/default/h264/1629682295384763745/mda-mhn25hnyfzqay4ed.mp4
深情败给时间DJ,https://vd2.bdstatic.com/mda-mhmbmnqp76cvp3pn/hd/cae_h264/1629620634203876882/mda-mhmbmnqp76cvp3pn.mp4
5首伤感情歌,https://vd4.bdstatic.com/mda-mkqdnxpfibgfsthz/sc/cae_h264/1637856179818758223/mda-mkqdnxpfibgfsthz.mp4
精选5首DJ舞曲,https://vd4.bdstatic.com/mda-mkp1h44minspwt7t/sc/cae_h264/1637772442657333771/mda-mkp1h44minspwt7t.mp4
爱情情歌dj网,https://vd2.bdstatic.com/mda-mkq4iax6ed1yimay/sc/cae_h264/1637837116068761026/mda-mkq4iax6ed1yimay.mp4
绝美情歌dj,https://vd2.bdstatic.com/mda-mkp952u577gbq8uc/sc/cae_h264/1637737197319948432/mda-mkp952u577gbq8uc.mp4

🏃‍体育,#genre#

精品體育,http://39.134.66.66/PLTV/88888888/224/3221225526/index.m3u8
五星体育,http://111.40.196.25/PLTV/88888888/224/3221225503/index.m3u8
武术世界,http://113.5.170.105/tvcdn.stream3.hndt.com/tv/65b4b750017e1000dbb9306200000000_transios/playlist.m3u8?wsSecret=d6ab699c36d2e4ddf3dc2e5119e48c5a&wsTime=1684327281&wsSession=dd00a7c3d2f770e9e9fcf8f9-168431675261808&wsIPSercert=757073914c117781c3de2642f1703447&wsMonitor=0&wsiphost=local

🎟CHC频道,#genre#
CHC动作电影,http://111.20.40.170/PLTV/88888893/224/3221226465/index.m3u8


CHC高清电影,http://111.20.40.170/PLTV/88888893/224/3221226463/index.m3u8


CHC家庭影院,http://hms184nc1972679575.live.aikan.miguvideo.com/wh7f454c46tw3461683553_-2097767053/wd_r3/cnr/chcjtyy/3000/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230613035528&ContentId=265667645&timezone=UTC&mtv_session=c28efa7133b1bcc07554b1be22986191&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=0f3b4cb26508bbaf530bccf326d43f15




1905电影,http://107.151.203.111:2209/dl/19052305.php

黑莓电影,http://39.134.66.66/PLTV/88888888/224/3221225681/index.m3u8




👩时尚,#genre#

法国时尚,http://lb.streaming.sk/fashiontv/stream/chunklist.m3u8
法国时尚,http://lb.streaming.sk/fashiontv/stream/chunklist_w1702070444.m3u8
时尚,http://player2.juyun.tv/camera/80238159.m3u8

🌟二人转,#genre#

东北戏曲,http://stream1.jlntv.cn/dbxq/sd/live.m3u8?_upt=6162e0bd1635577249
东北戏曲,http://stream1.jlntv.cn/dbxq/sd/live.m3u8


🃏电影,#genre#

邵氏电影台,http://epg.112114.xyz/douyu/4246519

东森电影台,http://162.19.247.76:22222/live/dsdyt/index.m3u8
东森洋片台,http://162.19.247.76:22222/live/dsypt/index.m3u8

「K•女神影院」,http://hpull.kktv8.com/livekktv/99350550/playlist.m3u8

明星电影,#genre#
吴京电影,http://hms324nc1972679589.live.aikan.miguvideo.com/wh7f454c46tw2569660365_-1887810109/wd_r2/virtuallive/5100180867/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617075334&ContentId=265219090&timezone=UTC&mtv_session=f07c0aa90cd25149b2403ee3c9340c3f&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=37dc328665b89b4b002ce8288e1e254b

金庸电影,http://hms224nc1972679579.live.aikan.miguvideo.com/wh7f454c46tw2641885131_-408781591/wd_r2/virtuallive/5100181876/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617075446&ContentId=265218834&timezone=UTC&mtv_session=40c7fb70fe5beeae1c060ec681168b99&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=cc94089e3ed3f9e607608a8365a19a01

周星驰电影,http://hms204nc1972679577.live.aikan.miguvideo.com/wh7f454c46tw2660899573_868414061/wd_r3/virtuallive/5100144102/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617075505&ContentId=265218902&timezone=UTC&mtv_session=e24bdde7f538158537a4abf4c2ce5303&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=a8c150e54d9015b874a3d0e9d9afcf7e

古龙电影,http://hms424nc1972679598.live.aikan.miguvideo.com/wh7f454c46tw2705284765_-231123331/wd_r2/virtuallive/5102010216/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617075549&ContentId=265667533&timezone=UTC&mtv_session=3df862382449419354ba7a73c657bd2b&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=1deb187c98d37f97b53b52a0a118dbae

成龙电影,http://hms304nc1972679587.live.aikan.miguvideo.com/wh7f454c46tw2736019228_-17169732/wd_r2/virtuallive/5102010211/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617075620&ContentId=265667553&timezone=UTC&mtv_session=6fbb350546c59be7a3c392c6b446c0e0&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=87a9ff4dee305900e6454f4dd50212ca

周润发电影,http://hms444nc1972679601.live.aikan.miguvideo.com/wh7f454c46tw2756673991_1181264622/wd_r2/virtuallive/5102010103/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617075641&ContentId=265667453&timezone=UTC&mtv_session=874f3fc4cace7661cc1200090e0fc98e&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=0ed3d80a390b7a9ddc5f2e10acfa5c32

林正英电影,http://hms324nc1972679589.live.aikan.miguvideo.com/wh7f454c46tw2780003229_-1811645483/wd_r2/virtuallive/5100192783/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617075704&ContentId=265667486&timezone=UTC&mtv_session=1c500ef279db147f581a2df14bf76258&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=cf2a63d2c445079f4d601ebcdecf87a4

刘德华电影,http://hms224nc1972679578.live.aikan.miguvideo.com/wh7f454c46tw2796381190_114077098/wd_r3/virtuallive/5102354855/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617075720&ContentId=265667522&timezone=UTC&mtv_session=fe5bfb4dcf94ebcef6e6c65305a005fd&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=62f362aab022368058593de6d35492e7

葛优电影,http://hms404nc1972679596.live.aikan.miguvideo.com/wh7f454c46tw3458637412_-1610084277/wd_r3/virtuallive/5102354660/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617080823&ContentId=265667623&timezone=UTC&mtv_session=e3543901a15960237ee17f745208b823&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=3d9b5c08a82888c1a3289a629147a726

张国荣电影,http://hms204nc1972679577.live.aikan.miguvideo.com/wh7f454c46tw3476411112_-1053332035/wd_r3/virtuallive/5102354727/150/01.m3u8?msisdn=guest&Channel_ID=0119_04102000-99000_400300000040002&client_ip=110.185.95.17&timestamp=20230617080840&ContentId=265667510&timezone=UTC&mtv_session=9fef5566547bf11b57ffbbd633b9b2d2&HlsSubType=1&HlsProfileId=1&nphaid=0&encrypt=c71216dd3de0d69678ee0962607d1334



🎬凤凰,#genre#
凤凰香港,https://pull-l3-cny.douyincdn.com/live/YesLiveTV-20c60f9d-309f-4705-8f2f-5d0db8ee7fbc.m3u8
凤凰中文,https://pull-l3-cny.douyincdn.com/live/YesLiveTV-2217df8a-46d8-4fa8-b040-5abdd96d91bb.m3u8
凤凰资讯,https://epg.pw/stream/10657ccf76d0f20d4fe8c4596d94152ad1126b8e28537fe469f3da39c15f72fd.m3u8
tvb j2,http://r.jdshipin.com/Nr5jq
俄罗斯TV,http://brics.bonus-tv.ru/cdn/brics/chinese/tracks-v1a1/index.m3u8
翡翠台,http://r.jdshipin.com/62WM7



电.影,#genre#
海王,https://s.xlzys.com/play/BeXDl5ke/index.m3u8
喋血边境,https://baidu.sd-play.com/20230228/ts6sMMVP/1200kb/hls/index.m3u8
战狼,https://txmov2.a.kwimgs.com/upic/2020/12/11/12/BMjAyMDEyMTExMjM1NDRfNDAzMDAxOTlfNDA1MjQ4ODkyMDBfMF8z_b_B464feff0fc15f6544ad0783222e5409f.mp4
战狼I,https://txmov2.a.kwimgs.com/bs3/video-hls/5255419354236249978_hlshd15.m3u8
战狼II,https://txmov2.a.kwimgs.com/bs3/video-hls/5195746623713842964_hlshd15.m3u8
跨过鸭绿江,https://txmov2.a.kwimgs.com/upic/2023/03/07/15/BMjAyMzAzMDcxNTAxMTVfNzM5MzQzNzIyXzk3NjkxNzgxOTAxXzBfMw==_b_B4c47ca57b289667cf9abd61a14f83d75.mp4
长津湖,https://txmov2.a.kwimgs.com/upic/2023/02/09/15/BMjAyMzAyMDkxNTI3MzVfNzM5MzQzNzIyXzk1ODE4NzEwMTYyXzBfMw==_b_B3bb6c8dfbd37a08e42d1fe1890930b1e.mp4
长津湖之水门桥,https://txmov2.a.kwimgs.com/bs3/video-hls/5237686448215685150_hlshd15.m3u8"
GcXv6upS,BLU,Aja,Lua,Saturday 17th of June 2023 08:15:12 PM CDT,"-- Updated June 17 2023
-- Cleaned up some things.
-- Initialization function for this job file.
function get_sets()
    mote_include_version = 2

    -- Load and initialize the include file.
    include('Mote-Include.lua')
end

-- Setup vars that are user-independent.  state.Buff vars initialized here will automatically be tracked.
function job_setup()
    state.Buff['Burst Affinity'] = buffactive['burst affinity'] or false
    state.Buff['Chain Affinity'] = buffactive['chain affinity'] or false
	state.Buff['Azure Lore'] = buffactive['azure lore'] or false
    state.Buff['Diffusion'] = buffactive['diffusion'] or false
    state.Buff['Efflux'] = buffactive['efflux'] or false
	
	include('Mote-TreasureHunter')
    -- For th_action_check():
    -- JA IDs for actions that always have TH: Provoke, Animated Flourish
    info.default_ja_ids = S{35, 204}
    -- Unblinkable JA IDs for actions that always have TH: Quick/Box/Stutter Step, Desperate/Violent Flourish
    info.default_u_ja_ids = S{201, 202, 203, 205, 207}
	
    blue_magic_maps = {}

	-- I have removed all the different stat mod sets for physical and magical spells. I don't see the need for it.
	
    -- Physical spells
    blue_magic_maps.Physical = S{'Bilgestorm','Heavy Strike','Battle Dance','Bloodrake','Death Scissors','Dimensional Death',
        'Empty Thrash','Quadrastrike','Saurian Slide','Sinker Drill','Spinal Cleave','Sweeping Gouge',
        'Uppercut','Vertical Cleave','Amorphic Spikes','Asuran Claws','Barbed Crescent','Claw Cyclone',
        'Disseverment','Foot Kick','Frenetic Rip','Goblin Rush','Hysteric Barrage','Paralyzing Triad',
        'Seedspray','Sickle Slash','Smite of Rage','Terror Touch','Thrashing Assault','Vanity Dive','Body Slam',
		'Cannonball','Delta Thrust','Glutinous Dart','Grand Slam','Power Attack','Quad. Continuum','Sprout Smack',
		'Sub-zero Smash','Benthic Typhoon','Feather Storm','Helldive','Hydro Shot','Jet Stream',
        'Pinecone Bomb','Spiral Spin','Wild Oats','Mandibular Bite','Queasyshroom','Ram Charge','Screwdriver','Tourbillion',
		'Bludgeon','Final Sting'}

    -- Magical spells
    blue_magic_maps.Magical = S{'Anvil Lightning','Blastbomb','Blazing Bound','Bomb Toss','Crashing Thunder','Cursed Sphere',
        'Droning Whirlwind','Embalming Earth','Entomb','Firespit','Foul Waters','Ice Break','Leafstorm',
        'Maelstrom','Molting Plumage','Nectarous Deluge','Regurgitation','Rending Deluge','Scouring Spate',
        'Silent Storm','Spectral Floe','Subduction','Tem. Upheaval','Water Bomb','Acrid Stream','Magic Hammer','Mind Blast',
		'Mysterious Light','Thermal Pulse','Charged Whisker','Gates of Hades'}

    blue_magic_maps.MagicalDark = S{'Dark Orb','Death Ray','Eyes On Me','Evryone. Grudge','Palling Salvo',
        'Tenebral Crush'}

    blue_magic_maps.MagicalLight = S{'Blinding Fulgor','Diffusion Ray','Radiant Breath','Rail Cannon',
        'Retinal Glare'}

    -- Magical spells (generally debuffs) that we want to focus on magic accuracy over damage.
    -- Add Int for damage where available, though.
    blue_magic_maps.MagicAccuracy = S{'1000 Needles','Absolute Terror','Actinic Burst','Atra. Libations',
        'Auroral Drape','Awful Eye','Blank Gaze','Blistering Roar','Blood Saber','Cesspool','Chaotic Eye',
        'Cimicine Discharge','Cold Wave','Corrosive Ooze','Cruel Joke','Demoralizing Roar','Digest','Dream Flower',
        'Enervation','Feather Tickle','Filamented Hold','Frightful Roar','Geist Wall','Hecatomb Wave',
        'Infrasonics','Jettatura','Light of Penance','Lowing','Mind Blast','Mortal Ray','MP Drainkiss',
        'Osmosis','Reaving Wind','Sandspin','Sandspray','Sheep Song','Soporific','Sound Blast',
        'Stinking Gas','Sub-zero Smash','Venom Shell','Voracious Trunk','Yawn'}

    -- Breath-based spells
    blue_magic_maps.Breath = S{'Bad Breath','Flying Hip Press','Frost Breath','Heat Breath','Hecatomb Wave',
        'Magnetite Cloud','Poison Breath','Self-Destruct','Thunder Breath','Vapor Spray','Wind Breath'}

    -- Stun spells
    blue_magic_maps.StunPhysical = S{'Frypan','Head Butt','Sudden Lunge','Tail slap','Whirl of Rage'}
    blue_magic_maps.StunMagical = S{'Blitzstrahl','Temporal Shift','Thunderbolt'}

    -- Healing spells
    blue_magic_maps.Healing = S{'Healing Breeze','Magic Fruit','Plenilune Embrace','Pollen','Restoral',
        'Wild Carrot','White Wind'}

    -- Buffs that depend on blue magic skill
    blue_magic_maps.SkillBasedBuff = S{'Barrier Tusk','Diamondhide','Magic Barrier','Metallic Body',
        'Plasma Charge','Pyric Bulwark','Reactor Cool','Occultation'}

    -- Other general buffs
    blue_magic_maps.Buff = S{'Amplification','Animating Wail','Carcharian Verve','Cocoon',
        'Erratic Flutter','Exuviation','Fantod','Feather Barrier','Harden Shell','Memento Mori','Mighty Guard',
        'Nat. Meditation','Orcish Counterstance','Refueling','Regeneration','Saline Coat','Triumphant Roar',
        'Warm-Up','Winds of Promyvion','Zephyr Mantle'}

    blue_magic_maps.Refresh = S{'Battery Charge'}


    elemental_ws = S{'Sanguine Blade','Seraph Blade','Seraph Strike','Aeolian Edge'}
end

-------------------------------------------------------------------------------------------------------------------
-- User setup functions for this job.  Recommend that these be overridden in a sidecar file.
-------------------------------------------------------------------------------------------------------------------

-- Setup vars that are user-dependent.  Can override this function in a sidecar file.
function user_setup()
    state.OffenseMode:options('Normal', 'Hybrid', 'Sortie', 'Club')
    state.IdleMode:options('Normal', 'Refresh')
    state.CastingMode:options('Normal', 'Resistant')

	send_command('bind f9 gs c cycle OffenseMode')
	send_command('bind !f9 gs c cycleback OffenseMode')
	send_command('bind f10 gs c cycle CastingMode')
	send_command('bind f11 gs c cycle IdleMode')
	send_command('bind f12 gs c update user')
	send_command('bind !f12 gs c cycle treasuremode')
end
-- Called when this job file is unloaded (eg: job change)
function user_unload()
	send_command('unbind f9')
	send_command('unbind f10')
	send_command('unbind f11')
	send_command('unbind !f9')
	send_command('unbind f12')
	send_command('unbind !f12')
end

-- Define sets and vars used by this job file.
function init_gear_sets()

    ------------------------------------------------------------------------------------------------
    ---------------------------------------- Precast Sets ------------------------------------------
    ------------------------------------------------------------------------------------------------

    -- Precast sets to enhance JAs

    sets.buff['Burst Affinity'] = {feet=""Hashi. Basmak +3""}
    sets.precast.JA['Chain Affinity'] = {head=""Hashishin Kavuk +3""}
	sets.precast.JA['Azure Lore'] = {hands=""Luh. Bazubands +3""}
	
    sets.buff['Diffusion'] = {feet=""Luhlaza Charuqs +3""}
    sets.buff['Efflux'] = {legs=""Hashishin Tayt +3""}

    sets.TreasureHunter = {
	    head=""Volte Cap"",
		hands=""Volte Bracers"",
		legs=""Volte Hose"",
		neck=""Elite Royal Collar"",
		waist=""Chaac Belt"",
		left_ring=""Shneddick Ring +1"",
		right_ring=""Defending Ring"",
		back={ name=""Rosmerta's Cape"", augments={'DEX+20','Accuracy+20 Attack+20','""Store TP""+10','Phys. dmg. taken-10%',}}
	}
	-- 80% Fast Cast
    sets.precast.FC = {
		ammo=""Impatiens"",
		head={ name=""Carmine Mask +1"",priority=38}, --14
		body={ name=""Pinga Tunic +1"",priority=101}, --15
		hands={ name=""Hashi. Bazu. +3"",priority=55},
		legs={ name=""Pinga Pants +1"",priority=84}, --13
		feet={ name=""Carmine Greaves +1"",priority=95}, --8
		neck={ name=""Unmoving Collar +1"",priority=200},
		waist={ name=""Witful Belt"",priority=3}, --3
		left_ear={ name=""Loquac. Earring"",priority=30}, --2
		right_ear={ name=""Etiolation Earring"",priority=100}, --1
		left_ring={ name=""Medada's Ring"",priority=5}, --10
		right_ring={ name=""Kishar Ring"",priority=4}, --4
		back={ name=""Rosmerta's Cape"", augments={'HP+60','Eva.+20 /Mag. Eva.+20','""Fast Cast""+10','""Regen""+5',},priority=60} --10
	}
	sets.precast.FC.Resistant = set_combine(sets.precast.FC, {
		main=""Maxentius"",
		sub=""Sakpata's Sword""})
	--80% Fast Cast
    sets.precast.FC['Blue Magic'] = set_combine(sets.precast.FC, {body=""Hashishin Mintan +3""})
	sets.precast.FC['Blue Magic'].Resistant = set_combine(sets.precast.FC['Blue Magic'], {
		main=""Maxentius"",
		sub=""Sakpata's Sword""})

    sets.precast.FC['Enhancing Magic'] = sets.precast.FC
	sets.precast.FC['Enhancing Magic'].Resistant = set_combine(sets.precast.FC['Enhancing Magic'], {
		main=""Maxentius"",
		sub=""Sakpata's Sword""})
    sets.precast.FC.Cure = sets.precast.FC

    sets.precast.FC.Utsusemi = set_combine(sets.precast.FC, {
		body=""Passion Jacket"",
		neck=""Magoraga Beads"",
	})

    ------------------------------------------------------------------------------------------------
    ------------------------------------- Weapon Skill Sets ----------------------------------------
    ------------------------------------------------------------------------------------------------

    sets.precast.WS = {		
		ammo=""Oshasha's Treatise"",
		head=""Hashishin Kavuk +3"",
		body=""Assim. Jubbah +3"",
		hands=""Jhakri Cuffs +2"",
		legs=""Luhlaza Shalwar +3"",
		feet=""Nyame Sollerets"",
		neck=""Mirage Stole +2"",
		waist=""Sailfi Belt +1"",
		left_ear=""Telos Earring"",
		right_ear=""Moonshade Earring"",
		left_ring=""Epaminondas's Ring"",
		right_ring=""Sroda Ring"",
		back={ name=""Rosmerta's Cape"", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	}

    sets.precast.WS['Chant du Cygne'] = {
		ammo=""Aurgelmir Orb +1"",
		head=""Hashishin Kavuk +3"",
		body=""Assim. Jubbah +3"",
		hands=""Jhakri Cuffs +2"",
		legs=""Luhlaza Shalwar +3"",
		feet=""Nyame Sollerets"",
		neck=""Fotia Gorget"",
		waist=""Fotia Belt"",
		left_ear=""Ishvara Earring"",
		right_ear=""Telos Earring"",
		left_ring=""Ilabrat Ring"",
		right_ring=""Regal Ring"",
		back={ name=""Rosmerta's Cape"", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	}

    sets.precast.WS['Savage Blade'] = {
		ammo=""Oshasha's Treatise"",
		head=""Hashishin Kavuk +3"",
		body=""Assim. Jubbah +3"",
		hands=""Jhakri Cuffs +2"",
		legs=""Luhlaza Shalwar +3"",
		feet=""Nyame Sollerets"",
		neck=""Mirage Stole +2"",
		waist=""Sailfi Belt +1"",
		left_ear=""Telos Earring"",
		right_ear=""Moonshade Earring"",
		left_ring=""Epaminondas's Ring"",
		right_ring=""Sroda Ring"",
		back={ name=""Rosmerta's Cape"", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	}

    sets.precast.WS['Requiescat'] = sets.precast.WS

    sets.precast.WS['Expiacion'] = {
		ammo=""Oshasha's Treatise"",
		head=""Hashishin Kavuk +3"",
		body=""Assim. Jubbah +3"",
		hands=""Jhakri Cuffs +2"",
		legs=""Luhlaza Shalwar +3"",
		feet=""Nyame Sollerets"",
		neck=""Mirage Stole +2"",
		waist=""Sailfi Belt +1"",
		left_ear=""Telos Earring"",
		right_ear=""Moonshade Earring"",
		left_ring=""Epaminondas's Ring"",
		right_ring=""Sroda Ring"",
		back={ name=""Rosmerta's Cape"", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	}

    sets.precast.WS['Sanguine Blade'] = {
		ammo=""Pemphredo Tathlum"",
		head=""Pixie Hairpin +1"",
		body=""Nyame Mail"",
		hands=""Jhakri Cuffs +2"",
		legs=""Nyame Flanchard"",
		feet=""Nyame Sollerets"",
		neck=""Sanctity Necklace"",
		waist=""Eschan Stone"",
		left_ear=""Crematio Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring=""Medada's Ring"",
		right_ring=""Archon Ring"",
		back={ name=""Rosmerta's Cape"", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','""Mag.Atk.Bns.""+10','Phys. dmg. taken-10%',}}
	}
    ------------------------------------------------------------------------------------------------
    ---------------------------------------- Midcast Sets ------------------------------------------
    ------------------------------------------------------------------------------------------------
    sets.midcast['Blue Magic'] = {}
		
    sets.midcast['Blue Magic'].Physical = {
		ammo=""Pemphredo Tathlum"",
		head=""Hashishin Kavuk +3"",
		body=""Hashishin Mintan +3"",
		hands=""Hashi. Bazu. +3"",
		legs=""Hashishin Tayt +3"",
		feet=""Hashi. Basmak +3"",
		neck=""Mirage Stole +2"",
		waist=""Eschan Stone"",
		left_ear=""Crep. Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring={name=""Chirich Ring +1"",bag=""wardrobe""},
		right_ring={name=""Chirich Ring +1"",bag=""wardrobe2""},
		back=""Aurist's Cape +1""
	}

    sets.midcast['Blue Magic'].Magical = {
		ammo=""Ghastly Tathlum +1"",
		head=""Hashishin Kavuk +3"",
		body=""Hashishin Mintan +3"",
		hands=""Hashi. Bazu. +3"",
		legs=""Hashishin Tayt +3"",
		feet=""Hashi. Basmak +3"",
		neck=""Sibyl Scarf"",
		waist=""Sacro Cord"",
		left_ear=""Crematio Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring=""Medada's Ring"",
		right_ring=""Defending Ring"",
		back=""Aurist's Cape +1""
	}
	sets.midcast['Blue Magic'].Magical.Resistant = set_combine(sets.midcast['Blue Magic'].Magical,{
		main=""Maxentius"",
		sub=""Bunzi's Rod""})

	sets.midcast['Blue Magic']['Subduction'] = set_combine(sets.midcast['Blue Magic'].Magical,{
	    head=""Volte Cap"",
		hands=""Volte Bracers"",
		legs=""Volte Hose"",
		feet=""Volte Boots""})

	sets.midcast['Blue Magic']['Subduction'].Resistant = set_combine(sets.midcast['Blue Magic']['Subduction'],{
		main=""Maxentius"",
		sub=""Bunzi's Rod""})

    sets.midcast['Blue Magic'].MagicalDark = set_combine(sets.midcast['Blue Magic'].Magical, {
		head=""Pixie Hairpin +1"",
		right_ring=""Archon Ring""})
    sets.midcast['Blue Magic'].MagicalDark.Resistant = set_combine(sets.midcast['Blue Magic'].MagicalDark,{
		main=""Maxentius"",
		sub=""Bunzi's Rod""})
		
	sets.midcast['Blue Magic'].MagicalLight = sets.midcast['Blue Magic'].Magical
	sets.midcast['Blue Magic'].MagicalLight.Resistant = set_combine(sets.midcast['Blue Magic'].MagicalLight,{
		main=""Maxentius"",
		sub=""Bunzi's Rod""})
		
    sets.midcast['Blue Magic'].MagicAccuracy = {
		ammo=""Pemphredo Tathlum"",
		head=""Hashishin Kavuk +3"",
		body=""Hashishin Mintan +3"",
		hands=""Hashi. Bazu. +3"",
		legs=""Hashishin Tayt +3"",
		feet=""Hashi. Basmak +3"",
		neck=""Mirage Stole +2"",
		waist=""Sacro Cord"",
		left_ear=""Crep. Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring=""Medada's Ring"",
		right_ring=""Defending Ring"",
		back={ name=""Rosmerta's Cape"", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','""Mag.Atk.Bns.""+10','Phys. dmg. taken-10%',}}
	}
    sets.midcast['Blue Magic'].MagicAccuracy.Resistant = set_combine(sets.midcast['Blue Magic'].MagicAccuracy,{
		main=""Maxentius"",
		sub=""Bunzi's Rod""})
		
    sets.midcast['Blue Magic'].StunPhysical = {
		ammo=""Pemphredo Tathlum"",
		head=""Hashishin Kavuk +3"",
		body=""Hashishin Mintan +3"",
		hands=""Hashi. Bazu. +3"",
		legs=""Hashishin Tayt +3"",
		feet=""Hashi. Basmak +3"",
		neck=""Mirage Stole +2"",
		waist=""Luminary Sash"",
		left_ear=""Crep. Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring=""Medada's Ring"",
		right_ring=""Defending Ring"",
		back=""Aurist's Cape +1""
	}
    sets.midcast['Blue Magic'].StunMagical = sets.midcast['Blue Magic'].StunPhysical
	
    sets.midcast['Blue Magic'].Healing = {
		ammo=""Staunch Tathlum +1"",
		head=""Pinga Crown +1"",
		body=""Pinga Tunic +1"",
		hands=""Telchine Gloves"",
		legs=""Pinga Pants +1"",
		feet=""Medium's Sabots"",
		neck=""Unmoving Collar +1"",
		waist=""Plat. Mog. Belt"",
		left_ear=""Mendi. Earring"",
		right_ear=""Etiolation Earring"",
		left_ring=""Kunaji Ring"",
		right_ring=""Gelatinous Ring +1"",
		back=""Moonlight Cape""
	}
    sets.midcast['Blue Magic'].HealingSelf = sets.midcast['Blue Magic'].Healing
	
	--601 Blue Magic skill, 12 shadows
    sets.midcast['Blue Magic'].SkillBasedBuff = {
		ammo=""Sapience Orb"",
		head=""Luh. Keffiyeh +3"",
		body=""Hashishin Mintan +3"",
		hands=""Hashi. Bazu. +3"",
		legs=""Hashishin Tayt +3"",
		feet=""Luhlaza Charuqs +3"",
		neck=""Mirage Stole +2"",
		waist=""Witful Belt"",
		left_ear=""Njordr Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring={name=""Stikini Ring +1"",bag=""wardrobe""},
		right_ring={name=""Stikini Ring +1"",bag=""wardrobe2""},
		back=""Cornflower Cape""
	}
    sets.midcast['Blue Magic'].Breath = sets.midcast['Blue Magic'].Magical

	--50% Cure Potency 2941HP
    sets.midcast['Blue Magic']['White Wind'] = {
		ammo=""Staunch Tathlum +1"",
		head=""Pinga Crown +1"", --10
		body=""Pinga Tunic +1"", --15
		hands=""Hashi. Bazu. +3"",
		legs=""Pinga Pants +1"", --13
		feet=""Medium's Sabots"", --9
		neck=""Unmoving Collar +1"",
		waist=""Plat. Mog. Belt"",
		left_ear=""Mendi. Earring"", --5
		right_ear=""Etiolation Earring"",
		left_ring=""Kunaji Ring"",
		right_ring=""Gelatinous Ring +1"",
		back=""Moonlight Cape""
	}
	sets.midcast['Blue Magic']['Regeneration'] = set_combine(sets.midcast['Blue Magic'].SkillBasedBuff, {body=""Telchine Chas.""})
	
    sets.midcast['Blue Magic'].Buff = sets.precast.FC
    sets.midcast['Blue Magic'].Refresh = set_combine(sets.precast.FC, {
		head=""Amalric Coif +1"",
		body={ name=""Telchine Chas."", augments={'""Elemental Siphon""+35','Enh. Mag. eff. dur. +10',}},
		hands={ name=""Telchine Gloves"", augments={'""Elemental Siphon""+35','Enh. Mag. eff. dur. +10',}},
		legs={ name=""Telchine Braconi"", augments={'""Elemental Siphon""+30','Enh. Mag. eff. dur. +10',}},
		feet={ name=""Telchine Pigaches"", augments={'Enh. Mag. eff. dur. +10',}},
		waist=""Gishdubar Sash""
	})

	sets.midcast['Warp'] = sets.precast.FC
	sets.midcast['Warp II'] = sets.precast.FC
	sets.midcast['Enhancing Magic'] = {
		ammo=""Sapience Orb"",
		head={ name=""Telchine Cap"", augments={'""Elemental Siphon""+35','Enh. Mag. eff. dur. +10',}},
		body={ name=""Telchine Chas."", augments={'""Elemental Siphon""+35','Enh. Mag. eff. dur. +10',}},
		hands={ name=""Telchine Gloves"", augments={'""Elemental Siphon""+35','Enh. Mag. eff. dur. +10',}},
		legs={ name=""Telchine Braconi"", augments={'""Elemental Siphon""+30','Enh. Mag. eff. dur. +10',}},
		feet={ name=""Telchine Pigaches"", augments={'Enh. Mag. eff. dur. +10',}},
		neck=""Incanter's Torque"",
		left_ring={ name=""Stikini Ring +1"",bag=""wardrobe""},
		right_ring={ name=""Stikini Ring +1"",bag=""wardrobe2""}
	}
	sets.midcast['Refresh'] = sets.midcast['Blue Magic'].Refresh
	sets.midcast['Aquaveil'] = set_combine(sets.midcast['Enhancing Magic'], {
		head=""Amalric Coif +1"",
		hands=""Regal Cuffs""
	})
	--Treasure Hunter
	sets.midcast['Dia'] = {
	    head=""Volte Cap"",
		hands=""Volte Bracers"",
		legs=""Volte Hose"",
		neck=""Elite Royal Collar"",
		waist=""Chaac Belt"",
		right_ring=""Defending Ring""
	}
	sets.midcast['Dia II'] = sets.midcast['Dia']
	sets.midcast['Diaga'] = sets.midcast['Dia']
    sets.midcast['Bio'] = sets.midcast['Dia']
	sets.midcast['Bio II'] = sets.midcast['Dia']
	
	sets.midcast['Enfeebling Magic'] = {
		ammo=""Pemphredo Tathlum"",
		head=""Hashishin Kavuk +3"",
		body=""Hashishin Mintan +3"",
		hands=""Regal Cuffs"",
		legs=""Hashishin Tayt +3"",
		feet=""Hashi. Basmak +3"",
		neck=""Mirage Stole +2"",
		waist=""Sacro Cord"",
		left_ear=""Crep. Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring=""Medada's Ring"",
		right_ring={ name=""Stikini Ring +1"",bag=""wardrobe2""},
		back={ name=""Rosmerta's Cape"", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','""Mag.Atk.Bns.""+10','Phys. dmg. taken-10%',}}
	}
	
	sets.midcast['Elemental Magic'] = {
		ammo=""Ghastly Tathlum +1"",
		head=""Hashishin Kavuk +3"",
		body=""Hashishin Mintan +3"",
		hands=""Hashi. Bazu. +3"",
		legs=""Hashishin Tayt +3"",
		feet=""Hashi. Basmak +3"",
		neck=""Sibyl Scarf"",
		waist=""Orpheus's Sash"",
		left_ear=""Crematio Earring"",
		right_ear=""Novio Earring"",
		left_ring=""Medada's Ring"",
		right_ring=""Defending Ring"",
		back={ name=""Rosmerta's Cape"", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','""Mag.Atk.Bns.""+10','Phys. dmg. taken-10%',}}
	}
	sets.midcast['Elemental Magic'].Resistant = set_combine(sets.midcast['Elemental Magic'],{
		main=""Maxentius"",
		sub=""Bunzi's Rod""})
    ------------------------------------------------------------------------------------------------
    ----------------------------------------- Idle Sets --------------------------------------------
    ------------------------------------------------------------------------------------------------
    -- Resting sets
    sets.resting = {}
    -- Idle sets (default idle set not needed since the other three are defined, but leaving for testing purposes)
    sets.idle = {
		ammo=""Staunch Tathlum +1"",
		head=""Malignance Chapeau"",
		body=""Hashishin Mintan +3"",
		hands=""Hashi. Bazu. +3"",
		legs=""Hashishin Tayt +3"",
		feet=""Malignance Boots"",
		neck=""Elite Royal Collar"",
		waist=""Carrier's Sash"",
		left_ear=""Eabani Earring"",
		right_ear=""Etiolation Earring"",
		left_ring=""Shneddick Ring +1"",
		right_ring={ name=""Chirich Ring +1"",bag=""wardrobe2""},
		back={ name=""Rosmerta's Cape"", augments={'HP+60','Eva.+20 /Mag. Eva.+20','""Fast Cast""+10','""Regen""+5',}}
	}

    sets.idle.Refresh = {
		ammo=""Staunch Tathlum +1"",
		head={ name=""Herculean Helm"", augments={'""Mag.Atk.Bns.""+11','""Refresh""+2','Mag. Acc.+19 ""Mag.Atk.Bns.""+19',}},
		body=""Hashishin Mintan +3"",
		hands={ name=""Herculean Gloves"", augments={'Pet: Accuracy+25 Pet: Rng. Acc.+25','CHR+7','""Refresh""+2','Mag. Acc.+11 ""Mag.Atk.Bns.""+11',}},
		legs={ name=""Herculean Trousers"", augments={'Pet: Accuracy+6 Pet: Rng. Acc.+6','""Dual Wield""+2','""Refresh""+2',}},
		feet={ name=""Herculean Boots"", augments={'""Drain"" and ""Aspir"" potency +2','CHR+5','""Refresh""+2','Accuracy+1 Attack+1','Mag. Acc.+11 ""Mag.Atk.Bns.""+11',}},
		neck=""Elite Royal Collar"",
		waist=""Carrier's Sash"",
		left_ear=""Eabani Earring"",
		right_ear=""Etiolation Earring"",
		left_ring=""Shneddick Ring +1"",
		right_ring={ name=""Stikini Ring +1"",bag=""wardrobe2""},
		back={ name=""Rosmerta's Cape"", augments={'HP+60','Eva.+20 /Mag. Eva.+20','""Fast Cast""+10','""Regen""+5',}}
	}

    sets.idle.Weak = sets.idle

    ------------------------------------------------------------------------------------------------
    ---------------------------------------- Engaged Sets ------------------------------------------
    ------------------------------------------------------------------------------------------------

    -- Engaged sets

    -- Variations for TP weapon and (optional) offense/defense modes.  Code will fall back on previous
    -- sets if more refined versions aren't defined.
    -- If you create a set with both offense and defense modes, the offense mode should be first.
    -- EG: sets.engaged.Dagger.Accuracy.Evasion

    sets.engaged = {
		main=""Tizona"",
		sub=""Thibron"",
		ammo=""Aurgelmir Orb +1"",
		head={ name=""Adhemar Bonnet +1"", augments={'STR+12','DEX+12','Attack+20',}},
		body={ name=""Adhemar Jacket +1"", augments={'DEX+12','AGI+12','Accuracy+20',}},
		hands={ name=""Adhemar Wrist. +1"", augments={'DEX+12','AGI+12','Accuracy+20',}},
		legs=""Samnuha Tights"",
		feet={ name=""Herculean Boots"", augments={'Accuracy+25','""Triple Atk.""+4','DEX+5',}},
		neck=""Mirage Stole +2"",
		waist=""Windbuffet Belt +1"",
		left_ear=""Suppanomimi"",
		right_ear=""Hashi. Earring +1"",
		left_ring=""Epona's Ring"",
		right_ring={ name=""Chirich Ring +1"",bag=""wardrobe2""},
		back={ name=""Rosmerta's Cape"", augments={'DEX+20','Accuracy+20 Attack+20','""Store TP""+10','Phys. dmg. taken-10%',}}
	}
	-- 41% DT 51% PDT
    sets.engaged.Sortie = {
		main=""Tizona"",
		sub=""Sakpata's Sword"",
		ammo=""Aurgelmir Orb +1"",
		head=""Malignance Chapeau"",
		body=""Malignance Tabard"",
		hands=""Malignance Gloves"",
		legs=""Malignance Tights"",
		feet=""Malignance Boots"",
		neck=""Mirage Stole +2"",
		waist=""Reiki Yotai"",
		left_ear=""Eabani Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring={ name=""Chirich Ring +1"",bag=""wardrobe""},
		right_ring={ name=""Chirich Ring +1"",bag=""wardrobe2""},
		back={ name=""Rosmerta's Cape"", augments={'DEX+20','Accuracy+20 Attack+20','""Store TP""+10','Phys. dmg. taken-10%',}}
	}
    ------------------------------------------------------------------------------------------------
    ---------------------------------------- Hybrid Sets -------------------------------------------
    ------------------------------------------------------------------------------------------------
	-- 31% DT 41% PDT
    sets.engaged.Hybrid = {
		main=""Tizona"",
		sub=""Thibron"",
		ammo=""Aurgelmir Orb +1"",
		head=""Malignance Chapeau"",
		body=""Malignance Tabard"",
		hands=""Malignance Gloves"",
		legs=""Malignance Tights"",
		feet=""Malignance Boots"",
		neck=""Mirage Stole +2"",
		waist=""Reiki Yotai"",
		left_ear=""Eabani Earring"",
		right_ear=""Hashi. Earring +1"",
		left_ring={ name=""Chirich Ring +1"",bag=""wardrobe""},
		right_ring={ name=""Chirich Ring +1"",bag=""wardrobe2""},
		back={ name=""Rosmerta's Cape"", augments={'DEX+20','Accuracy+20 Attack+20','""Store TP""+10','Phys. dmg. taken-10%',}}
	}
	
	sets.engaged.Club = set_combine(sets.engaged.DT,{main=""Maxentius"",sub=""Bunzi's Rod""})
    ------------------------------------------------------------------------------------------------
    ---------------------------------------- Special Sets ------------------------------------------
    ------------------------------------------------------------------------------------------------

    sets.Kiting = {left_ring=""Shneddick Ring +1""}
end


-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
function job_precast(spell, action, spellMap, eventArgs)
    -- Safety checks for weaponskills 
    if spell.type:lower() == 'weaponskill' then
        if player.tp < 1000 then
            eventArgs.cancel = true
            return
        end
        if spell.target.distance >5 then
            add_to_chat(122,""Outside WS Range! /Canceling"")
            eventArgs.cancel = true
            return
        end
    end
end

function job_post_precast(spell, action, spellMap, eventArgs)
    if spell.type == 'WeaponSkill' then
        if elemental_ws:contains(spell.name) then
            -- Matching double weather (w/o day conflict).
            if spell.element == world.weather_element and (get_weather_intensity() == 2 and spell.element ~= elements.weak_to[world.day_element]) then
                equip({waist=""Hachirin-no-Obi""})
            -- Target distance under 8 yalms.
            elseif spell.target.distance < (5 + spell.target.model_size) then
                equip({waist=""Orpheus's Sash""})
            -- Matching day and weather.
            elseif spell.element == world.day_element and spell.element == world.weather_element then
                equip({waist=""Hachirin-no-Obi""})
            -- Target distance under 8 yalms.
            elseif spell.target.distance < (5 + spell.target.model_size) then
                equip({waist=""Orpheus's Sash""})
            -- Match day or weather.
            elseif spell.element == world.day_element or spell.element == world.weather_element then
                equip({waist=""Hachirin-no-Obi""})
            end
        end
    end
end

-- Run after the default midcast() is done.
-- eventArgs is the same one used in job_midcast, in case information needs to be persisted.
function job_post_midcast(spell, action, spellMap, eventArgs)
    -- Add enhancement gear for Chain Affinity, etc.
    if spell.skill == 'Blue Magic' then
        for buff,active in pairs(state.Buff) do
            if active and sets.buff[buff] then
                equip(sets.buff[buff])
            end
        end
        if spellMap == 'Magical' or spellMap == 'MagicalDark' or spellMap == 'MagicalLight' then
            if spell.element == world.weather_element and (get_weather_intensity() == 2 and spell.element ~= elements.weak_to[world.day_element]) then
                equip({waist=""Hachirin-no-Obi""})
            -- Target distance under 1.7 yalms.
            elseif spell.target.distance < (1.7 + spell.target.model_size) then
                equip({waist=""Orpheus's Sash""})
            -- Matching day and weather.
            elseif spell.element == world.day_element and spell.element == world.weather_element then
                equip({waist=""Hachirin-no-Obi""})
            -- Target distance under 8 yalms.
            elseif spell.target.distance < (8 + spell.target.model_size) then
                equip({waist=""Orpheus's Sash""})
            -- Match day or weather.
            elseif spell.element == world.day_element or spell.element == world.weather_element then
                equip({waist=""Hachirin-no-Obi""})
            end
        end
        if spellMap == 'Healing' and spell.target.type == 'SELF' then
            equip(sets.midcast['Blue Magic'].HealingSelf)
        end
    end

    if spell.skill == 'Enhancing Magic' then
        equip(sets.midcast.EnhancingDuration)
        if spellMap == 'Refresh' then
            equip(sets.midcast.Refresh)
        end
    end
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------
-- Custom spell mapping.
-- Return custom spellMap value that can override the default spell mapping.
-- Don't return anything to allow default spell mapping to be used.
function job_get_spell_map(spell, default_spell_map)
    if spell.skill == 'Blue Magic' then
        for category,spell_list in pairs(blue_magic_maps) do
            if spell_list:contains(spell.english) then
                return category
            end
        end
    end
end
-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff,gain)

end
-- Function to display the current relevant user state when doing an update.
-- Return true if display was handled, and you don't want the default info shown.
function display_current_job_state(eventArgs)
    local cf_msg = ''
    if state.CombatForm.has_value then
        cf_msg = ' (' ..state.CombatForm.value.. ')'
    end

    local m_msg = state.OffenseMode.value

    local c_msg = state.CastingMode.value

    local i_msg = state.IdleMode.value

    local msg = ''
    if state.TreasureMode.value == 'Tag' then
        msg = msg .. ' TH: Tag |'
    end
    if state.Kiting.value then
        msg = msg .. ' Kiting: On |'
    end

    add_to_chat(002, '| ' ..string.char(31,210).. 'Melee' ..cf_msg.. ': ' ..string.char(31,001)..m_msg.. string.char(31,002)..  ' |'
        ..string.char(31,060).. ' Casting: ' ..string.char(31,001)..c_msg.. string.char(31,002)..  ' |'
        ..string.char(31,008).. ' Idle: ' ..string.char(31,001)..i_msg.. string.char(31,002)..  ' |'
        ..string.char(31,002)..msg)

    eventArgs.handled = true
end

-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------

function update_active_abilities()
    state.Buff['Burst Affinity'] = buffactive['burst affinity'] or false
    state.Buff['Chain Affinity'] = buffactive['chain affinity'] or false
    state.Buff['Diffusion'] = buffactive['diffusion'] or false
    state.Buff['Efflux'] = buffactive['efflux'] or false
end

-- State buff checks that will equip buff gear and mark the event as handled.
function apply_ability_bonuses(spell, action, spellMap)
    if state.Buff['Burst Affinity'] and (spellMap == 'Magical' or spellMap == 'MagicalLight' or spellMap == 'MagicalDark' or spellMap == 'Breath') then
        equip(sets.buff['Burst Affinity'])
    end
    if state.Buff.Efflux and spellMap == 'Physical' then
        equip(sets.buff['Efflux'])
    end
    if state.Buff.Diffusion and (spellMap == 'Buffs' or spellMap == 'BlueSkill') then
        equip(sets.buff['Diffusion'])
    end

    if state.Buff['Burst Affinity'] then equip (sets.buff['Burst Affinity']) end
    if state.Buff['Efflux'] then equip (sets.buff['Efflux']) end
    if state.Buff['Diffusion'] then equip (sets.buff['Diffusion']) end
end
-- Check for various actions that we've specified in user code as being used with TH gear.
-- This will only ever be called if TreasureMode is not 'None'.
-- Category and Param are as specified in the action event packet.
function th_action_check(category, param)
    if --category == 2 or -- any ranged attack
        category == 4 or -- any magic action
        (category == 3 and param == 30) or -- Aeolian Edge
        (category == 6 and info.default_ja_ids:contains(param)) or -- Provoke, Animated Flourish
        (category == 14 and info.default_u_ja_ids:contains(param)) -- Quick/Box/Stutter Step, Desperate/Violent Flourish
        then return true
    end
end"
ntwrDewe,terrasteel,Overlord2036,Lua,Saturday 17th of June 2023 08:13:41 PM CDT,"while true do 
    sleep(1)
    turtle.select(1)
    if not(turtle.getItemDetail()) then
        os.pullEvent(""turtle_inventory"")
    end
    turtle.select(1)
    turtle.drop()
    turtle.select(2)
    turtle.drop()
    turtle.select(3)
    turtle.drop()
    sleep(0.5)
    os.pullEvent(""turtle_inventory"")
    turtle.select(4)
    turtle.dropUp()
    turtle.select(1)
    turtle.dropUp()
end"
JpjeewXt,邀您一起看：6. 在线语音朗读TTS Server 开发版v2.0,xiaomianao666,JavaScript,Saturday 17th of June 2023 08:10:38 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥6. 在线语音朗读TTS Server 开发版v2.0@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5ZC+54ix56C06Kej8J2UpVwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vZW1wdHlcIixcImNvbF90eXBlXCI6XCJ4NV93ZWJ2aWV3X3NpbmdsZVwiLFwiZmluZF9ydWxlXCI6XCJqczpzZXRSZXN1bHQoW3tcXG4gICAgdXJsOlxcXCJodHRwczovL3d3dy41MnBvamllLmNuL3RocmVhZC0xNzk4NTQ4LTEtMS5odG1sXFxcIixcXG5kZXNjOlxcXCIxMDAlJiZmbG9hdFxcXCIsXFxuZXh0cmE6e2NhbkJhY2s6IHRydWV9XFxufV0pO1wiLFwiZ3JvdXBcIjpcIuKRoOaOqOiNkFwiLFwicGFnZXNcIjpcIltdXCJ9IiwidGl0bGUiOiI2LiDlnKjnur/or63pn7PmnJfor7tUVFMgU2VydmVyIOW8gOWPkeeJiHYyLjAifQ==
WJBa9Vij,Palindromo,LightProgrammer000,Dart,Saturday 17th of June 2023 08:01:57 PM CDT,"// Bibliotecas
import 'dart:io';

// Principal
void main(List<String> args) {
  // Entrada de dados
  var n = stdin.readLineSync()!;

  // Variaveis
  bool val = false;
  int pos_ini = 0, pos_fim = n.length - 1;

  // Estrutura de repeticao
  while (pos_ini < n.length) {
    if (n[pos_ini] == n[pos_fim - pos_ini]) {
      pos_ini++;
    } else {
      print(""Nao Palindromo"");
      val = false;
      break;
    }
    val = true;
  }

  // Condicional: Verdadeiro
  if (val == true) {
    print(""# $n: Palindromo"");
  }
}
"
hS4Fpk7T,Raiz Quadrada (metodo Newton),LightProgrammer000,Dart,Saturday 17th of June 2023 08:01:02 PM CDT,"// Bibliotecas
import 'dart:io';

// Principal
void main(List<String> args) {
  // Entrada de dados
  stdout.write(""# Digite N: "");
  int n = int.parse(stdin.readLineSync()!);

  // Chamada de funcao
  print(""# Raiz Quadrada de $n: "" + raizQuadradaNewton(n).toStringAsFixed(0));
}

double raizQuadradaNewton(int n) {
  double p, p_2, b = 2;

  while (true) {
    // Calculos
    p = (b + (n / b)) / 2;
    p_2 = p * p;
    b = p;

    // Condicional
    if ((-1) * (n - p_2) < 0.001) {
      return p;
    }
  }
}
"
F1HW4QgL,Raiz Quadrada (metodo Newton),LightProgrammer000,Python,Saturday 17th of June 2023 08:00:23 PM CDT,"# Entrada de dados
n = int(input(""# Digite N: ""))
b = 2

while True:

    # Calculos
    p = (b + (n / b)) / 2
    p_2 = p * p
    b = p

    if ((-1) * (n - p_2)) < 0.001:
        print(f""# Raiz quadrada de {n} = {p:.0f}"")
        break"
XBWB8Mvy,Tables,ChicagoFire3,Lua,Saturday 17th of June 2023 07:58:08 PM CDT,"function contains (arr, var) do
  for i = 0, #arr do
    if arr[i] == var then
      return true
    end
  end
  return false
end

end
"
d018UJ72,Inventory,ChicagoFire3,Lua,Saturday 17th of June 2023 07:56:45 PM CDT,"require(""Tables"")

function TransferToShulker () do
  slot = turtle.getSelectedSlot()
  turtle.select(16)
  if turtle.getItemCount() == 0 then
    return
  end

  turtle.select(2)
  turtle.placeDown()
  for i = 2, 16 do
    turtle.select(i)
    turtle.dropDown(turtle.getItemCount())
  end
  turtle.select(2)
  turtle.digDown()
  turtle.select(slot)
end
end


function DumpExclusive(arr) do
  for i = 1, 16 do
    if not contains(arr, i) then
      turtle.select(i) 
      turtle.dropDown()
    end                   
  end
end
end
;
"
DhYJKe7X,Fuel,ChicagoFire3,Lua,Saturday 17th of June 2023 07:55:39 PM CDT,"local limit = 100
local maxLimit = 1000

function DoRefuel ()
  slot = turtle.getSelectedSlot()
  turtle.select(1)
    if turtle.getFuelLevel() > 100 then
    return True;
  end
  while turtle.getFuelLevel() < 1000 do
    turtle.refuel(1); 
  end;
  turtle.select(slot)   
end;
"
vCAHtqjz,Digging,ChicagoFire3,Lua,Saturday 17th of June 2023 07:54:14 PM CDT,"require(""Libraries/Inventory"")
require(""Libraries/Tables"")
require(""Libraries/Fuel"")

function DigUp(h)
    print(""DigUp"")
    local count = 0
    local s, b = turtle.inspectUp()
    while count < h and s do
        turtle.digUp()
        turtle.up()
        s, b = turtle.inspectUp()
        count = count + 1
    end
    while count > 0 do
        turtle.digDown()
        turtle.down()
        count = count - 1
    end
end    

function DigTree() do
    print(""Digging Tree"")
    local count = 0
    local s = true
    turtle.dig()
    turtle.forward()
    turtle.digDown()
    turtle.select(2)
    turtle.placeDown()
    while s do 
        s, b = turtle.inspectUp()
        if (s and (b.name == ""minecraft:oak_log"")) then
            turtle.digUp()
            turtle.up()
            count = count+1
        else
            s = false
        end
    end
    while count > 0 do
        turtle.digDown()
        turtle.down()
        count = count-1 
    end
end

end
"
TTyh9E8b,Harvest Trees,ChicagoFire3,Lua,Saturday 17th of June 2023 07:51:49 PM CDT,"require(""Libraries/Trees"")

local len = arg[1]
local wid = arg[2]
local right = true

while true do
    while (os.time() < 6.00)  
    or (os.time() > 18.00) do 
        print(""Sleeping"")
        print(os.time())
        sleep(10)
    end

    print(""Starting Route"")
    for x = 0, wid-1 do
        for y = 0, len-1 do 
            DigUp(3)
            local s, b = turtle.inspect()
            if s then
                if b.name == ""minecraft:oak_log"" then
                    DigTree()    
                else
                    turtle.dig()
                    turtle.forward()
                end
            else
                turtle.forward()
            end
            turtle.suckDown()    
        end
        if right then
            turtle.dig()
            turtle.forward()
            turtle.turnRight()
            turtle.dig()
            turtle.forward()
            turtle.turnRight()
            right = false
        else 
            turtle.dig()
            turtle.forward()
            turtle.turnLeft()
            turtle.dig()
            turtle.forward()
            turtle.turnLeft()
            right = true
        end
    end   

    if wid % 2 == 0 then
        turtle.dig()
        turtle.forward()
        turtle.turnRight()
        for x = 1, wid-1 do
            turtle.dig()
            turtle.forward()
        end
        turtle.turnRight()
    else
        turtle.turnRight()
        turtle.dig()
        turtle.forward()
        turtle.turnRight()
        for y = 0, len-1 do
            turtle.dig()
            turtle.forward()
        end
        turtle.turnRight()
        for x = 1, wid-1 do
            turtle.dig()
            turtle.forward()
        end
        turtle.turnRight()
        turtle.dig()
    end       
    right = true
    DumpExclusive({1,2})
    DoRefuel()          
end
"
Mfzu9JXB,product_createphp,Zgragselus,PHP,Saturday 17th of June 2023 07:46:08 PM CDT,"<?php

/*

This file is subject to the terms and conditions defined in
file 'LICENSE', which is part of this source code package.

© 2022 OtteIT s.r.o.
All Rights Reserved.

Author: Vilem Otte <dev@otte.cz>

*/

/**
 * Endpoint to create product record
 * 
 * @param eshop_id Reference (Required), references ID in eshop table
 * @param bottle_id Reference (Required), references ID in bottle table
 * @param name String (Required), name of the product
 * @param link String (Required), link (hyperlink) to the product on the eshop
 * @param auction Number (Required), 1 for auction, 0 otherwise (boolean)
 * @param stock Number (Required), 0 for unavailable, non-0 for available
 * @param confirmed Number, 1 for confirmed product record, 0 otherwise (boolean)
 * @param auction_start String, ISO time when auction starts
 * @param auction_end String, ISO time when auction ends
 * 
 * @return _ JSON with result (HTTP response code), error (details, if error happens) or product (holding result of create call)
 */

header(""Access-Control-Allow-Origin: *"");
header(""Content-Type: application/json; charset=UTF-8"");
header(""Access-Control-Allow-Methods: POST"");
header(""Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"");

require_once(__DIR__.""/../../db.php"");
require_once(__DIR__.""/../../util.php"");
require_once(__DIR__.""/product.php"");
require_once(__DIR__.""/../../session/session.php"");
require_once(__DIR__.""/../../auth/auth.php"");
require_once(__DIR__.""/../../permission/permission.php"");

// Session set up
$auth = new Auth();
$session = new Session();

// Payload requirements
$data = json_decode(file_get_contents(""php://input""));

$payloadError = Util::PayloadCheck($data, ""eshop_id"", ""bottle_id"", ""name"", ""link"", ""auction"", ""stock"");
if ($payloadError != false)
{
    http_response_code(200);
    echo json_encode(array(""result"" => 500, ""error"" => $payloadError));

    exit();
}

// Connect to database, attach to session
$db = new Database();
$session->SetDB($db);

// Require user authentication
$auth_id = $session->GetUserID($auth);
if ($auth_id != null)
{
    // Check permission
    $permission = new Permission($db);
    $permissionCheck = $permission->Check($auth_id, ""rum"", Permission::WRITE);

    if ($permissionCheck == true)
    {
        // Permission check success - create record        
        $product = new Rum_Product($db);

        $product->eshop_id = $data->eshop_id;
        $product->bottle_id = $data->bottle_id;
        $product->link = $data->link;
        $product->name = $data->name;
        $product->auction = $data->auction;
        $product->stock = $data->stock;
        
        if (isset($data->confirmed))
        {
            $product->confirmed = $data->confirmed;
        }

        if (isset($data->auction_start))
        {
            $product->auction_start = $data->auction_start;
        }

        if (isset($data->auction_end))
        {
            $product->auction_end = $data->auction_end;
        }

        $result = $product->Create();

        if ($result != null)
        {
            // Successfully created record
            http_response_code(200);
            echo json_encode(array(""result"" => 200, ""product"" => $result));
        }
        else
        {
            // DB Error during record creation
            http_response_code(200);
            echo json_encode(array(""result"" => 500, ""error"" => $db->GetLastError()));
        }
    }
    else if ($permissionCheck === false)
    {
        // Permission check failure
        http_response_code(200);
        echo json_encode(array(""result"" => 401, ""error"" => ""Unauthorized: Permission level too low.""));
    }
    else
    {
        // DB Error during permission check
        http_response_code(200);
        echo json_encode(array(""result"" => 500, ""error"" => $db->GetLastError()));
    }
}
else
{
    // User unauthorized
    http_response_code(200);
    echo json_encode(array(""result"" => 401, ""error"" => ""Unauthorized""));
}

// Close database connection
$db->Disconnect();

?>"
714BcC2B,2023-06-17_stats.json,rdp_snitch,JSON,Saturday 17th of June 2023 07:18:18 PM CDT,"{
  ""ip"": {
    ""91.212.166.5"": 2010,
    ""162.241.158.17"": 78,
    ""62.122.184.134"": 6,
    ""51.75.160.42"": 6,
    ""138.197.8.152"": 3,
    ""31.43.185.32"": 24,
    ""87.251.75.145"": 12,
    ""185.122.204.241"": 6,
    ""185.170.144.3"": 9,
    ""62.122.184.168"": 12,
    ""62.122.184.166"": 12,
    ""87.251.75.120"": 3,
    ""191.101.174.74"": 3,
    ""87.251.64.110"": 18,
    ""62.122.184.165"": 6,
    ""150.230.62.44"": 3,
    ""58.218.204.183"": 15,
    ""164.92.158.134"": 3,
    ""121.138.145.136"": 6,
    ""39.172.103.93"": 3,
    ""101.132.121.192"": 3,
    ""167.94.138.33"": 3,
    ""49.207.179.83"": 30,
    ""205.210.31.186"": 9,
    ""177.200.91.86"": 12,
    ""121.127.253.4"": 3,
    ""103.238.110.134"": 3,
    ""5.62.34.18"": 3,
    ""118.180.255.85"": 3,
    ""152.89.198.133"": 6,
    ""43.156.6.9"": 93,
    ""217.160.157.213"": 15,
    ""167.248.133.124"": 3,
    ""205.210.31.185"": 9,
    ""14.225.212.176"": 6
  },
  ""asn"": {
    ""AS198953"": 2010,
    ""AS19871"": 78,
    ""AS57523"": 48,
    ""AS16276"": 6,
    ""AS14061"": 6,
    ""AS211736"": 24,
    ""AS208091"": 15,
    ""AS48080"": 27,
    ""AS32780"": 3,
    ""AS31898"": 3,
    ""AS4134"": 18,
    ""AS4766"": 6,
    ""AS56041"": 3,
    ""AS37963"": 3,
    ""AS398324"": 3,
    ""AS24309"": 30,
    ""AS396982"": 18,
    ""AS28368"": 12,
    ""AS64050"": 3,
    ""AS45916"": 3,
    ""AS36351"": 3,
    ""AS132203"": 93,
    ""AS8560"": 15,
    ""AS398722"": 3,
    ""AS135905"": 6
  },
  ""isp"": {
    ""Proton66 OOO"": 2010,
    ""Unified Layer"": 78,
    ""Chang Way Technologies Co. Limited"": 48,
    ""OVH SAS"": 6,
    ""DigitalOcean, LLC"": 6,
    ""FOP Dmytro Nedilskyi"": 24,
    ""XHOST-INTERNET-SOLUTIONS"": 15,
    ""Dmitriy Panchenko"": 27,
    ""Hosting Services"": 3,
    ""Oracle Corporation"": 3,
    ""Chinanet"": 18,
    ""Korea Telecom"": 6,
    ""China Mobile Communications Corporation"": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Censys, Inc."": 6,
    ""Beam Telecom Pvt Ltd"": 30,
    ""Google LLC"": 18,
    ""Sobralnet Servicos E Telecomunicacoes Ltda - ME"": 12,
    ""BGP Consultancy Pte Ltd"": 3,
    ""gtpl henish cable vision"": 3,
    ""SoftLayer Technologies Inc."": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 93,
    ""IONOS SE"": 15,
    ""Vietnam Posts and Telecommunications Group"": 6
  },
  ""org"": {
    ""Proton66 LLC"": 2010,
    ""WEBSITEWELCOME.COM"": 78,
    ""Chang Way Technologies Co. Limited"": 36,
    ""OVH Ltd"": 6,
    ""Digital Ocean"": 3,
    ""FOP Dmytro Nedilskyi"": 24,
    ""Xhost Internet Solutions"": 33,
    ""Starcrecium Limited"": 12,
    ""Xhostis"": 9,
    ""Ipxo"": 3,
    ""Oracle Cloud Infrastructure (ap-osaka-1)"": 3,
    ""Chinanet JS"": 15,
    ""DigitalOcean, LLC"": 3,
    ""Kornet"": 6,
    ""China Mobile"": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""Censys, Inc"": 3,
    ""Beam Telecom Pvt Ltd"": 30,
    ""Palo Alto Networks, Inc"": 18,
    ""Sobralnet Servicos E Telecomunicacoes Ltda - ME"": 12,
    ""Mega II"": 3,
    ""Gtpl Broadband Pvt. Ltd."": 3,
    ""AVAST Software"": 3,
    ""Chinanet GS"": 3,
    ""Tencent Cloud Computing"": 93,
    ""IONOS SE"": 15,
    ""Censys, Inc."": 3,
    ""VNPT"": 6
  },
  ""regionName"": {
    ""Moscow"": 2076,
    ""Utah"": 78,
    ""England"": 6,
    ""New Jersey"": 6,
    ""Kyiv City"": 24,
    ""North Holland"": 27,
    ""\u014csaka"": 3,
    ""Jiangsu"": 15,
    ""Seoul"": 6,
    ""Zhejiang"": 3,
    ""Shanghai"": 3,
    ""Michigan"": 6,
    ""Tamil Nadu"": 30,
    ""California"": 18,
    ""Ceara"": 12,
    ""Kowloon City"": 3,
    ""Gujarat"": 3,
    ""Jakarta"": 3,
    ""Gansu"": 3,
    ""North West"": 93,
    ""Hesse"": 15,
    ""Hanoi"": 6
  },
  ""country"": {
    ""Russia"": 2076,
    ""United States"": 108,
    ""United Kingdom"": 6,
    ""Ukraine"": 24,
    ""Netherlands"": 27,
    ""Japan"": 3,
    ""China"": 24,
    ""South Korea"": 6,
    ""India"": 33,
    ""Brazil"": 12,
    ""Hong Kong"": 3,
    ""Indonesia"": 3,
    ""Singapore"": 93,
    ""Germany"": 15,
    ""Vietnam"": 6
  },
  ""account"": {
    ""hello"": 2268,
    ""Test"": 18,
    ""Administr"": 48,
    ""Domain"": 60,
    ""(empty)"": 12,
    ""wlkSfucgt"": 3,
    ""UrLiRw"": 3,
    ""IpZHcS"": 3,
    ""q5jcprwl"": 12,
    ""a"": 3,
    ""loAblCoZf"": 3,
    ""oevmFw"": 3,
    ""YXqLJC"": 3
  },
  ""keyboard"": {
    ""Unknown"": 2439
  },
  ""client_build"": {
    ""Unknown"": 2439
  },
  ""client_name"": {
    ""Unknown"": 2439
  },
  ""ip_type"": {
    ""Unknown"": 2172,
    ""hosting"": 225,
    ""proxy"": 27,
    ""hosting & proxy"": 6,
    ""mobile"": 9
  }
}"
ZAeAhyfp,2023-06-17_stats.json,rdp_snitch,JSON,Saturday 17th of June 2023 07:16:05 PM CDT,"{
  ""ip"": {
    ""91.212.166.5"": 1340,
    ""162.241.158.17"": 52,
    ""62.122.184.134"": 4,
    ""51.75.160.42"": 4,
    ""138.197.8.152"": 2,
    ""31.43.185.32"": 16,
    ""87.251.75.145"": 8,
    ""185.122.204.241"": 4,
    ""185.170.144.3"": 6,
    ""62.122.184.168"": 8,
    ""62.122.184.166"": 8,
    ""87.251.75.120"": 2,
    ""191.101.174.74"": 2,
    ""87.251.64.110"": 12,
    ""62.122.184.165"": 4,
    ""150.230.62.44"": 2,
    ""58.218.204.183"": 10,
    ""164.92.158.134"": 2,
    ""121.138.145.136"": 4,
    ""39.172.103.93"": 2,
    ""101.132.121.192"": 2,
    ""167.94.138.33"": 2,
    ""49.207.179.83"": 20,
    ""205.210.31.186"": 6,
    ""177.200.91.86"": 8,
    ""121.127.253.4"": 2,
    ""103.238.110.134"": 2,
    ""5.62.34.18"": 2,
    ""118.180.255.85"": 2,
    ""152.89.198.133"": 4,
    ""43.156.6.9"": 62,
    ""217.160.157.213"": 10,
    ""167.248.133.124"": 2,
    ""205.210.31.185"": 6,
    ""14.225.212.176"": 4
  },
  ""asn"": {
    ""AS198953"": 1340,
    ""AS19871"": 52,
    ""AS57523"": 32,
    ""AS16276"": 4,
    ""AS14061"": 4,
    ""AS211736"": 16,
    ""AS208091"": 10,
    ""AS48080"": 18,
    ""AS32780"": 2,
    ""AS31898"": 2,
    ""AS4134"": 12,
    ""AS4766"": 4,
    ""AS56041"": 2,
    ""AS37963"": 2,
    ""AS398324"": 2,
    ""AS24309"": 20,
    ""AS396982"": 12,
    ""AS28368"": 8,
    ""AS64050"": 2,
    ""AS45916"": 2,
    ""AS36351"": 2,
    ""AS132203"": 62,
    ""AS8560"": 10,
    ""AS398722"": 2,
    ""AS135905"": 4
  },
  ""isp"": {
    ""Proton66 OOO"": 1340,
    ""Unified Layer"": 52,
    ""Chang Way Technologies Co. Limited"": 32,
    ""OVH SAS"": 4,
    ""DigitalOcean, LLC"": 4,
    ""FOP Dmytro Nedilskyi"": 16,
    ""XHOST-INTERNET-SOLUTIONS"": 10,
    ""Dmitriy Panchenko"": 18,
    ""Hosting Services"": 2,
    ""Oracle Corporation"": 2,
    ""Chinanet"": 12,
    ""Korea Telecom"": 4,
    ""China Mobile Communications Corporation"": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Censys, Inc."": 4,
    ""Beam Telecom Pvt Ltd"": 20,
    ""Google LLC"": 12,
    ""Sobralnet Servicos E Telecomunicacoes Ltda - ME"": 8,
    ""BGP Consultancy Pte Ltd"": 2,
    ""gtpl henish cable vision"": 2,
    ""SoftLayer Technologies Inc."": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 62,
    ""IONOS SE"": 10,
    ""Vietnam Posts and Telecommunications Group"": 4
  },
  ""org"": {
    ""Proton66 LLC"": 1340,
    ""WEBSITEWELCOME.COM"": 52,
    ""Chang Way Technologies Co. Limited"": 24,
    ""OVH Ltd"": 4,
    ""Digital Ocean"": 2,
    ""FOP Dmytro Nedilskyi"": 16,
    ""Xhost Internet Solutions"": 22,
    ""Starcrecium Limited"": 8,
    ""Xhostis"": 6,
    ""Ipxo"": 2,
    ""Oracle Cloud Infrastructure (ap-osaka-1)"": 2,
    ""Chinanet JS"": 10,
    ""DigitalOcean, LLC"": 2,
    ""Kornet"": 4,
    ""China Mobile"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""Censys, Inc"": 2,
    ""Beam Telecom Pvt Ltd"": 20,
    ""Palo Alto Networks, Inc"": 12,
    ""Sobralnet Servicos E Telecomunicacoes Ltda - ME"": 8,
    ""Mega II"": 2,
    ""Gtpl Broadband Pvt. Ltd."": 2,
    ""AVAST Software"": 2,
    ""Chinanet GS"": 2,
    ""Tencent Cloud Computing"": 62,
    ""IONOS SE"": 10,
    ""Censys, Inc."": 2,
    ""VNPT"": 4
  },
  ""regionName"": {
    ""Moscow"": 1384,
    ""Utah"": 52,
    ""England"": 4,
    ""New Jersey"": 4,
    ""Kyiv City"": 16,
    ""North Holland"": 18,
    ""\u014csaka"": 2,
    ""Jiangsu"": 10,
    ""Seoul"": 4,
    ""Zhejiang"": 2,
    ""Shanghai"": 2,
    ""Michigan"": 4,
    ""Tamil Nadu"": 20,
    ""California"": 12,
    ""Ceara"": 8,
    ""Kowloon City"": 2,
    ""Gujarat"": 2,
    ""Jakarta"": 2,
    ""Gansu"": 2,
    ""North West"": 62,
    ""Hesse"": 10,
    ""Hanoi"": 4
  },
  ""country"": {
    ""Russia"": 1384,
    ""United States"": 72,
    ""United Kingdom"": 4,
    ""Ukraine"": 16,
    ""Netherlands"": 18,
    ""Japan"": 2,
    ""China"": 16,
    ""South Korea"": 4,
    ""India"": 22,
    ""Brazil"": 8,
    ""Hong Kong"": 2,
    ""Indonesia"": 2,
    ""Singapore"": 62,
    ""Germany"": 10,
    ""Vietnam"": 4
  },
  ""account"": {
    ""hello"": 1512,
    ""Test"": 12,
    ""Administr"": 32,
    ""Domain"": 40,
    ""(empty)"": 8,
    ""wlkSfucgt"": 2,
    ""UrLiRw"": 2,
    ""IpZHcS"": 2,
    ""q5jcprwl"": 8,
    ""a"": 2,
    ""loAblCoZf"": 2,
    ""oevmFw"": 2,
    ""YXqLJC"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1626
  },
  ""client_build"": {
    ""Unknown"": 1626
  },
  ""client_name"": {
    ""Unknown"": 1626
  },
  ""ip_type"": {
    ""Unknown"": 1448,
    ""hosting"": 150,
    ""proxy"": 18,
    ""hosting & proxy"": 4,
    ""mobile"": 6
  }
}"
fWfxyEKL,2023-06-17_stats.json,rdp_snitch,JSON,Saturday 17th of June 2023 07:15:07 PM CDT,"{
  ""ip"": {
    ""91.212.166.5"": 670,
    ""162.241.158.17"": 26,
    ""62.122.184.134"": 2,
    ""51.75.160.42"": 2,
    ""138.197.8.152"": 1,
    ""31.43.185.32"": 8,
    ""87.251.75.145"": 4,
    ""185.122.204.241"": 2,
    ""185.170.144.3"": 3,
    ""62.122.184.168"": 4,
    ""62.122.184.166"": 4,
    ""87.251.75.120"": 1,
    ""191.101.174.74"": 1,
    ""87.251.64.110"": 6,
    ""62.122.184.165"": 2,
    ""150.230.62.44"": 1,
    ""58.218.204.183"": 5,
    ""164.92.158.134"": 1,
    ""121.138.145.136"": 2,
    ""39.172.103.93"": 1,
    ""101.132.121.192"": 1,
    ""167.94.138.33"": 1,
    ""49.207.179.83"": 10,
    ""205.210.31.186"": 3,
    ""177.200.91.86"": 4,
    ""121.127.253.4"": 1,
    ""103.238.110.134"": 1,
    ""5.62.34.18"": 1,
    ""118.180.255.85"": 1,
    ""152.89.198.133"": 2,
    ""43.156.6.9"": 31,
    ""217.160.157.213"": 5,
    ""167.248.133.124"": 1,
    ""205.210.31.185"": 3,
    ""14.225.212.176"": 2
  },
  ""asn"": {
    ""AS198953"": 670,
    ""AS19871"": 26,
    ""AS57523"": 16,
    ""AS16276"": 2,
    ""AS14061"": 2,
    ""AS211736"": 8,
    ""AS208091"": 5,
    ""AS48080"": 9,
    ""AS32780"": 1,
    ""AS31898"": 1,
    ""AS4134"": 6,
    ""AS4766"": 2,
    ""AS56041"": 1,
    ""AS37963"": 1,
    ""AS398324"": 1,
    ""AS24309"": 10,
    ""AS396982"": 6,
    ""AS28368"": 4,
    ""AS64050"": 1,
    ""AS45916"": 1,
    ""AS36351"": 1,
    ""AS132203"": 31,
    ""AS8560"": 5,
    ""AS398722"": 1,
    ""AS135905"": 2
  },
  ""isp"": {
    ""Proton66 OOO"": 670,
    ""Unified Layer"": 26,
    ""Chang Way Technologies Co. Limited"": 16,
    ""OVH SAS"": 2,
    ""DigitalOcean, LLC"": 2,
    ""FOP Dmytro Nedilskyi"": 8,
    ""XHOST-INTERNET-SOLUTIONS"": 5,
    ""Dmitriy Panchenko"": 9,
    ""Hosting Services"": 1,
    ""Oracle Corporation"": 1,
    ""Chinanet"": 6,
    ""Korea Telecom"": 2,
    ""China Mobile Communications Corporation"": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Censys, Inc."": 2,
    ""Beam Telecom Pvt Ltd"": 10,
    ""Google LLC"": 6,
    ""Sobralnet Servicos E Telecomunicacoes Ltda - ME"": 4,
    ""BGP Consultancy Pte Ltd"": 1,
    ""gtpl henish cable vision"": 1,
    ""SoftLayer Technologies Inc."": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 31,
    ""IONOS SE"": 5,
    ""Vietnam Posts and Telecommunications Group"": 2
  },
  ""org"": {
    ""Proton66 LLC"": 670,
    ""WEBSITEWELCOME.COM"": 26,
    ""Chang Way Technologies Co. Limited"": 12,
    ""OVH Ltd"": 2,
    ""Digital Ocean"": 1,
    ""FOP Dmytro Nedilskyi"": 8,
    ""Xhost Internet Solutions"": 11,
    ""Starcrecium Limited"": 4,
    ""Xhostis"": 3,
    ""Ipxo"": 1,
    ""Oracle Cloud Infrastructure (ap-osaka-1)"": 1,
    ""Chinanet JS"": 5,
    ""DigitalOcean, LLC"": 1,
    ""Kornet"": 2,
    ""China Mobile"": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""Censys, Inc"": 1,
    ""Beam Telecom Pvt Ltd"": 10,
    ""Palo Alto Networks, Inc"": 6,
    ""Sobralnet Servicos E Telecomunicacoes Ltda - ME"": 4,
    ""Mega II"": 1,
    ""Gtpl Broadband Pvt. Ltd."": 1,
    ""AVAST Software"": 1,
    ""Chinanet GS"": 1,
    ""Tencent Cloud Computing"": 31,
    ""IONOS SE"": 5,
    ""Censys, Inc."": 1,
    ""VNPT"": 2
  },
  ""regionName"": {
    ""Moscow"": 692,
    ""Utah"": 26,
    ""England"": 2,
    ""New Jersey"": 2,
    ""Kyiv City"": 8,
    ""North Holland"": 9,
    ""\u014csaka"": 1,
    ""Jiangsu"": 5,
    ""Seoul"": 2,
    ""Zhejiang"": 1,
    ""Shanghai"": 1,
    ""Michigan"": 2,
    ""Tamil Nadu"": 10,
    ""California"": 6,
    ""Ceara"": 4,
    ""Kowloon City"": 1,
    ""Gujarat"": 1,
    ""Jakarta"": 1,
    ""Gansu"": 1,
    ""North West"": 31,
    ""Hesse"": 5,
    ""Hanoi"": 2
  },
  ""country"": {
    ""Russia"": 692,
    ""United States"": 36,
    ""United Kingdom"": 2,
    ""Ukraine"": 8,
    ""Netherlands"": 9,
    ""Japan"": 1,
    ""China"": 8,
    ""South Korea"": 2,
    ""India"": 11,
    ""Brazil"": 4,
    ""Hong Kong"": 1,
    ""Indonesia"": 1,
    ""Singapore"": 31,
    ""Germany"": 5,
    ""Vietnam"": 2
  },
  ""account"": {
    ""hello"": 756,
    ""Test"": 6,
    ""Administr"": 16,
    ""Domain"": 20,
    ""(empty)"": 4,
    ""wlkSfucgt"": 1,
    ""UrLiRw"": 1,
    ""IpZHcS"": 1,
    ""q5jcprwl"": 4,
    ""a"": 1,
    ""loAblCoZf"": 1,
    ""oevmFw"": 1,
    ""YXqLJC"": 1
  },
  ""keyboard"": {
    ""Unknown"": 813
  },
  ""client_build"": {
    ""Unknown"": 813
  },
  ""client_name"": {
    ""Unknown"": 813
  },
  ""ip_type"": {
    ""Unknown"": 724,
    ""hosting"": 75,
    ""proxy"": 9,
    ""hosting & proxy"": 2,
    ""mobile"": 3
  }
}"
BPGM8r6z,dem23.n27,Korotkodul,Python,Saturday 17th of June 2023 06:15:01 PM CDT,"a = []
b = []
f = open('27_A.txt')
#f = open('tst.txt')
n = int(f.readline())
print(n)
for i in range(n):
    l = [int(i) for i in f.readline().split()]
    #print(type(l))
    a.append(l[0])
    b.append(l[1])
f.close()
print(a)
print(b)

mn = 10**40
for k in range(n):
    s = 0
    for i in range(n):
        s += abs(a[i] - a[k]) * b[i]
    mn = min(s,mn)
print(mn)
"
ZTCeKz4J,Untitled,pacho_the_python,Python,Saturday 17th of June 2023 05:47:50 PM CDT,"function theLift(data) {
    let tourists = Number(data[0])
    let lift = data[1].split(' ').map(Number)
    let counter = 0
    let maxSLots = 4
    while (tourists > 0) {
        if (counter === lift.length) {
            break
        }
        let freeSlots = maxSLots - lift[counter]
        if (freeSlots > 0) {
            if (tourists > freeSlots) {
                lift[counter] += freeSlots
                tourists -= freeSlots
            } else {
                lift[counter] += tourists
                tourists = 0
            }
        }
        counter += 1
    }
    if (lift[lift.length-1] < maxSLots && tourists === 0) {
        console.log(""The lift has empty spots!"")
        
    } else if (lift[lift.length-1] === maxSLots && tourists > 0) {
        console.log(`There isn't enough space! ${tourists} people in a queue!`)
        
    }
    console.log(lift.join(' '))
        
}

theLift([""20"", ""0 2 0""])"
pKJ28y0s,dem23.n26,Korotkodul,Python,Saturday 17th of June 2023 05:38:10 PM CDT,"f = open('26.txt')
n = int(f.readline())
lines = f.readlines()
#print(n)
#print(lines[:20])
a = [int(i) for i in lines]
print(type(a))
#print(a[:20])
a = sorted(a, reverse=1)


print(type(a))

i = 0
k = 1
lst = 0

mx = a[0]
while i + 1 < n:
    i += 1
    if abs(a[i] - a[lst]) >= 3:
        #print(""i = "",i)
        k += 1
        lst = i
        mx = a[i]
        #print(""mx = "", mx)
    
print(k,mx)
"
ZkZihPed,Untitled,pacho_the_python,Python,Saturday 17th of June 2023 05:31:46 PM CDT,"number_of_tourists = int(input())
wagons = input().split()

wagons = [int(i) for i in wagons]
max_free_places = 4
wagon_counter = 0
while number_of_tourists > 0:
    if wagon_counter == len(wagons):
        break
    free_slots = max_free_places - wagons[wagon_counter]
    if free_slots > 0:
        if number_of_tourists > free_slots:
            wagons[wagon_counter] += free_slots
            number_of_tourists -= free_slots
        else:
            wagons[wagon_counter] += number_of_tourists
            number_of_tourists = 0
    wagon_counter += 1

if wagons[-1] < max_free_places and number_of_tourists == 0:
    print(""The lift has empty spots!"")
elif wagons[-1] == max_free_places and number_of_tourists > 0:
    print(f""There isn't enough space! {number_of_tourists} people in a queue!"")
print(f""{' '.join(map(str, wagons))}"")
"
LZm2TiWd,Beep every X sec by ChatGPT,supercrazy50000,HTML,Saturday 17th of June 2023 05:21:56 PM CDT,"<!DOCTYPE html>
<html>
<head>
    <title>Riproduci suono ogni tot secondi</title>
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"">
    <style>
        @font-face {
            font-family: 'Cakecafe';
            src: url('fonts/cakecafe.ttf') format('truetype');
        }

        body {
            background-color: #163352;
            transition: background-color 0.5s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
            font-family: 'Cakecafe', sans-serif;
            color: #ff69b4;
            position: relative;
        }

        h1 {
            color: #ff69b4;
            text-align: center;
            font-size: 48px;
            letter-spacing: 2px;
            transition: color 0.3s ease;
        }

        label {
            color: #ff69b4;
            text-align: center;
            font-size: 24px;
            margin-bottom: 10px;
            transition: color 0.3s ease;
        }

        input[type=""number""] {
            padding: 5px;
            font-size: 18px;
            text-align: center;
        }

        button {
            background-color: #ff69b4;
            color: #ffffff;
            margin: 10px 0;
            padding: 15px 30px;
            border-radius: 20px;
            font-size: 24px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .change-color {
            background-color: #ff69b4;
        }

        .change-color h1,
        .change-color label,
        .change-color .generated-by {
            color: #163352;
        }

        .change-color button {
            background-color: #163352;
            color: #ff69b4;
        }

        .change-color .container {
            border-color: #163352;
        }

        .change-color-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: transparent;
            color: #ff69b4;
            border: none;
            font-size: 24px;
            cursor: pointer;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .change-color-button i {
            margin: 0 5px;
        }

        form {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .button-container {
            display: flex;
        }

        .container {
            border: 4px solid #ff69b4;
            padding: 30px;
            border-radius: 15px;
            margin: 20px;
            transition: border-color 0.3s ease;
        }

        .generated-by {
            color: #ff69b4;
            font-size: 18px;
            margin-top: 20px;
            transition: color 0.3s ease;
            font-family: Arial, sans-serif;
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
        }
    </style>
</head>
<body>
    <div class=""container"">
        <h1>Riproduci suono ogni tot secondi</h1>
        
        <form id=""intervalForm"">
            <label for=""interval"" id=""intervalLabel"">Intervallo di tempo (in secondi):</label>
            <input type=""number"" id=""interval"" min=""1"" required>
            
            <div class=""button-container"">
                <button id=""playButton"" class=""play-button"" type=""submit"">Avvia</button>
            </div>
        </form>
    </div>
    
    <button id=""changeColorButton"" class=""change-color-button"">
        <i class=""fas fa-sun""></i>
        <i class=""fas fa-moon"" style=""display: none;""></i>
    </button>

    <p class=""generated-by"">Generated by ChatGPT</p>

    <script>
        var intervalID;
        var audio = new Audio('https://www.soundjay.com/buttons/beep-07a.mp3');
        var isPlaying = false;
        var isDarkMode = false;

        function playSound() {
            audio.play();
        }

        function startPlayback() {
            var interval = document.getElementById('interval').value;
            intervalID = setInterval(playSound, interval * 1000);
            playSound();
        }

        function stopPlayback() {
            clearInterval(intervalID);
        }

        function toggleDarkMode() {
            var body = document.body;
            var h1 = document.querySelector('h1');
            var label = document.querySelector('label');
            var buttons = document.querySelectorAll('button');
            var container = document.querySelector('.container');
            var generatedBy = document.querySelector('.generated-by');

            body.classList.toggle('change-color');
            h1.classList.toggle('change-color');
            label.classList.toggle('change-color');
            buttons.forEach(function (button) {
                button.classList.toggle('change-color');
            });
            container.classList.toggle('change-color');
            generatedBy.classList.toggle('change-color');

            isDarkMode = !isDarkMode;
            var sunIcon = document.querySelector('.fa-sun');
            var moonIcon = document.querySelector('.fa-moon');

            if (isDarkMode) {
                sunIcon.style.display = 'none';
                moonIcon.style.display = 'inline-block';
            } else {
                sunIcon.style.display = 'inline-block';
                moonIcon.style.display = 'none';
            }
        }

        document.getElementById('intervalForm').addEventListener('submit', function (e) {
            e.preventDefault();
            if (isPlaying) {
                stopPlayback();
                isPlaying = false;
                document.getElementById('playButton').innerText = 'Avvia';
            } else {
                startPlayback();
                isPlaying = true;
                document.getElementById('playButton').innerText = 'Stop';
            }
        });

        document.getElementById('changeColorButton').addEventListener('click', function () {
            toggleDarkMode();
        });
    </script>
</body>
</html>
"
iRts08n8,Python sqlite connector for @tarakasio,dkmarchuk,Python,Saturday 17th of June 2023 05:17:37 PM CDT,"import yaml
from pathlib import Path
import sqlite3
import logging
from datetime import datetime, timedelta
from typing import Optional, Union

from settings import ADMIN_ID, TEST_ID, FIELDS_SERVER_PAIRS
from loader import zone

with open('data/config.yml') as yaml_file:
    data = yaml.safe_load(yaml_file)
DATABASE = data.get('DATABASE', '')
LOG_FILE = data.get('LOG_FILE', '')
OVPN_PATH = data.get('OVPN_PATH', '')
if not DATABASE or not LOG_FILE or not OVPN_PATH:
    print('By db.py: \nWrong settings: config.yml')

logging.basicConfig(filename=LOG_FILE,
                    level=logging.INFO,
                    filemode='a',
                    datefmt='%Y-%m-%d, %H:%M',
                    format='%(asctime)s: %(name)s: %(levelname)s: %(message)s')
log = logging.getLogger('database')


class Users:
    """"""
    build in functions:

    with.. as..:
    users = Users()
    with users as db:
        ...

    in:
    if user_id in db...

    set item:
    db[user_id] = user_info  # firstname, username, file, date

    get item:
    user = db[user_id]

    """"""
    
    # protection from double connectors to database. sqlite3 module don't support 2 and more parallel connections
    def __new__(cls):
        if not hasattr(cls, 'sync_db_connector'):
            cls.sync_db_connector = super(Users, cls).__new__(cls)
        return cls.sync_db_connector

    def __init__(self):
        pathlib_file = Path(DATABASE)
        if pathlib_file.is_file():
            self.db = str(pathlib_file.resolve())
        else:
            self.db = None
        if self.db:
            self.conn = sqlite3.connect(self.db)
            self.cur = self.conn.cursor()
        else:
            self.conn = None
            self.cur = None
            print('Wrong initialize instance of Users class. Check args: DATABASE in settings.')
            log.error('Wrong initialize instance of Users class. Check args: DATABASE in settings.')

    def __contains__(self, user_id: int) -> bool:
        """"""
        Проверить пользователя в базе конструкцией вида: if user_id in db...
        """"""

        if self.is_user(user_id):
            return True
        else:
            return False

    def __getitem__(self, user_id: int) -> Optional[tuple]:
        """"""
        Вывести инфо о пользователе конструкцией: db[user_id]
        Return: id, самое новое время обновления файлов, сервер 1, сервер 2, лаптоп, имя, username, дата регистрации
        """"""

        if self.is_user(user_id):
            self.cur.execute(""SELECT id, login, firstname, username, register, server1, server2, laptop ""
                             ""FROM users WHERE id= ? "", (user_id, ))
            self.conn.commit()
            result = self.cur.fetchone()
            return result
        return None

    def __setitem__(self, user_id, user_info: Union[tuple, list]) -> None:
        # новый пользователь
        if not self.is_user(user_id) and len(user_info) == 4:
            self.cur.execute(""INSERT INTO users (id, firstname, username, register) VALUES (?, ?, ?, ?);"", user_info)
            self.conn.commit()
        # обновить файлы ovpn существующего пользователя
        elif len(user_info) == 7:
            self.cur.execute(""""""UPDATE users 
                                SET server1 = ?, server2 = ?, laptop = ?, login = ?, firstname = ?, username = ? 
                                WHERE id= ? """""", user_info)
            self.conn.commit()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Context manager callback forwarder function
        if not self.db:
            print('del Users instance. No connection to database. Check DATABASE file.')
        elif self.conn is not None and self.cur is not None:
            self.cur.close()
            self.cur = None
            self.conn.close()
            self.conn = None

    def __del__(self) -> None:
        # закрыть базу данных

        if not self.db:
            print('del Users instance. No connection to database. Check DATABASE file.')
        elif self.conn is not None and self.cur is not None:
            self.cur.close()
            self.cur = None
            self.conn.close()
            self.conn = None

    def is_user(self, user_id: int) -> bool:
        """"""
        Проверить наличие пользователя в базе данных
        """"""

        self.cur.execute(""SELECT 1 FROM users WHERE id = ? "", (user_id, ))
        self.conn.commit()
        result = self.cur.fetchone()

        if result is None:
            return False
        elif result == (1,):
            return True

    def delete_user(self, user_id: int) -> bool:
        """"""
        Удалить пользователя из базы данных, вывести True, если пользователя нет в бд,
        False-- если пользователь остался в бд
        """"""

        self.cur.execute(""DELETE FROM users WHERE id = ? "", (user_id, ))
        self.cur.execute(""SELECT 1 FROM users WHERE id = ? "", (user_id,))
        self.conn.commit()
        result = self.cur.fetchone()
        # пользователя нет в базе данных
        if result is None:
            return True
        # не получилось удалить пользователя из бд, пользователь присутствует
        elif result == (1,):
            return False

    def get_20_users(self) -> list:
        """"""
        Вывести 20 новых пользователей: username, имя, id, дата регистрации
        """"""

        self.cur.execute(""SELECT username, firstname, id, register FROM users ORDER BY register DESC LIMIT 20"")
        self.conn.commit()
        return self.cur.fetchall()

    def get_ids(self) -> list:
        """"""
        Получить пары кортежей: (id, name), (id, name)..
        """"""

        self.cur.execute(""SELECT id, firstname FROM users"")
        self.conn.commit()
        return [(i[0], i[1]) for i in self.cur.fetchall()]

    def users_count(self) -> int:
        """"""
        Количество всех пользователей на сервисе
        """"""

        self.cur.execute(""SELECT COUNT(id) FROM users"")
        self.conn.commit()
        return self.cur.fetchone()[0]

    def get_vpn_file(self, user_id: int, field: str, month: str = '', fs_check: bool = True) -> str:
        """"""
        Вывести забронированный файл, исходя из выбранного поля в базе данных и месяца (папке в ~/kot/ovpn),
        который точно есть в пуле ovpn файлов, либо вывести пустую строку.
        Если without_fs_check == True, просто вывести файл из поля без проверки его наличия.
        """"""

        sql = f""SELECT `{field}` FROM users WHERE id={user_id}""
        self.cur.execute(sql)
        self.conn.commit()
        file = self.cur.fetchone()
        file = file[0] if file else ''
        # вывести значение поля конкретного сервера из бд
        # проверить наличие файла в файловой системе
        if fs_check:
            if file and month in file and Path(file).is_file():
                return file
            # файл удалён или изменён путь к ovpn/ папке
            else:
                return ''
        # без проверки актуальности наличия файла в файловой системе
        else:
            # просто вывести найденное значение из поля
            if file:
                return file
            # файл удален или изменён путь к ovpn/ папке
            else:
                return ''

    def get_booked_files(self, field: str, month: str, ovpn_path: str = OVPN_PATH) -> int:
        """"""
        Вывести количество забронированных vpn- файлов по полю,
        где файл содержит: /Users/dim.., /home/dim.., содержит месяц и не содержит id тестового пользователя
        """"""

        sql = f""SELECT COUNT(*) FROM users "" \
              f""WHERE INSTR(`{field}`, '{ovpn_path}') AND instr(`{field}`, '{month}') > 0 "" \
              f""AND instr(`{field}`, {TEST_ID}) = 0""
        self.cur.execute(sql)
        self.conn.commit()
        result = self.cur.fetchone()
        if result is None:
            return 0
        elif type(result) == tuple:
            return result[0]

    def is_new_month_user(self, user_id: int) -> bool:
        """"""
        Вывести True, если пользователь зарегистрирован в текущем месяце, иначе False
        """"""

        sql = ""SELECT STRFTIME('%m', DATE('now', 'localtime')) == STRFTIME('%m', register) FROM users WHERE id = ?""
        self.cur.execute(sql, (user_id, ))
        self.conn.commit()

        return bool(self.cur.fetchone()[0])

    def update_vpn_field(self, user_id: int, firstname: str, username: str, field: str, file: str):
        """"""
        Обновить файл поля field и вывести True, если запись удалось сделать, иначе False
        """"""

        if self.is_user(user_id=user_id):
            _today = datetime.now(tz=zone).strftime('%Y-%m-%d')
            self.cur.execute(f""UPDATE users SET `{field}`='{file}', firstname='{firstname}', username='{username}', ""
                             f""login='{_today}' WHERE id={user_id}"")
            self.conn.commit()
        file_from_db = self.get_vpn_file(user_id=user_id, field=field)
        if file_from_db == file:
            return True
        else:
            return False


class Payments:
    """"""
    build in functions:

    with.. as..:
    payments = Payments()
    with payments as db:
        ...

    in:
    if payment_id in db...

    set item:
    db[payment_id] = payment_id, user_id, idempotency, amount, date

    get item:
    payment = db[payment_id]

    """"""

    # protection from double connectors to database. sqlite3 module don't support 2 and more parallel connections
    def __new__(cls):
        if not hasattr(cls, 'sync_db_connector'):
            cls.sync_db_connector = super(Payments, cls).__new__(cls)
        return cls.sync_db_connector

    def __init__(self):
        pathlib_file = Path(DATABASE)
        if pathlib_file.is_file():
            self.db = str(pathlib_file.resolve())
        else:
            self.db = None
        if self.db:
            self.conn = sqlite3.connect(self.db)
            self.cur = self.conn.cursor()
        else:
            self.conn = None
            self.cur = None
            print('Wrong initialize instance of Users class. Check args: DATABASE in settings.')
            log.error('Wrong initialize instance of Users class. Check args: DATABASE in settings.')

    def __contains__(self, payment_id: str):
        if self.is_payment(payment_id):
            return True
        else:
            return False

    def __getitem__(self, payment_id: str):
        if self.is_payment(payment_id):
            self.cur.execute(""SELECT id, user, amount, date, expire FROM payments WHERE id = ?"", (payment_id,))
            self.conn.commit()
            result = self.cur.fetchone()
            return result
        return None

    def __setitem__(self, payment_id: str, payment_info: tuple):
        if not self.is_payment(payment_id) and len(payment_info) == 5:
            self.cur.execute(""INSERT INTO payments (id, user, amount, date, expire) VALUES (?,?,?,?,?)"", payment_info)
            self.conn.commit()
            result = self.cur.fetchone()
            return result

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Context manager callback forwarder function
        if not self.db:
            print('del Users instance. No connection to database. Check DATABASE file.')
        elif self.conn is not None and self.cur is not None:
            self.cur.close()
            self.cur = None
            self.conn.close()
            self.conn = None

    def __del__(self):
        # del function callback forwarder function
        if not self.db:
            print('del Users instance. No connection to database. Check DATABASE file.')
        elif self.conn is not None and self.cur is not None:
            self.cur.close()
            self.cur = None
            self.conn.close()
            self.conn = None

    def is_payment(self, payment_id: str):
        self.cur.execute(""SELECT 1 FROM payments WHERE id = ?"", (payment_id,))
        self.conn.commit()
        result = self.cur.fetchone()

        if result is None:
            return False
        elif result == (1,):
            return True

    def is_user_payed(self, user_id: int) -> bool:
        self.cur.execute(""SELECT 1 FROM payments WHERE user = ? AND STRFTIME('%m', `date`) = STRFTIME('%m', 'now')"",
                         (user_id,))
        self.conn.commit()
        result = self.cur.fetchone()

        if result is None:
            return False
        elif result == (1,):
            return True

    def get_expire(self, user_id: int) -> Optional[tuple]:
        """"""
        Вывести:
        expire_date: str format '%Y-%m-%d', 01 число следующего месяца срока истечения пользования файлом,
        prev_expire_month: крайний месяц бронирования файла, для поиска папки- названия месяца в файловой системе,
        actual_long: format: bool, является ли последний платеж бронированием 3- 6 месячных профилей.
        """"""

        sql = """"""
                SELECT `date`, expire, STRFTIME('%m', DATE) != STRFTIME('%m', DATE(expire, '-1 DAY')) 
                FROM payments WHERE user = ? AND DATE() < DATE(expire) 
                ORDER BY DATE(`date`, 'start of month') DESC, amount DESC LIMIT 1;
                """"""
        self.cur.execute(sql, (user_id,))
        self.conn.commit()
        result = self.cur.fetchone()
        if result is None:
            return None
        else:
            payment_date, expire_date, actual_long = result
            prev_expire_month = (datetime.strptime(expire_date, '%Y-%m-%d') - timedelta(days=1)).strftime('%B').lower()
            return payment_date, expire_date, prev_expire_month, actual_long

    def delete_payments(self, user_id: int):
        """"""
        Удалить пользователя из базы данных,
        вывести True, если пользователя нет в бд,
        False-- если пользователь остался в бд
        """"""

        self.cur.execute(""DELETE FROM payments WHERE user = ?"", (user_id,))
        self.conn.commit()
        self.cur.execute(""SELECT 1 FROM payments WHERE user = ?"", (user_id,))
        self.conn.commit()
        result = self.cur.fetchone()
        # платежей нет в базе данных
        if result is None:
            return True
        # не получилось удалить платеж из бд, платеж присутствует
        elif result == (1,):
            return False


def register_user(user_id: int, firstname: str, username: str) -> bool:
    """"""
    Записать в базу данных id, имя, username, дату регистрации.
    Возвратить True, если пользователь в базе, False-- если пользователя не удалось добавить в бд.
    """"""

    user_info = (user_id, firstname, username, datetime.now(tz=zone).strftime('%Y-%m-%d'))
    with Users() as users_db:
        users_db[user_id] = user_info
        if users_db.is_user(user_id=user_id):
            return True
        else:
            return False


def get_ovpn_file(user_id: int, first_name: str, user_name: str, server: str, for_laptop: bool = False) -> str:
    """"""
    Проверить оплату пользователя, выдать забронированный vpn- файл нужного сервера из бд или найти новый файл,
    записать изменения (бронирование нового файла, привязанного в бд к серверу) в базу данных.
    Если for_laptop == True, поиск файла в базе данных и обновление файла происходит только по полю 'laptop'.
    """"""

    with Payments() as payments_db:
        actual_expired = payments_db.get_expire(user_id=user_id)
    if actual_expired is None:
        error = 'No payment by this user id.'
        print(error)
        log.error(error)
        return ''
    with Users() as users_db:
        _, _, actual_ovpn_month, _ = actual_expired
        marker_booked_files = 'booked_'
        ovpn_dir = Path(OVPN_PATH, server, actual_ovpn_month)
        if for_laptop:
            # забронированный vpn- файл в поле laptop из базы данных
            file_from_db = users_db.get_vpn_file(user_id=user_id, field='laptop', month=actual_ovpn_month)
            file = file_from_db if server in file_from_db else ''
            # проверить бронь по началу имени arg: marker_booked_files и имени сервера
            if not file:
                server_file = users_db.get_vpn_file(user_id=user_id, field=FIELDS_SERVER_PAIRS[server],
                                                    month=actual_ovpn_month)
                booked_ovpn = [str(i) for i in ovpn_dir.iterdir()
                               if i.is_file() and i.suffix == '.ovpn' and i.name.startswith(marker_booked_files)
                               and str(user_id) in i.name and str(i) != server_file]
                if booked_ovpn:
                    # найден файл в файловой системе, который был забронирован на telegram id, но выбыл из бд,
                    # т.к. там хранится только одна запись. Найден путем перебора папки месяца и по id и marker_booked..
                    file = booked_ovpn[0]
        else:
            # забронированный vpn- файл из базы данных поля определенного сервера
            file = users_db.get_vpn_file(user_id=user_id, field=FIELDS_SERVER_PAIRS[server], month=actual_ovpn_month)
        # Найден забронированный файл в бд, выдать его
        if file:
            log.info(f'@{user_name}, {first_name}, {user_id}: get vpn file: {file}.')
            return file
        # B базе данных нет забронированного файла, нужно выдать любой свободный впн- файл указанного сервера
        # и записать в базу этот vpn- файл
        else:
            free_ovpn = [str(i) for i in ovpn_dir.iterdir()
                         if i.is_file() and i.suffix == '.ovpn' and not i.name.startswith(marker_booked_files)]
            # Найдены свободные файлы .ovpn, выдать один файл пользователю
            if free_ovpn:
                free_ovpn_file = Path(free_ovpn.pop())
                new_name = marker_booked_files + str(user_id) + '_' + free_ovpn_file.name
                new_file = Path(ovpn_dir, new_name)
                free_ovpn_file.rename(new_file)
                if new_file.is_file():
                    file = str(new_file)
                    # для файла ноутбука обновить новым файлом сервера свое поле laptop
                    if for_laptop:
                        users_db.update_vpn_field(user_id=user_id, firstname=first_name, username=user_name,
                                                  field='laptop', file=file)
                    # либо обновить поле новым значением vpn- файла
                    else:
                        users_db.update_vpn_field(user_id=user_id, firstname=first_name, username=user_name,
                                                  field=FIELDS_SERVER_PAIRS[server], file=file)
                    log.info(f'@{user_name}, {first_name}, {user_id}: get vpn file: {file}.')
                    return file
                else:
                    error = 'Wrong script code. Check def db.get_ovpn_file.'
                    print(error)
                    log.error(error)
                    return ''
            # свободные vpn файлы закончились в папке
            else:
                # свободных .ovpn файлов нет. Отдать None для информирования об отсутствии vpn- файлов
                log.warning(f'@{user_name}, {first_name}, {user_id}: wrong get {server} server vpn file. '
                            f'Cant find free ovpn files in {free_ovpn} dir.')
                return ''


def users():
    """"""
    Вывести текстом 20 новых пользователей: username, имя, id, дату регистрации
    и общее количество пользователей в базе данных.
    """"""

    with Users() as users_db:
        clients = users_db.get_20_users()
        users_count = users_db.users_count()
    text = f'All users: {users_count}.\nLast 20 are: \n'
    for i in clients:
        _date = datetime.strptime(i[3], '%Y-%m-%d').strftime('%d %B')
        if i[0] != 'None' and i[0] is not None:
            text += f'@{i[0]}, '
        if i[1] != 'None' and i[1] is not None:
            text += f'{i[1]}, '
        text += f'{i[2]}: {_date}\n'
    return text


def ovpn(servers: tuple = FIELDS_SERVER_PAIRS.keys()) -> str:
    """"""
    Вывести все файлы серверов, забронированных на все месяцы
    """"""

    statistic = ''
    with Users() as users_db:
        for server in servers:
            if server != 'laptop':
                statistic += f'server: {server}\n'
                first_day_current_month = datetime.now(tz=zone)
                for month_int in range(first_day_current_month.month, 13):
                    each_first_day = first_day_current_month.replace(month=month_int)
                    month = each_first_day.strftime('%B').lower()
                    _all = len([i for i in Path(OVPN_PATH, server, month).iterdir() if i.is_file()
                               and i.suffix == '.ovpn'])
                    booked = users_db.get_booked_files(field=FIELDS_SERVER_PAIRS[server], month=month)
                    statistic += f'  {month}: booked {booked} from {_all}\n'
                statistic += '\n'
    return statistic


def get_log(lines=25):
    """"""
    Вывести лог 25 заключительных строк логгера
    """"""

    with open(LOG_FILE, 'rb') as f:
        total_lines_wanted = lines
        block_size = 1024
        f.seek(0, 2)
        block_end_byte = f.tell()
        lines_to_go = total_lines_wanted
        block_number = -1
        blocks = []
        while lines_to_go > 0 and block_end_byte > 0:
            if block_end_byte - block_size > 0:
                f.seek(block_number * block_size, 2)
                blocks.append(f.read(block_size))
            else:
                f.seek(0, 0)
                blocks.append(f.read(block_end_byte))
            lines_found = blocks[-1].count(b'\n')
            lines_to_go -= lines_found
            block_end_byte -= block_size
            block_number -= 1
        all_read_text = b''.join(reversed(blocks))
        text_log = b'\n'.join(all_read_text.splitlines()[-total_lines_wanted:]).decode('utf-8')

    return text_log


def get_ids():

    with Users() as users_db:
        return users_db.get_ids()


def write_payment(payment_id: str, user: int, amount: int, payment_date: str, expire_date: str) -> None:

    with Payments() as payments_db:
        payments_db[payment_id] = (payment_id, user, amount, payment_date, expire_date)


def is_user_payed(user_id: int) -> bool:

    with Payments() as payment:
        return payment.is_user_payed(user_id=user_id)


def get_payments_expire(user_id: int) -> Optional[tuple]:
    """"""
    Вывести платеж месяца с проведенной максимальной суммой
    payment_date: str format '%Y-%m-%d', дата платежа,
    expire_date: str format '%Y-%m-%d', 01 число следующего месяца срока истечения пользования файлом,
    prev_expire_month: крайний месяц бронирования файла, для поиска папки- названия месяца в файловой системе,
    actual_long: format: bool, является ли последний платеж бронированием 3- 6 месячных профилей.
    """"""

    with Payments() as payments_db:
        return payments_db.get_expire(user_id=user_id)


def is_new_month_user(user_id: int) -> bool:
    with Users() as users_db:
        return users_db.is_new_month_user(user_id=user_id)


def delete_test_user(user_id: int = TEST_ID) -> bool:
    with Users() as users_db:
        is_user_deleted = users_db.delete_user(user_id=user_id)
    with Payments() as payments_db:
        is_user_payments_deleted = payments_db.delete_payments(user_id=user_id)
    return is_user_deleted and is_user_payments_deleted


if __name__ == '__main__':

    admin = ADMIN_ID
    test_dim = 6128180386
    dim_info = (test_dim, 'Test Dim', 'marchdim_test')
    today = datetime.now(tz=zone)
    today_str = today.strftime('%Y-%m-%d')
    import uuid
    """"""
    with Users() as db:
        ams = '/Users/dim/kot/ovpn/amsterdam/may/booked_5435208870_20677.ovpn'
        mos = '/Users/dim/kot/ovpn/moscow/may/booked_5435208870_10.ovpn'
        today_strftime = today.strftime('%Y-%m-%d')
        db[test_dim] = test_dim, 'Dim', 'marchdim_test', today_strftime
        print('db[test_dim]:', db[test_dim])
        print('test_dim in db:', test_dim in db)
        print('777 in db:', 777 in db)
        print('db.is_new_month_user(user_id):', db.is_new_month_user(user_id=test_dim))
        # print('db.get_vpn_file(user_id, field, month):', db.get_vpn_file(user_id=test_dim,
        #                                                                  field=FIELDS_SERVER_PAIRS['amsterdam'],
        #                                                                  month='october'))
        print('db.get_vpn_file(user_id, field):', db.get_vpn_file(user_id=test_dim,
                                                                  field='laptop',
                                                                  month='october'))
        print('db.update_vpn_field(user_id, firstname, username, field, file): ',
              db.update_vpn_field(user_id=test_dim, firstname='Dim test', username='march_test',
                                  field=FIELDS_SERVER_PAIRS['amsterdam'], file=ams))
        print('db.get_booked_files(field):', db.get_booked_files(field=FIELDS_SERVER_PAIRS['amsterdam']))
        print('db[test_dim]:', db[test_dim])
    """"""

    payment_info_0 = (str(uuid.uuid4()), test_dim, 1, today_str,
                      today.replace(month=today.month + 1, day=1).strftime('%Y-%m-%d'))
    payment_info_1 = (str(uuid.uuid4()), test_dim, 100, today_str,
                      today.replace(month=today.month + 1, day=1).strftime('%Y-%m-%d'))
    payment_info_3 = (str(uuid.uuid4()), test_dim, 500, today_str,
                      today.replace(month=today.month + 3, day=1).strftime('%Y-%m-%d'))
    payment_info_6 = (str(uuid.uuid4()), test_dim, 900, today_str,
                      today.replace(month=today.month + 6, day=1).strftime('%Y-%m-%d'))

    # register_user(test_dim, 'Tech Support', 'kotvpn')

    # write_payment(*payment_info_0)
    # write_payment(*payment_info_1)
    # write_payment(*payment_info_3)
    # write_payment(*payment_info_6)

    # print(get_ovpn_file(*dim_info, server='amsterdam', for_laptop=True))

    # print('delete_test_user():', delete_test_user())
    # print('users():', users())
    # print('ovpn():', ovpn(servers=tuple(FIELDS_SERVER_PAIRS.keys())))

    """"""
    with Payments() as payments:
        expired = payments.get_expire(user_id=test_dim)
    if expired is None:
        print('Not actual expired date.')
    else:
        payment_date, actual_expired_date, ovpn_month, long = expired
        print(f""payment_date: {payment_date}\nexpired date: {actual_expired_date}\n""
              f""actual ovpn month: {ovpn_month}\nactual long: {bool(long)}"")
    """"""
    # random = str(uuid.uuid4())
    # is_payment = payments.is_payment(payment_id=payment_id)
    # is_payed = payments.is_user_payed(user_id=test_dim)
    # print(f""is_payment: {is_payment} \nis_payed: {is_payed}"")
    # print(payments.get_actual_month_to_expire_date(user_id=test_dim))
    # print(ovpn())
    # print(get_log())
    # print(get_ids())
    # print(users())

    # print(delete_test_user())
    # print(is_new_month_user(user_id=test_dim))
    # with Payments() as payments_db:
    #     actual_expired = payments_db.get_expire(user_id=test_dim)
    # print(actual_expired)"
s5m09bc9,Modify Android GSI system Image,metalx1000,Bash,Saturday 17th of June 2023 04:55:16 PM CDT,"#modify Android GSI system Image
# System image option
## - https://github.com/phhusson/treble_experimentations/wiki/Generic-System-Image-%28GSI%29-list
## - https://sourceforge.net/projects/andyyan-gsi/files/lineage-20-light/

#resize the image
fallocate -l 3500M system.img
resize2fs system.img 3500M

#mount the image
mkdir mnt
sudo mount system.img mnt

#THIS IS WHERE YOU MAKE CHANGES TO THE SYSTEM

#unmount image
sudo umount mnt

#now resize the image by removing empty space
e2fsck -yf system.img
resize2fs -M system.img
e2fsck -yf system.img

#now install it
adb reboot bootloader

wget https://dl.google.com/developers/android/qt/images/gsi/vbmeta.img
fastboot --disable-verity --disable-verification flash vbmeta vbmeta.img
fastboot reboot fastboot

fastboot delete-logical-partition product
fastboot delete-logical-partition product_a
fastboot delete-logical-partition product_b
fastboot erase userdata
fastboot erase cache
fastboot flash system system.img
fastboot -w
fastboot reboot
"
H7L0Y2n6,dem23.n25_NoneType - WHY???,Korotkodul,Python,Saturday 17th of June 2023 04:52:07 PM CDT,"f = open('26.txt')
n = int(f.readline())
lines = f.readlines()
#print(n)
#print(lines[:20])
a = [int(i) for i in lines]
print(type(a))
#print(a[:20])
a = a[::-1]
print(type(a))

i = 0
k = 1
lst = 0

mx = a[0]
while i + 1 < n:
    i += 1
    if abs(a[i] - a[lst]) >= 3:
        k += 1
        lst = i
        mx = a[i]
    
print(k,mx)
"
Ajk7iAUK,dem23.n24,Korotkodul,Python,Saturday 17th of June 2023 04:49:44 PM CDT,"import sys

f = open('24.txt')
s = f.readline()
f.close()

def d(x,y):
    global s
    s = s.replace(x,y)
x = 'CDF'
y = 'AO'
print(s[:20])
for i in x:
    d(i, 'X')
    print(s[:20])

for i in y:
    d(i,'Y')
    print(s[:20])
    

L = 1
R = len(s)
while L + 1 < R:
    M = (L + R) // 2
    if 'XY' * M in s:
        L = M
    else:
        R = M
print(L)
"
CrtdCYQ4,Untitled,Amakesh,XML,Saturday 17th of June 2023 04:43:41 PM CDT,"/interface bridge
add name=bridge1
add name=bridge2
/interface ethernet
set [ find default-name=combo1 ] advertise=\
    10M-full,100M-full,1000M-half,1000M-full,10000M-full,2500M-full,5000M-full
/interface wireguard
add listen-port=13231 mtu=1420 name=wireguard1
/interface list
add comment=defconf name=WAN
add comment=defconf name=LAN
/interface lte apn
set [ find default=yes ] ip-type=ipv4 use-network-apn=no
/interface wireless security-profiles
set [ find default=yes ] supplicant-identity=MikroTik
/ip pool
add name=pool1 ranges=192.168.88.10-192.168.88.254
add name=pool2 ranges=192.168.68.10-192.168.68.254
/ip dhcp-server
add address-pool=pool1 interface=bridge1 name=server1
add address-pool=pool2 interface=bridge2 name=server2
/port
set 0 name=serial0
set 1 name=serial1
/routing ospf instance
add disabled=yes name=default-v2
/routing ospf area
add disabled=yes instance=default-v2 name=backbone-v2
/routing table
add disabled=no fib name=vpn
/interface bridge port
add bridge=bridge1 ingress-filtering=no interface=ether1
add bridge=bridge2 ingress-filtering=no interface=ether2
add bridge=bridge1 ingress-filtering=no interface=ether3
add bridge=bridge1 interface=ether4
add bridge=bridge1 interface=ether5
add bridge=bridge1 interface=ether6
add bridge=bridge1 interface=ether7
/ip settings
set max-neighbor-entries=8192
/ipv6 settings
set disable-ipv6=yes max-neighbor-entries=8192
/interface list member
add comment=defconf interface=combo1 list=WAN
add interface=bridge1 list=LAN
add interface=wireguard1 list=WAN
add interface=bridge2 list=LAN
/interface ovpn-server server
set auth=sha1,md5
/interface wireguard peers
add allowed-address=0.0.0.0/0 endpoint-address=pl209.nordvpn.com endpoint-port=\
    51820 interface=wireguard1 persistent-keepalive=25s public-key=\
    ""kjAOzXQRVGpmQdqE2zPsITH8QHmFK83AAPktqWed9wM=""
/ip address
add address=192.168.88.1/24 comment=defconf interface=bridge1 network=\
    192.168.88.0
add address=192.168.68.1/24 interface=bridge2 network=192.168.68.0
/ip dhcp-client
add interface=combo1 use-peer-dns=no use-peer-ntp=no
/ip dhcp-server network
add address=192.168.68.0/24 dns-server=192.168.68.1 gateway=192.168.68.1
add address=192.168.88.0/24 comment=defconf dns-server=192.168.88.1 gateway=\
    192.168.88.1
/ip dns
set allow-remote-requests=yes servers=94.140.14.14,94.140.15.15 use-doh-server=\
    https://dns.adguard.com/dns-query
/ip dns static
add address=192.168.88.1 disabled=yes name=router.lan
add address=94.140.14.14 name=dns.adguard.com
add address=94.140.15.15 name=dns.adguard.com
/ip firewall filter
add action=accept chain=input comment=\
    ""defconf: accept established,related,untracked"" connection-state=\
    established,related,untracked log=yes
add action=drop chain=input comment=""defconf: drop invalid"" connection-state=\
    invalid log=yes
add action=accept chain=input comment=""defconf: accept ICMP"" log=yes protocol=\
    icmp
add action=accept chain=input comment=\
    ""defconf: accept to local loopback (for CAPsMAN)"" dst-address=127.0.0.1 log=\
    yes
add action=fasttrack-connection chain=forward comment=""defconf: fasttrack"" \
    connection-state=established,related hw-offload=yes log=yes
add action=accept chain=forward connection-state=established,related,untracked
add action=drop chain=forward comment=""defconf: drop invalid"" connection-state=\
    invalid
add action=drop chain=forward comment=""drop all from WAN not DSTNATed"" \
    connection-nat-state=!dstnat connection-state=new in-interface-list=WAN log=\
    yes
add action=accept chain=forward log=yes out-interface=wireguard1 src-address=\
    192.168.88.0/24
add action=accept chain=forward log=yes out-interface=bridge2 src-address=\
    192.168.68.0/24
/ip firewall nat
add action=masquerade chain=srcnat log=yes log-prefix=wg out-interface=\
    wireguard1
add action=masquerade chain=srcnat disabled=yes out-interface-list=WAN
add action=masquerade chain=srcnat log=yes log-prefix=no_vpn out-interface=\
    bridge2
/ip ipsec policy
set 0 disabled=yes
/ip route
add disabled=no distance=1 dst-address=0.0.0.0/0 gateway=wireguard1 pref-src=\
    0.0.0.0 routing-table=vpn scope=30 suppress-hw-offload=no target-scope=10
/ip upnp
set enabled=yes
/routing rule
add action=lookup disabled=yes dst-address=192.168.88.0/24 src-address=\
    192.168.88.0/24 table=main
add action=lookup disabled=no src-address=192.168.88.0/24 table=vpn
add action=lookup disabled=no src-address=192.168.68.0/24 table=main"
LTfR0tbm,webinar-python-exam-review-2023-06-17,jspill,Python,Saturday 17th of June 2023 04:42:49 PM CDT,"# Exam Review 2023 June 17

# Do those LABS
# Ch 2-14... all Labs!
# Ch 21-32 just ADDITIONAL LABS, but important practice!
# Prac Tests, Ch 33 and 34
# Use Submit Mode and get them to 100%!!! And PAY ATTENTION to the unit tests!

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Comp 2: Control Flow
# Comp 3: Modules and Files

# Watch your string input and output
# input...
#  myInput = input().strip()
# output/print()
# print() # same as print(end=""\n"")
# print(""Something I'm printing."", end="" "") # if we override end...
# # we gotta put the expected \n back
# print()
# print(""Clean new line!"")

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Common Data Types
# int
# float
# bool # True, False... print(x > 5)
# str # """"
# list # [ ]
# dict # {key: value}
# set # { } all unique values/no duplicates, no order... no indices, no sorting, no slicing
# tuples # ( ) immutable, Python sees any x,y,z as (x,y,z) --> return a, b --> return (a, b)
# range object # range()... range(0, 5) --> [0, 1, 2, 3, 4]

# Operators
# = # assignment
# == # equality... ASKING if these are equal
# +
# -
# *
# /
# % # modulo... gives an int remainder, ""How many whole things didn't fit (since the last even division)?""
# // # the last even division
# <
# >
# <=
# >=
# += # x += 1 --> x = x+1
# -= # x -= 1 --> x = x-1
# ** # raise to power... pow() and math.pow()
# !=
# # keywords that we use like operators
# in # if x in myList
# not # if not x in myList
# and
# or # any one True condition makes the combined condition True... limit OR to 2 conditions

# Comp 2
# Control Flow! The HOW stuff
# IF statements... if, if/else, if/elif, if/elif/else...
# LOOPS
# WHILE - an IF that repeats
# FOR - looping over a container, or a known number of times... hence range()
# # Check out my For Loops webinar in The Gotchas
# for ___ in __someContainer__:
# for item in myList:
# for char in myString:
# for key in myDict: # myDict[key] gets the value for that key
# for key, value in myDict.items()
# for num in range(0, 12):
# for i, item in enumerate(myList):
# for i in range(len(myList)): # myList[i]

# FUNCTION
# defining/writing vs calling
# a function has ONE particular job
# parameter is a special var for the function... not like a ""regular"" variable
# parameters vs arguments
# return vs print()/output... or something else?

# def someFunction(x, y):
#     return x // y
#
# if __name__ == ""__main__"": # is this script the one that's being run from?
#     # we're solving THIS question
#     myInput = int(input())
#     myOther = int(input())
#     myNum = someFunction(myInput, myOther)
#     print(myNum)

# See ""tasks"" in the last section of Ch 10, 11, 13, 14 for function writing practice
# # CodingBat also has good function-based Python questions:
# # https://codingbat.com/python

# BUILT-IN FUNCTIONS
# input()
# print()
# range()
# len()
# min()
# max()
# sum()
# enumerate()
# round() # cousins math.ceil() and math.floor()
# type()
# sorted()
# reversed()
# pow() # compare to ** or math.pow()
# abs() # compare to math.fabs()
# int()
# float()
# list()
# tuple()
# set()
# dict()
# open()
# help() # help(str), help(str.isspace)
# dir() # print(dir(str))

# STRINGS
# be able to slice
# myStr = ""abcdef""
# revStr = myStr[::-1]
# print(revStr)

# KNOW YOUR WHITESPACE
# "" ""
# a lot of spaces in Unicode
# ""\n""
# ""\t""
# ""\r""

# STRING METHODS
# myStr.format() # ""stuff I want to put together {:.2f}"".format(var)
# myStr.strip()
# myStr.split() # returns a list of smaller strings
# myStr.join() # "" "".join(listOfStrings)
# myStr.replace(subStr, newStr) # ""remove""... myStr = myStr.replace(subStr, """")
# myStr.find(subStr) # return int index, or -1
# myStr.count(subStr) # return int number of occurrences
# case: myStr.lower(), myStr.upper(), myStr.title(), myStr.capitalize()
# is/Boolean: myStr.isupper(), .islower(), .isspace(), .isalpha(), .isnumeric(), isdigit(), isalnum()
# myStr.startswith(subStr), myStr.endswith(subStr)

# LISTS
# be able to use indices, slice

# LIST METHODS
# # +
# myList.append(item)
# myList.insert(i, item)
# myList.extend(anotherList)
# # -
# myList.pop(i) # by index, or last
# myList.remove(item) # pop by index, remove by value
# myList.clear()
# # other
# myList.count(item)
# myList.sort()
# myList.reverse()
# myList.copy()
# myList.index(item)

# DICT
# use the key like an index []
# myDict[key] # retrieve value for that key
# myDict[key] = value # assign value to key
# myDict.keys()
# myDict.values()
# myDict.items()

# MODULES
# math and csv

# MATH MODULE
# import math # FULL IMPORT
# math.factorial(x)
# math.ceil(x.yz)
# math.floor(x.yz)
# math.pow(x, y)
# math.sqrt(x)
# math.fabs(x) # built-in abs()
# math.pi
# math.e
#
# # PARTIAL IMPORT
# from math import factorial # --> factorial(x)
# from math import ceil, sqrt # --> ceil(x.yz), sqrt(x)
# from math import * --> floor(x.yz)
#
# # ALIAS IMPORT
# import math as m # --> m.floor(x.yz)


# FILES

# READ MODE
with open(""test.txt"", ""r"") as f:
    # f.read() # returns entire file as one string
    # f.readline # goes one line ahead and returns that line
    contents = f.readlines() # list of strings... each line in the file is one string
# print(contents)
# for line in contents:
#     line = line.strip()
#     print(line)

# CSV Module

# BTW, you can use mockaroo.com to download CSV files of fake data like I'm using here

# import csv
# with open(""mock_data.csv"", ""r"") as f1:
#     contents = list(csv.reader(f1)) # csv.reader(f1, delimiter=""\t"")
# # print(contents)
# for row in contents[0:20]:
#     print(row)


# WRITE MODE
# with open(""output_data20.csv"", ""w"") as f2:
#     for row in contents:
#         # only write into this new file if email ends in .edu
#         # email is position 3
#         if row[3].endswith("".edu""):
#             # write a str to file
#             f2.write("","".join(row) + ""\n"")

# APPEND MODE
# with open(""append_to_this.txt"", ""r"") as f3:
#     contents = f3.readlines()
# print(contents) # ['Frodo\n', 'Sam\n', 'Merry\n'] # <-- I like to check and see if the last line has a line return
# with open(""append_to_this.txt"", ""a"") as f3:
#     f3.write(""Pippin\n"")


# Question on Lab 6.15
# Since you haven't learned many string methods by Ch 6, you'd normally be doing this one with a for loop containing several if branches to sub out the characters.
# But knowing the str replace() method, and that it returns a string itself, you could approach this one as a series of calls to replace()...

# user_pswd = input()
#
# user_pswd = user_pswd.replace(""i"", ""1"").replace(""a"", ""@"").replace(""m"", ""M"").replace(""B"",""8"").replace(""s"", ""$"")
# user_pswd += ""!""
# print(user_pswd)

# You could, as another student noted, approach this one my making a dictionary of the characters and their substitutions
# As with many problems, there are a variety of ways to approach this one!"
0Dmj50cN,dem23.n23,Korotkodul,Python,Saturday 17th of June 2023 04:35:55 PM CDT,"def f(a,b):
    if a == b:
        return 1
    if a > b:
        return 0
    return f(a + 1, b) + f(a * 2, b)

A = f(1,10) * f(10,35)
B = f(1,10) * f(10,17) * f(17,35)
C = A - B
print(C)
"
9Cbjmq3C,Untitled,stupid_pro,Python,Saturday 17th of June 2023 04:30:11 PM CDT,"def moves(h):
    return h + 3, h * 2


def game(h):
    if h >= 33:
        return 'W'
    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'B1'
    if any(game(m) == 'B1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P1' or game(m) == 'P2' for m in moves(h)):
        return 'B2'


for i in range(1, 33):
    if game(i) == 'P1':
        print(i, game(i), end=' ')
        print()
# print('\n\\')
#
for i in range(1, 33):
    if game(i) == 'B1':
        print(i, game(i))

print()

for i in range(1, 33):
    if game(i) == 'P2':
        print(i, game(i))

print()

for i in range(1, 33):
    if game(i) == 'B2':
        print(i, game(i))

def moves(h):
    return h + 4, h * 3

def game(h):
    if h >= 70:
        return 'W'
    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'B1'
    if any(game(m) == 'B1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P1' or game(m) == 'P2' for m in moves(h)):
        return 'B2'

for i in range(1, 70):
    if game(i) == 'B2':
        print(i, game(i))

def moves(h):
    return h + 4, h * 2


def game(h):
    if h >= 35:
        return 'W'
    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'B1'
    if any(game(m) == 'B1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P2' or game(m) == 'P1' for m in moves(h)):
        return 'B2'


for i in range(1, 35):
    if game(i) == 'B1':
        print(i, game(i))
from functools import lru_cache


@lru_cache(None)
def moves(h):
    return h + 3, h * 3


def game(h):
    if h >= 60:
        return 'W'
    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'B1'
    if any(game(m) == 'B1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P2' or game(m) == 'P1' for m in moves(h)):
        return 'B2'


for i in range(1, 60):
    if game(i) == 'B2':
        print(i, game(i))
from functools import lru_cache


def moves(h):
    a, b = h
    return (a + 2, b), (a, b + 2), (a * 2, b), (a, b * 2)


@lru_cache(None)
def game(h):
    a, b = h
    if a + b >= 75:
        return 'W'
    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'B1'
    if any(game(m) == 'B1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P2' or game(m) == 'P1' for m in moves(h)):
        return 'B2'


for i in range(1, 66):
    j = 9, i
    if game(j) == 'B2':
        print(i, game(j))


from functools import lru_cache


def moves(h):
    a, b = h
    return (a + 1, b), (a, b + 1), (a * 2, b), (a, b * 2)


@lru_cache(None)
def game(h):
    a, b = h
    if a + b >= 83:
        return 'W'
    if any(game(m) == 'W' for m in moves(h)):
        return 'P1'
    if all(game(m) == 'P1' for m in moves(h)):
        return 'B1'
    if any(game(m) == 'B1' for m in moves(h)):
        return 'P2'
    if all(game(m) == 'P2' or game(m) == 'P1' for m in moves(h)):
        return 'B2'


for i in range(1, 74):
    j = 9, i
    if game(j) == 'B2':
        print(i, game(j))

"
7wzMzCCJ,Moving Target,stiky_fingaz,Python,Saturday 17th of June 2023 03:56:16 PM CDT,"targets = [int(x) for x in input().split(' ')]

while True:
    command = input().split()
    if command[0] == 'End':
        print('|'.join([str(x) for x in targets]))
        break

    numTargets = len(targets)
    commandWord = command[0]
    values = [i for i in command[1:]]
    target = int(values[0])
    amount = int(values[1])

    if commandWord == 'Shoot':
        if target in range(numTargets):
            targets[target] -= amount
            if targets[target] <= 0:
                del (targets[target])

    elif commandWord == 'Add':
        if target in range(numTargets):
            targets.insert(target, amount)
        else:
            print('Invalid placement!')
            continue

    elif commandWord == 'Strike':
        strikeLen = amount * 2 + 1
        if strikeLen > len(targets[: target + 1]) or strikeLen > len(targets[target:]):
            print('Strike missed!')
            continue
        targetsStart = targets[: target - amount]
        targetsEnd = targets[target + amount + 1:]
        targets = targetsStart + targetsEnd
"
wZywHdPJ,邀您一起看：书签管理：「编辑」-✎修改,xiaomianao666,JavaScript,Saturday 17th of June 2023 03:16:21 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥书签管理：「编辑」-✎修改@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImZpbGU6Ly8vc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20uZXhhbXBsZS5oaWtlcnZpZXcvZmlsZXMvRG9jdW1lbnRzL25ld1BsYW5Ib21lLmh0bWxcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCIsXCJwYWdlc1wiOlwiW11cIn0iLCJ0aXRsZSI6IuS5puetvueuoeeQhu+8muOAjOe8lui+keOAjS3inI7kv67mlLkifQ==
UAVKSvga,Parse HTML tables with JS,drkskwlkr,JavaScript,Saturday 17th of June 2023 03:09:28 PM CDT,"const tableText = `
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Age</th>
        <th>City</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>John</td>
        <td>30</td>
        <td>New York</td>
      </tr>
      <tr>
        <td>Jane</td>
        <td>25</td>
        <td>Los Angeles</td>
      </tr>
      <tr>
        <td>Bob</td>
        <td>40</td>
        <td>Chicago</td>
      </tr>
    </tbody>
  </table>
`;

// Extract the row data from the table text using regular expressions
const rowData = tableText.match(/<tr>(.*?)<\/tr>/gs).map(tr => {
  const cellData = tr.match(/<td>(.*?)<\/td>/gs).map(td => td.replace(/<\/?td>/g, ''));
  return { Name: cellData[0], Age: cellData[1], City: cellData[2] };
});

// Log the resulting JSON object
console.log(JSON.stringify(rowData));"
y5vkgBzM,SCARY FLASHLIGHTS by BloxianCode,Joriangames,Lua,Saturday 17th of June 2023 03:05:22 PM CDT,"-- SCARY FLASHLIGHTS TUTORIAL BY BLOXIANCODE youtube.com/c/BloxianCode
-- Tutorial: https://youtube.com/shorts/EpbP6X1TvGY

while true do

	for i, part in pairs(script.Parent:GetChildren())
		if part:FindFirstChild(""SpotLight"") then
			local light = part.SpotLight
			
			light.Enabled = false
			wait(math.random(0,1))
			light.Enabled = true
			wait(math.random(0,1))

		end		
	end

end"
5qyFRq92,Untitled,tourniquet,JavaScript,Saturday 17th of June 2023 02:26:05 PM CDT,"  const getTodos = async () => {
    const q = query(todosCollectionRef, where('uid', '==', user.uid))
    const data = await getDocs(q)
    setTodos(data.docs.map((todo) => ({ ...todo.data(), id: todo.id })))
  }"
b2HtNuft,trait,Yousuf1791,PHP,Saturday 17th of June 2023 02:18:30 PM CDT,"<?php 

trait hello{
	public function say_hello(){
		echo ""Hello world"";
	}
}

trait bye{
	public function say_bye(){
		echo ""Bye everyone"";
	}
}

class base{
	use hello;
	use bye;
}

class base2{
	use hello;
}

$obj = new base();
$obj2 = new base();

$obj->say_hello();
echo ""<br>"";
$obj->say_bye();
echo ""<br>"";
$obj2->say_hello();

?>"
aczYMRg6,[ AUTOFARM ] 🏖️Roblox but every second the baseplate grows +1,Shifu_,Lua,Saturday 17th of June 2023 02:13:29 PM CDT,"-- If you need a scripter dm me up HyperSpeed#7040, it is buggy don't expect to leave it for the night, I ain't getting paid here lol
local player = game.Players.LocalPlayer


local function modifyHitboxSize(character, scale)
    local humanoid = character:WaitForChild(""Humanoid"")
    humanoid:BuildRigFromAttachments()
    local rootPart = character:WaitForChild(""HumanoidRootPart"")
    rootPart.Size = rootPart.Size * scale
    humanoid.HipHeight = humanoid.HipHeight * scale
end

while true do wait(5)
if player.Character then
    modifyHitboxSize(player.Character, 1500)
else
    player.CharacterAdded:Connect(function(character)
        modifyHitboxSize(character, 1500)
    end)
end
end"
DxvTySKh,Fun Facts,sgtorange17,JSON,Saturday 17th of June 2023 02:10:23 PM CDT,"{
  ""animal_facts"": [
    ""Cows have best friends and form strong social bonds. They tend to spend most of their time with their preferred companions."",
    ""Octopuses have three hearts. Two hearts pump blood to the gills, while the third circulates blood throughout the rest of the body."",
    ""The tongue of a blue whale is so large that 50 people could stand on it!"",
    ""A group of flamingos is called a flamboyance. These social birds often gather in large groups and perform synchronized displays."",
    ""The fingerprints of koalas are so similar to human fingerprints that they have been mistaken for crime scene prints in the past."",
    ""Crows are highly intelligent birds and have been observed using tools. They can solve complex puzzles and even make and use their own tools."",
    ""The quokka, a small marsupial native to Australia, is known as the 'world's happiest animal' because it often appears to be smiling due to its upturned mouth."",
    ""The tongue of a giraffe is black and can be up to 20 inches long. It helps them pluck leaves from high branches."",
    ""Some species of male seahorses give birth to their young. The male carries the eggs in a specialized pouch until they hatch."",
    ""Elephants are the largest land animals and have a highly developed sense of empathy. They can comfort and console each other in times of distress.""
  ],
  ""world_facts"": [
    ""The world's oldest known living organism is a bristlecone pine tree named 'Methuselah' located in California, estimated to be over 4,800 years old."",
    ""The Great Barrier Reef in Australia is the largest living structure on Earth and can even be seen from space."",
    ""The world's largest desert is not the Sahara but the Antarctic Desert. It covers the entire continent of Antarctica."",
    ""Mount Everest, the highest peak in the world, continues to grow by about a quarter of an inch (0.6 cm) every year due to tectonic plate movement."",
    ""The Amazon Rainforest in South America is often referred to as the 'lungs of the Earth' because it produces approximately 20% of the world's oxygen."",
    ""There is a village in Norway called Hell, and it occasionally freezes over. So, you can technically say that Hell has frozen over!"",
    ""The world's shortest scheduled flight lasts just 1.7 miles (2.7 km) and connects the islands of Westray and Papa Westray in Scotland. The flight duration is around 1 minute."",
    ""The country with the most time zones is France, due to its overseas territories. It spans 12 time zones, from UTC-10 to UTC+12."",
    ""The world's largest salt flat is the Salar de Uyuni in Bolivia. It stretches over 4,086 square miles (10,582 square kilometers) and creates a stunning mirror-like effect after rainfall."",
    ""The world's oldest known cave paintings, dating back around 40,000 years, were discovered in the Chauvet-Pont-d'Arc Cave in southern France.""
  ],
  ""roblox_facts"": [
    ""Roblox is a popular online platform that allows users to create and play games created by other users. It was officially launched in 2006."",
    ""As of September 2021, Roblox had over 200 million active users worldwide."",
    ""Roblox games are created using a programming language called Lua, which allows users to develop their own games, virtual worlds, and interactive experiences."",
    ""The virtual currency in Roblox is called Robux. Players can earn Robux by creating and selling virtual items, as well as participating in the Roblox Affiliate Program."",
    ""Roblox has a strong community of developers who have created a wide range of games across various genres, including role-playing games, simulators, obstacle courses, and more."",
    ""The most popular game on Roblox is 'Adopt Me!' which is a virtual pet adoption and care simulator. It has gained a massive player base and has been played billions of times."",
    ""Roblox allows players to customize their avatars with various clothing, accessories, and animations. Users can even create their own clothing items and sell them in the Roblox catalog."",
    ""The Roblox Studio is a powerful tool that allows users to create detailed and interactive game environments. It provides a wide range of tools and features to bring imaginations to life."",
    ""Roblox has a robust social aspect, allowing players to chat, form groups, and even participate in virtual events like concerts and parties."",
    ""Roblox has become a platform for aspiring game developers, with some successful developers on the platform going on to start their own game studios or pursue careers in the gaming industry.""
  ]
}
"
LaAVZuyj,SambaNAS start log,Qba,Ruby,Saturday 17th of June 2023 01:55:50 PM CDT,"tdbsam_open: Converting version 0.0 database to version 4.0.
tdbsam_convert_backup: updated /var/lib/samba/private/passdb.tdb file.
s6-rc: info: service init-smartd successfully started
Added user <<secret>>
---------------------------------------------------
[20:49:24] INFO: Exposed Disks Summary:
[config]                path = /config
[addons]                path = /addons
[ssl]                   path = /ssl
[share]                 path = /share
[backup]                path = /backup
[media]                 path = /media
[NAS Seagate]           path = /mnt/NAS Seagate
---------------------------------------------------
s6-rc: info: service init-samba successfully started
s6-rc: info: service init-mqtt: starting
s6-rc: info: service wsdd: starting
s6-rc: info: service smbd: starting
s6-rc: info: service nmbd: starting
s6-rc: info: service avahi: starting
s6-rc: info: service wsdd successfully started
s6-rc: info: service nmbd successfully started
s6-rc: info: service smbd successfully started
s6-rc: info: service avahi successfully started
nmbd version 4.16.8 started.
Copyright Andrew Tridgell and the Samba Team 1992-2022
[20:49:24] INFO: Starting the AVAHI for homeassistant...
smbd version 4.16.8 started.
Copyright Andrew Tridgell and the Samba Team 1992-2022
Waiting for daemon ...
INFO: Profiling support unavailable in this build.
[20:49:24] INFO: Starting the wsdd daemon for WORKGROUP/homeassistant...
[20:49:24] INFO: Interfaces: -i enp0s25 
2023-06-17 20:49:24,793:wsdd INFO(pid 322): using pre-defined UUID cb6a33a0-b841-531d-a34e-09ecec492eb1
2023-06-17 20:49:24,794:wsdd INFO(pid 322): joined multicast group ('239.255.255.250', 3702) on 192.168.1.100%enp0s25
2023-06-17 20:49:24,797:wsdd INFO(pid 322): scheduling Hello message via enp0s25 to ('239.255.255.250', 3702)
2023-06-17 20:49:24,802:wsdd INFO(pid 322): joined multicast group ('ff02::c', 3702, 22364, 2) on fe80::c7c:8d5c:a0b8:6369%enp0s25
2023-06-17 20:49:24,803:wsdd INFO(pid 322): scheduling Hello message via enp0s25 to ('ff02::c', 3702, 22364, 2)
2023-06-17 20:49:24,883:wsdd INFO(pid 322): 192.168.1.10 - - ""POST /cb6a33a0-b841-531d-a34e-09ecec492eb1 HTTP/1.1"" 200 -
2023-06-17 20:49:24,900:wsdd INFO(pid 322): fe80::67ca:a66c:2ef2:88df - - ""POST /cb6a33a0-b841-531d-a34e-09ecec492eb1 HTTP/1.1"" 200 -
s6-rc: info: service init-mqtt successfully started
s6-rc: info: service mqtt-disk-handler: starting
s6-rc: info: service mqtt-disk-handler successfully started
s6-rc: info: service mqtt-handler: starting
s6-rc: info: service mqtt-handler successfully started
s6-rc: info: service legacy-services: starting
[20:49:24] INFO: Starting the MQTT daemon for disks info...
[20:49:24] INFO: Starting the MQTT daemon for partitions info...
s6-rc: info: service legacy-services successfully started
[20:49:25] INFO: Legacy MQTT integration
[20:49:25] INFO: Sending MQTT autodiscovery...
jq: error (at <stdin>:1): null (null) and number (1024) cannot be divided
[20:49:26] INFO: MQTT cleanup.
Timed out
s6-supervise mqtt-handler: warning: finish script lifetime reached maximum value - sending it a SIGKILL
[20:49:32] INFO: Starting the MQTT daemon for partitions info...
[20:49:32] INFO: Legacy MQTT integration
Timed out
[20:49:32] INFO: Sending MQTT autodiscovery...
jq: error (at <stdin>:1): null (null) and number (1024) cannot be divided
[20:49:33] INFO: MQTT cleanup.
Timed out
s6-supervise mqtt-handler: warning: finish script lifetime reached maximum value - sending it a SIGKILL
[20:49:39] INFO: Starting the MQTT daemon for partitions info...
[20:49:39] INFO: Legacy MQTT integration
Timed out
[20:49:39] INFO: Sending MQTT autodiscovery...
jq: error (at <stdin>:1): null (null) and number (1024) cannot be divided
[20:49:40] INFO: MQTT cleanup.
Timed out
s6-supervise mqtt-handler: warning: finish script lifetime reached maximum value - sending it a SIGKILL
[20:49:46] INFO: Starting the MQTT daemon for partitions info...
[20:49:46] INFO: Legacy MQTT integration
Timed out
[20:49:46] INFO: Sending MQTT autodiscovery...
jq: error (at <stdin>:1): null (null) and number (1024) cannot be divided
[20:49:47] INFO: MQTT cleanup.
*****
Samba name server <<secret>> is now a local master browser for workgroup <<secret>> on subnet <<secret>>
*****
Timed out
s6-supervise mqtt-handler: warning: finish script lifetime reached maximum value - sending it a SIGKILL
[20:49:53] INFO: Starting the MQTT daemon for partitions info...
[20:49:53] INFO: Legacy MQTT integration
Timed out
[20:49:53] INFO: Sending MQTT autodiscovery...
jq: error (at <stdin>:1): null (null) and number (1024) cannot be divided
[20:49:54] INFO: MQTT cleanup.
Timed out
s6-supervise mqtt-handler: warning: finish script lifetime reached maximum value - sending it a SIGKILL
[20:50:00] INFO: Starting the MQTT daemon for partitions info...
[20:50:00] INFO: Legacy MQTT integration
Timed out
[20:50:00] INFO: Sending MQTT autodiscovery...
jq: error (at <stdin>:1): null (null) and number (1024) cannot be divided
[20:50:01] INFO: MQTT cleanup.
Timed out"
