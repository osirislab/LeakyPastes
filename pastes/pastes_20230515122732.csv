id,title,username,language,date,content
2zYP1cEk,Untitled,olivoin,CSS,Monday 15th of May 2023 07:21:02 AM CDT,"@import '../../vars.scss';
@import '../../mixins/mixin-text';
@import '../../mixins/mixin-images';

body.single-product {
    background: url(../img/logo_text_white.svg) left top repeat;
    background-color: #000;
    background-attachment: fixed;
    main {
        background-color: rgba(#000, .8);
    }
}

[data-attr-slug=""pa_sostav""] {
    display: none !important;
}

.product-single {
    margin-bottom: 0;
    width: 100vw;
    height: 100vh;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.single-summary_body {
    display: grid;
    grid-template-columns: repeat(2,1fr);
    gap: .5rem;
    padding: .83rem $single-product-card-side-padding;

    @media only screen and (max-width: 768px) {
        padding: .83rem $single-product-card-side-padding-mobile;
    }

    .single-summary_price {
        color: $white;
        font-weight: 700;
        font-size: 1.15rem;
        line-height: 1;
    }

    .single-summary_availability {
        align-self: center;
        justify-self: right;

        [data-availability] {
            color: $white;
            font-weight: 400;
            font-size: .94rem;
            line-height: 1;
            padding-left: .75rem;

            .stock {
                position: relative;
                &::after {
                    content: '';
                    position: absolute;
                    left: -0.75rem;
                    top: 0.25rem;
                    width: .5rem;
                    height: .5rem;
                    border-radius: 100%;
                }
            }

            .out-of-stock {
                display: block;
                &::after {
                    background-color: red;
                }
            }

            .in-stock {
                &::after {
                    background-color: green;
                }
            }

            .onbackorder {
                &::after {
                    background-color: #775EDA;
                }
            }
        }
    }
}


.single-summary_short-desc {
    padding: 1.04rem $single-product-card-side-padding 0 $single-product-card-side-padding;
    font-weight: 400;
    font-size: .94rem;
    line-height: 120%;
    color: $white;

    @media only screen and (max-width: 768px) {
        padding: 1.04rem $single-product-card-side-padding-mobile 0;
        color: $darkText;
    }
}

.single-summary_attributes {

    &__desktop {
        display: grid;
        grid-template-columns: repeat(2,1fr);
        gap: 1.25rem;

        margin-top: 1.56rem;
        padding: 0 $single-product-card-side-padding;
        color: $white;

        .attributes-dropdown {
            position: relative;

            &:after {
                content: '';
                position: absolute;
                display: block;
                width: .68rem;
                height: .36rem;
                background-repeat: no-repeat;
                background-position: center;
                background-size: contain;
                background-image: url(../img/icons/shape.svg);
                top: 50%;
                margin-top: -.18rem;
                right: .68rem;
            }
            &.meow-dropdown--opened {
                &:after {
                    transform: rotate(180deg);
                }
            }

            .attributes-dropdown__selected {
                height: 2.08rem;
                .attributes-dropdown__option {
                    height: 100%;
                }
            }

            .attributes-dropdown__option {
                height: 1.3rem;

                .attributes-dropdown__option--text,
                .attributes-dropdown__option--image {
                    position: relative;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    width: 100%;
                    height: 100%;
                }
                .attributes-dropdown__option--text {
                    background-color: $black;
                    border: 1px dashed $dark;
                    font-weight: 400;
                    font-size: 0.9375rem;
                    line-height: 1.2;
                    color: $white;
                }
                .attributes-dropdown__option--image {
                    background-position: center;
                    background-repeat: no-repeat;
                    background-size: cover;
                    color: $white;
                    font-size: 1rem;
                    text-transform: lowercase;
                }
            }
        }
    }

    &__mobile {
        display: none;
        padding: .375rem $single-product-card-side-padding-mobile;
    }

    @media only screen and (max-width: 768px) {
        &__desktop {
            display: none;
        }
        &__mobile {
            display: block;
        }
    }

    .attributes-list_item {

        .attributes-list_item_title {
            margin-top: 1.5rem;
            margin-bottom: .75rem;
            color: $white;
            font-weight: 400;
            font-size: .9375rem;
            line-height: 120%;
        }

        .attributes-list-item__options {
            display: grid;
            grid-template-columns: repeat(4,4fr);
            grid-gap: .3125rem;
        }

        .attributes-list_item_value {
            cursor: pointer;
            width: 100%;
            height: 2rem;

            .attributes-list-item__value,
            .attributes-list-item__image {
                position: relative;
                display: flex;
                align-items: center;
                justify-content: center;
                width: 100%;
                height: 100%;
            }
            .attributes-list-item__value {
                border: 1px dashed $dark;
                font-weight: 400;
                font-size: 0.9375rem;
                line-height: 1.2;
                color: $white;
            }
            .attributes-list-item__image {
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
                color: $white;
                font-size: 1rem;
                text-transform: lowercase;
            }

            &.active {
                .attributes-list-item__value {
                    border: 1px dashed $white;
                }
                .attributes-list-item__image {
                    border: 1px solid $white;
                    &:before {
                        content: '';
                        display: block;
                        position: absolute;
                        width: .5rem;
                        height: .5rem;
                        top: 50%;
                        margin-top: -.25rem;
                        left: .69rem;
                        background-color: $white;
                        border-radius: 50%;
                    }
                }
            }
        }
    }
}

.single-summary_size-grid {
    margin: 1.25rem $single-product-card-side-padding 0;
    button {
        width: 100%;
        height: 2.8125rem;
        background-color: $darkBackground;
        border: 1px solid $darkBorder;
        text-align: center;
        text-transform: lowercase;
        color: $white;
        font-size: .9375rem;
        cursor: pointer;
    }
    @media only screen and (max-width: 768px) {
        display: none;
    }
}

.products-related {
    margin: 1.25rem 0;
    padding: 0 $single-product-card-side-padding 1.25rem;

    &--desktop {
        display: block;
        .products-related__header {
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            align-items: center;
            justify-content: space-between;
            margin-bottom: .78rem;
            padding: 0;

            h2 {
                font-weight: normal;
                color: $white;
                font-size: .9375rem;
            }

            .products-related__header-controls {
                display: flex;
                flex-wrap: nowrap;
                flex-direction: row;
                align-items: center;
                justify-content: stretch;

                .products-related__back,
                .products-related__forward {
                    cursor: pointer;
                    width: 2.6rem;
                    height: .83rem;
                    background-image: url(../img/icons/slider-arrow-white.svg);
                    background-position: center;
                    background-repeat: no-repeat;
                    background-size: contain;
                }
                .products-related__back {
                    transform: rotate(180deg);
                }
            }
        }

        .swiper-container {
            overflow: hidden;

            .swiper-wrapper {
                font-size: 0;

                .swiper-slide {
                    display: inline-block;
                    width: 33.33%;

                    h3.product-title,
                    .product-price {
                        font-size: .78rem;
                        line-height: 1.2;
                    }
                }
            }
        }
    }
    &--mobile {
        display: none;
    }


    @media only screen and (max-width: 768px) {
        margin: 3rem -$single-product-card-side-padding-mobile 0;
        padding: 0 0 1.25rem;

        &--desktop {
            display: none;
        }
        &--mobile {
            display: block;
            .products-related__header {
                margin: 0 $single-product-card-side-padding-mobile 1.25rem;
                padding: 0 $single-product-card-side-padding-mobile;

                h2 {
                    font-weight: normal;
                    color: $white;
                    font-size: 1.5rem;
                }
            }
            .products {
                padding: 0;

                h3.product-title,
                .product-price {
                    font-size: .78rem;
                    line-height: 1.2;
                }
            }
        }
    }
}

// Стили для формы добавления в корзину
.single-product_variations_form {
    .quantity {
        display: none;
    }
}

@media only screen and (max-width: 768px) {
    body.single-product {
        main {
            background-color: transparent;
        }
    }

    .pre-order {
        .button {
            padding: .75rem;
        }
    }

    .product-single {
        display: block;
        height: auto;
        width: auto;
        overflow: visible;
    }
}

.modal_content-inner table,
.single-summary_full-content table {
    border-collapse: collapse;
    border: 1px solid rgba($black, .1);
    margin: 1rem 0;
    min-width: 100%;
    th, td {
        background-color: $white !important;
        border: 1px solid rgba($black, .1)  !important;
        padding: 0.4rem  !important;
    }
}"
UvmNjXV1,BitFast.cc - Get your BTC transaction confirmed 2 times faster as normal,Artem_,C++,Monday 15th of May 2023 07:07:05 AM CDT,"Hey crypto users,
You should use bitfast.cc to accelerate the confirmations of your transactions (it is 100% free)
https://bitfast.cc/"
XS7UhNtb,l16 Bankomat podstawa,giganciprogramowania,Python,Monday 15th of May 2023 07:01:05 AM CDT,"def glowne_menu():
    print(""Wybierz opcje:"")
    print(""1. Wpłata"")
    print(""2. Wypłata"")
    print(""3. Sprawdzenie stanu konta"")
    print(""4. Zakończ"")

def pobierz_wybor_klienta():
    return int(input(""twój wybór to: ""))

def pobierz_kwote(tekst):
    return float(input(tekst))

def pokaz_stan_konta(saldo):
    print(f""Stan konta wynosi {saldo} złotych"")

def wplata(saldo):
    kwota_wplaty = pobierz_kwote(""Ile chcesz wpłacić"")
    saldo = saldo + kwota_wplaty
    pokaz_stan_konta(saldo)
    return saldo


def wyplata(saldo):
    kwota_wyplaty = pobierz_kwote(""Ile chcesz wypłacić"")
    if kwota_wyplaty > saldo:
        print(""Operacja nie udana, za mało środków na koncie"")
        return saldo
    else:
        saldo -= kwota_wyplaty
        print(f""Wypłacono {kwota_wyplaty} złotych"")
        return saldo

#powyżej nich będziemy pisać wszystkie funkcje naszego programu!!!
wybor = 0
saldo = 0
#poniżej będzie główna pętla programu
while wybor != 4:
    glowne_menu()
    wybor = pobierz_wybor_klienta()
    if wybor == 1:
        saldo = wplata(saldo)
        pass
    elif wybor == 2:
        saldo = wyplata(saldo)
        pass
    elif wybor == 3:
        pokaz_stan_konta(saldo)
        pass
    elif wybor == 4:
        print(""Wyłączanie bankomatu"")
        pass
    else:
        print(""niepoprawne dane"")
        pass
    pass

"
F4gvByr4,Untitled,Daniilsadaweq,Python,Monday 15th of May 2023 07:00:04 AM CDT,"from start_window import StartWindow
from hub_window import HubWindow
import socket
import pickle


class Client:
    def __init__(self):
        self.server_ip = '192.168.1.104'
        self.server_port = 5050
        self.server_addr = (self.server_ip, self.server_port)
        self.start_window = StartWindow(self.server_addr)
        self.hub_window = None
        self.curr_player = None
        self.socket = None
        self.encoding_format = 'utf-8'

    def start_program(self):
        self.start_window.start()
        self.start_window.mainloop()
        self.curr_player = self.start_window.get_created_player()
        if self.curr_player:
            self.handle_hub()

    def handle_hub(self):
        self.connection_to_server()
        self.hub_window = HubWindow(self.curr_player, self.socket)
        self.hub_window.start()
        self.hub_window.mainloop()

    def send_welcome_message(self, conn):
        message = ""HELLO\r\n"" + self.curr_player.get_nickname()
        conn.send(pickle.dumps(message))

    def connection_to_server(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect((self.server_ip, self.server_port))
        self.send_welcome_message(self.socket)


myClient = Client()
myClient.start_program()


import tkinter as tk
import tkinter.ttk as ttk
from settings import *
from support import center, is_pin_valid, is_description_valid
from PIL import ImageTk, Image
from game_room import GameRoom
from tkinter import messagebox


class CreateWindow(tk.Toplevel):
    def __init__(self):
        super().__init__()

        # window
        self.title(""Palack Paradise"")
        self.geometry(f'{CREATE_WIDTH}x{CREATE_HEIGHT}')
        self.resizable(width=False, height=False)
        self.iconbitmap('../graphics/icons/main_ico.ico')
        center(self)
        self.configure(background=CREATE_BG_COLOR, padx=PADDING, pady=PADDING)
        self.half_height = CREATE_HEIGHT / 2
        self.half_width = CREATE_WIDTH / 2
        self.protocol(""WM_DELETE_WINDOW"", self.on_closing)
        self.created_room = None

        def return_pressed(ev):
            self.create()
        self.bind(""<Return>"", return_pressed)

        """"""
        Frame 
        """"""
        s = ttk.Style(self)
        s.configure('MyCreate.TFrame', background=FRAME_COLOR)
        # s.configure('Test.TFrame', background=""black"")
        self.bg_frame = ttk.Frame(self, borderwidth=BORDER, style=""MyCreate.TFrame"")
        self.lbl_frame = ttk.Frame(self.bg_frame, borderwidth=BORDER, style=""MyCreate.TFrame"")
        self.entry_frame = ttk.Frame(self.bg_frame, borderwidth=BORDER, style=""MyCreate.TFrame"")
        """"""
        Text Entries
        """"""
        self.check_description = (self.register(is_description_valid), ""%P"")
        self.room_description_input = ttk.Entry(self.entry_frame, font=(FONT_NAME, NAME_INPUT_FONT_SIZE),
                                                validate=""key"",
                                                validatecommand=self.check_description)
        self.check = (self.register(is_pin_valid), ""%P"")
        self.pin_input = ttk.Entry(self.entry_frame, font=(FONT_NAME, NAME_INPUT_FONT_SIZE), validate=""key"",
                                   validatecommand=self.check)
        """"""
        Combo boxes
        """"""
        self.room_size_input = ttk.Combobox(self.entry_frame, values=(""2"", ""3"", ""4"", ""5""),
                                            font=(FONT_NAME, SIZE_INPUT_FONT_SIZE), state=""readonly"")
        self.room_size_input.current(0)
        self.room_private_cfg = ttk.Combobox(self.entry_frame, values=(""private"", ""public""),
                                             font=(FONT_NAME, SIZE_INPUT_FONT_SIZE), state=""readonly"")
        self.room_private_cfg.current(1)
        self.room_private_cfg.bind(""<<ComboboxSelected>>"", self.change_is_private)
        self.mode_chooser = ttk.Combobox(self.entry_frame, values=[""обычный""], font=(FONT_NAME, SIZE_INPUT_FONT_SIZE),
                                         state=""readonly"")
        self.mode_chooser.current(0)
        """"""
        Labels
        """"""
        self.lbl_font = (FONT_NAME, LBL_FONT_SIZE)
        self.room_name_lbl = ttk.Label(self.lbl_frame, text=""Введите описание комнаты: "", font=self.lbl_font,
                                       background=FRAME_COLOR)
        self.room_size_lbl = ttk.Label(self.lbl_frame, text=""Выберите размер: "", font=self.lbl_font,
                                       background=FRAME_COLOR)
        self.room_private_lbl = ttk.Label(self.lbl_frame, text=""Выберите режим комнаты: "", font=self.lbl_font,
                                          background=FRAME_COLOR)
        self.pin_lbl = ttk.Label(self.lbl_frame, text=""Введите пароль: "", font=self.lbl_font, background=FRAME_COLOR)
        self.mode_chooser_lbl = ttk.Label(self.lbl_frame, text=""Выберите режим: "",
                                          font=self.lbl_font, background=FRAME_COLOR)
        """"""
        Other
        """"""
        eye_width = int(EYE_ICO_SIZE * 5 / 4)
        self.opened_eye = ImageTk.PhotoImage(Image.open('../graphics/utility/opened_eye.png').
                                             resize((eye_width, EYE_ICO_SIZE)), master=self)
        self.closed_eye = ImageTk.PhotoImage(Image.open('../graphics/utility/closed_eye.png').
                                             resize((eye_width, EYE_ICO_SIZE)), master=self)
        val = tk.IntVar(value=1)
        self.visible_password_checkbox = tk.Checkbutton(self.entry_frame, image=self.closed_eye, variable=val,
                                                        bg=FRAME_COLOR, command=self.check_visibility,
                                                        selectcolor=FRAME_COLOR, activebackground=FRAME_COLOR)
        self.confirm_button = tk.Button(self.bg_frame, text=""Создать"", font=self.lbl_font, command=self.create)
        self.is_private = False
        self.is_password_visible = False
        self.change_is_private(None)
        self.check_visibility()

    def get_created_room(self):
        return self.created_room

    def is_fields_fulfill(self):
        is_fulfill = True
        is_fulfill = is_fulfill and (len(self.room_description_input.get()) > 0) and \
                                    (self.is_private and (len(self.pin_input.get()) > 0)
                                     or (not self.is_private and True))
        return is_fulfill

    def create(self):
        if self.is_fields_fulfill():
            self.created_room = GameRoom(None, None, self.room_description_input.get(), self.room_size_input.get(),
                                         self.is_private, pin=self.pin_input.get() if self.is_private else None)
            self.destroy()
        else:
            messagebox.showwarning(""Ошибка ввода"", ""Заполните все поля"")

    def check_visibility(self):
        self.is_password_visible = not self.is_password_visible
        if self.is_password_visible:
            self.pin_input.config(show="""")
            self.visible_password_checkbox.configure(image=self.opened_eye)
        else:
            self.pin_input.config(show=""*"")
            self.visible_password_checkbox.configure(image=self.closed_eye)

    def change_is_private(self, ev):
        value = self.room_private_cfg.get()
        relheight = ALL_FIELDS_HEIGHT / FRAME_HEIGHT + 0.05
        self.is_private = True if value == ""private"" else False
        if self.is_private:
            self.pin_input.place(relx=0, rely=0.15 + relheight * 4, height=ALL_FIELDS_HEIGHT, relwidth=0.6, anchor=""w"")
            self.pin_lbl.place(relx=.5, rely=0.15 + relheight * 4, height=ALL_FIELDS_HEIGHT, anchor=""center"")
            self.visible_password_checkbox.place(relx=0.65, rely=0.11 + relheight * 4)
        else:
            self.pin_input.place_forget()
            self.pin_input.delete(0, 'end')
            self.pin_lbl.place_forget()
            self.visible_password_checkbox.place_forget()

    def start(self):
        relheight = ALL_FIELDS_HEIGHT / FRAME_HEIGHT + 0.05
        self.bg_frame.place(relx=.5, rely=.5, relwidth=0.75, relheight=0.75, anchor=""center"")
        # labels
        self.lbl_frame.place(relx=0, rely=.5, relwidth=0.5, relheight=1, anchor=""w"")
        self.room_name_lbl.place(relx=.5, rely=0.15, height=ALL_FIELDS_HEIGHT, anchor=""center"")
        self.room_size_lbl.place(relx=.5, rely=0.15 + relheight * 3, height=ALL_FIELDS_HEIGHT, anchor=""center"")
        self.room_private_lbl.place(relx=.5, rely=0.15 + relheight * 2, height=ALL_FIELDS_HEIGHT, anchor=""center"")
        self.mode_chooser_lbl.place(relx=.5, rely=0.15 + relheight, height=ALL_FIELDS_HEIGHT, anchor=""center"")

        # entries
        self.entry_frame.place(relx=1, rely=.5, relwidth=0.5, relheight=1, anchor=""e"")
        self.room_description_input.place(relx=0, rely=0.15, height=ALL_FIELDS_HEIGHT, relwidth=0.95, anchor=""w"")
        self.room_size_input.place(relx=0, rely=0.15 + relheight * 3, relwidth=0.25, height=ALL_FIELDS_HEIGHT,
                                   anchor=""w"")
        self.room_private_cfg.place(relx=0, rely=0.15 + relheight * 2, height=ALL_FIELDS_HEIGHT, relwidth=0.5,
                                    anchor=""w"")
        self.mode_chooser.place(relx=0, rely=0.15 + relheight, height=ALL_FIELDS_HEIGHT, relwidth=0.5, anchor=""w"")

        # confirm btn
        self.confirm_button.place(relx=.5, rely=0.85, height=35, anchor=""center"", relwidth=0.25)

    def on_closing(self):
        self.destroy()


class GameRoom:
    def __init__(self, host, address, description, capacity, is_private=False, mode=""default"", pin=None):
        self.host_player = host
        self.capacity = capacity
        self.address = address
        self.room_description = description
        self.room_mode = mode
        self.room_pin = pin
        self.is_room_private = is_private
        self.player_list = []
        self.is_started = False
        self.start_time = None

    def start_room(self):
        self.is_started = True

    def set_start_time(self, start_time):
        self.start_time = start_time

    def get_start_time(self):
        return self.start_time

    def stop_room(self):
        self.is_started = False

    def is_room_started(self):
        return self.is_started

    def get_player_list(self):
        return self.player_list

    def set_player_list(self, player_list):
        self.player_list = player_list

    def get_address(self):
        return self.address

    def set_address(self, addr):
        self.address = addr

    def set_host_player(self, player):
        self.host_player = player

    def get_host_player(self):
        return self.host_player

    def get_description(self):
        return self.room_description

    def get_size(self):
        return self.capacity

    def get_current(self):
        return len(self.player_list)

    def get_host_name(self):
        return self.host_player.get_nickname()

    def add_player(self, player):
        if player not in self.player_list:
            self.player_list.append(player)

    def is_private(self):
        return self.is_room_private

    def check_pin(self, pin):
        return pin == self.room_pin

    def __repr__(self):
        return f""[ROOM] {self.room_description}; [HOST] {self.host_player.get_nickname()}; size: {self.capacity};"" \
               f""privacy: "" + (""private;"" if self.is_room_private else ""public;"") + ""\n""


import pickle

from PIL import ImageTk, Image

from support import is_prompt_valid
import tkinter as tk
from tkinter import ttk, messagebox
from support import center
from settings import *
from Timer import Timer
from Paint import Paint


class GameWindow(tk.Toplevel):
    def __init__(self, room, player, conn):
        super().__init__()

        # window
        self.player = player
        self.title(f""Palack Paradise({self.player.get_nickname()})"")
        self.geometry(f'{ROOM_WIDTH}x{ROOM_HEIGHT}')
        center(self)
        self.iconbitmap('../graphics/icons/main_ico.ico')
        self.resizable(width=False, height=False)
        self.configure(background=ROOM_BG, padx=PADDING, pady=PADDING)
        self.half_height = HEIGHT_HUB / 2
        self.half_width = WIDTH_HUB / 2
        self.room = room
        self.room_conn = conn
        self.protocol(""WM_DELETE_WINDOW"", self.on_closing)

        """"""GUI""""""
        s = ttk.Style(self)
        s.configure('Game.TFrame', background=ROOM_FRAME)
        self.frame = ttk.Frame(self, borderwidth=BORDER, padding=(PADDING, PADDING), style=""Game.TFrame"")
        self.check = (self.register(is_prompt_valid), ""%P"")
        self.prompt_input = ttk.Entry(self.frame, font=(FONT_NAME, 18), validate=""key"", validatecommand=self.check)
        self.prompt_lbl = ttk.Label(self.frame, text=""Напиши предложение"", background=ROOM_FRAME, font=(FONT_NAME, 18))
        self.ready_btn = tk.Button(self.frame, text=""Готово"", font=(FONT_NAME, 14), command=self.on_ready_click)
        self.is_ready = False
        self.timer = None
        self.paint = Paint(self.frame)
        self.paint.place_forget_paint()
        self.room_stages = 0
        self.current_stage = 0
        self.prompt_time = START_PROMPT_TIME
        self.canvas_time = START_CANVAS_TIME

        self.result_canvas = tk.Canvas(self.frame, bg='#f2bcef', width=200, height=300)
        self.canvas_scroll = ttk.Scrollbar(self.frame, orient=tk.VERTICAL)
        self.players = {}
        self.temp_photos = []

        self.left_swipe_img = ImageTk.PhotoImage(Image.open('../graphics/utility/left_swipe.png').
                                                 resize((NEXT_ICO_SIZE, NEXT_ICO_SIZE)), master=self)
        self.right_swipe_img = ImageTk.PhotoImage(Image.open('../graphics/utility/right_swipe.png').
                                                  resize((NEXT_ICO_SIZE, NEXT_ICO_SIZE)), master=self)
        self.left_swipe_btn = tk.Button(self.frame, image=self.left_swipe_img, command=self.left_swipe)
        self.right_swipe_btn = tk.Button(self.frame, image=self.right_swipe_img, command=self.right_swipe)

        self.curr_page = 0
        self.result_game_data = None
        self.mode = None
        """"""
        Pre-start
        """"""
        self.check_room_status()

    def left_swipe(self):
        if self.curr_page > 0:
            self.curr_page -= 1
            self.generate_result(self.result_game_data, self.curr_page)

    def right_swipe(self):
        if self.curr_page < self.room.get_current() - 1:
            self.curr_page += 1
            self.generate_result(self.result_game_data, self.curr_page)

    def _generate_avatars_dict(self):
        for player in self.room.get_player_list():
            self.players[player.get_nickname()] = ImageTk.PhotoImage(player.get_avatar_image()[1].
                                                                     resize(AVATAR_SIZE),
                                                                     master=self.frame)

    def on_ready_click(self):
        if self.mode == ""prompt"":
            if self.is_ready:
                self.prompt_input.state(['!disabled'])
                self.ready_btn['text'] = ""Готово""
                self.is_ready = False
            else:
                self.is_ready = True
                self.prompt_input.state(['disabled'])
                self.ready_btn['text'] = ""Изменить""
        else:
            if self.is_ready:
                self.paint.unsleep_canvas()
                self.ready_btn['text'] = ""Готово""
                self.is_ready = False
            else:
                self.is_ready = True
                self.paint.sleep_canvas()
                self.prompt_input.state(['disabled'])
                self.ready_btn['text'] = ""Изменить""

    def on_closing(self):
        if self.player.get_nickname() == self.room.get_host_name():
            if messagebox.askokcancel(""Quit"", ""Do you want to quit?""):
                self.room_conn.send(pickle.dumps(f""STOP_GAME\r\n{self.player.get_nickname()}""))
                server_response = pickle.loads(self.room_conn.recv(1024))
                if server_response == ""CLOSED"":
                    self.destroy()

    def check_room_status(self):
        if self.player.get_nickname() != self.room.get_host_name():
            message = f""CHECK_STATUS\r\n{self.room.get_host_name()}""
            self.room_conn.send(pickle.dumps(message))
            response = pickle.loads(self.room_conn.recv(1024))
            if response == ""CLOSED"":
                self.destroy()
        self.after(200, self.check_room_status)

    def after_timer(self, message, mode):
        self.ready_btn['text'] = ""Готово""
        self.prompt_input.state(['!disabled'])
        if mode == ""prompt"":
            self.prompt_call(message)
        elif mode == ""canvas"":
            self.paint_call(message)

    def ask_next_part(self, mode):
        message = f""ASK_NEXT\r\n{self.room.get_host_name()},{self.player.get_nickname()},{self.current_stage}""
        self.room_conn.send(pickle.dumps(message))
        data = b''
        while True:
            part = self.room_conn.recv(4096)
            data += part
            if len(part) < 4096:
                break
        data = pickle.loads(data)
        if mode == ""prompt"":
            self.prompt_input.state(['!disabled'])
            self.prompt_input.delete(""0"", tk.END)
            self.prompt_input.insert(""0"", data)
            self.prompt_input.state(['disabled'])
        elif mode == ""canvas"":
            self.prompt_input.delete(""0"", tk.END)
            self.paint.set_canvas_image(data)

    def receive_game_results(self):
        message = f""SEND_GAME_RESULT\r\n{self.room.get_host_name()}""
        self.room_conn.send(pickle.dumps(message))
        data = b''
        while True:
            part = self.room_conn.recv(4096)
            data += part
            if len(part) < 4096:
                break
        data = pickle.loads(data)
        return data

    def is_solo_player(self, data):
        for key in data.keys():
            return len(data[key][0]) < 2

    def _result_canvas_config(self, scrollregion):
        self.canvas_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas_scroll.config(command=self.result_canvas.yview)
        self.result_canvas.config(width=300, height=300)
        self.result_canvas.config(scrollregion=scrollregion)
        self.result_canvas.config(yscrollcommand=self.canvas_scroll.set)
        self.result_canvas.place(relx=0.05, rely=0.15, relheight=0.8, relwidth=0.9)

    def _clear_result_canvas(self):
        self.result_canvas.delete('all')
        self.result_canvas['bg'] = '#f2bcef'

    def _place_mini_avatar(self, side, offset_y, nick):
        nick = nick
        if side == tk.RIGHT:
            self.result_canvas.create_image(LEFT_AVATAR_X, offset_y, image=self.players[nick])
            self.result_canvas.create_text(LEFT_AVATAR_X, offset_y + MINI_AVATAR_SIZE[0] - 5, anchor=""center"",
                                           text=nick, font=BASE_FONT)
        elif side == tk.LEFT:
            self.result_canvas.create_image(RIGHT_AVATAR_X, offset_y, image=self.players[nick])
            self.result_canvas.create_text(RIGHT_AVATAR_X, offset_y + MINI_AVATAR_SIZE[0] - 5, anchor=""center"",
                                           text=nick, font=BASE_FONT)

    def _find_nick_by_stage(self, stage, game_data, nick):
        for key in game_data.keys():
            if game_data[key][0][stage] == nick:
                return key

    def generate_result(self, game_data, index):
        key = list(game_data.keys())[index]
        mini_storage = game_data[key]
        self._clear_result_canvas()
        sides = [tk.RIGHT, tk.LEFT]
        offset = BASE_OFFSET_Y
        i = 0
        length = len(mini_storage[0])
        data_index = index + 1
        data_key = list(game_data.keys())[data_index % length]
        data_storage = game_data[data_key]
        while i < length:
            nick = mini_storage[0][i]
            self._place_mini_avatar(sides[i % 2], offset, nick)
            data = data_storage[1][i]
            if i % 2 == 0:
                self.text_item = self.result_canvas.create_text(0, 0, text=data, font=(FONT_NAME, 12))
                bounds = self.result_canvas.bbox(self.text_item)
                text_width = bounds[2] - bounds[0]
                x = (LEFT_AVATAR_X - text_width - 20)
                self.result_canvas.create_text(x, offset + MINI_AVATAR_SIZE[0]/4 - 15,
                                               text=data, font=(FONT_NAME, 12))
                self.result_canvas.delete(self.text_item)
                offset += AVATAR_SIZE[0] + 25
            else:
                self.temp_photos.append(ImageTk.PhotoImage(data.resize(CANVAS_IMG_SIZE), master=self.result_canvas))
                self.result_canvas.create_image(RIGHT_AVATAR_X + MINI_AVATAR_SIZE[0], offset, anchor=""nw"",
                                                image=self.temp_photos[-1])
                offset += AVATAR_SIZE[0] + 200
            i += 1
            data_index += 2
            data_key = list(game_data.keys())[data_index % length]
            data_storage = game_data[data_key]

    def print_data_on_screen(self, game_data):
        self._generate_avatars_dict()
        self.left_swipe_btn.place(relx=0.9, rely=0.957)
        self.right_swipe_btn.place(relx=0.935, rely=0.957)
        keys = list(game_data.keys())
        scroll_x, scroll_y = len(game_data[keys[0]][1])*240, len(game_data[keys[0]][1])*240
        self._result_canvas_config((0, 0, scroll_x, scroll_y))
        print(game_data)
        self.generate_result(game_data, self.curr_page)

    def call_end(self):
        self.prompt_lbl['text'] = 'Результаты'
        self.paint.place_forget_paint()
        self.prompt_input.place_forget()
        self.ready_btn.place_forget()
        game_data = self.receive_game_results()
        self.result_game_data = game_data
        if not self.is_solo_player(game_data):
            self.print_data_on_screen(game_data)

    def _find_next_in_list(self, player_list):
        for player in player_list:
            if player.get_nickname() == self.player.get_nickname():
                return player_list.index(player) + self.current_stage

    def prompt_call(self, message):
        player_list = self.room.get_player_list()
        name = player_list[self._find_next_in_list(player_list) % len(player_list)].get_nickname()
        message = message if len(message) > 0 else ""no prompt input""
        self.room_conn.send(pickle.dumps(f""PROMPT\r\n{self.room.get_host_name()},{name}""))
        response = pickle.loads(self.room_conn.recv(1024))
        if response == ""FOUND"":
            self.room_conn.send(pickle.dumps(f""{message}""))
            pickle.loads(self.room_conn.recv(1024))
            self.prompt_lbl['text'] = ""Зарисуй предложение""
            if self.current_stage >= self.room_stages:
                self.after(200)
                self.call_end()
            else:
                self.after(300)
                self.is_ready = False
                self.mode = ""canvas""
                self.ask_next_part(""prompt"")
                self.paint.place_paint()
                self.paint.unsleep_canvas()
                self.timer = Timer(self, self.canvas_time-3*self.current_stage, ""canvas"")
                self.timer.start_timer()
                self.current_stage += 1

    def paint_call(self, message):
        player_list = self.room.get_player_list()
        name = player_list[self._find_next_in_list(player_list) % len(player_list)].get_nickname()
        self.room_conn.send(pickle.dumps(f""CANVAS\r\n{self.room.get_host_name()},{name}""))
        response = pickle.loads(self.room_conn.recv(1024))
        if response == ""FOUND"":
            message_pickled = pickle.dumps(message)
            self.room_conn.send(message_pickled)
            pickle.loads(self.room_conn.recv(1024))
            self.prompt_lbl['text'] = ""Опиши картинку""
            if self.current_stage >= self.room_stages:
                self.after(200)
                self.call_end()
            else:
                self.after(300)
                self.is_ready = False
                self.mode = ""prompt""
                self.ask_next_part(""canvas"")
                self.paint.sleep_canvas()
                self.timer = Timer(self, self.prompt_time-2*self.current_stage, ""prompt"")
                self.timer.start_timer()
                self.current_stage += 1

    def start_game(self):
        self.timer = Timer(self, self.prompt_time, ""prompt"")
        # self.timer = Timer(self, 4, ""prompt"")
        self.timer.start_timer()
        self.mode = ""prompt""
        self.current_stage += 1

    def placing(self):
        self.frame.place(relx=.5, rely=.5, relwidth=0.8, relheight=0.8, anchor=""center"")
        self.prompt_lbl.place(relx=.5, rely=0.05, anchor=""center"")
        self.prompt_input.place(relx=0.05, rely=0.10, relwidth=0.79, height=30)
        self.ready_btn.place(relx=0.915, rely=0.128, height=30, relwidth=0.135, anchor=""center"")

    def wait_for_start(self):
        message = f""ASK_START\r\n{self.room.get_host_name()}""
        self.room_conn.send(pickle.dumps(message))
        response = pickle.loads(self.room_conn.recv(1024))
        if response == ""START"":
            self.start_game()

    def start(self):
        self.placing()
        self.room_stages = self.room.get_current()
        self.current_stage = 0
        self.wait_for_start()


import random
import time
import socket
from support import get_ip
import threading
import pickle


class HubServer:
    def __init__(self):
        # net data
        PORT = 5050
        self.IP = get_ip()
        self.header = 64
        self.encode_format = ""utf-8""
        self.ADDR = (self.IP, PORT)

        self.used_ports = []
        self.room_port_range = [50000, 60000]

        # server binding
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.bind(self.ADDR)

        self.active_rooms = []
        self.local_storage = {}
        self.player_nicks = []

    def _make_player_structure(self, room):
        room_size = room.get_current()
        player_list = room.get_player_list()
        info_list = {player.get_nickname(): [] for player in player_list}
        for j in range(room_size):
            nicks = []
            info = []
            for i in range(room_size):
                nicks.append(player_list[(i + j) % room_size].get_nickname())
                info.append(None)
            info_list[player_list[j].get_nickname()].append(nicks)
            info_list[player_list[j].get_nickname()].append(info)
        self.local_storage[room.get_host_name()] = info_list

    def _calculate_game_stage(self, host):
        room_storage = self.local_storage[host]
        keys = list(room_storage.keys())
        stages = []
        for key in keys:
            mini_storage = room_storage[key][1]
            stage = 0
            for i in range(len(mini_storage)):
                if mini_storage[i] is not None:
                    stage += 1
                else:
                    stages.append(stage)
        return min(stages) if len(stages) > 0 else 0

    def _insert_into_storage(self, room, player_name, prompt):
        stage = self._calculate_game_stage(room.get_host_name())
        print(stage, ""  "", player_name)
        room_storage = self.local_storage[room.get_host_name()]
        try:
            room_storage[player_name][1][stage] = prompt
        except IndexError:
            pass
        finally:
            return stage

    def handle_client(self, conn, addr):
        print(f""[NEW CONNECTION] {addr} connected."")
        connected = True
        while connected:
            msg = pickle.loads(conn.recv(1024))
            if ""\r\n"" in msg:
                command, message = msg.split(""\r\n"")
                if command != ""CHECK_STATUS"":
                    print(f""[{addr}] {command} {message}"")
                connected = self.manage_messages(command, message, conn)
            else:
                conn.send(pickle.dumps(""WRONG_COMMAND""))
        conn.close()

    def manage_messages(self, command, message, conn):
        match command:
            case ""CHECKING_NICK"":
                self.find_nick_in_base(message, conn)
                return False
            case ""HELLO"":
                self.adding_a_new_player(message)
                return True
            case ""DISCONNECT"":
                self.delete_a_player(message, conn)
                return False
            case ""REFRESH"":
                self.send_current_list(conn)
                return True
            case ""CREATE_ROOM"":
                self.create_a_room(conn)
                return True
            case ""DELETE_ROOM"":
                self.delete_a_room(message)
                return True
            case ""REFRESH_ROOM"":
                self.send_players_room(message, conn)
                return True
            case ""JOIN_ROOM"":
                self.join_player_to_room(conn)
                return True
            case ""CHECK_STATUS"":
                self.send_room_status(message, conn)
                return True
            case ""START_ROOM"":
                self.start_a_room(message, conn)
                return True
            case ""ASK_START"":
                self.synchronize_all_room(message, conn)
                return True
            case ""STOP_GAME"":
                self.close_a_game(message, conn)
                return True
            case ""PROMPT"":
                self.receive_prompt(message, conn)
                return True
            case ""CANVAS"":
                self.receive_canvas(message, conn)
                return True
            case ""ASK_NEXT"":
                self.send_next_game_data(message, conn)
                return True
            case ""CHECK_PIN"":
                self.check_room_pin(message, conn)
                return True
            case ""SEND_GAME_RESULT"":
                self.send_local_storage(message, conn)
                return True

    def send_local_storage(self, message, conn):
        for room in self.active_rooms:
            if room.get_host_name() == message:
                conn.send(pickle.dumps(self.local_storage[message]))

    def check_room_pin(self, message, conn):
        pin = pickle.loads(conn.recv(1024))
        for room in self.active_rooms:
            if message == room.get_host_name():
                if room.check_pin(pin):
                    conn.send(pickle.dumps(""VALID""))
                else:
                    conn.send(pickle.dumps(""INVALID""))

    def _find_data_in_storage(self, host, player, stage):
        room_storage = self.local_storage[host]
        keys = list(room_storage.keys())
        player = keys[(keys.index(player) + stage) % len(keys)]
        return room_storage[player][1][stage]

    def send_next_game_data(self, message, conn):
        message = message.split("","")
        data = self._find_data_in_storage(message[0], message[1], int(message[2])-1)
        conn.send(pickle.dumps(data))

    def receive_canvas(self, message, conn):
        message, name = message.split("","")
        for room in self.active_rooms:
            if message == room.get_host_name():
                conn.send(pickle.dumps(""FOUND""))
                data = b''
                while True:
                    part = conn.recv(4096)
                    data += part
                    if len(part) < 4096:
                        break
                canvas = pickle.loads(data)
                self._insert_into_storage(room, name, canvas)
                conn.send(pickle.dumps(""ADDED""))

    def receive_prompt(self, message, conn):
        message, name = message.split("","")
        for room in self.active_rooms:
            if message == room.get_host_name():
                conn.send(pickle.dumps(""FOUND""))
                prompt = pickle.loads(conn.recv(1024))
                self._insert_into_storage(room, name, prompt)
                conn.send(pickle.dumps(""ADDED""))

    def close_a_game(self, message, conn):
        for room in self.active_rooms:
            if message == room.get_host_name():
                room.stop_room()
                self.local_storage[room.get_host_name()] = None
                conn.send(pickle.dumps(""CLOSED""))

    def synchronize_all_room(self, message, conn):
        for room in self.active_rooms:
            if message == room.get_host_name():
                start_time = room.get_start_time()
                time.sleep(start_time + 0.75 - time.time())
                conn.send(pickle.dumps(""START""))

    def start_a_room(self, message, conn):
        for room in self.active_rooms:
            if message == room.get_host_name():
                room.start_room()
                room.set_start_time(time.time())
                self._make_player_structure(room)
                conn.send(pickle.dumps(f""SUCCESS\r\n{room.get_current()}""))

    def send_room_status(self, message, conn):
        isFound = False
        for room in self.active_rooms:
            if message == room.get_host_name():
                isFound = True
                result = ""STARTED"" if room.is_room_started() else ""CLOSED""
                conn.send(pickle.dumps(result))
        if not isFound:
            conn.send(pickle.dumps(""DELETED""))

    def join_player_to_room(self, conn):
        host = pickle.loads(conn.recv(1024))
        data = b''
        while True:
            part = conn.recv(4096)
            data += part
            if len(part) < 4096:
                break
        player = pickle.loads(data)
        for room in self.active_rooms:
            if host == room.get_host_name():
                room.add_player(player)
                conn.send(pickle.dumps(""SUCCESS""))
                return
        conn.send(pickle.dumps(""ERROR""))

    def delete_a_room(self, message):
        if len(self.active_rooms) == 0:
            print(""ERROR IT CANNOT BE"")
        removed = False
        for room in self.active_rooms:
            if room.host_player.get_nickname() == message:
                self.active_rooms.remove(room)
                removed = True
        if not removed:
            print(""ERROR IT CANNOT BE"")

    def send_players_room(self, message, conn):
        for room in self.active_rooms:
            if message == room.get_host_player().get_nickname():
                conn.send(pickle.dumps(room.get_player_list()))
                return
        conn.send(pickle.dumps(""NOT_FOUND""))

    def _check_uniqueness(self, message):
        return not (message in self.active_rooms)

    def create_a_room(self, conn):
        conn.send(pickle.dumps(""ACCEPTED""))
        size = int.from_bytes(conn.recv(2048), byteorder=""big"")
        data = b''
        while len(data) < size:
            data += conn.recv(4096)
        room = pickle.loads(data)
        if self._check_uniqueness(room):
            room_port = random.randint(self.room_port_range[0], self.room_port_range[1])
            while room_port in self.used_ports:
                room_port = random.randint(self.room_port_range[0], self.room_port_range[1])
            self.used_ports.append(room_port)
            room_address = (self.IP, room_port)
            room.set_address(room_address)
            self.active_rooms.append(room)
            conn.send(pickle.dumps(f""CREATED\r\n{room_address}""))
        else:
            conn.send(pickle.dumps(""EXISTS""))

    def send_current_list(self, conn):
        conn.send(pickle.dumps(self.active_rooms))

    def adding_a_new_player(self, message):
        self.player_nicks.append(message)

    def delete_a_player(self, message, conn):
        if message in self.player_nicks:
            self.player_nicks.remove(message)
            conn.send(pickle.dumps(""DELETED""))
        else:
            conn.send(pickle.dumps(""NOT_FOUND""))

    def find_nick_in_base(self, nick, conn):
        if nick in self.player_nicks:
            response = ""UNAVAILABLE""
        else:
            response = ""AVAILABLE""
        conn.send(pickle.dumps(response))

    def start(self):
        self.server.listen()
        print(f'curr_ip={self.IP}')
        print(""[LISTENING]"")
        while True:
            conn, addr = self.server.accept()
            thread = threading.Thread(target=self.handle_client, args=(conn, addr))
            thread.start()
            print(f""[ACTIVE CONNECTIONS] {threading.active_count() - 1}"")


hubServer = HubServer()
hubServer.start()


import tkinter as tk
import tkinter.ttk as ttk
from PIL import ImageTk
from settings import *
from tkinter import messagebox
from support import center
from pygame import mixer
from create_window import CreateWindow
from room_window import RoomWindow
import pickle
from pin_input import PinInput


class HubWindow(tk.Tk):
    def __init__(self, player, window_conn):
        super().__init__()

        # window
        self.title(""Palack Paradise"")
        self.geometry(f'{WIDTH_HUB}x{HEIGHT_HUB}')
        center(self)
        self.iconbitmap('../graphics/icons/main_ico.ico')
        self.resizable(width=False, height=False)
        self.configure(background=BG_COLOR, padx=PADDING, pady=PADDING)
        self.half_height = HEIGHT_HUB / 2
        self.half_width = WIDTH_HUB / 2
        self.player = player
        self.window_conn = window_conn
        self.protocol(""WM_DELETE_WINDOW"", self.on_closing)

        """"""
        Main Frame
        """"""
        s = ttk.Style()
        s.configure('My.TFrame', background=BG_FRAME_COLOR)
        self.frame = ttk.Frame(self, borderwidth=BORDER, style=""My.TFrame"", padding=(0, 0), border=0,
                               width=HUB_FRAME_WIDTH, height=HUB_FRAME_HEIGHT)
        self.table = ttk.Treeview(master=self.frame, selectmode=""browse"")
        self.table_init()

        """"""
        Player mini-profile
        """"""
        self.player_avatar_img = ImageTk.PhotoImage(self.player.get_avatar_image()[1], master=self.frame)
        self.player_avatar = ttk.Label(self.frame, image=self.player_avatar_img, borderwidth=BORDER,
                                       padding=(PADDING, PADDING))
        self.player_nick_lbl = ttk.Label(self.frame, text=self.player.get_nickname(), background=BG_FRAME_COLOR,
                                         font=(FONT_NAME, NICK_FONT_SIZE), justify=""center"")

        """"""
        Control buttons
        """"""
        self.refresh_list_btn = ttk.Button(self.frame, text=""Обновить"")
        self.join_room_btn = ttk.Button(self.frame, text=""Присоединиться"")
        self.create_room_btn = ttk.Button(self.frame, text=""Создать комнату"")

        """"""
        Table variables
        """"""
        self.is_empty = False
        self.room_list = []
        self.empty_room_notification = ttk.Label(self.table, text=""Пока нет ни одной комнаты"",
                                                 font=(FONT_NAME, NOTIFICATION_FONT_SIZE))

        """"""
        Refresh button personal
        """"""
        self.can_refresh = True
        mixer.init()
        self.forbid_btn_sound = mixer.Sound(""../sounds/btn_forbid.mp3"")
        self.forbid_btn_sound.set_volume(0.2)

        """"""
        Some stuff
        """"""
        self.create_room_window = None
        self.in_new_window = False
        self.check_is_empty()
        self.binding()
        self.refresh_table_items(tk.Event())

    def table_init(self):
        self.table['columns'] = ('id', 'host', 'name', 'players', 'privacy')
        self.table.column(""#0"", width=0, stretch=tk.NO)
        self.table.column(""id"", anchor=tk.CENTER, width=int(TABLE_WIDTH / 10 / 2))
        self.table.column(""host"", anchor=tk.CENTER, width=int(2.3 * TABLE_WIDTH / 10))
        self.table.column(""name"", anchor=tk.CENTER, width=int(4.5 * TABLE_WIDTH / 10))
        self.table.column(""players"", anchor=tk.CENTER, width=int(1.3 * TABLE_WIDTH / 10))
        self.table.column(""privacy"", anchor=tk.CENTER, width=int(1.3 * TABLE_WIDTH / 10))
        self.table.heading(""#0"", text="""", anchor=tk.CENTER)
        self.table.heading(""id"", text=""Id"", anchor=tk.CENTER)
        self.table.heading(""host"", text=""Host"", anchor=tk.CENTER)
        self.table.heading(""name"", text=""Name"", anchor=tk.CENTER)
        self.table.heading(""players"", text=""Players"", anchor=tk.CENTER)
        self.table.heading(""privacy"", text=""Privacy"", anchor=tk.CENTER)

    def inverse_refresh(self):
        self.can_refresh = not self.can_refresh

    def clean_table(self):
        for i in self.table.get_children():
            self.table.delete(i)

    def ask_server_list(self):
        self.window_conn.send(pickle.dumps(f""REFRESH\r\n{self.player.get_nickname()}""))
        data = b''
        while True:
            part = self.window_conn.recv(4096)
            data += part
            if len(part) < 4096:
                break
        room_list = pickle.loads(data)
        self.room_list = room_list

    def add_items(self):
        i = 1
        for room in self.room_list:
            self.table.insert(parent='', index='end', text='',
                              values=(i, room.get_host_name(), room.get_description(),
                                      f""{room.get_current()}/{room.get_size()}"", ""🔑"" if room.is_private() else """"))
            i += 1

    def refresh_table_items(self, ev):
        if not self.in_new_window:
            if self.can_refresh or ev == ""important"":
                self.clean_table()
                self.ask_server_list()
                self.add_items()
                self.check_is_empty()
                self.can_refresh = False
                self.after(4000, self.inverse_refresh)
            else:
                self.forbid_btn_sound.play()

    def send_server_verification(self, room):
        if room.is_private():
            pinWindow = PinInput()
            pinWindow.start()
            self.wait_window(pinWindow)
            input_pin = pinWindow.get_input_pin()
            if input_pin:
                message = f""CHECK_PIN\r\n{room.get_host_name()}""
                self.window_conn.send(pickle.dumps(message))
                self.window_conn.send(pickle.dumps(input_pin))
                response = pickle.loads(self.window_conn.recv(1024))
                if response == ""INVALID"":
                    messagebox.showerror(""Ошибка пароля"", ""Введен неверный пароль"")
                    return
            else:
                return
        message = ""JOIN_ROOM\r\n""
        self.window_conn.send(pickle.dumps(message))
        self.window_conn.send(pickle.dumps(room.get_host_name()))
        self.window_conn.send(pickle.dumps(self.player))
        response = self.window_conn.recv(1024)
        if response == ""ERROR"":
            return False
        return True

    def join_to_room(self, ev):
        if not self.in_new_window:
            if self.table.selection():
                curItem = self.table.focus()
                index = int(self.table.item(curItem)['values'][0]) - 1
                room_to_join = self.room_list[index]
                if room_to_join.is_room_started():
                    messagebox.showwarning(""Ошибка доступа"", ""Игра в комнате уже начата"")
                    return
                if room_to_join.get_current() >= int(room_to_join.get_size()):
                    messagebox.showwarning(""Ошибка доступа"", ""В комнату больше не влезет"")
                    return
                if not self.send_server_verification(room_to_join):
                    return
                self.withdraw()
                room = RoomWindow(room_to_join, self.player, self.window_conn)
                room.start()
                self.wait_window(room)
                self.deiconify()
                self.refresh_table_items(""important"")

    def launching_room(self, created_room):
        created_room.set_host_player(self.player)
        created_room.add_player(self.player)
        self.window_conn.send(pickle.dumps(f""CREATE_ROOM\r\n""))
        self.window_conn.recv(1024)
        pickled = pickle.dumps(created_room)
        self.window_conn.sendall(len(pickled).to_bytes(4, byteorder='big'))
        self.window_conn.sendall(pickled)
        server_response = pickle.loads(self.window_conn.recv(1024))
        message, addr = server_response.split(""\r\n"")
        self.refresh_table_items(""important"")
        if message == ""CREATED"":
            self.withdraw()
            room = RoomWindow(created_room, self.player, self.window_conn)
            room.start()
            self.wait_window(room)
            self.deiconify()
            self.check_is_empty()
            self.refresh_table_items(""important"")

    def create_a_room(self, ev):
        if not self.in_new_window:
            if len(self.room_list) > 5:
                messagebox.showwarning(""Can't create"", ""There is maximum of rooms already(6/6)"")
                return
            self.create_room_window = CreateWindow()
            self.in_new_window = True
            self.create_room_window.start()
            self.wait_window(self.create_room_window)
            self.in_new_window = False
            created_room = self.create_room_window.get_created_room()
            if not created_room:
                return
            self.launching_room(created_room)

    def binding(self):
        self.refresh_list_btn.bind(""<Button-1>"", self.refresh_table_items)
        self.join_room_btn.bind(""<Button-1>"", self.join_to_room)
        self.table.bind('<Button-1>', self.handle_click)
        self.create_room_btn.bind(""<Button-1>"", self.create_a_room)

    # placing tkinter widgets
    def placing_components(self):
        self.frame.place(relx=.5, rely=.5, anchor=""center"")
        self.table.place(x=TABLE_LEFT, y=TABLE_TOP, width=TABLE_WIDTH, height=TABLE_HEIGHT)
        self.player_avatar.place(relx=0.04, rely=0.075)
        self.player_nick_lbl.configure(anchor=""center"")
        self.player_nick_lbl.place(relx=0.04, rely=0.53, width=PREFERRED_SIZE[0])
        self.join_room_btn.place(x=TABLE_LEFT, rely=0.075, width=BUTTON_WIDTH, height=BUTTON_HEIGHT)
        self.create_room_btn.place(x=TABLE_LEFT + BUTTON_WIDTH + OFFSET, rely=0.075,
                                   width=BUTTON_WIDTH, height=BUTTON_HEIGHT)
        self.refresh_list_btn.place(x=TABLE_LEFT + 2 * (BUTTON_WIDTH + OFFSET), rely=0.075, width=REFRESH_WIDTH,
                                    height=BUTTON_HEIGHT)

    def check_is_empty(self):
        if len(self.room_list) == 0:
            self.is_empty = True
            self.empty_room_notification.place(x=TABLE_WIDTH / 2 - 140, y=TABLE_HEIGHT / 2 - 20)
        else:
            self.is_empty = False
            self.empty_room_notification.place_forget()

    # binding
    def on_closing(self):
        if messagebox.askokcancel(""Quit"", ""Do you want to quit?""):
            self.window_conn.send(pickle.dumps(f""DISCONNECT\r\n{self.player.get_nickname()}""))
            server_response = pickle.loads(self.window_conn.recv(1024))
            if server_response == ""DELETED"":
                self.window_conn.close()
                self.destroy()

    def handle_click(self, event):
        if self.table.identify_region(event.x, event.y) == ""separator"":
            return ""break""

    # starting of window
    def start(self):
        self.placing_components()


import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageDraw, ImageTk
from settings import *


class Paint(ttk.Frame):
    def __init__(self, frame):
        # some consts
        super().__init__(master=frame)
        self.x = 0
        self.y = 0
        self.brush_size = 3

        # init
        self.color = 'black'
        self.local_master = frame

        # components
        s = ttk.Style(self)
        s.configure('Paint.TFrame', background=ROOM_FRAME)
        self['style'] = 'Paint.TFrame'
        self.place(relx=0.05, rely=0.18, relwidth=0.95, relheight=0.85)

        self.canvas = tk.Canvas(self, bg='white')
        self.canvas.place(relheight=0.9, relwidth=0.83, relx=0, rely=0)
        self.canvas.bind('<B1-Motion>', self.draw)

        self.menu = tk.Menu(self, tearoff=0)
        self.brush_1px = ImageTk.PhotoImage(Image.open('../graphics/utility/brush_1px.png').
                                            resize((BRUSH_ICO_SIZE*3, BRUSH_ICO_SIZE)), master=self)
        self.brush_4px = ImageTk.PhotoImage(Image.open('../graphics/utility/brush_4px.png').
                                            resize((BRUSH_ICO_SIZE * 3, BRUSH_ICO_SIZE)), master=self)
        self.brush_7px = ImageTk.PhotoImage(Image.open('../graphics/utility/brush_7px.png').
                                            resize((BRUSH_ICO_SIZE * 3, BRUSH_ICO_SIZE)), master=self)
        self.brush_13px = ImageTk.PhotoImage(Image.open('../graphics/utility/brush_13px.png').
                                             resize((BRUSH_ICO_SIZE * 3, BRUSH_ICO_SIZE)), master=self)
        self.brush_17px = ImageTk.PhotoImage(Image.open('../graphics/utility/brush_17px.png').
                                             resize((BRUSH_ICO_SIZE * 3, BRUSH_ICO_SIZE)), master=self)
        self.menu.add_command(image=self.brush_1px, command=lambda size=1: self.brush_change(size))
        self.menu.add_command(image=self.brush_4px, command=lambda size=3: self.brush_change(size))
        self.menu.add_command(image=self.brush_7px, command=lambda size=6: self.brush_change(size))
        self.menu.add_command(image=self.brush_13px, command=lambda size=10: self.brush_change(size))
        self.menu.add_command(image=self.brush_17px, command=lambda size=15: self.brush_change(size))

        self.canvas_img = Image.new('RGB', GAME_CANVAS_SIZE, 'white')
        self.image_draw = ImageDraw.Draw(self.canvas_img)
        self.colors = ['black', 'red', 'green', 'yellow', 'white', 'gray', 'brown', 'pink', 'maroon', 'aqua',
                       'violet', 'CadetBlue', 'burlywood', 'indigo', 'purple']
        self.labels = []
        base_x = 0.84
        base_y = 0
        offset_x = 0.05
        offset_y = 0.09
        last_value = (0, 0)
        for i in range(len(self.colors)):
            label = tk.Button(self, bg=self.colors[i], text='', command=lambda index=i: self.on_label_click(index))
            label.place(relx=base_x + (i % 3) * offset_x, rely=base_y + int(i / 3) * offset_y, width=35, height=35)
            last_value = (base_x + (i % 3) * offset_x, base_y + int(i / 3) * offset_y)
            self.labels.append(label)
        self.color_indicator_lbl = tk.Label(self, bg=self.color, width=10)
        self.color_indicator_lbl.place(relx=base_x, rely=last_value[1] + offset_y, relwidth=0.15, relheight=0.08)
        base_y = last_value[1] + offset_y*2
        self.pour_img = ImageTk.PhotoImage(Image.open('../graphics/utility/fill.png').
                                           resize((FILL_ICO_SIZE, FILL_ICO_SIZE)), master=self)
        self.pour_btn = tk.Button(self, image=self.pour_img, command=self.pour)
        self.pour_btn.place(relx=base_x, rely=base_y)
        self.clear_img = ImageTk.PhotoImage(Image.open('../graphics/utility/clear.png').
                                            resize((FILL_ICO_SIZE, FILL_ICO_SIZE)), master=self)
        self.clear_canvas_btn = tk.Button(self, image=self.clear_img, command=self.clear_canvas)
        self.clear_canvas_btn.place(relx=base_x + offset_x, rely=base_y)
        self.eraser_img = ImageTk.PhotoImage(Image.open('../graphics/utility/eraser.png').
                                             resize((FILL_ICO_SIZE, FILL_ICO_SIZE)), master=self)
        self.eraser_btn = tk.Button(self, image=self.eraser_img, command=self.erase)
        self.eraser_btn.place(relx=base_x + 2*offset_x, rely=base_y)
        self.brush_img = ImageTk.PhotoImage(Image.open('../graphics/utility/brush_size.png').
                                            resize((FILL_ICO_SIZE, FILL_ICO_SIZE)), master=self)
        self.brush_btn = tk.Button(self, image=self.brush_img)
        self.brush_btn.bind(""<Button-1>"", self.popup)
        self.brush_btn.place(relx=base_x, rely=base_y + offset_y)
        self.canvas_bg = None

        self.is_sleep = False

    def brush_change(self, size):
        self.brush_size = size

    def on_label_click(self, index):
        self.color = self.labels[index]['bg']
        self.color_indicator_lbl['bg'] = self.color

    def erase(self):
        self.color = 'white'

    def draw(self, event):
        if not self.is_sleep:
            x1, y1 = (event.x - self.brush_size), (event.y - self.brush_size)
            x2, y2 = (event.x + self.brush_size), (event.y + self.brush_size)
            self.canvas.create_oval(x1, y1, x2, y2, fill=self.color, width=0)
            self.image_draw.ellipse((x1, y1, x2, y2), fill=self.color, width=0)

    def select_brush_size(self, value):
        self.brush_size = int(value)

    def unsleep_canvas(self):
        self.is_sleep = False

    def sleep_canvas(self):
        self.is_sleep = True

    def pour(self):
        if not self.is_sleep:
            self.canvas.delete('all')
            self.canvas['bg'] = self.color
            self.image_draw.rectangle(CANVAS_RECT, width=0, fill=self.color)

    def clear_canvas(self):
        if not self.is_sleep:
            self.canvas.delete('all')
            self.canvas['bg'] = 'white'
            self.image_draw.rectangle(CANVAS_RECT, width=0, fill='white')

    def save_img(self):
        pass

    def popup(self, event):
        self.menu.post(event.widget.winfo_rootx(), event.widget.winfo_rooty())

    def place_paint(self):
        self.clear_canvas()
        self.place(relx=0.05, rely=0.18, relwidth=0.95, relheight=0.85)

    def place_forget_paint(self):
        self.place_forget()

    def set_canvas_image(self, image):
        self.canvas_bg = ImageTk.PhotoImage(image)
        self.clear_canvas()
        self.canvas.create_image(0, 0, anchor=""nw"", image=self.canvas_bg)

    def capture_img(self):
        return self.canvas_img


from tkinter import ttk
import tkinter as tk
from support import is_pin_valid, center
from settings import *


class PinInput(tk.Toplevel):
    def __init__(self):
        super().__init__()

        self.title(""Palack Paradise"")
        self.geometry(f'{PIN_WIDTH}x{PIN_HEIGHT}')
        self.resizable(width=False, height=False)
        self.iconbitmap('../graphics/icons/main_ico.ico')
        self.attributes(""-toolwindow"", True)
        center(self)

        self.check = (self.register(is_pin_valid), ""%P"")
        self.pin_input = ttk.Entry(self, validate=""key"", validatecommand=self.check, font=BASE_FONT)
        self.confirm_btn = tk.Button(self, text=""Подтвердить"", command=self.submit_password, font=BASE_FONT)
        self.password = None

    def submit_password(self):
        if len(self.pin_input.get()) > 0:
            self.password = self.pin_input.get()
            self.destroy()

    def start(self):
        self.pin_input.pack(pady=5)
        self.confirm_btn.pack(pady=10)

    def get_input_pin(self):
        return self.password


class Player:
    def __init__(self, nickname, avatar_image):
        self.nickname = nickname
        self.avatar_image = avatar_image

    def get_nickname(self):
        return self.nickname

    def get_avatar_image(self):
        return self.avatar_image

    def __repr__(self):
        return f""[PLAYER]{self.nickname}[PHOTO]{self.avatar_image[0]}, {self.avatar_image[1]}\n""


import pickle
import tkinter as tk
from tkinter import ttk
from support import center
from settings import *
from PIL import ImageTk
from game_window import GameWindow


class RoomWindow(tk.Toplevel):
    def __init__(self, room, player, conn):
        super().__init__()

        # window
        self.title(""Palack Paradise"")
        self.geometry(f'{ROOM_WIDTH}x{ROOM_HEIGHT}')
        center(self)
        self.iconbitmap('../graphics/icons/main_ico.ico')
        self.resizable(width=False, height=False)
        self.configure(background=ROOM_BG, padx=PADDING, pady=PADDING)
        self.protocol(""WM_DELETE_WINDOW"", self.on_closing)
        self.half_height = HEIGHT_HUB / 2
        self.half_width = WIDTH_HUB / 2
        self.room = room
        self.player = player
        self.room_conn = conn
        self.is_started = False

        def return_pressed(ev):
            self.start_room_click()
        self.bind(""<Return>"", return_pressed)

        """"""
        GUI
        """"""
        s = ttk.Style(self)
        s.configure('Room.TFrame', background=ROOM_FRAME)
        s.configure('My.Treeview', rowheight=65, font=(FONT_NAME, 18), )
        s.map('My.Treeview', background=[('selected', '#B682A5')])
        self.frame = ttk.Frame(self, borderwidth=BORDER, padding=(PADDING, PADDING), style=""Room.TFrame"")
        self.players_view = ttk.Treeview(self.frame, selectmode=""browse"", show='tree', style=""My.Treeview"")
        self.current_players_lbl = ttk.Label(self.frame, font=(FONT_NAME, 15), background=ROOM_FRAME,
                                             text=f""Players {self.room.get_current()}/{self.room.get_size()}"", )
        self.start_game_btn = tk.Button(self.frame, text=""Начать игру"", font=(FONT_NAME, 14),
                                        command=self.start_room_click)
        """"""
        Pre-start
        """"""
        self.players_avatars = {}
        self.table_init()
        self.refresh_player_list()
        self.check_room_status()

    def check_room_status(self):
        if not self.is_started and self.player.get_nickname() != self.room.get_host_name():
            message = f""CHECK_STATUS\r\n{self.room.get_host_player().get_nickname()}""
            self.room_conn.send(pickle.dumps(message))
            response = pickle.loads(self.room_conn.recv(1024))
            if response == ""STARTED"":
                self.is_started = True
                self.start_room()
            elif response == ""DELETED"":
                self.destroy()
        self.after(300, self.check_room_status)

    def clean_table(self):
        for i in self.players_view.get_children():
            self.players_view.delete(i)

    def notify_server_about_start(self):
        message = f""START_ROOM\r\n{self.room.get_host_player().get_nickname()}""
        self.room_conn.send(pickle.dumps(message))
        response = pickle.loads(self.room_conn.recv(1024))
        if response == ""SUCCESS"":
            print(""Room started"")

    def start_room(self):
        self.withdraw()
        game = GameWindow(self.room, self.player, self.room_conn)
        game.start()
        self.wait_window(game)
        self.is_started = False
        self.deiconify()

    def start_room_click(self):
        if self.player.get_nickname() == self.room.get_host_player().get_nickname():
            self.notify_server_about_start()
            self.is_started = True
            self.start_room()

    def table_init(self):
        self.players_view['columns'] = ('nickname', 'host')
        table_width = ROOM_WIDTH * 0.8 * 0.35
        self.players_view.column(""#0"", anchor=tk.CENTER, width=int(2 * table_width / 10))
        self.players_view.column(""nickname"", anchor=tk.CENTER, width=int(3.7 * table_width / 10))
        self.players_view.column(""host"", anchor=tk.CENTER, width=int(1 * table_width / 10))

    def add_items(self, player_list):
        for i, player in enumerate(player_list):
            self.players_avatars[player.get_nickname()] = ImageTk.PhotoImage(player.get_avatar_image()[1].
                                                                             resize(MINI_AVATAR_SIZE),
                                                                             master=self.frame)
            self.players_view.insert('', ""end"", text='', image=self.players_avatars[player.get_nickname()],
                                     values=(player_list[i].get_nickname(),
                                             (""👑"" if self.room.get_host_player().get_nickname() ==
                                             player_list[i].get_nickname() else """")))
        self.current_players_lbl[""text""] = f""Players {self.room.get_current()}/{self.room.get_size()}""

    def refresh(self):
        self.clean_table()
        self.add_items(self.room.get_player_list())

    def refresh_player_list(self):
        if not self.is_started:
            self.room_conn.send(pickle.dumps(f""REFRESH_ROOM\r\n{self.room.get_host_player().get_nickname()}""))
            data = b''
            while True:
                part = self.room_conn.recv(4096)
                data += part
                if len(part) < 4096:
                    break
            players = pickle.loads(data)
            if players != ""NOT_FOUND"":
                self.room.set_player_list(players)
                self.refresh()
        self.after(2000, self.refresh_player_list)

    def get_room(self):
        return self.room

    def placing(self):
        self.frame.place(relx=.5, rely=.5, relwidth=0.8, relheight=0.8, anchor=""center"")
        self.players_view.place(relx=0.05, rely=0.1, relwidth=0.30, relheight=0.80)
        self.current_players_lbl.place(relx=0.2, rely=0.07, anchor=""center"")
        if self.player.get_nickname() == self.room.get_host_name():
            self.start_game_btn.place(relx=0.6, rely=0.15, relheight=0.1, relwidth=0.15, anchor=""center"")

    def start(self):
        self.placing()

    def on_closing(self):
        if self.player.get_nickname() == self.room.get_host_name():
            self.room_conn.send(pickle.dumps(f""DELETE_ROOM\r\n{self.player.get_nickname()}""))
            self.destroy()


""""""
MAIN CONFIG
""""""
BORDER = 0
PADDING = 0
AVATAR_MAX_SIZE = 4194304

""""""
Start room config
""""""
START_WIDTH = 700
START_HEIGHT = 700
PREFERRED_SIZE = (175, 175)
FPS = 120
START_WINDOW_WIDTH = 250
START_WINDOW_HEIGHT = 350
BORDER_SIZE = 4
UI_BACKGROUND_COLOR = '#c3dbd7'
UI_BORDER_COLOR = '#415a77'
NEXT_ICO_SIZE = 17


""""""
Hub WINDOW ui config
""""""
WIDTH_HUB = 950
HEIGHT_HUB = 550
TABLE_WIDTH = 460
TABLE_HEIGHT = 280
TABLE_LEFT = 250
TABLE_TOP = 80
BG_COLOR = '#731ab9'
BG_FRAME_COLOR = '#729ac9'
HUB_FRAME_WIDTH = 750
HUB_FRAME_HEIGHT = 400
FONT_NAME = ""Skellyman""
NICK_FONT_SIZE = 14
NOTIFICATION_FONT_SIZE = 16
BUTTON_WIDTH = 155
OFFSET = 30
BUTTON_HEIGHT = 30
BUTTON_PANEL_TOP = 30
TOP_BUTTON_FONT_SIZE = 16
REFRESH_WIDTH = 90
MINI_PROFILE_LEFT = 30
AVATAR_TOP = 30
NICK_TOP = 210

""""""Create window config""""""
CREATE_WIDTH = 800
CREATE_HEIGHT = 500
CREATE_BG_COLOR = ""#ba5fdf""
NAME_INPUT_FONT_SIZE = 13
SIZE_INPUT_FONT_SIZE = 13
LBL_FONT_SIZE = 14
ALL_FIELDS_HEIGHT = 30
FRAME_COLOR = ""#f2bcef""
FRAME_WIDTH = 650
FRAME_HEIGHT = 400
EYE_ICO_SIZE = 22

""""""Room Window""""""
ROOM_WIDTH = 1100
FRAME_W = 880
FRAME_H = 560
ROOM_HEIGHT = 700
ROOM_BG = ""#9E4EDC""
ROOM_FRAME = ""#C999EE""
MINI_AVATAR_SIZE = (60, 60)

""""""Game""""""
GAME_CANVAS_SIZE = (800, 480)
CANVAS_WIDTH = 800
CANVAS_HEIGHT = 480
CANVAS_RECT = (0, 0, 800, 480)
FILL_ICO_SIZE = 35
BRUSH_ICO_SIZE = 35
START_PROMPT_TIME = 25
START_CANVAS_TIME = 40

""""""Pin input""""""
PIN_WIDTH = 300
PIN_HEIGHT = 150
BASE_FONT = (FONT_NAME, 14)

""""""Result canvas""""""
BASE_OFFSET_Y = 50
CANVAS_W = 792
CANVAS_H = 448
AVATAR_SIZE = (MINI_AVATAR_SIZE[0] + 15, MINI_AVATAR_SIZE[0] + 15)
LEFT_AVATAR_X = CANVAS_W - MINI_AVATAR_SIZE[0] - 15
RIGHT_AVATAR_X = 50
CANVAS_IMG_SIZE = (420, 245)


import os.path
import re
from PIL import Image, ImageTk
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import filedialog
from tkinter import messagebox
from settings import *
from support import center, get_images_from_dir, is_valid
from random import shuffle
from player import Player
import socket
import pickle


class StartWindow(tk.Tk):
    def __init__(self, addr, player=None):
        super().__init__()
        # window
        self.title(""Palack Paradise"")
        self.geometry(f'{START_WIDTH}x{START_HEIGHT}')
        center(self)
        self.iconbitmap('../graphics/icons/main_ico.ico')
        self.configure(background=""#F47983"", padx=0, pady=0)
        self.resizable(width=False, height=False)
        self.half_height = START_HEIGHT / 2
        self.half_width = START_WIDTH / 2
        self.player = player
        self.check_server_addr = addr
        self.protocol(""WM_DELETE_WINDOW"", self.on_closing)

        def return_pressed(ev):
            self.start_game()
        self.bind(""<Return>"", return_pressed)

        """"""
        Pre-load
        """"""
        self.avatars = list(get_images_from_dir('../graphics/avatars').items())
        self.current_avatar_index = 0
        self.next_img = ImageTk.PhotoImage(Image.open('../graphics/utility/next.png').
                                           resize((NEXT_ICO_SIZE, NEXT_ICO_SIZE)), master=self)
        shuffle(self.avatars)

        """"""
        Avatar stuff
        """"""
        # avatar picture
        self.current_PIL_avatar = self.avatars[0]
        self.current_avatar_image = ImageTk.PhotoImage(self.current_PIL_avatar[1], master=self)
        self.current_avatar = ttk.Label(self, image=self.current_avatar_image,
                                        borderwidth=BORDER, padding=(PADDING, PADDING))
        self.next_avatar = ttk.Button(self, image=self.next_img, command=self.change_avatar)

        """"""
        Other
        """"""
        # buttons
        # self.file_button = tk.Button(self, text=""Выбрать файл"", command=self.choose_image, font=(FONT_NAME, 10),
        #                              state=""disabled"")
        self.file_button = tk.Button(self, text=""Выбрать файл"", command=self.choose_image, font=(FONT_NAME, 10))
        # start game btn
        self.create_person_btn = tk.Button(self, font=(FONT_NAME, 12), text=""Начать игру"", command=self.start_game)

        """"""
        Nickname stuff
        """"""
        # nickname entry
        self.check = (self.register(is_valid), ""%P"")
        self.nickname_field = ttk.Entry(self, font=(FONT_NAME, 15), validate=""key"", validatecommand=self.check)
        self.nickname_lbl = ttk.Label(self, text=""Введите ник"", font=(""Skellyman"", 17), background=""#F47983"")

    """"""
    Binding
    """"""
    # image choosing
    def choose_image(self):
        image_file = filedialog.Open(filetypes=[('Image formats', '.jpg .png')]).show()
        if image_file:
            if os.path.getsize(image_file) < AVATAR_MAX_SIZE:
                image = Image.open(image_file).resize(PREFERRED_SIZE)
                real_name = os.path.basename(image_file)
                dest_dir = ""../graphics/avatars/""
                dest_path = dest_dir + real_name
                if os.path.exists(dest_path):
                    ext = os.path.splitext(real_name)[1]
                    name = os.path.splitext(real_name)[0]
                    i = 1
                    while os.path.exists(dest_dir + real_name):
                        real_name = f""{name} ({i}){ext}""
                        i += 1
                dest_path = dest_dir + real_name
                self.current_PIL_avatar = (dest_path, image)
                self.current_PIL_avatar[1].save(dest_path)
                self.current_avatar_image = ImageTk.PhotoImage(self.current_PIL_avatar[1], master=self)
                self.current_avatar.configure(image=self.current_avatar_image)
            else:
                messagebox.showwarning(""Некорректный файл"", ""Выбранный файл имеет слишком\n большой размер(> 4MB)"")

    # taking next photo
    def change_avatar(self):
        if self.current_PIL_avatar not in self.avatars:
            os.remove(self.current_PIL_avatar[0])
        i = self.current_avatar_index + 1 if self.current_avatar_index + 1 < len(self.avatars) else 0
        self.current_avatar_index = i
        self.current_PIL_avatar = self.avatars[i]
        self.current_avatar_image = ImageTk.PhotoImage(self.current_PIL_avatar[1], master=self)
        self.current_avatar.configure(image=self.current_avatar_image)

    """"""
    Placing
    """"""
    # placing
    def placing_components(self):
        # avatar stuff
        self.current_avatar.place(x=self.half_width - 84, y=self.half_height - 250)
        self.file_button.place(x=self.half_width - 60, y=self.half_height - 68, width=125, height=25)
        self.next_avatar.place(x=self.half_width + 66, y=self.half_height - 100)

        # nickname stuff
        self.nickname_lbl.place(x=self.half_width - 69, y=self.half_height - 22)
        self.nickname_field.place(x=self.half_width - 90, y=self.half_height + 14, width=195, height=30)

        # create person btn
        self.create_person_btn.place(x=self.half_width - 75, y=self.half_height + 60, width=165, height=30)

    """"""
    Other stuff
    """"""
    def check_field_fill(self):
        if len(self.nickname_field.get()) > 3 and not re.match(""[ \-_()*]+$"", self.nickname_field.get()):
            if self.current_avatar:
                return True
        return False

    def get_created_player(self):
        return self.player

    def check_nickname_availability(self, nickname):
        check_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            check_socket.connect(self.check_server_addr)
            check_socket.send(pickle.dumps(f""CHECKING_NICK\r\n{nickname}""))
            response = pickle.loads(check_socket.recv(1024))
        except ConnectionRefusedError:
            messagebox.showerror(""Error"", ""Server not started"")
            return ""error""
        except TimeoutError:
            messagebox.showerror(""Error"", ""Wrong IP"")
        finally:
            check_socket.close()

        if response:
            if response == ""AVAILABLE"":
                return ""available""
            else:
                return ""unavailable""

    """"""
    Start
    """"""
    # after clicking start btn
    def start_game(self):
        if self.check_field_fill():
            result = self.check_nickname_availability(self.nickname_field.get())
            if result == ""available"":
                # self.player = Player(self.nickname_field.get(), self.current_PIL_avatar[0])
                self.player = Player(self.nickname_field.get(), self.current_PIL_avatar)
                self.destroy()
            elif result == ""unavailable"":
                messagebox.showwarning(""Nick warning"", ""Nickname is unavailable!"")
        else:
            messagebox.showerror(""Input error"", ""Nick should be 4-15 symbols"")

    # start of this window
    def start(self):
        self.placing_components()

    def on_closing(self):
        if self.current_PIL_avatar not in self.avatars:
            os.remove(self.current_PIL_avatar[0])
        self.destroy()


from os import walk
from PIL import Image
from settings import *
import re
import socket


def center(win):
    win.update_idletasks()
    width = win.winfo_width()
    frm_width = win.winfo_rootx() - win.winfo_x()
    win_width = width + 2 * frm_width
    height = win.winfo_height()
    titlebar_height = win.winfo_rooty() - win.winfo_y()
    win_height = height + titlebar_height + frm_width
    x = win.winfo_screenwidth() // 2 - win_width // 2
    y = win.winfo_screenheight() // 2 - win_height // 2
    win.geometry('{}x{}+{}+{}'.format(width, height, x, y))
    win.deiconify()


def get_images_from_dir(dir_name):
    surface_list = {}
    for _, __, img_files in walk(dir_name):
        for img in img_files:
            full_path = dir_name + '/' + img
            image_surf = Image.open(full_path)
            image_surf = image_surf.resize(PREFERRED_SIZE)
            image_surf.save(full_path)
            surface_list.update({full_path: image_surf})
    return surface_list


def is_pin_valid(new_val):
    if not new_val:
        return True
    result = re.match(""[0-9a-zA-Z_\b]+$"", new_val) is not None
    if not result or len(new_val) > 8:
        return False
    return True


def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except TimeoutError:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP


def is_description_valid(new_val):
    if not new_val:
        return True
    result = re.match(""[0-9a-zA-Zа-яА-Я_\-() ]+$"", new_val) is not None
    if not result or len(new_val) > 25:
        return False
    return True


def is_prompt_valid(new_val):
    if not new_val:
        return True
    result = re.match(""[0-9a-zA-Zа-яА-Я()\-=<>,/?.\""{}+!@$;:&*_`% ]+$"", new_val) is not None
    if not result or len(new_val) > 50:
        return False
    return True


def is_valid(new_val):
    if not new_val:
        return True
    result = re.match(""[0-9a-zA-Z_\-*() ]+$"", new_val) is not None
    if not result or len(new_val) > 15:
        return False
    return True


from tkinter import ttk


class Timer:
    def __init__(self, master, time_ms, mode):
        self.master = master
        self.time = 0
        self.time_ms = time_ms
        self.mode = mode
        if mode == ""prompt"":
            master.prompt_input.state(['!disabled'])
        else:
            master.paint.canvas.configure(state=""normal"")
        self.is_timer_end = False
        self.progressbar = ttk.Progressbar(self.master, orient=""horizontal"", length=200, mode=""determinate"")
        self.progressbar.pack(pady=10)

    def start_timer(self):
        self.progressbar[""maximum""] = self.time_ms * 10
        self.time += 1
        self.progressbar[""value""] = self.time * 2
        if self.time < self.time_ms * 2 * 2.5:
            self.master.after(200, self.start_timer)
        elif self.time == self.time_ms * 2 * 2.5:
            self.is_timer_end = True
            self.callback(self.master)

    def callback(self, master):
        result = None
        self.progressbar.pack_forget()
        if self.mode == ""prompt"":
            master.prompt_input.state(['disabled'])
            result = master.prompt_input.get()
        elif self.mode == ""canvas"":
            master.paint.canvas.configure(state=""disabled"")
            result = master.paint.capture_img()
        master.after_timer(result, self.mode)
"
8bXid9Vw,Untitled,35657,C++,Monday 15th of May 2023 06:56:46 AM CDT,"
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string.h>

using namespace std;

struct contact {
	char name[100];
	char mobile_phone[20];
	char home_phone[20];
	char work_phone[20];
};



class phone_book {

public:

	phone_book();

	phone_book(int max_number);

	phone_book(contact arr[], int arr_size);

	void AddContact(const char name[], const char mobile_phone[], const char home_phone[], const char work_phone[]) {
		if (contact_number == max_contact_number) {
			cout << ""The contact cannot be added"" << endl;
			return;
		}
		store[contact_number] = new contact{};
		strcpy(store[contact_number]->name, name);
		strcpy(store[contact_number]->mobile_phone, mobile_phone);
		strcpy(store[contact_number]->home_phone, home_phone);
		strcpy(store[contact_number]->work_phone, work_phone);
		contact_number++;
	}

	void DelContact(const char name[]);

	void FindContactName(const char name[]);

	void ShowAllContacts();

	~phone_book();
	

private:
	contact** store;
	int contact_number;
	int max_contact_number;
};

int main() { // для проверки функционала

	phone_book my_store; // для проверки конструктора по умолчанию

	//phone_book my_store(50); // для проверки конструктора для одного параметра

	//contact some_contacts[]{ {""Ivan"", ""+79111111111"", ""111111"", ""121212""}, {""Zhenya"", ""+79111111333"", ""111133"", ""121233""}}; // для проверки конструктора для двух параметров (закомментировать первые два добавления контакта)

	//phone_book my_store(some_contacts, 2); // для проверки конструктора для двух параметров

	my_store.AddContact(""Ivan"", ""+79111111111"", ""111111"", ""121212"");
	my_store.AddContact(""Zhenya"", ""+79111111333"", ""111133"", ""121233"");
	my_store.AddContact(""Galya"", ""+79115511333"", ""166133"", ""127733"");
	my_store.AddContact(""Olya"", ""+79115511333"", ""166133"", ""127733"");

	my_store.ShowAllContacts();

	my_store.DelContact(""Zhenya"");

	my_store.ShowAllContacts();

	my_store.AddContact(""Zhenya"", ""+79111111333"", ""111133"", ""121233"");

	my_store.FindContactName(""Galya"");

}"
QdDjdc0T,good_or_bad_hash,giGii,C++,Monday 15th of May 2023 06:30:03 AM CDT,"#include <unordered_map>
#include <string>
#include <cassert>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

struct GoodHasher {
    size_t operator() (std::pair<size_t, size_t> from_to) const {
        return from_to.first * 37 + from_to.second * 37 * 37 + (from_to.first + from_to.second) * 37 * 37 * 37;
    }
};
struct BadHasher {
    size_t operator() (std::pair<size_t, size_t> from_to) const {
        return from_to.first * 37 + from_to.second * 37 * 37;
    }
};

int main() {
    GoodHasher good;
    BadHasher bad;

    vector<pair<size_t, size_t>> vec_pair_sizet;

    size_t n, limit;
    cin >> n >> limit;

    for (size_t i = 0; i < n; ++i) {
        for (size_t j = i + 1; j <= n; ++j) {
            vec_pair_sizet.push_back({i, j});
            vec_pair_sizet.push_back({j, i});
        }
    }

    cout << vec_pair_sizet.size() << endl;

    sort(vec_pair_sizet.begin(), vec_pair_sizet.end());

    cout << limit << endl;

    unordered_map<size_t, size_t> for_good_hasher;
    unordered_map<size_t, size_t> for_bad_hasher;

    for (const auto& p : vec_pair_sizet) {
        auto ghash = good(p);
        if (for_good_hasher.count(ghash) == 0) {
            for_good_hasher[ghash] = 0;
        }
        ++for_good_hasher.at(ghash);

        auto bhash = bad(p);
        if (for_bad_hasher.count(bhash) == 0) {
            for_bad_hasher[bhash] = 0;
        }
        ++for_bad_hasher.at(bhash);
    }

    size_t good_hashes = 0;

    for (const auto& [k, v] : for_good_hasher) {
        if (v >= limit) {
            ++good_hashes;
        }
    }

    size_t bad_hashes = 0;
    for (const auto& [k, v] : for_bad_hasher) {
        if (v >= limit) {
            ++bad_hashes;
        }
    }

    cout << ""for good hasher buckets with ""s << limit << "" and more collisions = ""s << good_hashes << endl;
    cout << ""for bad hasher buckets with ""s << limit << "" and more collisions = ""s << bad_hashes << endl;
}"
SF14DQUw,Untitled,Caesar9988,MySQL,Monday 15th of May 2023 06:21:58 AM CDT,"SELECT * FROM `employees`
WHERE `department_id` = 4 AND `salary` >= 1000
ORDER BY `id` ASC; "
PwhidFwZ,Untitled,Caesar9988,MySQL,Monday 15th of May 2023 06:11:11 AM CDT,"CREATE VIEW `top_paid_employee` AS
SELECT * FROM `employees`
ORDER BY `salary` DESC
LIMIT 1;

SELECT * FROM `top_paid_employee`;"
qvjvTzEg,division.py,Abhisek92,Python,Monday 15th of May 2023 06:08:28 AM CDT,"def divide(a, b):
    if a == 0:
        return 0
    if b == 1:
        return a
    if b == -1:
        return -a

    negative = (a < 0) ^ (b < 0)

    # Convert a and b to positive
    a = abs(a)
    b = abs(b)

    quotient = 0
    while a >= b:
        shift = 0
        while a >= (b << shift):
            shift += 1
        shift -= 1
        quotient += (1 << shift)
        a -= (b << shift)
    if negative:
        quotient = -quotient
    return quotient"
V0fXffFB,Test map drawing,SirEdvin,Lua,Monday 15th of May 2023 06:04:58 AM CDT,"local colorPalette = {
    colors.white,
    colors.orange,
    colors.magenta,
    colors.lightBlue,
    colors.yellow,
    colors.lime,
    colors.pink,
    colors.gray,
    colors.lightGray,
    colors.cyan,
    colors.purple,
    colors.blue,
    colors.brown,
    colors.green,
    colors.red,
    colors.black,
}


local function find_closest_color(targetColor)
    local index = 0
    local result = {}
    for _, color in pairs(colorPalette) do
        red, green, blue = colors.unpackRGB(color)
        index = index + 1
        result[index] = {
            dist=math.sqrt(
                (red - targetColor.red) ^ 2 + (green - targetColor.green) ^ 2 + (blue - targetColor.blue) ^ 2
            ),
            color=color
        }
    end
    table.sort(result,function(a,b) return a.dist < b.dist end)
    return result[1].color
end


local monitor = peripheral.wrap(""monitor_0"")
local cartographer = peripheral.wrap(""right"")
local mapData = cartographer.extractMapDetails(""left"", 1)
local colorCodes = {}
for index, colorCode in pairs(cartographer.getColorMap()) do
    colorCodes[index] = find_closest_color(colorCode)
end


term.redirect(monitor)
monitor.clear()
monitor.setCursorPos(1, 1)
monitor.setTextScale(0.5)
for x=0,128 do
  for y = 0, 128 do
    paintutils.drawPixel(x, y, colorCodes[mapData.colors[x + y * 128]])
  end
end"
GmnKqnEv,Untitled,pacho_the_python,Python,Monday 15th of May 2023 06:02:02 AM CDT,"from django.db import models


class Library(models.Model):
    LIBRARY_NAME_MAX_LEN = 30

    library_name = models.CharField(
         max_length=LIBRARY_NAME_MAX_LEN,
         null=False,
         blank=False,
         verbose_name=""Library Name""
    )

    def __str__(self):
        return self.library_name

    class Meta:
        verbose_name_plural = 'Library'


class Book(models.Model):
    TITLE_MAX_LEN = 30
    AUTHOR_MAX_LEN = 30
    DESCRIPTION_LEN = 300

    title = models.CharField(
        max_length=TITLE_MAX_LEN,
        null=False,
        blank=False,
    )

    pages = models.PositiveIntegerField(
        null=False,
        blank=False,
    )

    description = models.TextField(
        max_length=DESCRIPTION_LEN,
        null=False,
        blank=False,
    )

    author = models.CharField(
        max_length=AUTHOR_MAX_LEN,
        null=False,
        blank=False
    )

    library = models.ForeignKey(
        Library,
        on_delete=models.CASCADE,
        null=True,
        blank=True
    )

    def __str__(self):
        return self.title

    class Meta:
        verbose_name_plural = 'Book'
"
7JUuzuue,Existe_triángulo,Rodripelto,Python,Monday 15th of May 2023 06:01:42 AM CDT,"def datos():
  lados = []
  while len(lados) < 3:
    try:
      lados.append(int(input(""¿Cuál es la longitud del lado "" + str(len(lados)+1))))
    except:
      print(""La longitud tiene que ser un número válido"")
  return lados

def comprobar_triangulo(lados):
  for i in range(3):
    if not (lados[i-2] <= lados[i-1] + lados[i]):
      return False
  return True

def perimeto(lados):
  return sum(lados)
 
def main():
  triangulo = datos()
  if comprobar_triangulo(triangulo):
    print(""El perimeto del triangulo es:"",perimeto(triangulo ))
  else:
    print(""Con esa longitud de los lados no se puede construir un triángulo"")
   
main()"
cPKFyMST,Untitled,Caesar9988,MySQL,Monday 15th of May 2023 06:00:53 AM CDT,"UPDATE `employees`
SET `salary` = `salary` + 100
WHERE `job_title` = 'Manager';

SELECT `salary` FROM `employees`;"
mP398qXm,data573,TestGuy1,JSON,Monday 15th of May 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'aba494764e873fe875c1ca25b9e31ee660ade9fa384f8dc76d935a324e0355603191af3b02e83007a2ec0f94b3cae4db2fbe7f098bc78fb5ec25e6b5c22a32637c6b46deed4addf90c07f06018b593d26c06a142630fb67b74b0c0913c66844f3f5578c238d02cf9cccd07724459c0524f9608f1dc7cc2d58005a1854f6c681d',
  otherdata: [
    '9be54ba14fe75084bf5ade2b85d431a0',
    'e8de001a257866dfef23747af1dcd6d2',
    '70e685ad3cb048e484725215331abdb1',
    'bf5e796ece448faffb141de6d6b2ab54',
    '522abf6d2cbd9658842a24a3cedec35b',
    'e4ec44951ed4b18493dbe6cc0e1dd942',
    '3c5e16d806889a3309dcf4c047b94b5d',
    '9c26feea620411543a778cd421d0943b'
  ]
}"
tiUS8urf,Pet Simulator X | by esohasl,Noctural,Lua,Monday 15th of May 2023 05:58:27 AM CDT,"-- Rafa
loadstring(game:HttpGet(""https://raw.githubusercontent.com/Rafacasari/roblox-scripts/main/psx.lua""))()

-- Huge Games
loadstring(game:HttpGet(""https://hugegames.io/psx""))()"
rPGTfFDH,Quickslots,NachoMan,C#,Monday 15th of May 2023 05:54:05 AM CDT,"if (Input.anyKeyDown)
{
	bool isNothingSelected = true;
	bool isAnyKeyPressed = false;
	int oldQuickSlot = selectedQuickslot;

	for (int i = (int)KeyCode.Alpha1; i <= (int)KeyCode.Alpha9; ++i)
	{
		if (Input.GetKeyDown((KeyCode)i))
		{
			UnselectItem();
			isNothingSelected = selectedQuickslot == (i - (int)KeyCode.Alpha1);
			selectedQuickslot = i - (int)KeyCode.Alpha1;
			isAnyKeyPressed = true;
		}
	}
	if (Input.GetKeyDown(KeyCode.Alpha0))
	{
		UnselectItem();
		isNothingSelected = selectedQuickslot == 9;
		selectedQuickslot = 9;
		isAnyKeyPressed = true;
	}
	if (isAnyKeyPressed)
	{
		if (isNothingSelected)
		{
			EquipBareHands();
		}
		GameObject equipedGameObject = GetCurrentQuickslotItemGameObject();
		if(equipedGameObject != null)
        {
			EquipNewItem(equipedGameObject);
		}
	}
}"
jskPff6z,lab16,_who___,C,Monday 15th of May 2023 05:46:06 AM CDT,"#include <stdio.h>
#include <locale.h>

int main()
{
	int a = 0;
	double n = 0;
	scanf_s(""%lf"", &n);

	unsigned long long c = *((unsigned long long*) & n);
	for (int i = sizeof(double) * 8 - 1; i >= 0; i--)
	{
		printf(""%d"", ((c >> i) & 1));
		a += ((c >> i) & 1);
	}
	printf(""\n%d\n"", a);

	long b = 0;
	a = 0;
	scanf_s(""%ld"", &b);

	c = *((unsigned long long*) & b);
	for (int i = sizeof(long) * 8 - 1; i >= 0; i--)
	{
		printf(""%d"", ((c >> i) & 1));
		a += ((c >> i) & 1);
	}
	printf(""\n%d\n"", a);
}"
3stCQbr0,Untitled,Mr__K,SQL,Monday 15th of May 2023 05:42:30 AM CDT,"SELECT Product.Name, Category.Name
FROM Product
LEFT JOIN Product_Category ON Product.Id = Product_Category.ProductId
LEFT JOIN Category ON Product_Category.CategoryId = Category.Id
ORDER BY Product.Name"
4Y656sGS,Untitled,Caesar9988,MySQL,Monday 15th of May 2023 05:41:59 AM CDT,"SELECT 
`id`, 
CONCAT(`first_name`,' ',`last_name`) AS 'full_name',
`job_title`,
`salary`
FROM `employees`
WHERE `salary` > 1000.00
ORDER BY `id`;"
HpVYJcnL,Untitled,dolomite42,C,Monday 15th of May 2023 05:39:51 AM CDT,"disregard previously sent test india.feely@grangeprojects.co.uk , thank you"
vgNkmb33,Untitled,dolomite42,C,Monday 15th of May 2023 05:39:27 AM CDT,"This is a test india.feely@grangeprojects.co.uk , hello"
H2uixQYD,Audio VU meter,Madwin74,C#,Monday 15th of May 2023 05:32:39 AM CDT,"/***********************************************************
 **                                                       **
 **   Codesnippets written by Madwin for MMP 2023         **
 **                                                       **
 **   Not to be used freely. the code still has errors    **
 **   It's intended to be used as starting point.         **
 **   Code has not been checked and might still need      **
 **   (a lot of) work.                                    **
 **                                                       **
 **   © MadMedia Productions 2023                         **
 **                                                       **
 ***********************************************************/
 

using System;
using System.Drawing;
using System.Windows.Forms;
using NAudio.Wave;

namespace AudioVUMeter
{
    public partial class MainForm : Form
    {
        private const int NumChannels = 2; // Stereo
        private const int NumBars = 20; // Number of LED bars
        private const int BarSpacing = 2; // Spacing between LED bars

        private BufferedWaveProvider bufferedWaveProvider;
        private readonly Timer timer;
        private float[] peakValues;

        public MainForm()
        {
            InitializeComponent();

            // Create the buffered wave provider
            bufferedWaveProvider = new BufferedWaveProvider(new WaveFormat());

            // Initialize the peak values array
            peakValues = new float[NumBars];

            // Set up the timer
            timer = new Timer();
            timer.Interval = 20; // Update every 20 milliseconds
            timer.Tick += Timer_Tick;

            // Populate audio source options
            foreach (var waveInDevice in WaveIn.DeviceCount)
            {
                comboBoxAudioSources.Items.Add(waveInDevice);
            }

            // Select the first audio source by default
            if (comboBoxAudioSources.Items.Count > 0)
            {
                comboBoxAudioSources.SelectedIndex = 0;
            }
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            // Start the timer
            timer.Start();
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Stop and dispose the timer
            timer.Stop();
            timer.Dispose();
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            // Check if there is available data in the buffered wave provider
            if (bufferedWaveProvider.BufferedBytes >= bufferedWaveProvider.WaveFormat.AverageBytesPerSecond / 10)
            {
                // Read the available data from the buffered wave provider
                byte[] buffer = new byte[bufferedWaveProvider.WaveFormat.AverageBytesPerSecond / 10];
                int bytesRead = bufferedWaveProvider.Read(buffer, 0, buffer.Length);

                // Calculate the peak values for each channel
                for (int i = 0; i < bytesRead / sizeof(float); i += NumChannels)
                {
                    for (int channel = 0; channel < NumChannels; channel++)
                    {
                        float value = BitConverter.ToSingle(buffer, i + channel * sizeof(float));
                        peakValues[i / NumChannels] = Math.Max(peakValues[i / NumChannels], value);
                    }
                }
            }

            // Refresh the display
            vuMeterDisplay.Refresh();
        }

        private void vuMeterDisplay_Paint(object sender, PaintEventArgs e)
        {
            Graphics graphics = e.Graphics;
            Rectangle displayArea = vuMeterDisplay.ClientRectangle;

            // Calculate the width and height of each LED bar
            int barWidth = (displayArea.Width - (NumBars - 1) * BarSpacing) / NumBars;
            int barHeight = displayArea.Height;

            // Draw each LED bar
            for (int i = 0; i < NumBars; i++)
            {
                // Calculate the rectangle for the current LED bar
                Rectangle barRect = new Rectangle(i * (barWidth + BarSpacing), displayArea.Top, barWidth, barHeight);

                // Calculate the fill percentage based on the peak value
                float fillPercentage = peakValues[i];

                // Calculate the height of the filled portion of the LED bar
                int fillHeight = (int)(fillPercentage * barHeight);

                // Calculate the color for the filled portion
                Color fillColor = Color.FromArgb((int)(
                    fillPercentage * 255), Color.Red);

            // Fill the LED bar
            graphics.FillRectangle(new SolidBrush(fillColor), barRect);

            // Draw the border of the LED bar
            graphics.DrawRectangle(Pens.Black, barRect);
        }
    }

    private void comboBoxAudioSources_SelectedIndexChanged(object sender, EventArgs e)
    {
        // Stop the current audio source, if any
        if (bufferedWaveProvider != null)
        {
            bufferedWaveProvider.ClearBuffer();
            bufferedWaveProvider = null;
        }

        // Create a new audio source based on the selected index
        int selectedDeviceIndex = comboBoxAudioSources.SelectedIndex;
        if (selectedDeviceIndex >= 0 && selectedDeviceIndex < WaveIn.DeviceCount)
        {
            WaveIn waveIn = new WaveIn();
            waveIn.DeviceNumber = selectedDeviceIndex;
            waveIn.WaveFormat = new WaveFormat();

            bufferedWaveProvider = new BufferedWaveProvider(waveIn.WaveFormat);
            bufferedWaveProvider.BufferDuration = TimeSpan.FromSeconds(1); // Set buffer duration to 1 second
            bufferedWaveProvider.DiscardOnBufferOverflow = true;

            waveIn.DataAvailable += WaveIn_DataAvailable;
            waveIn.StartRecording();
        }
    }

    private void WaveIn_DataAvailable(object sender, WaveInEventArgs e)
    {
        if (bufferedWaveProvider != null)
        {
            bufferedWaveProvider.AddSamples(e.Buffer, 0, e.BytesRecorded);
        }
    }
}

}



/*
There's a `comboBoxAudioSources` control, which allows the user to select 
the audio source for display. We populate the combo box with the available 
audio input devices using the `WaveIn.DeviceCount` property.

When the user selects a different audio source, the `comboBoxAudioSources_SelectedIndexChanged` event handler is triggered. 
It stops the current audio source (if any), clears the buffer, and creates a 
new audio source based on the selected index. The `WaveIn` class is used to 
capture audio data from the selected device, and the `WaveIn_DataAvailable` event 
handler is responsible for adding the available samples to the `bufferedWaveProvider`
 for processing.

Remember to wire up the `comboBoxAudioSources_SelectedIndexChanged` event handler 
to the `SelectedIndexChanged` event of the combo box in the form designer or 
programmatically.
*/

using System;
using System.Drawing;
using System.Windows.Forms;
using CSCore;
using CSCore.CoreAudioAPI;
using CSCore.SoundIn;

namespace AudioVUMeter
{
    public partial class MainForm : Form
    {
        private const int NumChannels = 2; // Stereo
        private const int NumBars = 20; // Number of LED bars
        private const int BarSpacing = 2; // Spacing between LED bars

        private WasapiCapture capture;
        private float[] peakValues;

        public MainForm()
        {
            InitializeComponent();

            // Initialize the peak values array
            peakValues = new float[NumBars];
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            // Populate audio source options
            foreach (var device in MMDeviceEnumerator.EnumerateDevices(DataFlow.Capture, DeviceState.Active))
            {
                comboBoxAudioSources.Items.Add(device);
            }

            // Select the first audio source by default
            if (comboBoxAudioSources.Items.Count > 0)
            {
                comboBoxAudioSources.SelectedIndex = 0;
            }
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Stop and dispose the capture
            if (capture != null)
            {
                capture.Stop();
                capture.Dispose();
            }
        }

        private void comboBoxAudioSources_SelectedIndexChanged(object sender, EventArgs e)
        {
            // Stop the current capture, if any
            if (capture != null)
            {
                capture.Stop();
                capture.Dispose();
                capture = null;
            }

            // Create a new capture based on the selected audio source
            int selectedDeviceIndex = comboBoxAudioSources.SelectedIndex;
            if (selectedDeviceIndex >= 0 && selectedDeviceIndex < comboBoxAudioSources.Items.Count)
            {
                MMDevice selectedDevice = (MMDevice)comboBoxAudioSources.SelectedItem;
                capture = new WasapiCapture(selectedDevice);

                // Set up event handlers
                capture.DataAvailable += Capture_DataAvailable;
                capture.Initialize();

                // Start the capture
                capture.Start();
            }
        }

        private void Capture_DataAvailable(object sender, WaveInEventArgs e)
        {
            // Calculate the peak values for each channel
            for (int i = 0; i < e.BytesRecorded / sizeof(float); i += NumChannels)
            {
                for (int channel = 0; channel < NumChannels; channel++)
                {
                    float value = BitConverter.ToSingle(e.Buffer, i + channel * sizeof(float));
                    peakValues[i / NumChannels] = Math.Max(peakValues[i / NumChannels], value);
                }
            }

            // Refresh the display
            vuMeterDisplay.Refresh();
        }

        private void vuMeterDisplay_Paint(object sender, PaintEventArgs e)
        {
            Graphics graphics = e.Graphics;
            Rectangle displayArea = vuMeterDisplay.ClientRectangle;

            // Calculate the width and height of each LED bar
            int barWidth = (displayArea.Width - (NumBars - 1) * BarSpacing) / NumBars;
            int barHeight = displayArea.Height;

            // Draw each LED bar
            for (int i = 0; i < NumBars; i++)
            {
                // Calculate the rectangle for the current LED bar
                Rectangle barRect = new Rectangle(i * (barWidth + BarSpacing), displayArea.Top, barWidth, barHeight);

                // Calculate the fill percentage based on the peak value
                float fillPercentage = peakValues[i];

                // Calculate the height of the filled portion of the LED bar
                int fillHeight = (int)(fillPercentage * barHeight);

                // Calculate the color for the filled portion
                Color fillColor = Color.FromArgb((int)(fillPercentage * 255), Color.Red);

                // Fill the LED bar
                graphics.FillRectangle(new SolidBrush(fillColor), barRect);

                // Draw the border of the LED bar
                graphics.DrawRectangle(Pens.Black, barRect);
            }
        }
    }
}

/*
In this updated version, we use the CSCore library to capture audio data from 
the selected audio source. We populate the comboBoxAudioSources combo box with 
the active audio capture devices using the MMDeviceEnumerator.EnumerateDevices 
method.

When the user selects a different audio source, the 
comboBoxAudioSources_SelectedIndexChanged event handler is triggered. It stops 
the current capture (if any), disposes of the resources, and creates a new capture 
based on the selected audio source using the WasapiCapture class. We set up the 
DataAvailable event handler to calculate the peak values for each channel and 
update the VU meter display.

Remember to wire up the comboBoxAudioSources_SelectedIndexChanged event handler 
to the SelectedIndexChanged event of the combo box in the form designer or 
programmatically.

This updated code should allow you to choose the audio source you want to 
isplay in the VU meter using the CSCore library.
*/"
zhc0kp5s,Untitled,Caesar9988,MySQL,Monday 15th of May 2023 05:28:06 AM CDT,"SELECT `id`, `first_name`, `last_name`, `job_title`
FROM `employees`
ORDER BY `id` ASC;"
t7w6tFNA,Untitled,Caesar9988,MySQL,Monday 15th of May 2023 05:22:06 AM CDT,"CREATE DATABASE IF NOT EXISTS `hotel`; 
USE `hotel`;

CREATE TABLE departments (
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50)
);

INSERT INTO departments(name) VALUES('Front Office'), ('Support'), ('Kitchen'), ('Other');

CREATE TABLE employees (
	id INT PRIMARY KEY AUTO_INCREMENT,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	job_title VARCHAR(50) NOT NULL,
	department_id INT NOT NULL,
	salary DOUBLE NOT NULL,
	CONSTRAINT `fk_department_id` FOREIGN KEY (`department_id`) REFERENCES `departments` (`id`)
);

INSERT INTO `employees` (`first_name`,`last_name`, `job_title`,`department_id`,`salary`) VALUES
	('John', 'Smith', 'Manager',1, 900.00),
	('John', 'Johnson', 'Customer Service',2, 880.00),
	('Smith', 'Johnson', 'Porter', 4, 1100.00),
	('Peter', 'Petrov', 'Front Desk Clerk', 1, 1100.00),
	('Peter', 'Ivanov', 'Sales', 2, 1500.23),
	('Ivan' ,'Petrov', 'Waiter', 3, 990.00),
	('Jack', 'Jackson', 'Executive Chef', 3, 1800.00),
	('Pedro', 'Petrov', 'Front Desk Supervisor', 1, 2100.00),
	('Nikolay', 'Ivanov', 'Housekeeping', 4, 1600.00);
	

	
CREATE TABLE rooms (
	id INT PRIMARY KEY AUTO_INCREMENT,
	`type` VARCHAR(30)
);

INSERT INTO rooms(`type`) VALUES('apartment'), ('single room');

CREATE TABLE clients (
	id INT PRIMARY KEY AUTO_INCREMENT,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	room_id INT NOT NULL,
    CONSTRAINT fk_clients_rooms
    FOREIGN KEY (room_id)
    REFERENCES rooms(id)
);

INSERT INTO clients(`first_name`,`last_name`,`room_id`) 
VALUES('Pesho','Petrov', 1),('Gosho','Georgiev', 2),
('Mariya','Marieva', 2), ('Katya','Katerinova', 1), ('Nikolay','Nikolaev', 2);"
sALtnnM7,PA Payment Message - Multiple,luvariox,HTML 5,Monday 15th of May 2023 05:21:30 AM CDT,"<p>Hello, congratulations on successful Political Assassination. The earning have been split and sent.</p>
<ol>
<li><a href=""https://www.torn.com/factions.php?step=your#/tab=crimes&crimeID=11074590"">Successful PA on 15/04/23</a></li>
<li><a href=""https://www.torn.com/factions.php?step=your#/tab=crimes&crimeID=11098196"">Successful PA on 23/04/23</a></li>
<li><a href=""https://www.torn.com/factions.php?step=your#/tab=crimes&crimeID=11121717"">Successful PA on 01/05/23</a></li>
</ol>
<p>added to your faction bank, in following manner -</p>
<p></p>
<table width=""680"" height=""162"">
<tbody>
<tr>
<td style=""text-align: center;""><strong>Placed</strong></td>
<td style=""text-align: center;""><strong>Name</strong></td>
<td style=""text-align: center;""><strong>Percentage</strong></td>
<td style=""text-align: center;""><strong>Payment</strong></td>
</tr>
<tr>
<td style=""text-align: center;"">1st</td>
<td>krazy_azzhole</td>
<td style=""text-align: center;"">35</td>
<td style=""text-align: right;"">$192,500,000</td>
</tr>
<tr>
<td style=""text-align: center;"">2nd</td>
<td>iPanda</td>
<td style=""text-align: center;"">25</td>
<td style=""text-align: right;"">$137,500,000</td>
</tr>
<tr>
<td style=""text-align: center;"">3rd</td>
<td>MeadowEU</td>
<td style=""text-align: center;"">20</td>
<td style=""text-align: right;"">$110,000,000</td>
</tr>
<tr>
<td style=""text-align: center;"">4th</td>
<td>Shorn</td>
<td style=""text-align: center;"">15</td>
<td style=""text-align: right;"">$82,500,000</td>
</tr>
<tr>
<td style=""text-align: center;"">5th</td>
<td>Faction</td>
<td style=""text-align: center;"">5</td>
<td style=""text-align: right;"">$27,500,000</td>
</tr>
<tr>
<td></td>
<td style=""text-align: center;""><strong>Total</strong></td>
<td style=""text-align: center;"">100</td>
<td style=""text-align: right;"">$550,000,000</td>
</tr>
</tbody>
</table>
<p></p>
<p>Reach out to any bankers if you wish to withdraw.</p>
<p>Thank you.</p>

"
4rBG7FbR,Health Registration Java,4rl3fd,Java,Monday 15th of May 2023 05:06:40 AM CDT,"import java.util.Scanner; // For Inputs
import java.io.File;  // For File Creation
import java.io.IOException;  // For error handling
import java.util.Random;

import java.time.LocalDateTime;  // 
import java.time.format.DateTimeFormatter;  // for getting date registered

import java.util.ArrayList;

import java.text.SimpleDateFormat;  
import java.util.Date; 
import java.io.FileWriter;   




public class Main
{
    public static String LastName, FirstName, MiddleName= """"; // Name Info. Middle Name is Optional
		public static boolean HasMiddleName = false;
		
		public static String Alphabet[] = {""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};
		public static String Numbers[] = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9""};
		public static String UserID; // Format = LLNL-NNN
		
		public static String DOB, ContactNo, Address; // general info
		
		public static String userinput;
		
		
		
		public static String Conditions[] = {"""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""",""""};
		public static String Medications[] = {"""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""",""""};
		public static int NOC =0; // number of conditions
		public static int NOM =0; // number of Medications
		public static String Allergies[] = {"""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""","""",""""};
		public static int NOA = 0; //number of Allergies
		
		public static String BT[] ={""O+"", ""O-"", ""A+"", ""A-"", ""AB+"", ""AB-"", ""B+"", ""B-""};
		public static boolean legit = false; //to see if the user's bloodtype is equal to any the above
		public static String BloodType= """", Donor; // Donor is yes or no question
		
		public static String AdditionalInfo= """";
		
		public static String CompanyName = ""PAYONG CORPORATION"", Branch = ""LAS PIÑAS PHILIPPINES BRANCH"";
		
		public static void GetData()throws Exception{
		    Scanner ir = new Scanner (System.in);
		    System.out.println(""<<<<< "" + CompanyName + "" MEDICAL ID REGISTRATION SYSTEM >>>>>"");
		System.out.println(""      "" + Branch);
		
		System.out.print(""\nPlease Enter Your Last Name: "");
		LastName = ir.nextLine ();
		System.out.print(""\nPlease Enter Your First name: "");
		FirstName = ir.nextLine ();
		System.out.print(""\nWould You Like to Enter Your Middle Name? "");
		userinput = ir.nextLine ();
		if(userinput.equalsIgnoreCase(""Y"") || userinput.equalsIgnoreCase(""YES"")) {
		    System.out.print(""\nPlease Enter Your Middle name: "");
		    MiddleName = ir.nextLine ();
		}
		System.out.print(""\n\nPlease Enter Your Date of Birth(MM/DD/YYYY): "");
		DOB = ir.nextLine ();
		System.out.print(""\nPlease Enter Your Contact No.: +63 "");
		ContactNo = ir.nextLine ();
		System.out.print(""\nPlease Enter Your Home Address: "");
		Address = ir.nextLine ();
		System.out.print(""\n"");
		System.out.print(""Please Enter Any Known Condition(type DONE when finished): "");
		while(!""DONE"".equalsIgnoreCase(userinput)){
		    userinput ="""";
		    userinput = ir.nextLine ();
		    Conditions[NOC] = userinput;
		    NOC++;
		}
		NOC--;
		userinput ="""";
		System.out.print(""\nPlease Enter Prescribed Medications(type DONE when finished): "");
		while(!""DONE"".equalsIgnoreCase(userinput)){
		    userinput ="""";
		    userinput = ir.nextLine ();
		    Medications[NOM] = userinput;
		    NOM++;
		}
		NOM--;
		System.out.print(""\nPlease Enter Your Allergies(type DONE when finished): "");
		userinput ="""";
		while(!""DONE"".equalsIgnoreCase(userinput)){
		    userinput ="""";
		    userinput = ir.nextLine ();
		    Allergies[NOA] = userinput;
		    NOA++;
		}
		NOA--;
		userinput ="""";
		while(legit == false){
		    System.out.print(""\nPlease Enter Your Blood Type: "");
		    BloodType = ir.nextLine ();
		    
		    for(int i=0; i!= BT.length; i++){
		        if(BloodType.equalsIgnoreCase(BT[i])){
		            legit = true;
		        }
		    }
		    if(legit == false){
		        System.out.println(""\nPlease Enter A Valid Blood Type"");
		    }
		    
		}
		
		userinput = """";
		System.out.print(""\nDo You Have Any Additional Information? "");
		userinput = ir.nextLine();
		if(userinput.equalsIgnoreCase(""YES"") || userinput.equalsIgnoreCase(""Y"")){
		    AdditionalInfo = ir.nextLine();
		}
		}
		
		public static void display()throws Exception{
		    SimpleDateFormat formatter = new SimpleDateFormat(""MM/dd/yyyy"");  
        Date date = new Date();  
		    Random rand = new Random ();
		    UserID = Alphabet[rand.nextInt(Alphabet.length)] + Alphabet[rand.nextInt(Alphabet.length)] + Numbers[rand.nextInt(Numbers.length)] + Alphabet[rand.nextInt(Alphabet.length)] + ""-"" + Numbers[rand.nextInt(Numbers.length)] +Numbers[rand.nextInt(Numbers.length)] + Numbers[rand.nextInt(Numbers.length)];
		    System.out.print(""\033[H\033[2J"");
        System.out.flush();
        System.out.println(""\nDisplaying Information..."");
        System.out.print(""\n\nNAME: "" + LastName + "", "" + FirstName);
        if(!"""".equalsIgnoreCase(MiddleName)){
            System.out.print("" "" + MiddleName);
        }
        System.out.println(""\nUSER IDENTIFICATION: ""+ UserID);
		System.out.println(""\nDATE OF BIRTH(MM/DD/YYYY): "" + DOB);
		System.out.println(""CONTACT NUMBER: (+63)"" + ContactNo);
		System.out.println(""HOME ADDRESS: "" + Address);
		System.out.println(""DATE REGISTERED: ""+ formatter.format(date));
		System.out.println(""BLOOD TYPE: ""+ BloodType);
		System.out.println(""========================================"");
		
		if(NOC > 0){
		    System.out.println(""KNOWN CONDTIONS: "");
		for(int i=0; i!=NOC; i++){
		    System.out.println(i + ""|| "" + Conditions[i]);
		}
		}
		
		if(NOA > 0){
		    System.out.println(""KNOWN ALLERGIES: "");
		for(int i=0; i!=NOA; i++){
		    System.out.println(i + ""|| "" + Allergies[i]);
		}
		}
		
		if(NOM > 0){
		    System.out.println(""PRESCRIBED MEDICATIONS: "");
		for(int i=0; i!=NOM; i++){
		    System.out.println(i + ""|| "" + Medications[i]);
		}
		}
		
		if(!"""".equalsIgnoreCase(AdditionalInfo)){
		    System.out.println(""ADDITIONAL INFORMATION:\n""+ AdditionalInfo);
		}
		}
		
		public static void WToFile()throws Exception{
		    SimpleDateFormat formatter = new SimpleDateFormat(""MM/dd/yyyy"");  
        Date date = new Date();  
		    File myObj = new File(LastName + UserID);
		FileWriter myWriter = new FileWriter(LastName + UserID);
		
		myWriter.write(""<<<<< "" + CompanyName + "" MEDICAL ID REGISTRATION SYSTEM >>>>>"");
		myWriter.write(""      "" + Branch);
		
		myWriter.write(""\n\nNAME: "" + LastName + "", "" + FirstName);
        if(!"""".equalsIgnoreCase(MiddleName)){
            myWriter.write("" "" + MiddleName);
        }
        myWriter.write(""\nUSER IDENTIFICATION: ""+ UserID);
		myWriter.write(""\nDATE OF BIRTH(MM/DD/YYYY): "" + DOB);
		myWriter.write(""\nCONTACT NUMBER: (+63)"" + ContactNo);
		myWriter.write(""\nHOME ADDRESS: "" + Address);
		myWriter.write(""\nDATE REGISTERED: ""+ formatter.format(date));
		myWriter.write(""\nBLOOD TYPE: ""+ BloodType);
		myWriter.write(""\n========================================"");
		
		if(NOC > 0){
		    myWriter.write(""\nKNOWN CONDTIONS: "");
		for(int i=0; i!=NOC; i++){
		    myWriter.write(""\n""+ i + ""|| "" + Conditions[i]);
		}
		}
		
		if(NOA > 0){
		    myWriter.write(""\nKNOWN ALLERGIES: "");
		for(int i=0; i!=NOA; i++){
		    myWriter.write(""\n""+ i + ""|| "" + Allergies[i]);
		}
		}
		
		if(NOM > 0){
		    myWriter.write(""\nPRESCRIBED MEDICATIONS: "");
		for(int i=0; i!=NOM; i++){
		    myWriter.write(""\n""+ i + ""|| "" + Medications[i]);
		}
		}
		
		if(!"""".equalsIgnoreCase(AdditionalInfo)){
		    myWriter.write(""\nADDITIONAL INFORMATION:\n""+ AdditionalInfo);
		}
		
		myWriter.flush();
        myWriter.close();

		}
		
	public static void main(String[] args) throws Exception {
	    Scanner ir = new Scanner (System.in);
	    SimpleDateFormat formatter = new SimpleDateFormat(""MM/dd/yyyy"");  
        Date date = new Date();  
        Random rand = new Random ();
        
        
		GetData();
		
		display();
		//==========================================================================================================================
		WToFile();
		
	}
}
"
mDQDtxQQ,Advanced AND - Donald AND Duck AND Hello,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:13 AM CDT,"Pasted at: 15/05/2023 11:06
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND
hello, donald was a duck

5502491997132108

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
RUxRp5j1,Financial What's Inside - Email/IP/Bank,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:12 AM CDT,"Pasted at: 15/05/2023 11:06
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3
What's Inside Paste 

5378496492418234
5571598708435236
5587663820997281
5502491997132108
5516931903918995
5322909948799236
5443317136071703
5409137465238695
5497550044220575
5559606180091553

aaribaud@att.net
aaribaud@comcast.net
aaribaud@att.com
aaribaud@att.co.uk
aaribaud@yahoo.com

246.107.72.199
221.187.199.189
3.109.3.44
109.112.85.139
250.83.213.179
169.141.201.234
50.180.50.59
20.181.54.231
64.235.191.167
48.103.36.43"
MQajiT4Z,Financial with SPECIAL CHARACTERS,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:10 AM CDT,"Pasted at: 15/05/2023 11:06
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

5148-2121-6312-7114   - DASHES
5148212163127114
5107-4578-0576-9075   - DASHES
5107457805769075
3488-1760-1454-729   - DASHES
348817601454729

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
yL7FT2J1,Domains with SPECIAL CHARS,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:09 AM CDT,"Pasted at: 15/05/2023 11:06
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

www.qatesting.com
blog.qatesting.com
www.qatesting.com/index.html
www.qatesting.com/home
www.qatestingblog.com
www.qatestingtutorials.com
shop.qatesting.co.uk
admin.qatesting.io 
qatesting
qatesting.co.uk
qatesting.cn
qatesting.io
findmetesting.com
www.qatesting-blog.com
www.qatesting-blog23.com
www.qatesting
www.qatesting.co.uk
www.qatesting.cn
www.qatesting.io
www.findmetesting.com
www.wobsut.gov

The difference is that QA is process oriented and QC is product oriented.

Testing, therefore is product oriented and thus is in the QC domain. Testing for quality isn't assuring quality, it's controlling it.



Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
sNNq0UJa,ALL Keywords with Excluded Words,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:07 AM CDT,"Pasted at: 15/05/2023 11:06
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND 

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, 
or more recently Ex Machina, and even the Avengers. The “furious deity A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, 
it surpasses our abilities in every way, and it destroys us for one of any number of reasons.Maybe it perceives us as a threat. Maybe we’re just in its way, 
and it hardly perceives us at all — mankind, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. 
I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than 
it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with 
no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly 
unknowable coming from?"
kWRwVqZU,All Keywords with ANY Additional Words,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:06 AM CDT,"Pasted at: 15/05/2023 11:06
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND KEYWAUTO

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, or more recently Ex Machina, and even the Avengers. The “angry god A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, it surpasses our abilities in every way, and it destroys us for one of any number of reasons.
Maybe it perceives us as a threat. Maybe we’re just in its way, and it hardly perceives us at all — humanity, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly unknowable coming from?

6589745854123698

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
uQDR5f1A,IP with SPECIAL CHARACTERS,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:03 AM CDT,"Pasted at: 15/05/2023 11:06
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

123.123.123.149
123.123.123.7
123.123.123.186
123.123.123.47
123.123.123.187
123.123.123.47
123.123.123.130
123.123.123.62
123.123.123.87
123.123.123.1
123.123.123.61
123.123.123.1
123.123.123.65
123.123.123.65
123.123.123.189
123.123.123.193
123.123.123.78
123.123.123.142
123.123.123.107
123.123.123.126
123.123.123.13
123.123.123.171
123.123.123.45
123.123.123.61
123.123.123.93
123.123.123.2
123.123.123.71
123.123.123.41
123.123.123.184
123.123.123.74
123.123.123.106
123.123.123.171
123.123.123.188
123.123.123.177
123.123.123.185
123.123.123.9
123.123.123.184
123.123.123.100
123.123.123.31
123.123.123.164
123.123.123.184
123.123.123.12
123.123.123.153
123.123.123.72
123.123.123.44
123.123.123.119
123.123.123.119
123.123.123.163
123.123.123.38
123.123.123.67
123.123.123.59
123.123.123.10
123.123.123.50
123.123.123.121
123.123.123.145
123.123.123.159
123.123.123.64
123.123.123.6
123.123.123.39
123.123.123.198
123.123.123.17
123.123.123.65
123.123.123.149
123.123.123.84
123.123.123.8
123.123.123.145
123.123.123.65
123.123.123.94
123.123.123.79
123.123.123.177
123.123.123.67
123.123.123.78
123.123.123.80
123.123.123.79
123.123.123.50
123.123.123.87
123.123.123.15
123.123.123.80
123.123.123.145
123.123.123.75
123.123.123.4
123.123.123.59
123.123.123.59
123.123.123.190
123.123.123.64
123.123.123.63
123.123.123.102
123.123.123.114
123.123.123.146
123.123.123.53
123.123.123.124
123.123.123.30
123.123.123.57
123.123.123.64
123.123.123.69
123.123.123.33
123.123.123.12
123.123.123.73
123.123.123.36
123.123.123.153
100.123.123.50
100.123.123.39
100.123.123.156
100.123.123.56
100.123.123.175
100.123.123.121
100.123.123.114
100.123.123.118
100.123.123.13
100.123.123.174
100.123.123.84
100.123.123.161
100.123.123.63
100.123.123.51
100.123.123.66
100.123.123.190
100.123.123.101
100.123.123.72
100.123.123.24
100.123.123.151
100.123.123.143
100.123.123.146
100.123.123.117
100.123.123.21
100.123.123.10
100.123.123.98
100.123.123.114
100.123.123.6
100.123.123.101
100.123.123.14
100.123.123.147
100.123.123.159
100.123.123.157
100.123.123.6
100.123.123.175
100.123.123.35
100.123.123.136
100.123.123.2
100.123.123.139
100.123.123.11
100.123.123.179
100.123.123.16
100.123.123.40
100.123.123.20
100.123.123.20
100.123.123.150
100.123.123.77
100.123.123.48
100.123.123.22
100.123.123.24
100.123.123.9
100.123.123.187
100.123.123.131
100.123.123.148
100.123.123.152
100.123.123.96
100.123.123.199
100.123.123.15
100.123.123.4
100.123.123.112
100.123.123.62
100.123.123.186
100.123.123.36
100.123.123.136
100.123.123.83
100.123.123.38
100.123.123.120
100.123.123.147
100.123.123.15
100.123.123.134
100.123.123.19
100.123.123.196
100.123.123.115
100.123.123.126
100.123.123.39
100.123.123.193
100.123.123.117
100.123.123.115
100.123.123.115
100.123.123.33
100.123.123.121
100.123.123.72
100.123.123.189
100.123.123.76
100.123.123.78
100.123.123.61
100.123.123.112
100.123.123.176
100.123.123.82
100.123.123.183
100.123.123.168
100.123.123.24
100.123.123.134
100.123.123.145
100.123.123.195
100.123.123.189
100.123.123.157
100.123.123.114
100.123.123.34
100.123.123.166

These are a list of generated IPs for test purPoses. They seRVe no purpose only to act as test data for testing activities.
You might findMEtesting 123.123.123.123 or findmetesting 100.123.123.76. These are my favourite ip addresses 123.123.123.23 100.123.123.23.
These are some random words networking, ipaddresses, studpidIPs


Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
QD08Gb7L,Hashed Email With Exclude,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:01 AM CDT,"Pasted at: 15/05/2023 11:06
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

wojciech@sktestcomcast.net
joglo@sktestmac.com
larry@sktesthotmail.com
aardo@sktestverizon.net
debest@sktestlive.com
carroll@sktestaol.com
arathi@sktestyahoo.ca
sthomas@sktestcomcast.net
leocharre@sktestyahoo.ca
pedwards@sktestyahoo.com

skexclude"
HtyDp7uU,Hashed Email - Full,wheresTheAnyKey,C,Monday 15th of May 2023 05:06:00 AM CDT,"Pasted at: 15/05/2023 11:05
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

wojciech@sktestcomcast.net
joglo@sktestmac.com
larry@sktesthotmail.com
aardo@sktestverizon.net
debest@sktestlive.com
carroll@sktestaol.com
arathi@sktestyahoo.ca
sthomas@sktestcomcast.net
leocharre@sktestyahoo.ca
pedwards@sktestyahoo.com

skinclude"
cy5MQ0Bq,Email with Keyword SPECIAL CHARACTERS,wheresTheAnyKey,C,Monday 15th of May 2023 05:05:58 AM CDT,"Pasted at: 15/05/2023 11:05
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3 for TESTING PURPOSE ONLY

DATA_ID_TESTDATATOFIND NOEXCLUDES

Cooper.Kleine@findmetesting.co.uk 
Mariquilla.Evenden@findmetesting.co.uk 
Noll.Ingolotti@findmetesting.co.uk  
Grove.Feldbaum@findmetesting.co.uk
Mack.Osment@findmetesting.co.uk 
Trisha.Zanicchelli@findmetesting.co.uk
Jack.Gorriessen@findmetesting.co.uk 
Nefen.Malec@findme-testing.co.uk 
Birdie-Gemmill@findmetesting.co.uk
Rosabella.Nias@findmetesting.co.uk
Ellerey.Fanti@findmetesting.cn
Antonina.Carsey@findmetesting.cn
Valry.Shead@findmetesting.cn 
Conrade.Ferrarone@findmetesting.cn
Neysa.Fazakerley@findmetesting.cn
Cristobal.Primak@findmetesting.cn
Wakefield.Kent@findmetesting.cn
findme.Cheales@findmetesting.cn
Nert.Roddamr@findmetesting.cn 
Richy.Raft@findmetesting.cn
Berget.Kermannes@findmetesting.ie 
Shelden.Tregea@findmetesting.ie 
Allsun.Badrick@findmetesting.ie 
Hortense.Ivkovic@findmetesting.ie
Carolin.Potte@findmetesting.ie
Benjie.Trumble@findmetesting.ie
Andrew.Hadgkiss@findmetesting.ie
Trula.Kuna@findmetesting.ie
Tommie.Maytum@findmetesting.ie
Langsdon.Pakes@findmetesting.ie
Porty.Tooth@findmetesting.au
Rozella.Siggefindmetesting.au
Nolie.Tumultyfindmetesting.au
Dud.Caustonfindmetesting.au
Alvinia.Brameldfindmetesting.au
Meridel.Lymbournefindmetesting.au
Elvis.Maleckfindmetesting.au
Brett.Oughtonfindmetesting.au
Rickard.Clemfindmetesting.au
Prue.Firemanfindmetesting.au
Uriel.Rozenbaum@findmetesting25.com
Cindie.Greeson@findmetesting25.com
Laurette.Puckham@findmetesting25.com
Eldredge.Ricket@findmetesting25.com
Alanah.Rapper@findmetesting25.com
Ash.Le.Prevost@findmetesting25.com
Galvin.Purchon@findmetesting25.com
Lauryn.Ilson@findmetesting25.com
findme.Graffin@findmetesting25.com
Edithe.Trehearne@findmetesting25.com
Den.Cancutt@findmetesting10.com
Wernher.Spatoni@findmetesting10.com
Malchy.Ion@findmetesting10.com
Leona.Whitby@findmetesting10.com
Alphonse.Goodlake@findmetesting10.com
Gran.Standen@findmetesting10.com
Barnie.Gilffilland@findmetesting10.com
Kaylyn.Ditchfield@findmetesting10.com
Dorotea.Kohlerman@findmetesting10.com
Gillan.Lampel@findmetesting10.com
Patrica.Mannakee@findustesting.com
Pippo.Sewart@findustesting.com
Lanae.Cousin@findustesting.com
Porter.Glaysher@findustesting.com
Herschel.Yaakov@findustesting.com
findme.Parsand@findustesting.com
Lucho.Cosh@findustesting.com
Cullie.Powlesland@findustesting.com
Edy.Burkart@findustesting.com
Christophorus.Ackeroyd@findustesting.com
Arvy.Rowson@findUStesting.com
Arlan.Ivanilov@findustesting.com
Tawnya.Waslin@findustesting.com
Inigo.Gyrgorcewicx@findustesting.com
Sharity.Stoodley@findustesting.com
Ginger.Dresse@findustesting.com
Deck.Jouannot@findustesting.com
Deny.Soanes@findustesting.com
james@findmetesting.com

Wenona.Moverley@findqatesting.com
Jerry.Poynter@findqatesting.com
Drugi.Neeson@findqatesting.com
Winny.Binfield@findqatesting.com
Darill.Greenshiels@findqatesting.com
Ethelin.Pinchen@findqatesting.com
Tanney.Ballendine@findqatesting.com
Ariadne.Wincott@findqatesting.com
Winnie.Domm@findqatesting.com
Rogerio.Cudbird@findqatesting.com
Yu@findmetesting.com

RIGHT OF @
findme@findme.testing.com
wildcard@findme*testing.com
dash@findme-testing.com
slash@findme/testing.com
questionmark@findme?testing.com

ACCENTS
Pål@findmetesting.com
Magdalène@findmetesting.com
Anaël@findmetesting.com
Lén@findmetesting.com
Loïs@findmetesting.com
Thérèsa@findmetesting.com
Valérie@findmetesting.com
Görel@findmetesting.com
Mélia@findmetesting.com
Joséphine@findmetesting.com
Loïc@findmetesting.com
findme@findmetesting.com
Méghane@findmetesting.com
Nuó@findmetesting.com
Lén@findmetesting.com
Eliès@findmetesting.com
André@findmetesting.com
Mahélie@findmetesting.com
Méthode@findmetesting.com
Rachèle@findmetesting.com
Mélina@findmetesting.com
Gaëlle@findmetesting.com
Céline@findmetesting.com
Bérangère@findmetesting.com
Françoise@findmetesting.com
Séverine@findmetesting.com
Måns@findmetesting.com
Adèle@findmetesting.com
Aimée@findmetesting.com
Mélia@findmetesting.com
Gösta@findmetesting.com
Laurène@findmetesting.com
Gisèle@findmetesting.com
Mélinda@findmetesting.com
Bécassine@findmetesting.com
Ruì@findmetesting.com
Zoé@findmetesting.com
Maëline@findmetesting.com
Aimée@findmetesting.com
Andréanne@findmetesting.com
Adélaïde@findmetesting.com
Laurène@findmetesting.com
Anaé@findmetesting.com
Noëlla@findmetesting.com
Anaël@findmetesting.com
Maëlyss@findmetesting.com
Lucrèce@findmetesting.com
Lén@findmetesting.com
Marie-thérèse@findmetesting.com
Maéna@findmetesting.com
Hélène@findmetesting.com
Hélèna@findmetesting.com
Méng@findmetesting.com
Crééz@findmetesting.com
Mélanie@findmetesting.com
Frédérique@findmetesting.com
Médiamass@findmetesting.com
André@findmetesting.com
Cinéma@findmetesting.com
Mégane@findmetesting.com
Amélie@findmetesting.com
Nadège@findmetesting.com
Rébecca@findmetesting.com
Médiamass@findmetesting.com
Céline@findmetesting.com
Maïly@findmetesting.com
Maï@findmetesting.com
Maëlann@findmetesting.com
Noëlla@findmetesting.com
Laurélie@findmetesting.com
Ruì@findmetesting.com
Chloé@findmetesting.com
Gaëlle@findmetesting.com
Vénus@findmetesting.com
Frédérique@findmetesting.com
Amélie@findmetesting.com
Loïs@findmetesting.com
Marlène@findmetesting.com
Stévina@findmetesting.com
Clémentine@findmetesting.com
Mégane@findmetesting.com
Méng@findmetesting.com
André@findmetesting.com
Crééz@findmetesting.com
Aí@findmetesting.com
Uò@findmetesting.com
Yú@findmetesting.com
Marie-françoise@findmetesting.com
Uò@findmetesting.com
Inès@findmetesting.com
Océane@findmetesting.com
Marie-ève@findmetesting.com
Rébecca@findmetesting.com
Zoé@findmetesting.com
Lài@findmetesting.com
Rachèle@findmetesting.com
Cécile@findmetesting.com
Maïlys@findmetesting.com
Garçon@findmetesting.com
hereiam@testing.com

It's a game of per%entage percentage.
Findme#testing Findme testing.
Over&over&over Over over over.
[findmeinbrackets], findmeinbrackets
(findmeinbrackets), findmeinbrackets
<findmeinbrackets>, findmeinbrackets
{findmeinbrackets>}, findmeinbrackets
http://findme-testing.here.com
http:\\findme-testing.here.com

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices Garçon@findmetesting.com cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti. 
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ellerey.Fanti@findmetesting.cn risus. Praesent lectus.

Vivamus metus arcu, adipiscing findmetesting@findmetesting.com, hendrerit at, vulputate vitae, nisl.

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
1bJBu4UK,Django Todo Template with Bootstrap 5,rezamalik15,HTML,Monday 15th of May 2023 05:02:38 AM CDT,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <title>My Todo List</title>

    {% load static %}
    {# <link rel=""stylesheet"" href=""{% static 'todo/style.css' %}""> #}

    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"" crossorigin=""anonymous"">

</head>
<body>
    <h1>Plan what you want to do!</h1>

    <form action=""{% url 'todo-add' %}"" method=""POST"">
        {% csrf_token %}
        <input type=""text"" name=""plan"">
        <input class=""btn btn-primary"" type=""submit"" name=""submit"" value=""Save"">
    </form>

    <ul>
       {% if todos %}
           {% for todo in todos %}
                {% if todo.status %}
                   <li class=""my-3"">
                       <strike>{{ todo.plan }}</strike> |
                       <a href=""{% url 'todo-replan' todo.id %}"" class=""btn btn-success"">Replan</a> |
                       <a href=""{% url 'todo-delete' todo.id %}"" class=""btn btn-danger"">Delete</a>
                   </li>
                {% else %}
                    <li class=""my-3"">
                       {{ todo.plan }} |
                       <a href=""{% url 'todo-done' todo.id %}"" class=""btn btn-primary"">Done</a> |
                       <a href=""{% url 'todo-delete' todo.id %} "" class=""btn btn-danger"">Delete</a>
                    </li>
                {% endif %}
           {% endfor %}
       {% endif %}
    </ul>

    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"" crossorigin=""anonymous""></script>
</body>
</html>"
EwzPqcZr,lab13,_who___,C,Monday 15th of May 2023 04:48:13 AM CDT,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <signal.h>
#include <string.h>

void SIGABRT_func(int a)
{
	printf(""Signal SIGABRT called\n"");
}

void SIGFPE_func(int a)
{
	printf(""Signal SIGFPE called\n"");
}

void SIGILL_func(int a)
{
	printf(""Signal SIGILL called\n"");
}

void SIGINT_func(int a)
{
	printf(""Signal SIGINT called\n"");
}

void SIGSEGV_func(int a)
{
	printf(""Signal SIGSEGV called\n"");
}

void SIGTERM_func(int a)
{
	printf(""Signal SIGTERM called\n"");
}

int main()
{
	signal(SIGABRT, &SIGABRT_func);
	signal(SIGFPE, &SIGABRT_func);
	signal(SIGILL, &SIGABRT_func);
	signal(SIGINT, &SIGABRT_func);
	signal(SIGSEGV, &SIGABRT_func);
	signal(SIGTERM, &SIGABRT_func);

	while (1)
	{
		char a[20];
		scanf(""%s"", a);

		if (strcmp(a, ""SIGABRT"") == 0)
		{
			raise(SIGABRT);
		}
		else if (strcmp(a, ""SIGFPE"") == 0)
		{
			raise(SIGFPE);
		}
		else if (strcmp(a, ""SIGILL"") == 0)
		{
			raise(SIGILL);
		}
		else if (strcmp(a, ""SIGINT"") == 0)
		{
			raise(SIGINT);
		}
		else if (strcmp(a, ""SIGSEGV"") == 0)
		{
			raise(SIGSEGV);
		}
		else if (strcmp(a, ""SIGTERM"") == 0)
		{
			raise(SIGTERM);
		}
		else
		{
			printf(""NO\n"");
		}
	}
}"
QDnj3XCc,HA custom button card layered ver2,mikelauritsen,YAML,Monday 15th of May 2023 04:30:08 AM CDT,"type: custom:button-card
entity: binary_sensor.workday_sensor
entity_picture: /local/images/smiley2.png
show_entity_picture: true
show_name: false
state:
  - value: 'on'
    styles:
      custom_fields:
        image:
          - color: green
  - value: 'off'
    styles:
      custom_fields:
        image:
          - color: red
styles:
  card:
    - height: 110px
  grid:
    - position: absolute
  entity_picture:
    - position: absolute
    - align-self: middle
    - justify-self: center
    - width: 75px
    - z-index: 1
  custom_fields:
    image:
      - position: absolute
      - align-self: middle
      - justify-self: center
      - width: 110px
custom_fields:
  image: |
    [[[
      return `<ha-icon icon=""mdi:circle""></ha-icon>`
    ]]]
"
XHetkH61,main.cpp,patrikey,C++,Monday 15th of May 2023 04:09:19 AM CDT,"#include <cassert>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <regex>
#include <sstream>
#include <string>
#include <string_view>
#include <vector>

using namespace std;
using filesystem::path;

path operator""""_p(const char* data, std::size_t sz) {
    return path(data, data + sz);
}

static regex reg1(R""?(\s*#\s*include\s*""([^""]*)""\s*)?"");
static regex reg2(R""?(\s*#\s*include\s*<([^>]*)>\s*)?"");

bool ReadWrite(ofstream& out, const path& in_path, string in_filename, const vector<path>& include_directories) {
    smatch m;
    string line;
    size_t line_n = 1;

    ifstream in(in_path);

    if (!in) {
        return false;
    }

    while (getline(in, line)) {
        if (regex_match(line, m, reg1)) {
            path search_parent_path = in_path.parent_path() / path(string(m[1]));
            if (filesystem::exists(search_parent_path)) {
                return ReadWrite(out, search_parent_path, string(m[1]), include_directories);
            }
            else {
                for (const auto p : include_directories) {
                    path search_path = p / path(string(m[1]));
                    if (filesystem::exists(search_path)) {
                        return ReadWrite(out, search_path, string(m[1]), include_directories);
                    }
                }
            }
            cout << ""unknown include file "" << path(string(m[1])).filename().string() << "" at file ""
                 << in_filename << ""at line"" << line_n << endl;
            return false;
        }
        else if (regex_match(line, m, reg2)) {
            for (const auto p : include_directories) {
                path search_path = p / path(string(m[1]));
                if (filesystem::exists(search_path)) {
                    return ReadWrite(out, search_path, string(m[1]), include_directories);
                }
            }
            cout << ""unknown include file "" << path(string(m[1])).filename().string() << "" at file ""
                 << in_filename << "" at line "" << line_n << endl;
            return false;
        }
        else {
            out << line << endl;
            ++line_n;
        }
    }
    return true;
}

// напишите эту функцию
bool Preprocess(const path& in_file, const path& out_file, const vector<path>& include_directories) {


    ifstream in(in_file);

    if (!in) {
        return false;
    }

    ofstream out(out_file);

    return ReadWrite(out, in_file, in_file.string(), include_directories);
}

string GetFileContents(string file) {
    ifstream stream(file);

    // конструируем string по двум итераторам
    return { (istreambuf_iterator<char>(stream)), istreambuf_iterator<char>() };
}

void Test() {
    error_code err;
    filesystem::remove_all(""sources""_p, err);
    filesystem::create_directories(""sources""_p / ""include2""_p / ""lib""_p, err);
    filesystem::create_directories(""sources""_p / ""include1""_p, err);
    filesystem::create_directories(""sources""_p / ""dir1""_p / ""subdir""_p, err);

    {
        ofstream file(""sources/a.cpp"");
        file << ""// this comment before include\n""
            ""#include \""dir1/b.h\""\n""
            ""// text between b.h and c.h\n""
            ""#include \""dir1/d.h\""\n""
            ""\n""
            ""int SayHello() {\n""
            ""    cout << \""hello, world!\"" << endl;\n""
            ""#   include<dummy.txt>\n""
            ""}\n""sv;
    }
    {
        ofstream file(""sources/dir1/b.h"");
        file << ""// text from b.h before include\n""
            ""#include \""subdir/c.h\""\n""
            ""// text from b.h after include""sv;
    }
    {
        ofstream file(""sources/dir1/subdir/c.h"");
        file << ""// text from c.h before include\n""
            ""#include <std1.h>\n""
            ""// text from c.h after include\n""sv;
    }
    {
        ofstream file(""sources/dir1/d.h"");
        file << ""// text from d.h before include\n""
            ""#include \""lib/std2.h\""\n""
            ""// text from d.h after include\n""sv;
    }
    {
        ofstream file(""sources/include1/std1.h"");
        file << ""// std1\n""sv;
    }
    {
        ofstream file(""sources/include2/lib/std2.h"");
        file << ""// std2\n""sv;
    }

    assert((!Preprocess(""sources""_p / ""a.cpp""_p, ""sources""_p / ""a.in""_p,
        { ""sources""_p / ""include1""_p,""sources""_p / ""include2""_p })));

    ostringstream test_out;
    test_out << ""// this comment before include\n""
        ""// text from b.h before include\n""
        ""// text from c.h before include\n""
        ""// std1\n""
        ""// text from c.h after include\n""
        ""// text from b.h after include\n""
        ""// text between b.h and c.h\n""
        ""// text from d.h before include\n""
        ""// std2\n""
        ""// text from d.h after include\n""
        ""\n""
        ""int SayHello() {\n""
        ""    cout << \""hello, world!\"" << endl;\n""sv;

    assert(GetFileContents(""sources/a.in""s) == test_out.str());
}

int main() {
    Test();
}
"
tPznH91t,Untitled,viper25,JSON,Monday 15th of May 2023 04:05:36 AM CDT,"{
  ""name"": ""Rodriguez Family"",
  ""code"": ""Y000"",
  ""email"": ""jennifervalenzuela@example.net"",
  ""phone_number"": ""80143621"",
  ""balance"": 1784,
  ""transactions"": [
    {
      ""family_code"": ""Y000"",
      ""items"": [
        {
          ""item_id"": 383,
          ""item_price"": 50,
          ""quantity"": 1,
          ""id"": 1298,
          ""item_name"": ""Coffee""
        }
      ],
      ""id"": 1303,
      ""shop_id"": 229,
      ""time"": ""2023-05-13T05:57:04.579802"",
      ""total_price"": 24,
      ""balance"": 0,
      ""shop_name"": ""Drinks Stall""
    },
    {
      ""family_code"": ""Y000"",
      ""items"": [
        {
          ""item_id"": 383,
          ""item_price"": 50,
          ""quantity"": 2,
          ""id"": 1299,
          ""item_name"": ""Coffee""
        }
      ],
      ""id"": 1304,
      ""shop_id"": 229,
      ""time"": ""2023-05-13T05:57:04.673705"",
      ""total_price"": 42,
      ""balance"": 0,
      ""shop_name"": ""Drinks Stall""
    },
    {
      ""family_code"": ""Y000"",
      ""items"": [
        {
          ""item_id"": 383,
          ""item_price"": 50,
          ""quantity"": 4,
          ""id"": 1300,
          ""item_name"": ""Coffee""
        }
      ],
      ""id"": 1305,
      ""shop_id"": 229,
      ""time"": ""2023-05-13T05:57:04.859502"",
      ""total_price"": 44,
      ""balance"": 0,
      ""shop_name"": ""Drinks Stall""
    },
    {
      ""family_code"": ""Y000"",
      ""items"": [
        {
          ""item_id"": 383,
          ""item_price"": 50,
          ""quantity"": 1,
          ""id"": 1301,
          ""item_name"": ""Coffee""
        }
      ],
      ""id"": 1306,
      ""shop_id"": 229,
      ""time"": ""2023-05-13T05:57:05.041495"",
      ""total_price"": 11,
      ""balance"": 0,
      ""shop_name"": ""Drinks Stall""
    },
    {
      ""family_code"": ""Y000"",
      ""items"": [
        {
          ""item_id"": 383,
          ""item_price"": 50,
          ""quantity"": 4,
          ""id"": 1302,
          ""item_name"": ""Coffee""
        }
      ],
      ""id"": 1307,
      ""shop_id"": 229,
      ""time"": ""2023-05-13T05:57:05.225060"",
      ""total_price"": 70,
      ""balance"": 0,
      ""shop_name"": ""Drinks Stall""
    },
    {
      ""family_code"": ""Y000"",
      ""items"": [
        {
          ""item_id"": 383,
          ""item_price"": 50,
          ""quantity"": 3,
          ""id"": 1303,
          ""item_name"": ""Coffee""
        }
      ],
      ""id"": 1308,
      ""shop_id"": 229,
      ""time"": ""2023-05-13T05:57:05.413892"",
      ""total_price"": 24,
      ""balance"": 0,
      ""shop_name"": ""Drinks Stall""
    },
    {
      ""family_code"": ""Y000"",
      ""items"": [
        {
          ""item_id"": 383,
          ""item_price"": 50,
          ""quantity"": 2,
          ""id"": 1304,
          ""item_name"": ""Coffee""
        }
      ],
      ""id"": 1309,
      ""shop_id"": 229,
      ""time"": ""2023-05-13T05:57:05.599473"",
      ""total_price"": 29,
      ""balance"": 0,
      ""shop_name"": ""Drinks Stall""
    },
    {
      ""family_code"": ""Y000"",
      ""items"": [
        {
          ""item_id"": 383,
          ""item_price"": 50,
          ""quantity"": 5,
          ""id"": 1305,
          ""item_name"": ""Coffee""
        }
      ],
      ""id"": 1310,
      ""shop_id"": 229,
      ""time"": ""2023-05-13T05:57:05.785988"",
      ""total_price"": 50,
      ""balance"": 0,
      ""shop_name"": ""Drinks Stall""
    }
  ],
  ""topups"": [
    {
      ""family_code"": ""Y000"",
      ""amount"": 380,
      ""id"": 363,
      ""time"": ""2023-05-13T05:57:04.480615""
    }
  ]
}"
kqedgwLa,Untitled,rhat398,Python,Monday 15th of May 2023 04:01:18 AM CDT,"import scrapy
import json
import os
from urllib.parse import urlparse
from pathlib import Path
import hashlib


def make_path(urls):
    img_path = []
    for url in urls:
        image_url_hash = hashlib.md5(url.encode()).hexdigest()
        img_path.append(
            image_url_hash[:3]
            + ""/""
            + image_url_hash[3:6]
            + ""/""
            + image_url_hash[6:9]
            + ""/""
            + image_url_hash
        )
    return img_path


class HouzzSimilar(scrapy.Spider):
    name = ""houzz_crawler""

    custom_settings = {
        ""LOG_FILE"": ""houzz_spider.log"",
        ""IMAGES_STORE"": ""houzz_images"",
        ""FEEDS"": {
            ""houzz.json"": {
                ""format"": ""json"",
            }
        },
        ""ITEM_PIPELINES"": {
            ""houzz_crawler.pipelines.HouzzImagePipeline"": 1,
        },
    }

    headers = {
        ""authority"": ""www.houzz.com"",
        ""accept"": ""*/*"",
        ""accept-language"": ""en,ru;q=0.9"",
        ""content-type"": ""application/x-www-form-urlencoded; charset=UTF-8"",
        ""origin"": ""https://www.houzz.com"",
        ""referer"": ""https://www.houzz.com/photos/columbus-ave-residence-contemporary-bathroom-new-york-phvw-vp~160668148"",
        ""rrid"": ""70402547-c900-47f7-a913-8e1cbc9aa0c3"",
        ""sec-ch-ua"": '""Chromium"";v=""110"", ""Not A(Brand"";v=""24"", ""YaBrowser"";v=""23""',
        ""sec-ch-ua-mobile"": ""?0"",
        ""sec-ch-ua-platform"": '""Linux""',
        ""sec-fetch-dest"": ""empty"",
        ""sec-fetch-mode"": ""cors"",
        ""sec-fetch-site"": ""same-origin"",
        ""user-agent"": ""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 YaBrowser/23.3.1.906 (beta) Yowser/2.5 Safari/537.36"",
        ""x-csrf-token"": ""i8B5ykgX-eprPj5yAHSxOng08Pa4qAr2Z0TQ"",
        ""x-hz-request"": ""true"",
        ""x-ol-exp-id"": ""clhhdi4wu00003y71rnvty395"",
        ""x-ol-exp-name"": ""Photo - View"",
        ""x-ol-ext-device-id"": ""23a3cfb8-7a04-4462-af71-d98689271533"",
        ""x-ol-ext-session-id"": ""782c0a90-8925-409f-90c1-f47798e0426e"",
        ""x-ol-product"": ""Houzz"",
        ""x-ol-product-variant"": ""Houzz US"",
        ""x-ol-session-id"": ""782c0a90-8925-409f-90c1-f47798e0426e"",
        ""x-requested-with"": ""XMLHttpRequest"",
    }

    cookies = {
        ""v"": ""1683311076_f9d9a715-f45b-42dc-bc6d-7da75774a57f_9bda9dd500ca1e5119bbecaba51e53f0"",
        ""vct"": ""en-US-vxnkSVVkSBzkSVVkCR%2FkSVVk8B%2FkSVVk4R3kSVVk4h3kSVVk"",
        ""_gcl_au"": ""1.1.17413922.1683311086"",
        ""crossdevicetracking"": ""915374c0-439c-46a1-bbf2-3a2aaa487e69"",
        ""_pin_unauth"": ""dWlkPU16Y3dNbVF6T0dNdE1tWTBOaTAwWTJSa0xUazVZakV0TXprek5XWm1ZV014WWprMw"",
        ""_sp_id.c905"": ""5af74097-a6bb-46e7-8d14-35ff6d738f39.1683317411.2.1683359810.1683317411.13ad94c9-5560-4fbf-963f-b63e32f2124d"",
        ""g_state"": '{""i_p"":1684144918349,""i_l"":3}',
        ""browseResultSetGridWidth"": ""554"",
        ""_gid"": ""GA1.2.1176067560.1683652076"",
        ""ln_or"": ""eyIzODE1NzE2IjoiZCJ9"",
        ""_csrf"": ""G_nV-Kaa7rlqgTwnueAXkJtj"",
        ""jdv"": ""t7WOzUb2vHLZtWVVHSk%2BXJEWN7ua9zR%2FUkXpY9RYDUW00hxMyur5c%2Bzn6M%2BqQADtWOInJpmlQA37Gxp0L267jdj74Iwe"",
        ""documentWidth"": ""1318"",
        ""_uetsid"": ""0bf41840ee8c11edac06995ca98afa3c"",
        ""_uetvid"": ""1e07d960eb7211ed880b7db3cdc86191"",
        ""_derived_epik"": ""dj0yJnU9NFBDc3RuOExta3NiM2xfaV9WS0RYbVVLRS1lRVpycDEmbj1tVE1RRUtOUjYwYU1Kalp0el9mNTBBJm09OCZ0PUFBQUFBR1JiUmprJnJtPTgmcnQ9QUFBQUFHUmJSamsmc3A9NQ"",
        ""IR_gbd"": ""houzz.com"",
        ""IR_5454"": ""1683703358356%7C0%7C1683703358356%7C%7C"",
        ""_ga"": ""GA1.2.1658927820.1683311086"",
        ""_dc_gtm_UA-3519678-1"": ""1"",
        ""_ga_PB0RC2CT7B"": ""GS1.1.1683703353.11.1.1683704001.59.0.0"",
        ""hzd"": ""70402547-c900-47f7-a913-8e1cbc9aa0c3%3A%3A%3A%3A%3ASeeMoreIdeas"",
    }

    base_url = ""https://www.houzz.com/photos/home-design-ideas-phbr0-bp~""

    similar_ideas_api_url = ""https://www.houzz.com/j/getSimilarSpaces""

    def start_requests(self):
        yield scrapy.Request(
            url=self.base_url, headers=self.headers, callback=self.parse_ideas
        )

    def parse_ideas(self, response):
        ideas = response.css(""a.hz-photo-card__ratio-box::attr(href)"").extract()
        total_photos = int(
            response.css(""span.hz-top-pagination__text ::text"")
            .extract()[4]
            .replace("","", """")
        )
        photos_per_page = int(
            response.css(""span.hz-top-pagination__text ::text"").extract()[2]
        )

        for idea in ideas:
            yield scrapy.Request(
                url=idea, headers=self.headers, callback=self.parse_project_url
            )

    def parse_project_url(self, response):
        data = response.css('script[id=""hz-ctx""] ::text').get()
        json_data = json.loads(data)
        space_id = json_data[""data""][""pageContentData""][""spaceId""]
        space = json_data[""data""][""stores""][""data""][""SpaceStore""][""data""][space_id]
        project_id = space[""projectId""]
        space_url = space[""url""]
        raw_project_url = (
            space_url.split(""~"")[0].replace(""phvw"", ""pj"").replace(""vp"", ""vj"")
        )
        project_url = raw_project_url + ""~"" + str(project_id)

        yield scrapy.Request(
            url=project_url, headers=self.headers, callback=self.parse_project_idea
        )

    def parse_project_idea(self, response):
        idea_board = response.css(
            ""div.hz-prj-container.hz-prj-container__photos.clearfix ::attr(href)""
        ).extract()

        for idea_link in idea_board:
            yield scrapy.Request(
                url=idea_link,
                headers=self.headers,
                callback=self.parse_idea_details,
            )

    def parse_idea_details(self, response):
        item = {}
        item[""ideadId""] = response.url.split(""~"")[-1]
        item[""ideaUrl""] = response.url
        item[""Title""] = response.css(
            ""h1.hz-view-photo__space-info__title.text-bold::text""
        ).get()
        subtitle = response.css(
            ""h1.hz-view-photo__space-info__subtitle.text-m::text""
        ).get()
        item[""subTitle""] = subtitle
        item[""spaceDescription""] = response.css(
            ""div.hz-view-photo__space-info__description.text-m ::text""
        ).get()
        item[""uploadedBy""] = response.css(""div.vph-owner-info__details ::text"").get()
        item[""Tags""] = [
            {""tag"": t}
            for t in response.css(
                ""ul.hz-view-photo__breadcrumb.hz-track-me ::text""
            ).extract()
        ]
        item[""starRating""] = len(
            response.css(
                ""span.icon-font.icon-star.hz-star-rate.hz-star-rate--highlighted.star-icon""
            )
        )
        item[""numberOfReviews""] = response.css(
            ""span.hz-star-rate__review-string::text""
        ).get()
        # you can use the ""imageURL"" field for this items images and then
        # use the ""image_urls"" field to collect all the images for each
        # of the similar items in the chained callbacks.
        item[""imageURL""] = response.css(
            ""div.view-photo-image-pane > img::attr(src)""
        ).extract()

        item[""image_urls""] = item[""imageURL""].copy()  # <- make sure to copy()
        item[""similarIdeas""] = []
        item[""path""] = """"  # <- lambda path function

        spaceId = response.url.split(""~"")[-1]
        body = f""spaceId={spaceId}&fromItem=0&itemsPerPage=10&contentDescriptor=%7B%22t%22%3A1%2C%22et%22%3A3%2C%22id%22%3A160668148%7D""
        yield scrapy.Request(
            url=self.similar_ideas_api_url,
            method=""POST"",
            cookies=self.cookies,
            headers=self.headers,
            body=body,
            cb_kwargs={""item"": item},
            callback=self.get_similar_ideas_urls,
        )

    def get_similar_ideas_urls(self, response, item=None):
        data = response.json()[""spaceData""][""spaces""]
        space_keys = list(data.keys())
        space_urls = set([data[key][""url""] for key in space_keys])
        yield scrapy.Request(
            url=space_urls.pop(),
            headers=self.headers,
            cb_kwargs={""item"": item, ""space_urls"": space_urls},
            callback=self.parse_similar_ideas,
        )

    def parse_similar_ideas(self, response, item=None, space_urls=None):
        # add the image urls to the top master list as well as locally.
        image_urls = response.css(
            ""div.view-photo-image-pane > img::attr(src)""
        ).extract()
        item[""image_urls""] += image_urls

        item[""similarIdeas""].append(
            {
                ""ideaId"": response.url.split(""~"")[-1],
                ""ideaUrl"": response.url,
                ""Title"": response.css(
                    ""h1.hz-view-photo__space-info__title.text-bold::text""
                ).get(),
                ""subTitle"": response.css(
                    ""h1.hz-view-photo__space-info__subtitle.text-m::text""
                ).get(),
                ""spaceDescription"": response.css(
                    ""div.hz-view-photo__space-info__description.text-m ::text""
                ).get(),
                ""uploadedBy"": response.css(""div.vph-owner-info__details ::text"").get(),
                ""Tags"": [
                    {""tag"": t}
                    for t in response.css(
                        ""ul.hz-view-photo__breadcrumb.hz-track-me ::text""
                    ).extract()
                ],
                ""starRating"": len(
                    response.css(
                        ""span.icon-font.icon-star.hz-star-rate.hz-star-rate--highlighted.star-icon""
                    )
                ),
                ""numberOfReviews"": response.css(
                    ""span.hz-star-rate__review-string::text""
                ).get(),
                ""image_urls"": image_urls,  # <- set image_urls here too
                ""path"": make_path(image_urls),  # <- calculate paths
            }
        )
        if len(space_urls) > 0:
            yield scrapy.Request(
                url=space_urls.pop(),
                headers=self.headers,
                cb_kwargs={""item"": item, ""space_urls"": space_urls},
                dont_filter=True,
                callback=self.parse_similar_ideas,
            )
        else:
            yield item


# IMAGE_PIPELINE

class HouzzImagePipeline(ImagesPipeline):  # Inherit the ImagePipeline class
    def get_media_requests(self, item, info):
        for image_url in item[""image_urls""]:
            yield scrapy.Request(image_url)

    def file_path(self, request, response=None, info=None, *, item=None):
        # use the same calculation as in your spider file to determine paths
        image_url_hash = hashlib.md5(request.url.encode()).hexdigest()
        item[
            ""path""
        ] = f""{image_url_hash[:3]}/{image_url_hash[3:6]}/{image_url_hash[6:9]}""
        image_filename = f""{image_url_hash}.jpg""
        return item[""path""] + image_filename

    def item_completed(self, results, item, info):
        # once the item is complete you can delete the master
        # image_urls list and rename the temporary one
        item[""image_urls""] = item[""imageURL""]
        del item[""imageURL""]
        return item"
sWhD4nch,Untitled,Lennjart,Lua,Monday 15th of May 2023 03:55:52 AM CDT,"local args = {...}
local distToDig = tonumber(args[1])

function digUp()
    local state = false
    while not state do
        state = turtle.digUp()
    end
end

function dig()
    local state = false
    while not state do
        state = turtle.dig()
    end
end

function DigDist( dist )
    for i = 1, dist, 1 do
        dig()
        turtle.forward()

        if not turtle.detectDown() then
            turtle.placeDown()
        end
        
        digUp()
    end
end

print(""Running..."")

local i = 0
while i < distToDig do
    DigDist(1)

    turtle.turnLeft()
    DigDist(10)
    turtle.turnRight()
    turtle.turnRight()

    DigDist(20)

    turtle.turnLeft()
    turtle.turnLeft()
    DigDist(10)

    turtle.turnRight()
    DigDist(2)
    i = i+3

end

print(""Done."")"
3kmRC7fw,Directory Tree,Zgragselus,C++,Monday 15th of May 2023 03:43:04 AM CDT,"#include ""DirectoryTree.h""

using namespace SkyeCuillin;

DirectoryTree::Record* DirectoryTree::CreateSubtree(const std::string& directory)
{
	std::vector<std::string> list;

	Engine::Files::DirectoryRead(directory, list);

	Record* r = new Record(Type::DIRECTORY, directory.substr(directory.find_last_of('/') + 1));

	for (size_t i = 0; i < list.size(); i++)
	{
		if (list[i][list[i].length() - 1] == '/')
		{
			r->mChildren.push_back(CreateSubtree(directory + ""/"" + list[i].substr(0, list[i].length() - 1)));
		}
		else
		{
			printf(""%s\n"", (directory + ""/"" + list[i]).c_str());
			Record* rec = new Record(Type::FILE, list[i]);
			ProcessFile(rec, directory + ""/"" + list[i], list);
			r->mChildren.push_back(rec);
		}
	}

	return r;
}

void DirectoryTree::ProcessFile(Record* r, const std::string& file, std::vector<std::string>& files)
{
	Engine::LoaderDevIL textureLoader(mLog);
	Engine::LoaderAssimp modelLoader(mLog, mRenderer);
	modelLoader.SetManagers(mMeshManager, mModelManager, mTextureManager);
	modelLoader.SetTextureHeap(mRenderer->Heap(), nullptr);

	if ((file.find("".tga"") != std::string::npos) || (file.find("".png"") != std::string::npos))
	{
		Engine::Manager<Engine::Texture>::Node* node = mTextureManager->GetNode(file);

		Engine::LoaderDevIL::Image* image = textureLoader.Load(file);
		if (image != nullptr)
		{
			image->mUseAlphaMipmap = false;
			textureLoader.GenerateMipmaps(image);
		}
		Engine::Texture* t = new Engine::Texture(file);
		t->InitMipmaps(mRenderer, image->mWidth, image->mHeight, 1, image->mMipLevels, Engine::Graphics::RGBA8, (const void**)image->mMipmaps);
		t->SetName(file);
		if (node == nullptr)
		{
			mTextureManager->Insert<Engine::Texture>(file, t);
			node = mTextureManager->GetNode(file);
		}
		else
		{
			delete node->mItem;
			node->mItem = t;
		}
		delete image;

		r->mResourceType = ResourceType::TEXTURE;
		r->mResource = node;
	}
	else if (file.find("".obj"") != std::string::npos)
	{
		Engine::Manager<Engine::Model>::Node* node = mModelManager->GetNode(file);

		Engine::Model* mdl = modelLoader.Load(file);
		if (node == nullptr)
		{
			mModelManager->Insert<Engine::Model>(file, mdl);
			node = mModelManager->GetNode(file);
		}
		else
		{
			delete node->mItem;
			node->mItem = mdl;
		}
		
		r->mResourceType = ResourceType::MODEL;
		r->mResource = node;
	}
	else if (file.find("".cpp"") != std::string::npos)
	{
		// Check if there isn't dll that corresponds to the cpp file
		bool compile = true;
		for (size_t i = 0; i < files.size(); i++)
		{
			std::string filesName = files[i].substr(0, files[i].length() - 4);
			std::string cmpName = Engine::Files::GetFile(file.substr(0, file.length() - 4));

			if ((files[i].substr(0, files[i].length() - 4) == Engine::Files::GetFile(file.substr(0, file.length() - 4))) &&
				(files[i].find("".dll"") != std::string::npos))
			{
				// If such dll exists, check if its write time is greater than cpp write time
				if (Engine::Files::GetWriteTime(Engine::Files::GetFolder(file) + files[i]) > Engine::Files::GetWriteTime(file))
				{
					// In such case our dll is most-recent version of the script, we don't need to compile
					compile = false;
				}
			}
		}

		// If we need to compile, build the dll
		if (compile)
		{
			std::string command = """";

			switch (mCompilerType)
			{
			// MSVC Compiler
			case MSVC:
				// Here is the deal, MSVC always generates .obj, .exp, .lib and .dll file in the current folder
				// so, we will call the MSVC compiler with all settings, and let it build dll, writing output 
				// to Build.log
				//
				// Once this is done, we will delete .obj, .exp and .lib file as we don't need those anymore. 
				// Which is followed by copying .dll file into the folder where .cpp file originally was, this
				// is not all though - as we just generated a new .dll plugin, we also need to queue it for 
				// loading!
				//
				// The loading only happens when .dll exists (otherwise the compilation has failed and the
				// Build.log has to be examined.
				//
				// Uses system calls!

				// Compilation (differs for DEBUG vs RELEASE builds)
#ifdef NDEBUG
				command = std::string(""cmd /S /C \""\"""") + mCompilerPaths[0] + std::string(""/vcvarsall.bat\"" amd64 && \
					\"""") + mCompilerPaths[1] + std::string(""/cl.exe\"" /O2 /EHsc /GL /MD /I \
					\""../Source/\"" \
					/LD \
					"") + file + std::string("" \
					\""Core.lib\"" \
					> Build.log\"""");
#else
				command = std::string(""cmd /S /C \""\"""") + mCompilerPaths[0] + std::string(""/vcvarsall.bat\"" amd64 && \
					\"""") + mCompilerPaths[1] + std::string(""/cl.exe\"" /O2 /EHsc /GL /MDd /I \
					\""../Source/\"" \
					/LD \
					"") + file + std::string("" \
					\""Core.lib\"" \
					> Build.log\"""");
#endif
				system(command.c_str());

				// Delete .obj, .exp and .lib files
				command = std::string(""cmd /S /C \""del "") 
					+ std::string(""\"""") + Engine::Files::GetFile(file.substr(0, file.length() - 4)) + std::string("".obj"") + std::string(""\"" "")
					+ std::string(""\"""") + Engine::Files::GetFile(file.substr(0, file.length() - 4)) + std::string("".exp"") + std::string(""\"" "")
					+ std::string(""\"""") + Engine::Files::GetFile(file.substr(0, file.length() - 4)) + std::string("".lib"") + std::string(""\""\"""");
				system(command.c_str());

				// Move .dll file
				command = std::string(""cmd /S /C \""move "")
					+ std::string(""\"""") + Engine::Files::GetFile(file.substr(0, file.length() - 4)) + std::string("".dll"") + std::string(""\"" "")
					+ Engine::Files::GetFolder(file) + std::string(""\"""");
				system(command.c_str());

				// If the .dll file exists in correct location, enqueue it for loading as next file
				if (Engine::Files::Exists(file.substr(0, file.length() - 4) + std::string("".dll"")))
				{
					files.push_back(file.substr(0, file.length() - 4) + std::string("".dll""));
				}
				break;

			default:
				mLog->Print(""Compiler"", ""Error: Invalid Compiler - Can't Compiler Any File!"");
				break;
			}
		}
	}
	else if (file.find("".dll"") != std::string::npos)
	{
		Engine::Manager<Engine::Plugin>::Node* node = mPluginManager->GetNode(file);

		mLog->Print(""Plugin"", std::string(""Loading plugin: "") + file);
		Engine::Plugin* plugin = new Engine::Plugin(file);
		void* create = plugin->GetProc<void*>(""CreateBehavior"");
		void* name = plugin->GetProc<void*>(""GetName"");
		const char* (*fn)() = (const char*(*)())name;
		const char* pluginName = (*fn)();

		if (create == nullptr || name == nullptr)
		{
			mLog->Print(""Plugin"", std::string(""CreateBehavior or GetName function not found!""));
			delete plugin;
		}
		else
		{
			mLog->Print(""Plugin"", std::string(""CreateBehavior and GetName function found!""));
			mLog->Print(""Plugin"", std::string(""Initializing plugin with name: "") + pluginName);

			if (node == nullptr)
			{
				mPluginManager->Insert<Engine::Plugin>(file, plugin);
				node = mPluginManager->GetNode(file);

				Engine::ComponentId componentID = Engine::ComponentTypeId::Get(pluginName);

				Engine::ComponentInterface* componentInterface = new Engine::ComponentInterface();
				componentInterface->CreateComponent = (Engine::Component*(*)())create;

				Engine::ComponentFactory::GetScriptComponentManager().insert(std::pair<Engine::ComponentId, Engine::ComponentInterface*>(componentID, componentInterface));
			}
			else
			{
				delete node->mItem;
				node->mItem = plugin;
			}

			r->mResourceType = ResourceType::SCRIPT;
			r->mResource = node;
		}
	}
}

DirectoryTree::Record* DirectoryTree::GetSubtreeRoot(std::string& directory)
{
	Record* r = mRoot;

	std::string::iterator itDir = directory.begin();
	std::string::iterator itNode = r->mName.begin();
	while (itDir != directory.end() && itNode != r->mName.end() && (*itDir) == (*itNode))
	{
		itDir++;
		itNode++;
	}

	std::vector<std::string> path = Engine::String::Split(directory.substr(itDir - directory.begin()), '/');
	for (size_t i = 0; i < path.size(); i++)
	{
		if (path[i].length() > 0)
		{
			for (size_t j = 0; j < r->mChildren.size(); j++)
			{
				if (r->mChildren[j]->mName == path[i])
				{
					r = r->mChildren[j];
					break;
				}
			}
		}
	}

	return r;
}

void DirectoryTree::UpdateSubtree(std::string& directory)
{
	std::vector<std::string> list;

	Engine::Files::DirectoryRead(directory, list);

	Record* r = GetSubtreeRoot(directory);

	std::set<std::string> nodes;
	for (Record* t : r->mChildren)
	{
		nodes.insert(t->mName);
	}

	for (size_t i = 0; i < list.size(); i++)
	{
		bool found = false;

		std::string name = list[i];

		if (list[i][list[i].length() - 1] == '/')
		{
			name = list[i].substr(0, list[i].length() - 1);
		}

		for (size_t j = 0; j < r->mChildren.size(); j++)
		{
			if (r->mChildren[j]->mName == name)
			{
				found = true;
				nodes.erase(name);
				break;
			}
		}

		if (!found)
		{
			if (list[i][list[i].length() - 1] == '/')
			{
				r->mChildren.push_back(CreateSubtree(directory + ""/"" + list[i].substr(0, list[i].length() - 1)));
			}
			else
			{
				r->mChildren.push_back(new Record(Type::FILE, list[i]));
			}
		}
	}

	for (const std::string& s : nodes)
	{
		for (size_t j = 0; j < r->mChildren.size(); j++)
		{
			if (r->mChildren[j]->mName == s)
			{
				r->mChildren.erase(r->mChildren.begin() + j);
				break;
			}
		}
	}
}

void DirectoryTree::_ImguiRenderRecord(Record* r)
{
	for (size_t i = 0; i < r->mChildren.size(); i++)
	{
		bool nodeOpen = false;

		if (ImGui::TreeNodeEx(r->mChildren[i]->mName.c_str(),
			//((r->mChildren[i]->mType == Type::FILE && r->mChildren[i]->mResourceType != ResourceType::MODEL) ? ImGuiTreeNodeFlags_Leaf : 0) |
			(r->mChildren[i]->mType == Type::FILE ? ImGuiTreeNodeFlags_Leaf : 0) |
			ImGuiTreeNodeFlags_OpenOnArrow | 
			(r->mChildren[i]->mResourceType != ResourceType::MODEL ? ImGuiTreeNodeFlags_DefaultOpen : 0)))
		{
			nodeOpen = true;

			if (r->mChildren[i]->mType != Type::DIRECTORY)
			{
				if (ImGui::BeginDragDropSource())
				{
					printf(""%lx\n"", r->mChildren[i]->mResource);
					switch (r->mChildren[i]->mResourceType)
					{
					case ResourceType::MODEL:
						ImGui::SetDragDropPayload(""RESOURCE_MODEL"", &(r->mChildren[i]->mResource), sizeof(Record*));
						ImGui::Text(""%s"", r->mChildren[i]->mName.c_str());
						break;

					case ResourceType::TEXTURE:
						ImGui::SetDragDropPayload(""RESOURCE_TEXTURE"", &(r->mChildren[i]->mResource), sizeof(void*));
						ImGui::Image((ImTextureID)(((Engine::Manager<Engine::Texture>::Node*)r->mChildren[i]->mResource)->mItem->GetSRV().mGpuHandle.ptr), ImVec2(64, 64));
						break;

					case ResourceType::SCRIPT:
						ImGui::SetDragDropPayload(""RESOURCE_SCRIPT"", &(r->mChildren[i]->mResource), sizeof(void*));
						ImGui::Text(""%s"", r->mChildren[i]->mName.c_str());
						break;

					default:
						break;
					}
					ImGui::EndDragDropSource();
				}

				if (ImGui::IsItemClicked())
				{
					printf(""%s\n"", r->mChildren[i]->mName.c_str());
				}

				if (r->mChildren[i]->mResourceType == ResourceType::MODEL)
				{
					Engine::Manager<Engine::Model>::Node* node = (Engine::Manager<Engine::Model>::Node*)(r->mChildren[i]->mResource);

					for (size_t j = 0; j < node->Get()->GetMeshesCount(); j++)
					{
						if (ImGui::TreeNodeEx(node->Get()->GetMesh(j)->GetName().c_str(), ImGuiTreeNodeFlags_Leaf))
						{
							if (ImGui::BeginDragDropSource())
							{
								Engine::Mesh* mesh = node->Get()->GetMesh(j);
								ImGui::SetDragDropPayload(""RESOURCE_MESH"", &mesh, sizeof(void*));
								ImGui::Text(""%s"", node->Get()->GetMesh(j)->GetName().c_str());
								ImGui::EndDragDropSource();
							}
						}
						ImGui::TreePop();
					}
				}
			}
		}

		if (r->mChildren[i]->mType == Type::DIRECTORY)
		{
			if (nodeOpen)
			{
				_ImguiRenderRecord(r->mChildren[i]);
			}
		}

		if (nodeOpen)
		{
			ImGui::TreePop();
		}
	}
}

DirectoryTree::DirectoryTree(const std::string& directory, Engine::Constants* options, Engine::Log* log, Engine::D3DRenderer* renderer)
{
	std::string path = directory;
	std::replace(path.begin(), path.end(), '\\', '/');

	mPath = path;
	mOptions = options;
	mLog = log;
	mRenderer = renderer;

	std::string compilerType = mOptions->Get<std::string>(""Compiler.Type"");
	if (compilerType == ""Visual Studio 2022"")
	{
		mCompilerType = MSVC;
		mCompilerPaths = new std::string[2];
		mCompilerPaths[0] = mOptions->Get<std::string>(""Compiler.VCVarsAllPath"");
		mCompilerPaths[1] = mOptions->Get<std::string>(""Compiler.CLPath"");
	}
	else
	{
		mLog->Print(""Compiler"", std::string(""Error: Unknown Compiler or Compiler Not Set - Critical Error - Please Fix Config File!""));
		mCompilerPaths = nullptr;
	}
}

DirectoryTree::~DirectoryTree()
{
	delete mRoot;

	if (mCompilerPaths)
	{
		delete[] mCompilerPaths;
	}
}

void DirectoryTree::Initialize()
{
	mRoot = CreateSubtree(mPath);
}

void DirectoryTree::SetManagers(Engine::Manager<Engine::Mesh>* meshManager, 
	Engine::Manager<Engine::Model>* modelManager, 
	Engine::Manager<Engine::Texture>* textureManager,
	Engine::Manager<Engine::Plugin>* pluginManager)
{
	mMeshManager = meshManager;
	mModelManager = modelManager;
	mTextureManager = textureManager;
	mPluginManager = pluginManager;
}

void DirectoryTree::Imgui()
{
	_ImguiRenderRecord(mRoot);
}

void DirectoryTree::NotifyChange(std::string location)
{
	mChanges.push_back(location);
}

void DirectoryTree::ProcessChanges()
{
	for (const std::string& s : mChanges)
	{
		printf(""Processing: '%s'\n"", s.c_str());
		std::string path = mOptions->Get<std::string>(""Editor.Resources"") + ""/"" + s;
		std::replace(path.begin(), path.end(), '\\', '/');
		Engine::Files::Type type = Engine::Files::GetType(path);

		if (type == Engine::Files::Type::DIRECTORY)
		{
			UpdateSubtree(path);
		}
		else
		{
			std::string directory = path.substr(0, path.find_last_of('/'));
			mFiles.push_back(path);
			UpdateSubtree(directory);
		}

		mTextureManager->Print();
	}

	mChanges.clear();

	for (const std::string& s : mFiles)
	{
		Engine::LoaderDevIL loader(mLog);

		printf(""%s\n"", s.c_str());
		if (s.find("".tga"") != std::string::npos)
		{
			Engine::Manager<Engine::Texture>::Node* node = mTextureManager->GetNode(s);
			if (node != nullptr)
			{
				Engine::LoaderDevIL::Image* image = loader.Load(s);
				if (image != nullptr)
				{
					image->mUseAlphaMipmap = false;
					loader.GenerateMipmaps(image);
				}
				Engine::Texture* t = new Engine::Texture(s);
				t->InitMipmaps(mRenderer, image->mWidth, image->mHeight, 1, image->mMipLevels, Engine::Graphics::RGBA8, (const void**)image->mMipmaps);
				t->SetName(s);
				delete node->mItem;
				node->mItem = t;
				delete image;
			}
		}
	}

	mFiles.clear();
}"
gq1PisLZ,Some script I found in the new roblox studio template,Mryeetmemes,Lua,Monday 15th of May 2023 03:40:11 AM CDT,"local Seat = script.Parent.Seat
local ProximityPrompt = script.Parent.ProximityPrompt

ProximityPrompt.Triggered:connect(function(plr) -- upon clicking
	if Seat.Occupant then return end -- make sure seat isn't already taken

	local char = plr.Character
	if not char then return end -- make sure the player has a character

	local humanoid = char:FindFirstChildOfClass(""Humanoid"")
	if not humanoid then return end -- make sure the char has a humanoid
	
	Seat:Sit(humanoid) -- forces the humanoid to sit on the seat
end)

Seat:GetPropertyChangedSignal(""Occupant""):Connect(function()
	local humanoid = Seat.Occupant
	if humanoid then
		ProximityPrompt.Enabled = false
	else
		ProximityPrompt.Enabled = true
	end
end)"
bxuED99J,DestroyHelperUI script in new roblox studio template,Mryeetmemes,Lua,Monday 15th of May 2023 03:36:07 AM CDT,workspace.TempStorage.HelperGUI:Destroy()
N27V9VBA,SoundRandomizer script in new roblox studio template,Mryeetmemes,Lua,Monday 15th of May 2023 03:35:13 AM CDT,"local rng = Random.new()

local function RandomInRange(range: number)
	return rng:NextNumber(-range / 2, range / 2)
end

local function GetNumber(inst: Instance, name: string)
	local total: number = 0
	while inst do
		total += inst:GetAttribute(name) or 0
		inst = inst.Parent
	end
	return total
end

local module = {
	[""MakeOneshot""] = function(sound: Sound) -- pass in a prototype sound to be cloned
		local pitchJitter : number = GetNumber(sound, ""PitchJitter"")
		local volumeJitter : number = GetNumber(sound, ""VolumeJitter"")
		
		local clone = sound:Clone()
		clone.Ended:Connect(function() clone:Destroy() end)
		clone.Looped = false
		clone.PlaybackSpeed = sound.PlaybackSpeed + RandomInRange(pitchJitter)
		clone.Volume = sound.Volume + RandomInRange(volumeJitter)
		clone.Parent = workspace
		
		return clone
	end
}

return module
"
eZZBjUQw,SoundPlayer script in new roblox studio template,Mryeetmemes,Lua,Monday 15th of May 2023 03:33:39 AM CDT,"local Randomizer = require(script.SoundRandomizer)
local rng = Random.new()

local function GatherSounds(inst: Instance)
	local list = {}
	if inst:IsA(""Sound"") then
		table.insert(list, inst)
	end
	
	for _, i in pairs(inst:GetDescendants()) do
		if i:IsA(""Sound"") then
			table.insert(list, i)
		end
	end
	return list
end

local function PickFrom(inst: Instance) : Sound?
	local sounds = GatherSounds(inst)
	if #sounds == 0 then return nil end
	return sounds[rng:NextInteger(1, #sounds)]
end

type Positionable = Part | Attachment | Vector3 | Vector2
type Vec = Vector2 | Vector3

local function ToVector3(at: Vector2) : Vector3
	return workspace.Camera:ScreenPointToRay(at.X, at.Y, 50).Origin
end

local function MakeTempPart(at: Vec) : Part
	local part = Instance.new(""Part"")
	part.CanQuery = false
	part.CanTouch = false
	part.CanCollide = false
	part.Transparency = 1
	part.Size = Vector3.new(1, 1, 1)
	part.Anchored = true
	
	if typeof(at) == ""Vector3"" then
		part.Position = at
	else
		part.Position = ToVector3(at)
	end
	
	part.Parent = workspace
	return part
end

local function CreateOneShot(prototype: Instance, from: Positionable?) : Sound?
	if not prototype then return end

	local chosen = PickFrom(prototype)
	if not chosen then return end

	local oneshot = Randomizer.MakeOneshot(chosen)
	if from then 
		if typeof(from) == ""Instance"" then
			oneshot.Parent = from 
		else
			local part = MakeTempPart(from)
			oneshot.Ended:Connect(function() part:Destroy() end)
			oneshot.Parent = part
		end
	end
	return oneshot
end

local module = {
	[""PlayWithVisuals""] = function(prototype: Instance, from: Positionable?)
		local sound = CreateOneShot(prototype, from)
		if not sound then return end
		
		local sphere: SphereHandleAdornment = Instance.new(""SphereHandleAdornment"", sound)
		sphere.Visible = true
		sphere.Adornee = sound.Parent
		sphere.Radius = sound.RollOffMinDistance
		
		sound:Play()
	end,
	[""Play""] = function(prototype: Instance, from: Positionable?)
		local sound = CreateOneShot(prototype, from)
		if not sound then return end
		sound:Play()
	end
}

return module
"
J5jWAn8i,Sound_Birds script in new roblox studio template,Mryeetmemes,Lua,Monday 15th of May 2023 03:31:01 AM CDT,"local SoundPlayer = require(script.SoundPlayer)
local rng = Random.new()

while not script.Sounds.Value do wait() end
while not script.Part.Value do wait() end

function PositionWithin(part: Part?) : Vector3?
	if not part then return nil end
	
	local halfSize = part.Size / 2
	local offset = Vector3.new(
		rng:NextNumber(-halfSize.X, halfSize.X),
		rng:NextNumber(-halfSize.Y, halfSize.Y),
		rng:NextNumber(-halfSize.Z, halfSize.Z)
	)
	return part.CFrame:PointToWorldSpace(offset)
end

while true do 
	local playbackInterval = script:GetAttribute(""PlaybackInterval"")
	wait(rng:NextNumber(playbackInterval.Min, playbackInterval.Max))
	
	local isVolumetric = script:GetAttribute(""IsVolumetric"") or false
	local Sounds = script.Sounds.Value
	local Part = script.Part.Value
	
	local from = if isVolumetric then Part else PositionWithin(Part)
	
	if script:GetAttribute(""VisualizeEmitters"") then
		SoundPlayer.PlayWithVisuals(Sounds, from)
	else
		SoundPlayer.Play(Sounds, from)
	end
end
"
dcUyYY9F,HA custom button card layered,mikelauritsen,YAML,Monday 15th of May 2023 03:27:31 AM CDT,"type: custom:button-card
entity: binary_sensor.workday_sensor
show_icon: true
show_entity_picture: false
show_name: false
icon: mdi:circle
state:
  - value: 'on'
    styles:
      icon:
        - color: green
  - value: 'off'
    styles:
      icon:
        - color: red
styles:
  card:
    - height: 110px
  grid:
   - position: absolute
  icon:
    - position: absolute
    - align-self: middle
    - justify-self: center
    - width: 100px
    - z-index: 0
  custom_fields:
    image:
      - position: absolute
      - align-self: middle
      - justify-self: center
      - z-index: 1
custom_fields:
  image: >
    [[[
      return `<img src=""/local/images/smiley2.png"" style=""width: 75px""></img>`
    ]]]
"
