id,title,username,language,date,content
zRAfjzxQ,roblox chat logger to webhook,ahmad1218,Lua,Thursday 25th of May 2023 06:56:30 AM CDT,"getgenv().webhookUrl = """" -- put your discord webhook in """"
local http_request = http_request or request or HttpPost or syn.request

local function sendToWebhook(message)
    local data = {
        content = message
    }

    local headers = {
        [""Content-Type""] = ""application/json""
    }

    local webhookUrl = getgenv().webhookUrl
    if not webhookUrl then
        print(""webhookUrl is not set."")
        return
    end

    local success, response = pcall(function()
        return http_request({
            Url = webhookUrl,
            Method = ""POST"",
            Headers = headers,
            Body = game:GetService(""HttpService""):JSONEncode(data)
        })
    end)

    if success then
        print(""Message sent to Discord webhook!"")
    else
        print(""Failed to send message to Discord webhook. Error: "" .. response)
    end
end

-- Event handler for chat messages
local function onPlayerChatted(message)
    sendToWebhook(message)
end

game.Players.LocalPlayer.Chatted:Connect(onPlayerChatted)"
ztVZL3GS,data583,TestGuy1,JSON,Thursday 25th of May 2023 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'fa943ba490227f580c0914085c05e157ad6cfc948b4d8e03895821ceb59359b9939b42383276bc6a068ebe4cf8517870102e61d8605f98c2fb06b6cf11a2e183b54a647915da6cab5bafb1e43a6a363f9b2ed73dcb84c106e7bcd2dce4ad4e41c2cef1593ef3a21e5eaaead78bfd0d609443dded3300307e2ff39bfaaec70054',
  otherdata: [
    '78851e5de042971f57b6d766087b5755',
    '907a17f4bfefa79ac2a99a8a20ef1125',
    '154c980171c61c207dd7093021fa0985',
    '502e7899f670e7704d3eab108e5803e3',
    '3bacc7e0f56a2caf81dd8b951f5bf5e7',
    '561cce85c85ecdcfd359ce4f1a656d46',
    'b9aa6cc7a9e8eea5ffcbc96ed0b3bcac',
    '68ebc1e77a31a5224b699a616afffd95'
  ]
}"
7AuzaJ9N,Untitled,Ethicist,PHP,Thursday 25th of May 2023 05:54:22 AM CDT,"<?php

$botToken = 'YOUR_BOT_TOKEN';
$chatID = 'CHAT_ID';
$message = '<b>Жирный текст</b> <i>Курсивный текст</i> <a href=""https://example.com"">Ссылка</a>';

$apiURL = ""https://api.telegram.org/bot$botToken/sendMessage"";

$ch = curl_init($apiURL);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([
    'chat_id' => $chatID,
    'text' => $message,
    'parse_mode' => 'HTML',
]));
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

$response = curl_exec($ch);

if ($response === false) {
    echo 'Ошибка: ' . curl_error($ch);
} else {
    echo 'Сообщение успешно отправлено!';
}

curl_close($ch);
?>
"
LuRYsijr,Untitled,antisa,C,Thursday 25th of May 2023 05:51:41 AM CDT,"///// MAIN

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include ""header.h""

const char* const imeDatoteke = ""C:\\Users\\student\\source\\repos\\aaaaLV8\\clanovi.bin"";

int main() {

	int temp = 1;

	kreiranjeDatoteke(imeDatoteke);

	while (temp) {
		temp = izbornik(imeDatoteke);
	}

	printf(""Kraj programa!\n"");
	return 0;
}

/////// FUNCTIONS

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include ""header.h""


static int brojClanova = 0;

void kreiranjeDatoteke(const char* const imeDatoteke) {

	FILE* pF = fopen(imeDatoteke, ""wb"");
	if (pF == NULL) { exit(EXIT_FAILURE); }
	fwrite(&brojClanova, sizeof(int), 1, pF);
	fclose(pF);

}

int izbornik(const char* const imeDatoteke) {
	printf(""===================="");
	printf(""Odaberite jednu od ponudenih opcija:"");
	printf(""====================\n"");
	printf(""\t\t\tOpcija 1: Dodavanje clanova!\n"");
	printf(""\t\t\tOpcija 2: Citanje clanova!\n"");
	printf(""\t\t\tOpcija 3: Ispis o svim korisnicima!\n"");
	printf(""\t\t\tOpcija 4: Pretraga po ID-u!\n"");
	printf(""\t\t\tOpcija 5: Zavrsetak programa!\n"");
	printf(""======================================\
======================================\n"");
	int uvjet;
	static CLAN* poljeClanova = NULL;
	static CLAN* pronadeniClan = NULL;
	scanf(""%d"", &uvjet);
	switch (uvjet) {
	case 1:
		dodavanjeClanova(imeDatoteke);
		break;
	case 2:
		if (poljeClanova != NULL) { free(poljeClanova); poljeClanova = NULL; }
		poljeClanova = (CLAN*)ucitavanjeClanova(imeDatoteke);
		if (poljeClanova == NULL) { exit(EXIT_FAILURE); }
		break;
	case 3:
		ispisivanjeClanova(poljeClanova); break;
	case 4:
		pronadeniClan = (CLAN*)pretrazivanjeClanova(poljeClanova); break;
	case 5:
		uvjet = izlazIzPrograma(poljeClanova); break;
	default:
		uvjet = 0;
	}
	return uvjet;
}


void dodavanjeClanova(const char* const imeDatoteke) {

	FILE* pF = fopen(imeDatoteke, ""rb+"");
	if (pF == NULL) { perror(""Dodavanje clanova""); exit(EXIT_FAILURE); }

	fread(&brojClanova, sizeof(int), 1, pF);
	CLAN temp = { 0 };
	temp.id = brojClanova;
	getchar();
	printf(""Unesite ime clana!\n"");
	scanf(""%19[^\n]"", temp.ime);
	printf(""Unesite prezime clana!\n"");
	getchar();
	scanf(""%29[^\n]"", temp.prezime);
	printf(""Unesite adresu clana!\n"");
	getchar();
	scanf(""%49[^\n]"", temp.adresa);
	printf(""Unesite broj mobitela clana!\n"");
	scanf(""%d"", &temp.brMob);
	do {
	
		printf(""Unesite broj posudenih filmova:\n"");
		scanf(""%d"", &temp.brFilm);

	} while (temp.brFilm > 5);
	fseek(pF, sizeof(CLAN) * brojClanova, SEEK_CUR);
	fwrite(&temp, sizeof(CLAN), 1, pF); rewind(pF); brojClanova++; fwrite(&brojClanova, sizeof(int), 1, pF);
	fclose(pF);
	printf(""\n"");

}

void* ucitavanjeClanova(const char* const imeDatoteke) {

	FILE* pF = fopen(imeDatoteke, ""ab+"");
	if (pF == NULL) { return NULL; }
	fread(&brojClanova, sizeof(int), 1, pF);
	CLAN* poljeClanova = (CLAN*)calloc(brojClanova, sizeof(CLAN));
	if (poljeClanova == NULL) { return NULL; }
	fread(poljeClanova, sizeof(CLAN), brojClanova, pF);
	return poljeClanova;
	printf(""\n"");
}

void ispisivanjeClanova(const CLAN* const poljeClanova) {

	if (poljeClanova == NULL) { return; }
	int i;
	for (i = 0; i < brojClanova; i++) {
	
		printf(""Clan broj %d      ID: %d      ime: %s          prezime: %s      adresa: %s      broj mobitela: %d      broj posudenih filmova: %d\n"",
			i + 1,
			(poljeClanova + i)->id,
			(poljeClanova + i)->ime,
			(poljeClanova + i)->prezime,
			(poljeClanova + i)->adresa,
			(poljeClanova + i)->brMob,
			(poljeClanova + i)->brFilm);


	}
	printf(""\n"");
}

void* pretrazivanjeClanova(CLAN* const poljeClanova) {

	if (poljeClanova == NULL) { return NULL; }
	int i, b, priv = 0;
	printf(""Unesite id\n"");
	scanf(""%d"", &b);
	for (i = 0; i < brojClanova; i++) {
	
		if (b == (poljeClanova + i)->id) {

			printf(""Clan pronaden!\n"");
			printf(""Clan broj %d\tID: %d\time: %s\tprezime: %s\tadresa: %s\tbroj mobitela: %d\tbroj posudenih filmova: %d\n\n"",
				i + 1,
				(poljeClanova + i)->id,
				(poljeClanova + i)->ime,
				(poljeClanova + i)->prezime,
				(poljeClanova + i)->adresa,
				(poljeClanova + i)->brMob,
				(poljeClanova + i)->brFilm);
			return(poljeClanova + 1);

		}
		else priv = 1;
	
	}
	if (priv == 1) { printf(""Clan ne postoji!\n""); }
	printf(""\n"");

}

int izlazIzPrograma(CLAN* poljeClanova) {

	char ime[3] = { '\0' };
	printf(""Jeste li sigurni da zelite zavrsiti program?\n"");
	scanf(""%2s"", ime);
	if (!strcmp(""da"", ime)) {
		free(poljeClanova);
		return 0;
	}
	return 1;

}


//////// HEADER


#pragma once
typedef struct {

	int id;
	char ime[20];
	char prezime[20];
	char adresa[50];
	int brMob;
	int brFilm;

}CLAN;

void kreiranjeDatoteke(const char* const imeDatoteke);
int izbornik(const char* const imeDatoteke);
void dodavanjeClanova(const char* const imeDatoteke);
void* ucitavanjeClanova(const char* const imeDatoteke);
void ispisivanjeClanova(const CLAN* const poljeClanova);
void* pretrazivanjeClanova(CLAN* const poljeClanova);
int izlazIzPrograma(CLAN* poljeClanova);"
D6Uvhy5z,work10_7,plarmi,Python,Thursday 25th of May 2023 05:48:28 AM CDT,"import turtle
window = turtle.Screen()
window.title(u""Черепаха по спирали!"")
turtle.shape(""turtle"")
# y - количество поворотов спирали
# кривизну спирали можно изменять значением постоянного множиеля (5) в функции forward
x = 1
y = int(turtle.textinput(u""Количество поворотов спирали"", ""Введите желаемое количество поворотов спирали""))
while x <= y:
    turtle.forward(5*x)
    turtle.left(90)
    x += 1
window.exitonclick()"
u73etuWJ,work10_6,plarmi,Python,Thursday 25th of May 2023 05:47:52 AM CDT,"import turtle
import math
window = turtle.Screen()
window.title(u""Черепаха по спирали!"")
turtle.shape(""turtle"")
turtle.speed(0)
# y - количество поворотов спирали
# кривизну спирали можно изменять значением постоянного множиеля (5) в функции forward
x = 0
while True:
    turtle.forward(x / 2 *  math.pi)
    turtle.left(2 * math.pi)
    x += 0.01
window.exitonclick()"
mWCjigH6,work10_5,plarmi,Python,Thursday 25th of May 2023 05:47:20 AM CDT,"import turtle
t = turtle.Turtle()
t.shape('turtle')
x = 1
while True:
    t.forward(100)
    t.stamp()
    t.backward(100)
    t.right(360 / 12)
    x += 1
    if (x%12) == 1:
        t.clear()"
mckdcnie,work10_4,plarmi,Python,Thursday 25th of May 2023 05:46:10 AM CDT,"import turtle

a = int(input())  # сторона квадрата
turtle.shape('turtle')
while a > 1:
    turtle.pendown()
    for i in range(4):
        turtle.forward(a * 10)
        turtle.right(90)
    turtle.penup()
    turtle.forward(10)
    turtle.right(90)
    turtle.forward(10)
    turtle.left(90)
    a -= 2"
2pTrw80M,work10_3,plarmi,Python,Thursday 25th of May 2023 05:43:32 AM CDT,"import turtle

turtle.color('blue')
turtle.circle(100)
turtle.done()"
YN6HLicf,work10_2,plarmi,Python,Thursday 25th of May 2023 05:41:01 AM CDT,"import turtle

turtle.forward(50)
turtle.left(90)
turtle.forward(50)
turtle.left(90)
turtle.forward(50)
turtle.left(90)
turtle.forward(50)
turtle.left(90)"
dHDkZYJk,work10_1,plarmi,Python,Thursday 25th of May 2023 05:39:42 AM CDT,"import turtle

turtle.shape('turtle')
turtle.forward(50)
turtle.left(90)
turtle.forward(50)
turtle.left(90)
turtle.forward(50)
turtle.right(90)
turtle.forward(50)
turtle.right(90)
turtle.forward(50)"
4x26VYZ4,Урок 5 Бинарные файлы,kutuzzzov,C++,Thursday 25th of May 2023 05:38:34 AM CDT,"// main.cpp

#include ""compressor.h""
#include ""decompressor.h""

#include <cassert>
#include <fstream>
#include <string>
#include <string_view>

using namespace std;

// эта функция нужна для теста
string GetFileContents(string file) {
    ifstream stream(file, ios::binary);

    stream.seekg(0, ios::end);
    size_t sz = stream.tellg();

    stream.seekg(0, ios::beg);
    string res(sz, '\0');

    if (stream.read(res.data(), sz)) {
        return res;
    }

    return {};
}

void Test() {
    ofstream(""test.txt"") << ""abcdaaaaaabbbcdedecdec""sv << string(1000, 'x')
                         << ""\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\xa0""
                            ""decdecdecasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdassdasdassdas""
                            ""dcdecasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdassdasdassdasdcde""
                            ""casdasdasdasdasdasdasdasdasdasdasdasdasdasdasdassdasdassdasdcdecasd""
                            ""asdasdasdasdasdasdasdasdasdasdasdasdasdasdassdasdassdasddeccccccccc""
                            ""cccc""sv;
    EncodeRLE(""test.txt""s, ""test.rle""s);
    DecodeRLE(""test.rle""s, ""test2.txt""s);

    assert(GetFileContents(""test.rle""s).size() < GetFileContents(""test.txt""s).size() / 2);
    assert(GetFileContents(""test.txt""s) == GetFileContents(""test2.txt""s));
}

int main(int argc, const char** argv) {
    if (argc == 1) {
        Test();
        return 0;
    }

    if (argc != 4 || (argv[1] != ""x""sv && argv[1] != ""c""sv)) {
        cout << ""Usage: ""sv << argv[0] << "" c|x <in file> <out file>""sv << endl;
        return 1;
    }

    if (argv[1] == ""c""sv) {
        auto result = EncodeRLE(argv[2], argv[3]);
        if (!result.opened) {
            cout << ""Error opening file""sv << endl;
            return 2;
        }

        cout << ""Compressed ""sv << result.src_size << "" bytes => ""sv << result.dst_size << "" bytes""sv << endl;
    } else {
        if (!DecodeRLE(argv[2], argv[3])) {
            cout << ""Error decoding file""sv << endl;
            return 3;
        }

        cout << ""Successfully decoded""sv << endl;
    }

    return 0;
}

// ---------------------
// compressor.h

#pragma once

// Этот файл содержит компрессор RLE, не меняйте его.
// Можете изучить устройство компрессора, чтобы лучше понять формат сжатого файла.
// Сжатие и разжатие должно давать исходный файл

#include <fstream>
#include <iostream>
#include <string>

class CompressorRLE {
public:
    static const int max_block_size = 128;
    static const int min_repeats_for_special_block = 3;

    CompressorRLE(std::ostream& dst)
        : dst_(dst) {
    }

    void PutChar(char c) {
        if (block_size_ > 0 && c == last_char_) {
            ++repeat_count_;
            if (repeat_count_ >= max_block_size - 1) {
                FinalizeRepeats();
            }
            return;
        }

        FinalizeRepeats();
        AddCharToBlock(c);
    }

    void Finalize() {
        FinalizeRepeats();
        WriteBlock0(block, block_size_);
    }

    size_t GetCompressedSize() const {
        return compressed_size_;
    }

private:
    void FinalizeRepeats() {
        if (repeat_count_ == 0) {
            return;
        }

        // если недостаточно повторов для специального блока
        if (repeat_count_ < min_repeats_for_special_block) {
            for (; repeat_count_ > 0; --repeat_count_) {
                AddCharToBlock(last_char_);
            }
            return;
        }

        // если достаточно повторов
        WriteBlock0(block, block_size_ - 1);
        WriteBlock1(last_char_, repeat_count_ + 1);
        block_size_ = 0;
        repeat_count_ = 0;
    };

    void AddCharToBlock(char c) {
        block[block_size_++] = c;
        if (block_size_ >= max_block_size) {
            WriteBlock0(block, block_size_);
            block_size_ = 0;
        }
        last_char_ = c;
    }

    void WriteBlock0(char* data, int size) {
        if (size == 0) {
            return;
        }

        unsigned char zero = static_cast<unsigned char>(((size - 1) << 1) + 0);
        dst_.put(zero);
        dst_.write(data, size);

        compressed_size_ += 1 + static_cast<size_t>(size);
    }

    void WriteBlock1(char data, int size) {
        if (size == 0) {
            return;
        }

        unsigned char zero = static_cast<unsigned char>(((size - 1) << 1) + 1);
        dst_.put(zero);
        dst_.put(data);

        compressed_size_ += 2;
    }

private:
    std::ostream& dst_;

    size_t compressed_size_ = 0;

    int block_size_ = 0;
    int repeat_count_ = 0;
    char last_char_;

    char block[max_block_size];
};

struct EncodingResult {
    bool opened;
    size_t src_size;
    size_t dst_size;
};

inline EncodingResult EncodeRLE(std::string src_name, std::string dst_name) {
    using namespace std;

    ifstream in(src_name, ios::binary);
    if (!in) {
        return {false, 0, 0};
    }

    ofstream out(dst_name, ios::binary);

    CompressorRLE compressor(out);
    size_t source_size = 0;

    do {
        char buff[1024];
        in.read(buff, sizeof buff);
        size_t read = in.gcount();
        source_size += read;

        for (size_t i = 0; i < read; ++i) {
            compressor.PutChar(buff[i]);
        }
    } while (in);

    compressor.Finalize();

    return {true, source_size, compressor.GetCompressedSize()};
}
// -----------------------

// decompressor.h

#pragma once

#include <string>
#include <fstream>

using namespace std;

// напишите эту функцию
inline bool DecodeRLE(const std::string& src_name, const std::string& dst_name) {
    ifstream src(src_name, std::ios::in | std::ios::binary);
	if (!src) {
		return false;
	}
	ofstream dest(dst_name, std::ios::out | std::ios::binary);
	do {
		unsigned char header = src.get();
		bool series_flag = (header & 1);
		size_t data_size = static_cast<size_t>(header >> 1) + 1;
		if (!series_flag && !src.eof()) {
			char buff[128];
			src.read(buff, data_size);
			size_t readed = src.gcount();
			dest.write(buff, readed);
		}
		else if (!src.eof()){
			unsigned char symbol = src.get();
			string str(data_size, symbol);
			dest.write(str.data(), data_size);
		}
	} while (src);
	return true;
}

"
1BMLWPKJ,jitashe.py,shinemic,Python,Thursday 25th of May 2023 05:38:29 AM CDT,"from requests_html import HTMLSession, requests
from typing import Union
from pathlib import Path
import logging


class JitasheDownloader:
    BASE_URL = 'https://www.jitashe.org'

    def __init__(self):
        self.session = HTMLSession()

    def _search(self, keyword) -> Union[str, None]:
        """""" 查询页，如有查询结果返回第一个，否则返回 None """"""

        search_req = self.session.get(f'{self.BASE_URL}/search/tab/{keyword}')
        search_first = search_req.html.find('#threadlist > div > div.text > a', first=True)
        first_elem_url = search_first and self.BASE_URL + search_first.element.attrib['href']
        return first_elem_url

    def _download(self, keyword, out_dir) -> None:
        """""" 根据查询页返回结果下载乐谱 """"""

        search_url = self._search(keyword)
        if search_url:
            score_req = self.session.get(search_url)
            title = score_req.html.find('h1.gb-title', first=True).text
            scores_url = [url.split('!')[0] for url in score_req.html.xpath(
                '//ignore_js_op/picture/img/@src')]

            if scores_url:
                download_path = Path(out_dir) / title
                download_path.mkdir(parents=True, exist_ok=True)
                filename_width = len(str(len(scores_url)))
                for i, url in enumerate(scores_url, 1):
                    file = download_path / f'{title}-{i:0{filename_width}}.jpg'
                    logging.debug(f'下载中 - {file.name}')
                    file.write_bytes(self.session.get(url).content)

                logging.info(f'完成下载：{title}')
            else:
                logging.info(f'无图片谱: {keyword}')
        else:
            logging.info(f'搜索词「{keyword}」下无对应结果')

        logging.debug('')

    def download(self, keyword, out_dir='./output', max_retry=3) -> None:
        """""" 下载乐谱（支持重试） """"""

        for i in range(max_retry):
            try:
                self._download(keyword, out_dir=out_dir)
                break
            except requests.RequestException:
                logging.error(f'重试第{i + 1}次下载 - {keyword}')
                continue
        else:
            logging.error(f'{max_retry}次尝试下载失败 - {keyword}')


if __name__ == '__main__':
    logging.basicConfig(
        format='[%(asctime)s] [%(levelname)-5s] %(message)s',
        level=logging.INFO,
        datefmt='%Y-%m-%d %T'
    )

    logging.getLogger(""urllib3.connectionpool"").setLevel(logging.CRITICAL)

    downloader = JitasheDownloader()
    song_list = [
        '同桌的你', '十年', '蓝莲花', '千千阙歌', '大海',
        '月亮代表我的心', '童话', '爱情转移', '外婆的澎湖湾',
        '笨小孩', '上海滩', '红日', '我们的爱', '雨一直下',
        '江南','孤勇者', '孤勇者1', '孤勇者2'
    ]
    for song in song_list:
        downloader.download(song)
"
n1FtErB4,admin 3: banner preview,petar_bonov,HTML,Thursday 25th of May 2023 05:23:31 AM CDT,"<style>
table td:first-child {
    white-space: nowrap;    
}
 
table tr:first-child td {
    writing-mode: vertical-lr;
    transform: rotate(-180deg);
    text-align: left;
}
table tr:first-child td b {
    margin: 5px 2px 0 2px;
    display: inline-block;
    font-weight: normal;
    letter-spacing: 0.1px;
}

table .banner-preview {
    display: none;
    position: absolute;
    bottom: 105%;

    writing-mode: horizontal-tb;
    transform: rotate(-180deg) translateX(50%);

    background: white;
    border: 1px solid #888;
    padding: 5px;
}

table .banner-preview span {
    display: inline-block;
    color: black;
    margin-top: 5px;
    font-size: 14px;
}

table a:hover .banner-preview {
    display: block;
}
</style>	

<script>
const BASE_FOLDER = ""https://st.gsmarena.com/imgroot/static/banners/self/"";

window.addEventListener(""DOMContentLoaded"", function () {
    const links = document.querySelectorAll(""table a"");
    for (const link of links) {
        const match = link.innerText.match(/\[[^\]]+\](.+)/);
        if (!match) continue;

        const container = document.createElement(""div"");
        container.classList = ""banner-preview"";

        const image = document.createElement(""img"");
        image.src = BASE_FOLDER + match[1];

        const text = document.createElement(""span"");
        text.innerText = link.innerText;

        container.appendChild(image);
        container.appendChild(text);
        link.appendChild(container);
    }
});
</script>"
efJMgB9H,88% Deposit Bonus | FirewoodFX,fxvnpro,PHP,Thursday 25th of May 2023 05:21:07 AM CDT,https://www.fxvnpro.com/88-deposit-bonus-firewoodfx/
i6VU3RDb,.gitlab-ci.yml,Arexils,YAML,Thursday 25th of May 2023 04:39:41 AM CDT,"deploy:
  stage: deploy
  needs: [ publish ]
  image: gitlab/dind:latest
  only:
    - master
  environment: production
  services:
    - docker:dind
  before_script:
    - mkdir -p ~/.ssh
    - echo ""$DEPLOY_SERVER_PRIVATE_KEY"" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval ""$(ssh-agent -s)""
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
  script:
    - printf ""${ENV}"" > .env
    - scp ./.env root@${DROPLET_IP}:~/
    - scp ./prod.docker-compose.yml root@${DROPLET_IP}:~/docker-compose.yml
    - ssh root@$DROPLET_IP ""docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY_IMAGE}; docker-compose stop; docker-compose down -v; docker-compose rm -f; docker-compose pull; docker-compose up -d --force-recreate; docker-compose exec -T discord alembic upgrade head""
"
MvfCejYg,Untitled,benalb,Python,Thursday 25th of May 2023 04:27:09 AM CDT,"# Template file for 'python3-dominate'
pkgname=python3-dominate
version=2.8.0
revision=1
build_style=python3-module
hostmakedepends=""python3-setuptools""
depends=""python3""
checkdepends=""python3-pytest""
short_desc=""Library for creating and manipulating HTML (Python3)""
maintainer=""Benjamín Albiñana <benalb@gmail.com>""
license=""LGPL-3.0-or-later""
homepage=""https://github.com/Knio/dominate""
distfiles=""https://github.com/Knio/dominate/archive/${version}.tar.gz""
checksum=4e55f84b8446fe4338a7acaf60bbb1cb133a81c4c7a46a196b904c9f8387d377

pre_check() {
        # this fix the failed test in i686
        # https://github.com/Knio/dominate/issues/175
        if [""XBPS_TARGET_MACHINE"" == ""i686""]; then
                vsed -i '/3713141171098444831/i  \\t\t1692341442, # i686' tests/test_dom_tag.py
        fi
}
"
VweKeWjs,Search in BST,momo2345,C++,Thursday 25th of May 2023 04:03:41 AM CDT," class Solution {
 public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(root == nullptr) return nullptr;
        if( root->val == val) 
            return root;
        else{
            if(val < root->val) return searchBST(root->left, val);
            else return searchBST(root->right, val);
        }
       return NULL; 
    }
 };"
PYaQCiuX,Omkar and Tree,momo2345,C++,Thursday 25th of May 2023 04:00:13 AM CDT,"#include<bits/stdc++.h>
using namespace std;
#define suni ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    long long  n, m, u, a,b,c;
    map<long long, bool> mp;
    int tc;
    cin>>tc;
    while(tc--)
    {
        mp.clear();
        cin>>n>>m;
        for(long long i=1; i<=m; i++)
        {
            cin>>a>>b>>c;
            mp[b] = true;
        }
        for(long long i=1; i<=n; i++)
        {
            if(mp[i] == false)
            {
                u= i;
                break;
            }
        }
        for(long long i=1; i<=n; i++)
        {
            if(i != u) cout<<u<<"" ""<<i<<endl;
        }
    }
}
"
1bGaGrXk,Pls Donate Steal Player Booth Text v2,HairBaconGamming,Lua,Thursday 25th of May 2023 03:50:39 AM CDT,"local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local UIStroke = Instance.new(""UIStroke"")
local UIGradient = Instance.new(""UIGradient"")
local ScrollingFrame = Instance.new(""ScrollingFrame"")
local UIGridLayout = Instance.new(""UIGridLayout"")
local Title = Instance.new(""TextLabel"")
local CloseButton = Instance.new(""ImageButton"")
local UIAspectRatioConstraint = Instance.new(""UIAspectRatioConstraint"")
local UIGradient2 = Instance.new(""UIGradient"")
local Mimimize = Instance.new(""ImageButton"")
local UIAspectRatioConstraint_2 = Instance.new(""UIAspectRatioConstraint"")

local close = false

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.DisplayOrder = 12345

Frame.BackgroundColor3 = Color3.new(0.207843, 0.207843, 0.207843)
Frame.BorderColor3 = Color3.new(1, 1, 1)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui
Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
Frame.Size = UDim2.new(0, 0,0, 0)

UIStroke.Color = Color3.new(1, 1, 1)
UIStroke.Thickness = 0
UIStroke.LineJoinMode = Enum.LineJoinMode.Round
UIStroke.Parent = Frame

UIGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,Color3.new(0,1,1),0),ColorSequenceKeypoint.new(1,Color3.new(0,0,1),0)})
UIGradient.Rotation = 90
UIGradient.Parent = UIStroke
game:GetService(""TweenService""):Create(UIStroke,TweenInfo.new(1,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Thickness = 15}):Play()
task.wait(1)
game:GetService(""TweenService""):Create(Frame,TweenInfo.new(1,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.421, 0,0, 0),Position = UDim2.new(0.29344511,0,.5,0)}):Play()
task.wait(1)
game:GetService(""TweenService""):Create(UIStroke,TweenInfo.new(1,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Thickness = 2}):Play()
game:GetService(""TweenService""):Create(Frame,TweenInfo.new(1,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.421, 0,0.545, 0),Position = UDim2.new(0.29344511, 0, 0.25573191, 0)}):Play()
task.wait(1)

ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.new(1, 1, 1)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.Parent = Frame
ScrollingFrame.Position = UDim2.new(0, 0, 0.177993521, 0)
ScrollingFrame.ScrollBarThickness = 8
ScrollingFrame.Size = UDim2.new(1, 0, 0.822006464, 0)

UIGridLayout.CellSize = UDim2.new(0, 190, 0, 120)
UIGridLayout.Parent = ScrollingFrame
UIGridLayout.SortOrder = Enum.SortOrder.Name

Title.BackgroundColor3 = Color3.new(1, 1, 1)
Title.BackgroundTransparency = 1
Title.Font = Enum.Font.SourceSans
Title.Name = [[Title]]
Title.Parent = Frame
Title.Position = UDim2.new(0, 0, 0.0226537697, 0)
Title.Size = UDim2.new(1, 0, 0.129126236, 0)
Title.Text = [[Players <b>Booth</b>]]
Title.TextColor3 = Color3.new(1, 1, 1)
Title.TextScaled = true
Title.TextSize = 14
Title.TextWrapped = true
Title.RichText = true

UIGradient2.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,Color3.new(0,1,1),0),ColorSequenceKeypoint.new(1,Color3.new(0,0.431373,1),0)})
UIGradient2.Rotation = 90
UIGradient2.Parent = Title

CloseButton.BackgroundColor3 = Color3.new(0.207843, 0.207843, 0.207843)
CloseButton.BorderSizePixel = 0
CloseButton.Image = [[http://www.roblox.com/asset/?id=9545003266]]
CloseButton.Parent = Frame
CloseButton.Position = UDim2.new(0.940540552, 0, 0.0226537213, 0)
CloseButton.Size = UDim2.new(0.047, 0,0.084, 0)

Mimimize.BackgroundColor3 = Color3.new(0.207843, 0.207843, 0.207843)
Mimimize.BorderSizePixel = 0
Mimimize.Image = [[http://www.roblox.com/asset/?id=8874551390]]
Mimimize.Name = [[Mimimize]]
Mimimize.Parent = Frame
Mimimize.Position = UDim2.new(0.873873889, 0, 0.0226537213, 0)
Mimimize.Size = UDim2.new(0.047, 0,0.084, 0)

UIAspectRatioConstraint_2.Parent = Mimimize

UIAspectRatioConstraint.Parent = CloseButton

local function ScaleToOffset(Scale)
	local ViewPortSize = workspace.Camera.ViewportSize
	return ({ViewPortSize.X * Scale[1],ViewPortSize.Y * Scale[2]})
end


local function OffsetToScale(Offset)
	local ViewPortSize = workspace.Camera.ViewportSize
	return ({Offset[1] / ViewPortSize.X, Offset[2] / ViewPortSize.Y})
end

spawn(function()
	local UserInputService = game:GetService(""UserInputService"")

	local gui = Frame

	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		delta = OffsetToScale({delta.X,delta.Y})
		gui.Position = UDim2.new(math.clamp(startPos.X.Scale + delta[1],0.001,1-Frame.Size.X.Scale),0,math.clamp(startPos.Y.Scale + delta[2],0,1-Frame.Size.Y.Scale),0)
	end

	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = gui.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	gui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end)

function CreateTemp(Booth)
	local Temp = Instance.new(""Frame"")
	local Sign = Instance.new(""TextBox"")
	local UserName = Instance.new(""TextLabel"")
	local Raised = Instance.new(""TextLabel"")
	local ImageButton = Instance.new(""ImageButton"")
	local UIAspectRatioConstraint = Instance.new(""UIAspectRatioConstraint"")
	local Set = Instance.new(""ImageButton"")
	local UIAspectRatioConstraint = Instance.new(""UIAspectRatioConstraint"")

	Set.BackgroundColor3 = Color3.new(1, 1, 1)
	Set.BackgroundTransparency = 1
	Set.Image = [[rbxassetid://13543789510]]
	Set.Name = [[Set]]
	Set.Parent = Temp
	Set.Position = UDim2.new(0.0266666412, 0, 0.0299999993, 0)
	Set.Size = UDim2.new(0.153333336, 0, 0.230000004, 0)
	Set.ZIndex = 2
	Set.Visible = false

	UIAspectRatioConstraint.Parent = Set

	ImageButton.BackgroundColor3 = Color3.new(1, 1, 1)
	ImageButton.BackgroundTransparency = 1
	ImageButton.Image = [[rbxassetid://13543256601]]
	ImageButton.Parent = Temp
	ImageButton.Position = UDim2.new(0.823, 0,0.03, 0)
	ImageButton.Size = UDim2.new(0.153, 0,0.23, 0)
	ImageButton.Visible = false
	ImageButton.ZIndex = 2

	UIAspectRatioConstraint.Parent = ImageButton
	
	Temp.BackgroundColor3 = Color3.new(0.168627, 0.168627, 0.168627)
	Temp.BorderSizePixel = 0
	Temp.Name = 0
	Temp.Parent = ScrollingFrame
	Temp.Size = UDim2.new(0, 100, 0, 100)

	Sign.BackgroundColor3 = Color3.new(1, 1, 1)
	Sign.BackgroundTransparency = 1
	Sign.BorderSizePixel = 0
	Sign.Font = Enum.Font.GothamBlack
	Sign.Name = [[Sign]]
	Sign.Parent = Temp
	Sign.Size = UDim2.new(1, 0, 0.610000014, 0)
	Sign.Text = Booth.Sign.TextLabel.Text
	Sign.TextColor3 = Color3.new(1, 1, 1)
	Sign.TextSize = 14
	Sign.ClearTextOnFocus = false
	Sign.RichText = true
	Sign.TextScaled = true
	Sign.Changed:Connect(function(property)
		if property == ""Text"" then
			Sign.Text = Booth.Sign.TextLabel.Text
		end
	end)
	Booth.Sign.TextLabel.Changed:Connect(function(property)
		Sign.Text = Booth.Sign.TextLabel.Text
	end)

	UserName.BackgroundColor3 = Color3.new(1, 1, 1)
	UserName.BackgroundTransparency = 1
	UserName.BorderSizePixel = 0
	UserName.Font = Enum.Font.GothamBlack
	UserName.Name = [[UserName]]
	UserName.Parent = Temp
	UserName.Position = UDim2.new(0, 0, 0.610000014, 0)
	UserName.Size = UDim2.new(1, 0, 0.196875021, 0)
	UserName.Text = Booth.Details.Owner.Text
	UserName.TextColor3 = Color3.new(1, 1, 1)
	UserName.TextScaled = true
	UserName.TextSize = 14
	UserName.TextWrapped = true
	UserName.RichText = true

	Raised.BackgroundColor3 = Color3.new(1, 1, 1)
	Raised.BackgroundTransparency = 1
	Raised.BorderSizePixel = 0
	Raised.Font = Enum.Font.GothamBlack
	Raised.Name = [[Raised]]
	Raised.Parent = Temp
	Raised.Position = UDim2.new(0, 0, 0.80687499, 0)
	Raised.Size = UDim2.new(1, 0, 0.163124964, 0)
	Raised.Text = Booth.Details.Raised.Text
	Raised.TextColor3 = Color3.new(0, 1, 0)
	Raised.TextScaled = true
	Raised.TextSize = 14
	Raised.TextWrapped = true
	Raised.RichText = true
	spawn(function()
		while task.wait() do
			if Booth.Details.Owner.Text == ""unclaimed"" then
				Temp.Name = 1
				Raised.Text = """"
			else
				Temp.Name = 0
			end
		end
	end)
	
	Booth.Details.Raised.Changed:Connect(function(property)
		Raised.Text = Booth.Details.Raised.Text
	end)
	Booth.Details.Owner.Changed:Connect(function(property)
		UserName.Text = Booth.Details.Owner.Text
	end)
	
	local db = true
	ImageButton.MouseButton1Click:Connect(function()
		if db then
			db = false
			setclipboard(Sign.Text)
			local soundeffect = Instance.new(""Sound"",workspace)
			soundeffect.Name = game:GetService(""HttpService""):GenerateGUID(false)
			soundeffect.SoundId = ""rbxassetid://2127127709""
			soundeffect.Volume = 1
			soundeffect:Play()
			delay(.757,function()
				soundeffect:Destroy()
			end)
			ImageButton.Image = ""rbxassetid://13543429829""
			task.wait(.5)
			ImageButton.Image = ""rbxassetid://13543256601""
			db = true
		end
	end)
	
	local db2 = true
	Set.MouseButton1Click:Connect(function()
		if db2 then
			db2 = false
			local module = require(game.ReplicatedStorage.Remotes)
			local event = module.Event(""SetBoothText"")
			event:FireServer(Sign.Text, ""booth"")
			local soundeffect = Instance.new(""Sound"",workspace)
			soundeffect.Name = game:GetService(""HttpService""):GenerateGUID(false)
			soundeffect.SoundId = ""rbxassetid://2127127709""
			soundeffect.Volume = 1
			soundeffect:Play()
			delay(.757,function()
				soundeffect:Destroy()
			end)
			Set.Image = ""rbxassetid://13543429829""
			task.wait(.5)
			Set.Image = ""rbxassetid://13543789510""
			db2 = true
		end
	end)
	
	Temp.MouseEnter:Connect(function()
		ImageButton.Visible = true
		Set.Visible = true
	end)
	Temp.MouseLeave:Connect(function()
		ImageButton.Visible = false
		Set.Visible = false
	end)
end

CloseButton.MouseButton1Click:Connect(function()
	CloseButton:Destroy()
	ScrollingFrame:Destroy()
	Title:Destroy()
	CloseButton:Destroy()
	Mimimize:Destroy()
	game:GetService(""TweenService""):Create(Frame,TweenInfo.new(0.8,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.421, 0,0, 0),Position = UDim2.new(0.29344511,0,.5,0)}):Play()
	task.wait(1)
	game:GetService(""TweenService""):Create(Frame,TweenInfo.new(0.8,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0, 0,0, 0),Position = UDim2.new(0.5,0,.5,0)}):Play()
	task.wait(.8)
	ScreenGui:Destroy()
end)

local db = true
Mimimize.MouseButton1Click:Connect(function()
	if db then
		db = false
		close = not close
		if close then
			ScrollingFrame.Visible = false
			Mimimize.Image = ""rbxassetid://13544050613""
			Mimimize.Visible = false
			CloseButton.Visible = false
			Title.Visible = false
			game:GetService(""TweenService""):Create(Frame,TweenInfo.new(0.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.25, 0,0.025, 0)}):Play()
			game:GetService(""TweenService""):Create(CloseButton,TweenInfo.new(0.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.1, 0,0.9, 0),Position = UDim2.new(0.95, 0,0.05, 0)}):Play()
			game:GetService(""TweenService""):Create(Mimimize,TweenInfo.new(0.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.1, 0,0.9, 0),Position = UDim2.new(0.88, 0,0.05, 0)}):Play()
			game:GetService(""TweenService""):Create(Title,TweenInfo.new(0.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.7, 0,0.9, 0),Position = UDim2.new(0.01, 0,0.05, 0)}):Play()
			task.wait(.5)
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.Visible = true
			Mimimize.Visible = true
			CloseButton.Visible = true
		else
			Mimimize.Visible = false
			CloseButton.Visible = false
			Title.Visible = false
			Mimimize.Image = ""http://www.roblox.com/asset/?id=8874551390""
			game:GetService(""TweenService""):Create(Frame,TweenInfo.new(0.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.421, 0,0.545, 0)}):Play()
			game:GetService(""TweenService""):Create(CloseButton,TweenInfo.new(0.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.047, 0,0.084, 0),Position = UDim2.new(0.940540552, 0, 0.0226537213, 0)}):Play()
			game:GetService(""TweenService""):Create(Mimimize,TweenInfo.new(0.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(0.047, 0,0.084, 0),Position = UDim2.new(0.873873889, 0, 0.0226537213, 0)}):Play()
			game:GetService(""TweenService""):Create(Title,TweenInfo.new(0.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.In),{Size = UDim2.new(1, 0, 0.129126236, 0),Position = UDim2.new(0, 0, 0.0226537697, 0)}):Play()
			task.wait(.5)
			Title.TextXAlignment = Enum.TextXAlignment.Center
			Title.Visible = true
			Mimimize.Visible = true
			CloseButton.Visible = true
			ScrollingFrame.Visible = true
			Title.Visible = true
		end
		db = true
	end
end)

for i,v in pairs(game.Players.LocalPlayer.PlayerGui.MapUIContainer.MapUI.BoothUI:GetChildren()) do
	CreateTemp(v)
	ScrollingFrame.CanvasSize = UDim2.new(0,UIGridLayout.AbsoluteContentSize.X,0,UIGridLayout.AbsoluteContentSize.Y)
end"
8SmZJqZK,CleanedSunFloor,Lorfa,C,Thursday 25th of May 2023 03:47:31 AM CDT,"// floor(x)
// Return x rounded toward -inf to integral value
// Method: Bit twiddling.
// Exception: Inexact flag raised if x not equal to floor(x)

static const double huge = 1.0e300;

double floor(double x)

{
	int i0,i1,j0;
	
	unsigned int i,j;
	
	i0 =  *(1 + (int*)&x); 				// __HI(x)
	
	i1 =  *(int*)&x;     				// __LO(x)
	
	j0 = ((i0 >> 20) & 0x7ff) - 0x3ff;  
		
	if (j0 < 20) {                      
		
	    if (j0 < 0) { 			  		// raise inexact if x != 0;
	    
			if (huge + x > 0.0) { 		// return 0 * sign(x) if |x| < 1
			
		    	if (i0 >= 0) {i0 = i1 = 0;} 
		    	
		    		else if (((i0 & 0x7fffffff) | i1) != 0)
		    	
					{i0 = 0xbff00000; i1=0;}
							    }
		
	    		    }	
		
			else {						
			
				i = (0x000fffff) >> j0;				
		
				if (((i0 & i) | i1) == 0) return x; // x is integral				
		
					if (huge + x > 0.0) {	// raise inexact flag
				
		    			if (i0 < 0) {       
										
							i0 += (0x00100000) >> j0; 							
		    		
		    				i0 &= (~i);
					
							i1=0;
						
							}
						}
	    		}
	    
	} else if (j0 > 51) {
	    
		if (j0 == 0x400) return x + x;	// inf or NaN
		
	    	else return x;			    // x is integral
	    
			}
	
	 else {
		
	    i = ((unsigned)(0xffffffff)) >> (j0 - 20);
	    
	    if ((i1 & i) == 0) return x;	// x is integral
	    
	    if (huge + x > 0.0) { 		    // raise inexact flag
	    
			if (i0 < 0) {
			
		    	if (j0 == 20) i0 += 1; 
		    
		    	else {
		    	
			j = i1 + (1 << (52 - j0));
			
			if (j < i1) i0 += 1 ; 		// got a carry
			
			i1 = j;
			
		    		}
			}
			
		i1 &= (~i);
		
	    }
	}
		
	*(1 + (int*)&x) = i0;
	
	*(int*)&x = i1;
	
	return x;	
}"
1b3LEeEZ,Actualiza ACT ALM_VALUE,AntonioVillanueva,Python,Thursday 25th of May 2023 03:32:32 AM CDT,"#Actualiza ALM_VALUE Act
#!/usr/bin/python3
# -*- coding: utf-8

import sys

# Función para actualizar el valor de ALM_VALUE
def actualizar_ALM_VALUE(linea, valor):
	print (linea,valor)
	inicio = linea.find("":"") + 1  # Encuentra la posición del ':' y agrega 1 para omitirlo
	return linea[:inicio] + "" "" + str(valor) + ""\n""  # Reemplaza el valor después del ':' con el nuevo valor	

def main(fichero):

	nombre_archivo=fichero
	
	with open(nombre_archivo, ""r"") as archivo:
		lineas = archivo.readlines()

	contador = 0 #Contador NBR_ALMs
	nuevo_valor =0 #ALM_VALUE first value

	# Actualiza los valores de ALM_VALUE
	for i in range(len(lineas)):
		linea = lineas[i]
		if ""ALM_VALUE:"" in linea or 'ALM_NUM:' in linea:
			print(linea)
			#valor_actual = int(linea.split("":"")[1])
			nuevo_valor = nuevo_valor + 10  # Incrementa de 10 en 10
			contador += 1
			lineas[i] = actualizar_ALM_VALUE(linea, nuevo_valor)

	# Escribe los resultados actualizados en el archivo
	with open(nombre_archivo, ""w"") as archivo:
		archivo.writelines(lineas)

	# Imprime el recuento de ALM_VALUE
	print(""Num. ALM_VALUEs"", contador)

if __name__ == ""__main__"":
	
	if len(sys.argv) < 2 or not sys.argv[1]:
		print (""Nombre de fichero no valido "")
		sys.exit()
	
	print (""Mise à Jour "",sys.argv[1])
	main(sys.argv[1])

sys.exit()
"
RV7FDHq3,Nigerian scammers [25-5-1/2023],bombaires,HTML,Thursday 25th of May 2023 02:51:00 AM CDT,"<a href=""mailto:gschmiechen162@gmail.com"">gschmiechen162@gmail.com</a>
<a href=""mailto:g.s.chmi.e.che.n1.6.2@gmail.com"">g.s.chmi.e.che.n1.6.2@gmail.com</a>
<a href=""mailto:g.sc.h.mi.e.c.h.e.n.1.62@gmail.com"">g.sc.h.mi.e.c.h.e.n.1.62@gmail.com</a>
<a href=""mailto:g.s.chmi.ech.e.n.1.6.2@gmail.com"">g.s.chmi.ech.e.n.1.6.2@gmail.com</a>
<a href=""mailto:g.sch.mie.c.h.e.n16.2@gmail.com"">g.sch.mie.c.h.e.n16.2@gmail.com</a>
<a href=""mailto:g.sch.mie.ch.e.n1.62@gmail.com"">g.sch.mie.ch.e.n1.62@gmail.com</a>
<a href=""mailto:gs.c.hmie.c.h.en.1.6.2@gmail.com"">gs.c.hmie.c.h.en.1.6.2@gmail.com</a>
<a href=""mailto:gschmie.che.n1.62@gmail.com"">gschmie.che.n1.62@gmail.com</a>
<a href=""mailto:gs.c.hm.i.ech.e.n162@gmail.com"">gs.c.hm.i.ech.e.n162@gmail.com</a>
<a href=""mailto:gsch.m.i.e.chen.1.62@gmail.com"">gsch.m.i.e.chen.1.62@gmail.com</a>
<a href=""mailto:gsc.hmi.echen.1.62@gmail.com"">gsc.hmi.echen.1.62@gmail.com</a>
<a href=""mailto:g.sch.m.ie.c.h.e.n162@gmail.com"">g.sch.m.ie.c.h.e.n162@gmail.com</a>
<a href=""mailto:g.s.c.h.m.i.ec.he.n.162@gmail.com"">g.s.c.h.m.i.ec.he.n.162@gmail.com</a>
<a href=""mailto:gs.c.hm.i.e.c.h.en.16.2@gmail.com"">gs.c.hm.i.e.c.h.en.16.2@gmail.com</a>
<a href=""mailto:gsc.hmi.ec.hen1.62@gmail.com"">gsc.hmi.ec.hen1.62@gmail.com</a>
<a href=""mailto:g.sch.miech.en.1.62@gmail.com"">g.sch.miech.en.1.62@gmail.com</a>
<a href=""mailto:gsch.mie.c.h.e.n1.6.2@gmail.com"">gsch.mie.c.h.e.n1.6.2@gmail.com</a>
<a href=""mailto:g.sc.h.m.ie.che.n.1.6.2@gmail.com"">g.sc.h.m.ie.che.n.1.6.2@gmail.com</a>
<a href=""mailto:gsc.h.m.ie.ch.en.1.62@gmail.com"">gsc.h.m.ie.ch.en.1.62@gmail.com</a>
<a href=""mailto:gsch.mie.ch.en.16.2@gmail.com"">gsch.mie.ch.en.16.2@gmail.com</a>
<a href=""mailto:gschmi.e.c.hen16.2@gmail.com"">gschmi.e.c.hen16.2@gmail.com</a>
<a href=""mailto:gs.ch.mi.ec.h.en.1.6.2@gmail.com"">gs.ch.mi.ec.h.en.1.6.2@gmail.com</a>
<a href=""mailto:gs.ch.mi.echen.1.6.2@gmail.com"">gs.ch.mi.echen.1.6.2@gmail.com</a>
<a href=""mailto:g.s.c.hm.iec.h.en1.62@gmail.com"">g.s.c.hm.iec.h.en1.62@gmail.com</a>
<a href=""mailto:g.schmiech.en.1.62@gmail.com"">g.schmiech.en.1.62@gmail.com</a>
<a href=""mailto:gs.chm.ie.c.hen.162@gmail.com"">gs.chm.ie.c.hen.162@gmail.com</a>
<a href=""mailto:g.schm.i.ech.e.n.162@gmail.com"">g.schm.i.ech.e.n.162@gmail.com</a>
<a href=""mailto:gsch.mi.e.chen16.2@gmail.com"">gsch.mi.e.chen16.2@gmail.com</a>
<a href=""mailto:g.s.chm.i.e.c.h.en.16.2@gmail.com"">g.s.chm.i.e.c.h.en.16.2@gmail.com</a>
<a href=""mailto:g.s.chm.iec.hen.1.6.2@gmail.com"">g.s.chm.iec.hen.1.6.2@gmail.com</a>
<a href=""mailto:gsc.h.miech.e.n1.62@gmail.com"">gsc.h.miech.e.n1.62@gmail.com</a>
<a href=""mailto:gs.chm.i.echen.1.62@gmail.com"">gs.chm.i.echen.1.62@gmail.com</a>
<a href=""mailto:gsc.hmie.che.n.1.6.2@gmail.com"">gsc.hmie.che.n.1.6.2@gmail.com</a>
<a href=""mailto:gs.ch.m.i.eche.n1.62@gmail.com"">gs.ch.m.i.eche.n1.62@gmail.com</a>
<a href=""mailto:gs.chm.i.ech.en1.6.2@gmail.com"">gs.chm.i.ech.en1.6.2@gmail.com</a>
<a href=""mailto:gsc.hmi.ech.en.162@gmail.com"">gsc.hmi.ech.en.162@gmail.com</a>
<a href=""mailto:g.sch.miec.he.n1.6.2@gmail.com"">g.sch.miec.he.n1.6.2@gmail.com</a>
<a href=""mailto:g.sch.m.ie.c.h.en162@gmail.com"">g.sch.m.ie.c.h.en162@gmail.com</a>
<a href=""mailto:gs.chm.iechen.1.6.2@gmail.com"">gs.chm.iechen.1.6.2@gmail.com</a>
<a href=""mailto:g.s.ch.m.ie.chen162@gmail.com"">g.s.ch.m.ie.chen162@gmail.com</a>
<a href=""mailto:g.schm.ie.c.h.en1.6.2@gmail.com"">g.schm.ie.c.h.en1.6.2@gmail.com</a>
<a href=""mailto:g.s.chmi.e.c.he.n.1.6.2@gmail.com"">g.s.chmi.e.c.he.n.1.6.2@gmail.com</a>
<a href=""mailto:g.sch.mie.ch.e.n.16.2@gmail.com"">g.sch.mie.ch.e.n.16.2@gmail.com</a>
<a href=""mailto:gs.c.h.mi.ec.h.en162@gmail.com"">gs.c.h.mi.ec.h.en162@gmail.com</a>
<a href=""mailto:gs.c.hmi.e.ch.en1.6.2@gmail.com"">gs.c.hmi.e.ch.en1.6.2@gmail.com</a>
<a href=""mailto:g.schm.i.e.ch.en.1.62@gmail.com"">g.schm.i.e.ch.en.1.62@gmail.com</a>
<a href=""mailto:gs.ch.m.i.e.c.h.en.1.6.2@gmail.com"">gs.ch.m.i.e.c.h.en.1.6.2@gmail.com</a>
<a href=""mailto:gsc.h.m.ie.c.he.n162@gmail.com"">gsc.h.m.ie.c.he.n162@gmail.com</a>
<a href=""mailto:gs.chm.ie.c.he.n1.62@gmail.com"">gs.chm.ie.c.he.n1.62@gmail.com</a>
<a href=""mailto:gsc.h.m.ie.chen.16.2@gmail.com"">gsc.h.m.ie.chen.16.2@gmail.com</a>
<a href=""mailto:gs.c.hm.i.e.chen162@gmail.com"">gs.c.hm.i.e.chen162@gmail.com</a>
<a href=""mailto:g.s.ch.mi.ec.h.en16.2@gmail.com"">g.s.ch.mi.ec.h.en16.2@gmail.com</a>
<a href=""mailto:gsc.hm.ie.ch.e.n.162@gmail.com"">gsc.hm.ie.ch.e.n.162@gmail.com</a>
<a href=""mailto:g.sc.hm.ie.c.he.n.16.2@gmail.com"">g.sc.hm.ie.c.he.n.16.2@gmail.com</a>
<a href=""mailto:gs.ch.mi.ech.e.n.162@gmail.com"">gs.ch.mi.ech.e.n.162@gmail.com</a>
<a href=""mailto:gs.chmi.ec.he.n16.2@gmail.com"">gs.chmi.ec.he.n16.2@gmail.com</a>
<a href=""mailto:g.sc.h.mi.ec.hen.1.62@gmail.com"">g.sc.h.mi.ec.hen.1.62@gmail.com</a>
<a href=""mailto:gs.chm.ie.che.n162@gmail.com"">gs.chm.ie.che.n162@gmail.com</a>
<a href=""mailto:gsch.mi.ec.he.n.1.62@gmail.com"">gsch.mi.ec.he.n.1.62@gmail.com</a>
<a href=""mailto:g.s.chm.ie.ch.e.n1.62@gmail.com"">g.s.chm.ie.ch.e.n1.62@gmail.com</a>
<a href=""mailto:gs.chmi.eche.n.1.6.2@gmail.com"">gs.chmi.eche.n.1.6.2@gmail.com</a>
<a href=""mailto:g.schmi.ech.e.n.162@gmail.com"">g.schmi.ech.e.n.162@gmail.com</a>
<a href=""mailto:g.schmi.e.ch.e.n.1.62@gmail.com"">g.schmi.e.ch.e.n.1.62@gmail.com</a>
<a href=""mailto:g.sch.mie.chen.16.2@gmail.com"">g.sch.mie.chen.16.2@gmail.com</a>
<a href=""mailto:g.sc.hm.i.ech.e.n162@gmail.com"">g.sc.hm.i.ech.e.n162@gmail.com</a>
<a href=""mailto:g.s.c.hmie.ch.en1.62@gmail.com"">g.s.c.hmie.ch.en1.62@gmail.com</a>
<a href=""mailto:g.schm.iec.hen.1.6.2@gmail.com"">g.schm.iec.hen.1.6.2@gmail.com</a>
<a href=""mailto:gs.c.h.mi.echen1.62@gmail.com"">gs.c.h.mi.echen1.62@gmail.com</a>
<a href=""mailto:gschmie.che.n.16.2@gmail.com"">gschmie.che.n.16.2@gmail.com</a>
<a href=""mailto:gs.c.h.m.i.e.c.h.e.n.1.6.2@gmail.com"">gs.c.h.m.i.e.c.h.e.n.1.6.2@gmail.com</a>
<a href=""mailto:g.sc.h.m.ie.c.he.n.1.62@gmail.com"">g.sc.h.m.ie.c.he.n.1.62@gmail.com</a>
<a href=""mailto:g.s.c.hm.ie.ch.e.n.162@gmail.com"">g.s.c.hm.ie.ch.e.n.162@gmail.com</a>
<a href=""mailto:g.s.c.hm.i.e.c.he.n.16.2@gmail.com"">g.s.c.hm.i.e.c.he.n.16.2@gmail.com</a>
<a href=""mailto:gs.c.hmie.chen.16.2@gmail.com"">gs.c.hmie.chen.16.2@gmail.com</a>
<a href=""mailto:gs.c.hmie.c.h.en16.2@gmail.com"">gs.c.hmie.c.h.en16.2@gmail.com</a>
<a href=""mailto:g.s.chm.i.echen1.6.2@gmail.com"">g.s.chm.i.echen1.6.2@gmail.com</a>
<a href=""mailto:gsc.h.mie.c.he.n162@gmail.com"">gsc.h.mie.c.he.n162@gmail.com</a>
<a href=""mailto:gsch.m.i.e.ch.en.1.6.2@gmail.com"">gsch.m.i.e.ch.en.1.6.2@gmail.com</a>
<a href=""mailto:g.s.chm.i.e.ch.en.16.2@gmail.com"">g.s.chm.i.e.ch.en.16.2@gmail.com</a>
<a href=""mailto:g.s.c.h.mi.ec.h.e.n1.62@gmail.com"">g.s.c.h.mi.ec.h.e.n1.62@gmail.com</a>
<a href=""mailto:g.sc.hm.iech.e.n162@gmail.com"">g.sc.hm.iech.e.n162@gmail.com</a>
<a href=""mailto:gs.c.h.m.i.e.c.hen16.2@gmail.com"">gs.c.h.m.i.e.c.hen16.2@gmail.com</a>
<a href=""mailto:g.sc.h.m.iechen.162@gmail.com"">g.sc.h.m.iechen.162@gmail.com</a>
<a href=""mailto:gs.chm.ie.ch.e.n.162@gmail.com"">gs.chm.ie.ch.e.n.162@gmail.com</a>
<a href=""mailto:gsch.miechen.1.62@gmail.com"">gsch.miechen.1.62@gmail.com</a>
<a href=""mailto:gs.c.hmiec.h.e.n.1.62@gmail.com"">gs.c.hmiec.h.e.n.1.62@gmail.com</a>
<a href=""mailto:gs.ch.mie.che.n1.6.2@gmail.com"">gs.ch.mie.che.n1.6.2@gmail.com</a>
<a href=""mailto:g.s.c.h.mi.e.ch.en.1.6.2@gmail.com"">g.s.c.h.mi.e.ch.en.1.6.2@gmail.com</a>
<a href=""mailto:g.schm.i.ech.en.16.2@gmail.com"">g.schm.i.ech.en.16.2@gmail.com</a>
<a href=""mailto:g.s.c.hmi.eche.n.1.62@gmail.com"">g.s.c.hmi.eche.n.1.62@gmail.com</a>
<a href=""mailto:gs.chm.i.e.c.he.n16.2@gmail.com"">gs.chm.i.e.c.he.n16.2@gmail.com</a>
<a href=""mailto:g.s.ch.m.ie.c.hen1.6.2@gmail.com"">g.s.ch.m.ie.c.hen1.6.2@gmail.com</a>
<a href=""mailto:gs.c.hmi.e.c.hen162@gmail.com"">gs.c.hmi.e.c.hen162@gmail.com</a>
<a href=""mailto:g.sc.h.mi.ec.he.n.1.62@gmail.com"">g.sc.h.mi.ec.he.n.1.62@gmail.com</a>
<a href=""mailto:g.s.c.hm.i.ec.h.e.n.162@gmail.com"">g.s.c.hm.i.ec.h.e.n.162@gmail.com</a>
<a href=""mailto:g.s.c.h.m.ie.c.h.en.16.2@gmail.com"">g.s.c.h.m.ie.c.h.en.16.2@gmail.com</a>
<a href=""mailto:gs.c.hm.i.ec.he.n1.62@gmail.com"">gs.c.hm.i.ec.he.n1.62@gmail.com</a>
<a href=""mailto:g.sc.hm.i.ec.he.n.162@gmail.com"">g.sc.hm.i.ec.he.n.162@gmail.com</a>
<a href=""mailto:g.s.c.hm.i.e.chen16.2@gmail.com"">g.s.c.hm.i.e.chen16.2@gmail.com</a>
<a href=""mailto:g.sc.hm.i.e.ch.e.n.16.2@gmail.com"">g.sc.hm.i.e.ch.e.n.16.2@gmail.com</a>
<a href=""mailto:gsch.mie.c.h.e.n.16.2@gmail.com"">gsch.mie.c.h.e.n.16.2@gmail.com</a>
<a href=""mailto:gs.c.hmieche.n.162@gmail.com"">gs.c.hmieche.n.162@gmail.com</a>
<a href=""mailto:g.sc.h.m.ie.ch.en162@gmail.com"">g.sc.h.m.ie.ch.en162@gmail.com</a>
<a href=""mailto:g.s.chmi.ec.h.en1.62@gmail.com"">g.s.chmi.ec.h.en1.62@gmail.com</a>
<a href=""mailto:g.s.ch.m.i.e.ch.en16.2@gmail.com"">g.s.ch.m.i.e.ch.en16.2@gmail.com</a>
<a href=""mailto:gs.c.h.miech.en162@gmail.com"">gs.c.h.miech.en162@gmail.com</a>
<a href=""mailto:g.s.c.h.mi.ec.h.e.n.1.62@gmail.com"">g.s.c.h.mi.ec.h.e.n.1.62@gmail.com</a>
<a href=""mailto:gs.c.hm.ie.ch.en.1.6.2@gmail.com"">gs.c.hm.ie.ch.en.1.6.2@gmail.com</a>
<a href=""mailto:gs.chmie.c.h.e.n1.62@gmail.com"">gs.chmie.c.h.e.n1.62@gmail.com</a>
<a href=""mailto:g.sc.h.m.iechen.16.2@gmail.com"">g.sc.h.m.iechen.16.2@gmail.com</a>
<a href=""mailto:gs.ch.mi.ec.h.en16.2@gmail.com"">gs.ch.mi.ec.h.en16.2@gmail.com</a>
<a href=""mailto:g.s.chmie.ch.e.n.16.2@gmail.com"">g.s.chmie.ch.e.n.16.2@gmail.com</a>
<a href=""mailto:g.sch.mi.ec.he.n.1.62@gmail.com"">g.sch.mi.ec.he.n.1.62@gmail.com</a>
<a href=""mailto:gsch.mie.chen16.2@gmail.com"">gsch.mie.chen16.2@gmail.com</a>
<a href=""mailto:gschmi.ec.h.e.n.1.6.2@gmail.com"">gschmi.ec.h.e.n.1.6.2@gmail.com</a>
<a href=""mailto:g.s.ch.mie.ch.e.n162@gmail.com"">g.s.ch.mie.ch.e.n162@gmail.com</a>
<a href=""mailto:g.sc.h.miech.e.n.1.6.2@gmail.com"">g.sc.h.miech.e.n.1.6.2@gmail.com</a>
<a href=""mailto:gsc.hmiech.en.162@gmail.com"">gsc.hmiech.en.162@gmail.com</a>
<a href=""mailto:g.sch.m.ie.c.h.e.n1.6.2@gmail.com"">g.sch.m.ie.c.h.e.n1.6.2@gmail.com</a>
<a href=""mailto:gs.chmi.e.ch.e.n162@gmail.com"">gs.chmi.e.ch.e.n162@gmail.com</a>
<a href=""mailto:gs.c.h.mi.ech.e.n.1.6.2@gmail.com"">gs.c.h.mi.ech.e.n.1.6.2@gmail.com</a>
<a href=""mailto:gs.ch.mi.ec.he.n1.6.2@gmail.com"">gs.ch.mi.ec.he.n1.6.2@gmail.com</a>
<a href=""mailto:g.s.c.hmi.e.ch.e.n.16.2@gmail.com"">g.s.c.hmi.e.ch.e.n.16.2@gmail.com</a>
<a href=""mailto:g.sc.hm.i.e.c.hen.1.62@gmail.com"">g.sc.hm.i.e.c.hen.1.62@gmail.com</a>
<a href=""mailto:gsc.h.miechen1.6.2@gmail.com"">gsc.h.miechen1.6.2@gmail.com</a>
<a href=""mailto:g.s.ch.m.i.e.c.hen.1.62@gmail.com"">g.s.ch.m.i.e.c.hen.1.62@gmail.com</a>
<a href=""mailto:gs.chm.iech.e.n.16.2@gmail.com"">gs.chm.iech.e.n.16.2@gmail.com</a>
<a href=""mailto:gs.c.hm.i.ech.en.1.6.2@gmail.com"">gs.c.hm.i.ech.en.1.6.2@gmail.com</a>
<a href=""mailto:gs.chmiechen.162@gmail.com"">gs.chmiechen.162@gmail.com</a>
<a href=""mailto:g.s.c.hm.ie.chen.162@gmail.com"">g.s.c.hm.ie.chen.162@gmail.com</a>
<a href=""mailto:g.sc.h.mi.e.ch.e.n16.2@gmail.com"">g.sc.h.mi.e.ch.e.n16.2@gmail.com</a>
<a href=""mailto:g.sch.miech.en.16.2@gmail.com"">g.sch.miech.en.16.2@gmail.com</a>
<a href=""mailto:gs.c.h.m.i.ech.e.n.1.62@gmail.com"">gs.c.h.m.i.ech.e.n.1.62@gmail.com</a>
<a href=""mailto:g.s.chm.iech.e.n1.6.2@gmail.com"">g.s.chm.iech.e.n1.6.2@gmail.com</a>
<a href=""mailto:g.s.c.hm.iechen.1.6.2@gmail.com"">g.s.c.hm.iechen.1.6.2@gmail.com</a>
<a href=""mailto:gs.c.hm.i.ec.he.n1.6.2@gmail.com"">gs.c.hm.i.ec.he.n1.6.2@gmail.com</a>
<a href=""mailto:gs.c.h.mi.eche.n.1.6.2@gmail.com"">gs.c.h.mi.eche.n.1.6.2@gmail.com</a>
<a href=""mailto:gschm.i.e.ch.e.n.162@gmail.com"">gschm.i.e.ch.e.n.162@gmail.com</a>
<a href=""mailto:g.s.c.h.m.ie.c.he.n.16.2@gmail.com"">g.s.c.h.m.ie.c.he.n.16.2@gmail.com</a>
<a href=""mailto:gs.c.hmiech.en16.2@gmail.com"">gs.c.hmiech.en16.2@gmail.com</a>
<a href=""mailto:g.s.c.hmie.chen1.62@gmail.com"">g.s.c.hmie.chen1.62@gmail.com</a>
<a href=""mailto:gs.ch.mi.echen.16.2@gmail.com"">gs.ch.mi.echen.16.2@gmail.com</a>
<a href=""mailto:g.s.ch.m.ie.chen.162@gmail.com"">g.s.ch.m.ie.chen.162@gmail.com</a>
<a href=""mailto:g.s.ch.mie.c.hen.16.2@gmail.com"">g.s.ch.mie.c.hen.16.2@gmail.com</a>
<a href=""mailto:g.s.chm.i.e.c.h.e.n162@gmail.com"">g.s.chm.i.e.c.h.e.n162@gmail.com</a>
<a href=""mailto:g.s.c.h.m.i.e.che.n.16.2@gmail.com"">g.s.c.h.m.i.e.che.n.16.2@gmail.com</a>
<a href=""mailto:gs.c.h.mi.ech.e.n16.2@gmail.com"">gs.c.h.mi.ech.e.n16.2@gmail.com</a>
<a href=""mailto:gschm.ie.che.n.162@gmail.com"">gschm.ie.che.n.162@gmail.com</a>
<a href=""mailto:g.s.chmiech.en.16.2@gmail.com"">g.s.chmiech.en.16.2@gmail.com</a>
<a href=""mailto:gs.c.hmi.e.c.hen1.6.2@gmail.com"">gs.c.hmi.e.c.hen1.6.2@gmail.com</a>
<a href=""mailto:g.sc.h.mie.c.hen.1.6.2@gmail.com"">g.sc.h.mie.c.hen.1.6.2@gmail.com</a>
<a href=""mailto:gsc.h.m.iec.hen1.62@gmail.com"">gsc.h.m.iec.hen1.62@gmail.com</a>
<a href=""mailto:gsch.m.i.ech.e.n16.2@gmail.com"">gsch.m.i.ech.e.n16.2@gmail.com</a>
<a href=""mailto:gs.c.h.m.i.e.c.he.n.1.6.2@gmail.com"">gs.c.h.m.i.e.c.he.n.1.6.2@gmail.com</a>
<a href=""mailto:gs.chmiec.h.e.n162@gmail.com"">gs.chmiec.h.e.n162@gmail.com</a>
<a href=""mailto:gs.c.hmie.c.he.n.162@gmail.com"">gs.c.hmie.c.he.n.162@gmail.com</a>
<a href=""mailto:gsc.h.m.iec.he.n.1.6.2@gmail.com"">gsc.h.m.iec.he.n.1.6.2@gmail.com</a>
<a href=""mailto:gs.ch.miec.he.n.1.6.2@gmail.com"">gs.ch.miec.he.n.1.6.2@gmail.com</a>
<a href=""mailto:g.sch.m.ie.ch.e.n1.6.2@gmail.com"">g.sch.m.ie.ch.e.n1.6.2@gmail.com</a>
<a href=""mailto:g.s.c.h.m.i.e.che.n.1.6.2@gmail.com"">g.s.c.h.m.i.e.che.n.1.6.2@gmail.com</a>
<a href=""mailto:g.s.chm.ie.c.h.en.16.2@gmail.com"">g.s.chm.ie.c.h.en.16.2@gmail.com</a>
<a href=""mailto:g.sc.h.mi.ec.h.en.16.2@gmail.com"">g.sc.h.mi.ec.h.en.16.2@gmail.com</a>
<a href=""mailto:g.sc.hm.i.e.c.hen1.62@gmail.com"">g.sc.hm.i.e.c.hen1.62@gmail.com</a>
<a href=""mailto:g.sc.h.m.i.e.chen.1.62@gmail.com"">g.sc.h.m.i.e.chen.1.62@gmail.com</a>
<a href=""mailto:g.s.c.h.m.i.e.c.h.e.n.1.6.2@gmail.com"">g.s.c.h.m.i.e.c.h.e.n.1.6.2@gmail.com</a>
<a href=""mailto:g.sc.hm.ie.c.he.n.1.62@gmail.com"">g.sc.hm.ie.c.he.n.1.62@gmail.com</a>
<a href=""mailto:gsc.h.m.ie.che.n.16.2@gmail.com"">gsc.h.m.ie.che.n.16.2@gmail.com</a>
<a href=""mailto:g.sc.hmi.ec.he.n.1.6.2@gmail.com"">g.sc.hmi.ec.he.n.1.6.2@gmail.com</a>
<a href=""mailto:gsch.m.i.ec.h.e.n1.62@gmail.com"">gsch.m.i.ec.h.e.n1.62@gmail.com</a>
<a href=""mailto:g.s.chm.i.ec.he.n162@gmail.com"">g.s.chm.i.ec.he.n162@gmail.com</a>
<a href=""mailto:gsch.mie.ch.e.n.1.62@gmail.com"">gsch.mie.ch.e.n.1.62@gmail.com</a>
<a href=""mailto:g.s.c.h.mieche.n.16.2@gmail.com"">g.s.c.h.mieche.n.16.2@gmail.com</a>
<a href=""mailto:gschmieche.n.16.2@gmail.com"">gschmieche.n.16.2@gmail.com</a>
<a href=""mailto:g.schmi.e.c.h.en.1.62@gmail.com"">g.schmi.e.c.h.en.1.62@gmail.com</a>
<a href=""mailto:gsc.hmi.e.ch.en162@gmail.com"">gsc.hmi.e.ch.en162@gmail.com</a>
<a href=""mailto:g.s.c.h.m.iech.e.n1.6.2@gmail.com"">g.s.c.h.m.iech.e.n1.6.2@gmail.com</a>
<a href=""mailto:g.s.c.h.miech.e.n.162@gmail.com"">g.s.c.h.miech.e.n.162@gmail.com</a>
<a href=""mailto:g.schm.i.e.c.he.n.1.62@gmail.com"">g.schm.i.e.c.he.n.1.62@gmail.com</a>
<a href=""mailto:gsc.hm.i.e.ch.en.1.6.2@gmail.com"">gsc.hm.i.e.ch.en.1.6.2@gmail.com</a>
<a href=""mailto:g.sc.h.mie.ch.e.n.16.2@gmail.com"">g.sc.h.mie.ch.e.n.16.2@gmail.com</a>
<a href=""mailto:gsc.hm.iech.e.n1.62@gmail.com"">gsc.hm.iech.e.n1.62@gmail.com</a>
<a href=""mailto:gs.c.h.miech.e.n162@gmail.com"">gs.c.h.miech.e.n162@gmail.com</a>
<a href=""mailto:gsc.h.mi.e.che.n.1.6.2@gmail.com"">gsc.h.mi.e.che.n.1.6.2@gmail.com</a>
<a href=""mailto:gs.c.hmi.ec.he.n162@gmail.com"">gs.c.hmi.ec.he.n162@gmail.com</a>
<a href=""mailto:g.s.chm.ie.ch.e.n.162@gmail.com"">g.s.chm.ie.ch.e.n.162@gmail.com</a>
<a href=""mailto:gsch.mi.ec.h.en1.6.2@gmail.com"">gsch.mi.ec.h.en1.6.2@gmail.com</a>
<a href=""mailto:gsc.h.m.iech.e.n162@gmail.com"">gsc.h.m.iech.e.n162@gmail.com</a>
<a href=""mailto:gsch.miec.hen.162@gmail.com"">gsch.miec.hen.162@gmail.com</a>
<a href=""mailto:g.s.ch.mi.ec.h.e.n162@gmail.com"">g.s.ch.mi.ec.h.e.n162@gmail.com</a>
<a href=""mailto:g.s.ch.m.ieche.n162@gmail.com"">g.s.ch.m.ieche.n162@gmail.com</a>
<a href=""mailto:g.s.c.hm.i.ec.he.n.162@gmail.com"">g.s.c.hm.i.ec.he.n.162@gmail.com</a>
<a href=""mailto:gs.c.h.mi.ec.he.n1.6.2@gmail.com"">gs.c.h.mi.ec.he.n1.6.2@gmail.com</a>
<a href=""mailto:gschmi.e.chen.16.2@gmail.com"">gschmi.e.chen.16.2@gmail.com</a>
<a href=""mailto:gs.ch.m.iech.en162@gmail.com"">gs.ch.m.iech.en162@gmail.com</a>
<a href=""mailto:gsc.hm.i.ec.he.n1.62@gmail.com"">gsc.hm.i.ec.he.n1.62@gmail.com</a>
<a href=""mailto:gsc.h.mi.ec.he.n.1.62@gmail.com"">gsc.h.mi.ec.he.n.1.62@gmail.com</a>
<a href=""mailto:gs.c.hm.ie.che.n1.62@gmail.com"">gs.c.hm.ie.che.n1.62@gmail.com</a>
<a href=""mailto:g.s.ch.mi.e.c.h.en1.6.2@gmail.com"">g.s.ch.mi.e.c.h.en1.6.2@gmail.com</a>
<a href=""mailto:gsc.h.miech.en.162@gmail.com"">gsc.h.miech.en.162@gmail.com</a>
<a href=""mailto:gschmi.eche.n162@gmail.com"">gschmi.eche.n162@gmail.com</a>
<a href=""mailto:gsc.hm.iec.h.e.n1.62@gmail.com"">gsc.hm.iec.h.e.n1.62@gmail.com</a>
<a href=""mailto:jhnsmith010@gmail.com"">jhnsmith010@gmail.com</a>
<a href=""mailto:j.hn.s.m.i.t.h.01.0@gmail.com"">j.hn.s.m.i.t.h.01.0@gmail.com</a>
<a href=""mailto:j.hnsm.ith.010@gmail.com"">j.hnsm.ith.010@gmail.com</a>
<a href=""mailto:j.h.nsm.it.h0.1.0@gmail.com"">j.h.nsm.it.h0.1.0@gmail.com</a>
<a href=""mailto:j.hn.s.m.ith.0.10@gmail.com"">j.hn.s.m.ith.0.10@gmail.com</a>
<a href=""mailto:j.hn.smith010@gmail.com"">j.hn.smith010@gmail.com</a>
<a href=""mailto:jhn.s.mi.th.0.1.0@gmail.com"">jhn.s.mi.th.0.1.0@gmail.com</a>
<a href=""mailto:j.h.ns.mi.t.h.01.0@gmail.com"">j.h.ns.mi.t.h.01.0@gmail.com</a>
<a href=""mailto:jh.n.s.mit.h0.1.0@gmail.com"">jh.n.s.mit.h0.1.0@gmail.com</a>
<a href=""mailto:j.h.n.s.m.ith0.10@gmail.com"">j.h.n.s.m.ith0.10@gmail.com</a>
<a href=""mailto:j.hn.s.m.ith01.0@gmail.com"">j.hn.s.m.ith01.0@gmail.com</a>
<a href=""mailto:jhnsmith010@gmail.com"">jhnsmith010@gmail.com</a>
<a href=""mailto:jh.nsm.it.h01.0@gmail.com"">jh.nsm.it.h01.0@gmail.com</a>
<a href=""mailto:j.h.n.sm.ith.010@gmail.com"">j.h.n.sm.ith.010@gmail.com</a>
<a href=""mailto:j.h.n.sm.i.th01.0@gmail.com"">j.h.n.sm.i.th01.0@gmail.com</a>
<a href=""mailto:jhn.sm.it.h010@gmail.com"">jhn.sm.it.h010@gmail.com</a>
<a href=""mailto:jhn.sm.i.th.010@gmail.com"">jhn.sm.i.th.010@gmail.com</a>
<a href=""mailto:j.hn.s.m.it.h.0.1.0@gmail.com"">j.hn.s.m.it.h.0.1.0@gmail.com</a>
<a href=""mailto:jh.ns.m.i.t.h0.1.0@gmail.com"">jh.ns.m.i.t.h0.1.0@gmail.com</a>
<a href=""mailto:j.h.n.smith010@gmail.com"">j.h.n.smith010@gmail.com</a>
<a href=""mailto:jh.nsm.i.t.h0.10@gmail.com"">jh.nsm.i.t.h0.10@gmail.com</a>
<a href=""mailto:jhn.sm.ith.010@gmail.com"">jhn.sm.ith.010@gmail.com</a>
<a href=""mailto:jh.n.smit.h.010@gmail.com"">jh.n.smit.h.010@gmail.com</a>
<a href=""mailto:jhns.m.i.t.h.0.1.0@gmail.com"">jhns.m.i.t.h.0.1.0@gmail.com</a>
<a href=""mailto:j.hn.smith.0.10@gmail.com"">j.hn.smith.0.10@gmail.com</a>
<a href=""mailto:j.h.n.smit.h.010@gmail.com"">j.h.n.smit.h.010@gmail.com</a>
<a href=""mailto:jh.nsm.ith01.0@gmail.com"">jh.nsm.ith01.0@gmail.com</a>
<a href=""mailto:j.h.ns.m.ith010@gmail.com"">j.h.ns.m.ith010@gmail.com</a>
<a href=""mailto:j.h.ns.mit.h.0.1.0@gmail.com"">j.h.ns.mit.h.0.1.0@gmail.com</a>
<a href=""mailto:j.h.ns.mith0.10@gmail.com"">j.h.ns.mith0.10@gmail.com</a>
<a href=""mailto:j.h.ns.m.ith0.1.0@gmail.com"">j.h.ns.m.ith0.1.0@gmail.com</a>
<a href=""mailto:j.hns.mith.010@gmail.com"">j.hns.mith.010@gmail.com</a>
<a href=""mailto:jh.n.s.mi.th.0.1.0@gmail.com"">jh.n.s.mi.th.0.1.0@gmail.com</a>
<a href=""mailto:jh.nsmit.h010@gmail.com"">jh.nsmit.h010@gmail.com</a>
<a href=""mailto:jhnsmi.t.h01.0@gmail.com"">jhnsmi.t.h01.0@gmail.com</a>
<a href=""mailto:jh.ns.mith.01.0@gmail.com"">jh.ns.mith.01.0@gmail.com</a>
<a href=""mailto:jhnsm.ith.01.0@gmail.com"">jhnsm.ith.01.0@gmail.com</a>
<a href=""mailto:jhn.smi.th0.1.0@gmail.com"">jhn.smi.th0.1.0@gmail.com</a>
<a href=""mailto:j.h.ns.mi.th01.0@gmail.com"">j.h.ns.mi.th01.0@gmail.com</a>
<a href=""mailto:j.hns.m.i.th0.10@gmail.com"">j.hns.m.i.th0.10@gmail.com</a>
<a href=""mailto:j.hns.mith01.0@gmail.com"">j.hns.mith01.0@gmail.com</a>
<a href=""mailto:jh.n.sm.it.h010@gmail.com"">jh.n.sm.it.h010@gmail.com</a>
<a href=""mailto:jhnsm.i.t.h01.0@gmail.com"">jhnsm.i.t.h01.0@gmail.com</a>
<a href=""mailto:jh.ns.mit.h.01.0@gmail.com"">jh.ns.mit.h.01.0@gmail.com</a>
<a href=""mailto:jh.ns.mith0.10@gmail.com"">jh.ns.mith0.10@gmail.com</a>
<a href=""mailto:jh.n.s.mi.t.h.0.10@gmail.com"">jh.n.s.mi.t.h.0.10@gmail.com</a>
<a href=""mailto:jhnsmith.0.10@gmail.com"">jhnsmith.0.10@gmail.com</a>
<a href=""mailto:jh.n.sm.i.t.h.01.0@gmail.com"">jh.n.sm.i.t.h.01.0@gmail.com</a>
<a href=""mailto:j.hn.sm.it.h.0.10@gmail.com"">j.hn.sm.it.h.0.10@gmail.com</a>
<a href=""mailto:j.hnsmit.h0.10@gmail.com"">j.hnsmit.h0.10@gmail.com</a>
<a href=""mailto:j.h.n.s.mith.010@gmail.com"">j.h.n.s.mith.010@gmail.com</a>
<a href=""mailto:j.h.n.smit.h0.1.0@gmail.com"">j.h.n.smit.h0.1.0@gmail.com</a>
<a href=""mailto:j.h.nsmit.h01.0@gmail.com"">j.h.nsmit.h01.0@gmail.com</a>
<a href=""mailto:j.hns.m.it.h0.10@gmail.com"">j.hns.m.it.h0.10@gmail.com</a>
<a href=""mailto:jhnsmit.h010@gmail.com"">jhnsmit.h010@gmail.com</a>
<a href=""mailto:j.hn.smith01.0@gmail.com"">j.hn.smith01.0@gmail.com</a>
<a href=""mailto:jh.n.s.mi.t.h0.1.0@gmail.com"">jh.n.s.mi.t.h0.1.0@gmail.com</a>
<a href=""mailto:jhn.sm.i.th.0.10@gmail.com"">jhn.sm.i.th.0.10@gmail.com</a>
<a href=""mailto:j.h.n.sm.i.t.h.01.0@gmail.com"">j.h.n.sm.i.t.h.01.0@gmail.com</a>
<a href=""mailto:j.hnsm.it.h0.10@gmail.com"">j.hnsm.it.h0.10@gmail.com</a>
<a href=""mailto:jh.n.smi.t.h.0.10@gmail.com"">jh.n.smi.t.h.0.10@gmail.com</a>
<a href=""mailto:jhns.mit.h0.1.0@gmail.com"">jhns.mit.h0.1.0@gmail.com</a>
<a href=""mailto:jh.n.sm.it.h0.10@gmail.com"">jh.n.sm.it.h0.10@gmail.com</a>
<a href=""mailto:jh.nsm.i.th.01.0@gmail.com"">jh.nsm.i.th.01.0@gmail.com</a>
<a href=""mailto:j.hnsmith.0.10@gmail.com"">j.hnsmith.0.10@gmail.com</a>
<a href=""mailto:jh.n.s.mi.th.010@gmail.com"">jh.n.s.mi.th.010@gmail.com</a>
<a href=""mailto:j.h.nsmit.h010@gmail.com"">j.h.nsmit.h010@gmail.com</a>
<a href=""mailto:j.hn.s.m.it.h01.0@gmail.com"">j.hn.s.m.it.h01.0@gmail.com</a>
<a href=""mailto:j.hn.s.mit.h.0.1.0@gmail.com"">j.hn.s.mit.h.0.1.0@gmail.com</a>
<a href=""mailto:jh.ns.m.i.t.h.010@gmail.com"">jh.ns.m.i.t.h.010@gmail.com</a>
<a href=""mailto:jhn.s.m.i.t.h.010@gmail.com"">jhn.s.m.i.t.h.010@gmail.com</a>
<a href=""mailto:j.h.n.sm.i.th0.1.0@gmail.com"">j.h.n.sm.i.th0.1.0@gmail.com</a>
<a href=""mailto:jh.ns.mi.t.h.0.1.0@gmail.com"">jh.ns.mi.t.h.0.1.0@gmail.com</a>
<a href=""mailto:j.h.n.s.m.i.t.h01.0@gmail.com"">j.h.n.s.m.i.t.h01.0@gmail.com</a>
<a href=""mailto:j.hns.mi.t.h.0.1.0@gmail.com"">j.hns.mi.t.h.0.1.0@gmail.com</a>
<a href=""mailto:j.hns.m.i.t.h010@gmail.com"">j.hns.m.i.t.h010@gmail.com</a>
<a href=""mailto:jh.nsm.i.th.0.10@gmail.com"">jh.nsm.i.th.0.10@gmail.com</a>
<a href=""mailto:jh.nsm.i.th01.0@gmail.com"">jh.nsm.i.th01.0@gmail.com</a>
<a href=""mailto:jhnsmi.t.h010@gmail.com"">jhnsmi.t.h010@gmail.com</a>
<a href=""mailto:j.hns.m.it.h.0.1.0@gmail.com"">j.hns.m.it.h.0.1.0@gmail.com</a>
<a href=""mailto:j.h.ns.mi.t.h.0.1.0@gmail.com"">j.h.ns.mi.t.h.0.1.0@gmail.com</a>
<a href=""mailto:j.h.ns.mit.h010@gmail.com"">j.h.ns.mit.h010@gmail.com</a>
<a href=""mailto:jhnsmi.t.h.0.10@gmail.com"">jhnsmi.t.h.0.10@gmail.com</a>
<a href=""mailto:jhn.s.m.it.h.010@gmail.com"">jhn.s.m.it.h.010@gmail.com</a>
<a href=""mailto:jhns.mi.th.0.1.0@gmail.com"">jhns.mi.th.0.1.0@gmail.com</a>
<a href=""mailto:jhn.sm.it.h.010@gmail.com"">jhn.sm.it.h.010@gmail.com</a>
<a href=""mailto:j.hn.smith.01.0@gmail.com"">j.hn.smith.01.0@gmail.com</a>
<a href=""mailto:jhn.sm.i.t.h01.0@gmail.com"">jhn.sm.i.t.h01.0@gmail.com</a>
<a href=""mailto:jhns.mi.th.010@gmail.com"">jhns.mi.th.010@gmail.com</a>
<a href=""mailto:j.hn.s.mit.h01.0@gmail.com"">j.hn.s.mit.h01.0@gmail.com</a>
<a href=""mailto:jh.n.s.mi.t.h0.10@gmail.com"">jh.n.s.mi.t.h0.10@gmail.com</a>
<a href=""mailto:j.hnsmith.010@gmail.com"">j.hnsmith.010@gmail.com</a>
<a href=""mailto:jhn.s.m.i.th0.1.0@gmail.com"">jhn.s.m.i.th0.1.0@gmail.com</a>
<a href=""mailto:jhn.s.m.i.th.0.1.0@gmail.com"">jhn.s.m.i.th.0.1.0@gmail.com</a>
<a href=""mailto:jhn.smi.th.0.10@gmail.com"">jhn.smi.th.0.10@gmail.com</a>
<a href=""mailto:j.hns.m.i.t.h.01.0@gmail.com"">j.hns.m.i.t.h.01.0@gmail.com</a>
<a href=""mailto:jh.n.sm.i.t.h.0.10@gmail.com"">jh.n.sm.i.t.h.0.10@gmail.com</a>
<a href=""mailto:jhn.s.mi.th.0.10@gmail.com"">jhn.s.mi.th.0.10@gmail.com</a>
<a href=""mailto:jhn.s.m.i.t.h.0.10@gmail.com"">jhn.s.m.i.t.h.0.10@gmail.com</a>
<a href=""mailto:j.h.nsmit.h.010@gmail.com"">j.h.nsmit.h.010@gmail.com</a>
<a href=""mailto:j.h.nsm.i.t.h0.10@gmail.com"">j.h.nsm.i.t.h0.10@gmail.com</a>
<a href=""mailto:jhns.m.i.t.h.0.10@gmail.com"">jhns.m.i.t.h.0.10@gmail.com</a>
<a href=""mailto:j.h.n.s.mit.h0.10@gmail.com"">j.h.n.s.mit.h0.10@gmail.com</a>
<a href=""mailto:jh.nsmit.h01.0@gmail.com"">jh.nsmit.h01.0@gmail.com</a>
<a href=""mailto:j.h.n.smi.t.h.0.1.0@gmail.com"">j.h.n.smi.t.h.0.1.0@gmail.com</a>
<a href=""mailto:jhn.smit.h0.10@gmail.com"">jhn.smit.h0.10@gmail.com</a>
<a href=""mailto:jh.nsmi.th.01.0@gmail.com"">jh.nsmi.th.01.0@gmail.com</a>
<a href=""mailto:j.h.ns.mi.t.h0.10@gmail.com"">j.h.ns.mi.t.h0.10@gmail.com</a>
<a href=""mailto:jh.n.s.m.i.th0.1.0@gmail.com"">jh.n.s.m.i.th0.1.0@gmail.com</a>
<a href=""mailto:j.h.n.sm.ith01.0@gmail.com"">j.h.n.sm.ith01.0@gmail.com</a>
<a href=""mailto:j.h.nsmi.t.h.0.1.0@gmail.com"">j.h.nsmi.t.h.0.1.0@gmail.com</a>
<a href=""mailto:jh.n.s.mi.t.h01.0@gmail.com"">jh.n.s.mi.t.h01.0@gmail.com</a>
<a href=""mailto:j.hn.s.mi.th0.10@gmail.com"">j.hn.s.mi.th0.10@gmail.com</a>
<a href=""mailto:jhnsm.i.t.h0.1.0@gmail.com"">jhnsm.i.t.h0.1.0@gmail.com</a>
<a href=""mailto:jhns.mith0.10@gmail.com"">jhns.mith0.10@gmail.com</a>
<a href=""mailto:jh.ns.m.it.h.0.10@gmail.com"">jh.ns.m.it.h.0.10@gmail.com</a>
<a href=""mailto:jhn.s.mit.h.0.10@gmail.com"">jhn.s.mit.h.0.10@gmail.com</a>
<a href=""mailto:j.h.n.smi.th010@gmail.com"">j.h.n.smi.th010@gmail.com</a>
<a href=""mailto:jh.ns.mith010@gmail.com"">jh.ns.mith010@gmail.com</a>
<a href=""mailto:j.h.ns.m.i.th01.0@gmail.com"">j.h.ns.m.i.th01.0@gmail.com</a>
<a href=""mailto:jh.n.s.mith010@gmail.com"">jh.n.s.mith010@gmail.com</a>
<a href=""mailto:jhn.s.m.it.h.01.0@gmail.com"">jhn.s.m.it.h.01.0@gmail.com</a>
<a href=""mailto:jh.nsmi.th0.1.0@gmail.com"">jh.nsmi.th0.1.0@gmail.com</a>
<a href=""mailto:jhns.mi.t.h01.0@gmail.com"">jhns.mi.t.h01.0@gmail.com</a>
<a href=""mailto:jh.ns.m.i.th010@gmail.com"">jh.ns.m.i.th010@gmail.com</a>
<a href=""mailto:jh.nsm.ith.010@gmail.com"">jh.nsm.ith.010@gmail.com</a>
<a href=""mailto:jh.nsmi.th01.0@gmail.com"">jh.nsmi.th01.0@gmail.com</a>
<a href=""mailto:jhn.sm.ith.0.10@gmail.com"">jhn.sm.ith.0.10@gmail.com</a>
<a href=""mailto:jh.n.s.mit.h0.10@gmail.com"">jh.n.s.mit.h0.10@gmail.com</a>
<a href=""mailto:jhn.s.m.ith0.10@gmail.com"">jhn.s.m.ith0.10@gmail.com</a>
<a href=""mailto:j.h.ns.mi.t.h.0.10@gmail.com"">j.h.ns.mi.t.h.0.10@gmail.com</a>
<a href=""mailto:j.h.nsm.it.h010@gmail.com"">j.h.nsm.it.h010@gmail.com</a>
<a href=""mailto:jh.ns.mit.h0.1.0@gmail.com"">jh.ns.mit.h0.1.0@gmail.com</a>
<a href=""mailto:j.h.ns.mit.h0.1.0@gmail.com"">j.h.ns.mit.h0.1.0@gmail.com</a>
<a href=""mailto:j.h.nsm.i.t.h.0.1.0@gmail.com"">j.h.nsm.i.t.h.0.1.0@gmail.com</a>
<a href=""mailto:jh.ns.m.it.h0.10@gmail.com"">jh.ns.m.it.h0.10@gmail.com</a>
<a href=""mailto:jhn.s.m.it.h01.0@gmail.com"">jhn.s.m.it.h01.0@gmail.com</a>
<a href=""mailto:jh.n.sm.ith.010@gmail.com"">jh.n.sm.ith.010@gmail.com</a>
<a href=""mailto:jh.n.smi.t.h0.1.0@gmail.com"">jh.n.smi.t.h0.1.0@gmail.com</a>
<a href=""mailto:j.h.n.sm.it.h.010@gmail.com"">j.h.n.sm.it.h.010@gmail.com</a>
<a href=""mailto:j.hnsmi.t.h.01.0@gmail.com"">j.hnsmi.t.h.01.0@gmail.com</a>
<a href=""mailto:j.hn.smith.0.1.0@gmail.com"">j.hn.smith.0.1.0@gmail.com</a>
<a href=""mailto:jhnsmi.t.h.010@gmail.com"">jhnsmi.t.h.010@gmail.com</a>
<a href=""mailto:j.hn.sm.i.th0.1.0@gmail.com"">j.hn.sm.i.th0.1.0@gmail.com</a>
<a href=""mailto:j.h.nsm.i.th0.10@gmail.com"">j.h.nsm.i.th0.10@gmail.com</a>
<a href=""mailto:j.h.nsmit.h.01.0@gmail.com"">j.h.nsmit.h.01.0@gmail.com</a>
<a href=""mailto:jh.ns.mi.t.h01.0@gmail.com"">jh.ns.mi.t.h01.0@gmail.com</a>
<a href=""mailto:j.hn.sm.i.th.0.10@gmail.com"">j.hn.sm.i.th.0.10@gmail.com</a>
<a href=""mailto:j.hn.s.mi.t.h.0.1.0@gmail.com"">j.hn.s.mi.t.h.0.1.0@gmail.com</a>
<a href=""mailto:j.hns.mi.th.0.10@gmail.com"">j.hns.mi.th.0.10@gmail.com</a>
<a href=""mailto:j.hn.sm.i.th.010@gmail.com"">j.hn.sm.i.th.010@gmail.com</a>
<a href=""mailto:j.h.n.smi.th01.0@gmail.com"">j.h.n.smi.th01.0@gmail.com</a>
<a href=""mailto:j.h.n.sm.i.t.h.010@gmail.com"">j.h.n.sm.i.t.h.010@gmail.com</a>
<a href=""mailto:j.h.n.s.m.i.th01.0@gmail.com"">j.h.n.s.m.i.th01.0@gmail.com</a>
<a href=""mailto:jhn.s.mith01.0@gmail.com"">jhn.s.mith01.0@gmail.com</a>
<a href=""mailto:j.hnsmi.th.0.1.0@gmail.com"">j.hnsmi.th.0.1.0@gmail.com</a>
<a href=""mailto:jh.nsmi.th010@gmail.com"">jh.nsmi.th010@gmail.com</a>
<a href=""mailto:jhns.m.it.h010@gmail.com"">jhns.m.it.h010@gmail.com</a>
<a href=""mailto:jhn.sm.it.h.0.1.0@gmail.com"">jhn.sm.it.h.0.1.0@gmail.com</a>
<a href=""mailto:jhnsm.i.th01.0@gmail.com"">jhnsm.i.th01.0@gmail.com</a>
<a href=""mailto:j.h.nsmit.h0.1.0@gmail.com"">j.h.nsmit.h0.1.0@gmail.com</a>
<a href=""mailto:jh.n.s.mi.th.01.0@gmail.com"">jh.n.s.mi.th.01.0@gmail.com</a>
<a href=""mailto:j.hn.smi.t.h.0.10@gmail.com"">j.hn.smi.t.h.0.10@gmail.com</a>
<a href=""mailto:j.hn.sm.it.h01.0@gmail.com"">j.hn.sm.it.h01.0@gmail.com</a>
<a href=""mailto:j.h.n.smi.t.h.01.0@gmail.com"">j.h.n.smi.t.h.01.0@gmail.com</a>
<a href=""mailto:j.hn.s.mit.h.0.10@gmail.com"">j.hn.s.mit.h.0.10@gmail.com</a>
<a href=""mailto:j.h.nsmith010@gmail.com"">j.h.nsmith010@gmail.com</a>
<a href=""mailto:j.hn.s.m.it.h0.1.0@gmail.com"">j.hn.s.m.it.h0.1.0@gmail.com</a>
<a href=""mailto:jhns.mi.t.h0.1.0@gmail.com"">jhns.mi.t.h0.1.0@gmail.com</a>
<a href=""mailto:jh.n.smi.t.h.0.1.0@gmail.com"">jh.n.smi.t.h.0.1.0@gmail.com</a>
<a href=""mailto:jh.nsmith0.10@gmail.com"">jh.nsmith0.10@gmail.com</a>
<a href=""mailto:j.h.ns.mit.h.01.0@gmail.com"">j.h.ns.mit.h.01.0@gmail.com</a>
<a href=""mailto:jh.ns.m.ith0.1.0@gmail.com"">jh.ns.m.ith0.1.0@gmail.com</a>
<a href=""mailto:j.hn.s.m.i.th0.1.0@gmail.com"">j.hn.s.m.i.th0.1.0@gmail.com</a>
<a href=""mailto:j.hn.smi.th0.1.0@gmail.com"">j.hn.smi.th0.1.0@gmail.com</a>
<a href=""mailto:jhn.s.m.i.t.h010@gmail.com"">jhn.s.m.i.t.h010@gmail.com</a>
<a href=""mailto:jhn.smit.h01.0@gmail.com"">jhn.smit.h01.0@gmail.com</a>
<a href=""mailto:jh.nsmith.01.0@gmail.com"">jh.nsmith.01.0@gmail.com</a>
<a href=""mailto:j.hn.s.mi.t.h.0.10@gmail.com"">j.hn.s.mi.t.h.0.10@gmail.com</a>
<a href=""mailto:j.h.n.s.mi.t.h0.1.0@gmail.com"">j.h.n.s.mi.t.h0.1.0@gmail.com</a>
<a href=""mailto:j.h.ns.mi.th0.10@gmail.com"">j.h.ns.mi.th0.10@gmail.com</a>
<a href=""mailto:jh.n.s.m.i.th0.10@gmail.com"">jh.n.s.m.i.th0.10@gmail.com</a>
<a href=""mailto:j.hnsm.ith010@gmail.com"">j.hnsm.ith010@gmail.com</a>
<a href=""mailto:jh.nsm.i.th.0.1.0@gmail.com"">jh.nsm.i.th.0.1.0@gmail.com</a>
<a href=""mailto:j.h.n.s.mi.th.0.10@gmail.com"">j.h.n.s.mi.th.0.10@gmail.com</a>
<a href=""mailto:j.hns.m.i.th.0.1.0@gmail.com"">j.hns.m.i.th.0.1.0@gmail.com</a>
<a href=""mailto:j.hns.mi.th.01.0@gmail.com"">j.hns.mi.th.01.0@gmail.com</a>
<a href=""mailto:j.h.n.s.mi.th0.1.0@gmail.com"">j.h.n.s.mi.th0.1.0@gmail.com</a>
<a href=""mailto:jh.ns.mi.t.h.01.0@gmail.com"">jh.ns.mi.t.h.01.0@gmail.com</a>
<a href=""mailto:jhn.s.mi.t.h010@gmail.com"">jhn.s.mi.t.h010@gmail.com</a>
<a href=""mailto:j.h.nsmi.th0.1.0@gmail.com"">j.h.nsmi.th0.1.0@gmail.com</a>
<a href=""mailto:jhn.s.m.i.t.h0.1.0@gmail.com"">jhn.s.m.i.t.h0.1.0@gmail.com</a>
<a href=""mailto:jh.ns.mi.th.010@gmail.com"">jh.ns.mi.th.010@gmail.com</a>
<a href=""mailto:j.hns.mith.0.1.0@gmail.com"">j.hns.mith.0.1.0@gmail.com</a>
<a href=""mailto:jhn.s.mi.th0.1.0@gmail.com"">jhn.s.mi.th0.1.0@gmail.com</a>
<a href=""mailto:jh.n.s.m.ith0.1.0@gmail.com"">jh.n.s.m.ith0.1.0@gmail.com</a>
<a href=""mailto:jh.nsmith.010@gmail.com"">jh.nsmith.010@gmail.com</a>
<a href=""mailto:jh.ns.m.i.th.0.10@gmail.com"">jh.ns.m.i.th.0.10@gmail.com</a>
<a href=""mailto:j.h.n.s.mith.01.0@gmail.com"">j.h.n.s.mith.01.0@gmail.com</a>
<a href=""mailto:j.hns.mi.t.h.01.0@gmail.com"">j.hns.mi.t.h.01.0@gmail.com</a>
<a href=""mailto:jh.ns.m.i.t.h.0.10@gmail.com"">jh.ns.m.i.t.h.0.10@gmail.com</a>"
igxs2PL1,KickC c64 first steps,paul_nicholls,C,Thursday 25th of May 2023 02:43:48 AM CDT,"const word SCREEN0_ADDRESS  = $0400;
const word SPR_PNTR_ADDRESS = SCREEN0_ADDRESS + (2040 - 1024);

#include <c64.h>
#include ""..\libraries\c64_joy.c""
#include ""..\libraries\c64_vic.c""

byte sprite[]  = {
    0,127,0,1,255,192,3,255,224,3,231,224,
    7,217,240,7,223,240,7,217,240,3,231,224,
    3,255,224,3,255,224,2,255,160,1,127,64,
    1,62,64,0,156,128,0,156,128,0,73,0,0,73,0,
    0,62,0,0,62,0,0,62,0,0,28,0  
};

__address(SPR_PNTR_ADDRESS) byte vic_spr_pntr[8];

void poke(unsigned word a,unsigned byte v) {
  // write byte v to memory address a
  unsigned char *MEMPTR;

  MEMPTR = (unsigned char *)a;

  *MEMPTR = v;
}

byte peek(unsigned word a) {
  // read byte from memory address a
  unsigned char *MEMPTR;

  MEMPTR = (unsigned char *)a;
  return (*MEMPTR);
}

const byte SPRITE           = 2;
const byte SCREEN_ORIGIN_X  = 24;
const byte SCREEN_ORIGIN_Y  = 50;
const byte SPRITE_SPEED     = 2;

void main() {
  //ENABLE SPRITE 2
  vic_spr_ena = vic_spr_ena | 4; 

  //SPRITE 2 DATA FROM BLOCK 13
  vic_spr_pntr[2] = 13;           
  
  byte i;
  for (i = 0; i < 62; i++) {
    poke(832+i,sprite[i]);
  }

  vic_spr2_x = SCREEN_ORIGIN_X + 255/2;
  vic_spr2_y = SCREEN_ORIGIN_Y + 200/2;
  
  vic_spr2_color = 1;
   
  while (true) {
    vic_waitForRaster(251);

    read_joy1();
    read_also_joy2();
    
    if      (input_dx > 0) {vic_spr2_x = vic_spr2_x + SPRITE_SPEED;}
    else if (input_dx < 0) {vic_spr2_x = vic_spr2_x - SPRITE_SPEED;}
      
    if      (input_dy > 0) {vic_spr2_y = vic_spr2_y + SPRITE_SPEED;}
    else if (input_dy < 0) {vic_spr2_y = vic_spr2_y - SPRITE_SPEED;}
  }
}"
FxbfAU3Q,Untitled,cornford-michael,JavaScript,Thursday 25th of May 2023 02:42:56 AM CDT,"{""unitId"":124,""lastUpdated"":""2023-02-28 15:44:55"",""generator_power_factor"":0.81,""expected_power_output"":4,""desired_coal_hhv"":3500.75,""total_moisture"":25.75,""ambient_temp"":25,""relative_humidity"":60,""ambient_press"":1.012,""excess_air"":25,""water_cooling_temp"":32,""cooling_temp_rise"":8,""turbine_performance_factor"":0.6,""hp_heater_cut"":0,""lp_heater_cut"":1,""boiler_tube_performance_factor"":0.75,""attemperator_temp_drop"":0,""flue_gas_otlet_temp"":150,""cleanliness_factor"":65,""request_id"":""hanafi""}"
QwU4cgFi,Untitled,cornford-michael,JavaScript,Thursday 25th of May 2023 02:41:12 AM CDT,"process kill<br />
<b>Notice</b>:  Undefined index: file_name in <b>C:\xampp\htdocs\online_elink\bnk1-dev.php</b> on line <b>511</b><br />
{""message"":""Process xlsm.vbs Canceled"",""total"":1,""limit"":1,""page"":0}"
qMaK1LVX,Untitled,CuBG,Java,Thursday 25th of May 2023 02:10:37 AM CDT,"import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.function.Function;
import java.util.stream.Collectors;

public class _04_AppliedArithmetic {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        List<Integer> numbers = Arrays.stream(sc.nextLine().split(""\\s+""))
                .map(Integer::parseInt)
                .collect(Collectors.toList());

        String input = sc.nextLine();
        while (!""end"".equals(input)) {
            if (input.equals(""print"")) {
                numbers.forEach(n -> System.out.print(n + "" ""));
            } else {
                Function<List<Integer>, List<Integer>> function = getFunctionCommand(input);
                numbers = function.apply(numbers);
            }
            input = sc.nextLine();
        }
    }

    private static Function<List<Integer>, List<Integer>> getFunctionCommand(String input) {
        Function<List<Integer>, List<Integer>> func = null;
        switch (input) {
            case ""add"":
                List<Integer> addList = new ArrayList<>();
                func = numbers -> {
                    for (Integer number : numbers) {
                        addList.add(number + 1);
                    }
                    return addList;
                };
                break;
            case ""multiply"":
                List<Integer> multiplyList = new ArrayList<>();
                func = numbers -> {
                    for (Integer number : numbers) {
                        multiplyList.add(number * 2);
                    }
                    return multiplyList;
                };
                break;
            case ""subtract"":
                List<Integer> subtractList = new ArrayList<>();
                func = numbers -> {
                    for (Integer number : numbers) {
                        subtractList.add(number - 1);
                    }
                    return subtractList;
                };
                break;
        }
        return func;
    }
}"
NcCWRMm3,Untitled,CuBG,Java,Thursday 25th of May 2023 02:08:19 AM CDT,"import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.function.Function;
import java.util.stream.Collectors;

public class _04_AppliedArithmetic {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        List<Integer> numbers = Arrays.stream(sc.nextLine().split(""\\s+""))
                .map(Integer::parseInt)
                .collect(Collectors.toList());

        String input = sc.nextLine();
        while (!""end"".equals(input)) {
            if (input.equals(""print"")) {
                numbers.forEach(n -> System.out.print(n + "" ""));
            } else {
                Function<List<Integer>, List<Integer>> function = getFunctionCommand(input);
                numbers = function.apply(numbers);
            }
            input = sc.nextLine();
        }

        numbers.forEach(n -> System.out.print(n + "" ""));
    }

    private static Function<List<Integer>, List<Integer>> getFunctionCommand(String input) {
        Function<List<Integer>, List<Integer>> func = null;
        switch (input) {
            case ""add"":
                List<Integer> addList = new ArrayList<>();
                func = numbers -> {
                    for (Integer number : numbers) {
                        addList.add(number + 1);
                    }
                    return addList;
                };
                break;
            case ""multiply"":
                List<Integer> multiplyList = new ArrayList<>();
                func = numbers -> {
                    for (Integer number : numbers) {
                        multiplyList.add(number * 2);
                    }
                    return multiplyList;
                };
                break;
            case ""subtract"":
                List<Integer> subtractList = new ArrayList<>();
                func = numbers -> {
                    for (Integer number : numbers) {
                        subtractList.add(number - 1);
                    }
                    return subtractList;
                };
                break;
        }
        return func;
    }
}"
yYQPGr1z,Переключатель темы,x7f,JavaScript,Thursday 25th of May 2023 01:56:36 AM CDT,"// ==UserScript==
// @name         Переключатель темы
// @version      0.1
// @description  Добавляет две кнопки для переключение темы, вместо кнопки ""Показать QR-код""
// @author       You
// @match        https://vk.com/app*
// @grant        unsafeWindow
// @run-at       document-idle
// ==/UserScript==

(function() {
  'use strict';
  const b = document.createElement(""div"");
  b.style=""all: unset; color: var(--text_link); cursor: pointer; font-size: 13px; padding-right: 4px;""

  const b1 = document.createElement(""button"");
  b1.innerText = `Светлая`
  b1.onclick=()=>{
    const iframe=document.body.querySelector(""#wrap3 iframe"")
    iframe.contentWindow.postMessage({
      ""type"": ""VKWebAppUpdateConfig"",
      ""data"": {
        ""appearance"": ""light"",
        ""scheme"": ""vkcom_light""
      }
    },""*"")
  };
  b1.style.all=""inherit""
  b1.style.paddingRight=""10px""

  const b2 = document.createElement(""button"");
  b2.innerText = `Тёмная`
  b2.onclick=()=>{
    const iframe=document.body.querySelector(""#wrap3 iframe"")
    iframe.contentWindow.postMessage({
      ""type"": ""VKWebAppUpdateConfig"",
      ""data"": {
        ""appearance"": ""dark"",
        ""scheme"": ""vkcom_dark""
      }
    },""*"")
  };
  b2.style.all=""inherit""

  b.append(b1,b2)

  const observer = new MutationObserver(()=>{
    const qr = document.body.querySelector(""#qr_code_btn"");
    if (qr) {
      qr.parentNode.prepend(b)
      qr.remove();
    }
  });
  observer.observe(document.querySelector(""#wrap3""), {childList: true, subtree: true});
})();"
V9McQBQg,show how many automations,xangin,YAML,Thursday 25th of May 2023 01:51:18 AM CDT,"# 功用: 統計共有多少自動化及啟用的自動化
# 用法: 1. 將以下code放在configuration.yaml內
#       2. 至開發工具>YAML>檢查設定內容>沒有錯誤訊息>下方>點模板實體
#       3. 即可在開發工具>狀態找到新增的template sensor
# 補充: 把states.automation改為states.binary_sensor, sensor, script, switch等即可統計有多少數量

template: #已有template要記得刪除這行，不能重複
  - sensor: 
      #自動化總數
      - name: ""total_automations""
        unique_id: total_automations 
        icon: mdi:robot
        state: >
          {{ states.automation | count }} 
      #啟用的自動化數量
      - name: ""automations_on""
        unique_id: automations_on 
        icon: mdi:robot
        state: >
          {{ states.automation | selectattr('state','eq','on') | list | count }}    "
NwBxbd6B,Floor_from_Sun,Lorfa,C++,Thursday 25th of May 2023 01:38:06 AM CDT,"// floor(x)
// Return x rounded toward -inf to integral value
// Method: Bit twiddling.
// Exception: Inexact flag raised if x not equal to floor(x)

#include <iostream>
using namespace std;

static const double huge = 1.0e300;

double floor(double x)

{
	int i0,i1,j0;
	
	unsigned int i,j;
	
	i0 =  *(1 + (int*)&x); 				// __HI(x), the first 32 bits of x
	
	i1 =  *(int*)&x;     				// __LO(x), the remaining 32 bits of x
	
	j0 = ((i0 >> 20) & 0x7ff) - 0x3ff;  // 0x7ff is 00000000 00000000 00000111 11111111 (integer 2047)
										// 0x3ff is 00000000 00000000 00000011 11111111 (integer 1023)
										
	// In the example of -4.5, or 11000000 00010010 00000000 00000000 00000000 00000000 00000000 00000000
	// i0 becomes 11000000 00010010 00000000 00000000 (integer -1072562176)
	// i1 becomes 00000000 00000000 00000000 00000000 (integer 0)
	// j0 first shifts i0 to the right by 20 bits: 
	// 00000000 00000000 00001100 00000001 which places the 11-bit exponent portion against the 'right' side.
	// Then we & it with 0x7ff:
	// 00000000 00000000 00001100 00000001 i0 >> 20
	// 00000000 00000000 00000111 11111111 0x7ff
	// 00000000 00000000 00000100 00000001 is the result (integer 1025)
	// Now we subtract 0x3ff, that's 1025 - 1023 = 2. 
	// So j0 is 00000000 00000000 00000000 00000010
		
	if (j0 < 20) {                      // j0 is 2 in this example, so applies.
		
	    if (j0 < 0) { 			  		// raise inexact if x != 0; Does not apply to example.
	    
			if (huge + x > 0.0) { 		// return 0 * sign(x) if |x| < 1
			
		    	if (i0 >= 0) {i0 = i1 = 0;} 
		    	
		    		else if (((i0 & 0x7fffffff) | i1) != 0)
		    	
					{i0 = 0xbff00000; i1=0;}
							    }
		
	    		    }	
		
			else {						// j0 was not < 0 so applies.
			
				i = (0x000fffff) >> j0; // 0x000fffff is 00000000 00001111 11111111 11111111 (integer 1048575)
				
				// Shifting right by j0, or 2 in the example case is: 
				// 00000000 00000011 11111111 11111111 (integer 262143), i is now assigned this value.
		
				if (((i0 & i) | i1) == 0) return x; // x is integral
				
				// Let's check. First of all, i0 & i:
				// 11000000 00010010 00000000 00000000 i0
				// 00000000 00000011 11111111 11111111 i
				// 00000000 00000010 00000000 00000000 i0 & i
				// Now we need to | it with i1, | is the 'or' operator:
				// 00000000 00000010 00000000 00000000 i0 & i
				// 00000000 00000000 00000000 00000000 i1
				// 00000000 00000010 00000000 00000000 (i0 & i) | i1 (integer 131072)
				// So example does not pass this conditional. 				
		
					if (huge + x > 0.0) {	// raise inexact flag; True for this example, (10^300 + -4.5) > 0.0
				
		    			if (i0 < 0) {       // less than 0, as we can see the sign bit is 1, and is therefore negative.
										
							i0 += (0x00100000) >> j0; // 0x00100000 is integer 1048576, written ambiguously.
							
							// Let's check. i0 + 1048576 >> j0
							// 00000000 00010000 00000000 00000000 (integer 1048576)
							// 00000000 00000100 00000000 00000000 shifted by j0 (2) is (integer 262144)
							// -1072562176 + 262144 = -1072300032 = i0
		    		
		    				i0 &= (~i);
					
							i1=0;
						
							}
						}
	    		}
	    
	} else if (j0 > 51) {
	    
		if (j0 == 0x400) return x + x;	// inf or NaN
		
	    	else return x;			    // x is integral
	    
			}
	
	 else {
		
	    i = ((unsigned)(0xffffffff)) >> (j0 - 20);
	    
	    if ((i1 & i) == 0) return x;	// x is integral
	    
	    if (huge + x > 0.0) { 		    // raise inexact flag
	    
			if (i0 < 0) {
			
		    	if (j0 == 20) i0 += 1; 
		    
		    	else {
		    	
			j = i1 + (1 << (52 - j0));
			
			if (j < i1) i0 += 1 ; 		// got a carry
			
			i1 = j;
			
		    		}
			}
			
		i1 &= (~i);
		
	    }
	}
		
	*(1 + (int*)&x) = i0;
	
	*(int*)&x = i1;
	
	return x;
	
}

int main() {
		
	double x = -4.5; // 11000000 00010010 00000000 00000000 00000000 00000000 00000000 00000000
	
	cout << ""the floor of "" << x << "" is "" << floor(x) << endl; // Prints -5
	
	return 0;
}"
Y75xeFvS,xp_calculation_point,tzi0,PostgreSQL,Thursday 25th of May 2023 01:02:23 AM CDT,"-- FUNCTION: school_tourism.xp_calculation_point()

-- DROP FUNCTION IF EXISTS school_tourism.xp_calculation_point();

CREATE OR REPLACE FUNCTION school_tourism.xp_calculation_point(
	)
    RETURNS integer
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$

BEGIN
update apps.cd_applications t set j_custom = jsonb_set(j_custom,'{j_n_applicant_total_score}', tt.point::text::jsonb, true )
from
(SELECT  app.id, 
(case 
-------------------1 документ ------------------------------------------------------------------
  --Муниципальный уровень
  when ctl1.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level1')::int=1 then 4::int
  when ctl1.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level1')::int=2 then 2::int
  when ctl1.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level1')::int=3 then 1::int
  when ctl1.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level1')::int=1 then 3::int
  when ctl1.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level1')::int=2 then 2::int
  when ctl1.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level1')::int=3 then 1::int
  when ctl1.c_code ='si_municipal'  then 2::int
  when ctl1.c_code ='sс_municipal'  then 1::int
  --Региональный уровень
  when ctl1.c_code ='i_regional' and (j_custom->>'j_n_achievement_level1')::int=1 then 8::int
  when ctl1.c_code ='i_regional' and (j_custom->>'j_n_achievement_level1')::int=2 then 6::int
  when ctl1.c_code ='i_regional' and (j_custom->>'j_n_achievement_level1')::int=3 then 5::int
  when ctl1.c_code ='c_regional' and (j_custom->>'j_n_achievement_level1')::int=1 then 6::int
  when ctl1.c_code ='c_regional' and (j_custom->>'j_n_achievement_level1')::int=2 then 5::int
  when ctl1.c_code ='c_regional' and (j_custom->>'j_n_achievement_level1')::int=3 then 4::int
  when ctl1.c_code ='si_regional'  then 5::int
  when ctl1.c_code ='sc_regional'  then 3::int
  --Межрегиональный уровень
  when ctl1.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level1')::int=1 then 12::int
  when ctl1.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level1')::int=2 then 10::int
  when ctl1.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level1')::int=3 then 9::int
  when ctl1.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level1')::int=1 then 9::int
  when ctl1.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level1')::int=2 then 8::int
  when ctl1.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level1')::int=3 then 7::int
  when ctl1.c_code ='si_interregional'  then 7::int
  when ctl1.c_code ='sc_interregional'  then 5::int
  --Всероссийский уровень
  when ctl1.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level1')::int=1 then 16::int
  when ctl1.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level1')::int=2 then 14::int
  when ctl1.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level1')::int=3 then 13::int
  when ctl1.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level1')::int=1 then 12::int
  when ctl1.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level1')::int=2 then 11::int
  when ctl1.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level1')::int=3 then 10::int
  when ctl1.c_code ='si_allrussian'  then 10::int
  when ctl1.c_code ='sc_allrussian'  then 7::int
  --Международный уровень
  when ctl1.c_code ='i_international' and (j_custom->>'j_n_achievement_level1')::int=1 then 20::int
  when ctl1.c_code ='i_international' and (j_custom->>'j_n_achievement_level1')::int=2 then 18::int
  when ctl1.c_code ='i_international' and (j_custom->>'j_n_achievement_level1')::int=3 then 17::int
  when ctl1.c_code ='c_international' and (j_custom->>'j_n_achievement_level1')::int=1 then 15::int
  when ctl1.c_code ='c_international' and (j_custom->>'j_n_achievement_level1')::int=2 then 14::int
  when ctl1.c_code ='c_international' and (j_custom->>'j_n_achievement_level1')::int=3 then 13::int
  when ctl1.c_code ='si_international'  then 13::int
  when ctl1.c_code ='sc_international'  then 10::int
  else 0
end) +
(case 
-------------------2 документ ------------------------------------------------------------------
  --Муниципальный уровень
  when ctl2.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level2')::int=1 then 4
  when ctl2.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level2')::int=2 then 2
  when ctl2.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level2')::int=3 then 1
  when ctl2.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level2')::int=1 then 3
  when ctl2.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level2')::int=2 then 2
  when ctl2.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level2')::int=3 then 1
  when ctl2.c_code ='si_municipal'  then 2
  when ctl2.c_code ='sс_municipal'  then 1
  --Региональный уровень
  when ctl2.c_code ='i_regional' and (j_custom->>'j_n_achievement_level2')::int=1 then 8
  when ctl2.c_code ='i_regional' and (j_custom->>'j_n_achievement_level2')::int=2 then 6
  when ctl2.c_code ='i_regional' and (j_custom->>'j_n_achievement_level2')::int=3 then 5
  when ctl2.c_code ='c_regional' and (j_custom->>'j_n_achievement_level2')::int=1 then 6
  when ctl2.c_code ='c_regional' and (j_custom->>'j_n_achievement_level2')::int=2 then 5
  when ctl2.c_code ='c_regional' and (j_custom->>'j_n_achievement_level2')::int=3 then 4
  when ctl2.c_code ='si_regional'  then 5
  when ctl2.c_code ='sc_regional'  then 3
  --Межрегиональный уровень
  when ctl2.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level2')::int=1 then 12
  when ctl2.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level2')::int=2 then 10
  when ctl2.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level2')::int=3 then 9
  when ctl2.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level2')::int=1 then 9
  when ctl2.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level2')::int=2 then 8
  when ctl2.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level2')::int=3 then 7
  when ctl2.c_code ='si_interregional'  then 7
  when ctl2.c_code ='sc_interregional'  then 5
  --Всероссийский уровень
  when ctl2.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level2')::int=1 then 16
  when ctl2.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level2')::int=2 then 14
  when ctl2.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level2')::int=3 then 13
  when ctl2.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level2')::int=1 then 12
  when ctl2.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level2')::int=2 then 11
  when ctl2.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level2')::int=3 then 10
  when ctl2.c_code ='si_allrussian'  then 10
  when ctl2.c_code ='sc_allrussian'  then 7
  --Международный уровень
  when ctl2.c_code ='i_international' and (j_custom->>'j_n_achievement_level2')::int=1 then 20
  when ctl2.c_code ='i_international' and (j_custom->>'j_n_achievement_level2')::int=2 then 18
  when ctl2.c_code ='i_international' and (j_custom->>'j_n_achievement_level2')::int=3 then 17
  when ctl2.c_code ='c_international' and (j_custom->>'j_n_achievement_level2')::int=1 then 15
  when ctl2.c_code ='c_international' and (j_custom->>'j_n_achievement_level2')::int=2 then 14
  when ctl2.c_code ='c_international' and (j_custom->>'j_n_achievement_level2')::int=3 then 13
  when ctl2.c_code ='si_international'  then 13
  when ctl2.c_code ='sc_international'  then 10
  else 0
end)
+
(case 
-------------------3 документ ------------------------------------------------------------------
  --Муниципальный уровень
  when ctl3.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level3')::int=1 then 4
  when ctl3.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level3')::int=2 then 2
  when ctl3.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level3')::int=3 then 1
  when ctl3.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level3')::int=1 then 3
  when ctl3.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level3')::int=2 then 2
  when ctl3.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level3')::int=3 then 1
  when ctl3.c_code ='si_municipal'  then 2
  when ctl3.c_code ='sс_municipal'  then 1
  --Региональный уровень
  when ctl3.c_code ='i_regional' and (j_custom->>'j_n_achievement_level3')::int=1 then 8
  when ctl3.c_code ='i_regional' and (j_custom->>'j_n_achievement_level3')::int=2 then 6
  when ctl3.c_code ='i_regional' and (j_custom->>'j_n_achievement_level3')::int=3 then 5
  when ctl3.c_code ='c_regional' and (j_custom->>'j_n_achievement_level3')::int=1 then 6
  when ctl3.c_code ='c_regional' and (j_custom->>'j_n_achievement_level3')::int=2 then 5
  when ctl3.c_code ='c_regional' and (j_custom->>'j_n_achievement_level3')::int=3 then 4
  when ctl3.c_code ='si_regional'  then 5
  when ctl3.c_code ='sc_regional'  then 3
  --Межрегиональный уровень
  when ctl3.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level3')::int=1 then 12
  when ctl3.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level3')::int=2 then 10
  when ctl3.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level3')::int=3 then 9
  when ctl3.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level3')::int=1 then 9
  when ctl3.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level3')::int=2 then 8
  when ctl3.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level3')::int=3 then 7
  when ctl3.c_code ='si_interregional'  then 7
  when ctl3.c_code ='sc_interregional'  then 5
  --Всероссийский уровень
  when ctl3.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level3')::int=1 then 16
  when ctl3.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level3')::int=2 then 14
  when ctl3.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level3')::int=3 then 13
  when ctl3.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level3')::int=1 then 12
  when ctl3.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level3')::int=2 then 11
  when ctl3.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level3')::int=3 then 10
  when ctl3.c_code ='si_allrussian'  then 10
  when ctl3.c_code ='sc_allrussian'  then 7
  --Международный уровень
  when ctl3.c_code ='i_international' and (j_custom->>'j_n_achievement_level3')::int=1 then 20
  when ctl3.c_code ='i_international' and (j_custom->>'j_n_achievement_level3')::int=2 then 18
  when ctl3.c_code ='i_international' and (j_custom->>'j_n_achievement_level3')::int=3 then 17
  when ctl3.c_code ='c_international' and (j_custom->>'j_n_achievement_level3')::int=1 then 15
  when ctl3.c_code ='c_international' and (j_custom->>'j_n_achievement_level3')::int=2 then 14
  when ctl3.c_code ='c_international' and (j_custom->>'j_n_achievement_level3')::int=3 then 13
  when ctl3.c_code ='si_international'  then 13
  when ctl3.c_code ='sc_international'  then 10
  else 0
end) +
(case 
-------------------4 документ ------------------------------------------------------------------
  --Муниципальный уровень
  when ctl4.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level4')::int=1 then 4
  when ctl4.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level4')::int=2 then 2
  when ctl4.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level4')::int=3 then 1
  when ctl4.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level4')::int=1 then 3
  when ctl4.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level4')::int=2 then 2
  when ctl4.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level4')::int=3 then 1
  when ctl4.c_code ='si_municipal'  then 2
  when ctl4.c_code ='sс_municipal'  then 1
  --Региональный уровень
  when ctl4.c_code ='i_regional' and (j_custom->>'j_n_achievement_level4')::int=1 then 8
  when ctl4.c_code ='i_regional' and (j_custom->>'j_n_achievement_level4')::int=2 then 6
  when ctl4.c_code ='i_regional' and (j_custom->>'j_n_achievement_level4')::int=3 then 5
  when ctl4.c_code ='c_regional' and (j_custom->>'j_n_achievement_level4')::int=1 then 6
  when ctl4.c_code ='c_regional' and (j_custom->>'j_n_achievement_level4')::int=2 then 5
  when ctl4.c_code ='c_regional' and (j_custom->>'j_n_achievement_level4')::int=3 then 4
  when ctl4.c_code ='si_regional'  then 5
  when ctl4.c_code ='sc_regional'  then 3
  --Межрегиональный уровень
  when ctl4.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level4')::int=1 then 12
  when ctl4.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level4')::int=2 then 10
  when ctl4.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level4')::int=3 then 9
  when ctl4.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level4')::int=1 then 9
  when ctl4.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level4')::int=2 then 8
  when ctl4.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level4')::int=3 then 7
  when ctl4.c_code ='si_interregional'  then 7
  when ctl4.c_code ='sc_interregional'  then 5
  --Всероссийский уровень
  when ctl4.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level4')::int=1 then 16
  when ctl4.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level4')::int=2 then 14
  when ctl4.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level4')::int=3 then 13
  when ctl4.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level4')::int=1 then 12
  when ctl4.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level4')::int=2 then 11
  when ctl4.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level4')::int=3 then 10
  when ctl4.c_code ='si_allrussian'  then 10
  when ctl4.c_code ='sc_allrussian'  then 7
  --Международный уровень
  when ctl4.c_code ='i_international' and (j_custom->>'j_n_achievement_level4')::int=1 then 20
  when ctl4.c_code ='i_international' and (j_custom->>'j_n_achievement_level4')::int=2 then 18
  when ctl4.c_code ='i_international' and (j_custom->>'j_n_achievement_level4')::int=3 then 17
  when ctl4.c_code ='c_international' and (j_custom->>'j_n_achievement_level4')::int=1 then 15
  when ctl4.c_code ='c_international' and (j_custom->>'j_n_achievement_level4')::int=2 then 14
  when ctl4.c_code ='c_international' and (j_custom->>'j_n_achievement_level4')::int=3 then 13
  when ctl4.c_code ='si_international'  then 13
  when ctl4.c_code ='sc_international'  then 10
  else 0
end) +
(case 
-------------------5 документ ------------------------------------------------------------------
  --Муниципальный уровень
  when ctl5.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level5')::int=1 then 4
  when ctl5.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level5')::int=2 then 2
  when ctl5.c_code ='i_municipal' and (j_custom->>'j_n_achievement_level5')::int=3 then 1
  when ctl5.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level5')::int=1 then 3
  when ctl5.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level5')::int=2 then 2
  when ctl5.c_code ='с_municipal' and (j_custom->>'j_n_achievement_level5')::int=3 then 1
  when ctl5.c_code ='si_municipal'  then 2
  when ctl5.c_code ='sс_municipal'  then 1
  --Региональный уровень
  when ctl5.c_code ='i_regional' and (j_custom->>'j_n_achievement_level5')::int=1 then 8
  when ctl5.c_code ='i_regional' and (j_custom->>'j_n_achievement_level5')::int=2 then 6
  when ctl5.c_code ='i_regional' and (j_custom->>'j_n_achievement_level5')::int=3 then 5
  when ctl5.c_code ='c_regional' and (j_custom->>'j_n_achievement_level5')::int=1 then 6
  when ctl5.c_code ='c_regional' and (j_custom->>'j_n_achievement_level5')::int=2 then 5
  when ctl5.c_code ='c_regional' and (j_custom->>'j_n_achievement_level5')::int=3 then 4
  when ctl5.c_code ='si_regional'  then 5
  when ctl5.c_code ='sc_regional'  then 3
  --Межрегиональный уровень
  when ctl5.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level5')::int=1 then 12
  when ctl5.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level5')::int=2 then 10
  when ctl5.c_code ='i_interregional' and (j_custom->>'j_n_achievement_level5')::int=3 then 9
  when ctl5.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level5')::int=1 then 9
  when ctl5.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level5')::int=2 then 8
  when ctl5.c_code ='c_interregional' and (j_custom->>'j_n_achievement_level5')::int=3 then 7
  when ctl5.c_code ='si_interregional'  then 7
  when ctl5.c_code ='sc_interregional'  then 5
  --Всероссийский уровень
  when ctl5.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level5')::int=1 then 16
  when ctl5.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level5')::int=2 then 14
  when ctl5.c_code ='i_allrussian' and (j_custom->>'j_n_achievement_level5')::int=3 then 13
  when ctl5.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level5')::int=1 then 12
  when ctl5.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level5')::int=2 then 11
  when ctl5.c_code ='c_allrussian' and (j_custom->>'j_n_achievement_level5')::int=3 then 10
  when ctl5.c_code ='si_allrussian'  then 10
  when ctl5.c_code ='sc_allrussian'  then 7
  --Международный уровень
  when ctl5.c_code ='i_international' and (j_custom->>'j_n_achievement_level5')::int=1 then 20
  when ctl5.c_code ='i_international' and (j_custom->>'j_n_achievement_level5')::int=2 then 18
  when ctl5.c_code ='i_international' and (j_custom->>'j_n_achievement_level5')::int=3 then 17
  when ctl5.c_code ='c_international' and (j_custom->>'j_n_achievement_level5')::int=1 then 15
  when ctl5.c_code ='c_international' and (j_custom->>'j_n_achievement_level5')::int=2 then 14
  when ctl5.c_code ='c_international' and (j_custom->>'j_n_achievement_level5')::int=3 then 13
  when ctl5.c_code ='si_international'  then 13
  when ctl5.c_code ='sc_international'  then 10
  else 0
end) point
FROM apps.cd_applications app  
left join school_tourism.cd_territorial_levels ctl1 on (j_custom ->> 'j_f_ter_level1')::int=ctl1.id 
left join school_tourism.cd_territorial_levels ctl2 on (j_custom ->> 'j_f_ter_level2')::int=ctl2.id 
left join school_tourism.cd_territorial_levels ctl3 on (j_custom ->> 'j_f_ter_level3')::int=ctl3.id 
left join school_tourism.cd_territorial_levels ctl4 on (j_custom ->> 'j_f_ter_level4')::int=ctl4.id 
left join school_tourism.cd_territorial_levels ctl5 on (j_custom ->> 'j_f_ter_level5')::int=ctl5.id) tt 
where tt.id=t.id 
and f_gos_subservice in (select id from apps.cs_gos_subservices where c_code='ssst')
and f_status  in (select id from apps.cs_application_statuses where c_code='working')
and ((j_custom->>'j_n_applicant_total_score') is null or (j_custom->>'j_n_applicant_total_score')::int=0);
--В случае, если эта процедура будет настроена как операция на шине, то раскоментировать 2 нижние строки и указать возвращаемый тип как void
--RAISE INFO SQLSTATE '00001' USING MESSAGE='00001: операция выполнена успешно';
--RETURN;
return 1;
	END;
$BODY$;

ALTER FUNCTION school_tourism.xp_calculation_point()
    OWNER TO developer;

GRANT EXECUTE ON FUNCTION school_tourism.xp_calculation_point() TO _client;

GRANT EXECUTE ON FUNCTION school_tourism.xp_calculation_point() TO developer;

REVOKE ALL ON FUNCTION school_tourism.xp_calculation_point() FROM PUBLIC;

COMMENT ON FUNCTION school_tourism.xp_calculation_point()
    IS 'Расчет баллов, по которым расчет ранее не был произведен';
"
wwYTMSrK,邀您一起看：1DM++「原IDM+」 v15.9 修改最终版,xiaomianao666,JavaScript,Thursday 25th of May 2023 12:39:30 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥1DM++「原IDM+」 v15.9 修改最终版@@
9yv9pTFd,邀您一起看：请登录,xiaomianao666,JavaScript,Thursday 25th of May 2023 12:23:07 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥请登录@@
eWrt1CSj,Still Here (CQ 2023 April - CC),Jade-Everstone,HTML,Wednesday 24th of May 2023 11:54:15 PM CDT,"<!DOCTYPE HTML>
<!--Rules:
 
Still Here
For the Coders Quarters April 2023 challenge
Layout provided by 8byte: https://toyhou.se/8byte
 
You may 
-frankenstein with other codes (as long as the creator of said code allows it)
-edit/change as much as you need (example: making character codes into user codes, vice-versa)
 
You may not
-Redistribute, resell, and/or claim its yours
-Remove credit (you're allowed to move & edit it though, just keep it visible)
 
Misc Notes:
-When editing, remember to turn WYSIWYG off! My codes may break otherwise
-Some basic html knowledge is recommended for editing
 
Default Colors:
-main color: #e85880
-image & music player bgs: #f7afc2
-dividers: #d5d4e8
 
 
Change the colors: Ctrl+f and search for the color you want to change. 
 
-->

<div class=""container py-3"" style=""max-width:600px"">
    
    <!-- /// HEADER /// -->
    <div class=""row d-flex align-items-end"">
        
        <!--character image-->
        <div class=""col-md-4"">
            <div class=""align-self-baseline"" style=""height:120px;width:120px;
                background-image:url( # );
                background-size:contain;
                background-position:center;
                background-color:#f7afc2""></div>
        </div>
        
        <!--Name-->
        <div class=""col-md-8"">
            <div class=""ml-auto"">
                <span style=""font-size:3.5em;line-height:1em"">Character name</span><br>
                    <div class=""mt-1"" style=""height:5px;background-color:#d5d4e8""></div>
                </div>
            </div>
        
       </div>
    <!-- /// END HEADER /// -->
    
    
    <!--divider-->
    <div class=""d-flex align-items-end mt-2"">
        <div style=""height:30px;width:60%;background-color:#e85880""></div>
        <div style=""height:30px;width:25%;opacity:50%;background-color:#e85880""></div>
        <div style=""height:30px;width:15%;opacity:25%;background-color:#e85880""></div>
    </div>
    
    <!-- /// MAIN BODY ///-->
    <div class=""bg-faded p-2 p-md-3"" style=""min-height:200px"">
        
        <!-- /// INTRO /// -->
        <div class=""row align-items-center"">
            
            <!--basic info-->
            <div class=""col-md-4"">
                <div style=""width:100%"">
                    <div class=""px-2 text-white mt-2 mb-1"" style=""background-color:#e85880"">GENDER</div>
                    <div style=""text-align:right"">TEXT</div>
                    
                    <div class=""px-2 text-white mt-2 mb-1"" style=""background-color:#e85880"">PRONOUNS</div>
                    <div style=""text-align:right"">TEXT</div>
                    
                    <div class=""px-2 text-white mt-2 mb-1"" style=""background-color:#e85880"">RACE/SPECIES</div>
                    <div style=""text-align:right"">TEXT</div>
                    
                    <div class=""px-2 text-white mt-2 mb-1"" style=""background-color:#e85880"">BIRTHDAY</div>
                    <div style=""text-align:right"">TEXT</div>
                                
                </div>
            </div>
            
            <!--about-->
            <div class=""col-md-8"">
                <p>This section expands!</p>
                
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et velit blandit dapibus. Curabitur ac finibus eros.</p>
                
                <p>Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.</p>
                
            </div>
            
        </div>
        <!-- /// END INTRO /// -->
        
        
        <!--divider-->
        <div class=""my-3 mx-auto"" style=""height:5px;max-width:400px;background-color:#d5d4e8""></div>
        
        
        <!-- /// TRIVIA /// -->
        <div class=""row align-items-center"">
            
            <!--trivia-->
            <div class=""col-md-8"">
                
                <p><i class=""fa-solid fa-arrow-right""></i> Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p>
                
                <p><i class=""fa-solid fa-arrow-right""></i> Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
                
                <p><i class=""fa-solid fa-arrow-right""></i> It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. </p>
                
            </div>
            
            <!--character image-->
            <div class=""col-md-4"">
                <div class=""card border-0 rounded-0 mx-auto my-2 my-md-auto"" style=""max-width:200px;height:250px;
                    background-image:url( # );
                    background-size:300px;
                    background-position:top;
                    background-color:#f7afc2"">
                    
                    <!--image credit-->
                    <span class=""text-white"" style=""font-size:1.25em;position:absolute;right:5px;text-shadow:1px 1px 3px #000000;letter-spacing:2px"">
                        
                        <!--image-->
                        <a href=""#""><i class=""fa-solid fa-image text-white"" data-toggle=""tooltip"" title=""img - credit""></i></a>
                        
                    </span>
                    
                </div>
            </div>
        
        </div>
        <!-- /// END TRIVIA /// -->
        
    </div>
    <!-- /// END MAIN BODY ///-->
    
    <!--divider-->
    <div class=""d-flex align-items-end mb-2"">
        <div style=""height:30px;width:15%;opacity:25%;background-color:#e85880""></div>
        <div style=""height:30px;width:25%;opacity:50%;background-color:#e85880""></div>
        <div style=""height:30px;width:60%;background-color:#e85880""></div>
    </div>
    
    
    <!-- /// MUSIC /// -->
    <div class=""row d-flex align-self-start mb-2"">
        
        <!--song info-->
        <div class=""col-md-8"">
            <span style=""font-size:2em;line-height:1em"">Still Here (with the ones that i came with)</span><br>
            <div class=""my-1"" style=""height:5px;background-color:#d5d4e8""></div>
            <span style=""font-size:1.25em;line-height:1em"">Skrillex, Porter Robinson, & Bibi Bourelly </span><br>
        </div>
        
        <!--song-->
        <div class=""col-md-4"">
            <div class=""card border-0 rounded-0 text-white align-self-baseline ml-auto"" style=""height:120px;width:120px;text-align:center;overflow:hidden;background-color:#f7afc2"">
                    
                    <!-- HOW TO CHANGE THE LINK/SONG
                        - Go to youtube and find the song you want to use
                        - the page link has a string of random letters & numbers at the end of it. 
                            (eg: https://www.youtube.com/watch?v= [here] )
                        - copy that string of letters and paste it between embed/ and ?controls-0 in the embed link
                            (eg: src=""https://www.youtube-nocookie.com/embed/ [here] ?controls=0"" )
                    -->
                                
                    <iframe src=""https://www.youtube-nocookie.com/embed/V-gGLTPxEhE?controls=0"" 
                    frameborder=""0""
                    style=""position:absolute;right:-60px;top:-50px;width:250px;height:200px;z-index:1;opacity:0.001""></iframe>
                                    
                <span style=""font-size:75px"">
                    <i class=""fa-regular fa-compact-disc""></i>
                </span>
            </div>
        </div>
        
    </div>
    <!-- /// END MUSIC /// -->
    
    <!--Credit. You may move it, but please do not delete/remove-->
    <hr class=""mt-3 mb-1"">
    <p style=""text-align:right"">HTML by <a href=""https://toyhou.se/21264072"" style=""color:#e85880""><i class='fa-solid fa-heart'></i> Jade-Everstone</a> // Layout by <a href=""https://toyhou.se/8byte"" style=""color:#e85880"">8byte</a></p>
    
</div>"
WCHwcTGN,Still Here (CQ 2023 April - BS),Jade-Everstone,HTML,Wednesday 24th of May 2023 11:53:31 PM CDT,"<!DOCTYPE HTML>
<!--Rules:
 
Still Here
For the Coders Quarters April 2023 challenge
Layout provided by 8byte: https://toyhou.se/8byte
 
You may 
-frankenstein with other codes (as long as the creator of said code allows it)
-edit/change as much as you need (example: making character codes into user codes, vice-versa)
 
You may not
-Redistribute, resell, and/or claim its yours
-Remove credit (you're allowed to move & edit it though, just keep it visible)
 
Misc Notes:
-When editing, remember to turn WYSIWYG off! My codes may break otherwise
-Some basic html knowledge is recommended for editing
 
Default Colors:
-main color: bg-primary
-dividers, body image bg: bg-secondary
 
 
Change the colors: Ctrl+f and search for the color you want to change. 
 
-->

<div class=""container py-3"" style=""max-width:600px"">
    
    <!-- /// HEADER /// -->
    <div class=""row d-flex align-items-end"">
        
        <!--character image-->
        <div class=""col-md-4"">
            <div class=""bg-primary align-self-baseline"" style=""height:120px;width:120px;
                background-image:url( # );
                background-size:contain;
                background-position:center;""></div>
        </div>
        
        <!--Name-->
        <div class=""col-md-8"">
            <div class=""ml-auto"">
                <span style=""font-size:3.5em;line-height:1em"">Character name</span><br>
                    <div class=""bg-secondary mt-1"" style=""height:5px""></div>
                </div>
            </div>
        
       </div>
    <!-- /// END HEADER /// -->
    
    
    <!--divider-->
    <div class=""d-flex align-items-end mt-2"">
        <div class=""bg-primary"" style=""height:30px;width:60%""></div>
        <div class=""bg-primary"" style=""height:30px;width:25%;opacity:50%""></div>
        <div class=""bg-primary"" style=""height:30px;width:15%;opacity:25%""></div>
    </div>
    
    <!-- /// MAIN BODY ///-->
    <div class=""bg-faded p-2 p-md-3"" style=""min-height:200px"">
        
        <!-- /// INTRO /// -->
        <div class=""row align-items-center"">
            
            <!--basic info-->
            <div class=""col-md-4"">
                <div style=""width:100%"">
                    <div class=""px-2 bg-primary text-white mt-2 mb-1"">GENDER</div>
                    <div style=""text-align:right"">TEXT</div>
                    
                    <div class=""px-2 bg-primary text-white mt-2 mb-1"">PRONOUNS</div>
                    <div style=""text-align:right"">TEXT</div>
                    
                    <div class=""px-2 bg-primary text-white mt-2 mb-1"">RACE/SPECIES</div>
                    <div style=""text-align:right"">TEXT</div>
                    
                    <div class=""px-2 bg-primary text-white mt-2 mb-1"">BIRTHDAY</div>
                    <div style=""text-align:right"">TEXT</div>
                                
                </div>
            </div>
            
            <!--about-->
            <div class=""col-md-8"">
                <p>This section expands!</p>
                
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et velit blandit dapibus. Curabitur ac finibus eros.</p>
                
                <p>Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.</p>
                
            </div>
            
        </div>
        <!-- /// END INTRO /// -->
        
        
        <!--divider-->
        <div class=""bg-secondary my-3 mx-auto"" style=""height:5px;max-width:400px""></div>
        
        
        <!-- /// TRIVIA /// -->
        <div class=""row align-items-center"">
            
            <!--trivia-->
            <div class=""col-md-8"">
                
                <p><i class=""fa-solid fa-arrow-right""></i> Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p>
                
                <p><i class=""fa-solid fa-arrow-right""></i> Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
                
                <p><i class=""fa-solid fa-arrow-right""></i> It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. </p>
                
            </div>
            
            <!--character image-->
            <div class=""col-md-4"">
                <div class=""card border-0 rounded-0 bg-secondary mx-auto my-2 my-md-auto"" style=""max-width:200px;height:250px;
                    background-image:url( # );
                    background-size:300px;
                    background-position:top;"">
                    
                    <!--image credit-->
                    <span class=""text-white"" style=""font-size:1.25em;position:absolute;right:5px;text-shadow:1px 1px 3px #000000;letter-spacing:2px"">
                        
                        <!--image-->
                        <a href=""#""><i class=""fa-solid fa-image text-white"" data-toggle=""tooltip"" title=""img - credit""></i></a>
                        
                    </span>
                    
                </div>
            </div>
        
        </div>
        <!-- /// END TRIVIA /// -->
        
    </div>
    <!-- /// END MAIN BODY ///-->
    
    <!--divider-->
    <div class=""d-flex align-items-end mb-2"">
        <div class=""bg-primary"" style=""height:30px;width:15%;opacity:25%""></div>
        <div class=""bg-primary"" style=""height:30px;width:25%;opacity:50%""></div>
        <div class=""bg-primary"" style=""height:30px;width:60%""></div>
    </div>
    
    
    <!-- /// MUSIC /// -->
    <div class=""row d-flex align-self-start mb-2"">
        
        <!--song info-->
        <div class=""col-md-8"">
            <span style=""font-size:2em;line-height:1em"">Still Here (with the ones that i came with)</span><br>
            <div class=""bg-secondary my-1"" style=""height:5px""></div>
            <span style=""font-size:1.25em;line-height:1em"">Skrillex, Porter Robinson, & Bibi Bourelly </span><br>
        </div>
        
        <!--song-->
        <div class=""col-md-4"">
            <div class=""card border-0 rounded-0 bg-primary text-white align-self-baseline ml-auto"" style=""height:120px;width:120px;text-align:center;overflow:hidden"">
                    
                    <!-- HOW TO CHANGE THE LINK/SONG
                        - Go to youtube and find the song you want to use
                        - the page link has a string of random letters & numbers at the end of it. 
                            (eg: https://www.youtube.com/watch?v= [here] )
                        - copy that string of letters and paste it between embed/ and ?controls-0 in the embed link
                            (eg: src=""https://www.youtube-nocookie.com/embed/ [here] ?controls=0"" )
                    -->
                                
                    <iframe src=""https://www.youtube-nocookie.com/embed/V-gGLTPxEhE?controls=0"" 
                    frameborder=""0""
                    style=""position:absolute;right:-60px;top:-50px;width:250px;height:200px;z-index:1;opacity:0.001""></iframe>
                                    
                <span style=""font-size:75px"">
                    <i class=""fa-regular fa-compact-disc""></i>
                </span>
            </div>
        </div>
        
    </div>
    <!-- /// END MUSIC /// -->
    
    <!--Credit. You may move it, but please do not delete/remove-->
    <hr class=""mt-3 mb-1"">
    <p style=""text-align:right"">HTML by <a href=""https://toyhou.se/21264072""><i class='fa-solid fa-heart'></i> Jade-Everstone</a> // Layout by <a href=""https://toyhou.se/8byte"">8byte</a></p>
    
</div>"
Gn2W51Zk,Across the Sky (CQ 2023 May),Jade-Everstone,HTML,Wednesday 24th of May 2023 11:24:08 PM CDT,"<!DOCTYPE HTML>
<!--Rules:
 
Across the Sky
For the Coders Quarters May 2023 challenge
Based off the 'sky' moodboard by Togo
 
You may 
-frankenstein with other codes (as long as the creator of said code allows it)
-edit/change as much as you need (example: making character codes into user codes, vice-versa)
 
You may not
-Redistribute, resell, and/or claim its yours
-Remove credit (you're allowed to move & edit it though, just keep it visible)
 
Misc Notes:
-When editing, remember to turn WYSIWYG off! My codes may break otherwise
-Some basic html knowledge is recommended for editing
 
Default Colors:
- Header color: #43b0d1
    - Header borders, header underline: #b7e7f5
- Main BG: rgba(255,255,255,0.7)
    - Main BG border: #f2f8fa
    - body text: #000000
- links: #2f8dc2
 
 
Change the colors: Ctrl+f and search for the color you want to change. 
 
-->

<!-- /// BACKGROUND /// -->
<div style='position: absolute; top: 0px; bottom: 0px; left: 0px;
    background: url(""https://images.unsplash.com/photo-1536088835284-27bdf76a064b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1935&q=80"");
    background-position:center;
    background-size:cover;
    background-attachment:fixed;
    width: 100%;
    z-index: -1;'>
</div>
<!-- /// END BACKGROUND /// -->


<div class=""container"" style=""max-width:1000px"">
    
    <div class=""row"">
        
        
        <!-- /// MAIN IMAGE /// -->
        <div class=""col-lg-4 mb-3"">
            <div style=""top:30px;position:sticky;"">
                
                <!--image-->
                <div class=""card bg-faded"" style=""height:600px;
                    background-image:url(https://images.unsplash.com/photo-1498019559366-a1cbd07b5160?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2058&q=80);
                    background-size:cover;
                    background-position:center;
                    border-width:3px;
                    border-color:#f2f8fa;
                    border-radius:0px 30px;"">
                    
                    <!--image credit-->
                    <span class=""text-white"" style=""font-size:1.25em;position:absolute;right:10px;top:5px;text-shadow:1px 1px 3px #000000;letter-spacing:2px""> 
                    
                        <a href=""https://unsplash.com/photos/PUvPZckRnOg"" target=""_blank""><i class=""fa-solid fa-circle text-white"" data-toggle=""tooltip"" title=""img - unsplash""></i></a>
                        
                    </span>

                    <!--character quote-->
                    <div class=""card px-2 py-1 m-2"" style=""
                    min-height:30px;
                    border-width:3px;
                    border-radius:0px 30px;
                    font-size:1.35em;
                    font-style:italic;
                    overflow:hidden;
                    position:absolute;
                    bottom:5px;right:0px;z-index:2;
                    background-color:#43b0d1;
                    border-color:#b7e7f5;
                    color:#ffffff
                    "">
                    
                        <span>""Character Quote. Best to keep it breif for better looks.""</span>
                        
                    </div>
                    
                </div>
            </div>
        </div>
        <!-- /// END MAIN IMAGE /// -->
        
        
        <!-- /// INFO SECTION /// -->
        <div class=""col-lg-8"">
            <div>
                
                <!--Character Name-->
                <div class=""card px-2 py-1 mb-3"" style=""
                    min-height:30px;
                    border-width:3px;
                    border-radius:30px 0px;
                    font-size:2.5em;
                    font-style:italic;
                    text-align:right;
                    overflow:hidden;
                    background-color:#43b0d1;
                    border-color:#b7e7f5;
                    color:#ffffff
                "">
                    <span>CHARACTER NAME <i class=""fa-regular fa-wind""></i></span>
                    <div style=""height:2px;background-color:#b7e7f5""></div>
                </div>
                
                
                <!-- /// INTRODUCTION /// -->
                <div class=""card p-3 mb-3"" style=""
                    min-height:30px;
                    border-width:3px;
                    border-radius:0px 30px;
                    overflow:hidden;
                    background-color:rgba(255,255,255,0.7);
                    border-color:#f2f8fa;
                    color:#000000
                    "">
                
                    <div class=""row"">
                        
                        <!--blurb-->
                        <div class=""col-md-7 order-2 order-lg-1"">
                            <div>
                                
                                <hr class=""d-block d-md-none"">
                                
                                <p>This section expands!</p>
                                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.</p>
                            </div>
                        </div>
                        
                        <!--basic info-->
                        <div class=""col-md-5 order-1 order-md-2"">
                            <div class=""card px-3"" style=""
                                border-width:3px;
                                border-radius:30px 0px;
                                background-color: ;
                                color:#ffffff;
                                background-color:#43b0d1;
                                border-color:#b7e7f5;
                                font-style:italic;
                                font-size:1.25em
                                "">
                                
                                GENDER
                            </div>
                            <div class=""px-3 mb-2"">
                                Text (pro/nouns)
                            </div>
                            
                            
                            <div class=""card px-3"" style=""
                                border-width:3px;
                                border-radius:30px 0px;
                                background-color: ;
                                color:#ffffff;
                                background-color:#43b0d1;
                                border-color:#b7e7f5;
                                font-style:italic;
                                font-size:1.25em
                                "">
                                RACE/SPECIES
                            </div>
                            <div class=""px-3 mb-2"">
                                Text
                            </div>
                            
                            <div class=""card px-3"" style=""
                                border-width:3px;
                                border-radius:30px 0px;
                                background-color: ;
                                color:#ffffff;
                                background-color:#43b0d1;
                                border-color:#b7e7f5;
                                font-style:italic;
                                font-size:1.25em
                                "">
                                
                                BIRTHDAY
                            </div>
                            <div class=""px-3 mb-2"">
                                00/00
                            </div>
                            
                            
                        </div>
                    </div>
                    
                    
                    <!-- /// MUSIC /// -->
                    <div class=""card px-3 mt-3"" style=""
                        min-height:30px;
                        border-width:3px;
                        border-radius:0px 30px;
                        
                        font-style:italic;
                        overflow:hidden;
                        color:#ffffff;
                        background-color:#43b0d1;
                        border-color:#b7e7f5
                    "">
                        
                        <!-- HOW TO CHANGE THE LINK/SONG
                            - Go to youtube and find the song you want to use
                            - the page link has a string of random letters & numbers at the end of it. 
                                (eg: https://www.youtube.com/watch?v= [here] )
                            - copy that string of letters and paste it between embed/ and ?controls-0 in the embed link
                                (eg: src=""https://www.youtube-nocookie.com/embed/ [here] ?controls=0"" )
                         -->
                    
                        <iframe src=""https://www.youtube-nocookie.com/embed/uMI1gpsiHsM?controls=0"" 
                        frameborder=""0""
                        style=""position:absolute;left:0px;top:-80px;width:100px;height:200px;z-index:1;opacity:0.001""></iframe>
                        
                        
                        <!--song info-->
                        <p class=""d-flex flex-wrap align-items-center"" style=""font-size:2em"">
                            <i class=""fa-regular fa-compact-disc""></i>
                            <span class=""ml-auto"">HIGH - RAM  <i class=""fa-regular fa-wind""></i></span>
                        </p>
                        
                        
                    </div>
                    <!-- /// END MUSIC /// -->
                
                
                </div>
                <!-- /// END INTRODUCTION /// -->
                
                
                <hr>
                
                <!-- /// BACKGROUND/// -->
                
                    <!--section header-->
                <div class=""card px-2 py-1 mb-3"" style=""
                    min-height:30px;
                    border-width:3px;
                    border-radius:30px 0px;
                    font-size:2em;
                    font-style:italic;
                    overflow:hidden;
                    background-color:#43b0d1;
                    border-color:#b7e7f5;
                    color:#ffffff
                "">
                    <span><i class=""fa-regular fa-wind fa-rotate-180""></i> BACKGROUND</span>
                    <div style=""height:2px;background-color:#b7e7f5""></div>
                </div>
                
                
                <div class=""row align-items-center"">
                    
                    <!--image-->
                    <div class=""col-md-4"">
                        <div class=""card bg-faded"" style=""
                            min-height:30px;
                            border-width:3px;
                            border-radius:0px 30px;
                            font-style:italic;
                            text-align:right;
                            overflow:hidden;
                            min-height:350px;
                            background-image:url(https://images.unsplash.com/photo-1525109556882-cb01f87f4552?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1974&q=80);
                            background-size:cover;
                            background-position:center;
                            border-color:#f2f8fa;
                        "">
                            
                            <!--image credit-->
                            <span class=""text-white"" style=""font-size:1.25em;position:absolute;right:10px;top:5px;text-shadow:1px 1px 3px #000000;letter-spacing:2px""> 
                            
                                <a href=""https://unsplash.com/photos/D5G6TGm6W1I"" target=""_blank""><i class=""fa-solid fa-circle text-white"" data-toggle=""tooltip"" title=""img - unsplash""></i></a>
                                
                            </span>
                            
                        </div>
                    </div>
                    
                    <!--blurb-->
                    <div class=""col-md-8"">
                        <div class=""card p-3"" style=""
                            min-height:30px;
                            border-width:3px;
                            border-radius:30px 0px;
                            overflow:hidden;
                            background-color:rgba(255,255,255,0.7);
                            border-color:#f2f8fa;
                            color:#000000
                            "">
                            
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla id dui vel mauris luctus aliquam. In felis orci, imperdiet eget sollicitudin a, convallis a diam. Maecenas velit magna, suscipit et arcu eget, sodales vulputate lorem.</p>
                            
                            <p>Nulla euismod, nunc ac dapibus molestie, enim lorem bibendum ipsum, ut molestie velit eros et augue. Nam lobortis sollicitudin ex vitae volutpat. Nullam eu urna et dolor condimentum elementum nec a odio. Nunc tincidunt augue sed dui sollicitudin, ut sodales nisl rutrum. Sed vel rutrum nunc, quis venenatis orci.</p>
                            
                            <p> Sed quis lectus enim. Proin tristique volutpat fringilla. Vivamus bibendum erat odio, non placerat eros bibendum eu. Sed sagittis enim quis massa malesuada ornare.</p>
                            
                        </div>
                    </div>
                    
                </div>
                <!-- /// END BACKGROUND/// -->
                
                <hr>
                
                <!-- /// TRIVIA /// -->
                <div class=""row align-items-center"">
                    
                    <!--blurb-->
                    <div class=""col-md-8"">
                        <div class=""card p-3"" style=""
                            min-height:30px;
                            border-width:3px;
                            border-radius:30px 0px;
                            overflow:hidden;
                            background-color:rgba(255,255,255,0.7);
                            border-color:#f2f8fa;
                            color:#000000
                            "">
                            
                            <p> <i class=""fa-solid fa-plane""></i> Lorem Ipsum is simply dummy text of the printing and typesetting industry.</p>
                            
                            <p> <i class=""fa-solid fa-plane""></i> Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</p>
                            
                            <p> <i class=""fa-solid fa-plane""></i>  It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.</p>
                            
                            <p> <i class=""fa-solid fa-plane""></i>  It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.</p>
                        </div>
                    </div>
                    
                    <!--image-->
                    <div class=""col-md-4"">
                        <div class=""card bg-faded"" style=""
                            min-height:30px;
                            border-width:3px;
                            border-radius:0px 30px;
                            font-style:italic;
                            text-align:right;
                            overflow:hidden;
                            min-height:350px;
                            background-image:url(https://images.unsplash.com/photo-1621924123226-01ca69c08e29?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=687&q=80);
                            background-size:cover;
                            background-position:center;
                            border-color:#f2f8fa;
                        "">
                            
                            <!--image credit-->
                            <span class=""text-white"" style=""font-size:1.25em;position:absolute;right:10px;top:5px;text-shadow:1px 1px 3px #000000;letter-spacing:2px""> 
                            
                                <a href=""https://unsplash.com/photos/FmVgX6jK9jI"" target=""_blank""><i class=""fa-solid fa-circle text-white"" data-toggle=""tooltip"" title=""img - unsplash""></i></a>
                                
                            </span>
                    
                        </div>
                    </div>
                    
                </div>
                <!-- /// ENDTRIVIA /// -->
                
                
                <hr>
                
                
                <!-- /// LINKS /// -->
                
                    <!--header-->
                <div class=""card px-2 py-1 mb-3"" style=""
                    min-height:30px;
                    border-width:3px;
                    border-radius:30px 0px;
                    font-size:2em;
                    font-style:italic;
                    overflow:hidden;
                    background-color:#43b0d1;
                    border-color:#b7e7f5;
                    color:#ffffff
                "">
                    <span><i class=""fa-regular fa-wind fa-rotate-180""></i> LINKS</span>
                    <div style=""height:2px;background-color:#b7e7f5""></div>
                </div>
                    
                    
                    <!-- /// LINK 1 /// -->
                <div class=""row"">
                    
                    <!--image--> 
                    <div class=""col-md-3"">
                        <div class=""card bg-faded mb-3 mx-auto"" style=""
                            border-width:3px;
                            border-radius:0px 30px;
                            font-size:2.5em;
                            font-style:italic;
                            text-align:right;
                            overflow:hidden;
                            min-height:150px;
                            max-width:150px;
                            background-image:url(https://images.unsplash.com/photo-1498019559366-a1cbd07b5160?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2058&q=80);
                            background-size:cover;
                            background-position:center;
                            border-color:#f2f8fa;
                        ""></div>
                    </div>
                    
                    
                    <div class=""col-md-9"">
                        
                        <!--link-->
                        <div class=""card px-3 mb-2"" style=""
                            border-width:3px;
                            border-radius:30px 0px;
                            background-color: ;
                            color:#ffffff;
                            background-color:#43b0d1;
                            border-color:#b7e7f5;
                            font-style:italic;
                            font-size:1.5em
                            "">
                            
                            <p class=""d-flex flex-wrap"">
                                <a href=""#"" style=""color:#ffffff"">CHARACTER NAME</a>
                                <span class=""ml-auto"">- STATUS</span>
                            </p>
                            
                        </div>
                        
                        <!--blurb-->
                        <div class=""card px-3 py-2 mb-3"" style=""
                            min-height:30px;
                            border-width:3px;
                            border-radius:0px 30px;
                            overflow:hidden;
                            background-color:rgba(255,255,255,0.7);
                            border-color:#f2f8fa;
                            color:#000000
                            "">
                            
                            <p> Relationship notes. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et velit blandit dapibus.</p>
                        </div>
                    </div>
                    
                </div>
                    <!-- /// END LINK 1 /// -->
                
                
                    <!-- /// LINK 2 /// -->
                <div class=""row"">
                    
                    <!--image-->
                    <div class=""col-md-3 order-1 order-md-2"">
                        <div class=""card bg-faded mb-3 mx-auto"" style=""
                            border-width:3px;
                            border-radius:0px 30px;
                            font-size:2.5em;
                            font-style:italic;
                            text-align:right;
                            overflow:hidden;
                            min-height:150px;
                            max-width:150px;
                            background-image:url(https://images.unsplash.com/photo-1498019559366-a1cbd07b5160?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2058&q=80);
                            background-size:cover;
                            background-position:center;
                            border-color:#f2f8fa;
                        ""></div>
                    </div>
                    
                    
                    <div class=""col-md-9 order-2 order-md-1"">
                        
                        <!--link-->
                        <div class=""card px-3 mb-2"" style=""
                            border-width:3px;
                            border-radius:30px 0px;
                            background-color: ;
                            color:#ffffff;
                            background-color:#43b0d1;
                            border-color:#b7e7f5;
                            font-style:italic;
                            font-size:1.5em
                            "">
                            
                            <p class=""d-flex flex-wrap"">
                                <a href=""#"" style=""color:#ffffff"">CHARACTER NAME</a>
                                <span class=""ml-auto"">- STATUS</span>
                            </p>
                            
                        </div>
                        
                        <!--blurb-->
                        <div class=""card px-3 py-2 mb-3"" style=""
                            min-height:30px;
                            border-width:3px;
                            border-radius:0px 30px;
                            overflow:hidden;
                            background-color:rgba(255,255,255,0.7);
                            border-color:#f2f8fa;
                            color:#000000
                            "">
                            
                            <p> Relationship notes. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et velit blandit dapibus.</p>
                        </div>
                    </div>
                    
                </div>
                    <!-- /// END LINK 2 /// -->
                
                
                    <!-- /// LINK 3 /// -->
                <div class=""row"">
                    
                    <div class=""col-md-3"">
                        <div class=""card bg-faded mb-3 mx-auto"" style=""
                            border-width:3px;
                            border-radius:0px 30px;
                            font-size:2.5em;
                            font-style:italic;
                            text-align:right;
                            overflow:hidden;
                            min-height:150px;
                            max-width:150px;
                            background-image:url(https://images.unsplash.com/photo-1498019559366-a1cbd07b5160?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2058&q=80);
                            background-size:cover;
                            background-position:center;
                            border-color:#f2f8fa;
                        ""></div>
                    </div>
                    
                    <div class=""col-md-9"">
                        
                        <div class=""card px-3 mb-2"" style=""
                            border-width:3px;
                            border-radius:30px 0px;
                            background-color: ;
                            color:#ffffff;
                            background-color:#43b0d1;
                            border-color:#b7e7f5;
                            font-style:italic;
                            font-size:1.5em
                            "">
                            
                            <p class=""d-flex flex-wrap"">
                                <a href=""#"" style=""color:#ffffff"">CHARACTER NAME</a>
                                <span class=""ml-auto"">- STATUS</span>
                            </p>
                            
                        </div>
                        <div class=""card px-3 py-2 mb-3"" style=""
                            min-height:30px;
                            border-width:3px;
                            border-radius:0px 30px;
                            overflow:hidden;
                            background-color:rgba(255,255,255,0.7);
                            border-color:#f2f8fa;
                            color:#000000
                            "">
                            
                            <p> Relationship notes. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et velit blandit dapibus.</p>
                        </div>
                    </div>
                    
                </div>
                    <!-- /// END LINK 3 /// -->
                
                <!-- /// END LINKS /// -->
                
            </div>
        </div>
        <!-- /// END INFO SECTION /// -->
        
        
    </div>
    
    
    <!--Credit. You may move it, but please do not delete/remove-->
    <div class=""card px-3 my-3"" style=""
        min-height:30px;
        border-width:3px;
        border-radius:30px 0px;
        overflow:hidden;
        background-color:rgba(255,255,255,0.7);
        border-color:#f2f8fa;
        color:#000000
        "">
        <p style=""text-align:right"">HTML by <a href=""https://toyhou.se/21699840"" style=""color:#2f8dc2""><i class='fa-solid fa-heart'></i> Jade-Everstone</a> // bg - <a href=""https://unsplash.com/photos/p-k8TlkgdgA"" style=""color:#2f8dc2"" target=""_blank"">Unsplash</a></p>
    </div>
    
    
</div>"
g4MyAXjz,邀您一起看：蓝莓(61),xiaomianao666,JavaScript,Wednesday 24th of May 2023 11:17:17 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥蓝莓(61)@@
JvLiwQyu,route-custom.php,kura1420,PHP,Wednesday 24th of May 2023 11:01:03 PM CDT,"<?php namespace FGTA4\routes;

if (!defined('FGTA4')) {
	die('Forbiden');
}

require_once __ROOT_DIR.'/core/webauth.php';
require_once __ROOT_DIR.'/core/webmodule.php';
require_once __ROOT_DIR.'/core/websession.php';

use \FGTA4\debug;
use \FGTA4\setting;
use \FGTA4\WebSession;
use \FGTA4\WebAuth;


class CustomPage extends Route {

	public function ProcessRequest(object $reqinfo) : void {
		$MODULE = null;

		try {
            $modulename = $reqinfo->module;
			$modulefullname = $reqinfo->modulefullname;
			$reqinfo->moduledir = implode('/', [__ROOT_DIR, 'apps', $modulefullname]);

			$format = $_GET['format'];
			$renderto = $_GET['renderto'];

			$rn = pathinfo($renderto);
			$renderfilename = $rn['filename'];

            if (isset($format) && isset($renderto)) {
                $this->path_template_phtml = __ROOT_DIR.""/public/templates/fgta-printhtml/$renderfilename.phtml"";
                $this->path_template_css = __ROOT_DIR.""/public/templates/fgta-printhtml/asset/$renderfilename.css"";
                $this->path_xprint_css = implode('/', [$reqinfo->moduledir, $reqinfo->params->scriptparam . "".css""]);
                $this->path_xprint_mjs = implode('/', [$reqinfo->moduledir, $reqinfo->params->scriptparam . "".mjs""]);
                $this->path_xprint_php = implode('/', [$reqinfo->moduledir, $reqinfo->params->scriptparam . "".php""]);
                $this->path_xprint_phtml = implode('/', [$reqinfo->moduledir, $reqinfo->params->scriptparam . "".phtml""]);



                $reqinfo->modulecsspath = $this->path_xprint_php;
                $reqinfo->moduleviewpath = $this->path_xprint_phtml;
                $reqinfo->modulejspath = $this->path_xprint_mjs;
                $reqinfo->modulejsurl = implode(""/"", ['./index.php/asset', $reqinfo->modulefullname, $reqinfo->params->scriptparam . "".mjs""]);
                $reqinfo->modulecsspath = $this->path_xprint_css;
                $reqinfo->modulecssurl = implode(""/"", ['./index.php/asset', $reqinfo->modulefullname, $reqinfo->params->scriptparam . "".css""]);
            }
			
			$reqinfo->variancename = array_key_exists('variancename', $_GET) ? $GET['variancename'] : '';

			if (array_key_exists('tokenid', $_COOKIE)) {
				$tokenid = $_COOKIE['tokenid'];
				WebSession::start($tokenid);
				$this->auth = new WebAuth();
				if (!$this->auth->is_login()) {
					throw new \Exception('You are not authorized to open this page');
				}
			} else {
				throw new \Exception('token not present!');
			}


			// cek files
			$filestocheck = [
				$this->path_template_phtml, $this->path_template_css, 
				$this->path_xprint_php, $this->path_xprint_phtml, $this->path_xprint_mjs, $this->path_xprint_css
			];
			
			foreach ($filestocheck as $filepath) {
				if (!is_file($filepath)) {
					throw new \Exception(""File '$filepath' tidak ditemukan"");
				}
			}

			require_once $this->path_xprint_php;
			$MODULE->title = ""Report Display"";
			$MODULE->reqinfo = $reqinfo;
			$MODULE->auth = $this->auth;
			$MODULE->urlparams = $reqinfo->params;
			$MODULE->configuration = (object)[
				'basetitle' => $MODULE->title
			];


			$this->MODULE = &$MODULE;
			//if (property_exists($this->MODULE->urlparams, 'testpreview')) {
			if (array_key_exists('testpreview', $_GET)) {	
				if (!method_exists($this->MODULE, 'TestPreview')) {
					throw new \Exception('fungsi TestPreview tidak tersedia di module!');
				}
				$this->MODULE->TestPreview();
			} else {

				$this->postdata = $this->getPostData();
				$this->api_class = get_class($this->MODULE);
				$this->api_method = new \ReflectionMethod($this->api_class, 'LoadPage');
				$this->api_params = $this->api_method->getParameters();
				$this->api_executingparameters = [];
	
				foreach ($this->api_params as $param) {
					$paramname = $param->getName();
					
					if (property_exists($this->postdata->requestParam, $paramname)) {
						$this->api_executingparameters[$paramname] = $this->postdata->requestParam->$paramname;
					} else {
						$this->api_executingparameters[$paramname] = null;
						if ($_SERVER['REQUEST_METHOD']=='POST') {
							throw new \FGTA4\exceptions\WebException(
								""Eksekusi API membutuhkan POST parameter '$paramname' !"", 
								API_ERROR_PARAMETER
							);
						}
					}
				}

				$this->api_method->invokeArgs($this->MODULE, $this->api_executingparameters);
			}
			
		} catch (\Exception $ex) {
			throw $ex;
		}
		
	}

	public function SendHeader() : void {
		\header('Content-Type: text/html');
	}

	public function ShowResult() : void {
		$content = $this->content;
		$MODULE = $this->MODULE;
		$MODULE->Render($content, $this->path_template_phtml);
	}

	public function ShowError(object $ex) : void {
		$content = ob_get_contents();
		ob_end_clean();

		if (!property_exists($ex, 'errorstatusmessage')) {
			$ex->errorstatusmessage = $ex->getMessage();
			$ex->errorstatus = 500;
		}

		$err = new \FGTA4\ErrorPage($ex->errorstatusmessage, $ex->errorstatus);
		$err->content = $content;
		$err->Show($ex->getMessage());		
	}


	public function getPostData() : object {
		try {

			if ($_SERVER['REQUEST_METHOD']!='POST') {
				return (object) [
					'txid' => null,
					'requestParam' => []
				];
			}

			$content = 	file_get_contents('php://input');
			$postdata = json_decode(stripslashes($content));
			if ($postdata === null && json_last_error() !== JSON_ERROR_NONE) {
				throw new \Exception('Format request body JSON salah', 9001);
			}

			// if (!array_key_exists('txid', $postdata)) {
			if (!property_exists($postdata, 'txid')) {	
				throw new \Exception('txid belum didefinisiakn di request body', 9002);
			}

			// if (!array_key_exists('requestParam', $postdata)) {
			if (!property_exists($postdata, 'requestParam')) {		
				throw new \Exception('requestParam belum didefinisikan di request body', 9003);
			}


			return (object) [
				'txid' => $postdata->txid,
				'requestParam' => $postdata->requestParam
			];
		} catch (\Exception $ex) {
			throw $ex;
		}
	}

}

$ROUTER = new CustomPage();"
zisXFSk8,gen_phtml_edit.js,kura1420,JavaScript,Wednesday 24th of May 2023 10:56:40 PM CDT,"const path = require('path')
const fs = require('fs')

const colReset = ""\x1b[0m""
const colFgRed = ""\x1b[31m""
const colFgGreen = ""\x1b[32m""
const colFgYellow = ""\x1b[33m""
const colFgBlack = ""\x1b[30m""
const colBright = ""\x1b[1m""
const BgYellow = ""\x1b[43m""


const fieldexclude = ['_createby', '_createdate', '_modifyby', '_modifydate']


module.exports = async (fsd, genconfig) => {
	try {
		console.log(`-----------------------------------------------`)
		console.log(`Generate Edit PHTML...`)

		var headertable_name = genconfig.schema.header
		var headertable = genconfig.persistent[headertable_name]
		var data = headertable.data

		var add_approval = genconfig.approval===true;
		var add_commiter = add_approval===true ? true : (genconfig.committer===true);

		// console.log(data)
		var formcomp_script = ''
		for (var fieldname in data) {
			if (fieldexclude.includes(fieldname)) { continue }

			var additionalclass = data[fieldname].class !== undefined ? ' '+data[fieldname].class : '';
			var varid = data[fieldname].id !== undefined ? `id=""${data[fieldname].id}"" ` : '';

			var labeltext = data[fieldname].text !== undefined ? data[fieldname].text : fieldname;
			var caption = data[fieldname].caption !== undefined ? data[fieldname].caption : '';
			var section = data[fieldname].section;
			var compclass = data[fieldname].comp.class
			var prefix = data[fieldname].comp.prefix
			var type = data[fieldname].type
			var tips = data[fieldname].tips !== undefined ? data[fieldname].tips : '';
			var tipstype = data[fieldname].tipstype === 'visible' ? 'visible' : 'hidden';
			var hidden = data[fieldname].hidden === true ? true : false;
			var html_before = data[fieldname].before !== undefined ? data[fieldname].before : '';
			var html_after = data[fieldname].after !== undefined ? data[fieldname].after : '';

			var labeltipsclass, tipsvisible, tipshidden
			if (tipstype==='visible') {
				labeltipsclass = '';
				tipsvisible = tips;
				tipshidden = '';
			} else {
				if (tips!=='') {
					labeltipsclass = ' easyui-tooltip';
					tipsvisible = '';
					tipshidden = `title=""${tips}""`;
				} else {
					labeltipsclass = '';
					tipsvisible = '';
					tipshidden = '';					
				}
			}


			formrowstyle = '';
			if (hidden) {
				formrowstyle=`style=""display: none""`;
			}

			var stroptions = ''
			var dataoptions = data[fieldname].options

			if (add_approval) {
				if (fieldname=='doc_id') {
					dataoptions['disabled']=true;
				}
			}

			// console.log(fieldname);
			// console.log(dataoptions);

			for (var opt_name in dataoptions) {
				var opt_value;
				if (typeof dataoptions[opt_name] == 'boolean') {
					opt_value =  dataoptions[opt_name] ? 'true' : 'false'
				} else if (typeof dataoptions[opt_name] == 'object') {
					opt_value = ""['"" + dataoptions[opt_name].join(""', '"") + ""']""
	
				} else {
					opt_value = ""'"" + dataoptions[opt_name] +""'""
				}
				stroptions += `, ${opt_name}: ${opt_value}`
			}

			var settouppercase = ''
			var uppercase = data[fieldname].uppercase
			var lowercase = data[fieldname].lowercase;
			if (uppercase===true) {
				settouppercase = 'uppercase=""true""'
			} else if (lowercase===true) {
				settouppercase = 'lowercase=""true""'
			}
			


			/* SECTION BEGIN --------------------------------------------------- */
			if (section!=null) {
				if (section.position=='begin') {
					var label = section.label;
					var sectionoptions = section.options != null ? section.options : {} ;
					var csscboxlassname = sectionoptions.csscboxlassname != null ? sectionoptions.csscboxlassname : '' ;
					var additionalclass = sectionoptions.additionalclass != null ? sectionoptions.additionalclass : '' ;
					var cancollapse = (sectionoptions.cancollapse === null || sectionoptions.cancollapse === undefined ) ? true:  sectionoptions.cancollapse;
					var collapse = (sectionoptions.collapse === null || sectionoptions.collapse === undefined ) ? true : sectionoptions.collapse;

					var val_cancollapse = cancollapse ? 'true' : 'false';
					var val_collapse = collapse ? 'true' : 'false';
					var style_collapse = collapse ? 'style=""display: none""' : '';



					formcomp_script += `
		<?=$this->Section('${label}', ${val_cancollapse}, ${val_collapse}, '${additionalclass}')?>
		<div class=""fgta_section_collapsible ${csscboxlassname}"" ${style_collapse}>
					`;
				}
			}
			/* SECTION BEGIN --------------------------------------------------- */




			// before rows
			if (html_before!='') {
				formcomp_script += `\t\t${html_before}\r\n`;
			}

			// BEGIN COMPONENT ROW

			// ${prefix}${fieldname}
			if (compclass=='easyui-checkbox') {

				formcomp_script += `
		<div ${varid}class=""form_row pnl_edit_row${additionalclass}"" ${formrowstyle}>
			<div class=""form_label_col"">${caption}</div>
			<div class=""form_input_col"" style=""border: 0px solid black"">
				<input id=""pnl_edit-${prefix}${fieldname}"" class=""easyui-checkbox c1"" mapping=""${fieldname}"" data-options=""label: '${labeltext}', labelPosition: 'after', checked: false ${stroptions}"">
			</div>
		</div>\r\n`	


			} else if (compclass=='easyui-combo') {
				var options = data[fieldname].comp.options

				if (options.table==null || options.field_value==null || options.field_display==null) {
					throw `Component ${fieldname} pada ${headertable_name} bertipe combo, harus didefinisikan: table, field_value, field_display`
				}

				var validType = '';
				if (dataoptions.required===true) {
					validType = ` validType=""requiredcombo['pnl_edit-${prefix}${fieldname}']"" `;
				} 

				var combodisplay = options.field_display;
				var field_display_name = options.field_display_name;
				if (field_display_name!=null) {
					combodisplay = field_display_name
				}

				formcomp_script += `
		<div ${varid}class=""form_row pnl_edit_row${additionalclass}"" ${formrowstyle}>
			<div class=""form_label_col${labeltipsclass}"" ${tipshidden} style=""border: 0px solid black; vertical-align: top; margin-top: 7px;"">${labeltext}</div>
			<div class=""form_input_col"" style=""border: 0px solid black"">
				<input id=""pnl_edit-${prefix}${fieldname}"" class=""easyui-combo"" style=""width: 400px"" mapping=""${fieldname}"" display=""${combodisplay}"" data-options=""editable:false, valueField:'id', textField:'text' ${stroptions}""  ${validType}>
				<div style=""margin-top: 3px; margin-bottom: 5px; font-size: 0.75em; font-style: italic; color:#54381d;"">${tipsvisible}</div>
			</div>
		</div>\r\n`


			} else if (compclass=='easyui-combobox') {	
				formcomp_script += `
		<div ${varid}class=""form_row pnl_edit_row${additionalclass}"" ${formrowstyle}>
			<div class=""form_label_col${labeltipsclass}"" ${tipshidden} style=""border: 0px solid black; vertical-align: top; margin-top: 7px;"">${labeltext}</div>
			<div class=""form_input_col"" style=""border: 0px solid black"">
				<input id=""pnl_edit-${prefix}${fieldname}"" class=""easyui-combobox"" style=""width: 400px"" mapping=""${fieldname}"" display=""${fieldname}"" data-options=""editable:false, valueField:'id', textField:'text' ${stroptions}"">
				<div style=""margin-top: 3px; margin-bottom: 5px; font-size: 0.75em; font-style: italic; color:#54381d;"">${tipsvisible}</div>
			</div>
		</div>\r\n`


			} else if (compclass=='easyui-datebox') {
				formcomp_script += `
		<div ${varid}class=""form_row pnl_edit_row${additionalclass}"" ${formrowstyle}>
			<div class=""form_label_col${labeltipsclass}"" ${tipshidden} style=""border: 0px solid black; vertical-align: top; margin-top: 7px;"">${labeltext}</div>
			<div class=""form_input_col"" style=""border: 0px solid black"">
				<input id=""pnl_edit-${prefix}${fieldname}"" class=""easyui-datebox"" style=""width: 400px"" mapping=""${fieldname}"" data-options=""editable:false ${stroptions}"">
				<div style=""margin-top: 3px; margin-bottom: 5px; font-size: 0.75em; font-style: italic; color:#54381d;"">${tipsvisible}</div>
			</div>
		</div>\r\n`
				

			} else if (compclass=='easyui-textbox') {
				var $maxlengdcr = ''
				if (type.maxlength!==undefined) {
					$maxlengdcr = `maxlength=""${type.maxlength}""`
				}


				formcomp_script += `
		<div ${varid}class=""form_row pnl_edit_row${additionalclass}"" ${formrowstyle}>
			<div class=""form_label_col${labeltipsclass}"" ${tipshidden} style=""border: 0px solid black; vertical-align: top; margin-top: 7px;"">${labeltext}</div>
			<div class=""form_input_col"" style=""border: 0px solid black"">
				<input id=""pnl_edit-${prefix}${fieldname}"" class=""${compclass}"" mapping=""${fieldname}"" ${settouppercase} ${$maxlengdcr} style=""width: 400px"" data-options=""${stroptions.substring(1)} "">
				<div style=""margin-top: 3px; margin-bottom: 5px; font-size: 0.75em; font-style: italic; color:#54381d;"">${tipsvisible}</div>
			</div>
		</div>\r\n`	

			} else if (compclass=='easyui-numberbox') {
						
				formcomp_script += `
		<div ${varid}class=""form_row pnl_edit_row${additionalclass}"" ${formrowstyle}>
			<div class=""form_label_col${labeltipsclass}"" ${tipshidden} style=""border: 0px solid black; vertical-align: top; margin-top: 7px;"">${labeltext}</div>
			<div class=""form_input_col"" style=""border: 0px solid black"">
				<input id=""pnl_edit-${prefix}${fieldname}"" class=""${compclass}"" mapping=""${fieldname}"" style=""width: 400px; text-align:right"" data-options=""precision: ${type.precision}, decimalSeparator:'.', groupSeparator:','  ${stroptions}"">
				<div style=""margin-top: 3px; margin-bottom: 5px; font-size: 0.75em; font-style: italic; color:#54381d;"">${tipsvisible}</div>
			</div>
		</div>\r\n`	



			} else if (compclass=='easyui-filebox') {
				formcomp_script += `

		<div ${varid}class=""form_row pnl_edit_row${additionalclass}"" ${formrowstyle}>
			<div class=""form_label_col${labeltipsclass}"" ${tipshidden} style=""border: 0px solid black; vertical-align: top; margin-top: 7px;"">${labeltext}</div>
			<div class=""form_input_col"" style=""border: 0px solid black"">
				<input id=""pnl_edit-${prefix}${fieldname}"" class=""${compclass}"" mapping=""${fieldname}"" style=""width: 400px"" data-options=""${stroptions.substring(1)} "">
				<div style=""display: flex;"">
					<a class=""filedownloadlink"" id=""pnl_edit-${prefix}${fieldname}_link"" style=""cursor:pointer; margin-right: 10px; display: none"">Download File</a>	
					<div style=""margin-top: 3px; margin-bottom: 5px; font-size: 0.75em; font-style: italic; color:#54381d;"">${tipsvisible}</div>
				</div>
				<img id=""pnl_edit-${prefix}${fieldname}_img"" style=""width: 200px; width: 200px; border: 1px solid: #ccc; display:none"">				
			</div>
		</div>\r\n`					


			} else {
				formcomp_script += `
		<div ${varid}class=""form_row pnl_edit_row${additionalclass}"" ${formrowstyle}>
			<div class=""form_label_col${labeltipsclass}"" ${tipshidden} style=""border: 0px solid black; vertical-align: top; margin-top: 7px;"">${labeltext}</div>
			<div class=""form_input_col"" style=""border: 0px solid black"">
				<input id=""pnl_edit-${prefix}${fieldname}"" class=""${compclass}"" mapping=""${fieldname}"" style=""width: 400px"" data-options=""${stroptions.substring(1)} "">
				<div style=""margin-top: 3px; margin-bottom: 5px; font-size: 0.75em; font-style: italic; color:#54381d;"">${tipsvisible}</div>
			</div>
		</div>\r\n`				

			}



			// after rows
			if (html_after!='') {
				formcomp_script += `\t\t${html_after}\r\n`;
			}



			/* SECTION END --------------------------------------------------- */
			if (section!=null) {
				if (section.position=='end') {
					formcomp_script += `
		</div>
					`;
				}
			}
			/* SECTION END --------------------------------------------------- */			

		}


		var detilpanel_script = ''
		if (Object.keys(genconfig.schema.detils).length>0) {
			var detilrow = ''

			for (var detilname in genconfig.schema.detils) {
				var detil = genconfig.schema.detils[detilname]
				var detiltitle = detil.title!=null ? detil.title : detilname;
				var tabvisible = detil.tabvisible===false ? false : true;



				var styles=[]
				if (!tabvisible) {
					styles.push('display:none')
				}
				var style = styles.join('; ');


				if (detil.form===true) {
					detilrow += `\t\t\t\t<div class=""fgtable-head-drow"" style=""height: 25px; padding: 5px 5px 0px 5px; ${style}"" onclick=""$ui.getPages().ITEMS['pnl_edit'].handler.detil_open('pnl_edit${detilname}grid')"">\r\n`;
					detilrow += `\t\t\t\t\t<div id=""pnl_edit-txt_${detilname}_title"" class=""detilgrid-text"">${detiltitle}</div>\r\n`;
					detilrow += `\t\t\t\t\t<div id=""pnl_edit-txt_${detilname}_value"" class=""detilgrid-value"">&nbsp;</div>\r\n`;
					detilrow += `\t\t\t\t</div>\r\n`;
				} else {
					detilrow += `\t\t\t\t<div class=""fgtable-head-drow"" style=""height: 25px; padding: 5px 5px 0px 5px; ; ${style}"" onclick=""$ui.getPages().ITEMS['pnl_edit'].handler.detil_open('pnl_edit${detilname}')"">\r\n`;
					detilrow += `\t\t\t\t\t<div id=""pnl_edit-txt_${detilname}_title"" class=""detilgrid-text"">${detiltitle}</div>\r\n`;
					detilrow += `\t\t\t\t\t<div id=""pnl_edit-txt_${detilname}_value"" class=""detilgrid-value"">&nbsp;</div>\r\n`;
					detilrow += `\t\t\t\t</div>\r\n`;
				}
			}

			// Detil
			detilpanel_script = `
		<div id=""pnl_edit-detil"" class=""form_row"" style=""margin-top: 30px"">
			<div class=""form_label_col""></div>
			<div class=""form_input_col detilbox"" style=""border: 0px solid black"">
				<div class=""fgtable-head"" style=""height: 25px; padding: 5px 0px 0px 5px"">Detil Informations</div>
${detilrow}
			</div>		
		</div>		
		
		`

		} 


		// console.log(headermap_script)
		var pagetitle = genconfig.title
		if (genconfig.schema.title!=null) {
			pagetitle = genconfig.schema.title
		}



		// print button
		var add_printfunction = genconfig.printing;
		var printbutton = '';
		if (add_printfunction) {
			printbutton = `<a id=""pnl_edit-btn_print"" href=""javascript:void(0)"" class=""easyui-linkbutton c8"" style=""margin-left:10px; margin-bottom: 10px;"" data-options=""iconCls:'icon-print'"">print</a>`;
		}


		var commitbutton = '';
		var approvebutton = '';
		if (add_commiter) {
			commitbutton = `
			<a id=""pnl_edit-btn_commit"" href=""javascript:void(0)"" class=""easyui-linkbutton c8"" style=""margin-left:10px; margin-bottom: 10px;"" data-options=""iconCls:'fgta-icon-commit'"">Commit</a>			
			<a id=""pnl_edit-btn_uncommit"" href=""javascript:void(0)"" class=""easyui-linkbutton c8"" style=""margin-left:10px; margin-bottom: 10px;"" data-options=""iconCls:'fgta-icon-uncommit'"">UnCommit</a>
			`;
			if (add_approval) {
				approvebutton = `
				<a id=""pnl_edit-btn_approve"" href=""javascript:void(0)"" class=""easyui-linkbutton c8"" style=""margin-left:10px; margin-bottom: 10px;"" data-options=""plain:true,iconCls:'fgta-icon-posting'"">Approve</a>
				<a id=""pnl_edit-btn_decline"" href=""javascript:void(0)"" class=""easyui-linkbutton c8"" style=""margin-left:10px; margin-bottom: 10px;"" data-options=""plain:true,iconCls:'fgta-icon-unposting'"">Decline</a>
				`;
			}
		}
		
		var xtionbuttons = '';
		for (var xtionname in genconfig.schema.xtions) {
			var xtion = genconfig.schema.xtions[xtionname]
			xtionbuttons += `\t\t\t\t<a id=""pnl_edit-${xtion.buttonname}"" href=""javascript:void(0)"" class=""easyui-linkbutton c8"" style=""width: 80px; margin-left:10px; margin-bottom: 10px;"" data-options=""plain:true"">${xtion.buttontext}</a>\r\n`
		}


		var phtmltpl = path.join(genconfig.GENLIBDIR, 'tpl', 'edit_phtml.tpl')
		var tplscript = fs.readFileSync(phtmltpl).toString()
		tplscript = tplscript.replace('<!--__FORMCOMP__-->', formcomp_script)
		tplscript = tplscript.replace('<!--__DETILPANEL__-->', detilpanel_script)
		tplscript = tplscript.replace('<!--__PAGETITLE__-->', pagetitle)
		tplscript = tplscript.replace('<!--__PRINTBUTTON__-->', printbutton)
		tplscript = tplscript.replace('<!--__COMMITBUTTON__-->', commitbutton)
		tplscript = tplscript.replace('<!--__APPROVEBUTTON__-->', approvebutton)
		tplscript = tplscript.replace('<!--__XTIONBUTTONS__-->', xtionbuttons)
		tplscript = tplscript.replace('<!--__BASENAME__-->', genconfig.basename);
		

		fsd.script = tplscript		


	} catch (err) {
		throw err
	}
}"
eFSVbsXf,js arithmetic alert() prompt(),rezamalik15,JavaScript,Wednesday 24th of May 2023 10:50:27 PM CDT,"let side =  prompt(""Masukkan panjang sisi persegi (cm)"");
let area = side * side;

alert(""Luasnya adalah "" + area + "" cm2"");"
1yiuwJ2h,js arithmetic,rezamalik15,JavaScript,Wednesday 24th of May 2023 10:46:43 PM CDT,"// pertamabahan
let add = 1 + 2 + 10 + 7;
console.log(add)

// pengurangan
number1 = 100;
number2 = 58;
let substract = number1 - number2;
console.log(number1 + "" - "" + number2 + "" = "" + substract);

// perkalian
let multiply = number1 * number2;
console.log(number1 + "" x "" + number2 + "" = "" + multiply);

// pembagian
let divide = number1 / number2;
console.log(number1 + "" / "" + number2 + "" = "" + divide)"
JwcMELzu,gambitengine scribe example,djmango,TypeScript,Wednesday 24th of May 2023 10:43:16 PM CDT,"import { components, paths as ge_paths } from '@/types/gambitengine'; // This is a generated file from the GambitEngine API spec
import { saveTranscription } from '@/pages/api/webhooks/scribe';
import type { NextApiRequest, NextApiResponse } from 'next';

type Transcription = components['schemas']['Transcription'];

// const GE_API_URL = 'https://dev.api.gambitengine.com/';
const GE_API_URL = 'https://api.gambitengine.com/';
const GE_API_KEY = process.env.GAMBITENGINE_API_KEY || '';
let VERCEL_URL = `https://${process.env.NEXT_PUBLIC_VERCEL_URL}`;

if (VERCEL_URL === undefined) {
  console.warn('VERCEL_URL is undefined, using localhost:3000');
  VERCEL_URL = 'https://localhost:3000';
}

// Use the GambitEngine Scribe API to start the transcription of an audio file
const createScribeJob = async (audioUrl: string, uid: string) => {
  const transcription_create_options = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Bearer ${GE_API_KEY}`
    },
    body: JSON.stringify({
      ""url"": audioUrl,
      ""webhooks"": [{
        ""url"": `${VERCEL_URL}/api/webhooks/scribe`,
      }]
    })
  };

  try {
    // First we need to create a transcription job, and give Scribe our file
    // https://dev.api.gambitengine.com/docs
    const transcription_create_req = await fetch(`${GE_API_URL}v1/scribe/transcriptions`, transcription_create_options);
    if (!transcription_create_req.ok) {
      throw new Error(`Failed with status code ${transcription_create_req.status}`);
    }
    const transcription_create_res: ge_paths['/v1/scribe/transcriptions']['post']['responses']['201']['content']['application/json'] = await transcription_create_req.json();

    // Save the transcription to the firebase database with our user id so we have perms to read it later
    saveTranscription(transcription_create_res.transcription, uid);
    
    // Return the transcription id so we can listen for it on the realtime database
    return transcription_create_res.transcription.transcription_id;
  } catch (error) {
    console.error(error);
    return Promise.reject(error);
  }
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const data = req.body;
  const uid = data.uid;
  const audioUrl = data.audioUrl;

  if (req.method === 'POST' && audioUrl) {
    const transcription_id = await createScribeJob(audioUrl, uid);
    // Maybe save the transcription id to the user's profile in the database?
    console.log(`Transcription id: ${transcription_id}`);
    res.status(200).json({ transcript: transcription_id });
  } else {
    res.status(400).json({ error: 'Invalid request' });
  }
}
"
dV3LRFVt,RegisterFragment,raka_m_a,Kotlin,Wednesday 24th of May 2023 10:38:08 PM CDT,"@AndroidEntryPoint
class RegisterFragment: Fragment(R.layout.fragment_register) {

    private val binding: FragmentRegisterBinding by viewBinding()
    private val viewModel: RegisterViewModel by viewModels()

    override fun onStart() {
        super.onStart()
        viewModel.setUserRole(0)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.txtGoToLogin.setOnClickListener {
            findNavController().navigate(R.id.nav_login)
        }

        binding.btnRegister.setOnClickListener {
            val email = binding.inputEmail.editText?.text.toString()
            val password = binding.inputPassword.editText?.text.toString()
            val name = binding.inputName.editText?.text.toString()
            val phoneNumber = binding.inputPhone.editText?.text.toString()

            viewModel.register(
                email, name, password, phoneNumber
            )
        }

        lifecycleScope.launch {
            viewModel.uiEvent.collectLatest { event ->
                when (event) {
                    is AuthUiEvent.EmptyTextField -> {
                        buildSnackbar(
                            binding.root,
                            ""Form pendaftaran belum diisi lengkap""
                        ).show()
                    }
                    is AuthUiEvent.Error -> {
                        buildSnackbar(
                            binding.root,
                            event.message
                        )
                    }
                    is AuthUiEvent.Loading -> {
                        with(binding) {
                            btnRegister.isEnabled = false
                            inputName.isEnabled = false
                            inputPassword.isEnabled = false
                            inputEmail.isEnabled = false
                        }
                    }
                    is AuthUiEvent.Success -> {
                        with(binding) {
                            btnRegister.isEnabled = true
                            inputName.isEnabled = true
                            inputPassword.isEnabled = true
                            inputEmail.isEnabled = false
                        }
                        requireActivity().startActivity(Intent().setClassName(requireContext(), ""com.rmaprojects.eduwatch.MainActivity""))
                        requireActivity().finish()
                    }
                }
            }
        }

        lifecycleScope.launch {
            viewModel.fetchStudentUiEvent.collectLatest { event ->
                when (event) {
                    is FetchStudentUiEvent.Error -> {
                        buildSnackbar(
                            binding.root,
                            ""Error Fetching Students""
                        ).show()
                    }
                    is FetchStudentUiEvent.Success -> {
                        val item = event.data.map { it.name }.toTypedArray()
                        binding.inputStudent.setSimpleItems(item)
                        binding.inputStudent.setOnItemClickListener { _, _, position, _ ->
                            binding.inputStudent.setText(item[position])
                            viewModel.setSelectedStudentId(event.data[position].id)
                        }
                    }
                }
            }
        }

        binding.composeViewSegmentRole.setContent {
            EduWatchSegmentedButton(
                items = listOf(""Guru"", ""Wali Murid""),
                onItemSelection = { selectedRole ->
                    viewModel.setUserRole(selectedRole)
                    when (selectedRole) {
                        0 -> binding.layoutInputParents.isVisible = false
                        1 -> binding.layoutInputParents.isVisible = true
                    }
                }
            )
        }
    }
}"
ZAxF08xY,LoginFragment,raka_m_a,Kotlin,Wednesday 24th of May 2023 10:37:30 PM CDT,"@AndroidEntryPoint
class LoginFragment : Fragment(R.layout.fragment_login) {

    private val binding: FragmentLoginBinding by viewBinding()
    private val viewModel: LoginViewModel by viewModels()

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.txtToRegister.setOnClickListener {
            findNavController().navigate(R.id.nav_register)
        }

        binding.btnSignIn.setOnClickListener {
            val email = binding.inputEmail.editText?.text.toString()
            val password = binding.inputPassword.editText?.text.toString()
            viewModel.login(email, password)
        }

        lifecycleScope.launch {
            viewModel.uiEvent.collectLatest { event ->
                when (event) {
                    is AuthUiEvent.EmptyTextField -> {
                        buildSnackbar(
                            binding.root,
                            ""Email atau Password masih kosong""
                        ).show()
                    }
                    is AuthUiEvent.Error -> {
                        buildSnackbar(
                            binding.root,
                            event.message
                        ).show()
                    }
                    is AuthUiEvent.Loading -> {
                        with(binding) {
                            inputEmail.isEnabled = false
                            inputPassword.isEnabled = false
                            btnSignIn.isEnabled = false
                        }
                    }
                    is AuthUiEvent.Success -> {
                        with(binding) {
                            inputEmail.isEnabled = true
                            inputPassword.isEnabled = true
                            btnSignIn.isEnabled = true
                            requireActivity().startActivity(Intent().setClassName(requireContext(), ""com.rmaprojects.eduwatch.MainActivity""))
                            requireActivity().finish()
                        }
                    }
                }
            }
        }
    }
}"
zN0u11Tg,cream.spec.js,mr_anastasov,JavaScript,Wednesday 24th of May 2023 10:36:23 PM CDT,"import { Product } from './product.js';
import { Scent } from './scent.js';

export class Cream extends Product {

    #scent;

    static #minNameLength = 3;
    static #maxNameLength = 15;
    static #minBrandLength = 3;
    static #maxBrandLength = 15;

    /**
  * @param {string} name
  * @param {string} brand
  * @param {number} price
  * @param {Gender} gender
  * @param {number} milliliters
  * @param {Usage} usage
  */

    constructor(name, brand, price, gender, scent) {
      super(name, brand, price, gender);
      this.validateScent(scent);
      this.#scent = scent;
    }

    validateName(value) {
      if (!value) {
        throw new Error('Invalid name!');
      }

      if (value.length < Cream.#minNameLength || value.length > Cream.#maxNameLength) {
        throw new Error(`Product name length must be between ${Cream.#minNameLength} and ${Cream.#maxNameLength}`);
      }
    }

    validateBrand(value) {
      if (!value) {
        throw new Error('Invalid brand!');
      }

      if (value.length < Cream.#minBrandLength || value.length > Cream.#maxBrandLength) {
        throw new Error(`Product brand length must be between ${Cream.minBrandLength} and ${Cream.maxBrandLength}`);
      }
    }

    get scent() {
      return this.#scent;
    }

    validateScent(value) {
      if (!Scent.hasOwnProperty(value)) {
      // if (!Object.keys(Scent).some(key => Scent[key] === value))
        throw new Error('You should use rose, lavender or vanilla.');
      }
    }

    additionalInfo() {
      return ` #Scent: ${Scent[this.#scent]}`;
    }
}

"
9tiAWyEM,var let const,rezamalik15,JavaScript,Wednesday 24th of May 2023 10:35:44 PM CDT,"var name1 = ""Budi"";
name1 = ""Budiman"";
var name1 = ""Budi dan Budiman"";

let name2 = ""Ahmad"";
name2 = ""Roni"";
// let name2 = ""Rohmat""; ini akan error

const pi = 3.14;
// pi = 3.145; ini akan error
// const pi = 3.14; ini akan error"
qZxh3btt,RegisterViewModel,raka_m_a,Kotlin,Wednesday 24th of May 2023 10:35:28 PM CDT,"@HiltViewModel
class RegisterViewModel @Inject constructor(
    private val useCases: EduWatchUseCases
) : ViewModel() {

    private val _uiEvent = MutableSharedFlow<AuthUiEvent>()
    val uiEvent = _uiEvent.asSharedFlow()

    private val _fetchStudentUiEvent = MutableSharedFlow<FetchStudentUiEvent>()
    val fetchStudentUiEvent = _fetchStudentUiEvent.asSharedFlow()

    private val _userRole = mutableStateOf(UserRole.PARENTS)

    private val _selectedStudentId = mutableStateOf<Int?>(null)

    init {
        getStudents()
    }

    fun setUserRole(role: Int) {
        _userRole.value = when (role) {
            0 -> UserRole.TEACHERS
            1 -> UserRole.PARENTS
            else -> throw Exception(""Unknown Value"")
        }
    }

    fun setSelectedStudentId(studentId: Int?) {
        _selectedStudentId.value = studentId
    }

    fun register(
        email: String,
        name: String,
        password: String,
        phoneNumber: String,
    ) {
        viewModelScope.launch {
            if (_userRole.value == UserRole.PARENTS) {
                if (phoneNumber.isBlank() || _selectedStudentId.value == null) {
                    _uiEvent.emit(AuthUiEvent.EmptyTextField)
                    return@launch
                }
            }

            if (email.isBlank() || password.isBlank() || name.isBlank()) {
                _uiEvent.emit(AuthUiEvent.EmptyTextField)
                return@launch
            }
            _uiEvent.emit(AuthUiEvent.Loading)
            try {
                useCases.authUseCases.register(
                    email, password, name, _userRole.value, phoneNumber, _selectedStudentId.value
                )
                _uiEvent.emit(AuthUiEvent.Success)
            } catch (e: Exception) {
                _uiEvent.emit(
                    AuthUiEvent.Error(
                        e.message ?: ""Error Occurred when Registering User""
                    )
                )
            }
        }
    }

    private fun getStudents() {
        viewModelScope.launch {
            try {
                val result = useCases.authUseCases.getStudents()
                _fetchStudentUiEvent.emit(FetchStudentUiEvent.Success(result))
            } catch (e: Exception) {
                _fetchStudentUiEvent.emit(
                    FetchStudentUiEvent.Error(
                        e.message ?: ""Error Occurred when getting students""
                    )
                )
            }
        }
    }
}"
acKSiEg3,LoginViewModel,raka_m_a,Kotlin,Wednesday 24th of May 2023 10:34:36 PM CDT,"@HiltViewModel
class LoginViewModel @Inject constructor(
    private val useCases: EduWatchUseCases
): ViewModel() {

    private val _uiEvent = MutableSharedFlow<AuthUiEvent>()
    val uiEvent = _uiEvent.asSharedFlow()

    fun login(
        email: String,
        password: String
    ) {
        viewModelScope.launch {
            if (email.isBlank() || password.isBlank()) {
                _uiEvent.emit(AuthUiEvent.EmptyTextField)
                return@launch
            }
            try {
                useCases.authUseCases.login(email, password)
                _uiEvent.emit(AuthUiEvent.Success)
            } catch (e: Exception) {
                _uiEvent.emit(AuthUiEvent.Error(e.message ?: ""Error Occurred when Logging in.""))
            }
        }
    }

}"
iFhgE3T0,fragment_register,raka_m_a,XML,Wednesday 24th of May 2023 10:32:12 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<ScrollView xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    xmlns:app=""http://schemas.android.com/apk/res-auto"">

    <LinearLayout
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:gravity=""center_horizontal""
        android:padding=""16dp""
        android:orientation=""vertical"">

        <com.google.android.material.textview.MaterialTextView
            android:layout_width=""match_parent""
            android:text=""Register""
            android:textStyle=""bold""
            android:layout_marginVertical=""24dp""
            android:textAppearance=""@style/TextAppearance.Material3.HeadlineLarge""
            android:textColor=""?colorOnBackground""
            android:layout_height=""wrap_content""/>

        <ImageView
            android:layout_width=""78dp""
            android:src=""@drawable/eduwatch_logo""
            android:layout_marginVertical=""8dp""
            android:layout_height=""78dp""/>

        <com.google.android.material.textfield.TextInputLayout
            android:id=""@+id/input_name""
            android:layout_width=""match_parent""
            app:startIconDrawable=""@drawable/baseline_person_24""
            app:endIconMode=""clear_text""
            android:layout_marginVertical=""12dp""
            android:layout_height=""wrap_content"">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width=""match_parent""
                android:hint=""Nama Lengkap""
                android:inputType=""text""
                android:layout_height=""wrap_content""/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id=""@+id/input_email""
            android:layout_width=""match_parent""
            
            app:startIconDrawable=""@drawable/baseline_mail_24""
            app:endIconMode=""clear_text""
            android:layout_marginVertical=""8dp""
            android:layout_height=""wrap_content"">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width=""match_parent""
                android:hint=""Email""
                android:inputType=""textEmailAddress""
                android:layout_height=""wrap_content""/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id=""@+id/input_password""
            android:layout_width=""match_parent""
            app:startIconDrawable=""@drawable/baseline_lock_24""
            app:endIconMode=""password_toggle""
            android:layout_marginVertical=""8dp""
            android:layout_height=""wrap_content"">
            <com.google.android.material.textfield.TextInputEditText
                android:layout_width=""match_parent""
                android:hint=""Password""
                android:inputType=""textPassword""
                android:layout_height=""wrap_content""/>
        </com.google.android.material.textfield.TextInputLayout>

        <androidx.compose.ui.platform.ComposeView
            android:id=""@+id/compose_view_segment_role""
            android:layout_width=""match_parent""
            android:layout_height=""wrap_content""/>

        <LinearLayout
            android:id=""@+id/layout_input_parents""
            android:layout_width=""match_parent""
            android:orientation=""vertical""
            android:visibility=""gone""
            android:layout_marginVertical=""16dp""
            android:layout_height=""wrap_content"">

            <com.google.android.material.textfield.TextInputLayout
                android:id=""@+id/input_phone""
                android:layout_width=""match_parent""
                app:startIconDrawable=""@drawable/baseline_call_24""
                android:layout_marginVertical=""8dp""
                android:layout_height=""wrap_content"">
                <com.google.android.material.textfield.TextInputEditText
                    android:layout_width=""match_parent""
                    android:hint=""Nomor Telepon""
                    android:inputType=""number""
                    android:layout_height=""wrap_content""/>
            </com.google.android.material.textfield.TextInputLayout>

            <com.google.android.material.textfield.TextInputLayout
                android:layout_width=""match_parent""
                app:endIconMode=""dropdown_menu""
                app:hintEnabled=""true""
                app:hintAnimationEnabled=""true""
                app:startIconDrawable=""@drawable/baseline_school_24""
                android:layout_height=""wrap_content"">
                <com.google.android.material.textfield.MaterialAutoCompleteTextView
                    android:id=""@+id/input_student""
                    android:layout_width=""match_parent""
                    style=""@style/Widget.Material3.AutoCompleteTextView.OutlinedBox""
                    android:hint=""Pilih Murid""
                    android:layout_height=""wrap_content""/>
            </com.google.android.material.textfield.TextInputLayout>

        </LinearLayout>

        <com.google.android.material.button.MaterialButton
            android:id=""@+id/btn_register""
            android:layout_width=""match_parent""
            android:text=""Register""
            android:layout_marginVertical=""12dp""
            android:layout_height=""wrap_content""/>

        <com.google.android.material.textview.MaterialTextView
            android:id=""@+id/txt_go_to_login""
            android:layout_width=""match_parent""
            android:text=""Sudah punya akun? Login""
            android:gravity=""center_horizontal""
            android:textAppearance=""@style/TextAppearance.Material3.BodyMedium""
            android:layout_height=""wrap_content""/>
    </LinearLayout>

</ScrollView>"
