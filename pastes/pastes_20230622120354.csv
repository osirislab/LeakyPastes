id,title,username,language,date,content
YVddBf0w,Untitled,Archer2o2x,Lua,Thursday 22nd of June 2023 06:58:52 AM CDT,"Drinks = {
    ""Green Tea"",
    ""Black Tea"",
    ""Coffee"",
    ""Cookie""
}

DrinkSides = {
    ""top"",
    ""right"",
    ""left"",
    ""front""
}

local function makeButton(x, y, w, h)

    return {
        buttonX = x,
        buttonY = y,
        buttonW = w,
        buttonH = h
    }

end

local function checkButton(button, x, y)
    
    return x >= button.buttonX and y >= button.buttonY and x <= button.buttonX + button.buttonW and y <= button.buttonY + button.buttonH

end

local function justifyCenter(text, space)
    
    local left = math.floor((space - string.len(text)) / 2)
    local right = math.ceil((space - string.len(text)) / 2)

    return string.rep("" "", left) .. text .. string.rep("" "", right)

end

PrimaryColor = colours.white
SecondaryColor = colours.yellow
TertiaryColor = colours.black
BackgroundColor = colours.grey

Monitor = peripheral.find(""monitor"")
MWidth, MHeight = Monitor.getSize()

SelectedOption = 1
SelectedAmount = 1

AddAmountButton = makeButton(2, 9, 1, 1)
SubAmountButton = makeButton(6, 9, 2, 1)

VendButton = makeButton(9, 9, 6, 1)

local function draw()

    -- Pre-Draw Setup
    Monitor.setTextColour(PrimaryColor)
    Monitor.setBackgroundColour(BackgroundColor)
    Monitor.setTextScale(0.5)
    Monitor.clear()

    -- Draw Title
    Monitor.setCursorPos(1, 1)
    Monitor.setTextColour(SecondaryColor)
    Monitor.setBackgroundColour(TertiaryColor)
    Monitor.write(""- VENDER v1.0 -"")

    -- Draw Drinks
    for i = 1, #Drinks do
        
        Monitor.setCursorPos(1, i + 2)

        if SelectedOption == i then
            Monitor.setTextColour(TertiaryColor)
            Monitor.setBackgroundColour(SecondaryColor)
        else
            Monitor.setTextColour(PrimaryColor)
            Monitor.setBackgroundColour(BackgroundColor)
        end

        Monitor.write("" "" .. Drinks[i]  .. string.rep("" "", MWidth - string.len(Drinks[i])))

    end

    -- Draw Amount
    Monitor.setCursorPos(2, 9)
    Monitor.setTextColour(PrimaryColor)
    Monitor.setBackgroundColour(BackgroundColor)
    Monitor.write(""+ "" .. tostring(SelectedAmount) .. "" -"")

    -- Draw Vend Button
    Monitor.setCursorPos(9, 9)
    Monitor.setTextColour(SecondaryColor)
    Monitor.setBackgroundColour(BackgroundColor)
    Monitor.write(""[VEND]"")

end

local function drawVending()

    Monitor.setTextColour(SecondaryColor)
    Monitor.setBackgroundColour(BackgroundColor)
    Monitor.setTextScale(0.5)
    Monitor.clear()

    Monitor.setCursorPos(1, 3)
    Monitor.write(justifyCenter(""Vending"", MWidth))
    Monitor.setCursorPos(1, 5)
    Monitor.setTextColour(PrimaryColor)
    Monitor.write(justifyCenter(tostring(SelectedAmount) .. "" "" .. Drinks[SelectedOption], MWidth))
    Monitor.setCursorPos(1, 7)
    Monitor.setTextColour(SecondaryColor)
    Monitor.write(justifyCenter(""Please Wait"", MWidth))


end

draw(2)

print(""Startup Successful"")
print(""Vending..."")

while true do
    
    local event, _, x, y = os.pullEvent(""monitor_touch"")

    if y >= 3 and y <= #Drinks + 2 then
        SelectedOption = y - 2
        draw()
    end

    if checkButton(AddAmountButton, x, y) then
        SelectedAmount = SelectedAmount + 1
        if SelectedAmount > 64 then
            SelectedAmount = 64
        end
        draw()
    end

    if checkButton(SubAmountButton, x, y) then
        SelectedAmount = SelectedAmount - 1
        if SelectedAmount < 1 then
            SelectedAmount = 1
        end
        draw()
    end

    if checkButton(VendButton, x, y) then
        print(tostring(SelectedAmount) .. "" * "" .. Drinks[SelectedOption] .. "" vended."")
        drawVending()

        print(DrinkSides[SelectedOption])
        for i = 1, SelectedAmount do
            
            redstone.setAnalogOutput(DrinkSides[SelectedOption], 1)
            sleep(0.1)
            redstone.setAnalogOutput(DrinkSides[SelectedOption], 0)
            sleep(0.1)

        end

        draw()
    end

end"
yVf4L1Xt,step motor_V2,bipping,C++,Thursday 22nd of June 2023 06:55:55 AM CDT,"#include <avr/interrupt.h>
#include <Arduino.h>
#include <Wire.h>
#include <rgb_lcd.h>

#define toggle(x) digitalWrite(x, !digitalRead(x))                            //est une macro qui inverse la valeur logique de la broche     
#define potard (map(analogRead(A0), 0, 1023, 11200, 11300))                   //lit la valeur analogique de la broche A0, la mappe entre 11200 et 11300, 
//                                                                            //cela permet de définir une plage de valeur pour la vitesse d'avance du moteur.
#define switch 2                                                              //est la broche utilisée pour lire l'état du bouton,

#define pul 9                                                                 // sont les broches utilisées pour controler le moteur pas à pas.
#define dir 8                                                                 //
#define ENA 10                                                                //
#define buz 11                                                                // buzzer
#define NOTE_DS6 1245                                                         //sont des constantes pour les fréquences de notes de musique.
#define NOTE_CS6 1109                                                         //

rgb_lcd lcd;                                                                  //est une librairie personnalisée qui permet de contrôler 
//                                                                            //un écran LCD avec des couleurs.
const int colorR = 255;                                                       //sont les couleurs utilisées pour l'affichage de l'écran LCD
const int8_t colorG = 0;                                                         //
const int8_t colorB = 0;                                                         //
//                                                                            // sont les broches utilisées pour les LED de couleur orange, verte et rouge.
const int8_t(orange) = 7;                                                        // broche 7 orange
const int8_t(vert) = 6;                                                          // broche 6 vert
const int8_t(rouge) = 5;                                                         // broche 5 rouge

const int8_t NUM_TIMERS = 7;
const int8_t TIMER_LED_ORANGE = 0;
const int8_t TIMER_LED_VERT = 1;
const int8_t TIMER_LED_ROUGE = 3;
const int8_t TIMER_MOTOR = 2;
const int8_t TIMER_LCD_Origine = 4;
const int8_t TIMER_LCD_avance = 5;
const int8_t TIMER_LCD_toggle = 6;

int i = 0;
int8_t i_sens = 1;

const unsigned long interval = 500;                                          // est l'interval de temps entre deux clignotements des LED en milli-secondes.

unsigned long previousTimers[7];                                             // est un tableau utilisé pour stocker les temps précédents pour chaque tache

unsigned long Nombres_de_pas = 0;                                            // est un compteur qui stocke le nombre de pas effectués par le moteur
unsigned long Nombres_de_pas_max = 120000;                                   // est la limite maximale de pas pour le moteur

bool stat_switch = false;                                                    // est un booléen qui stocke l'état du bouton switch
bool sens = false;                                                           // est un booléen qui stocke le sens de rotation du moteur
bool Signal_PWM = false;                                                      // est un booléen qui active ou désactive le moteur
bool initialisation = false;                                                 // est un booléen qui active ou désactive l'initialisation
bool dir_init = false;                                                       //est un booléen qui stocke l'état de la direction d'initialisation

  byte L[8] = {                                                              //createChar(1, tab);
    0b00000,
    0b11000,
    0b01100, 
    0b00100, 
    0b01100, 
    0b10010, 
    0b10001, 
    0b00000
    };                                                                       // est un tableau de bytes qui contient la forme pour un caractère personnalisé 
//                                                                           // qui sera affiché sur l'écran LCD
ISR(TIMER1_COMPA_vect){                                                      // fonction de service d'interruption qui est appelée lorsque 
//                                                                           //le timer 1 atteint une certaine valeur spécifiée.
    if(Signal_PWM == true){
        toggle (pul);                                                        //inverse la valeur logique de la broche 
        Nombres_de_pas++;                                                    //incrémente le compteur de pas Nombres_de_pas .
    }
}

void LCD_Origine(){
        // fonction qui gère l'affichage de l'écran LCD lorsque le bouton est relacher
          stat_switch = digitalRead(switch);                                  // lit l'état du bouton et l'écrit dans stat_switch 
        //                                                                    //
        OCR1A = potard;                                                       // met à jour la vitesse d'avance avec la valeur de potard 
        //                                                                    //
        lcd.clear();                                                          // efface l'écran LCD 
        lcd.home();                                                           // 
        lcd.print(""Origine"");                                                 // affichage LCD ligne 1 ""programme Origine""
        lcd.setCursor(1, 1);                                                  //
        lcd.print(Nombres_de_pas);                                            // affiche la valeur de Nombres_de_pas 
        lcd.setCursor(6, 1);                                                  // 
        lcd.print(potard);                                                    // affichage la valauer de potard
        lcd.createChar(1,L);                                                  // affiche un caractère personnalisé sur la seconde ligne.
        lcd.setCursor(11, 1);                                                 // 
        lcd.write(byte(1));                                                         
}

void LCD_avance(){
          // fonction qui gère l'affichage de l'écran LCD lorsque le moteur tourne
        Signal_PWM = true;                                                    // met à jour la Signal_PWM pour activer le moteur
        
        lcd.clear();                                                         // efface l'écran LCD
        lcd.home();                                                          // 
        lcd.print(""Programme"");                                              // affiche ""Programme"" et ""Lambda"" sur la première ligne
        lcd.setCursor(10, 0);                                                //
        lcd.print(""Lambda"");                                                 //
        lcd.setCursor(1, 1);                                                 //
        lcd.print(Nombres_de_pas);                                           // affiche la valeur de Nombres_de_pas sur la seconde ligne
        lcd.setCursor(10, 1);                                                //
        lcd.print(potard);                                                   // affiche des informations sur la position et la vitesse sur la seconde ligne.
        lcd.createChar(1,L);                                                 //
        lcd.setCursor(15, 1);                                                // 
        lcd.write(byte(1));                                                  //
        }

void LCD_toggle(){ // fonction qui gère l'affichage alternatif de l'écran LCD entre l'affichage de la position actuelle et l'affichage de la position cible
        
        lcd.clear();                                                         // efface l'écran LCD
        lcd.home();                                                          //
        lcd.print(""toggle"");                                                 // affichage LCD ligne 1 ""toggle""
        lcd.setCursor(10, 0);                                                //
        lcd.print(""Lambda"");                                                 //
        lcd.setCursor(1, 1);                                                 //
        lcd.print(Nombres_de_pas);                                           // affiche la position actuelle et la position cible sur la première ligne
        lcd.setCursor(10, 1);                                                //
        lcd.print(potard);                                                   // affiche des informations sur la position et la vitesse sur la seconde ligne.
        lcd.createChar(1,L);                                                 //
        lcd.setCursor(15, 1);                                                // 
        lcd.write(byte(1));                                                  //
        stat_switch = digitalRead(switch);                                   // lit l'état du bouton et l'écrit dans stat_switch 
        digitalWrite(rouge, LOW);
}

void setup(){
    Serial.begin(115200);                                                       // ça pulse à 115 200 Hertz
    lcd.begin(16, 2);                                                           // set up the LCD's number of columns and rows:
    lcd.setRGB(colorR, colorG, colorB);                                         //
    lcd.print(""initialization"");                                                // Print a message to the LCD.

    pinMode(orange, OUTPUT);                                                    // LED orange
    pinMode(vert, OUTPUT);                                                      // LED vert
    pinMode(rouge, OUTPUT);                                                     // LED rouge
    
    pinMode(A0, INPUT);                                                         // potentiomètre A0
    pinMode(switch, INPUT_PULLUP);                                              // configurer la pin 8 comme sortie pour contrôler la direction du moteur
    pinMode(dir, OUTPUT);                                                       // direction du moteur
    pinMode(pul, OUTPUT);                                                       // vitesse du moteur la frecence est de ~177.77hz
    pinMode(ENA, OUTPUT);                                                       // frein du moteur >> relaché à l'état haut<< mode automatique à l'état bas>>
    pinMode(buz, OUTPUT);                                                       // Buzzer en sortie 10 s'appel buz

    digitalWrite(buz, LOW);                                                     // broche 10 buzzer
    digitalWrite(switch, HIGH);                                                 // bouton sur OFF

    digitalWrite(vert, HIGH);                                                   // eteint LED vert
    digitalWrite(orange, HIGH);                                                 // allumer LED temoin orange fixe
    digitalWrite(rouge, HIGH);                                                  // eteint LED rouge    
    
    tone(buz, NOTE_DS6, 500);
    
    delay(500);                                                                 // 1 seconde
    
    
    digitalWrite(vert, LOW);                                                    // eteint LED vert
    digitalWrite(rouge, LOW);                                                   // eteint LED rouge
    digitalWrite(orange, LOW);                                                  // allumer LED temoin orange fixe


    previousTimers[TIMER_LCD_toggle] = micros();                                // initialiser les valeurs à l'heure courante
    previousTimers[TIMER_LCD_avance] = micros();                                // initialiser les valeurs à l'heure courante
    previousTimers[TIMER_LCD_Origine] = micros();                               // initialiser les valeurs à l'heure courante
    previousTimers[TIMER_LED_ORANGE] = millis();                                // initialiser les valeurs à l'heure courante
    previousTimers[TIMER_LED_VERT] = millis();                                  // initialiser les valeurs à l'heure courante
    previousTimers[TIMER_LED_ROUGE] = micros();                                 // initialiser les valeurs à l'heure courante
    previousTimers[TIMER_MOTOR] = micros();                                     // initialiser les valeurs à l'heure courante
   
    TCCR1A = 0;                                                                 // configurer Timer1 pour utiliser l'OCR en mode CTC
    TCCR1B = (1 << WGM12) | (1 << CS11);
   
    OCR1A = potard;                                                             // configurer le registre de comparaison de sortie pour un certain nombre de pas

    TIMSK1 |= (1 << OCIE1A);                                                    // activer l'interruption associée à OCR1A

    delay(800);                                                                 // attend un peu

    sei();                                                                      // activer les interruptions globales
}

void loop(){

    //Origine
    if(stat_switch == false && Nombres_de_pas == 0 && sens == false){

        while(!initialisation) {
        digitalWrite(orange, LOW);                                               // eteint LED orange
        digitalWrite(vert, LOW);                                                 // eteint LED vert
        digitalWrite(ENA, HIGH);                                                 // moteur libre
        digitalWrite(rouge, HIGH);                                               // allumer une LED rouge  
        tone(buz, NOTE_CS6, 80);                                                 // note de musique
        delay(100);                                                              // attend un peu
        tone(buz, NOTE_DS6, 80);                                                 // note de musique
        delay(100);                                                              // attend un peu
        tone(buz, NOTE_DS6, 160);                                                // note de musique
        Signal_PWM = false;                                                       //ordre d'arret du moteur
        initialisation = true;                                                   // Ne recommence pas
        delay(250);                                                              // attend un peu
        digitalWrite(rouge, LOW);                                                // eteint une LED rouge        
        }

         if (micros() - previousTimers[TIMER_LCD_Origine] >= 250006) {
          // effectuer une action toute les 250ms appel void LCD_Origine()
           previousTimers[TIMER_LCD_Origine] = micros();                         //mise à jour avec la valeur actuelle de millis()
             
          LCD_Origine();                                                         //appel void LCD_Origine()
         }
          // gère la mise à jour de l'intensité de la LED rouge pour créer un effet de clignotement.
        if(micros() - previousTimers[TIMER_LED_ROUGE] > 10014){
          //                                                                     //
            analogWrite(rouge, i);                                               // régler l'intensité de la LED rouge en fonction de la valeur de la variable i
            i = i + i_sens;                                                      //incrémente ou décrémente la valeur de i en fonction de la valeur de i_sens 
            if(i>=255){
              i_sens = -1;                                                       //est -1 pour diminuer l'intensité de la LED rouge.
            }
            if(i<=0){
              i_sens = 1;                                                        //est 1 augmenter l'intensité de la LED rouge.
            }
          previousTimers[TIMER_LED_ROUGE] = micros();                            //
        }

      }

    //gère l'""avance"" du moteur vérifit l'état du bouton ou si le nombre maximum de pas a été atteint, et met à jour l'affichage LCD.
    while (Nombres_de_pas < Nombres_de_pas_max && stat_switch == true && sens == false){

        while(dir_init == false){
         digitalWrite(dir, LOW);                      // Tache sens de rotation
         digitalWrite(vert, HIGH);                    // allumer LED temoin vert fix
         digitalWrite(orange, LOW);                   // eteindre une LED orange
         digitalWrite(rouge, LOW);                    // eteindre une LED rouge
         lcd.clear();                                 // on efface tout
         lcd.home();                                  // retour à la ligne
         lcd.print(""Programme"");                      // affichage LCD ligne 1 ""programme principale""
         lcd.setCursor(1, 1);                         // 
         lcd.print(Nombres_de_pas);                   // 
         digitalWrite(ENA, LOW);                      // moteur sous tention
         dir_init = true;
        }
       

         if (micros() - previousTimers[TIMER_LCD_avance] >= 177797) {
          // effectuer une action pour le LCD et pour la moteur en marche avant
           previousTimers[TIMER_LCD_avance] = micros();                         //mise à jour avec la valeur actuelle de millis()
             
          LCD_avance();                                                         //appel void LCD_avance()
         }

        // Vérifier si l'utilisateur a appuyé sur le bouton
        if(digitalRead(switch) == LOW) {
         stat_switch = false;                                                   // mise à jour de l'état du bouton
         //                                                                     // Signal_PWM fin de la tache avance
          digitalWrite(vert, LOW);                                              // éteindre la LED verte.
          lcd.clear();                                                          // on efface tout
          lcd.home();                                                           // retour à la ligne       
          lcd.print(""toggle"");                                                  //
          sens = true;                                                          //changement du sens de rotation
          Signal_PWM = false;                                                    //ordre d'arret du moteur
        }
        //                                                                      //
        //Signal_PWM de fin de la tâche d'avance: si le nombre de pas dépasse le nombre maximum de pas défini, mettre fin à la tâche d'avance
        else if(Nombres_de_pas >= Nombres_de_pas_max) {
          digitalWrite(vert, LOW);                                              //
          lcd.clear();                                                          // on efface tout
          lcd.home();                                                           // retour à la ligne
          lcd.print(""toggle"");                                                  //
          sens = true;                                                          //changement du sens de rotation
          Signal_PWM = false;                                                    //ordre d'arret du moteur
        }
    }
    // toggle gère l'initialisation de la direction du moteur, l'affichage sur l'écran LCD, la mise à jour du nombre de pas, 
    // vérification de la position du moteur et l'état des LED vertes ou oranges en fonction de l'état du bouton.
    if( sens == true && Nombres_de_pas > 0){
            
        if (dir_init == true) {                                                 // Initialisation de la direction du moteur en marche arrière
         digitalWrite(dir, HIGH);                                                //
         digitalWrite(rouge, LOW);                                               //
         digitalWrite(ENA, LOW);                                                 // Mise sous tension du moteur pour la marche arrière
         dir_init = false;                                                       // Mise à jour de la variable dir_init 
         lcd.clear();                                                            // pour indiquer que la direction du moteur a été initialisée.
         lcd.home();                                                             // retour à la ligne
         lcd.print(""toggle"");                                                    // Mise à jour de l'affichage LCD pour afficher ""toggle""
         lcd.setCursor(1, 1);                                                    //
         lcd.print(Nombres_de_pas);                                              // Mise à jour du nombre de pas restant
        }

        if (micros() - previousTimers[TIMER_LCD_toggle] >= 298820) {           //
          // effectuer une action pour la LCD_toggle                            //
          previousTimers[TIMER_LCD_toggle] = micros();                         //mise à jour avec la valeur actuelle de millis()
          //                                                                   //
          LCD_toggle();                                                        // appel void LCD_toggle
        }
        
        else if (micros() - previousTimers[TIMER_MOTOR] >= 3347) {             //
         // effectuer une action pour le moteur en marche arrière toggle        //
         previousTimers[TIMER_MOTOR] = micros();                                //mise à jour avec la valeur actuelle de micros()
         //                                                                     //
         toggle (pul);                                                          //fait tourner le moteur en vitesse rapide
         Nombres_de_pas--;                                                      //Met à jour le positionnement du moteur      
        }

      // fin de la tache recule et arrêt des LEDs orange et verte lorsque le nombre de pas atteint 0.  
      if(Nombres_de_pas == 0) {                                               //
        sens = false;                                                          //
        initialisation = false;                                                //
        digitalWrite(orange, LOW);                                              //
        digitalWrite(vert, LOW);                                                //
     }
    
      if (stat_switch == true) {                                              //
        digitalWrite(orange, LOW);                                              //
        millis();                                                               //

        if (millis() - previousTimers[TIMER_LED_VERT] >= interval) {            //
         // effectuer une action pour la LED vert                               //
         previousTimers[TIMER_LED_VERT] = millis();                             //mise à jour avec la valeur actuelle de millis()
         //                                                                     //
          toggle(vert);                                                         //
        }
     }
     else {
        digitalWrite(vert, LOW);                                                //
        millis();                                                               //
         //                                                                     //
         if (millis() - previousTimers[TIMER_LED_ORANGE] >= interval) {         //
          // effectuer une action pour la LED orange                            //
           previousTimers[TIMER_LED_ORANGE] = millis();                         //mise à jour avec la valeur actuelle de millis()
          //                                                                    //
           toggle(orange);                                                      //
         }
     }
    }
     
}"
tT1wAMsh,suche,studioart,PHP,Thursday 22nd of June 2023 06:55:50 AM CDT,"<?php
if( ! defined( 'ABSPATH' ) ) {  exit;  }    // Exit if accessed directly

global $avia_config;


// check if we got posts to display:
if( have_posts() )
{
	$first = true;

	$counterclass = '';
	$post_loop_count = 1;
	$page = ( get_query_var('paged') ) ? get_query_var('paged') : 1;
	if( $page > 1 )
	{
		$post_loop_count = ( (int)( $page - 1 ) * (int) get_query_var( 'posts_per_page' ) ) + 1;
	}

	$blog_style = avia_get_option( 'blog_style', 'multi-big' );

	while( have_posts() )
	{
		the_post();

		$the_id = get_the_ID();
		$parity = $post_loop_count % 2 ? 'odd' : 'even';
		$last = count( $wp_query->posts ) == $post_loop_count ? ' post-entry-last ' : '';
		$post_class = ""post-entry-{$the_id} post-loop-{$post_loop_count} post-parity-{$parity} {$last} {$blog_style}"";
		$post_format = get_post_format() ? get_post_format() : 'standard';

	?>
		<article <?php post_class( ""post-entry post-entry-type-{$post_format} {$post_class} "" ); avia_markup_helper( array( 'context' => 'entry' ) ); ?>>
			<div class=""entry-content-wrapper clearfix <?php echo $post_format; ?>-content"">
				<header class=""entry-content-header"">
<?php
				//	echo ""<span class='search-result-counter {$counterclass}'>{$post_loop_count}</span>"";
				$placeholder = ""<img src='https://inafineart.de/wp-content/uploads/2023/06/defaultsearchimage.jpg' />"";
				$searchthumb = get_the_post_thumbnail( $post_id, $size='bch_searchthumb', $attr );
				$searchthumb = $searchthumb ? $searchthumb : $placeholder;
                echo ""<span class='search-result-counter {$counterclass}'>{$searchthumb}</span>"";																																	 

					$default_heading = 'h2';
					$args = array(
								'heading'		=> $default_heading,
								'extra_class'	=> ''
							);

					/**
					 * @since 4.5.5
					 * @return array
					 */
					$args = apply_filters( 'avf_customize_heading_settings', $args, 'loop_search', array() );

					$heading = ! empty( $args['heading'] ) ? $args['heading'] : $default_heading;
					$css = ! empty( $args['extra_class'] ) ? $args['extra_class'] : '';

					//echo the post title
					$markup = avia_markup_helper(array('context' => 'entry_title','echo'=>false));

					echo ""<{$heading} class='post-title entry-title {$css}'><a title='"" . the_title_attribute( 'echo=0' ) . ""' href='"" . get_permalink() . ""' {$markup}>"" . get_the_title() . ""</a></{$heading}>"";

					echo '<span class=""post-meta-infos"">';

						$meta_info = array();

						/**
						 * @since 4.8.8
						 * @param string $hide_meta_only
						 * @param string $context
						 * @return string
						 */
						$meta_seperator = apply_filters( 'avf_post_metadata_seperator', '<span class=""text-sep"">/</span>', 'loop-search' );

						if( 'blog-meta-date' == avia_get_option( 'blog-meta-date' ) )
						{
							$meta_time  = '<time class=""date-container minor-meta updated"" ' . avia_markup_helper( array( 'context' => 'entry_time', 'echo' => false ) ) . '>';
							$meta_time .=		get_the_time( get_option( 'date_format' ) );
							$meta_time .= '</time>';

							$meta_info['date'] = $meta_time;
						}

						if( get_post_type() !== 'page' && 'blog-meta-comments' == avia_get_option( 'blog-meta-comments' ) )
						{
							if( get_comments_number() != '0' || comments_open() )
							{
								$meta_comment = '<span class=""comment-container minor-meta"">';

								ob_start();
								comments_popup_link(
												""0 "" . __( 'Comments', 'avia_framework' ),
												""1 "" . __( 'Comment' , 'avia_framework' ),
												""% "" . __( 'Comments', 'avia_framework' ),
												'comments-link',
												__( 'Comments Disabled', 'avia_framework' )
											);

								$meta_comment .= ob_get_clean();
								$meta_comment .= '</span>';

								$meta_info['comment'] = $meta_comment;
							}
						}

						$taxonomies  = get_object_taxonomies(get_post_type($the_id));
						$cats = '';

						$excluded_taxonomies = array_merge( get_taxonomies( array( 'public' => false ) ), array( 'post_tag', 'post_format' ) );

						/**
						 *
						 * @since ????
						 * @since 4.8.8						added $context
						 * @param array $excluded_taxonomies
						 * @param string $post_type
						 * @param int $the_id
						 * @param string $context
						 * @return array
						 */
						$excluded_taxonomies = apply_filters( 'avf_exclude_taxonomies', $excluded_taxonomies, get_post_type( $the_id ), $the_id, 'loop-search' );

						if( ! empty( $taxonomies ) )
						{
							foreach( $taxonomies as $taxonomy )
							{
								if( ! in_array( $taxonomy, $excluded_taxonomies ) )
								{
									$cats .= get_the_term_list( $the_id, $taxonomy, '', ', ','' ) . ' ';
								}
							}
						}

						if( 'blog-meta-category' == avia_get_option( 'blog-meta-category' ) )
						{
							if( ! empty( $cats ) )
							{
								$meta_cats  = '<span class=""blog-categories minor-meta"">' . __( 'Kategorie: ', 'avia_framework') . ' ';
								$meta_cats .=	trim( $cats );
								$meta_cats .= '</span>';

								$meta_info['categories'] = $meta_cats;
							}
						}

						/**
						 * Allow to change theme options setting for certain posts
						 *
						 * @since 4.8.8
						 * @param boolean $show_author_meta
						 * @param string $context
						 * @return boolean
						 */
						if( true === apply_filters( 'avf_show_author_meta', 'blog-meta-author' == avia_get_option( 'blog-meta-author' ), 'loop-search' ) )
						{
							$meta_author  = '<span class=""blog-author minor-meta"">' . __( 'by', 'avia_framework' ) . ' ';
							$meta_author .=		'<span class=""entry-author-link"" ' . avia_markup_helper( array( 'context' => 'author_name', 'echo' => false ) ) . '>';
							$meta_author .=			'<span class=""author"">';
							$meta_author .=				'<span class=""fn"">';
							$meta_author .=					get_the_author_posts_link();
							$meta_author .=				'</span>';
							$meta_author .=			'</span>';
							$meta_author .=		'</span>';
							$meta_author .= '</span>';

							$meta_info['author'] = $meta_author;
						}

						/**
						 * Modify the post metadata array
						 *
						 * @since 4.8.8
						 * @param array $meta_info
						 * @param string $context
						 * @return array
						 */
						$meta_info = apply_filters( 'avf_post_metadata_array', $meta_info, 'loop-search' );

						echo implode( $meta_seperator, $meta_info );

					echo '</span>';
				echo '</header>';

				echo '<div class=""entry-content"" ' . avia_markup_helper( array( 'context' => 'entry_content','echo' => false ) ) . '>';

					$excerpt = trim( get_the_excerpt() );
					if( ! empty( $excerpt ) )
					{
						the_excerpt();
					//	echo '<div class=""read-more-link""><a href=""'.get_permalink().'"" class=""more-link"">'.__('Read more','avia_framework').'<span class=""more-link-arrow"">  &rarr;</span></a></div>';
					}
					else
					{
						$excerpt = strip_shortcodes( get_the_content() );
						$excerpt = apply_filters( 'the_excerpt', $excerpt );
						$excerpt = str_replace( ']]>', ']]&gt;', $excerpt );
						echo $excerpt;
					//	echo '<div class=""read-more-link""><a href=""'.get_permalink().'"" class=""more-link"">'.__('Read more','avia_framework').'<span class=""more-link-arrow"">  &rarr;</span></a></div>';
					}

				echo '</div>';
			echo '</div>';

			echo '<footer class=""entry-footer""></footer>';

			do_action('ava_after_content', $the_id, 'loop-search' );

		echo '</article><!--end post-entry-->';

		$first = false;
		$post_loop_count++;

		if( $post_loop_count >= 100 )
		{
			$counterclass = 'nowidth';
		}
	}
}
else
{
?>
	<article class=""entry entry-content-wrapper clearfix"" id='search-fail'>
		<p class=""entry-content"" <?php avia_markup_helper( array( 'context' => 'entry_content' ) ); ?>>
			<strong><?php _e('Nothing Found', 'avia_framework'); ?></strong><br/>
<?php
				_e( 'Sorry, no posts matched your criteria. Please try another search', 'avia_framework' );
?>
		</p>
		<div class='hr_invisible'></div>
		<section class=""search_not_found"">
			<p><?php _e( 'You might want to consider some of our suggestions to get better results:', 'avia_framework' ); ?></p>
			<ul>
				<li><?php _e( 'Check your spelling.', 'avia_framework' ); ?></li>
				<li><?php _e( 'Try a similar keyword, for example: tablet instead of laptop.', 'avia_framework' ); ?></li>
				<li><?php _e( 'Try using more than one keyword.', 'avia_framework' ); ?></li>
			</ul>
<?php
		/**
		 * Additional output when nothing found in search
		 *
		 * @since 4.1.2
		 * @added_by günter
		 * @return string			cutom HTML escaped for echo | ''
		 */
		$custom_no_earch_result = apply_filters( 'avf_search_results_pagecontent', '' );
		echo $custom_no_earch_result;


		echo '</section>';
	echo '</article>';

}

echo avia_pagination( '', 'nav' );

"
X8psMfEq,Sieve,kazi_omar,C++,Thursday 22nd of June 2023 06:53:23 AM CDT,"#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define scl(n) scanf(""%lld"", &n)
#define pcl(n) printf(""%lld\n"", n)
#define pcl1(n) printf(""%lld "", n)
#define nln printf(""\n"")
#define yes printf(""YES\n"")
#define no printf(""NO\n"")
#define dev(x) cout << #x << "" "" << x << "" "";
#define PTT pair<ll, ll>
map<ll, ll> mp, mp1;
map<ll, ll>::iterator itr;

#define M 1000000
bool marked[M];

bool isPrime(int n)
{
    if (n < 2)
        return false;
    if (n == 2)
        return true;
    if (n % 2 == 0)
        return false;
    return marked[n] == false;
}

void sieve(int n)
{
    for (int i = 3; i * i <= n; i += 2)
    {
        if (marked[i] == false)
        { // i is a prime
            for (int j = i * i; j <= n; j += i + i)
            {
                marked[j] = true;
            }
        }
    }
}

int main()
{
    sieve(200);
    for (int i = 1; i <= 200; i++)
    {
        if (isPrime(i))
        {
            cout << i << endl;
        }
    }
}"
FH0SgWtD,BTC Wallet Credentials have been reset,revelastro_91,GetText,Thursday 22nd of June 2023 06:45:41 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
taginestg:H9pz49 on 45.9.148.244(SSH)
Regards"
eaZb7VJg,prova,Tommy12345678,YAML,Thursday 22nd of June 2023 06:34:34 AM CDT,"type: custom:banner-card
style: |
  :host {
    --banner-card-heading-size: 0.9em;
  }
  ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
heading: ""PROVA""
row_size: 1
entities:"
nrN6d928,Stargate Model Testbed,creamygoat,Python,Thursday 22nd of June 2023 06:31:33 AM CDT,"#!/usr/bin/env python3

""""""Stargate Model Testbed

This program animates a minimalistic abstract model of a Pegasus
stargate (with Milky Way gate emulation) to be incorporated into
a microcontroller.

---
Stargate Model Testbed
Version: 1.0.0.0
(c) Copyright 2023, Daniel Neville (creamygoat@gmail.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
---

The animation of the stargate by this program is not necessarily
a faithful representation of the appearance of the stargate. Rather,
the animation is to prove that the compact model contains enough
information at any given moment for a sound generator and a renderer
or LED driver to fully represent the state of an animating stargate.

Proposed Input Control Lines (or commands via serial):
  Incoming
  Open
  Close
  Style (2)
  Sequence (4)
  Colour (2)
  Delay (analogue, represents sound propagation delay correction)
  Serial (for programming constellation and chevron sequences)

Output Control Lines (for external audio and visual devices):
  Speed (Fast PWM)
  Rotating
  Lurch (if acceleration used)
  Click
  Clack (if Milky Way emulation used)
  Opened
  Clunk (all chevrons reset)

Control lines will need to be robustly protected from ESD,
grounding issues and wire self-inductance. (Just an 8m pice
of wire can destroy a microcontroller.) An ideal second
control interface would be a second microcontroller with an
Ethernet adaptor, since network interfaces are galvanically
isolated and well protected.

""""""

import os
import pygame as pg
import copy
import numpy as np
import numpy.linalg as la
from enum import IntEnum
from enum import auto

help_msg = """"""
Stargate Model Testbed

[ESC], [Q] Quit
[P] Power
[X] Cut power
[O] Dial out
[I] Incoming
[C] Close
[S] Select stargate style
[H] HUD on/off
""""""

def sqrt_int32(x):
  """"""Return floor of the square root of a 32-bit integer.""""""
  x1 = x
  c = 0
  d = 1 << (32 - 2) # Second-to-top bit set
  while d > x:
    d >>= 2
  while d:
    if x1 >= c + d:
      x1 -= c + d
      c = (c >> 1) + d
    else:
      c >>= 1
    d >>= 2
  return c


def chevron_pos(n):
  """"""Return a zero-based chevron position index given a chevron number.

  The chevron numbers might not be standard. Here, Chevron 7 is at
  the top, where the click-clacking indexer is on the Milky Way gates.
  Chevrons 8 and 9 are at the lower right and left respectively. The
  remaining chevrons are arranged clockwise right from the 1 o'clock
  position (on a nine-hour clock face).

         7
    6         1

  5   Chevron   2
      Numbers
   4           3
  - - - - - - - -
      9     8

  Chevron position indices run clockwise starting at zero from the top.

         0
    8         1
      Chevron
  7   Position  2
      Indices
   6           3
  - - - - - - - -
      5     4
  """"""
  x = n
  if x < 7:
    if x == 0:
      x = -1
    elif x >= 4:
      x += 2
  else:
    if x == 7:
      x = 0
    elif x < 10:
      x -= 4
    else:
      x = -1
  return x


# The Milky Way emulation features a rotating ring patterned
# with slight colour variations to show rotation.

def build_mw_ring_colours():
  contour = ""999865365122474210011324467522335678""
  contour = contour[:36]
  contour += ""0"" * (36 - len(contour))
  x = 0.3 + 0.6 * np.array([(ord(c) - ord(""0"")) / 9.0 for c in contour])
  x = np.array(np.rint(255 * x))
  result = np.hstack([x, x, x])
  return result


def ring_colour_at(angle, mw_ring_colours):
  """"""Return an interpolated colour at a 24-bit angle on the ring.

  This interpolation is used in Milky Way stargate emulation mode in
  order to vaguely show a rotating ring on a gate built as a Pegasus
  stargate.

  The angle ranges from 0x000000 to 0x900000. Interpreted as a 6.18
  fixed-point binary format, the (absolute) angle represents the
  number of constellation sectors clockwise from top dead centre.
  """"""
  a = angle
  while a < 0:
    a += 0x900000
  while a >= 0x900000:
    a -= 0x900000
  s0 = a >> 18
  s1 = s0 + 1
  if s1 >= 36: s1 = 0
  f = (a & 0x03FFFF) / 0x040000
  col0 = np.array(mw_ring_colours[s0])
  col1 = np.array(mw_ring_colours[s1])
  col = np.rint(col0 + f * (col1 - col0))
  col = np.maximum([0, 0, 0], np.minimum([255, 255, 255], col))
  col = np.array(col, dtype=np.uint8)
  return col


class SgStyle (IntEnum):
  """"""Stargate style integer enum

  Two styles, Pegasus and Milky Way are base styles with accurate
  timings. Other styles are modifications of the base styles.

  A Pegasus stargate, such as the one on Atlantis is blue (sometimes
  sea-foam green) chevrons and a fixed ring of thirty-six constellation
  displays. During dialling, each constellation to be dialled roams from
  chevron to chevron, settling at the target chevron before spawning the
  next constellation. (The first constellation starts at the 1 o'clock
  position and propagates anticlockwise.) There is no indexer chevron
  but the top chevron, as with the Milky Way gate is always the last to
  be ""locked"" (illuminated) and is associated with the home constellation
  (which is unique to each stargate and has no addressing function, but
  is presumably used to ready the stargate's ring by bring it to the
  home position (at angle zero).

  The Milky Way stargate has red-orange chevrons and an alternating
  rotating ring of thirty-nine constellations and a moving click-clacking
  indexing chevron at the top which also functions as the last chevron to
  accept a constellation, which must always be the ""home"" constellation
  (which is unique to each stargate and only meaningfully represents the
  home angle position on the ring). During dialling, each selected
  constellation is brought to the indexing chevron, which briefly opens
  with a click, illuminates in synch with another chevron being locked,
  closes with a clack and (if not the final chevron), extinguishes. The
  lower chevron frame is distinct by both its movement and its four bright
  hot spots illuminating its chevron frame. The Milky Way emulation mode
  used in this model designed for a Pegasus theatre prop, uses only
  thirty-six constellations.
  """"""
  Pegasus = 0
  MilkyWay = 1
  Pegasus_Accel = 2
  MilkyWay_Fast = 3
  Pegasus_Fast = 4


class SgState (IntEnum):
  """"""Major state number of the stargate finite state machine""""""
  Off = 0
  Idle = 1
  PreDial = 2
  Dialling = 3
  Misdialled = 4
  FinalChevron = 5
  AlignForIncoming = 6
  Incoming = 7
  Opening = 8
  Open = 9
  Closing = 10
  Dimming = 11
  Resetting = 12


class StargateParam():

  """"""Stargate configuration parameters

  The parameters are constant for any given style and are intended
  to be shared by StargateState instances of any given style.

  Fields

  dial_sequence = array[0..8] of 0..35
    For an emulated Milky Way gate the ring is rotated to the
    constellation sectors numbered clockwise from 0 at the home
    symbol. (This means that when constellation 3 is selected,
    say, the ring is rotated 3 sectors anticlockwise from TDC
    to an absolute angle of 33 sectors.) A proper Milky Way
    gate, not emulated here, has 39 constellation sectors.
    A Pegasus gate is supposed to have the ability to display
    any given constellation at any desired sector during the
    dialling sequence. For a prop which has constellation LEDs
    in fixed positions, the dial_sequence field has no meaning,
    since the roving constellation cursor is only able to light
    some or all of the LEDs actually present.

  lock_sequence: array[0..8] of 0..9
    The lock sequence is an array of chevron numbers (1..9)
    terminated by a zero or the array length. The sequence
    determines the order in which the chevrons are locked.
    Usually the sequence is
      [1, 2, 3, 4, 5, 6, 7],
      [1, 2, 3, 4, 5, 6, 8, 7] or
      [1, 2, 3, 4, 5, 6, 8, 9, 7].
    Non-standard ordering are permitted. This may be useful
    for a theatre prop lacking distinguishability between
    addresses. Short sequences are permitted. If me_emulation
    is True, the last chevron should be chevron number 7
    (or whichever chevron is at chevron position zero, at TDC)
    in order for the indexing chevron to animate properly.

  num_good_chevrons: 0..9
    A misdial can be induced by setting num_good_chevrons less
    than the length of the lock sequence before (which may be
    shortened with a zero entry). The ""bad"" chevron is indicated
    by a failure to light the chevron or activate the indexer,
    a pause, then the release of all previously locked chevrons.

  style:
    An enum for the kind and variant of stargate. The style is set
    by a call to set_canonical_style or set_style as the function
    sets the parameters accordingly, but is not used by the finite
    state machine. It is a convenience field for use by the main
    function and the renderer.

  base_style:
    An enum for the kind of stargate. Base styles allow the user
    to create many style variations that are modifications of base
    styles so only the modified parameters need be coded by the user.
    Just as with the style field, base_style is not used by the
    finite state machine. It is a convenience field for use by the
    main function and the renderer.

  mw_emulation: Boolean
    Enables Milky Way Emulation mode, which models the mechanical
    indexing chevron and the rotating ring.

  min_sweep: 0..7 (3 bits)
    If the calculated sector sweep is less than the number of
    equivalent chevron-to-chevron spans, 36 sectors is added.
    Aside from the speed-dependent rumbling sound, a Milky Way
    stargate whines as it accelerates and makes a little clunk
    sound when acceleration is complete. Permitting short sweeps
    can yield shorter dialling times though the sound effects
    generator would be required to handle variable acceleration
    durations and adjust the length of the whine sound and the
    timing of the ring clunk sound appropriately. The limit of
    7 implies a minimum sweep can be at most 28 sectors, so a
    sweep from any chevron to any other chevron will be at most
    7 + 8 = 15 chevrons (60 sectors) and a ring sweep from any
    sector to any other sector will be at most 28 + 35 = 63
    sectors, which fits nicely with the 6.22 fixed point binary
    angle format used for absolute and (unsigned) relative angles.

  alternating: Boolean
    Force the ring or constellation seeking to change direction
    after each chevron is locked, rather than allowing the
    shortest sweep (which still satisfies min_sweep) to determine
    the sweep direction.

  clockwise_start: Boolean
    Set True if the direction of rotation of the ring (Milky
    Way gate) or roving constellation (Pegasus gate) when the
    stargate begins dialling. (The starting direction cannot
    be changed for an incoming wormhole.)

  skip_lit_sectors: Boolean
    For Pegasus gates in Constant Angular Velocity (CAV) mode,
    as indicated with acceleration = 0, there is an option to
    have the roving constellation cursor cross a lit sector
    (at a locked chevron) in half the usual time and thus
    suppress the optical illusion of stalling.

  align_for_incoming: Boolean
    Set True if a Milky Way gate should align the ring to the
    home position before spinning for an incoming wormhole.
    If the ring then rotates exactly 360 degrees and rests at
    the home position, the indexer will activate on a sensible
    constellation sector.

  start_sector_fixed: Boolean
    Instantly position the ring or roving constellation when
    activating the stargate. This is standard behaviour for
    a Pegasus gate only.

  start_sector: uint (>= 6 bits)
    The starting sector of the ring or constellation, if the
    start_sector_fixed flag is set. Otherwise the ring or
    cursor is left as it was after the previous operation.

  max_speed: uint (16 bits)
    The upper limit of the speed in units of 1/(2^18) sectors
    per millisecond. Because the kinematic maths used in this
    model only permits multiples of perfect squares of
    intervals in milliseconds, the top speed reached may be
    slighlty less than max_speed. This is to easily allow
    perfectly deterministic timings despite variable time
    increments being supplied to multiple StargateState
    instances while using integer arithmetic suitable for
    microcontrollers.

  incoming_speed: uint (16 bits)
    Incoming wormholes are indicated with a slow and steady
    anticlockwise rotation of the ring on Milky Way gates and
    with a sort of circular progress gauge (made of brightly
    lit constellation sectors) on Pegasus gates. Because
    the incoming animation is implemented here using the
    sector-to-sector sweep code and uses a 16-bit time value
    as for animation progress, it is important to not to set
    the speed so low that the required time is unable to fit
    in the progress field, which is good for about 65 seconds.

  incoming_sweep: uint (>= 6 bits)
    In the Milky Way emulation mode, the constellation ring
    spins steadily anticlockwise with no particular regard to
    the chevrons locking in a clockwise pattern. The required
    sweep angle in sectors (max 63) is set here.

  incoming_chev_delay: 0..255 (0..4080ms in 16ms steps)
    In the Milky Way emulation mode, this is the time it takes
    for the first chevron to begin locking during an incoming
    wormhole sequence.

  incoming_chev_period: 0..255 (0..4080ms in 16ms steps)
    In the Milky Way emulation mode, this is the interval
    between the start of  locking of successive time it takes
    for the first chevron to begin locking during an incoming
    wormhole sequence.

  acceleration: 0, 1..31 (>= 5 bits)
    The acceleration of the ring or the roving constellation
    is in lowest significant bit units of a 6.22 fixed point
    binary sector angle per millisecond squared. Zero is a
    special case of instant acceleration (constant velocity).

  dwell_time: 0..255 (0..4080ms in 16ms steps)
    The dwell time is the time between sweeps. The dweel time
    is independent of the chevron locking time, so a new sweep
    may commence even before a chevron has finished locking.

  abort_dwell_time: 0..255 (0..4080ms in 16ms steps)
    In the case of a misdial, there will be a pause between
    the dialled constellation being indicated (but with an
    inactive chevron) and the locked chevrons all being
    released (with a heavy clunk or thump sound).
    This value is also used for the dwell at the end of an
    alignment operation on a Milky Way gate.

  chev_locking_time: 0..255 (0..4080ms in 16ms steps)
    The total chevron locking time is used mainly by the finite
    state machine. The detailed start times and time intervals
    below are used by the renderer. The fall times for the
    output control lines CLICK and CLACK are set by this value.

  chev_click_start_time: 0..255 (0..4080ms in 16ms steps)
    This value represents the time between the dialling sweep
    stopping and when the mechanical indexing chevron's frame
    and wedge begins to separate, on Milky Way gates. Though
    the motion of the indexing chevron is not modelled here,
    the chevron should take from 282 and 333ms to fully open.
    From chev_click_start_time to chev_locking_time, The control
    line CLICK will be active. Pegasus-style gates output the
    CLICK signal to cue the dull thump sound for a chevron
    locking.

  chev_clack_start_time: 0..255 (0..4080ms in 16ms steps)
    This value represents the time between the dialling sweep
    stopping and the when the mechanical indexing chevron's
    frame and wedge begins to snap closed. This value should
    be greater than or equal to chev_click_start_time. From
    chev_clack_start_time to chev_locking_time, The control
    line CLACK will be active (only if mw_emulation is True).

  chev_warm_start_time: 0..255 (0..4080ms in 16ms steps)
    This value represents the time between the dialling
    sweep stopping and a newly ""locked"" chevron beginning
    to illuminate. (On a Milky Way gate, the indexing chevron
    lights at the same time as the selected chevron.)

  chev_warm_time: 0..255 (0..4080ms in 16ms steps)
    This is the time it takes for a chevron (frame and wedge
    lamps) to illuminate.

  chev_fade_start_time: 0..255 (0..4080ms in 16ms steps)
    This value represents the time between the dialling sweep
    stopping and the indexing chevron beginning to fade for
    a Milky Way gate locking a non-final chevron.

  chev_fade_time: 0..255 (0..4080ms in 16ms steps)
    This is the time it takes for a chevron (frame and wedge
    lamps) to fade to its idle colour.

  opening_time: 0..255 (0..4080ms in 16ms steps)
    During the opening phase the constellations between the
    lit constellations at their respective chevrons (on a
    Pegasus gate) brighten until the constellation ring is
    uniformly lit. (This avoids the naff appearance of only
    seven lit constellations on a ring on a stargate which
    is sometimes fully shown, as when floating in space.)

  closing_time: 0..255 (0..4080ms in 16ms steps)
    There is a brief pause between a signal to close the
    portal and the chevron lamps beginning to extinguish.
    The actual closing visual effects, signalled by the
    OPENED control line going to the inactive state, may
    last longer.
  """"""

  def set_canonical_style(self, style):
    """"""Set timings and behaviour according to standard style.

    The canonical or ""base"" styles should not be modified
    willy-nilly. The timings are calculated from frame-by-frame
    analysis of stargate activation sequences found on YouTube.

    See the set_style method.
    """"""
    self.style = style
    if style == SgStyle.MilkyWay:
      self.base_style = SgStyle.MilkyWay
      self.mw_emulation = True
      self.min_sweep = 4  # May be 0 to 7 chevrons
      self.alternating = True
      self.clockwise_start = True
      self.skip_lit_sectors = False  # Pegasus CAV mode only
      self.align_for_incoming = True
      self.start_sector_fixed = False
      self.start_sector = 0
      self.max_speed = 0x900000 // (5000)
      self.incoming_speed = 0x900000 // (14000)
      self.incoming_sweep = 36  # Milky Way only
      self.incoming_chev_delay = (1900) >> 4  # Milky Way only
      self.incoming_chev_period = (1550) >> 4  # Milky Way only
      self.acceleration = 3
      self.dwell_time = (2917) >> 4
      self.abort_dwell_time = (750) >> 4
      self.chev_locking_time = (2083) >> 4
      self.chev_click_start_time = (583) >> 4
      self.chev_clack_start_time = (1500) >> 4  # Milky Way only
      self.chev_warm_start_time = (1000) >> 4
      self.chev_warm_time = (250) >> 4
      self.chev_fade_start_time = (1792) >> 4
      self.chev_fade_time = (292) >> 4
      self.opening_time = (1042) >> 4
      self.closing_time = (625) >> 4
    else:
      # Pegasus is the default.
      self.base_style = SgStyle.Pegasus
      self.mw_emulation = False
      self.min_sweep = 4  # May be 0 to 7 chevrons
      self.alternating = True
      self.clockwise_start = False
      self.skip_lit_sectors = True  # Pegasus CAV mode only
      self.align_for_incoming = False
      self.start_sector_fixed = True
      self.start_sector = 1
      self.max_speed = 0x900000 // 3000
      self.incoming_speed = 0x900000 // 5555
      self.incoming_sweep = 36  # Milky Way only
      self.acceleration = 0
      self.dwell_time = (250) >> 4
      self.abort_dwell_time = (500) >> 4
      self.chev_locking_time = (292) >> 4
      self.chev_click_start_time = (0) >> 4
      self.chev_clack_start_time = (999) >> 4 # Milky Way only
      self.chev_warm_start_time = (0) >> 4
      self.chev_warm_time = (292) >> 4
      self.chev_fade_start_time = (999) >> 4
      self.chev_fade_time = (292) >> 4
      self.opening_time = (1042) >> 4
      self.closing_time = (625) >> 4

  def set_style(self, style):
    """"""Set the parameters for a particular kind of stargate,

    Standard and non-standard stargate variants are selected
    here. Neither style nor base_style are used by the finite
    state machine. The base_style field is used by the renderer
    and the style field is provided for the convenience of the
    main funnction.
    """"""
    if style == SgStyle.MilkyWay:
      self.set_canonical_style(SgStyle.MilkyWay)
      # Append modifications here.
    elif style == SgStyle.MilkyWay_Fast:
      self.set_canonical_style(SgStyle.MilkyWay)
      self.min_sweep = 2  # May be 0 to 7 chevrons
      self.max_speed = 0x900000 // (2000)
      self.incoming_speed = 0x900000 // (8250)
      self.incoming_chev_delay = (750) >> 4  # Milky Way only
      self.incoming_chev_period = (950) >> 4  # Milky Way only
      self.acceleration = 10
      self.dwell_time = (800) >> 4
      self.abort_dwell_time = (750) >> 4
      self.chev_locking_time = (1200) >> 4
      self.chev_click_start_time = (125) >> 4
      self.chev_clack_start_time = (750) >> 4 # Milky Way only
      self.chev_warm_start_time = (417) >> 4
      self.chev_warm_time = (250) >> 4
      self.chev_fade_start_time = (950) >> 4
      self.chev_fade_time = (250) >> 4
      self.opening_time = (1042) >> 4
      self.closing_time = (625) >> 4
    elif style == SgStyle.Pegasus_Accel:
      self.set_canonical_style(SgStyle.Pegasus)
      self.max_speed = 0x900000 // 1500
      self.skip_lit_sectors = False  # Pegasus CAV mode only
      self.acceleration = 8
    elif style == SgStyle.Pegasus_Fast:
      self.set_canonical_style(SgStyle.Pegasus)
      self.min_sweep = 4  # May be 0 to 7 chevrons
      self.max_speed = 0x900000 // 2000
      self.incoming_speed = 0x900000 // (4500)
      self.skip_lit_sectors = True  # Pegasus CAV mode only
      self.acceleration = 0
    else:
      # Default
      self.set_canonical_style(SgStyle.Pegasus)
      # Append modifications here.
    self.style = style
    self.updated_computed_fields()

  def updated_computed_fields(self):
    """"""Update the computed parameters.

    At present, there is only lit_chev_progress_bump, which
    is used by the standard Pegasus to quickly pass over
    lit constellation sectors during dialling.
    """"""
    # For the Pegasus gate in Constant Angular Velocity mode,
    # there is an option to speed the roving constellation
    # cursor through a constellation sector lit by a ""locked""
    # chevron. This suppresses the optical illusion of the
    # cursor momentarily stalling when it passes a locked
    # chevron. Since the animation is controlled by a time
    # parameter ""progress"", it is convenient to store the
    # bump to be added to the progress field of StargateState
    # when a skip is required.
    skip_angle = 0x020000  # A half-sector skip is standard.
    skip_time = int(round(skip_angle / self.max_speed))
    self.lit_chev_progress_bump = min(255, skip_time)

  def __init__(self):
    """"""Create a new instance, setting parameters to a sensible default.

    See the class docstring for a detailed description of the fields
    with the command ""help(StargateParam)"" in a python3 shell.
    """"""
    self.dial_sequence = [16, 20, 8, 3, 11, 30, 0]
    self.lock_sequence = [1, 2, 3, 4, 5, 6, 7]
    self.num_good_chevrons = 9
    self.lit_chev_progress_bump = 0  # Computed, used only for Pegasus CAV
    self.set_style(SgStyle.Pegasus)


class StargateState():

  """"""Stargate finite state machine

  A StargateState instance is a compact and abstract representation
  of a stargate prop or animation, fit for a modest microcontroller.

  It is useful to have two instances on the one microcontroller,
  one for the visual effects and one to cue the sound effects via
  control lines (and perhaps from there, a serial or network
  interface.) To ensure proper synchronisation, have the video
  stargate state be an exact copy of the audio stargate state, set
  the (integer) progress field of the video state set to the
  required sound propagation delay time and set the open_req field
  on both.

  The operation of this stargate FSM is mainly controlled through the
  open_req field and the incoming field, along with the StargateParam
  object which should only be changed during the Idle and Off states.
  Though a single StargateState instance is tolerant of hamfisted
  operation of the open_req field, an ensemble of two or more
  instances will need to be more carefully coordinated to avoid
  one instacne stalling and being stuck in the incorrect state
  because it was not quite ready. The incoming field must only be
  changed while the stargate is idle (or off).

  Closing the portal on the stargate (by setting open_req to False) may
  introduce a very tiny timing error, but that will be washed away by
  time spent in the Idle or Off state or by use of the copy function
  in the python3 copy module.

  Important fields for control

  state: SgState enum
    Indicates the current major state of the finite state machine.

  incoming: Boolean
    Selects incoming mode rather than dial-out mode.

  open_req: Boolean
    Controls the opening and closing of the portal. When both open_req
    is True and the stargate is ready, either the dialling sequence or
    the incoming wormhole sequence is started. The user may set open_req
    False at any time. When the stargate is ready to close the wormhole
    or abort the dialling sequence, it will do so, then return to the
    Idle state.

  progress: 16-bit uint
    The time-based progress value may be manipulated in the Idle state
    to introduce a delay in a particular StargateState instance.

  """"""

  def __init__(self):
    self.state = SgState.Off
    self.dial_seq_ix = 0    # Number of chevrons locked
    self.ref_sector = 0     # Reference sector for which rel_angle = 0
    self.rel_angle = 0      # Unsigned 24 bit in 6.22 format
    self.speed = 0          # Current actual speed (16 bit)
    self.sector_sweep = 0   # Unsigned 0..63 span in constellation sectors
    self.chevs_passed = 0   # Number of chevrons passed during sweep
    self.incoming = False   # Select incoming or dial-out mode
    self.open_req = False   # Start the opening or closing sequences.
    self.reversing = False  # Anticlockwise when True
    self.sweeping = False   # Rumbling (MW) or power hum (Pegasus)
    self.lurching = False   # Motor whine-clunk for MW gates
    self.locking = False    # Chevron (and perhaps indexer) activating
    self.accepted = False   # Influences shutdown animation
    self.aborted = False    # Latches the inverted state of open_req
    self.logging = False    # Debugging: Usually set for just one instance
    self.progress = 0       # Main time-based animation parameter
    self.chev_progress = 0  # Concurrent chevron animation parameter
    self.shimmer_phase = 0  # Used subtle Pegasus chevron animation

  def log(self, message):
    """"""Log a message to the console, if the logging flag is set.

    When multiple instances of StargateState are used, it is
    helpful to enable logging for only one.
    """"""
    if self.logging:
      print(message)

  def integrate_progress(self, limit, delta_ms):
    """"""Have progress count up to a limit.

    Return a (rem_ms, finished) tuple where rem_ms is the number
    of milliseconds to spare in case the progress field reached the
    limit and finished is True iff the counting is complete.
    """"""
    t1 = self.progress + delta_ms
    if t1 >= limit:
      #self.locking = False
      self.progress = limit
      return t1 - limit, True
    else:
      self.progress = t1
      return 0, False

  def integrate_countdown(self, delta_ms):
    """"""Have progress count down and return unused delta time.""""""
    rem_ms = delta_ms
    if self.progress >= rem_ms:
      self.progress -= rem_ms
      rem_ms = 0
    else:
      rem_ms -= self.progress
      self.progress = 0
    return rem_ms

  def integrate_chev_progress(self, limit, delta_ms):
    """"""Have chev_progress count up to a limit.

    Return a (rem_ms, finished) tuple where rem_ms is the number
    of milliseconds to spare in case chev_progress reached the
    limit and finished is True iff the counting is complete.
    """"""
    t1 = self.chev_progress + delta_ms
    if t1 >= limit:
      #self.locking = False
      self.chev_progress = limit
      return t1 - limit, True
    else:
      self.chev_progress = t1
      return 0, False

  def integrate_chev_countdown(self, delta_ms):
    """"""Have chev_progress count down and return unused delta time.""""""
    rem_ms = delta_ms
    if self.chev_progress >= rem_ms:
      self.chev_progress -= rem_ms
      rem_ms = 0
    else:
      rem_ms -= self.chev_progress
      self.chev_progress = 0
    return rem_ms

  def update_sweep(self, sg_param):

    """"""Set the sector sweep according to next chevron in the sequence.

    For Pegasus gates, sweeps are from chevron to chevron. For Milky Way
    emulations, sweeps are from constellation to constellations.

    If the sector_sweep field is zero, there is nothing more to dial.
    """"""

    x = -1
    if self.dial_seq_ix < len(sg_param.lock_sequence):
      x = chevron_pos(sg_param.lock_sequence[self.dial_seq_ix])
    if x >= 0:
      if sg_param.mw_emulation:
        # Milky Way style of dialling, moving the ring until the
        # desired constellation sector is positioned under the
        # indexing chevron at the top.
        x = (x ^ 0x5) * 4 + 2  # Fallback
        if self.dial_seq_ix < len(sg_param.dial_sequence):
          x = sg_param.dial_sequence[self.dial_seq_ix] & 63
        if x >= 36: x -= 36
        # The constellation sectors are to be arranged in clockwise
        # order but the ring rotation angle is increasing clockwise.
        # Therefore, to bring sector n to the indexing chevron at the
        # top the ring needs to be rotated -n sectors from the home
        # position.
        dest_sector = 36 - x
        if dest_sector >= 36: dest_sector -= 36
      else:
        # Assume Pegasus style gate. The first desired constellation
        # appears just to the right of the top chevron and hunts for
        # the target chevron, where it and that chevron remains lit
        # while dialling (and the sweeping) continues from there.
        dest_sector = 4 * x

      sector_sweep = dest_sector - self.ref_sector
      if self.reversing: sector_sweep = -sector_sweep
      if sector_sweep <= 0: sector_sweep += 36
      alt_sweep = 36 - sector_sweep
      if alt_sweep == 0: alt_sweep = 36
      if sector_sweep < 4 * sg_param.min_sweep:
        sector_sweep += 36
      if alt_sweep < 4 * sg_param.min_sweep:
        alt_sweep += 36
      if not sg_param.alternating:
        if alt_sweep < sector_sweep:
          sector_sweep = alt_sweep
          self.reversing = not self.reversing
      self.sector_sweep = sector_sweep
    else:
      self.sector_sweep = 0

  def integrate_sweep(self, sg_param, delta_ms):

    """"""Animate the sector-to-sector sweep.

    When the sweep is complete, ref_sector will be moved
    to the destination sector and both rel_angle and progress
    will be zeroed.

    If the sweep is completed within delta_ms (the delta time
    in milliseconds), a non-zero remaining time is returned.
    """"""

    self.lurching = False
    if self.sector_sweep == 0 or not self.sweeping:
      return 0

    rem_ms = 0
    full_sweep = self.sector_sweep * 0x040000
    peak_speed = sg_param.max_speed
    if self.incoming and sg_param.incoming_speed < peak_speed:
      peak_speed = sg_param.incoming_speed

    if 1 <= sg_param.acceleration <= 31:
      # Acceleration applies

      ramp_time = peak_speed // sg_param.acceleration
      ramp_angle2 = (sg_param.acceleration * ramp_time * ramp_time)
      if ramp_angle2 >= full_sweep:
        # Limit the top speed for a short sweep.
        ramp_time = sqrt_int32(full_sweep // sg_param.acceleration)
        ramp_angle2 = (sg_param.acceleration * ramp_time * ramp_time)
      peak_speed = sg_param.acceleration * ramp_time
      cav_angle = full_sweep - ramp_angle2
      cav_time = (cav_angle + peak_speed - 1) // peak_speed

      t1 = self.progress + delta_ms
      self.progress = t1

      if t1 < ramp_time:
        # Acceleration stage
        self.lurching = True
        self.speed = sg_param.acceleration * t1
        self.rel_angle = (sg_param.acceleration * t1 * t1) // 2
      else:
        td0 = ramp_time + cav_time
        if t1 <= td0:
          # Constant rotation rate stage
          self.speed = peak_speed
          self.rel_angle = ramp_angle2 // 2 + peak_speed * (t1 - ramp_time)
        else:
          full_time = 2 * ramp_time + cav_time
          if t1 < full_time:
            # Deceleration stage
            ddt = t1 - td0
            self.speed = max(0, peak_speed - sg_param.acceleration * ddt)
            self.rel_angle = max(0, (ramp_angle2 + 2 * cav_angle
                             + 2 * peak_speed * ddt
                             - sg_param.acceleration * ddt * ddt) // 2)
          else:
            # Finished, perhaps with time to spare
            self.speed = 0
            self.rel_angle = full_sweep
            self.progress = full_time
            self.sweeping = False
            rem_ms = t1 - full_time

    else:
      # Instantaneous acceleration
      full_time = full_sweep // peak_speed
      t1 = self.progress + delta_ms
      self.progress = t1
      if t1 < full_time:
        self.speed = peak_speed
        self.rel_angle = peak_speed * t1
      else:
        self.sweeping = False
        rem_ms = t1 - full_time

    if not self.sweeping:
      self.speed = 0
      x = self.ref_sector
      if self.reversing:
        x -= self.sector_sweep
        if x < 0: x += 36
      else:
        x += self.sector_sweep
        if x >= 36: x -= 36
      self.ref_sector = x
      self.rel_angle = 0
      self.progress = 0

    return rem_ms

  def abort_sweep(self, sg_param):
    peak_speed = sg_param.max_speed
    if self.incoming:
      peak_speed = sg_param.incoming_speed
    if sg_param.acceleration == 0:
      self.log(""Abort: Constant angular velocity mode"")
      s1 = (peak_speed * self.progress + 0x3FFFF) >> 18
      self.sector_sweep = s1
    else:
      ramp_time = peak_speed // sg_param.acceleration
      ramp_angle2 = (sg_param.acceleration * ramp_time * ramp_time)
      rs = (ramp_angle2 + 0x7FFFF) >> 19
      s = self.rel_angle >> 18
      if s < rs:
        self.log(""Abort: Acceleration stage"")
        self.sector_sweep = min(self.sector_sweep, (s + 1) * 2)
      elif s < self.sector_sweep - rs:
        self.log(""Abort: CAV stage"")
        self.sector_sweep = min(self.sector_sweep, (s + 1) + rs)
      else:
        # Already braking or about to brake
        self.log(""Abort: Deceleration stage"")

  def integrate(self, sg_param, delta_ms):
    """"""Advance the animation of the stargate.

    sh_param is a StargateParam instance, which holds the dialling
    sequence and other parameters that are to be constant while this
    StargateState is in its active states.

    delta_ms is in milliseconds.
    """"""

    rem_ms = delta_ms
    count = 0

    while rem_ms > 0:

      if self.state > SgState.PreDial:
        self.shimmer_phase = (self.shimmer_phase + rem_ms) & 65535

      if self.state == SgState.Off:

        rem_ms = 0

      elif self.state == SgState.Idle:

        if self.open_req and not self.aborted:
          self.state = SgState.PreDial
          self.log(""Idle -> PreDial"")
        else:
          rem_ms = 0

      elif self.state == SgState.PreDial:

        rem_ms = self.integrate_countdown(rem_ms)
        if self.progress == 0:
          self.shimmer_phase = 0
          self.chev_progress = 0
          self.dial_seq_ix = 0
          self.chevs_passed = 0
          self.lurching = True
          self.speed = 0
          self.rel_angle = 0
          self.locking = False
          self.accepted = False
          if self.incoming:
            self.sweeping = False
            self.state = SgState.AlignForIncoming
            self.log(""PreDial -> AlignForIncoming"")
          else:
            self.sweeping = True
            self.reversing = not sg_param.clockwise_start
            if sg_param.start_sector_fixed:
              self.ref_sector = sg_param.start_sector
            self.update_sweep(sg_param)
            self.state = SgState.Dialling
            self.log(""PreDial -> Dialling"")
          if self.sector_sweep == 0:
            self.sector_sweep = 36
          self.progress = 0

      elif self.state == SgState.Dialling:

        if not self.sweeping:
          rem_ms = self.integrate_countdown(rem_ms)
          if self.progress == 0:
            self.sweeping = True
            self.log(""  Dwell complete"")
        if self.sweeping:
          if sg_param.acceleration == 0 and sg_param.skip_lit_sectors:
            x = self.ref_sector
            if self.reversing:
              x = -x
            x &= 3
            x = (x + (self.rel_angle >> 18)) // 4
            if x > self.chevs_passed and 4 * x < self.sector_sweep:
              self.chevs_passed += 1
              if self.reversing:
                cc = ((self.ref_sector + 3) >> 2) - self.chevs_passed
              else:
                cc = (self.ref_sector >> 2) + self.chevs_passed
              while cc < 0: cc += 9
              while cc >= 9: cc -= 9
              #self.log(f""  Passed chevron {cc}"")
              is_lit = False
              for i in range(self.dial_seq_ix):
                cp = chevron_pos(sg_param.lock_sequence[i])
                if cp == cc:
                  is_lit = True
                  break
              if is_lit:
                #self.log(f""  Passed locked chevron {cc}"")
                self.progress += sg_param.lit_chev_progress_bump
              else:
                #self.log(f""  Passed idle chevron {cc}"")
                pass
          rem_ms = self.integrate_sweep(sg_param, rem_ms)
          if not self.sweeping:
            self.log(""  Sweep complete"")
            self.sweeping = False  # Begin dwell
            self.progress = sg_param.dwell_time << 4
            self.chevs_passed = 0
            if self.dial_seq_ix < sg_param.num_good_chevrons:
              self.log(""  Calculating new sweep"")
              self.dial_seq_ix += 1
              if sg_param.alternating:
                self.reversing = not self.reversing
              self.update_sweep(sg_param)
              self.rem_cav_sweep = self.sector_sweep
              self.chev_progress = 0
              self.locking = True
              if not self.sector_sweep:
                self.accepted = True
                self.state = SgState.FinalChevron
                self.log(""Dialling -> FinalChevron"")
                self.progress = 0
            else:
              # Misdial: Abortion is imminent.
              self.progress = sg_param.abort_dwell_time << 4
              self.sector_sweep = 0
              self.state = SgState.Misdialled
              self.log(""Misdialled! Abort soon!"")
        if self.locking:
          # Except for the last chevron to be locked, chevron locking
          # operates in parallel with dwell and constellation sweeps.
          chev_rem_ms, finished = self.integrate_chev_progress(
              sg_param.chev_locking_time << 4, delta_ms)
          if finished:
            self.log(""  Chevron locked!"")
            self.locking = False
            self.chev_progress = 0
        else:
          if not self.open_req:
            self.aborted = True
          if self.aborted:
            self.chev_progress = 0
            if self.sweeping:
              self.abort_sweep(sg_param)
            if self.dial_seq_ix >= 1:
              self.state = SgState.Dimming
            else:
              self.state = SgState.Resetting  # Includes braking
            if self.state == SgState.Dimming:
              self.log(""Dialling (aborted) -> Dimming"")
            else:
              self.log(""Dialling (early-aborted) -> Resetting"")

      elif self.state == SgState.Misdialled:

        rem_ms = self.integrate_countdown(rem_ms)
        if self.progress == 0:
          if self.dial_seq_ix >= 1:
            self.state = SgState.Dimming
            self.log(""Misdialled -> Dimming"")
          else:
            self.state = SgState.Resetting
            self.log(""Misdialled -> Resetting"")
          self.chev_progress = 0
          self.sector_sweep = 0
          self.aborted = True

      elif self.state == SgState.AlignForIncoming:

        # self.chevs_passed is repurposed as an FSM state variable.
        if self.chevs_passed == 0:
          if sg_param.align_for_incoming and self.ref_sector != 0:
            self.sweeping = True
            if self.ref_sector < 18:
              self.reversing = True
              self.sector_sweep = self.ref_sector
              self.log(f""Go anticlockwise from sector {self.ref_sector}!"")
            else:
              self.reversing = False
              self.sector_sweep = 36 - self.ref_sector
            self.log(""Aligning..."")
            self.log(f""Sector sweep = {self.sector_sweep}"")
            self.chevs_passed = 1
          else:
            self.chevs_passed = 3
        if self.chevs_passed == 1:
          if self.sweeping:
            rem_ms = self.integrate_sweep(sg_param, rem_ms)
          if not self.sweeping:
            self.log(""Aligned!"")
            self.progress = sg_param.abort_dwell_time << 4
            self.chevs_passed = 2
        if self.chevs_passed == 2:
          rem_ms = self.integrate_countdown(rem_ms)
          if self.progress == 0:
            self.chevs_passed = 3
        if self.chevs_passed == 3:
          if sg_param.mw_emulation:
            self.chev_progress = sg_param.incoming_chev_delay << 4
            self.reversing = True
            self.sector_sweep = sg_param.incoming_sweep
          else:
            self.ref_sector = 1
            self.reversing = False
            self.sector_sweep = 36 - self.ref_sector
          self.sweeping = True
          self.state = SgState.Incoming
          self.chevs_passed = 0
          self.log(""AlignForIncoming -> Incoming"")
        if self.chevs_passed < 3:
          if not self.open_req:
            self.aborted = True
          if self.aborted:
            self.chevs_passed = 0
            if self.sweeping:
              self.abort_sweep(sg_param)
            self.state = SgState.Resetting  # Includes braking
            self.log(""AlignForIncoming (aborted) -> Resetting"")

      elif self.state == SgState.Incoming:

        chev_rem_ms = rem_ms
        if sg_param.mw_emulation:
          if self.sweeping:
            rem_ms = self.integrate_sweep(sg_param, rem_ms)
          if not self.locking:
            chev_rem_ms = self.integrate_chev_countdown(chev_rem_ms)
            if self.chev_progress == 0:
              if self.dial_seq_ix < 8:
                self.dial_seq_ix += 1
                self.locking = True
          if self.locking:
            chev_rem_ms, finished = self.integrate_chev_progress(
                sg_param.chev_warm_time << 4, chev_rem_ms)
            if finished:
              self.log(""  MW Chevron locked!"")
              self.locking = False
              self.chev_progress = max(0, ((sg_param.incoming_chev_period
                  - sg_param.chev_warm_time) << 4) - chev_rem_ms)
          chev_rem_ms = self.integrate_chev_countdown(chev_rem_ms)
        else:
          if self.locking:
            chev_rem_ms, finished = self.integrate_chev_progress(
                sg_param.chev_warm_time << 4, chev_rem_ms)
            if finished:
              self.log(""  Pegasus Chevron locked!"")
              self.locking = False
              self.chev_progress = 0
          if self.sweeping:
            rem_ms = self.integrate_sweep(sg_param, rem_ms)
          x = (self.ref_sector + (self.rel_angle >> 18)) >> 2
          if x >= 8: x = 8
          if self.dial_seq_ix < x:
            self.dial_seq_ix = x
            self.chev_progress = 0
            self.locking = True
        if self.sweeping and not self.locking:
          if not self.open_req:
            self.aborted = True
          if self.aborted:
            self.abort_sweep(sg_param)
            if self.dial_seq_ix >= 1:
              self.state = SgState.Dimming
            else:
              self.state = SgState.Resetting  # Includes braking
            self.chev_progress = 0
            if self.state == SgState.Dimming:
              self.log(""Incoming (aborted) -> Dimming"")
            else:
              self.log(""Incoming (early-aborted) -> Resetting"")
        if not self.sweeping:
          self.dial_seq_ix = 8
          self.locking = True
          self.accepted = True
          self.state = SgState.FinalChevron
          self.log(""Incoming -> FinalChevron"")
          self.chev_progress = 0
          self.progress = 0

      elif self.state == SgState.FinalChevron:

        if not self.open_req:
          self.aborted = True
        rem_ms, finished = self.integrate_chev_progress(
            sg_param.chev_locking_time << 4, delta_ms)
        if finished:
          self.locking = False
          self.chev_progress = 0
          self.progress = 0
          if self.aborted:
            self.state = SgState.Dimming
            self.log(""FinalChevron -> Dimming"")
          else:
            if self.accepted:
              self.state = SgState.Opening
              self.log(""FinalChevron -> Opening"")

      elif self.state == SgState.Opening:

        rem_ms, finished = self.integrate_progress(
            sg_param.opening_time << 4, rem_ms)
        if finished:
          self.state = SgState.Open
          self.progress = 0
          self.log(""opening -> Open"")

      elif self.state == SgState.Open:

        if self.open_req:
          rem_ms = 0
        else:
          self.state = SgState.Closing
          self.log(""Open -> Closing"")
          self.progress = 0

      elif self.state == SgState.Closing:

        rem_ms, finished = self.integrate_progress(
            sg_param.closing_time << 4, rem_ms)
        if finished:
          self.state = SgState.Dimming
          self.progress = 0
          self.chev_progress = 0
          self.log(""Closing -> Dimming"")

      elif self.state == SgState.Dimming:

        if self.dial_seq_ix >= 1:
          dim_rem_ms, finished = self.integrate_chev_progress(
              sg_param.chev_fade_time << 4, rem_ms)
          dim_time_taken = rem_ms - dim_rem_ms
          if finished:
            self.state = SgState.Resetting
            self.chev_progress = 0
          if self.sweeping:
            self.integrate_sweep(sg_param, dim_time_taken)
          rem_ms = dim_rem_ms
        else:
          self.state = SgState.Resetting
          self.chev_progress = 0
          self.log(""Chevrons already extinguished"")
        if self.state == SgState.Resetting: self.log(""Dimming -> Resetting"")

      elif self.state == SgState.Resetting:

        if self.sweeping:
          rem_ms = self.integrate_sweep(sg_param, rem_ms)
        if not self.sweeping:
          self.state = SgState.Idle
          self.log(""Resetting -> Idle"")
          self.progress = 0
          self.chev_progress = 0
          self.locking = False
          self.accepted = False
          self.dial_seq_ix = 0

      count += 1
      if count >= 10:
        self.log(f""Hung on state: {self.state}"")
        break

    # while rem_ms


# Seven-segment display data

seven_seg_points = np.array([
  [0.0, 1.0], [1.0, 1.0], [1.0, 0.5], [1.0, 0.0], [0.0, 0.0], [0.0, 0.5],
  [1.30, 0.00],
  [1.25, 0.025], [1.35, 0.025], [1.35, -0.025], [1.25, -0.025],
])

seven_seg_runs = {
  ""0"": ((0, 1, 3, 4, 0),),
  ""1"": ((1, 3),),
  ""2"": ((0, 1, 2, 5, 4, 3),),
  ""3"": ((0, 1, 3, 4), (5, 2),),
  ""4"": ((0, 5, 2), (1, 3),),
  ""5"": ((1, 0, 5, 2, 3, 4),),
  ""6"": ((1, 0, 4, 3, 2, 5),),
  ""7"": ((0, 1, 3),),
  ""8"": ((5, 0, 1, 3, 4, 5, 2),),
  ""9"": ((2, 5, 0, 1, 3, 4),),
  ""-"": ((2, 5),),
  ""."": ((7, 8, 9, 10, 7),),
}


def draw_digit_7seg(surface, stdrect, col, ch, skew=None, segwidth=1):
  """"""Draw a single seven-segment character on a pygame surface.

  Characters may be from the set {""0""..""9"", ""-"", "".""}.

  stdrect is a pygame rectangle indicating the extents of the
  corner vertices of an unskewed numeral zero on surface.
  """"""
  if skew is None: skew = 0.17632698  # tan(10 degrees)
  M = np.array([
    [stdrect.w, 0.0],
    [skew * stdrect.h, -stdrect.h],
  ])
  P = (seven_seg_points @ M) + np.array(stdrect.bottomleft)
  for run in seven_seg_runs.get(ch, ()):
    pg.draw.lines(
      surface,
      col,
      closed=False,
      points=[P[i] for i in run],
      width=segwidth,
    )


def draw_nstr_7seg(
  surface,
  leading_rect,
  col, nstr,
  skew=None,
  seg_lw=1,
  small_decimals=False,
):
  """"""Draw a seven-segment decimal number on a pygame surface.""""""
  if skew is None: skew = 0.17632698  # tan(10 degrees)
  R = leading_rect.copy()
  for ch in nstr:
    if ch == '.':
      if small_decimals:
        s = 0.6
        R = pg.Rect((R.left, R.top), (s * R.w, s * R.h))
      R.right = R.left - 0.6 * R.width
      draw_digit_7seg(surface, R, col, ch, skew, seg_lw)
      R.left = R.right + 0.6 * R.width
    else:
      draw_digit_7seg(surface, R, col, ch, skew, seg_lw)
      R.left = R.right + 0.6 * R.width


def draw_stargate_vstate(surface, sg_param, sg_state, mwrcs=None, hud=False):
  """"""Draw a stargate according to the visual state,

  sg_param is the StargateParam object used to hold the dialling
  sequence and the behaviour and timing parameters.

  sg_state is the StargateState object finite state machine, the
  one intended for visual output.

  mwrcs is the array of Milky Way (emulation) segment colours or None.

  When hud is True, annotation such as the ring or cursor angle
  and the rotation speed is displayed.
  """"""

  if mwrcs is not None:
    mw_ring_colours = mwrcs
  else:
    mw_ring_colours = np.array([[150, 150, 120]] * 36)
    mw_ring_colours[[34, 35, 0, 1, 2]] = [255, 255, 255]
    mw_ring_colours[[16, 17, 18, 19, 20]] = [100, 100, 70]

  size = np.array([surface.get_width(), surface.get_height()])
  C = size // 2
  max_r = 0.98 * min(C[0], C[1])
  body_col = (0, 119, 221)
  cr_col = (0, 119, 221)  # Constellation ring colour
  ch_col = (0, 119, 221)  # Chevron colour (when inactive)
  lit_sector_col = (85, 221, 255)

  if sg_param.base_style == SgStyle.MilkyWay:
    dim_vcol = (160, 0, 0)
    dim_wcol = (255, 0, 0)
    lit_vcol = (255, 119, 0)
    lit_wcol = (255, 240, 0)
    vwarm_fn = lambda u: 1.5 * u
    wwarm_fn = lambda u: 1.14286 * (u - 0.125)
    vcool_fn = lambda u: vwarm_fn(1.0 - u)
    wcool_fn = lambda u: wwarm_fn(1.0 - u)
  else:
    dim_vcol = (0, 0, 64)
    dim_wcol = (0, 32, 128)
    lit_vcol = (0, 200, 255)
    lit_wcol = (0, 255, 255)
    vwarm_fn = lambda u: 3.6 * (u - 0.0)
    wwarm_fn = lambda u: 1.5 * (u - 0.3333)
    vcool_fn = lambda u: 1 - (7.0 * (u - 0.125))
    wcool_fn = lambda u: 1 - u
  default_fade_fn = lambda u: ((6 * u) // 1) & 1
  vfader = 0.0
  wfader = 0.0
  fade_v = False
  fade_w = False
  shimmer_col = (75, 185, 255)

  full_circle = 36 * 0x040000
  abs_angle = sg_state.ref_sector * 0x040000
  if sg_state.reversing:
    abs_angle -= sg_state.rel_angle
    if abs_angle < 0: abs_angle += full_circle
  else:
    abs_angle += sg_state.rel_angle
    if abs_angle >= full_circle: abs_angle -= full_circle

  # Ring

  ibr = 0.73 * max_r    # Inner body radius
  icrr = 0.75 * max_r   # Inner constellation ring radius
  ocrr = 0.86 * max_r   # Outer constellation ring radius
  obr = 0.96 * max_r    # Outer body radius

  pg.draw.circle(surface, body_col, C, ibr, 1)
  pg.draw.circle(surface, body_col, C, obr, 1)
  pg.draw.circle(surface, cr_col, C, icrr, 1)
  pg.draw.circle(surface, cr_col, C, ocrr, 1)

  # Ring metrics

  r0 = icrr - 0.07 * max_r  # Inner extent of sector tick
  r1 = icrr - 0.04 * max_r  # Outer extent of sector tick
  hsa = (2 * np.pi / 36) / 2  # Half sector angle in radians
  crr = icrr + 0.5 * (ocrr - icrr) # Constellation ring radius
  cr = 0.3 * (ocrr - icrr)  # Constellation marker radius

  # Dialling state

  if sg_state.reversing:
    dialling_aix = sg_state.ref_sector - (sg_state.rel_angle >> 18)
    if dialling_aix < 0: dialling_aix += 36
  else:
    dialling_aix = sg_state.ref_sector + (sg_state.rel_angle >> 18)
    if dialling_aix >= 36: dialling_aix -= 36

  # Locked chevron positions
  if sg_state.incoming:
    lcps = [(1 + i) % 9 for i in range(sg_state.dial_seq_ix)]
  else:
    n = min(sg_state.dial_seq_ix, len(sg_param.lock_sequence))
    lcps = [chevron_pos(sg_param.lock_sequence[i])
        for i in range(n)]
  acp = -1  # Active chevron position (-1 means none)

  if sg_state.state in (
    SgState.Dialling,
    SgState.Incoming,
    SgState.FinalChevron
  ):
    if sg_state.dial_seq_ix >= 1:
      if sg_state.locking:
        if sg_state.incoming:
          acp = sg_state.dial_seq_ix
          if sg_state.state == SgState.FinalChevron:
            acp = 0
        else:
          x = sg_state.dial_seq_ix - 1
          if x < len(sg_param.lock_sequence):
            if sg_param.lock_sequence[x]:
              acp = chevron_pos(sg_param.lock_sequence[x])

  # Constellations

  for aix in range(36):
    a = aix * 2 * np.pi / 36
    # Division line
    R = np.array([np.sin(a - hsa), -np.cos(a - hsa)])
    pg.draw.line(surface, cr_col, C + icrr * R, C + ocrr * R, 1)
    R = np.array([np.sin(a), -np.cos(a)])
    if hud:
    # Inner tick
      pg.draw.line(surface, cr_col, C + r0 * R, C + r1 * R, 1)
    # Constellation
    col = (0, 0, 0)
    lw = 1
    if sg_param.mw_emulation:
      # The ring displays all constellations and rotates the desired
      # constellations to the indexing chevron at the top.
      if sg_state.state >= SgState.Idle:
        col = ring_colour_at(aix * 0x040000 - abs_angle, mw_ring_colours)
        lw = 2
    else:
      # The ring is blank except for the roving constellation and the
      # constellations already brought to their (locked) chevrons,
      if sg_state.state == SgState.Idle:
        col = cr_col
      elif sg_state.state in (
        SgState.Dialling,
        SgState.Misdialled,
        SgState.AlignForIncoming,
        SgState.FinalChevron
      ):
        if SgState.AlignForIncoming:
          col = cr_col
          lw = 2
        if dialling_aix == aix:
          col = lit_sector_col
          lw = 2
        if aix & 3 == 0 and aix // 4 in lcps:
          col = lit_sector_col
          lw = 2
        if sg_state.state == SgState.FinalChevron:
          if sg_state.incoming:
            col = lit_sector_col
            lw = 2
      elif sg_state.state == SgState.Incoming:
        x = abs_angle >> 18
        if 1 <= aix <= x or sg_state.dial_seq_ix >= 9:
          col = lit_sector_col
          lw = 2
        else:
          col = cr_col
      elif sg_state.state == SgState.Opening:
        if sg_state.incoming:
          col = lit_sector_col
          lw = 2
        else:
          if aix & 3 == 0 and aix // 4 in lcps:
            col = lit_sector_col
            lw = 2
          else:
            if sg_param.opening_time > 0:
              t = sg_state.progress / (sg_param.opening_time << 4)
            else:
              t = 1.0
            t1 = max(0, min(1, 1.5 * (t - 0.333)))
            col = t1 * np.array(lit_sector_col)
            lw = 2
      elif sg_state.state == SgState.Open:
        col = lit_sector_col
        lw = 2
      elif sg_state.state == SgState.Closing:
        col = cr_col
        lw = 1
      elif sg_state.state == SgState.Dimming:
        if sg_state.accepted:
          col = cr_col
        lw = 1
    if sum(col) > 0:
      M = np.array([[R[0], R[1]], [-R[1], R[0]]])
      pg.draw.circle(surface, col, C + [crr, 0] @ M, cr, lw)

  # Chevrons

  wx0 = icrr + 1.00 * (ocrr - icrr)
  wx1 = obr * 1.025
  wy0 = 0.010 * obr
  wy1 = 0.065 * obr

  Wedge = np.array([
    [wx1, wy1],
    [wx0, wy0],
    [wx0, -wy0],
    [wx1, -wy1],
  ])

  vx0 = wx0 - 0.010 * obr
  vx1 = wx1 - 0.021 * obr
  vx2 = vx1
  vx3 = vx0 - 0.020 * obr
  vy0 = 0.018 * obr
  vy1 = 0.068 * obr
  vy2 = 0.12 * obr
  vy3 = 0.020 * obr
  vx4 = vx0 + 0.2 * (vx3 - vx0)

  sx0 = vx1
  sx1 = sx0
  sx2 = sx0 + 0.005 * obr
  sx3 = sx0 + 0.80 * (wx1 - sx0)
  sx4 = wx1
  sy0 = wy1 - (wx1 - vx1)*(wy1 - wy0)/(wx1 - wx0)
  sy1 = sy0 + 0.17 * obr
  sy2 = sy1
  sy3 = sy0 + 0.5 * (sy1 - sy0)
  sy4 = wy1

  Frame = np.array([
    [vx1, vy1],
    [vx0, vy0],
    [vx0, -vy0],
    [vx1, -vy1],
    [vx2, -vy2],
    [vx3, -vy3],
    [vx3, vy3],
    [vx2, vy2],
  ])

  Indexer = np.array([
    [vx1, vy1],
    [vx0, vy0],
    [vx0, -vy0],
    [vx1, -vy1],
    [vx2, -vy2],
    [vx3, -vy3],
    [vx4, -vy3],
    [vx4, vy3],
    [vx3, vy3],
    [vx2, vy2],
  ])

  Shoulder = np.array([
    [sx0, sy0],
    [sx1, sy1],
    [sx2, sy2],
    [sx3, sy3],
    [sx4, sy4],
  ])

  for i in range(9):

    shimmer_phase = 0.0
    do_shimmer = False

    a = np.pi * (-0.5 + (i - 0) * 2 / 9)
    R = np.array([np.cos(a), np.sin(a)])
    M = np.array([[R[0], R[1]], [-R[1], R[0]]])
    wcol = vcol = ch_col
    vlw = wlw = 1
    activating = False

    D = np.array([0, 0])
    F = Frame

    vfade_fn = default_fade_fn
    wfade_fn = default_fade_fn
    vfader = 0.0
    wfader = 0.0
    fade_v = False
    fade_w = False

    if sg_param.base_style == SgStyle.MilkyWay:

      S = Shoulder
      pg.draw.lines(surface, ch_col, False, C + D + S @ M, width=1)
      S = Shoulder @ np.array([[1, 0], [0, -1]])
      pg.draw.lines(surface, ch_col, False, C + D + S @ M, width=1)

      if sg_state.state in (
        SgState.Dialling,
        SgState.Misdialled,
        SgState.FinalChevron,
        SgState.Incoming,
        SgState.Opening,
        SgState.Open,
        SgState.Closing
      ):
        if i in lcps:
          if i == acp:
            activating = True
        else:
          activating = sg_state.state == SgState.FinalChevron
        if (not activating and (i in lcps or sg_state.state in
            (SgState.Opening, SgState.Open, SgState.Closing))):
          vlw = wlw = 2
          vcol = lit_vcol
          wcol = lit_wcol
        if sg_state.state == SgState.Incoming:
          if activating:
            u = sg_state.chev_progress / (sg_param.chev_warm_time << 4)
            vfader = wfader = u
            vfade_fn = vwarm_fn
            wfade_fn = wwarm_fn
            fade_v = fade_w = True
        else:
          if activating or (i == 0):
            t = (sg_state.chev_progress
                - (sg_param.chev_warm_start_time << 4))
            if t >= 0:
              u = t / (sg_param.chev_warm_time << 4)
              vfader = wfader = u
              vfade_fn = vwarm_fn
              wfade_fn = wwarm_fn
              fade_v = fade_w = True
      if sg_state.state == SgState.Dimming:
        if sg_state.accepted or i in lcps:
          u = sg_state.chev_progress / (sg_param.chev_fade_time << 4)
          vfader = wfader = u
          vfade_fn = vcool_fn
          wfade_fn = wcool_fn
          fade_v = fade_w = True
      if i == 0:
        F = Indexer
        if (sg_state.locking and (sg_state.state == SgState.FinalChevron
            or sg_state.state != SgState.Incoming)):
          ct = sg_param.chev_locking_time << 4
          # Open and close the indexing chevron.
          if ct > 0:
            x = sg_param.chev_clack_start_time << 4
            s = 1  # Clack (out)
            if sg_state.chev_progress < x:
              x = sg_param.chev_click_start_time << 4
              s = 0  # Click (in)
            u = 7.14 * (sg_state.chev_progress - x) / ct
            u = max(0.0, min(1.0, u))
            if s: u = 1.0 - u
            D[1] = u * 0.015 * max_r
          # Illumination (dimming, here)
          if sg_state.state != SgState.FinalChevron:
            t = (sg_state.chev_progress
                - (sg_param.chev_fade_start_time << 4))
            if t >= 0:
              vlw = wlw = 1
              wcol = vcol = ch_col
              fade_v = fade_w = False
              if t < sg_param.chev_fade_time << 4:
                u = t / (sg_param.chev_fade_time << 4)
                vfader = wfader = u
                vfade_fn = vcool_fn
                wfade_fn = wcool_fn
                fade_v = fade_w = True

    elif sg_param.base_style == SgStyle.Pegasus:

      if sg_state.state in (
        SgState.Dialling,
        SgState.Misdialled,
        SgState.FinalChevron,
        SgState.Incoming,
        SgState.Opening,
        SgState.Open,
        SgState.Closing
      ):
        if sg_state.state in (
          SgState.Dialling,
          SgState.Misdialled,
          SgState.FinalChevron,
          SgState.Incoming
        ):
          do_shimmer = True
          u = 40 * ((sg_state.shimmer_phase & 65535) / 65536)
          shimmer_phase = u % 1.0
          if sg_state.incoming and shimmer_phase != 0.0:
            shimmer_phase = 1.0 - shimmer_phase
        if i in lcps:
          if i == acp:
            activating = True
        else:
          activating = sg_state.state == SgState.FinalChevron
        if (activating or i in lcps or sg_state.state in
            (SgState.Opening, SgState.Open, SgState.Closing)):
          vfader = wfader = 1
          vfade_fn = vwarm_fn
          wfade_fn = wwarm_fn
          fade_v = fade_w = True
        if activating:
          u = 0.0
          t0 = 0
          if sg_state.state != SgState.Incoming:
            t0 = sg_param.chev_warm_start_time << 4
          t = sg_state.chev_progress - t0
          if 0 <= t < (sg_param.chev_warm_time << 4):
            u = t / (sg_param.chev_warm_time << 4)
            vfader = wfader = u
            vfade_fn = vwarm_fn
            wfade_fn = wwarm_fn
            fade_v = fade_w = True
      if sg_state.state == SgState.Dimming:
        if sg_state.accepted or i in lcps:
          u = sg_state.chev_progress / (sg_param.chev_fade_time << 4)
          vfader = wfader = u
          vfade_fn = vcool_fn
          wfade_fn = wcool_fn
          fade_v = fade_w = True

    else:
      # Uknown style

      F = Frame
      vcol = [128, 0, 255]
      wcol = [255, 0, 255]

    if do_shimmer:
      u = np.sin(np.sqrt(shimmer_phase * np.pi * np.pi)) ** 2
      vcol = vcol + u * (np.array(shimmer_col) - vcol)

    if fade_v:
      u = max(0.0, min(1.0, vfade_fn(vfader)))
      vcol = dim_vcol + u * (np.array(lit_vcol) - dim_vcol)
      vlw = 2
    if fade_w:
      u = max(0.0, min(1.0, wfade_fn(wfader)))
      wcol = dim_wcol + u * (np.array(lit_wcol) - dim_wcol)
      wlw = 2
    pg.draw.lines(surface, vcol, True, C + D + F @ M, width=vlw)
    pg.draw.lines(surface, wcol, True, C - D + Wedge @ M, width=wlw)

  if hud:
    # Angle
    a = abs_angle * 2 * np.pi / (36 * 0x40000)
    R = np.array([np.sin(a), -np.cos(a)])
    r0 = 0.55 * max_r
    r1 = 0.71 * max_r
    pg.draw.line(surface, (0, 255, 0), C + r0 * R, C + r1 * R, 1)

  if hud:
    # Dialled sector
    if sg_param.mw_emulation:
      if sg_state.state in (
        SgState.Dialling,
        SgState.Misdialled,
        SgState.FinalChevron
      ):
        ix = sg_state.dial_seq_ix
        scol = (255, 144, 0)
        if not sg_state.sweeping:
          if sg_state.state != SgState.Misdialled:
            scol = (128, 255, 0)
            ix -= 1
          else:
            scol = (128, 0, 192)
          if sg_state.state == SgState.Dialling:
            if sg_state.progress < 0.25 * (sg_param.dwell_time << 4):
              ix = -1
        if 0 <= ix < len(sg_param.dial_sequence):
          x = sg_param.dial_sequence[ix] & 63
          if x >= 36: x -= 36
          u = min(1, sg_state.progress / 125.0)
          r0 = ibr + 0.5 * (icrr - ibr)
          r0 = r0 * (0.4 + 0.6 * u)
          rect = pg.Rect((C - [r0, r0]), (2 * r0, 2 * r0))
          a = (abs_angle + x * 0x040000) * 2 * np.pi / (36 * 0x040000)
          a0 = a1 = 0.5 * np.pi - a
          a0 -= hsa * u
          a1 += hsa * u
          lw = 5 if u < 1 else 3
          pg.draw.arc(surface, scol, rect, a0, a1, lw)

  if hud:
    # Rotational speed (and direction)
    a = (sg_state.speed / sg_param.max_speed) * (2 * np.pi / 9)
    if sg_state.reversing: a = -a
    R = np.array([np.sin(a), -np.cos(a)])
    r0 = 0.66 * max_r
    r1 = 0.73 * max_r
    pg.draw.line(surface, (192, 240, 0), C + r0 * R, C + r1 * R, 1)
    rect = pg.Rect((C - [r0, r0]), (2 * r0, 2 * r0))
    a0 = a1 = 0.5 * np.pi
    if a < 0:
      a1 -= a
    else:
      a0 -= a
    pg.draw.arc(surface, (192, 240, 0), rect, a0, a1, 1)

  # Wibbly wobbly swirly thing erroneously called an ""event horizon"".
  if sg_state.state in (SgState.Opening, SgState.Open, SgState.Closing):
    if sg_state.state == SgState.Opening:
      u = sg_state.progress / (sg_param.opening_time << 4)
    elif sg_state.state == SgState.Closing:
      u = 1.0 - (sg_state.progress / (sg_param.closing_time << 4))
    else:
      u = 1.0
    r = u * 0.98 * ibr
    col = (255 - int(255 * u), 255 - int(127 * u), 255)
    pg.draw.circle(surface, col, C, r, 4)


def draw_stargate_astate(surface, sg_param, sg_state):

  """"""Draw auxiliary stargate data according to the audio state,

  sg_param is the StargateParam object used to hold the dialling
  sequence and the behaviour and timing parameters.

  sg_state is the StargateState object finite state machine, the
  one intended for audio output, which is usally animated ahead
  of the visual state object in order to correct for sound latency
  and propagation delay.
  """"""

  size = np.array([surface.get_width(), surface.get_height()])
  C = size // 2
  max_r = 0.98 * min(C[0], C[1])

  # Angle
  abs_angle = sg_state.ref_sector * 0x040000
  if sg_state.reversing:
    abs_angle -= sg_state.rel_angle
  else:
    abs_angle += sg_state.rel_angle
  a = abs_angle * 2 * np.pi / (36 * 0x40000)
  R = np.array([np.sin(a), -np.cos(a)])
  r0 = 0.57 * max_r
  r1 = 0.69 * max_r
  pg.draw.line(surface, (255, 0, 0), C + r0 * R, C + r1 * R, 1)

  # Rotational speed (and direction)
  a = (sg_state.speed / sg_param.max_speed) * (2 * np.pi / 9)
  if sg_state.reversing: a = -a
  R = np.array([np.sin(a), -np.cos(a)])
  r0 = 0.68 * max_r
  r1 = 0.71 * max_r
  pg.draw.line(surface, (224, 0, 96), C + r0 * R, C + r1 * R, 1)
  rect = pg.Rect((C - [r0, r0]), (2 * r0, 2 * r0))
  a0 = a1 = 0.5 * np.pi
  if a < 0:
    a1 -= a
  else:
    a0 -= a
  pg.draw.arc(surface, (224, 0, 96), rect, a0, a1, 1)


def traces_from_sg_state(sg_state, sg_param):
  """"""Fetch output control signals from a stargate.

  These are the signals that would look nice on a seven-channel
  oscilloscope.
  """"""
  click = False  # MWE: Indexer opens
  clack = False  # MWE: Indexer closes
  if sg_state.locking:
    if sg_state.state == SgState.Incoming:
      click = True
    else:
      t = sg_state.chev_progress
      click = t >= sg_param.chev_click_start_time << 4
      if sg_param.mw_emulation:
        if (sg_state.state == SgState.Dialling
            or sg_state.state == SgState.FinalChevron):
          clack = t >= sg_param.chev_clack_start_time << 4
  result = [
    sg_state.speed / sg_param.max_speed,
    int(sg_state.sweeping),
    int(sg_state.lurching),
    int(click),
    int(clack),
    int(sg_state.state in (SgState.Opening, SgState.Open)),
    int(sg_state.state == SgState.Dimming),
  ]
  return result


def draw_traces(surface, dpix, old_values, new_values, styles):
  """"""Draw a stack of traces on a scrolling oscilloscope display.

  dpix is the number of pixels to scroll and update.

  A 2-pixel margin exists at the right edge to accomodate 4-pixel
  strokes which might othwerwise be clipped.
  """"""
  size = np.array([surface.get_width(), surface.get_height()])
  if 1 <= dpix < size[0]:
    surface.blit(
        surface, (0, 0), pg.Rect((dpix, 0), (size[0] - dpix, size[1])))
  if dpix >= 1:
    surface.fill(0x000000,
        pg.Rect((size[0] - dpix, 0), (dpix, size[1])))
  dpix1 = min(dpix, size[0])
  n = len(new_values)
  pen_margin = 2
  field_h = size[1] // n
  stack_h = field_h * n
  ch_h = field_h * 3 // 4
  top_baseline = (size[1] - stack_h) // 2 + field_h - (field_h - ch_h) // 2
  baseline = top_baseline
  field_x1 = size[0] - pen_margin
  def_col = (255, 0, 0)
  for oldv, newv, style in zip(old_values, new_values, styles):
    lw = style.get('lw', 1)
    x0 = field_x1 - dpix1
    y0 = baseline - ch_h * oldv
    x1 = field_x1
    y1 = baseline - ch_h * newv
    col = style.get('col', def_col)
    pg.draw.line(surface, col, (x0, y0), (x1, y1), lw)
    baseline += field_h


class MainCmd (IntEnum):
  """"""Command values to insulate the input system from business logic.""""""
  Null = 0
  Power = 1
  CutPower = 2
  Open = 3
  Incoming = 4
  Close = 5
  Style = 6
  HUD = 7


def main():
  """"""Run the pretty stargate simulation.""""""

  print(help_msg)

  test_angle = 0.0

  pg.init()
  clock = pg.time.Clock()

  # Requested screen size
  rss = (960, 960)
  rss = (800, 800)

  window_style = 0  # FULLSCREEN
  best_depth = pg.display.mode_ok(rss, window_style, 32)
  screen = pg.display.set_mode(rss, window_style, best_depth)
  screen_size = screen.get_width(), screen.get_height()
  pg.display.set_caption(""Stargate Animation Modelling."")

  # Oscilloscope canvases
  sw = screen_size[0] * 45 // 100
  sh = screen_size[1] * 45 // 100
  scope_rect = pg.Rect(
    ((screen_size[0] - sw) // 2, (screen_size[1] - sh) // 2),
    (sw, sh)
  )
  vscope_surface = pg.Surface(scope_rect.size, screen.get_bitsize(), screen)
  vscope_surface.fill(0x000000)
  ascope_surface = pg.Surface(scope_rect.size, screen.get_bitsize(), screen)
  ascope_surface.fill(0x000000)
  scope_time_err = 0

  anim_counter = 0
  max_fps = 100
  dampened_fps = max_fps
  delta_time = 1.0 / max_fps

  sg_param = StargateParam()
  sg_vstate = StargateState()
  sg_astate = copy.copy(sg_vstate)

  use_hud = True

  old_vvals = [0]
  old_avals = [0]

  delta_ms = clock.tick(max_fps)
  delta_ms = clock.tick(max_fps)

  visual_delay = 250
  visual_delay_countdown = 0
  visual_delay_error = 0
  print(f""Sound propagation\ndelay correction: {visual_delay}ms\n"")

  mw_ring_colours = build_mw_ring_colours()
  do_exit = False

  while not do_exit:

    cmd = MainCmd.Null

    for event in pg.event.get():
      if event.type == pg.QUIT:
        do_exit = True
        print(""[Quit]"")
      elif event.type == pg.KEYUP and event.key == pg.K_ESCAPE:
        do_exit = True
        print(""[ESC] Quit"")
      elif event.type == pg.KEYUP:
        if event.key == pg.K_q:
          do_exit = True
          print(""[Q] Quit"")
      elif event.type == pg.KEYDOWN:
        if event.key == pg.K_p:
          print(""[P] Power"")
          cmd = MainCmd.Power
        if event.key == pg.K_x:
          print(""[X] Cut Power"")
          cmd = MainCmd.CutPower
        if event.key == pg.K_o:
          print(""[O] Dial Out"")
          cmd = MainCmd.Open
        if event.key == pg.K_i:
          print(""[I] Incoming"")
          cmd = MainCmd.Incoming
        if event.key == pg.K_c:
          print(""[C] Close"")
          cmd = MainCmd.Close
        if event.key == pg.K_s:
          print(""[S] Style"")
          cmd = MainCmd.Style
        if event.key == pg.K_h:
          print(""[H] HUD"")
          cmd = MainCmd.HUD

    if cmd == MainCmd.Power:
      if (sg_vstate.state == SgState.Off
          and sg_astate.state == SgState.Off):
        sg_vstate.state = SgState.Idle
        sg_astate = copy.copy(sg_vstate)

    if cmd == MainCmd.CutPower:
      sg_vstate.state = SgState.Off
      sg_astate = copy.copy(sg_vstate)

    if cmd == MainCmd.Style:
      if (sg_vstate.state <= SgState.Idle
          and sg_astate.state <= SgState.Idle):
        sg_param.set_style((sg_param.style + 1) % len(SgStyle))
        print(f""Style: {sg_param.style}"")

    if cmd == MainCmd.Open:
      if (sg_vstate.state == SgState.Idle
          and sg_astate.state == SgState.Idle):
        if not sg_astate.open_req and not sg_vstate.open_req:
          sg_vstate.incoming = False
          sg_vstate.aborted = False
          sg_astate = copy.copy(sg_vstate)
          sg_astate.open_req = True
          visual_delay_countdown = visual_delay

    if cmd == MainCmd.Incoming:
      if (sg_vstate.state == SgState.Idle
          and sg_astate.state == SgState.Idle):
        if not sg_astate.open_req and not sg_vstate.open_req:
          sg_vstate.incoming = True
          sg_vstate.aborted = False
          sg_astate = copy.copy(sg_vstate)
          sg_astate.open_req = True
          visual_delay_countdown = visual_delay

    if cmd == MainCmd.Close:
      if sg_vstate.open_req and sg_astate.open_req:
        sg_astate.open_req = False
        visual_delay_countdown = visual_delay

    if cmd == MainCmd.HUD:
      use_hud = not use_hud

    sg_vstate.logging = True
    sg_astate.logging = False

    # Render

    screen.fill((0, 0, 0))
    screen_size = np.array([screen.get_width(), screen.get_height()])
    C = screen_size // 2
    max_r = 0.98 * min(C[0], C[1])

    mwrcs = mw_ring_colours
    draw_stargate_vstate(screen, sg_param, sg_vstate, mwrcs, hud=use_hud)
    if use_hud:
      draw_stargate_astate(screen, sg_param, sg_astate)

    # Floor
    R = np.array([1, 0]) * max_r
    x = max_r
    y = 0.63 * max_r
    pg.draw.line(screen, (128, 48, 0), C + [-x, y], C + [x, y], 3)

    # Oscilloscope
    scope_time = 5000
    a0 = dict(lw=4, col=pg.Color(96, 0, 255))
    v0 = dict(lw=1, col=pg.Color(0, 100, 160))
    a1 = dict(lw=4, col=pg.Color(255, 32, 0))
    v1 = dict(lw=1, col=pg.Color(0, 170, 0))
    a2 = dict(lw=4, col=pg.Color(200, 180, 0))
    v2 = dict(lw=1, col=pg.Color(0, 140, 240))
    a3 = dict(lw=4, col=pg.Color(200, 0, 160))
    v3 = dict(lw=1, col=pg.Color(0, 180, 140))
    astyles = [a0, a2, a2, a1, a1, a3, a1]
    vstyles = [v0, v2, v2, v1, v1, v3, v1]
    avals = traces_from_sg_state(sg_astate, sg_param)
    vvals = traces_from_sg_state(sg_vstate, sg_param)
    sw = scope_rect.width - 4
    sh = scope_rect.height
    dpix0 = delta_ms * sw / scope_time - scope_time_err
    dpix = int(round(dpix0))
    scope_time_err = dpix - dpix0
    dpix = min(sw, dpix)
    draw_traces(ascope_surface, dpix, old_avals, avals, astyles)
    draw_traces(vscope_surface, dpix, old_vvals, vvals, vstyles)
    old_vvals = vvals
    old_avals = avals
    delay_pix = int(sw * visual_delay / scope_time)
    y0, y1 = scope_rect.top, scope_rect.bottom
    x0 = scope_rect.left + sw
    x1 = x0 - delay_pix
    if use_hud:
      pg.draw.line(screen, 0x007700, (x0, y0), (x0, y1), 1)
      pg.draw.line(screen, 0x770000, (x1, y0), (x1, y1), 1)
      screen.blit(ascope_surface, scope_rect, special_flags=pg.BLEND_ADD)
      screen.blit(vscope_surface, scope_rect, special_flags=pg.BLEND_ADD)

    if use_hud:
      # Numeric displays

      w = screen.get_width()
      std_digit_width = int(round(w * 20.0 / 960.0))

      digit_width = std_digit_width
      digit_height = 2 * digit_width

      # Frames per second
      #cx = 0.01 * max_r
      #x = cx - 4 * 1.6 * digit_width
      x = 10
      fps_rect = pg.Rect((x, 10), (digit_width, digit_height))
      fps = 1.0 / delta_time
      weight = 0.1
      dampened_fps = dampened_fps + weight * (fps - dampened_fps)
      nstr = f""{dampened_fps:5.1f}""
      draw_nstr_7seg(screen, fps_rect, 0xFF00CC, nstr, seg_lw=3,
          small_decimals=True)

      # Style index
      sn = 1 + int(sg_param.style)
      nstr = f""{sn}""
      x = screen_size[0] - 10 - digit_width * (2 + len(nstr))
      sn_rect = pg.Rect((x, 10), (digit_width, digit_height))
      draw_nstr_7seg(screen, sn_rect, 0x0099CC, nstr, seg_lw=3),

      if False:
        # Test graphic to verify timing
        R = np.array([np.sin(test_angle), -np.cos(test_angle)]) * 0.71 * max_r
        pg.draw.line(screen, (255, 60, 0), C, C + R, 1)

    pg.display.update()

    # Animate and integrate

    delta_ms = clock.tick(max_fps)
    delta_time = delta_ms / 1000.0

    sg_vstate.integrate(sg_param, delta_ms)
    sg_astate.integrate(sg_param, delta_ms)

    if visual_delay_countdown > 0:
      if visual_delay_countdown >= delta_ms:
        visual_delay_countdown -= delta_ms
        visual_delay_error = 0
      else:
        visual_delay_error = delta_ms - visual_delay_countdown
        visual_delay_countdown = 0
      if visual_delay_countdown == 0:
        sg_vstate.open_req = sg_astate.open_req

    anim_counter += delta_ms
    test_angle += 2.0/60.0 * np.pi * delta_time


if __name__ == '__main__':
  main()
  print(""Done!"")
"
VPEZeYs9,data611,TestGuy1,JSON,Thursday 22nd of June 2023 06:13:12 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '1044960e08aa38680d7b2c46858fd6772923e8d51679e6acd985632b649ecce54604d1cf7f16e9f022b8f744dc107f565bef898b2ac4204a3cd591d48aca53c31b99225b175a2a19265c5070b7280fc22d6f266365ba3b698d0140fa040977288bb3d5a127ce354fd8e269a9672422fd3b50192eec763f902b481370f0f15ba5',
  otherdata: [
    '91b7fe2944cc6f2f1ff01876b7e78279',
    '40fb480aec5d0b48d0450565258a7819',
    '2ae51c29f29f8cbffca0bdba2f6b62f1',
    'e3dcf052788e33cb34c3965072412ecb',
    '6664b33ca59158badbbcf344a9ae0740',
    '09bf5b6796a6978d2223dc2943cecfbe',
    '6d0247bf760d48e1d944a2ed465735b8',
    '489b6b32681cca6f6ca3f2630d9d3d3e'
  ]
}"
BDLPvCK4,css webdev 3,lovelymondayss,CSS,Thursday 22nd of June 2023 05:35:05 AM CDT,"nav {
  position: absolute;
  right: 0;
  display: flex;
}

a {
  text-decoration: none;
  color: lightcoral;
  padding: 15px;
  float: left;
}

a:hover {
  background-color: burlywood;
}

body {
  margin-top: 10%;
}

.main-header {
  background-color: lightgoldenrodyellow;
  padding-left: 10px;
  position: fixed;
  top: 0px;
  left: 0px;
  right: 0px;
  height: 50px;
}

.header-info {
  text-align: left;
  color: rgb(219, 84, 75);
  padding: 0px;
  margin: 14px;
  position: absolute;
  left: 0px;
}

* {
  color: #87c641;
  border-color: #87c641;
  font-family: ""Roboto"", sans-serif;
}

h1 {
  font-size: x-large;
  width: full;
  height: auto;
}

body {
  background-color: #fffff7;
}

.center {
  text-align: center;
}

.fancy {
  text-shadow: 2px 2px 3px green;
}

img {
  width: 15%;
  aspect-ratio: 3/2;
  border-radius: 40px;
  border: #87c641 5px solid;
  margin: 10px;
}

h2 {
  font-family: ""Courier New"", Courier, monospace;
  font-style: italic;
}

ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.dropdown {
  display: flex;
  flex-direction: column;
}
.dropdown-content {
  display: none;
}
.dropdown:hover .dropdown-content {
  display: block;
  position: absolute;
  top: 100%;
  background-color: antiquewhite;
}
.dropdown-item:hover {
  background-color: whitesmoke;
  cursor: pointer;
}
a.dropdown-item {
  min-width: 160px;
  text-align: left;
}

li.dropdown-item:hover a.dropdown-item {
  text-align: left;
  color: gainsboro;
}
"
TLFsyaW9,Balls,Grossos,JavaScript,Thursday 22nd of June 2023 04:58:56 AM CDT,"function balls(input) {

    let counter = 0;

    let blackBall = 0;

    let redCounter = 0;
    let orangeCounter = 0;
    let yellowCounter = 0;
    let whiteCounter = 0;
    let total = 0;
    for (let index = 1; index < input.length; index++) {

        let currentColour = input[index];

        switch (currentColour) {
            case 'red':
                total += 5;
                redCounter++;
                break;
            case 'orange':
                total += 10;
                orangeCounter++;
                break;
            case 'yellow':
                total += 15;
                yellowCounter++;
                break;
            case 'white':
                total += 20;
                whiteCounter++;
                break;
            case 'black':
                blackBall += 1;
                total = Math.floor(total / 2);
                break;
            default:
                counter++;
                break
        }

    }

    if (blackBall >= 1) {
        console.log(`Total points: ${total}`);
        console.log(`Red balls: ${redCounter}`);
        console.log(`Orange balls: ${orangeCounter}`);
        console.log(`Yellow balls: ${yellowCounter}`);
        console.log(`White balls: ${whiteCounter}`);
        console.log(`Other colors picked: ${counter}`);
        console.log(`Divides from black balls: ${blackBall}`);

    } else {
        console.log(`Total points: ${total}`);
        console.log(`Red balls: ${redCounter}`);
        console.log(`Orange balls: ${orangeCounter}`);
        console.log(`Yellow balls: ${yellowCounter}`);
        console.log(`White balls: ${whiteCounter}`);
        console.log(`Other colors picked: ${counter}`);
        console.log(`Divides from black balls: ${blackBall}`);

    }
}

balls([""3"",
    ""white"",
    ""black"",
    ""pink""])"
zMXZH1Kz,Game,Hidden2World,C#,Thursday 22nd of June 2023 04:57:48 AM CDT,"using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace game
{
    internal class Program
    {
        static string enemyName;
        static string enemyTitle;
        static int enemyHealth;
        static int enemydamage;
        static int health;


        static void Main()
        {
            while (enemyHealth > 0 && health > 0){
                Console.WriteLine(""Enter the name for the enemy:"");
                enemyName = Console.ReadLine();

                Console.WriteLine(""Enter the title for the enemy:"");
                enemyTitle = Console.ReadLine();

                Console.WriteLine(""Enter the health for the enemy:"");
                if (!int.TryParse(Console.ReadLine(), out enemyHealth))
                {
                    Console.WriteLine(""Invalid choice. Please choose a number above 0."");
                    continue;

                }
                

                Console.WriteLine(""How much health do you want:"");
                if (!int.TryParse(Console.ReadLine(), out health))
                {
                    Console.WriteLine(""Invalid choice. Please choose a number above 0."");
                    continue;

                }

                Console.Clear();

                string enemyFullName = $""{enemyName} the {enemyTitle}"";

                Console.WriteLine(""You have encountered "" + enemyFullName + "". Prepare to fight!"");
                Console.WriteLine(""Enemy Health: "" + enemyHealth);
                attack();
            }
        }

        static void attack()
        {
            Random random = new Random();
            int choice;

            while (health > 0 && enemyHealth > 0)
            {
                Console.WriteLine(""Choose your action:"");
                Console.WriteLine(""1. Do damage"");
                Console.WriteLine(""2. Heal"");

                
                if (!int.TryParse(Console.ReadLine(), out choice))
                {
                    Console.WriteLine(""Invalid choice. Please choose either 1 or 2."");
                    continue;
                }
                switch (choice)
                {
                    
            
                    case 1: //starts it from the second one because technically it starts the cases from 0
                        Console.WriteLine(""How much damage do you want to do?"");
                        int damage = Convert.ToInt32(Console.ReadLine());
                        enemyHealth -= damage;

                        Console.WriteLine(""Enemy Health after damage: "" + enemyHealth);

                        if (enemyHealth <= 0)
                        {
                            Console.WriteLine($""You have defeated {enemyName}!"");
                            Console.WriteLine(""You win!"");
                            Console.WriteLine(""Thank you for playing the Game. Press any key to exit."");
                            Console.ReadKey();
                        }
                        break;
                    case 2:

                        int healAmount = random.Next(11, 51);
                        health += healAmount;
                        Console.WriteLine($""You just got healed + {healAmount}"");

                        Console.WriteLine(""Your Health after healing: "" + health);
                        break;
                    default: //this is basically else
                        Console.WriteLine(""Invalid choice. Please choose a valid option."");
                        continue;

                }
                int enemyDamage = random.Next(1, 101);
                health -= enemyDamage;

                Console.WriteLine($""The {enemyName} has dealt {enemyDamage} damage!"");

                if (health <= 0)
                {
                    Console.WriteLine(""Game over!"");
                    Console.WriteLine(""You lose!"");
                    Console.WriteLine(""Thank you for playing the Game. Press any key to exit."");
                    Console.ReadKey();
                }




            }
        }


    }
}
"
P5dyVMnk,Bonus Upon First Deposit Of The Month | GSI Markets,fxvnpro,PHP,Thursday 22nd of June 2023 04:55:31 AM CDT,https://www.fxvnpro.com/bonus-upon-first-deposit-of-the-month-gsi-markets/
E93mZ3np,Untitled,Alexander_Maximov,C#,Thursday 22nd of June 2023 04:36:24 AM CDT,"using System;
using System.Collections.Generic;

namespace GladiatorFight
{
    public class FighterClub
    {
        private List<Fighter> _fighters;
        private UserInput _userInput;
        private int inputAttempts = 10;

        public FighterClub(List<Fighter> fighters, UserInput userInput)
        {
            _fighters = fighters;
            _userInput = userInput;
        }

        public void ShowGladiatorsInfo()
        {
            for (int i = 0; i < _fighters.Count; i++)
            {
                Console.Write(i + 1 + "" - "");
                _fighters[i].ShowFightersInfo();
            }
            
            Console.WriteLine();
        }

        public Fighter GetLeftFighterByName()
        {
            string newFighterName = _userInput.GetInputLeftFighterName();

            for (int i = 0; i < inputAttempts; i++)
            {
                if (GetFighterByName(newFighterName) == null)
                {
                    newFighterName = _userInput.GetInputLeftFighterName();
                }
            }
            
            Fighter leftFighter = GetFighterByName(newFighterName);

            return leftFighter;
        }

        public Fighter GetRightFighterByName()
        {
            string newFighterName = _userInput.GetInputRightFighterName();

            for (int i = 0; i < inputAttempts; i++)
            {
                if (GetFighterByName(newFighterName) == null)
                {
                    newFighterName = _userInput.GetInputRightFighterName();
                }
            }

            Fighter rightFighter = GetFighterByName(newFighterName);

            return rightFighter;
        }

        private Fighter GetFighterByName(string newFighterName)
        {
            Fighter newFighter;
            
            if (TryGetCheckFighterByName(newFighterName, out newFighter) == false)
            {
                Console.WriteLine(""Гладиатор с таким именем не найден."");
            }

            return newFighter;
        }

        private bool TryGetCheckFighterByName(string newFighterName, out Fighter newFighter)
        {
            for (int i = 0; i < _fighters.Count; i++)
            {
                if (_fighters[i].Name == newFighterName)
                {
                    newFighter = _fighters[i];
                    return true;
                }
            }
            
            newFighter = null;
            return false;
        }
    }
}"
qFfJgrix,Untitled,Alexander_Maximov,C#,Thursday 22nd of June 2023 04:36:08 AM CDT,"using System;
using System.Net;

namespace GladiatorFight
{
    public class Fighter
    {
        public string Name { get; }
        public int Health { get; private set; }
        public bool IsDead => Health <= 0;
        private int _armor;
        protected int Damage { get;}

        public Fighter(string name, int health, int damage, int armor)
        {
            Name = name;
            Health = health;
            Damage = damage;
            _armor = armor;
        }

        public int GetDamage()
        {
            Console.Write(""\nОбычная атака."");
            return Damage;
        }

        public void ShowFightersInfo()
        {
            Console.WriteLine($""Имя - {Name} | Здоровье - {Health} | Урон - {Damage} | Защита - {_armor}"");
        }

        public void ShowFightersHealthInfo()
        {
            if (IsDead == false)
            {
                Console.WriteLine($""У воина {Name} здоровье стало - {Health}."");
            }
            else
            {
                Console.WriteLine($""У воина {Name} здоровье стало - 0"");        
            }
        }

        public void TakeDamage(int damage)
        {
            Health -= damage - _armor;
            Console.WriteLine();
            Console.WriteLine($""{Name} получил {damage - _armor} ед. урона ({damage} - {_armor})."");
        }

        public virtual int GetSkillDamage(int roundCount)
        {
            int skillDamage = 0;
            return skillDamage;
        }
    }
}"
954cfA5m,Untitled,Alexander_Maximov,C#,Thursday 22nd of June 2023 04:35:51 AM CDT,"using System;
using System.Collections.Generic;

namespace GladiatorFight
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            UserInput userInput = new UserInput();

            Warlord warlord = new Warlord(""Warlord"", 6000, 150, 25);
            Duelist duelist = new Duelist(""Duelist"", 5000, 200, 20);
            BountyHunter bountyHunter = new BountyHunter(""Bounty Hunter"", 3000, 300, 5, 100);
            Sagittarius sagittarius = new Sagittarius(""Sagittarius"", 3200, 500, 1);
            Gladiator gladiator = new Gladiator(""Gladiator"", 7000, 100, 15);

            List<Fighter> fighters = new List<Fighter>() {warlord, duelist, bountyHunter, sagittarius, gladiator};

            FighterClub fighterClub = new FighterClub(fighters, userInput);

            fighterClub.ShowGladiatorsInfo();

            Fighter rightFighter = fighterClub.GetRightFighterByName();
            Fighter leftFighter = fighterClub.GetLeftFighterByName();

            for (int i = 1; leftFighter.Health > 0 && rightFighter.Health > 0; i++)
            {
                if (i % 2 == 0)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    leftFighter.TakeDamage(rightFighter.GetSkillDamage(i));
                    leftFighter.ShowFightersHealthInfo();

                    Console.ForegroundColor = ConsoleColor.Green;
                    rightFighter.TakeDamage(leftFighter.GetSkillDamage(i));
                    rightFighter.ShowFightersHealthInfo();

                    Console.ResetColor();
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    leftFighter.TakeDamage(rightFighter.GetDamage());
                    leftFighter.ShowFightersHealthInfo();

                    Console.ForegroundColor = ConsoleColor.Green;
                    rightFighter.TakeDamage(leftFighter.GetDamage());
                    rightFighter.ShowFightersHealthInfo();

                    Console.ResetColor();
                }

                Console.ReadKey();
            }

            ShowWinStatus(rightFighter, leftFighter);
        }

        private static void ShowWinStatus(Fighter rightFighter, Fighter leftFighter)
        {
            if (rightFighter.IsDead == false)
            {
                ShowFighterWin(rightFighter.Name, ConsoleColor.DarkGreen);
            }
            else
            {
                ShowFighterWin(leftFighter.Name, ConsoleColor.DarkRed);
            }

            Console.ResetColor();
        }

        private static void ShowFighterWin(string winnerName, ConsoleColor color)
        {
            Console.ForegroundColor = color;
            Console.WriteLine($""Воин - {winnerName} выйграл."");
        }
    }
}"
HSTdGyPR,L2 Pride's Cubic for Interlude,AcaciaX9,Java,Thursday 22nd of June 2023 04:34:02 AM CDT,"Subject: [PATCH] AIO Cubic
---
Index: aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java b/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java	(date 1687416470796)
@@ -7407,4 +7407,15 @@
 		
 		return gms;
 	}
+
+	private boolean _isCubicBypass;
+	public boolean isCubicBypass()
+	{
+		return _isCubicBypass;
+	}
+	public void setIsCubicBypass(boolean isCubicBypass)
+	{
+		_isCubicBypass = isCubicBypass;
+	}
+
 }
\ No newline at end of file
Index: aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java	(date 1686989017105)
@@ -1,8 +1,5 @@
 package net.sf.l2j.gameserver.network.clientpackets;
 
-import java.util.StringTokenizer;
-import java.util.logging.Logger;
-
 import net.sf.l2j.Config;
 import net.sf.l2j.gameserver.communitybbs.CommunityBoard;
 import net.sf.l2j.gameserver.data.manager.HeroManager;
@@ -10,6 +7,7 @@
 import net.sf.l2j.gameserver.enums.FloodProtector;
 import net.sf.l2j.gameserver.handler.AdminCommandHandler;
 import net.sf.l2j.gameserver.handler.IAdminCommandHandler;
+import net.sf.l2j.gameserver.handler.itemhandlers.Cubic;
 import net.sf.l2j.gameserver.model.World;
 import net.sf.l2j.gameserver.model.WorldObject;
 import net.sf.l2j.gameserver.model.actor.Npc;
@@ -21,6 +19,9 @@
 import net.sf.l2j.gameserver.network.serverpackets.NpcHtmlMessage;
 import net.sf.l2j.gameserver.scripting.QuestState;
 
+import java.util.StringTokenizer;
+import java.util.logging.Logger;
+
 public final class RequestBypassToServer extends L2GameClientPacket
 {
 	private static final Logger GMAUDIT_LOG = Logger.getLogger(""gmaudit"");
@@ -45,7 +46,7 @@
 		final Player player = getClient().getPlayer();
 		if (player == null)
 			return;
-		
+
 		if (_command.startsWith(""admin_""))
 		{
 			String command = _command.split("" "")[0];
@@ -72,6 +73,17 @@
 			
 			ach.useAdminCommand(_command, player);
 		}
+		if (_command.startsWith(""cubic_""))
+		{
+			String command = _command.substring(6);
+			try
+			{
+				Cubic.onBypass(player, command);
+			}
+			catch (NumberFormatException nfe)
+			{
+			}
+		}
 		else if (_command.startsWith(""player_help ""))
 		{
 			final String path = _command.substring(12);
Index: aCis_gameserver/java/net/sf/l2j/gameserver/handler/ItemHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/handler/ItemHandler.java b/aCis_gameserver/java/net/sf/l2j/gameserver/handler/ItemHandler.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/handler/ItemHandler.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/handler/ItemHandler.java	(date 1686988305138)
@@ -3,32 +3,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import net.sf.l2j.gameserver.handler.itemhandlers.BeastSoulShots;
-import net.sf.l2j.gameserver.handler.itemhandlers.BeastSpices;
-import net.sf.l2j.gameserver.handler.itemhandlers.BeastSpiritShots;
-import net.sf.l2j.gameserver.handler.itemhandlers.BlessedSpiritShots;
-import net.sf.l2j.gameserver.handler.itemhandlers.Books;
-import net.sf.l2j.gameserver.handler.itemhandlers.Calculators;
-import net.sf.l2j.gameserver.handler.itemhandlers.Elixirs;
-import net.sf.l2j.gameserver.handler.itemhandlers.EnchantScrolls;
-import net.sf.l2j.gameserver.handler.itemhandlers.FishShots;
-import net.sf.l2j.gameserver.handler.itemhandlers.Harvesters;
-import net.sf.l2j.gameserver.handler.itemhandlers.ItemSkills;
-import net.sf.l2j.gameserver.handler.itemhandlers.Keys;
-import net.sf.l2j.gameserver.handler.itemhandlers.Maps;
-import net.sf.l2j.gameserver.handler.itemhandlers.MercenaryTickets;
-import net.sf.l2j.gameserver.handler.itemhandlers.PaganKeys;
-import net.sf.l2j.gameserver.handler.itemhandlers.PetFoods;
-import net.sf.l2j.gameserver.handler.itemhandlers.Recipes;
-import net.sf.l2j.gameserver.handler.itemhandlers.RollingDices;
-import net.sf.l2j.gameserver.handler.itemhandlers.ScrollsOfResurrection;
-import net.sf.l2j.gameserver.handler.itemhandlers.Seeds;
-import net.sf.l2j.gameserver.handler.itemhandlers.SevenSignsRecords;
-import net.sf.l2j.gameserver.handler.itemhandlers.SoulCrystals;
-import net.sf.l2j.gameserver.handler.itemhandlers.SoulShots;
-import net.sf.l2j.gameserver.handler.itemhandlers.SpecialXMas;
-import net.sf.l2j.gameserver.handler.itemhandlers.SpiritShots;
-import net.sf.l2j.gameserver.handler.itemhandlers.SummonItems;
+import net.sf.l2j.gameserver.handler.itemhandlers.*;
 import net.sf.l2j.gameserver.model.item.kind.EtcItem;
 
 public class ItemHandler
@@ -63,6 +38,7 @@
 		registerHandler(new SoulCrystals());
 		registerHandler(new SpiritShots());
 		registerHandler(new SummonItems());
+		registerHandler(new Cubic());
 	}
 	
 	private void registerHandler(IItemHandler handler)
Index: aCis_gameserver/java/net/sf/l2j/gameserver/handler/itemhandlers/Cubic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/handler/itemhandlers/Cubic.java b/aCis_gameserver/java/net/sf/l2j/gameserver/handler/itemhandlers/Cubic.java
new file mode 100644
--- /dev/null	(date 1687430218863)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/handler/itemhandlers/Cubic.java	(date 1687430218863)
@@ -0,0 +1,340 @@
+/*
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 3 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package net.sf.l2j.gameserver.handler.itemhandlers;
+
+import net.sf.l2j.gameserver.data.cache.HtmCache;
+import net.sf.l2j.gameserver.data.xml.MultisellData;
+import net.sf.l2j.gameserver.data.xml.PlayerData;
+import net.sf.l2j.gameserver.data.xml.SkillTreeData;
+import net.sf.l2j.gameserver.enums.actors.ClassId;
+import net.sf.l2j.gameserver.enums.skills.Stats;
+import net.sf.l2j.gameserver.handler.IItemHandler;
+import net.sf.l2j.gameserver.model.actor.Playable;
+import net.sf.l2j.gameserver.model.actor.Player;
+import net.sf.l2j.gameserver.model.holder.skillnode.EnchantSkillNode;
+import net.sf.l2j.gameserver.model.item.instance.ItemInstance;
+import net.sf.l2j.gameserver.model.olympiad.OlympiadManager;
+import net.sf.l2j.gameserver.network.SystemMessageId;
+import net.sf.l2j.gameserver.network.serverpackets.*;
+
+import java.text.DecimalFormat;
+import java.util.List;
+
+/**
+ * @author Acacia aka Kishin
+ *
+ */
+public class Cubic implements IItemHandler
+{
+    @Override
+    public void useItem(Playable playable, ItemInstance item,boolean forceUse)
+    {
+        if (!(playable instanceof Player))
+            return;
+        Player player = (Player)playable;
+
+        if( player.isInJail() || player.isInDuel() || player.isInCombat() ||
+                player.isInOlympiadMode() || player.isInObserverMode() ||
+                OlympiadManager.getInstance().isRegistered(player))
+            {
+                player.sendMessage(""Invalid action"");
+                player.sendPacket(ActionFailed.STATIC_PACKET);
+                return;
+            }
+
+        int itemId = item.getItemId();
+
+        if (itemId == 5588) // Tutorial Guide
+        {
+            String htmFile = ""data/html/Custom/PortableCubic/Cubic.htm"";
+            String htmContent = HtmCache.getInstance().getHtm(htmFile);
+
+            NpcHtmlMessage infoHtml = new NpcHtmlMessage(1);
+            infoHtml.setHtml(htmContent);
+            player.sendPacket(infoHtml);
+        }
+    }
+
+    public static void onBypass(Player player, String command)
+    {
+        if(player.isInJail() || player.isInDuel() || player.isInCombat() ||
+           player.isInOlympiadMode() || player.isInObserverMode() ||
+           OlympiadManager.getInstance().isRegistered(player))
+           {
+             player.sendMessage(""Invalid action"");
+             player.sendPacket(ActionFailed.STATIC_PACKET);
+             return;
+           }
+        //Augment Command
+        if(command.equalsIgnoreCase(""aug""))
+        {
+            player.sendPacket(SystemMessageId.SELECT_THE_ITEM_TO_BE_AUGMENTED);
+            player.sendPacket(ExShowVariationMakeWindow.STATIC_PACKET);
+        }
+        //Cancel Augment Command
+        if(command.equalsIgnoreCase(""cancelaug""))
+        {
+            player.sendPacket(SystemMessageId.SELECT_THE_ITEM_TO_BE_AUGMENTED);
+            player.sendPacket(ExShowVariationCancelWindow.STATIC_PACKET);
+        }
+        //enchant skills
+        if(command.equalsIgnoreCase(""enchantskill""))
+        {
+            if(player.getClassId().getLevel() < 3)
+            {
+                player.sendMessage(""You must have completed the 3rd class transfer."");
+                return;
+            }
+
+            final List<EnchantSkillNode> skills = SkillTreeData.getInstance().getEnchantSkillsFor(player);
+            if (skills.isEmpty())
+            {
+                player.sendPacket(SystemMessageId.THERE_IS_NO_SKILL_THAT_ENABLES_ENCHANT);
+
+                if (player.getStatus().getLevel() < 76)
+                    player.sendPacket(SystemMessage.getSystemMessage(SystemMessageId.DO_NOT_HAVE_FURTHER_SKILLS_TO_LEARN_S1).addNumber(91));
+                else
+                    player.sendPacket(SystemMessageId.NO_MORE_SKILLS_TO_LEARN);
+            }
+            else
+                player.setIsCubicBypass(true);
+            player.sendPacket(new ExEnchantSkillList(skills));
+        }
+
+        // Player's Statistics
+        if (command.equalsIgnoreCase(""stats""))
+        {
+            if(player.isDead() || player.isAlikeDead())
+            {player.sendMessage(""Invalid action"");
+                player.sendPacket(ActionFailed.STATIC_PACKET);
+                return;}
+
+            NpcHtmlMessage html = new NpcHtmlMessage(1);
+            StringBuilder html1 = new StringBuilder(""<html><body>"");
+
+            html1.append(""<br><center><font color=\""LEVEL\"">[Additional Player Stats]</font></center>"");
+            html1.append(""<table border=0 width=\""100%\"">"");
+            html1.append(""<tr><td>Critical Damage Multi</td><td>"" + new DecimalFormat(""0.##"").format(player.getStatus().calcStat(Stats.CRITICAL_DAMAGE, 1.00, null, null)) + ""x +""
+                    + player.getStatus().calcStat(Stats.CRITICAL_DAMAGE_ADD, 0, null, null) + ""</td></tr>"");
+            html1.append(""<tr><td>Magic Critical Rate</td><td>"" + Math.round((float) player.getStatus().getMCriticalHit(null, null) / 10) + ""%"" + ""</td></tr>"");
+            html1.append(""<tr><td>Healed Boost (received)</td><td>"" + (int) (player.getStatus().calcStat(Stats.HEAL_EFFECTIVNESS, 100, null, null)) + ""%"" + ""</td></tr>"");
+            html1.append(""<tr><td>Healing Power (given)</td><td>"" + (int) (player.getStatus().calcStat(Stats.HEAL_PROFICIENCY, 100, null, null)) + ""%"" + ""</td></tr>"");
+            html1.append(""<tr><td>PVP Attack Hits Damage</td><td>"" + new DecimalFormat(""0.##"").format(player.getStatus().calcStat(Stats.PVP_PHYSICAL_DMG, 1, null, null)) + ""x"" + ""</td></tr>"");
+            html1.append(""<tr><td>PVP Physical Skill Damage</td><td>"" + new DecimalFormat(""0.##"").format(player.getStatus().calcStat(Stats.PVP_PHYS_SKILL_DMG, 1, null, null)) + ""x"" + ""</td></tr>"");
+            html1.append(""<tr><td>PVP Physical Skill Defence</td><td>"" + new DecimalFormat(""0.##"").format(player.getStatus().calcStat(Stats.PVP_PHYS_SKILL_DEF, 1, null, null)) + ""x"" + ""</td></tr>"");
+            html1.append(""<tr><td>PVP Magical Damage</td><td>"" + new DecimalFormat(""0.##"").format(player.getStatus().calcStat(Stats.PVP_MAGICAL_DMG, 1, null, null)) + ""x"" + ""</td></tr>"");
+            html1.append(""<tr><td>Physical Skill Dodge</td><td>"" + (int) (player.getStatus().calcStat(Stats.P_SKILL_EVASION, 0, null, null)) + ""%"" + ""</td></tr>"");
+            html1.append(""<tr><td>Attack Range</td><td>"" + player.getStatus().getPhysicalAttackRange() + ""</td></tr>"");
+            html1.append(""<tr><td>Damage Reflect</td><td>"" + (int) (player.getStatus().calcStat(Stats.REFLECT_DAMAGE_PERCENT, 0, null, null)) + ""%"" + ""</td></tr>"");
+            html1.append(""<tr><td>Skill Reflect</td><td>"" + (int) (player.getStatus().calcStat(Stats.REFLECT_SKILL_PHYSIC, 0, null, null)) + ""%"" + ""</td></tr>"");
+            html1.append(""<tr><td>Magic Reflect</td><td>"" + (int) (player.getStatus().calcStat(Stats.REFLECT_SKILL_MAGIC, 0, null, null)) + ""%"" + ""</td></tr>"");
+            html1.append(""<tr><td>Mp Consume Rate %</td><td>"" + (int) (player.getStatus().calcStat(Stats.MAGICAL_MP_CONSUME_RATE, 100, null, null)) + ""%"" + ""</td></tr><br><br>"");
+            html1.append(""<tr><td>Vamp. Absorb %</td><td>"" + (int) (player.getStatus().calcStat(Stats.ABSORB_DAMAGE_PERCENT, 0, null, null)) + ""%"" + ""</td></tr><br><br>"");
+            html1.append(""<tr><td>Critical Damage Resist</td><td>"" + (int) (1 - player.getStatus().calcStat(Stats.CRIT_VULN, 1, null, null)) * 100 + ""%"" + ""</td></tr><br><br>"");
+            final int atkCount = (int) (player.getStatus().calcStat(Stats.ATTACK_COUNT_MAX, 1, null, null));
+            html1.append(""<tr><td>Attack Count</td><td>"" + atkCount + ""</td></tr><br><br>"");
+            html1.append(""<tr><td>Attack AOE Angle</td><td>"" + (atkCount > 1 ? (int) (player.getStatus().calcStat(Stats.POWER_ATTACK_ANGLE, 120, null, null)) : ""N/A"") + ""</td></tr><br><br>"");
+            html1.append(""</table>"");
+            html1.append(""<center><button value=\""Refresh\"" action=\""bypass -h cubic_stats\"" width=64 height=14 back=\""L2UI_ch3.Btn1_normalOn\"" fore=\""L2UI_ch3.Btn1_normal\"">"");
+            html1.append(""<center><button value=\""Back\"" action=\""bypass -h cubic_chat cubic.htm\"" width=64 height=14 back=\""L2UI_ch3.Btn1_normalOn\"" fore=\""L2UI_ch3.Btn1_normal\"">"");
+            html1.append(""</body></html>"");
+
+            html.setHtml(html1.toString());
+            player.sendPacket(html);
+        }
+        //class change
+        if (command.equalsIgnoreCase(""upgradeclass""))
+        {
+            if(player.isDead() || player.isAlikeDead())
+            {player.sendMessage(""Invalid action"");
+                player.sendPacket(ActionFailed.STATIC_PACKET);
+                return;}
+
+            Cubic.sendClassChangeHTML(player);
+        }
+        //class change choose
+        if (command.startsWith(""upgradeclasschoose""))
+        {
+            if(player.isDead() || player.isAlikeDead())
+            {player.sendMessage(""Invalid action"");
+                player.sendPacket(ActionFailed.STATIC_PACKET);
+                return;}
+
+            if (player.isInCombat())
+            {
+                player.sendMessage(""Cannot use while in combat"");
+                return;
+            }
+            final int val = Integer.parseInt(command.substring(19));
+
+            final ClassId classId = player.getClassId();
+            final ClassId newClassId = ClassId.values()[val];
+
+            final int level = player.getStatus().getLevel();
+            final int jobLevel = classId.getLevel();
+            final int newJobLevel = newClassId.getLevel();
+
+            // Prevents changing to class not in same class tree
+            if (!newClassId.isChildOf(classId))
+                return;
+
+            // Prevents changing between same level jobs
+            if (newJobLevel != jobLevel + 1)
+                return;
+
+            // Check for player level
+            if (level < 20 && newJobLevel > 1)
+                return;
+            if (level < 40 && newJobLevel > 2)
+                return;
+            if (level < 76 && newJobLevel > 3)
+                return;
+            // -- Prevention ends
+
+            changeClass(player, val);
+            player.broadcastCharInfo();
+            player.broadcastUserInfo();
+
+            if (newJobLevel == 3)
+                player.sendPacket(SystemMessageId.THIRD_CLASS_TRANSFER);
+            else
+                player.sendPacket(SystemMessageId.CLASS_TRANSFER);
+
+            NpcHtmlMessage html = new NpcHtmlMessage(31228);
+            StringBuilder sb = new StringBuilder();
+            sb.append(""<html><body>"");
+            sb.append(""Class Upgrader:<br>"");
+            sb.append(""<br>"");
+            sb.append(""You have become a <font color=\""LEVEL\"">"" + PlayerData.getInstance().getClassNameById(player.getClassId().getId()) + ""</font>."");
+
+            if ((level >= 76 && newJobLevel < 3) || (level >= 40 && newJobLevel < 2))
+            {
+                sb.append(""<br><button value=\""Next Class\"" action=\""bypass -h cubic_upgradeclass\"" width=94 height=20 back=\""L2UI_ch3.Btn1_normalOn\"" fore=\""L2UI_ch3.Btn1_normal\"">"");
+            }
+            else
+                sb.append(""<br><button value=\""Welcome Page\"" action=\""bypass -h cubic_chat cubic.htm\"" width=94 height=20 back=\""L2UI_ch3.Btn1_normalOn\"" fore=\""L2UI_ch3.Btn1_normal\"">"");
+
+            sb.append(""</body></html>"");
+            html.setHtml(sb.toString());
+            player.sendPacket(html);
+        }
+        if(command.startsWith(""chat""))
+        {
+            if(player.isDead() || player.isAlikeDead())
+            {player.sendMessage(""Invalid action"");
+                player.sendPacket(ActionFailed.STATIC_PACKET);
+                return;}
+            NpcHtmlMessage html = new NpcHtmlMessage(0);
+            html.setFile((new StringBuilder()).append(""data/html/custom/PortableCubic/"").append(command.substring(5)).toString());
+            player.sendPacket(html);
+            player.sendPacket(ActionFailed.STATIC_PACKET);
+        }
+
+        //sell inventory items
+        if(command.equalsIgnoreCase(""sell""))
+        {
+            if(player.isDead() || player.isAlikeDead())
+            {player.sendMessage(""Invalid action"");
+                player.sendPacket(ActionFailed.STATIC_PACKET);
+                return;}
+
+            final List<ItemInstance> items = player.getInventory().getSellableItems();
+            player.setIsCubicBypass(true);
+            player.sendPacket(new SellList(player.getAdena(), items));
+        }
+        //Execute Multisell Store:
+        if(command.startsWith(""multi""))
+        {
+            if(player.isDead() || player.isAlikeDead())
+            {player.sendMessage(""Invalid action"");
+                player.sendPacket(ActionFailed.STATIC_PACKET);
+                return;}
+
+            player.setIsCubicBypass(true);
+            String name = command.substring(6);
+            MultisellData.getInstance().separateAndSend(name, player, null, false);
+        }
+
+        if(command.startsWith(""teleport""))
+        {
+            /**
+             * ADD YOUR TELEPORTER CUBIC CODE HERE
+             */
+        }
+    }
+
+
+    private static void changeClass(Player player, int val)
+    {
+        player.setClassId(val);
+
+        if (player.isSubClassActive())
+            player.getSubClasses().get(player.getClassIndex()).setClassId(player.getActiveClass());
+        else
+            player.setBaseClass(player.getActiveClass());
+    }
+
+    public static void sendClassChangeHTML(Player player)
+    {
+        NpcHtmlMessage html = new NpcHtmlMessage(1); //roy the cat default class master
+        StringBuilder sb = new StringBuilder();
+        sb.append(""<html><body>"");
+        sb.append(""Class Upgrader:<br>"");
+        sb.append(""<br>"");
+
+        final ClassId classId = player.getClassId();
+        final int level = player.getStatus().getLevel();
+        final int jobLevel = classId.getLevel();
+        final int newJobLevel = jobLevel + 1;
+
+        if ((level >= 20 && jobLevel == 0) || (level >= 40 && jobLevel == 1) || (level >= 76 && jobLevel == 2))
+        {
+            sb.append(""You can change your class to following:<br>"");
+
+            for (ClassId child : ClassId.values())
+                if (child.isChildOf(classId) && child.getLevel() == newJobLevel)
+                    sb.append(""<br><a action=\""bypass -h cubic_upgradeclasschoose "" + (child.getId()) + ""\""> "" + PlayerData.getInstance().getClassNameById(child.getId()) + ""</a>"");
+
+            sb.append(""<br>"");
+        }
+        else
+        {
+            switch (jobLevel)
+            {
+                case 0:
+                    sb.append(""You must reach lvl 20 to begin class change.<br>"");
+                    break;
+                case 1:
+                    sb.append(""You must reach lvl 40 to begin 2nd class change.<br>"");
+                    break;
+                case 2:
+                    sb.append(""You must reach lvl 76 to begin 3rd class change.<br>"");
+                    break;
+                case 3:
+                    sb.append(""There is no class change available for you anymore."");
+                    break;
+            }
+
+            sb.append(""<br>"");
+        }
+
+        sb.append(""<br><br>You can access this page from the Class Upgrade option of the Wondrous Cubic (F12)<br>"");
+        sb.append(""<br><button value=\""Welcome Page\"" action=\""bypass -h cubic_chat cubic.htm\"" width=94 height=20 back=\""L2UI_ch3.Btn1_normalOn\"" fore=\""L2UI_ch3.Btn1_normal\"">"");
+
+        sb.append(""</body></html>"");
+        html.setHtml(sb.toString());
+        player.sendPacket(html);
+    }
+}
\ No newline at end of file
Index: aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestSellItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestSellItem.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestSellItem.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestSellItem.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestSellItem.java	(date 1686987823780)
@@ -56,9 +56,17 @@
 		if (player == null)
 			return;
 		
-		final Npc merchant = (player.getTarget() instanceof Merchant || player.getTarget() instanceof MercenaryManagerNpc) ? (Npc) player.getTarget() : null;
+		/*final Npc merchant = (player.getTarget() instanceof Merchant || player.getTarget() instanceof MercenaryManagerNpc) ? (Npc) player.getTarget() : null;
 		if (merchant == null || !player.getAI().canDoInteract(merchant))
-			return;
+			return;*/
+
+		Npc merchant = null;
+		if(!player.isCubicBypass())
+		{
+			merchant = !(player.getTarget() instanceof Merchant) && !(player.getTarget() instanceof MercenaryManagerNpc) ? null : (Npc)player.getTarget();
+			if(merchant == null || !player.getAI().canDoInteract(merchant))
+				return;
+		}
 		
 		if (_listId > 1000000 && merchant.getTemplate().getNpcId() != _listId - 1000000)
 			return;
Index: aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/MultiSellChoose.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/MultiSellChoose.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/MultiSellChoose.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/MultiSellChoose.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/MultiSellChoose.java	(date 1687428231559)
@@ -68,13 +68,25 @@
 			player.setMultiSell(null);
 			return;
 		}
-		
-		final Folk folk = player.getCurrentFolk();
+
+		Folk folk = null ;
+		if(!player.isCubicBypass()) {
+
+			folk = player.getCurrentFolk();
+
+			if ((folk != null && !list.isNpcAllowed(folk.getNpcId())) || (folk == null && list.isNpcOnly()))
+			{
+				player.setMultiSell(null);
+				return;
+			}
+		}
+
+		/*final Folk folk = player.getCurrentFolk();
 		if ((folk != null && !list.isNpcAllowed(folk.getNpcId())) || (folk == null && list.isNpcOnly()))
 		{
 			player.setMultiSell(null);
 			return;
-		}
+		}*/
 		
 		if (folk != null && !player.getAI().canDoInteract(folk))
 		{
Index: aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkillInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkillInfo.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkillInfo.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkillInfo.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkillInfo.java	(date 1687426261191)
@@ -13,49 +13,61 @@
 {
 	private int _skillId;
 	private int _skillLevel;
-	
+
 	@Override
-	protected void readImpl()
-	{
+	protected void readImpl() {
 		_skillId = readD();
 		_skillLevel = readD();
 	}
-	
+
 	@Override
-	protected void runImpl()
-	{
+	protected void runImpl() {
 		if (_skillId <= 0 || _skillLevel <= 0)
 			return;
-		
+
 		final Player player = getClient().getPlayer();
 		if (player == null)
 			return;
-		
+
 		if (player.getClassId().getLevel() < 3 || player.getStatus().getLevel() < 76)
 			return;
-		
-		final Folk folk = player.getCurrentFolk();
+
+        /*final Folk folk = player.getCurrentFolk();
 		if (folk == null || !player.getAI().canDoInteract(folk))
-			return;
-		
+			return;*/
+
+		Folk folk = null;
+		if(!player.isCubicBypass()) {
+			folk = player.getCurrentFolk();
+			if(folk == null || !player.getAI().canDoInteract(folk))
+				return;
+		}
+
 		if (player.getSkillLevel(_skillId) >= _skillLevel)
 			return;
-		
+
 		final L2Skill skill = SkillTable.getInstance().getInfo(_skillId, _skillLevel);
 		if (skill == null)
 			return;
-		
-		if (!folk.getTemplate().canTeach(player.getClassId()))
-			return;
-		
-		final EnchantSkillNode esn = SkillTreeData.getInstance().getEnchantSkillFor(player, _skillId, _skillLevel);
+
+        /*if (!folk.getTemplate().canTeach(player.getClassId()))
+			return;*/
+
+		if(!player.isCubicBypass())
+		{
+			folk = player.getCurrentFolk();
+			if(folk == null || !folk.getTemplate().canTeach(player.getClassId()))
+				return;
+		}
+
+			final EnchantSkillNode esn = SkillTreeData.getInstance().getEnchantSkillFor(player, _skillId, _skillLevel);
 		if (esn == null)
 			return;
-		
+
 		final ExEnchantSkillInfo esi = new ExEnchantSkillInfo(_skillId, _skillLevel, esn.getSp(), esn.getExp(), esn.getEnchantRate(player.getStatus().getLevel()));
 		if (Config.ES_SP_BOOK_NEEDED && esn.getItem() != null)
 			esi.addRequirement(4, esn.getItem().getId(), esn.getItem().getValue(), 0);
-		
+
 		sendPacket(esi);
 	}
 }
\ No newline at end of file
Index: aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkill.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkill.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkill.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/clientpackets/RequestExEnchantSkill.java	(date 1686989297778)
@@ -38,9 +38,17 @@
 		if (player.getClassId().getLevel() < 3 || player.getStatus().getLevel() < 76)
 			return;
 		
-		final Folk folk = player.getCurrentFolk();
+		/*final Folk folk = player.getCurrentFolk();
 		if (folk == null || !player.getAI().canDoInteract(folk))
-			return;
+			return;*/
+
+		Folk folk = null;
+		if(!player.isCubicBypass())
+		{
+			folk = player.getCurrentFolk();
+			if(folk == null || !player.getAI().canDoInteract(folk))
+				return;
+		}
 		
 		if (player.getSkillLevel(_skillId) >= _skillLevel)
 			return;
@@ -92,6 +100,7 @@
 		player.sendPacket(new UserInfo(player));
 		
 		// Show enchant skill list.
+		assert folk != null;
 		folk.showEnchantSkillList(player);
 	}
 }
\ No newline at end of file
Index: aCis_gameserver/java/net/sf/l2j/gameserver/data/xml/MultisellData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/data/xml/MultisellData.java b/aCis_gameserver/java/net/sf/l2j/gameserver/data/xml/MultisellData.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/data/xml/MultisellData.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/data/xml/MultisellData.java	(date 1687426978082)
@@ -10,6 +10,7 @@
 
 import net.sf.l2j.gameserver.model.actor.Npc;
 import net.sf.l2j.gameserver.model.actor.Player;
+import net.sf.l2j.gameserver.model.actor.instance.Folk;
 import net.sf.l2j.gameserver.model.multisell.Entry;
 import net.sf.l2j.gameserver.model.multisell.Ingredient;
 import net.sf.l2j.gameserver.model.multisell.ListContainer;
@@ -92,8 +93,16 @@
 		if (template == null)
 			return;
 		
-		if ((npc != null && !template.isNpcAllowed(npc.getNpcId())) || (npc == null && template.isNpcOnly()))
-			return;
+		/*if ((npc != null && !template.isNpcAllowed(npc.getNpcId())) || (npc == null && template.isNpcOnly()))
+			return;*/
+
+		Folk folk = null ;
+		if(!player.isCubicBypass())
+		{
+			folk = player.getCurrentFolk();
+			if((folk == null || !template.isNpcAllowed(npc.getNpcId())) || (npc == null && template.isNpcOnly()))
+				return;
+		}
 		
 		final PreparedListContainer list = new PreparedListContainer(template, inventoryOnly, player, npc);
 		
"
9PUApLMt,Correct code,jaideep06,JSON,Thursday 22nd of June 2023 04:31:49 AM CDT,"{
  ""@context"": ""https://schema.org"",
  ""@graph"": {
    ""@type"": ""Article"",
    ""headline"": ""How Speech Shifts With Aspirations in SEA | Quantum Consumer Solutions"",
    ""description"": ""Read this article to explore how aspirations shape speech patterns in Southeast Asia. Discover the dynamic linguistic transformations reflecting cultural ambitions."",
    ""image"": {
      ""@type"": ""ImageObject"",
      ""url"": ""https://unsplash.com/photos/5kS-6zE1KYQ""
    },
    ""author"": {
      ""@type"": ""Person"",
      ""name"": ""Quantum Consumer Solutions""
    },
    ""publisher"": {
      ""@type"": ""Organization"",
      ""name"": ""Quantum Consumer Solutions"",
      ""logo"": {
        ""@type"": ""ImageObject"",
        ""url"": "" https://quantumcs.com/wp-content/uploads/2021/07/cropped-Quantum-Logo-Colour.png"",
        ""width"": ""512"",
        ""height"": ""512""
      }
    },
    ""datePublished"": ""2023-06-21"",
    ""dateModified"": ""2023-06-21""
  }
}"
W5ecz4sX,Free Virtual Private Servers | GO Markets,fxvnpro,PHP,Thursday 22nd of June 2023 04:23:00 AM CDT,https://www.fxvnpro.com/free-virtual-private-servers-go-markets/
bf4AAuHN,landlord_l_simp_chinese.yml,Aunst,YAML,Thursday 22nd of June 2023 03:43:36 AM CDT,"l_simp_chinese:
  open_landlord_tooltip: ""[open_landlord_tooltip_s]""
  open_landlord_tooltip_open: ""§Y点击打开Landlord菜单§!""
  open_landlord_tooltip_close: ""§Y点击关闭Landlord菜单§!""

  CHECK_CORE_STATE_DESC: ""§Y计算费用§!\n\n£population_icon §Y[core_state_cost_game_rule]K人口§! / £pol_power_icon\n如果拥有宣称，费用将§Y减半§!。""
  CORE_STATE_DESC: ""§Y核心地区§!\n[core_state_claimed]为该地区制造核心将花费£pol_power_icon£§Y[?ROOT.cost_to_core]§!。\n[core_state_button_desc]""

  core_state_req_not_owned_peace: ""--------------------------------------------\n§R未拥有此地区！§!""
  core_state_req_not_owned_war: ""--------------------------------------------\n§R未控制此地区！§!""
  core_state_req_already_cored: ""--------------------------------------------\n§R此地区已经是你的核心地区！§!""
  core_state_req_no_compliance_100: ""--------------------------------------------\n§R此地区的顺从度小于100%！§!""
  core_state_req_no_compliance_80: ""--------------------------------------------\n§R此地区的顺从度小于80%！§!""
  core_state_req_no_compliance_60: ""--------------------------------------------\n§R此地区的顺从度小于60%！§!""
  core_state_req_no_compliance_40: ""--------------------------------------------\n§R此地区的顺从度小于40！§!""
  core_state_req_no_compliance_20: ""--------------------------------------------\n§R此地区的顺从度小于20%！§!""
  core_state_req_no_pp: ""--------------------------------------------\n§R政治点数不足！§!""
  core_state_req_no_claim: ""--------------------------------------------\n§R未拥有此地区的宣称！§!""

  CWC_FORMULA_PP_COST_GROUP: ""Core With Compliance++""
  CWC_FORMULA_PP_COST: ""制造核心花费""
  CWC_COMP_COST: ""顺从度需求""
  CWC_OCCUPY: ""占领/完全控制""
  CWC_CLAIM_FOR_CORE: ""仅能核心化有宣称的地区""

  core_state_claimed_true: ""§C拥有此地区的宣称，因此花费减半。§!\n""

  CWC_FORMULA_PP_COST_5K_NAME: ""§Y人口§! / §Y5K§!""
  CWC_FORMULA_PP_COST_10K_NAME: ""§Y人口§! / §Y10K§!""
  CWC_FORMULA_PP_COST_20K_NAME: ""§Y人口§! / §Y20K§!""
  CWC_FORMULA_PP_COST_40K_NAME: ""§Y人口§! / §Y40K§!""

  CWC_FORMULA_PP_COST_5K_DESC: ""每£manpower_icon2 §Y1K§!人口大约需要£pol_power_icon2 §Y4§!。\n\n£population_icon §Y5K人口§! / £pol_power_icon2\n--------------------------------------\n§g制造核心非常昂贵。§!""
  CWC_FORMULA_PP_COST_10K_DESC: ""每£manpower_icon2 §Y1K§!人口大约需要£pol_power_icon2 §Y2§!。\n\n£population_icon §Y10K人口§! / £pol_power_icon2\n--------------------------------------\n§g制造核心费用高昂。§!""
  CWC_FORMULA_PP_COST_20K_DESC: ""每£manpower_icon2 §Y1K§!人口大约需要£pol_power_icon2 §Y1§!。\n\n£population_icon §Y20K人口§! / £pol_power_icon2\n--------------------------------------\n§g制造核心费用低廉。§!""
  CWC_FORMULA_PP_COST_40K_DESC: ""每£manpower_icon2 §Y1K§!人口大约需要£pol_power_icon2 §Y0.5§!。\n\n£population_icon §Y10K人口§! / £pol_power_icon2\n--------------------------------------\n§g制造核心非常便宜。§!""

  CWC_COMP_COST_20_NAME: ""§C20%§!顺从度""
  CWC_COMP_COST_40_NAME: ""§C40%§!顺从度""
  CWC_COMP_COST_60_NAME: ""§C60%§!顺从度""
  CWC_COMP_COST_80_NAME: ""§C80%§!顺从度""
  CWC_COMP_COST_100_NAME: ""§C100%§!顺从度""

  CWC_COMP_COST_20_DESC: ""制造核心需要£compliance_icon2 §C20%§!""
  CWC_COMP_COST_40_DESC: ""制造核心需要£compliance_icon2 §C40%§!""
  CWC_COMP_COST_60_DESC: ""制造核心需要£compliance_icon2 §C60%§!""
  CWC_COMP_COST_80_DESC: ""制造核心需要£compliance_icon2 §C80%§!""
  CWC_COMP_COST_100_DESC: ""制造核心需要£compliance_icon2 §C100%§!""

  CWC_OCCUPY_PEACE_NAME: ""完全控制""
  CWC_OCCUPY_PEACE_DESC: ""仅在§t完全控制§!地区时才能制造核心。""
  CWC_OCCUPY_WAR_NAME: ""占领""
  CWC_OCCUPY_WAR_DESC: ""也能制造所§t占领§!地区的核心。""

  CWC_NO_CLAIM_FOR_CORE_NAME: ""无需宣称""
  CWC_NO_CLAIM_FOR_CORE_DESC: ""在制造核心时不需要拥有该地区的§t宣称§!。""
  CWC_CLAIM_FOR_CORE_NAME: ""需要宣称""
  CWC_CLAIM_FOR_CORE_DESC: ""在制造核心时需要拥有该地区的§t宣称§!。""



  CLAIM_STATE_DESC: ""§Y宣称地区§!\n需要花费£pol_power_icon£ §Y[?ROOT.cost_to_claim]§!。\n[claim_state_button_desc]""
  core_state_cost_not_checked: ""--------------------------------------------\n§R尚未检查花费！§!""
  claim_state_already_owned: ""--------------------------------------------\n§R无法宣称已经拥有的地区！§!""
  claim_state_req_already_claimed: ""--------------------------------------------\n§R已经宣称了该地区！§!""

  REVOKE_CORE_DESC: ""§Y消除核心§!\n移除你在该地区的核心\n[revoke_core_button_desc]""
  revoke_core_not_core: ""--------------------------------------------\n§该地区不是你的核心！§!""
  revoke_core_capital: ""--------------------------------------------\n§R不能消除首都的核心！§!""
  revoke_core_confirmation: ""你确定要§R消除§!位于§Y[?ROOT.landlord_state.GetName]§!的核心吗？""

  REVOKE_CLAIM_DESC: ""§Y清除宣称§!\n移除你在该地区的宣称\n[revoke_claim_button_desc]""
  revoke_claim_no_claim: ""--------------------------------------------\n§R未宣称该地区！§!""
  revoke_claim_confirmation: ""你确定要§R消除§!在§Y[?ROOT.landlord_state.GetName]§!的宣称吗？""

  RETURN_STATE_DESC: ""§Y归还地区§!\n将该地区归还给拥有该地区核心/宣称的国家。也会消除你在该地区的核心。""
  return_state_confirmation: ""选择归还国家§Y[?ROOT.landlord_state.GetName]§!：""
  return_state_selected: ""已选择的国家：[?ROOT.landlord_selected_country]"""
bqg5sP3n,Review GO Markets,fxvnpro,PHP,Thursday 22nd of June 2023 03:32:27 AM CDT,https://www.fxvnpro.com/review-go-markets/
JTJY1UQq,Lovelace Irrigazione,Tommy12345678,YAML,Thursday 22nd of June 2023 03:18:20 AM CDT,"#========================================================================================================================#
#========================================================================================================================#
#--------------------------------------     IRRIGAZIONE    -------------------------------------------------#
#========================================================================================================================#
#========================================================================================================================#


path: irrigazione
icon: mdi:water-pump


cards:


  - type: custom:banner-card
    style: |
      :host {
        --banner-card-heading-size: 0.9em;
      }
      ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
    heading: """"
    row_size: 1
    entities:
      




  - type: picture-elements                         #  ------------ SFONDO
    image: /local/irrigazione_new/sfondo_new.png
    card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
    elements:



# ------------------------------------------------------------- HEADER  --------------------------------------------------- #

      - type: conditional                            # STOP IRRIGAZIONE
        conditions:
          - entity: input_boolean.stop_irrigazione
            state: ""on""
        elements:
          - type: image
            entity: input_boolean.stop_irrigazione
            title: null
            tap_action:
              confirmation:
                text: INTERROMPERE irrigazione ?
              action: call-service
              service: input_boolean.turn_off
              service_data:
                entity_id: input_boolean.stop_irrigazione
            image: /local/irrigazione_new/stop.png
            style:
              top: 8%
              left: 50%
              width: 12%  


      - type: conditional                           # ERBA AUTO
        conditions:
          - entity: input_boolean.erba_manual_run
            state: ""off""
          - entity: input_boolean.siepe_manual_run
            state: ""off""
          - entity: script.run_a_cycle_siepe
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
        elements:
          - type: image                 
            entity: input_boolean.erba_automatico              
            title: null
            tap_action:
              action: toggle
            image: /local/irrigazione_new/erba.png
            style:
              top: 5%
              left: 11%
              width: 10%  

      - type: conditional                           # PROSSIMA IRRIGAZIONE ERBA
        conditions:
          - entity: input_boolean.siepe_manual_run
            state: ""off""
          - entity: input_boolean.erba_manual_run
            state: ""off""
          - entity: script.run_a_cycle_erba
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
        elements:
          - type: state-label              
            entity: sensor.erba_next_run_time                  
            style:
              top: 19%
              left: 20%
              color: ""#f0cc3e""
            tap_action:
              action: none


      - type: conditional                           # ERBA MANUALE
        conditions:
          - entity: input_boolean.erba_auto_attivo
            state: ""off""
          - entity: input_boolean.siepe_auto_attivo
            state: ""off""
          - entity: input_boolean.siepe_manual_run
            state: ""off""
          - entity: script.run_a_cycle_siepe
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
        elements:
          - type: image                 
            entity: input_boolean.erba_manual_run            
            title: null
            tap_action:
              confirmation:
                text: Avvio Manuale Erba ?
              action: toggle
            state_filter:
              ""on"": brightness(150%) saturate(1.3)
              ""off"": brightness(70%) saturate(0)
            image: /local/irrigazione_new/manuale.png
            style:
              top: 6%
              left: 27%
              width: 8%  


      - type: conditional                           # ERBA SINGOLA ZONA
        conditions:
          - entity: sensor.singola_zona_attiva
            state: ""erba""
        elements:
          - type: image                 
            title: null
            tap_action:
              action: none
            image: /local/irrigazione_new/sprinkler2.png
            style:
              top: 9%
              left: 27%
              width: 8%  


      - type: conditional                           # SIEPE AUTO
        conditions:
          - entity: input_boolean.siepe_manual_run
            state: ""off""
          - entity: input_boolean.erba_manual_run
            state: ""off""
          - entity: script.run_a_cycle_erba
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
        elements:
          - type: image                 
            entity: input_boolean.siepe_automatico              
            title: null
            tap_action:
              action: toggle
            image: /local/irrigazione_new/siepe.png
            style:
              top: 6%
              left: 90%
              width: 12%  

      - type: conditional                           # PROSSIMA IRRIGAZIONE SIEPE
        conditions:
          - entity: input_boolean.siepe_manual_run
            state: ""off""
          - entity: input_boolean.erba_manual_run
            state: ""off""
          - entity: script.run_a_cycle_erba
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
        elements:
          - type: state-label              
            entity: sensor.siepe_next_run_time                  
            style:
              top: 19%
              left: 82%
              color: ""#f0cc3e""
            tap_action:
              action: none




      - type: conditional                           # SIEPE MANUALE
        conditions:
          - entity: input_boolean.erba_auto_attivo
            state: ""off""
          - entity: input_boolean.siepe_auto_attivo
            state: ""off""
          - entity: input_boolean.erba_manual_run
            state: ""off""
          - entity: script.run_a_cycle_erba
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
        elements:
          - type: image                 
            entity: input_boolean.siepe_manual_run            
            title: null
            tap_action:
              confirmation:
                text: Avvio Manuale Siepe ?
              action: toggle
            state_filter:
              ""on"": brightness(150%) saturate(1.3)
              ""off"": brightness(70%) saturate(0)
            image: /local/irrigazione_new/manuale.png
            style:
              top: 6%
              left: 75%
              width: 8%  

      - type: conditional                           # SIEPE SINGOLA ZONA
        conditions:
          - entity: sensor.singola_zona_attiva
            state: ""siepe""
        elements:
          - type: image                 
            title: null
            tap_action:
              action: none
            image: /local/irrigazione_new/sprinkler2.png
            style:
              top: 9%
              left: 75%
              width: 8%  


      - type: conditional                            # PIOVE
        conditions:
          - entity: input_boolean.stop_irrigazione
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
        elements:
          - type: image
            entity: input_boolean.oggi_ha_piovuto
            title: null
            state_filter:
              ""off"": brightness(90%) saturate(1)
              ""on"": brightness(100%) saturate(1)
            tap_action:
              confirmation:
                text: Confermi che oggi PIOVE ?
              action: call-service
              service: input_boolean.turn_on
              service_data:
                entity_id: input_boolean.oggi_ha_piovuto
            image: /local/irrigazione_new/piove2.png
            style:
              top: 52%
              left: 65%
              width: 9%  



      - type: conditional                            # RIPARTI DA OGGI
        conditions:
          - entity: input_boolean.stop_irrigazione
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
        elements:
          - type: image
            entity: input_boolean.riparti_da_oggi
            title: null
            state_filter:
              ""off"": brightness(90%) saturate(1)
              ""on"": brightness(100%) saturate(1)
            tap_action:
              confirmation:
                text: Riparti da OGGI ?
              action: call-service
              service: input_boolean.turn_on
              service_data:
                entity_id: input_boolean.riparti_da_oggi
            image: /local/irrigazione_new/today.png
            style:
              top: 52%
              left: 38%
              width: 12%  


      - type: conditional                           # BASILICO
        conditions:
          - entity: input_boolean.erba_auto_attivo
            state: ""off""
          - entity: input_boolean.siepe_auto_attivo
            state: ""off""
          - entity: input_boolean.erba_manual_run
            state: ""off""
          - entity: script.run_a_cycle_erba
            state: ""off""
          - entity: sensor.singola_zona_attiva
            state: 'off'
          - entity: input_boolean.stop_irrigazione
            state: 'off'
        elements:
          - type: image                 
            entity: input_boolean.basilico_automatico            
            title: null
            tap_action:
              action: toggle
            image: /local/irrigazione_new/basilico.png
            style:
              top: 7%
              left: 50%
              width: 10%  





# ------------------------------------------------------------- ERBA ZONA 1 --------------------------------------------------- #

      - type: image                             # SPRINKLER 1
        title: null
        tap_action:
          confirmation:
            text: Avvio ERBA Zona 1 ?
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.erba1_manual_run
        image: /local/irrigazione_new/sprinkler.png
        style:
          top: 71%
          left: 8%
          width: 7% 

      - type: conditional                            # BADGE ZONA 1
        conditions:
          - entity: input_boolean.stop_irrigazione
            state: ""off""
          - entity: input_boolean.erba_zone2_duration
            state: ""off""
          - entity: input_boolean.erba_zone3_duration
            state: ""off""
          - entity: input_boolean.siepe_zone1_duration
            state: ""off""
          - entity: input_boolean.siepe_zone2_duration
            state: ""off""
        elements:
         - type: state-badge
           entity: sensor.erba_zone1_badge
           title: null
           tap_action:
             action: call-service
             service: homeassistant.toggle
             service_data:
               entity_id: input_boolean.erba_zone1_duration
           style:
             top: 76%
             left: 2%
             width: 5%
             color: rgba(0,0,0,0)
             transform: scale(0.7,0.7)
             --label-badge-text-color: rgb(60, 66, 92)
             --label-badge-background-color: rgb(195, 233, 247)

      - type: conditional                            # ZONA 1 ATTIVA
        conditions:
          - entity: sensor.erba_zone1_attiva
            state: ""on""
        elements:
          - type: image
            title: null
            tap_action:
              action: none
            image: /local/irrigazione_new/drops_dx.png
            style:
              top: 64%
              left: 22%
              width: 26% 


# ------------------------------------------------------------- ERBA ZONA 2 --------------------------------------------------- #

      - type: image                             # SPRINKLER 2
        title: null
        tap_action:
          confirmation:
            text: Avvio ERBA Zona 2 ?
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.erba2_manual_run
        image: /local/irrigazione_new/sprinkler.png
        style:
          top: 92%
          left: 52%
          width: 7% 

      - type: conditional                            # BADGE ZONA 2
        conditions:
          - entity: input_boolean.stop_irrigazione
            state: ""off""
          - entity: input_boolean.erba_zone1_duration
            state: ""off""
          - entity: input_boolean.erba_zone3_duration
            state: ""off""
          - entity: input_boolean.siepe_zone1_duration
            state: ""off""
          - entity: input_boolean.siepe_zone2_duration
            state: ""off""
        elements:
         - type: state-badge
           entity: sensor.erba_zone2_badge
           title: null
           tap_action:
             action: call-service
             service: homeassistant.toggle
             service_data:
               entity_id: input_boolean.erba_zone2_duration
           style:
             top: 68%
             left: 46%
             width: 5%
             color: rgba(0,0,0,0)
             transform: scale(0.7,0.7)
             --label-badge-text-color: rgb(60, 66, 92)
             --label-badge-background-color: rgb(195, 233, 247)

      - type: conditional                            # ZONA 2 ATTIVA
        conditions:
          - entity: sensor.erba_zone2_attiva
            state: ""on""
        elements:
          - type: image
            title: null
            tap_action:
              action: none
            image: /local/irrigazione_new/drops_2.png
            style:
              top: 87%
              left: 52%
              width: 45%  

# ------------------------------------------------------------- ERBA ZONA 3 --------------------------------------------------- #


      - type: image                                # SPRINKLER 3
        title: null
        tap_action:
          confirmation:
            text: Avvio ERBA Zona 3 ?
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.erba3_manual_run
        image: /local/irrigazione_new/sprinkler.png
        style:
          top: 71%
          left: 93%
          width: 7% 

      - type: conditional                            # BADGE ZONA 3
        conditions:
          - entity: input_boolean.stop_irrigazione
            state: ""off""
          - entity: input_boolean.erba_zone1_duration
            state: ""off""
          - entity: input_boolean.erba_zone2_duration
            state: ""off""
          - entity: input_boolean.siepe_zone1_duration
            state: ""off""
          - entity: input_boolean.siepe_zone2_duration
            state: ""off""
        elements:
         - type: state-badge
           entity: sensor.erba_zone3_badge
           title: null
           tap_action:
             action: call-service
             service: homeassistant.toggle
             service_data:
               entity_id: input_boolean.erba_zone3_duration
           style:
             top: 76%
             left: 87%
             width: 5%
             color: rgba(0,0,0,0)
             transform: scale(0.7,0.7)
             --label-badge-text-color: rgb(60, 66, 92)
             --label-badge-background-color: rgb(195, 233, 247)

      - type: conditional                            # ZONA 3 ATTIVA
        conditions:
          - entity: sensor.erba_zone3_attiva
            state: ""on""
        elements:
          - type: image
            title: null
            tap_action:
              action: none
            image: /local/irrigazione_new/drops_sx.png
            style:
              top: 65%
              left: 78%
              width: 25%  


# ------------------------------------------------------------- SIEPE ZONA 1 --------------------------------------------------- #

      - type: image                                # SIEPE ZONA 1
        entity: sensor.siepe_zone1_attiva             
        title: null
        tap_action:
          confirmation:
            text: Avvio SIEPE Zona 1 ?
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.siepe1_manual_run
        state_filter:
          ""off"": brightness(100%) saturate(0)
          ""on"": brightness(150%) saturate(1.3)
        image: /local/irrigazione_new/drops.png
        style:
          top: 36%
          left: 14%
          width: 10%         

      - type: conditional                            # BADGE ZONA 1
        conditions:
          - entity: input_boolean.stop_irrigazione
            state: ""off""
          - entity: input_boolean.erba_zone1_duration
            state: ""off""
          - entity: input_boolean.erba_zone2_duration
            state: ""off""
          - entity: input_boolean.erba_zone3_duration
            state: ""off""
          - entity: input_boolean.siepe_zone2_duration
            state: ""off""
        elements:
         - type: state-badge
           entity: sensor.siepe_zone1_badge
           title: null
           tap_action:
             action: call-service
             service: homeassistant.toggle
             service_data:
               entity_id: input_boolean.siepe_zone1_duration
           style:
             top: 25%
             left: 22%
             width: 5%
             color: rgba(0,0,0,0)
             transform: scale(0.7,0.7)
             --label-badge-text-color: rgb(60, 66, 92)
             --label-badge-background-color: rgb(195, 233, 247)

# ------------------------------------------------------------- SIEPE ZONA 2 --------------------------------------------------- #


      - type: image                                # SIEPE ZONA 2
        entity: sensor.siepe_zone2_attiva           
        title: null
        tap_action:
          confirmation:
            text: Avvio SIEPE Zona 2 ?
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.siepe2_manual_run
        state_filter:
          ""off"": brightness(100%) saturate(0)
          ""on"": brightness(150%) saturate(1.3)
        image: /local/irrigazione_new/drops.png
        style:
          top: 36%
          left: 88%
          width: 10%         

      - type: conditional                            # BADGE ZONA 2
        conditions:
          - entity: input_boolean.stop_irrigazione
            state: ""off""
          - entity: input_boolean.erba_zone1_duration
            state: ""off""
          - entity: input_boolean.erba_zone2_duration
            state: ""off""
          - entity: input_boolean.erba_zone3_duration
            state: ""off""
          - entity: input_boolean.siepe_zone1_duration
            state: ""off""
        elements:
         - type: state-badge
           entity: sensor.siepe_zone2_badge
           title: null
           tap_action:
             action: call-service
             service: homeassistant.toggle
             service_data:
               entity_id: input_boolean.siepe_zone2_duration
           style:
             top: 25%
             left: 68%
             width: 5%
             color: rgba(0,0,0,0)
             transform: scale(0.7,0.7)
             --label-badge-text-color: rgb(60, 66, 92)
             --label-badge-background-color: rgb(195, 233, 247)







# ------------------------------------------------------------- PERCENTUALE - DURATA ZONE  - TIMER - DATE   --------------------------------------- #

  


  - type: conditional
    conditions:                                          # TIMER SIEPE ATTIVA
      - entity: timer.siepe_zone_duration
        state_not: ""idle""
    card:
      type: entities
      show_header_toggle: false
      card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
      entities:
        - entity: timer.siepe_zone_duration
          type: custom:timer-bar-card
          name: Timer 
          icon: none
          tap_action:
            action: none


  - type: conditional                             # TIMER  ERBA ATTIVA
    conditions:
      - entity: input_boolean.erba_running
        state: ""on""
    card:
      type: entities
      show_header_toggle: false
      card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
      entities:
        - entity: timer.erba_zone_duration
          type: custom:timer-bar-card
          name: Timer
          icon: none
          tap_action:
            action: none

  - type: conditional                             # TIMER  BASILICO ATTIVO
    conditions:
      - entity: input_boolean.basilico_running
        state: ""on""
    card:
      type: entities
      show_header_toggle: false
      card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
      entities:
        - entity: timer.basilico
          type: custom:timer-bar-card
          name: Basilico
          icon: none
          tap_action:
            action: none
  

  - type: conditional                      # ERBA ZONA 1
    conditions:
      - entity: input_boolean.erba_zone1_duration
        state: ""on""
      - entity: input_boolean.stop_irrigazione
        state: ""off""
    card:
      type: entities
      show_header_toggle: false
      card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
      entities:
        - entity: input_number.erba_zone1_duration
          icon: mdi:timer-outline
          name: ERBA Zona 1

  - type: conditional                      # ERBA ZONA 2
    conditions:
      - entity: input_boolean.erba_zone2_duration
        state: ""on""
      - entity: input_boolean.stop_irrigazione
        state: ""off""
    card:
      type: entities
      show_header_toggle: false
      card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
      entities:
        - entity: input_number.erba_zone2_duration
          icon: mdi:timer-outline
          name: ERBA Zona 2

  - type: conditional                      # ERBA ZONA 3
    conditions:
      - entity: input_boolean.erba_zone3_duration
        state: ""on""
      - entity: input_boolean.stop_irrigazione
        state: ""off""
    card:
      type: entities
      show_header_toggle: false
      card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
      entities:
        - entity: input_number.erba_zone3_duration
          icon: mdi:timer-outline
          name: ERBA Zona 3

  - type: conditional                      # SIEPE ZONA 1
    conditions:
      - entity: input_boolean.siepe_zone1_duration
        state: ""on""
      - entity: input_boolean.stop_irrigazione
        state: ""off""
    card:
      type: entities
      show_header_toggle: false
      card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
      entities:
        - entity: input_number.siepe_zone1_duration
          icon: mdi:timer-outline
          name: SIEPE Zona 1

  - type: conditional                      # SIEPE ZONA 2
    conditions:
      - entity: input_boolean.siepe_zone2_duration
        state: ""on""
      - entity: input_boolean.stop_irrigazione
        state: ""off""
    card:
      type: entities
      show_header_toggle: false
      card_mod:
      style: |
        ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
      entities:
        - entity: input_number.siepe_zone2_duration
          icon: mdi:timer-outline
          name: SIEPE Zona 2

  
  
  

# -------------------------------------------------------------   SETTAGGI   --------------------------------------------------- #


  - type: custom:tabbed-card
    options:
      defaultTabIndex: 0
    styles: # global styles applied to all tabs
      --mdc-tab-height: 44px
      --mdc-theme-primary: '#22d640'
      --mdc-tab-text-label-color-default: '#869689'
      --mdc-typography-button-font-size: 13px
    tabs:
      - card:
          type: entities
          entities:
            - entity: input_datetime.pioggia_ultima
              type: custom:multiple-entity-row
              name: Ultima Pioggia
              icon: mdi:water
            - entity: input_datetime.erba_ultimo_avvio_auto
              type: custom:multiple-entity-row
              name: Ultimo Auto
              icon: mdi:water
            - entity: input_number.erba_percent
              icon: mdi:percent
              name: Percentuale
            - entity: input_datetime.erba_prossima_data_auto
              type: custom:multiple-entity-row
              icon: mdi:timer-outline
              name: Prox Auto
            - entity: input_number.erba_watering_days
              name: Frequenza
              icon: mdi:numeric
            - type: divider
            - entity: input_datetime.erba_prossimo_avviso
              type: custom:multiple-entity-row
              icon: mdi:bell-badge-outline
              name: Orario Notifica        
        attributes:
          label: Erba

      - card:
          type: entities
          entities:
            - entity: input_datetime.pioggia_ultima
              type: custom:multiple-entity-row
              name: Ultima Pioggia
              icon: mdi:water
            - entity: input_datetime.siepe_ultimo_avvio_auto
              type: custom:multiple-entity-row
              name: Ultimo Auto
              icon: mdi:water
            - entity: input_number.siepe_percent
              icon: mdi:percent
              name: Percentuale
            - entity: input_datetime.siepe_prossima_data_auto
              type: custom:multiple-entity-row
              icon: mdi:timer-outline
              name: Prox Auto       
            - entity: input_number.siepe_watering_days
              name: Frequenza
              icon: mdi:percent
            - type: divider
            - entity: input_datetime.siepe_prossimo_avviso
              type: custom:multiple-entity-row
              icon: mdi:bell-badge-outline
              name: Orario Notifica
        attributes:
          label: Siepe


      - card:
          type: entities
          entities:
            - entity: input_datetime.pioggia_ultima
              type: custom:multiple-entity-row
              name: Ultima Pioggia
              icon: mdi:water
            - entity: input_boolean.basilico_automatico
              name: Auto
              icon: mdi:percent
            - entity: input_number.basilico_durata
              icon: mdi:percent
              name: Durata
            - entity: input_number.basilico_frequenza
              icon: mdi:percent
              name: Frequenza
            - entity: input_datetime.basilico_orario1
              type: custom:multiple-entity-row
              icon: mdi:timer-outline
              name: Orario 1
            - entity: input_datetime.basilico_orario2
              type: custom:multiple-entity-row
              icon: mdi:timer-outline
              name: Orario 2
            - entity: input_datetime.basilico_orario3
              type: custom:multiple-entity-row
              icon: mdi:timer-outline
              name: Orario 3
            - entity: input_datetime.basilico_orario4
              type: custom:multiple-entity-row
              icon: mdi:timer-outline
              name: Orario 4      
            - entity: input_boolean.basilico_manuale
              name: Manuale
              icon: mdi:percent 
        attributes:
          label: Basilico






# -------------------------------------------------------------   CALENDARI   --------------------------------------------------- #



  - type: custom:tabbed-card
    options:
      defaultTabIndex: 0
    styles: # global styles applied to all tabs
      --mdc-tab-height: 50px
      --mdc-theme-primary: '#22d640'
      --mdc-tab-text-label-color-default: '#869689'
      --mdc-typography-button-font-size: 14px
    tabs:
      - card:
          type: custom:atomic-calendar-revive
          defaultMode: Calendar
          showColors: true
          name: """"
          nameColor: 'green'
          # refreshInterval: 600
          # dimFinishedEvents: false
          entities:
          #   - type: Icon1
            - entity: calendar.irrigazione_last
              allowlist: 'ERBA'
              icon: mdi:check-circle-outline
              color: 'lime'
            - entity: calendar.irrigazione_last
              allowlist: 'PIOVE'
              icon: mdi:water
              color: 'deepskyblue'
        attributes:
          label: Erba  

      - card:
          type: custom:atomic-calendar-revive
          defaultMode: Calendar
          showColors: true
          name: """"
          # refreshInterval: 600
          # dimFinishedEvents: false
          entities:
          #   - type: Icon1
            - entity: calendar.irrigazione_last
              allowlist: ""SIEPE""
              icon: mdi:check-circle-outline
              color: ""lime""
          #   - type: Icon2
            - entity: calendar.irrigazione_last
              allowlist: ""PIOVE""
              icon: mdi:water
              color: ""deepskyblue""  
        attributes:
          label: Siepe






# -------------------------------------------------------------   SETTINGS   --------------------------------------------------- #






  - type: custom:banner-card
    style: |
      :host {
        --banner-card-heading-size: 0.7em;
      }
      ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
    heading: """"
    row_size: 1
    entities:


 # -------------------------------------------------------------   VALVOLE   --------------------------------------------------- #               

  - type: picture-elements                         
    image: /local/irrigazione_new/sfondo_valvole.png
    elements:
      - type: image
        entity: switch.siepe_1
        title: null
        tap_action:
          action: toggle
        state_filter:
          ""on"": brightness(100%) saturate(1)
          ""off"": brightness(70%) saturate(0)
        image: /local/irrigazione_new/valvola.png
        style:
          top: 50%
          left: 20%
          width: 10%      
      - type: image
        entity: switch.siepe_2
        title: null
        tap_action:
          action: toggle
        state_filter:
          ""on"": brightness(100%) saturate(1)
          ""off"": brightness(70%) saturate(0)
        image: /local/irrigazione_new/valvola.png
        style:
          top: 50%
          left: 40%
          width: 10%  
      - type: image
        entity: switch.siepe_3
        title: null
        tap_action:
          action: toggle
        state_filter:
          ""on"": brightness(100%) saturate(1)
          ""off"": brightness(70%) saturate(0)
        image: /local/irrigazione_new/valvola.png
        style:
          top: 50%
          left: 60%
          width: 10%  
      - type: image
        entity: switch.neutro_irrigazione
        title: null
        tap_action:
          action: toggle
        state_filter:
          ""on"": brightness(100%) saturate(1)
          ""off"": brightness(70%) saturate(0)
        image: /local/irrigazione_new/valvola.png
        style:
          top: 50%
          left: 80%
          width: 10%  


  - type: custom:banner-card
    style: |
      :host {
        --banner-card-heading-size: 0.9em;
      }
      ha-card {background: transparent; border-style: none; border: 0px; box-shadow: none;}
    heading: """"
    row_size: 1
    entities:"
L3x3G3tG,Package Irrigazione,Tommy12345678,YAML,Thursday 22nd of June 2023 03:16:01 AM CDT,"#===================================================================================#
#-------------------------------    INPUT BOOLEAN ----------------------------------#
#===================================================================================#

input_boolean:

  irrigazione_periodo:

  basilico_automatico:
  basilico_running:
  basilico_manuale:

  siepe_automatico:
    name: Automatico
    icon: mdi:pipe

  erba_automatico:
    name: Automatico
    icon: mdi:pipe

  siepe_running:
    name: Siepe running
    #initial: off

  erba_running:
    name: Erba running
    #initial: off

  siepe_manual_run:
    name: Avvia Ciclo
    initial: off

  erba_manual_run:
    name: Avvia Ciclo
    initial: off

  stop_irrigazione:
    name: STOP
    icon: mdi:alert-octagon
    initial: off

  bypass_stop:

  oggi_ha_piovuto:
    name: Oggi PIOVE
    icon: mdi:weather-rainy
    initial: off

  erba_zone1_duration:
  erba_zone2_duration:
  erba_zone3_duration:
  siepe_zone1_duration:
  siepe_zone2_duration:

  erba_auto_attivo:
  siepe_auto_attivo:


  siepe1_manual_run:
  siepe2_manual_run:
  erba1_manual_run:
  erba2_manual_run:
  erba3_manual_run:

  riparti_da_oggi:
    initial: off
    




#===================================================================================#
#------------------------------   INPUT NUMBER    ----------------------------------#
#===================================================================================#

input_number:

  basilico_durata:
    min: 1
    max: 10
    step: 1

  basilico_frequenza:
    min: 1
    max: 4
    step: 1
  
  siepe_watering_days:
    name: Freq Siepe
    min: 1
    max: 4
    step: 1
    #initial: 40

  erba_watering_days:
    name: Freq Erba
    min: 1
    max: 3
    step: 1
    #initial: 40

  siepe_zone1_duration:
    name: Zona 1
    min: 1
    max: 59
    step: 1
    #initial: 40
    icon: mdi:camera-timer

  siepe_zone2_duration:
    name: Zona 2
    min: 1
    max: 59
    step: 1
    #initial: 40
    icon: mdi:camera-timer

  erba_zone1_duration:
    name: Zona 1
    min: 1
    max: 25
    step: 1
    #initial: 15
    icon: mdi:camera-timer

  erba_zone2_duration:
    name: Zona 2
    min: 1
    max: 25
    step: 1
    #initial: 10
    icon: mdi:camera-timer

  erba_zone3_duration:
    name: Zona 3
    min: 1
    max: 25
    step: 1
    #initial: 10
    icon: mdi:camera-timer

  erba_percent:
    name: Percent
    min: 40
    max: 100
    step: 5
   #initial: 100
 
  siepe_percent:
    name: Percent
    min: 40
    max: 100
    step: 5
    #initial: 100

#===================================================================================#
#------------------------------   INPUT DATETIME  ----------------------------------#
#===================================================================================#

input_datetime:

  basilico_orario1:
    has_date: false
    has_time: true
    
  basilico_orario2:
    has_date: false
    has_time: true

  basilico_orario3:
    has_date: false
    has_time: true
    
  basilico_orario4:
    has_date: false
    has_time: true

  pioggia_ultima:
    name: ""Inserisci Data""
    has_date: true
    has_time: true    

  siepe_prossima_data_auto:
    name: ""Inserisci Data""
    has_date: true
    has_time: true
    #initial: '2019-01-26'

  erba_prossima_data_auto:
    name: ""Inserisci Data""
    has_date: true
    has_time: true
    #initial: '2019-01-25'

  siepe_ultimo_avvio_auto:
    has_date: true
    has_time: true
    #initial: 2019-01-15 15:00


  erba_ultimo_avvio_auto:
    has_date: true
    has_time: true
    #initial: '2019-01-15 12:00'

  erba_prossimo_orario_luci:
    has_date: true
    has_time: true
    #initial: '23:00'

  erba_prossimo_avviso:
    has_date: false
    has_time: true

  siepe_prossimo_avviso:
    has_date: false
    has_time: true








#===================================================================================#
#-------------------------------      TIMER       ----------------------------------#
#===================================================================================#

timer:

  siepe_zone_duration:
    duration: ""00:33:00""
    name: Tempo Rimanente

  erba_zone_duration:
    name: Tempo Rimanente
    duration: ""00:03:00""

  basilico:
    duration: ""00:10:00""






#===================================================================================#
#-------------------------------      SENSOR      ----------------------------------#
#===================================================================================#

sensor:

  - platform: template
    sensors:



      irrigazione_attiva:
        value_template: >

          {% if is_state('switch.siepe_1', 'on') or is_state('switch.siepe_2', 'on') or is_state('switch.siepe_3', 'on') %}    
            on
          {% else %}
            off
          {% endif %}


      siepe_next_run_time:
        icon_template: mdi:clock-start
        value_template: >
          {% set day_siepe_next = [""Dom"", ""Lun"", ""Mar"", ""Mer"", ""Gio"", ""Ven"", ""Sab""] %}
          {% set g_siepe_next = as_timestamp(states.input_datetime.siepe_prossima_data_auto.state) | timestamp_custom(""%w"") | int %}
          {% if is_state('input_boolean.siepe_automatico', 'on') and ( ((as_timestamp(states('input_datetime.siepe_prossima_data_auto')) - (24*3600))| timestamp_custom(""%d-%m-%y"")) == (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{""Stanotte"" + (as_timestamp(states.input_datetime.siepe_prossima_data_auto.state)) | timestamp_custom(""  %H:%M"") }}
          {% elif is_state('input_boolean.siepe_automatico', 'off') and ( ((as_timestamp(states('input_datetime.siepe_prossima_data_auto')) - (24*3600))| timestamp_custom(""%d-%m-%y"")) == (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{""* Stanotte "" + (as_timestamp(states.input_datetime.siepe_prossima_data_auto.state)) | timestamp_custom(""    %H:%M"") }}
          {% elif is_state('input_boolean.siepe_automatico', 'on') and ( ((as_timestamp(states('input_datetime.siepe_prossima_data_auto')) - (48*3600)) | timestamp_custom(""%d-%m-%y"")) == (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{""Dom Notte"" + (as_timestamp(states.input_datetime.siepe_prossima_data_auto.state)) | timestamp_custom(""   %H:%M"") }}
          {% elif is_state('input_boolean.siepe_automatico', 'off') and ( ((as_timestamp(states('input_datetime.siepe_prossima_data_auto')) - (48*3600)) | timestamp_custom(""%d-%m-%y"")) == (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{""* Dom Notte "" + (as_timestamp(states.input_datetime.siepe_prossima_data_auto.state)) | timestamp_custom(""    %H:%M"") }}
          {% elif is_state('input_boolean.siepe_automatico', 'on') and ( (as_timestamp(states('input_datetime.siepe_prossima_data_auto')) | timestamp_custom(""%d-%m-%y"")) != (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{day_siepe_next[g_siepe_next] + (as_timestamp(states.input_datetime.siepe_prossima_data_auto.state)) | timestamp_custom(""  %d    %H:%M"") }}
          {% else %}
            {{ ""* "" + day_siepe_next[g_siepe_next] + (as_timestamp(states.input_datetime.siepe_prossima_data_auto.state)) | timestamp_custom(""  %d    %H:%M"") }}  
          {% endif %}
 
      erba_next_run_time:
        icon_template: mdi:clock-start
        value_template: >
          {% set day_erba_next = [""Dom"", ""Lun"", ""Mar"", ""Mer"", ""Gio"", ""Ven"", ""Sab""] %}
          {% set g_erba_next = as_timestamp(states.input_datetime.erba_prossima_data_auto.state) | timestamp_custom(""%w"") | int %}
          {% if is_state('input_boolean.erba_automatico', 'on') and ( ((as_timestamp(states('input_datetime.erba_prossima_data_auto')) - (24*3600))| timestamp_custom(""%d-%m-%y"")) == (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{""Stanotte"" + (as_timestamp(states.input_datetime.erba_prossima_data_auto.state)) | timestamp_custom(""  %H:%M"") }}
          {% elif is_state('input_boolean.erba_automatico', 'off') and ( ((as_timestamp(states('input_datetime.erba_prossima_data_auto')) - (24*3600))| timestamp_custom(""%d-%m-%y"")) == (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{""* Stanotte "" + (as_timestamp(states.input_datetime.erba_prossima_data_auto.state)) | timestamp_custom(""    %H:%M"") }}
          {% elif is_state('input_boolean.erba_automatico', 'on') and ( ((as_timestamp(states('input_datetime.erba_prossima_data_auto')) - (48*3600)) | timestamp_custom(""%d-%m-%y"")) == (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{""Dom Notte"" + (as_timestamp(states.input_datetime.erba_prossima_data_auto.state)) | timestamp_custom(""   %H:%M"") }}
          {% elif is_state('input_boolean.erba_automatico', 'off') and ( ((as_timestamp(states('input_datetime.erba_prossima_data_auto')) - (48*3600)) | timestamp_custom(""%d-%m-%y"")) == (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{""* Dom Notte "" + (as_timestamp(states.input_datetime.erba_prossima_data_auto.state)) | timestamp_custom(""    %H:%M"") }}
          {% elif is_state('input_boolean.erba_automatico', 'on') and ( (as_timestamp(states('input_datetime.erba_prossima_data_auto')) | timestamp_custom(""%d-%m-%y"")) != (as_timestamp(now()) | timestamp_custom(""%d-%m-%y"")) )%}
            {{day_erba_next[g_erba_next] + (as_timestamp(states.input_datetime.erba_prossima_data_auto.state)) | timestamp_custom(""  %d    %H:%M"") }}
          {% else %}
            {{ ""* "" + day_erba_next[g_erba_next] + (as_timestamp(states.input_datetime.erba_prossima_data_auto.state)) | timestamp_custom(""  %d    %H:%M"") }}  
          {% endif %} 


      siepe_running:
        value_template: >

          {% if is_state('siepe_zone1_attiva', 'on') %}    
            Zona 1
          {% elif is_state('siepe_zone2_attiva', 'on') %}
            Zona 2
          {% else %}
            X
          {% endif %}
        
        

      erba_running:
        value_template: >
          {% if is_state('erba_zone1_attiva', 'on') %}
            Zona 1
          {% elif is_state('erba_zone2_attiva', 'on') %}
            Zona 2
          {% elif is_state('erba_zone3_attiva', 'on') %}
            Attiva Zona 3
          {% else %}
            X
          {% endif %}


      siepe_percent:
        value_template: >
          {{ states('input_number.siepe_percent') |int }}
        
      erba_percent:
        value_template: >
          {{ states('input_number.erba_percent') |int }}



      siepe_zone1_duration:
        value_template: >
          {{ states('input_number.siepe_zone1_duration') |int }}
      siepe_zone1_percent:
        value_template: >
          {{ ((states('input_number.siepe_zone1_duration') | int) * (states('input_number.siepe_percent') | int) / 100) | int }}
      siepe_zone1_badge:
        value_template: >
          {{ states('sensor.siepe_zone1_percent') }} - {{ states('sensor.siepe_zone1_duration') }}
      siepe_zone1_attiva:
        value_template: >
          {% if is_state('switch.siepe_1', 'on') and is_state('switch.neutro_irrigazione', 'off') %}
            on
          {% else %}
            off
          {% endif %}

      siepe_zone2_duration:
        value_template: >
          {{ states('input_number.siepe_zone2_duration') |int }} 
      siepe_zone2_percent:
        value_template: >
          {{ ((states('input_number.siepe_zone2_duration') | int) * (states('input_number.siepe_percent') | int) / 100) | int }}
      siepe_zone2_badge:
        value_template: >
          {{ states('sensor.siepe_zone2_percent') }} - {{ states('sensor.siepe_zone2_duration') }}
      siepe_zone2_attiva:
        value_template: >
          {% if is_state('switch.siepe_2', 'on') and is_state('switch.neutro_irrigazione', 'off') %}
            on
          {% else %}
            off
          {% endif %}



      erba_zone1_duration:
        value_template: >
          {{ states('input_number.erba_zone1_duration') |int }}
      erba_zone1_percent:
        value_template: >
          {{ ((states('input_number.erba_zone1_duration') | int) * (states('input_number.erba_percent') | int) / 100) | int }}
      erba_zone1_badge:
        value_template: >
          {{ states('sensor.erba_zone1_percent') }} - {{ states('sensor.erba_zone1_duration') }}
      erba_zone1_attiva:
        value_template: >
          {% if is_state('switch.siepe_1', 'on') and is_state('switch.neutro_irrigazione', 'on') %}
            on
          {% else %}
            off
          {% endif %}
      erba_zone2_duration:
        value_template: >
          {{ states('input_number.erba_zone2_duration') |int }}
      erba_zone2_percent:
        value_template: >
          {{ ((states('input_number.erba_zone2_duration') | int) * (states('input_number.erba_percent') | int) / 100) | int }}
      erba_zone2_badge:
        value_template: >
          {{ states('sensor.erba_zone2_percent') }} - {{ states('sensor.erba_zone2_duration') }}
      erba_zone2_attiva:
        value_template: >
          {% if is_state('switch.siepe_2', 'on') and is_state('switch.neutro_irrigazione', 'on') %}
            on
          {% else %}
            off
          {% endif %}
      erba_zone3_duration:
        value_template: >
          {{ states('input_number.erba_zone3_duration') |int }}
      erba_zone3_percent:
        value_template: >
          {{ ((states('input_number.erba_zone3_duration') | int) * (states('input_number.erba_percent') | int) / 100) | int }}
      erba_zone3_badge:
        value_template: >
          {{ states('sensor.erba_zone3_percent') }} - {{ states('sensor.erba_zone3_duration') }}
      erba_zone3_attiva:
        value_template: >
          {% if is_state('switch.siepe_3', 'on') and is_state('switch.neutro_irrigazione', 'on') %}
            on
          {% else %}
            off
          {% endif %}

  
      singola_zona_attiva:
        value_template: >
          {% if is_state('input_boolean.erba1_manual_run', 'on') or is_state('input_boolean.erba2_manual_run', 'on') or is_state('input_boolean.erba3_manual_run', 'on') %}
            erba
          {% elif is_state('input_boolean.siepe1_manual_run', 'on') or is_state('input_boolean.siepe2_manual_run', 'on') %}
            siepe
          {% else %}
            off
          {% endif %}








#===================================================================================#
#----------------------------      AUTOMATION     ----------------------------------#
#===================================================================================#

automation:


                               #  ---  GOOGLE CALENDAR ---- #
 

  - id: cal_siepe_erba_last
    alias: ""Irrigazione Calendario""
    mode: queued
    trigger:
      - platform: state
        entity_id: input_datetime.siepe_ultimo_avvio_auto
        variables:
          sommario: 'SIEPE'
          inizio: >
            {{ as_timestamp(states('input_datetime.siepe_ultimo_avvio_auto')) | timestamp_custom(""%Y-%m-%d %H:%M:%S"") }}
          fine: >
            {{ (as_timestamp(states('input_datetime.siepe_ultimo_avvio_auto')) + 600) | timestamp_custom(""%Y-%m-%d %H:%M:%S"") }}
      - platform: state
        entity_id: input_datetime.erba_ultimo_avvio_auto
        variables:
          sommario: 'ERBA'
          inizio: >
            {{ as_timestamp(states('input_datetime.erba_ultimo_avvio_auto')) | timestamp_custom(""%Y-%m-%d %H:%M:%S"") }}
          fine: >
            {{ (as_timestamp(states('input_datetime.erba_ultimo_avvio_auto')) + 600) | timestamp_custom(""%Y-%m-%d %H:%M:%S"") }}
          
    action:
      - service: google.create_event
        target:
          entity_id: calendar.xxxxxxxx
        data:
          summary: ""{{sommario}}""
          start_date_time: ""{{inizio}}""
          end_date_time: ""{{fine}}""








#                    ####  ------  AGGIORNA PROX CICLO DA FREQUENZA   ------ ###


  - id: imposta_next_run_time_da_frequenza
    alias: ""Irrigazione Frequenza""
    mode: queued
    trigger:
      - platform: state
        entity_id: input_number.siepe_watering_days
        variables:
          ciclo: ""siepe""
      - platform: state
        entity_id: input_number.erba_watering_days
        variables:
          ciclo: ""erba""
    
    action:

      - service: pyscript.aggiorna_prossimo_ciclo_auto
        data:
          ciclo: ""{{ciclo}}""







#                    ####  ------  OGGI PIOVE  ------ ###



  - id: oggi_piove
    alias: ""Irrigazione Oggi Piove""
    trigger:
      platform: state
      entity_id: input_boolean.oggi_ha_piovuto
      to: 'on'
    action:
    
      - service: pyscript.oggi_piove

      - service: google.create_event
        target:
          entity_id: calendar.irrigazione_last
        data:
          summary: 'PIOVE'
          start_date_time: >
            {{ as_timestamp(now()) | timestamp_custom(""%Y-%m-%d %H:%M:%S"") }}  
          end_date_time: >
            {{ (as_timestamp(now()) + 600) | timestamp_custom(""%Y-%m-%d %H:%M:%S"") }} 

      - delay:
          seconds: 1
      - service: input_boolean.turn_off
        entity_id: input_boolean.oggi_ha_piovuto









#                    ####  ------  RIPARTI DA OGGI  ------ ###



  - id: imposta_next_run__time_date
    alias: ""Irrigazione Riparti Da Oggi""
    trigger:
      - platform: state
        entity_id:
          - input_boolean.riparti_da_oggi
        to: 'on'
    action:
      - service: pyscript.riparti_da_oggi
      - delay:
          seconds: 1
      - service: input_boolean.turn_off
        entity_id: input_boolean.riparti_da_oggi









#                    ####  ------  FLASH LUCI SE SIAMO IN GIARDINO  ----- ###


          

  - id: aggiorna_orario_flash_luci
    alias: ""Irrigazione Flash Orario""
    trigger:
      - platform: state
        entity_id: input_datetime.erba_prossima_data_auto
    action:
      - service: pyscript.aggiorna_orario_flash
        

  - id: flash_luci_se_siamo_in_giardino
    alias: ""Irrigazione Flash On""
    trigger:
      - platform: time
        at: input_datetime.erba_prossimo_orario_luci
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.erba_automatico
          state: 'on'
        - condition: time
          after: ""18:00:00""
        - condition: or
          conditions:
            - condition: state
              entity_id: light.giardino_siepe
              state: 'on'
            - condition: state
              entity_id: light.giardino_portico
              state: 'on'
            - condition: state
              entity_id: light.piazzola
              state: 'on'

    action:

      - service: pyscript.flash_luci_giardino
        data:
          motivo: ""irrigazione""
          








#                    ####  ------  AVVIO AUTOMATICO ERBA SIEPE ------ ###




  - id: avvio_automatico
    alias: ""Irrigazione Avvio Auto""
    mode: queued
    trigger:
      - platform: time
        at: input_datetime.siepe_prossima_data_auto
        variables:
          ciclo: ""siepe""
      - platform: time
        at: input_datetime.erba_prossima_data_auto
        variables:
          ciclo: ""erba""
 
    condition: >
      {% set ciclo_bool = 'input_boolean.' + ciclo + '_automatico' %}
      {{ is_state(ciclo_bool, 'on') }}
      
    
    action:
      - service: input_boolean.turn_on
        data:
          entity_id: >
            {% set quale_ciclo = ""input_boolean."" + ciclo + ""_auto_attivo"" %}
            {{ quale_ciclo }}
      - service: >
          script.run_a_cycle_{{ ciclo }}
        data:
          cycle: ""{{ ciclo }}""
          
          
          

#                    ####  ------  AVVIO AUTOMATICO BASILICO ------ ###




  - id: avvio_automatico_basilico
    alias: ""Basilico Avvio Auto""
    # mode: queued
    trigger:
      - platform: time
        at: input_datetime.basilico_orario1
        variables:
          orario: ""uno""
      - platform: time
        at: input_datetime.basilico_orario2
        variables:
          orario: ""due""
      - platform: time
        at: input_datetime.basilico_orario3
        variables:
          orario: ""tre""
      - platform: time
        at: input_datetime.basilico_orario4
        variables:
          orario: ""quattro""
      - platform: state
        entity_id: input_boolean.basilico_manuale
        to: 'on'
        variables:
          orario: ""manuale""
 

    action:
      - delay:
          seconds: 1

      - choose:
          - conditions: ""{{ orario == 'manuale' }}""
            sequence:
              - service: script.avvia_basilico
              - service: input_boolean.turn_off
                entity_id: input_boolean.basilico_manuale

          - conditions: ""{{ orario == 'uno' and (states('input_number.basilico_frequenza')|int == 3 or states('input_number.basilico_frequenza')|int == 4) and is_state('input_boolean.basilico_automatico', 'on') }}""
            sequence:
              - service: script.avvia_basilico

          - conditions: ""{{ orario == 'due' and (states('input_number.basilico_frequenza')|int == 2 or states('input_number.basilico_frequenza')|int == 4) and is_state('input_boolean.basilico_automatico', 'on') }}""
            sequence:
              - service: script.avvia_basilico

          - conditions: ""{{ orario =='tre' and (states('input_number.basilico_frequenza')|int == 3 or states('input_number.basilico_frequenza')|int == 4) and is_state('input_boolean.basilico_automatico', 'on') }}""
            sequence:
              - service: script.avvia_basilico

          - conditions: ""{{ orario == 'quattro' and is_state('input_boolean.basilico_automatico', 'on') }}""
            sequence:
              - service: script.avvia_basilico

 

#                    ####  ------  AVVIO MANUALE  ------ ###



  - id: ciclo_manuale
    alias: ""Irrigazione Ciclo Manuale""
    trigger:
      - platform: state
        entity_id: input_boolean.siepe_manual_run
        from: 'off'
        to: 'on'
        variables:
          ciclo: ""siepe""
          altro: ""erba""
      - platform: state
        entity_id: input_boolean.erba_manual_run
        from: 'off'
        to: 'on'
        variables:
          ciclo: ""erba""
          altro: ""siepe""

    condition: >
      {% set altro_running = 'sensor.' + altro + '_running' %}
      {{ is_state(altro_running, 'X') }}
    

    action:

      - service: >
          script.run_a_cycle_{{ ciclo }}
        data:
          cycle: ""{{ ciclo }}""
        

      
      





#                    ####  ------  AVVIO SINGOLA ZONA  ------ ###

  - id: zona_manuale
    alias: ""Irrigazione Zona Manuale""
    trigger:
      - platform: state
        entity_id:
          - input_boolean.siepe1_manual_run
          - input_boolean.siepe2_manual_run
          - input_boolean.erba1_manual_run
          - input_boolean.erba2_manual_run
          - input_boolean.erba3_manual_run
        from: 'off'
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.stop_irrigazione
        state: 'off'
    action:
      
      - service: >
          {% if (trigger.entity_id == 'input_boolean.siepe1_manual_run') or (trigger.entity_id == 'input_boolean.siepe2_manual_run') %}
            switch.turn_off
          {% else %}
            switch.turn_on
          {% endif %}
        entity_id: switch.neutro_irrigazione

      - service: input_boolean.turn_on
        data_template:
          entity_id: >
            {% if (trigger.entity_id == 'input_boolean.siepe1_manual_run') or (trigger.entity_id == 'input_boolean.siepe2_manual_run') %}
              input_boolean.siepe_running
            {% else %}
              input_boolean.erba_running
            {% endif %}

      - service: script.irrigate_a_zone
        data_template:
          cycle: >
            {% if (trigger.entity_id == 'input_boolean.siepe1_manual_run') or (trigger.entity_id == 'input_boolean.siepe2_manual_run') %}
              siepe
            {% else %}
              erba
            {% endif %} 
          zone: >
            {% if (trigger.entity_id == 'input_boolean.siepe1_manual_run') or (trigger.entity_id == 'input_boolean.erba1_manual_run') %}
              1
            {% elif (trigger.entity_id == 'input_boolean.siepe2_manual_run') or (trigger.entity_id == 'input_boolean.erba2_manual_run') %}
              2
            {% else %}
              3
            {% endif %}

      - wait_template: ""{{ is_state('script.irrigate_a_zone', 'off') }}""

      - service: switch.turn_off
        entity_id: switch.neutro_irrigazione

      - service: input_boolean.turn_off
        data_template:
          entity_id: >
            {{ trigger.entity_id }}

      - service: input_boolean.turn_off
        data_template:
          entity_id: >
            {% if (trigger.entity_id == 'input_boolean.siepe1_manual_run') or (trigger.entity_id == 'input_boolean.siepe2_manual_run') %}
              input_boolean.siepe_running
            {% else %}
              input_boolean.erba_running
            {% endif %}




#                    ####  ------  STOP  ------ ###


  - id: arma_stop_irrigazione
    alias: ""Irrigazione Arma STOP""
    trigger:
      - platform: state
        entity_id:
          - switch.siepe_1
          - switch.siepe_2
          - switch.siepe_3
        from: 'off'
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.stop_irrigazione
        state: 'off'
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.stop_irrigazione

  - id: disarma_stop_irrigazione
    alias: Disarma stop irrigazione
    trigger:
      - platform: state
        entity_id: group.valvole_irrigazione
        from: 'on'
        to: 'off'
    condition: 
      condition: template
      value_template: ""{{ is_state('script.run_a_cycle_erba', 'off') and is_state('script.run_a_cycle_siepe', 'off') }}""  

    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.stop_irrigazione



 
  - id: stop_irrigazione
    alias: ""Irrigazione STOP""
    trigger:
      - platform: state
        entity_id: input_boolean.stop_irrigazione
        from: 'on'
        to: 'off'
    
    condition: ""{{ is_state('input_boolean.bypass_stop', 'off')}}""

    action:
      
      - service: script.stop_irrigation
        data_template:
          stop_irrigazione_casi: >
            {% if is_state('script.run_a_cycle_erba', 'on') and is_state('script.irrigate_a_zone', 'on') %}
              ✋ INTERROTTO Ciclo Erba
            {% elif is_state('script.run_a_cycle_siepe', 'on') and is_state('script.irrigate_a_zone', 'on') %}
              ✋ INTERROTTO Ciclo Siepe
            {% elif is_state('script.avvia_basilico', 'on') %}
              ✋ INTERROTTO Basilico
            {% else %}
              ✋ Valvole Chiuse
            {% endif %}
          stop_irrigazione_tag: >
            {% if is_state('script.run_a_cycle_erba', 'on') %}
              irrigazione_erba
            {% elif is_state('script.run_a_cycle_siepe', 'on') %}
              irrigazione_siepe
            {% else %}
              irrigazione
            {% endif %}

      - service: input_boolean.turn_off
        entity_id: input_boolean.bypass_stop
            
            
            
            
      - service: input_boolean.turn_off
        entity_id:
          - input_boolean.siepe_manual_run
          - input_boolean.erba_manual_run
          - input_boolean.erba_auto_attivo
          - input_boolean.siepe_auto_attivo
          - input_boolean.siepe1_manual_run
          - input_boolean.siepe2_manual_run
          - input_boolean.erba1_manual_run
          - input_boolean.erba2_manual_run
          - input_boolean.erba3_manual_run




 

  - id: Avvisa_telegram_irrigazione_siepe
    alias: ""Irrigazione Notifica Siepe""
    trigger:
      -  platform: time
         at: 
           - input_datetime.siepe_prossimo_avviso
   
    condition:
      condition: template
      value_template: >
        {{ (states('input_boolean.siepe_automatico') == 'on') and ((as_timestamp(states.input_datetime.siepe_prossima_data_auto.state) - 3600 * 24) | timestamp_custom('%Y-%m-%d') == (as_timestamp(now()) | timestamp_custom(""%Y-%m-%d""))) }}
    
    action:
      - service: script.avvisa_siepe
   


  - id: Avvisa_telegram_irrigazione_erba
    alias: ""Irrigazione Notifica Erba""
    trigger:
      -  platform: time
         at: 
           - input_datetime.erba_prossimo_avviso

    condition:
      condition: template
      value_template: >
        {{ (states('input_boolean.erba_automatico') == 'on') and ((as_timestamp(states.input_datetime.erba_prossima_data_auto.state) - 3600 * 24) | timestamp_custom('%Y-%m-%d') == (as_timestamp(now()) | timestamp_custom(""%Y-%m-%d""))) }}

    action:
      - service: script.avvisa_erba



  - id: risposta_irrigazione_promemoria
    alias: ""Risposta a IOS Promemoria Irrigazione""
    trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: ""annulla_siepe""
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: ""annulla_erba""
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: ""irrigazione_ferma""
    
    action: 
    
      - choose:
          - conditions: ""{{ trigger.event.data.action == 'annulla_siepe' }}""
            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.siepe_automatico
              - service: script.ios_tommy_normale
                data:
                  titolo: ""IRRIGAZIONE""
                  messaggio: ""✅ Disattivata SIEPE Automatica""
                  tag: ""irrigazione_siepe""
                  gruppo: ""irrigazione""
                    
          - conditions: ""{{ trigger.event.data.action == 'annulla_erba' }}""
            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.erba_automatico
              - service: script.ios_tommy_normale
                data:
                  titolo: ""IRRIGAZIONE""
                  messaggio: ""✅ Disattivata ERBA Automatica""
                  tag: ""irrigazione_erba""
                  gruppo: ""irrigazione""
                    
          - conditions: ""{{ trigger.event.data.action == 'irrigazione_ferma' }}""
            sequence:
              - service: input_boolean.turn_off
                entity_id: input_boolean.stop_irrigazione
              









#===================================================================================#
#-------------------------------      SCRIPT      ----------------------------------#
#===================================================================================#

script:



  run_a_cycle_siepe:
    sequence:
    - condition: state
      entity_id: 'sensor.siepe_running'
      state: 'X'
    - condition: state
      entity_id: 'sensor.erba_running'
      state: 'X'
    - condition: state
      entity_id: 'binary_sensor.switch_siepe_1_unavailable'
      state: 'off'

    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""💧  SIEPE Zona 1""
        tag: ""irrigazione_siepe""
        azione: ""irrigazione_ferma""
        titolo_azione: ""Ferma""
        gruppo: ""irrigazione""

    - service: input_boolean.turn_on
      entity_id: 
        - input_boolean.siepe_running


    - service: switch.turn_off
      entity_id: switch.neutro_irrigazione

    - service: script.irrigate_a_zone
      data_template:
        cycle: 'siepe'  #'{{ cycle }}'
        zone: 1

    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""💧  SIEPE Zona 2""
        tag: ""irrigazione_siepe""
        azione: ""irrigazione_ferma""
        titolo_azione: ""Ferma""
        gruppo: ""irrigazione""

    - service: script.irrigate_a_zone
      data_template:
        cycle: 'siepe' #'{{ cycle }}'
        zone: 2

    - wait_template: ""{{ is_state('script.irrigate_a_zone', 'off') }}""

    - service: input_text.set_value
      data_template:
        entity_id: input_text.siepe_current_zone
        value: 'Stop'

    - service: input_datetime.set_datetime
      data_template:
        entity_id: input_datetime.siepe_prossima_data_auto
        date: >
          {{ (as_timestamp(now()) + (3600 * 24 * states('input_number.siepe_watering_days')|int )) | timestamp_custom(""%Y-%m-%d"") }}
        

    - service: input_datetime.set_datetime
      data_template:
        entity_id: input_datetime.siepe_ultimo_avvio_auto
        date: >
          {{ as_timestamp(now()) | timestamp_custom(""%Y-%m-%d"") }}
        time: >
          {{ as_timestamp(now()) | timestamp_custom(""%H:%M"") }}


    - service: input_boolean.turn_on
      entity_id: input_boolean.bypass_stop

    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""✅ Completato ciclo SIEPE""
        tag: ""irrigazione_siepe""
        azione: ""irrigazione_ferma""
        titolo_azione: ""Ferma""
        gruppo: ""irrigazione""

    - service: input_boolean.turn_off
      entity_id: 
        - input_boolean.stop_irrigazione
        - input_boolean.siepe_auto_attivo
        - input_boolean.siepe_running
        - input_boolean.siepe_manual_run

    - delay: 
        seconds: 5

    - service: input_boolean.turn_off
      entity_id: input_boolean.bypass_stop





   







  run_a_cycle_erba:
    sequence:
    - condition: state
      entity_id: 'sensor.siepe_running'
      state: 'X'
    - condition: state
      entity_id: 'sensor.erba_running'
      state: 'X'
    - condition: state
      entity_id: 'binary_sensor.switch_siepe_1_unavailable'
      state: 'off'

    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""💧  ERBA Zona 1""
        tag: ""irrigazione_erba""
        azione: ""irrigazione_ferma""
        titolo_azione: ""Ferma""
        gruppo: ""irrigazione""

    - service: switch.turn_on
      entity_id: switch.neutro_irrigazione

    - service: input_boolean.turn_on
      entity_id: 
        - input_boolean.erba_running


    - service: script.irrigate_a_zone
      data_template:
        cycle: 'erba'
        zone: 1

    - wait_template: ""{{ is_state('script.irrigate_a_zone', 'off') }}""

    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""💧  ERBA Zona 2""
        tag: ""irrigazione_erba""
        azione: ""irrigazione_ferma""
        titolo_azione: ""Ferma""
        gruppo: ""irrigazione""

    - service: script.irrigate_a_zone
      data_template:
        cycle: 'erba'
        zone: 2

    - wait_template: ""{{ is_state('script.irrigate_a_zone', 'off') }}""

    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""💧  ERBA Zona 3""
        tag: ""irrigazione_erba""
        azione: ""irrigazione_ferma""
        titolo_azione: ""Ferma""
        gruppo: ""irrigazione""

    - service: script.irrigate_a_zone
      data_template:
        cycle: 'erba'
        zone: 3

    - wait_template: ""{{ is_state('script.irrigate_a_zone', 'off') }}""


    - service: input_datetime.set_datetime
      data_template:
        entity_id: input_datetime.erba_prossima_data_auto
        date: >
          {{ (as_timestamp(now()) + (3600 * 24 * states('input_number.erba_watering_days')|int )) | timestamp_custom(""%Y-%m-%d"") }}
    
    - service: input_datetime.set_datetime
      data_template:
        entity_id: input_datetime.erba_ultimo_avvio_auto
        date: >
          {{ as_timestamp(now()) | timestamp_custom(""%Y-%m-%d "") }}
        time: >
          {{ as_timestamp(now()) | timestamp_custom(""%H:%M"") }}

    - service: input_boolean.turn_on
      entity_id: input_boolean.bypass_stop

    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""✅ Completato ciclo ERBA""
        tag: ""irrigazione_erba""
        azione: ""irrigazione_ferma""
        titolo_azione: ""Ferma""
        gruppo: ""irrigazione""


    - service: input_boolean.turn_off
      entity_id: 
        - input_boolean.stop_irrigazione
        - input_boolean.erba_auto_attivo
        - input_boolean.erba_running
        - input_boolean.erba_manual_run

    - delay: 
        seconds: 2

    - service: input_boolean.turn_off
      entity_id: input_boolean.bypass_stop
    
    - service: switch.turn_off
      entity_id: switch.neutro_irrigazione












  irrigate_a_zone:
    sequence:

    - delay: ""00:00:02""


    - service: switch.turn_on
      data_template:
        entity_id: switch.siepe_{{ zone }}
    
    - service: timer.cancel
      entity_id: timer.siepe_zone_duration
    - service: timer.cancel
      entity_id: timer.erba_zone_duration  
     
        

    - service: timer.start
      data_template:
        entity_id: timer.{{ cycle }}_zone_duration
        duration: >
          {% if (cycle == 'siepe') and zone == 1 %}
            00:{{ ((states('input_number.siepe_zone1_duration') | int) * (states('input_number.siepe_percent') | int) / 100) | int }}:00
          {% elif (cycle == 'siepe') and zone == 2 %}
            00:{{ ((states('input_number.siepe_zone2_duration') | int) * (states('input_number.siepe_percent') | int) / 100) | int }}:00
          {% elif (cycle == 'erba') and zone == 1 %}
            00:{{ ((states('input_number.erba_zone1_duration') | int) * (states('input_number.erba_percent') | int) / 100) | int }}:00
          {% elif (cycle == 'erba') and zone == 2 %}
            00:{{ ((states('input_number.erba_zone2_duration') | int) * (states('input_number.erba_percent') | int) / 100) | int }}:00
          {% elif (cycle == 'erba') and zone == 3 %}
            00:{{ ((states('input_number.erba_zone3_duration') | int) * (states('input_number.erba_percent') | int) / 100) | int }}:00
          {% endif %}


           
    - wait_template: >
        {% set entity   = 'timer.' + cycle + '_zone_duration' %}
        {{ is_state(entity , 'idle') }}

    - wait_template: >
        {% set entity   = 'binary_sensor.switch_siepe_1_unavailable' %}
        {{ is_state(entity , 'off') }}   

    - service: switch.turn_off
      data_template:
        entity_id: switch.siepe_{{ zone }}

 

  avvia_basilico:
    sequence:
      - service: script.ios_tommy_azione
        data:
          titolo: ""IRRIGAZIONE""
          messaggio: ""💧  Basilico""
          tag: ""irrigazione""
          azione: ""irrigazione_ferma""
          titolo_azione: ""Ferma""
          gruppo: ""irrigazione""
          
      - service: input_boolean.turn_on
        entity_id: input_boolean.basilico_running
          
      - service: timer.start
        data:
          entity_id: timer.basilico
          duration: >
            00:{{ states('input_number.basilico_durata') | int }}:00
            
      - service: switch.turn_off
        entity_id: switch.neutro_irrigazione
      - service: switch.turn_on
        entity_id: switch.siepe_3
        
      - wait_template: >
          {% set entity   = 'timer.basilico' %}
          {{ is_state(entity , 'idle') }}

      - service: input_boolean.turn_on
        entity_id: input_boolean.bypass_stop

      - service: script.ios_tommy_azione
        data:
          titolo: ""IRRIGAZIONE""
          messaggio: "" ✅ Completato BASILICO""
          tag: ""irrigazione""
          azione: ""irrigazione_ferma""
          titolo_azione: ""Ferma""
          gruppo: ""irrigazione""

      - service: switch.turn_off
        entity_id: switch.siepe_3

      - service: input_boolean.turn_off
        entity_id: input_boolean.basilico_running

      - delay:
          seconds: 2
      - service: input_boolean.turn_off
        entity_id: input_boolean.bypass_stop






  avvisa_siepe:
    sequence:
    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""⚠️ SIEPE: Stanotte alle {{ states.input_datetime.prossima_data_auto.attributes.hour }}:{{ states.input_datetime.prossima_data_auto.attributes.minute }}   {{ states.sensor.siepe_zone1_percent.state }}-{{ states.sensor.siepe_zone2_percent.state }}""
        tag: ""irrigazione_siepe""
        azione: ""annulla_siepe""
        titolo_azione: ""Disattiva""
        gruppo: ""irrigazione""


  avvisa_erba:
    sequence:
    - service: script.ios_tommy_azione
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: '⚠️ ERBA: Stanotte alle {{ states.input_datetime.erba_prossima_data_auto.attributes.hour }}:{{ states.input_datetime.erba_prossima_data_auto.attributes.minute }}   {{ states.sensor.erba_zone1_percent.state }}-{{ states.sensor.erba_zone2_percent.state }}-{{ states.sensor.erba_zone3_percent.state }}'
        tag: ""irrigazione_erba""
        azione: ""annulla_erba""
        titolo_azione: ""Disattiva""
        gruppo: ""irrigazione""


  stop_irrigation:
    sequence:
    - service: switch.turn_off
      entity_id: switch.siepe_1, switch.siepe_2, switch.siepe_3, switch.neutro_irrigazione
    - service: homeassistant.turn_off
      entity_id: script.run_a_cycle_siepe, script.run_a_cycle_erba, script.irrigate_a_zone, script.avvia_basilico

    - delay: 
        seconds: 1
    - service: timer.cancel
      entity_id: timer.siepe_zone_duration, timer.erba_zone_duration, timer.basilico

    - service: input_boolean.turn_off
      entity_id: input_boolean.siepe_running, input_boolean.erba_running, input_boolean.basilico_running

    - service: script.ios_tommy_normale
      data:
        titolo: ""IRRIGAZIONE""
        messaggio: ""{{ stop_irrigazione_casi }}""
        tag: ""{{ stop_irrigazione_tag }}""
        gruppo: ""irrigazione""
          

"
82a0XgWn,Untitled,ShiinaBR,C#,Thursday 22nd of June 2023 03:02:49 AM CDT,"[
""8D9CFEEB5299B3F8400B8E2E67B8A1C9:wwFluOAmcnXcGsyJRGJEmuC22cypzH4xThcZASR+IHU=""
]"
rHeiY6p5,Untitled,Void-voiD,Python,Thursday 22nd of June 2023 02:51:45 AM CDT,"import os

import numpy as np
import pandas as pd
from keras.models import load_model
import tensorflow as tf

from custom_keras_utils import normalize_timeseries
from preprocess_test_samples import load_data_to_datasets


ROOT_PATH = os.getcwd() + '\\test_samples_0'
CLASS_NAME = 'Расслоение'
CLASS_MAPPING = {
    'ВИ_БезДефекта': 0,
    'ВИ_Дефект': 1,
    'Инородное включение': 2,
    'Непроклей': 3,
    'Непропитка': 4,
    'Пресс_БезДефекта': 5,
    'Пресс_Дефект': 6,
    'Расслоение': 7
}
MODEL_NAME = 'resnet'
MODEL_MAPPING = {
    'lstm_fcn': 1,
    'mlp': 2,
    'resnet': 3
}


with tf.device('/GPU:0'):
    model = load_model(MODEL_NAME + '.h5')
    load_data_to_datasets(ROOT_PATH)

    X_test = pd.read_csv(ROOT_PATH + '\\test_x.csv', header=None, delimiter=' ')
    X_test = normalize_timeseries(X_test).values
    if MODEL_MAPPING[MODEL_NAME] == 3:
        X_test = np.reshape(X_test, (X_test.shape[0], 1, 1, X_test.shape[1]))
    else:
        X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))

    # Make predictions
    predictions = model.predict(X_test)

    # Convert predictions to class labels
    class_labels = [np.argmax(prediction) for prediction in predictions]

    false_predict = 0.0
    all_predict = 0
    for label in class_labels:
        if label != CLASS_MAPPING[CLASS_NAME]:
            false_predict += 1
        all_predict += 1
    print('Accuracy: {}%'.format((all_predict - false_predict) / all_predict * 100))

    os.remove(ROOT_PATH + '\\test_x.csv')
"
RGsEWjWv,c# xlsx create,kklevi,C#,Thursday 22nd of June 2023 02:41:56 AM CDT,"//https://stackoverflow.com/questions/23041021/how-to-write-some-data-to-excel-file-xlsx

using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;

namespace MacroUCS.Backend
{
    class Sample
    {
        public void SampleFunction()
        {
            IWorkbook workbook = new XSSFWorkbook();
            ISheet sheet1 = workbook.CreateSheet(""Sheet1"");

            IRow row1 = sheet1.CreateRow(0);
            row1.CreateCell(0).SetCellValue(""Name"");
            row1.CreateCell(1).SetCellValue(""Age"");
            row1.CreateCell(2).SetCellValue(""City"");

            IRow row2 = sheet1.CreateRow(1);
            row2.CreateCell(0).SetCellValue(""Ben"");
            row2.CreateCell(1).SetCellValue(""20"");
            row2.CreateCell(2).SetCellValue(""xyz"");

            IRow row3 = sheet1.CreateRow(2);
            row3.CreateCell(0).SetCellValue(""Jack"");
            row3.CreateCell(1).SetCellValue(""25"");
            row3.CreateCell(2).SetCellValue(""xyz"");

            IRow row4 = sheet1.CreateRow(3);
            row4.CreateCell(0).SetCellValue(""Mike"");
            row4.CreateCell(1).SetCellValue(""45"");
            row4.CreateCell(2).SetCellValue(""zyx"");

            FileStream sw = File.Create(""work1_4.13.14.xlsx"");
            workbook.Write(sw, true);
            sw.Close();
        }
    }
}"
jRXa9gAT,PVP PK TITLE RANK,AcaciaX9,Java,Thursday 22nd of June 2023 02:34:49 AM CDT,"Subject: [PATCH] PVP PK TITLE UPDATE
---
Index: aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java b/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java	(date 1687416470796)
@@ -2913,7 +2913,9 @@
 			{
 				// Add PvP point to attacker.
 				setPvpKills(getPvpKills() + 1);
-				
+
+				broadcastTitleInfo();
+
 				// Send UserInfo packet to attacker with its Karma and PK Counter
 				sendPacket(new UserInfo(this));
 			}
@@ -2924,7 +2926,9 @@
 			// PK Points are increased only if you kill a player.
 			if (target instanceof Player)
 				setPkKills(getPkKills() + 1);
-			
+
+			broadcastTitleInfo();
+
 			// Calculate new karma.
 			setKarma(getKarma() + Formulas.calculateKarmaGain(getPkKills(), target instanceof Summon));
 			
Index: aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Creature.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Creature.java b/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Creature.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Creature.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Creature.java	(date 1687423528814)
@@ -947,13 +947,9 @@
 	 */
 	public void setTitle(String value)
 	{
-		_title = StringUtil.trim(value, 16, """");
+		_title = StringUtil.trim(value, 9, """");
 	}
-	
-	/**
-	 * In Server->Client packet, each effect is represented by 1 bit of the map (ex : BLEEDING = 0x0001 (bit 1), SLEEP = 0x0080 (bit 8)...). The map is calculated by applying a BINARY OR operation on each effect.
-	 * @return a map of 16 bits (0x0000) containing all abnormal effect in progress for this Creature.
-	 */
+
 	public int getAbnormalEffect()
 	{
 		int ae = _abnormalEffects;
@@ -1944,4 +1940,8 @@
 	{
 		return !isDead() && !isInvul();
 	}
+
+	public String getTitleRank() {
+		return """" + (""[""+ getActingPlayer().getPvpKills() +""][""+getActingPlayer().getPkKills() +""]"");
+	}
 }
\ No newline at end of file
Index: aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/TitleUpdate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/TitleUpdate.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/TitleUpdate.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/TitleUpdate.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/TitleUpdate.java	(date 1687418091002)
@@ -6,11 +6,13 @@
 {
 	private final String _title;
 	private final int _objectId;
+	private Creature _creature;
 	
 	public TitleUpdate(Creature cha)
 	{
 		_objectId = cha.getObjectId();
 		_title = cha.getTitle();
+		_creature = cha;
 	}
 	
 	@Override
@@ -18,6 +20,6 @@
 	{
 		writeC(0xcc);
 		writeD(_objectId);
-		writeS(_title);
+		writeS(_title + _creature.getTitleRank());
 	}
 }
\ No newline at end of file
Index: aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/UserInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/UserInfo.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/UserInfo.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/UserInfo.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/UserInfo.java	(date 1687418090997)
@@ -171,7 +171,7 @@
 		writeD(_player.getAppearance().getFace());
 		writeD((_player.isGM()) ? 1 : 0);
 		
-		writeS((_player.getPolymorphTemplate() != null) ? ""Morphed"" : _player.getTitle());
+		writeS((_player.getPolymorphTemplate() != null) ? ""Morphed"" : _player.getTitle() + _player.getTitleRank());
 		
 		writeD(_player.getClanId());
 		writeD(_player.getClanCrestId());
Index: aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/CharInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/CharInfo.java b/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/CharInfo.java
--- a/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/CharInfo.java	(revision 6537f1023595a270a0b4d8785ee362d1122a674c)
+++ b/aCis_gameserver/java/net/sf/l2j/gameserver/network/serverpackets/CharInfo.java	(date 1687418090994)
@@ -116,7 +116,7 @@
 		writeD(_player.getAppearance().getHairColor());
 		writeD(_player.getAppearance().getFace());
 		
-		writeS((canSeeInvis) ? ""Invisible"" : _player.getTitle());
+		writeS((canSeeInvis) ? ""Invisible"" : _player.getTitle() + _player.getTitleRank());
 		
 		writeD(_player.getClanId());
 		writeD(_player.getClanCrestId());
"
yeT8jVPC,Stylized Grass - Runtime color map baking,Staggart,C#,Thursday 22nd of June 2023 02:30:14 AM CDT,"using System;
using UnityEngine;

namespace StylizedGrass
{
    //Testing runtime generation
    [ExecuteInEditMode]
    public class RuntimeColorMapTest : MonoBehaviour
    {
        public GrassColorMapRenderer colorMapRenderer;

        private void Reset()
        {
            colorMapRenderer = GetComponent<GrassColorMapRenderer>();
        }
        
        public void OnGUI()
        {
            if (GUILayout.Button(""Render""))
            {
				if(colorMapRenderer.colorMap == null) colorMapRenderer.colorMap = ScriptableObject.CreateInstance<GrassColorMap>();
				
				colorMapRenderer.terrainObjects.Clear();
				colorMapRenderer.AssignActiveTerrains();
				colorMapRenderer.RecalculateBounds();
				
                //Use some randomization, in order to see a difference
                float r = UnityEngine.Random.Range(0.9f, 1.1f);
                colorMapRenderer.colorMap.bounds.size = Vector3.Scale(colorMapRenderer.colorMap.bounds.size, new Vector3(r, 1f, r));
                colorMapRenderer.textureDetail = UnityEngine.Random.value * 100f;
                
                colorMapRenderer.Render();
            }

            if (colorMapRenderer.colorMap && colorMapRenderer.colorMap.texture)
            {
                GUI.DrawTexture(new Rect(5, 32, 256, 256), colorMapRenderer.colorMap.texture, ScaleMode.ScaleToFit, false);
                GUI.DrawTexture(new Rect(256 + 15, 32, 256, 256), colorMapRenderer.colorMap.texture, ScaleMode.ScaleToFit, true);
            }
        }
    }
}"
t8R7enRH,ccm - select promotion,CCMAndrei,JavaScript,Thursday 22nd of June 2023 02:06:55 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'select_promotion',
  ecommerce: {
    items: [{
      promotion_id: 'bfcm',                 // promotion ID
      promotion_name: 'Giveaway',       // name of the promo campaign
      creative_name: '50_percent_off',      // main message of the banner
      creative_slot: 'homepage_banner1',            // slot of the banner (there are multiple items in the same location, e.g. slider)
      location_id: 'home_page'              // location of the banner
    }]
  }
});"
nEhSrKLX,ccm - view promotion,CCMAndrei,JavaScript,Thursday 22nd of June 2023 02:03:23 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'view_promotion',
  ecommerce: {
    items: [{
      promotion_id: 'bfcm',					// promotion ID
      promotion_name: 'Giveaway',		// name of the promo campaign
      creative_name: '50_percent_off',		// main message of the banner
      creative_slot: 'homepage_banner1',			// slot of the banner (there are multiple items in the same location, e.g. slider)
      location_id: 'home_page'				// location of the banner
    },{
      promotion_id: 'bfcm',
      promotion_name: 'black_friday',
      creative_name: 'free_shipping_orders_over_100',
      creative_slot: 'sidebar2',
      location_id: 'sidebar'
    }]
  }
});"
0jFjvwW1,ccm - add payment info,CCMAndrei,JavaScript,Thursday 22nd of June 2023 01:59:29 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'add_payment_info',  			// name of the event. In this case, it always must be add_payment_info
  ecommerce: {
	payment_type: 'credit card',		// name of the payment method						
    items: [{                           // an array with a product                      
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      promotion_name: 'giveaway',       // insert name of current promotion if clicked from promotion
      quantity: '1'                     // product quantity during the checkout
    },{
      item_name: 'Product 2',
      item_id: 'product2',
      price: '12.99',
      item_brand: 'Brand B',
      item_category: 'Category B',
      item_variant: 'Yellow',
      quantity: '1'
    }]
  }
});"
XFxLtY1C,ccm - add shipping info,CCMAndrei,JavaScript,Thursday 22nd of June 2023 01:55:47 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'add_shipping_info',  			// name of the event. In this case, it always must be add_shipping_info
  ecommerce: {
	shipping_tier: 'Delivery',			// name of the delivery method - either delivery or Pick Up					
    items: [{                           // an array with a product                      
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      promotion_name: 'giveaway',       // insert name of current promotion if clicked from promotion
      quantity: '1'						// product quantity during the checkout
    },{
      item_name: 'Product 2',
      item_id: 'product2',
      price: '12.99',
      item_brand: 'Brand B',
      item_category: 'Category B',
      item_variant: 'Yellow',
      quantity: '1'
    }]
  }
});"
fUc3pe2a,Review GMT Markets,fxvnpro,PHP,Thursday 22nd of June 2023 01:53:53 AM CDT,https://www.fxvnpro.com/review-gmt-markets/
KHd0v9tU,Nigerian scammers [22-6-1/2023],bombaires,HTML,Thursday 22nd of June 2023 01:51:02 AM CDT,"<a href=""mailto:5d55880f489c45b1b1219fb1a1a65e93.protect@withheldforprivacy.com"">5d55880f489c45b1b1219fb1a1a65e93.protect@withheldforprivacy.com</a>
<a href=""mailto:jw9029126@gmail.com"">jw9029126@gmail.com</a>
<a href=""mailto:j.w.9.0291.2.6@gmail.com"">j.w.9.0291.2.6@gmail.com</a>
<a href=""mailto:j.w9.02.9.1.26@gmail.com"">j.w9.02.9.1.26@gmail.com</a>
<a href=""mailto:j.w.9.0.29.1.26@gmail.com"">j.w.9.0.29.1.26@gmail.com</a>
<a href=""mailto:jw.9.0.29.1.2.6@gmail.com"">jw.9.0.29.1.2.6@gmail.com</a>
<a href=""mailto:jw9.02.9.1.2.6@gmail.com"">jw9.02.9.1.2.6@gmail.com</a>
<a href=""mailto:j.w.9.0.29.1.2.6@gmail.com"">j.w.9.0.29.1.2.6@gmail.com</a>
<a href=""mailto:jw.9.02.91.2.6@gmail.com"">jw.9.02.91.2.6@gmail.com</a>
<a href=""mailto:j.w902.91.2.6@gmail.com"">j.w902.91.2.6@gmail.com</a>
<a href=""mailto:j.w90.291.26@gmail.com"">j.w90.291.26@gmail.com</a>
<a href=""mailto:j.w902.91.26@gmail.com"">j.w902.91.26@gmail.com</a>
<a href=""mailto:jw902.912.6@gmail.com"">jw902.912.6@gmail.com</a>
<a href=""mailto:jw90291.26@gmail.com"">jw90291.26@gmail.com</a>
<a href=""mailto:j.w9.02.9.1.2.6@gmail.com"">j.w9.02.9.1.2.6@gmail.com</a>
<a href=""mailto:jw9029126@gmail.com"">jw9029126@gmail.com</a>
<a href=""mailto:j.w9.029.126@gmail.com"">j.w9.029.126@gmail.com</a>
<a href=""mailto:jw9.0291.26@gmail.com"">jw9.0291.26@gmail.com</a>
<a href=""mailto:j.w9029126@gmail.com"">j.w9029126@gmail.com</a>
<a href=""mailto:jw902.9.126@gmail.com"">jw902.9.126@gmail.com</a>
<a href=""mailto:jw.9.0.2.9.126@gmail.com"">jw.9.0.2.9.126@gmail.com</a>
<a href=""mailto:jw9.029.1.2.6@gmail.com"">jw9.029.1.2.6@gmail.com</a>
<a href=""mailto:jw.90.29.12.6@gmail.com"">jw.90.29.12.6@gmail.com</a>
<a href=""mailto:jw90.2.9126@gmail.com"">jw90.2.9126@gmail.com</a>
<a href=""mailto:j.w.90.29.1.26@gmail.com"">j.w.90.29.1.26@gmail.com</a>
<a href=""mailto:j.w.9.029.126@gmail.com"">j.w.9.029.126@gmail.com</a>
<a href=""mailto:j.w9.0.2.9126@gmail.com"">j.w9.0.2.9126@gmail.com</a>
<a href=""mailto:jw.9.0.29.12.6@gmail.com"">jw.9.0.29.12.6@gmail.com</a>
<a href=""mailto:j.w.9.0.29126@gmail.com"">j.w.9.0.29126@gmail.com</a>
<a href=""mailto:jw90.29.12.6@gmail.com"">jw90.29.12.6@gmail.com</a>
<a href=""mailto:jw.9.0.2.912.6@gmail.com"">jw.9.0.2.912.6@gmail.com</a>
<a href=""mailto:j.w9.0.29126@gmail.com"">j.w9.0.29126@gmail.com</a>
<a href=""mailto:jw9.0.2.912.6@gmail.com"">jw9.0.2.912.6@gmail.com</a>
<a href=""mailto:j.w.9.0.291.26@gmail.com"">j.w.9.0.291.26@gmail.com</a>
<a href=""mailto:jw9029.12.6@gmail.com"">jw9029.12.6@gmail.com</a>
<a href=""mailto:j.w.902.9126@gmail.com"">j.w.902.9126@gmail.com</a>
<a href=""mailto:j.w.90.2.9.12.6@gmail.com"">j.w.90.2.9.12.6@gmail.com</a>
<a href=""mailto:j.w.9.029126@gmail.com"">j.w.9.029126@gmail.com</a>
<a href=""mailto:jw9.02.9.12.6@gmail.com"">jw9.02.9.12.6@gmail.com</a>
<a href=""mailto:jw90.29.1.26@gmail.com"">jw90.29.1.26@gmail.com</a>
<a href=""mailto:j.w.902.9.126@gmail.com"">j.w.902.9.126@gmail.com</a>
<a href=""mailto:j.w.9029.1.26@gmail.com"">j.w.9029.1.26@gmail.com</a>
<a href=""mailto:jw.90.291.2.6@gmail.com"">jw.90.291.2.6@gmail.com</a>
<a href=""mailto:j.w.9029.126@gmail.com"">j.w.9029.126@gmail.com</a>
<a href=""mailto:jw90.291.2.6@gmail.com"">jw90.291.2.6@gmail.com</a>
<a href=""mailto:jw90.2.9.12.6@gmail.com"">jw90.2.9.12.6@gmail.com</a>
<a href=""mailto:jw90.2912.6@gmail.com"">jw90.2912.6@gmail.com</a>
<a href=""mailto:j.w9.02.912.6@gmail.com"">j.w9.02.912.6@gmail.com</a>
<a href=""mailto:j.w.9.029.1.26@gmail.com"">j.w.9.029.1.26@gmail.com</a>
<a href=""mailto:j.w.90.2.91.26@gmail.com"">j.w.90.2.91.26@gmail.com</a>
<a href=""mailto:j.w9.0.29.126@gmail.com"">j.w9.0.29.126@gmail.com</a>
<a href=""mailto:jw90.2.9.1.2.6@gmail.com"">jw90.2.9.1.2.6@gmail.com</a>
<a href=""mailto:j.w.90291.26@gmail.com"">j.w.90291.26@gmail.com</a>
<a href=""mailto:j.w.902.9.1.2.6@gmail.com"">j.w.902.9.1.2.6@gmail.com</a>
<a href=""mailto:jw.9.02912.6@gmail.com"">jw.9.02912.6@gmail.com</a>
<a href=""mailto:jw.9.0.291.26@gmail.com"">jw.9.0.291.26@gmail.com</a>
<a href=""mailto:j.w9.0291.26@gmail.com"">j.w9.0291.26@gmail.com</a>
<a href=""mailto:jw.9.0.2.9.1.26@gmail.com"">jw.9.0.2.9.1.26@gmail.com</a>
<a href=""mailto:j.w902.9.12.6@gmail.com"">j.w902.9.12.6@gmail.com</a>
<a href=""mailto:jw.9029.126@gmail.com"">jw.9029.126@gmail.com</a>
<a href=""mailto:j.w9.0.29.1.2.6@gmail.com"">j.w9.0.29.1.2.6@gmail.com</a>
<a href=""mailto:jw90.29.126@gmail.com"">jw90.29.126@gmail.com</a>
<a href=""mailto:jw.9.029.1.2.6@gmail.com"">jw.9.029.1.2.6@gmail.com</a>
<a href=""mailto:j.w9.02.9126@gmail.com"">j.w9.02.9126@gmail.com</a>
<a href=""mailto:jw.9.0.29126@gmail.com"">jw.9.0.29126@gmail.com</a>
<a href=""mailto:jw.9.0291.2.6@gmail.com"">jw.9.0291.2.6@gmail.com</a>
<a href=""mailto:jw.9.0.29.126@gmail.com"">jw.9.0.29.126@gmail.com</a>
<a href=""mailto:jw.90.2.91.26@gmail.com"">jw.90.2.91.26@gmail.com</a>
<a href=""mailto:j.w.9.029.1.2.6@gmail.com"">j.w.9.029.1.2.6@gmail.com</a>
<a href=""mailto:j.w.9029126@gmail.com"">j.w.9029126@gmail.com</a>
<a href=""mailto:jw9.02.9126@gmail.com"">jw9.02.9126@gmail.com</a>
<a href=""mailto:jw.9.02.9.1.26@gmail.com"">jw.9.02.9.1.26@gmail.com</a>
<a href=""mailto:jw.90.2.9.1.2.6@gmail.com"">jw.90.2.9.1.2.6@gmail.com</a>
<a href=""mailto:j.w9.0.2912.6@gmail.com"">j.w9.0.2912.6@gmail.com</a>
<a href=""mailto:j.w.9.02.9126@gmail.com"">j.w.9.02.9126@gmail.com</a>
<a href=""mailto:jw.9.0.2.91.2.6@gmail.com"">jw.9.0.2.91.2.6@gmail.com</a>
<a href=""mailto:jw9.0.2.9.12.6@gmail.com"">jw9.0.2.9.12.6@gmail.com</a>
<a href=""mailto:j.w.9.02.9.126@gmail.com"">j.w.9.02.9.126@gmail.com</a>
<a href=""mailto:jw.9029.1.2.6@gmail.com"">jw.9029.1.2.6@gmail.com</a>
<a href=""mailto:jw902912.6@gmail.com"">jw902912.6@gmail.com</a>
<a href=""mailto:j.w.9.02.9.12.6@gmail.com"">j.w.9.02.9.12.6@gmail.com</a>
<a href=""mailto:j.w.90.2.9.1.26@gmail.com"">j.w.90.2.9.1.26@gmail.com</a>
<a href=""mailto:jw.9.0.2.9126@gmail.com"">jw.9.0.2.9126@gmail.com</a>
<a href=""mailto:jw9.0.2.91.26@gmail.com"">jw9.0.2.91.26@gmail.com</a>
<a href=""mailto:jw902.91.26@gmail.com"">jw902.91.26@gmail.com</a>
<a href=""mailto:jw.9.02.91.26@gmail.com"">jw.9.02.91.26@gmail.com</a>
<a href=""mailto:j.w9.0.2.91.26@gmail.com"">j.w9.0.2.91.26@gmail.com</a>
<a href=""mailto:j.w.9.0.2.91.26@gmail.com"">j.w.9.0.2.91.26@gmail.com</a>
<a href=""mailto:jw.90.2.9.12.6@gmail.com"">jw.90.2.9.12.6@gmail.com</a>
<a href=""mailto:j.w9.02.91.2.6@gmail.com"">j.w9.02.91.2.6@gmail.com</a>
<a href=""mailto:jw.9.02.9126@gmail.com"">jw.9.02.9126@gmail.com</a>
<a href=""mailto:j.w90.2.9.1.2.6@gmail.com"">j.w90.2.9.1.2.6@gmail.com</a>
<a href=""mailto:jw.9029.1.26@gmail.com"">jw.9029.1.26@gmail.com</a>
<a href=""mailto:jw90.291.26@gmail.com"">jw90.291.26@gmail.com</a>
<a href=""mailto:jw.902.912.6@gmail.com"">jw.902.912.6@gmail.com</a>
<a href=""mailto:jw.90.29.126@gmail.com"">jw.90.29.126@gmail.com</a>
<a href=""mailto:jw.902.91.2.6@gmail.com"">jw.902.91.2.6@gmail.com</a>
<a href=""mailto:j.w9.029.1.26@gmail.com"">j.w9.029.1.26@gmail.com</a>
<a href=""mailto:jw9.0.291.2.6@gmail.com"">jw9.0.291.2.6@gmail.com</a>
<a href=""mailto:jw9.0.2.9.1.26@gmail.com"">jw9.0.2.9.1.26@gmail.com</a>
<a href=""mailto:jw90.29.1.2.6@gmail.com"">jw90.29.1.2.6@gmail.com</a>
<a href=""mailto:jw902.9.1.2.6@gmail.com"">jw902.9.1.2.6@gmail.com</a>
<a href=""mailto:j.w9.029.1.2.6@gmail.com"">j.w9.029.1.2.6@gmail.com</a>
<a href=""mailto:jw.902.9126@gmail.com"">jw.902.9126@gmail.com</a>
<a href=""mailto:j.w9.02.91.26@gmail.com"">j.w9.02.91.26@gmail.com</a>
<a href=""mailto:jw.902912.6@gmail.com"">jw.902912.6@gmail.com</a>
<a href=""mailto:j.w9.0.2.9.1.26@gmail.com"">j.w9.0.2.9.1.26@gmail.com</a>
<a href=""mailto:j.w.9.02.91.26@gmail.com"">j.w.9.02.91.26@gmail.com</a>
<a href=""mailto:j.w9.0.29.12.6@gmail.com"">j.w9.0.29.12.6@gmail.com</a>
<a href=""mailto:j.w.902.91.26@gmail.com"">j.w.902.91.26@gmail.com</a>
<a href=""mailto:jw.9029126@gmail.com"">jw.9029126@gmail.com</a>
<a href=""mailto:j.w9029.1.2.6@gmail.com"">j.w9029.1.2.6@gmail.com</a>
<a href=""mailto:jw9.029.126@gmail.com"">jw9.029.126@gmail.com</a>
<a href=""mailto:jw.9.0291.26@gmail.com"">jw.9.0291.26@gmail.com</a>
<a href=""mailto:j.w902.9.1.2.6@gmail.com"">j.w902.9.1.2.6@gmail.com</a>
<a href=""mailto:jw.9.0.291.2.6@gmail.com"">jw.9.0.291.2.6@gmail.com</a>
<a href=""mailto:jw9029.126@gmail.com"">jw9029.126@gmail.com</a>
<a href=""mailto:j.w9.02.9.12.6@gmail.com"">j.w9.02.9.12.6@gmail.com</a>
<a href=""mailto:jw9.0291.2.6@gmail.com"">jw9.0291.2.6@gmail.com</a>
<a href=""mailto:j.w.90.29.1.2.6@gmail.com"">j.w.90.29.1.2.6@gmail.com</a>
<a href=""mailto:jw.90.2.9.1.26@gmail.com"">jw.90.2.9.1.26@gmail.com</a>
<a href=""mailto:j.w90.291.2.6@gmail.com"">j.w90.291.2.6@gmail.com</a>
<a href=""mailto:j.w.90.29126@gmail.com"">j.w.90.29126@gmail.com</a>
<a href=""mailto:jw9.0.29.1.26@gmail.com"">jw9.0.29.1.26@gmail.com</a>
<a href=""mailto:j.w.9.0.2.912.6@gmail.com"">j.w.9.0.2.912.6@gmail.com</a>
<a href=""mailto:jw9.02.912.6@gmail.com"">jw9.02.912.6@gmail.com</a>
<a href=""mailto:jw9.02912.6@gmail.com"">jw9.02912.6@gmail.com</a>
<a href=""mailto:j.w9029.1.26@gmail.com"">j.w9029.1.26@gmail.com</a>
<a href=""mailto:j.w90291.26@gmail.com"">j.w90291.26@gmail.com</a>
<a href=""mailto:jw.9029.12.6@gmail.com"">jw.9029.12.6@gmail.com</a>
<a href=""mailto:jw.90.2.91.2.6@gmail.com"">jw.90.2.91.2.6@gmail.com</a>
<a href=""mailto:jw90.2.9.1.26@gmail.com"">jw90.2.9.1.26@gmail.com</a>
<a href=""mailto:j.w90.2912.6@gmail.com"">j.w90.2912.6@gmail.com</a>
<a href=""mailto:j.w902.9.1.26@gmail.com"">j.w902.9.1.26@gmail.com</a>
<a href=""mailto:jw9.0.2.91.2.6@gmail.com"">jw9.0.2.91.2.6@gmail.com</a>
<a href=""mailto:jw.902.91.26@gmail.com"">jw.902.91.26@gmail.com</a>
<a href=""mailto:j.w90.2.9.1.26@gmail.com"">j.w90.2.9.1.26@gmail.com</a>
<a href=""mailto:jw9.0.29.1.2.6@gmail.com"">jw9.0.29.1.2.6@gmail.com</a>
<a href=""mailto:jw.9.029.1.26@gmail.com"">jw.9.029.1.26@gmail.com</a>
<a href=""mailto:j.w90.2.9.12.6@gmail.com"">j.w90.2.9.12.6@gmail.com</a>
<a href=""mailto:jw.90.29.1.2.6@gmail.com"">jw.90.29.1.2.6@gmail.com</a>
<a href=""mailto:jw9.02.9.126@gmail.com"">jw9.02.9.126@gmail.com</a>
<a href=""mailto:jw9.0.2.9126@gmail.com"">jw9.0.2.9126@gmail.com</a>
<a href=""mailto:j.w.9.029.12.6@gmail.com"">j.w.9.029.12.6@gmail.com</a>
<a href=""mailto:jw9.0.29.12.6@gmail.com"">jw9.0.29.12.6@gmail.com</a>
<a href=""mailto:jw.90.2912.6@gmail.com"">jw.90.2912.6@gmail.com</a>
<a href=""mailto:j.w9.0.29.1.26@gmail.com"">j.w9.0.29.1.26@gmail.com</a>
<a href=""mailto:j.w.9.0.2.9.12.6@gmail.com"">j.w.9.0.2.9.12.6@gmail.com</a>
<a href=""mailto:jw.90.2.9126@gmail.com"">jw.90.2.9126@gmail.com</a>
<a href=""mailto:j.w90.29126@gmail.com"">j.w90.29126@gmail.com</a>
<a href=""mailto:jw.90.291.26@gmail.com"">jw.90.291.26@gmail.com</a>
<a href=""mailto:j.w90.29.1.26@gmail.com"">j.w90.29.1.26@gmail.com</a>
<a href=""mailto:j.w9029.12.6@gmail.com"">j.w9029.12.6@gmail.com</a>
<a href=""mailto:jw.902.9.1.2.6@gmail.com"">jw.902.9.1.2.6@gmail.com</a>
<a href=""mailto:j.w.9.0.29.12.6@gmail.com"">j.w.9.0.29.12.6@gmail.com</a>
<a href=""mailto:j.w.9.02.912.6@gmail.com"">j.w.9.02.912.6@gmail.com</a>
<a href=""mailto:jw.9.02.9.1.2.6@gmail.com"">jw.9.02.9.1.2.6@gmail.com</a>
<a href=""mailto:jw9.029.12.6@gmail.com"">jw9.029.12.6@gmail.com</a>
<a href=""mailto:jw.9.029.126@gmail.com"">jw.9.029.126@gmail.com</a>
<a href=""mailto:jw.9.0.29.1.26@gmail.com"">jw.9.0.29.1.26@gmail.com</a>
<a href=""mailto:j.w.90.2.9.1.2.6@gmail.com"">j.w.90.2.9.1.2.6@gmail.com</a>
<a href=""mailto:jw9.0.291.26@gmail.com"">jw9.0.291.26@gmail.com</a>
<a href=""mailto:jw9029.1.26@gmail.com"">jw9029.1.26@gmail.com</a>
<a href=""mailto:j.w.90.291.2.6@gmail.com"">j.w.90.291.2.6@gmail.com</a>
<a href=""mailto:jw.9.029.12.6@gmail.com"">jw.9.029.12.6@gmail.com</a>
<a href=""mailto:jw.9.02.9.12.6@gmail.com"">jw.9.02.9.12.6@gmail.com</a>
<a href=""mailto:j.w9.0.2.9.1.2.6@gmail.com"">j.w9.0.2.9.1.2.6@gmail.com</a>
<a href=""mailto:j.w.9029.12.6@gmail.com"">j.w.9029.12.6@gmail.com</a>
<a href=""mailto:j.w.90.2.9126@gmail.com"">j.w.90.2.9126@gmail.com</a>
<a href=""mailto:j.w.90.2.912.6@gmail.com"">j.w.90.2.912.6@gmail.com</a>
<a href=""mailto:jw90.2.912.6@gmail.com"">jw90.2.912.6@gmail.com</a>
<a href=""mailto:j.w902912.6@gmail.com"">j.w902912.6@gmail.com</a>
<a href=""mailto:jw9.02.91.2.6@gmail.com"">jw9.02.91.2.6@gmail.com</a>
<a href=""mailto:j.w90.29.12.6@gmail.com"">j.w90.29.12.6@gmail.com</a>
<a href=""mailto:jw902.9.1.26@gmail.com"">jw902.9.1.26@gmail.com</a>
<a href=""mailto:j.w.9.0.2.9126@gmail.com"">j.w.9.0.2.9126@gmail.com</a>
<a href=""mailto:j.w.90.29.126@gmail.com"">j.w.90.29.126@gmail.com</a>
<a href=""mailto:jw.9.0.2.9.12.6@gmail.com"">jw.9.0.2.9.12.6@gmail.com</a>
<a href=""mailto:j.w.902.9.1.26@gmail.com"">j.w.902.9.1.26@gmail.com</a>
<a href=""mailto:jw9.029126@gmail.com"">jw9.029126@gmail.com</a>
<a href=""mailto:jw.902.9.12.6@gmail.com"">jw.902.9.12.6@gmail.com</a>
<a href=""mailto:j.w.9.0.2.91.2.6@gmail.com"">j.w.9.0.2.91.2.6@gmail.com</a>
<a href=""mailto:j.w.9.0.2912.6@gmail.com"">j.w.9.0.2912.6@gmail.com</a>
<a href=""mailto:j.w.90.29.12.6@gmail.com"">j.w.90.29.12.6@gmail.com</a>
<a href=""mailto:jw9.0.29126@gmail.com"">jw9.0.29126@gmail.com</a>
<a href=""mailto:j.w9.0.2.912.6@gmail.com"">j.w9.0.2.912.6@gmail.com</a>
<a href=""mailto:jw9.0.29.126@gmail.com"">jw9.0.29.126@gmail.com</a>
<a href=""mailto:jw.9.029126@gmail.com"">jw.9.029126@gmail.com</a>
<a href=""mailto:jw9.0.2912.6@gmail.com"">jw9.0.2912.6@gmail.com</a>
<a href=""mailto:j.w.9.02.9.1.2.6@gmail.com"">j.w.9.02.9.1.2.6@gmail.com</a>
<a href=""mailto:j.w9.0.291.26@gmail.com"">j.w9.0.291.26@gmail.com</a>
<a href=""mailto:jw.902.9.126@gmail.com"">jw.902.9.126@gmail.com</a>
<a href=""mailto:jw.9.02.912.6@gmail.com"">jw.9.02.912.6@gmail.com</a>
<a href=""mailto:j.w90.29.1.2.6@gmail.com"">j.w90.29.1.2.6@gmail.com</a>
<a href=""mailto:jw.902.9.1.26@gmail.com"">jw.902.9.1.26@gmail.com</a>
<a href=""mailto:jw.90.29126@gmail.com"">jw.90.29126@gmail.com</a>
<a href=""mailto:j.w9.029126@gmail.com"">j.w9.029126@gmail.com</a>
<a href=""mailto:j.w.90.291.26@gmail.com"">j.w.90.291.26@gmail.com</a>
<a href=""mailto:j.w9.0.2.9.126@gmail.com"">j.w9.0.2.9.126@gmail.com</a>
<a href=""mailto:j.w9.0.2.9.12.6@gmail.com"">j.w9.0.2.9.12.6@gmail.com</a>
<a href=""mailto:j.w90.29.126@gmail.com"">j.w90.29.126@gmail.com</a>
<a href=""mailto:j.w.902912.6@gmail.com"">j.w.902912.6@gmail.com</a>
<a href=""mailto:info@theshul.org"">info@theshul.org</a>
<a href=""mailto:info@torahblast.com"">info@torahblast.com</a>
<a href=""mailto:info@toraehblast.com"">info@toraehblast.com</a>
<a href=""mailto:notices@shulcloud.com"">notices@shulcloud.com</a>
<a href=""mailto:copyright@shulcloud.com"">copyright@shulcloud.com</a>
<a href=""mailto:geri@theshul.org"">geri@theshul.org</a>
<a href=""mailto:questions@shulcloud.com"">questions@shulcloud.com</a>
<a href=""mailto:sadjahossou@gmail.com"">sadjahossou@gmail.com</a>
<a href=""mailto:sa.dj.ahos.sou@gmail.com"">sa.dj.ahos.sou@gmail.com</a>
<a href=""mailto:sad.j.ah.os.sou@gmail.com"">sad.j.ah.os.sou@gmail.com</a>
<a href=""mailto:s.ad.j.aho.ssou@gmail.com"">s.ad.j.aho.ssou@gmail.com</a>
<a href=""mailto:s.a.dja.h.o.sso.u@gmail.com"">s.a.dja.h.o.sso.u@gmail.com</a>
<a href=""mailto:s.a.dj.ahos.so.u@gmail.com"">s.a.dj.ahos.so.u@gmail.com</a>
<a href=""mailto:sadj.ah.os.so.u@gmail.com"">sadj.ah.os.so.u@gmail.com</a>
<a href=""mailto:s.ad.j.ah.o.s.s.ou@gmail.com"">s.ad.j.ah.o.s.s.ou@gmail.com</a>
<a href=""mailto:s.a.dj.a.hos.sou@gmail.com"">s.a.dj.a.hos.sou@gmail.com</a>
<a href=""mailto:s.a.dj.ah.o.s.so.u@gmail.com"">s.a.dj.ah.o.s.so.u@gmail.com</a>
<a href=""mailto:sad.jahoss.ou@gmail.com"">sad.jahoss.ou@gmail.com</a>
<a href=""mailto:s.a.dj.ah.os.so.u@gmail.com"">s.a.dj.ah.os.so.u@gmail.com</a>
<a href=""mailto:s.a.d.jaho.ssou@gmail.com"">s.a.d.jaho.ssou@gmail.com</a>
<a href=""mailto:s.a.d.ja.h.o.s.s.ou@gmail.com"">s.a.d.ja.h.o.s.s.ou@gmail.com</a>
<a href=""mailto:sa.d.jah.osso.u@gmail.com"">sa.d.jah.osso.u@gmail.com</a>
<a href=""mailto:sa.dj.ah.oss.ou@gmail.com"">sa.dj.ah.oss.ou@gmail.com</a>
<a href=""mailto:s.a.dj.a.ho.sso.u@gmail.com"">s.a.dj.a.ho.sso.u@gmail.com</a>
<a href=""mailto:s.adj.a.hos.s.ou@gmail.com"">s.adj.a.hos.s.ou@gmail.com</a>
<a href=""mailto:sad.j.ah.os.so.u@gmail.com"">sad.j.ah.os.so.u@gmail.com</a>
<a href=""mailto:s.a.dj.ah.os.s.o.u@gmail.com"">s.a.dj.ah.os.s.o.u@gmail.com</a>
<a href=""mailto:sad.jaho.ssou@gmail.com"">sad.jaho.ssou@gmail.com</a>
<a href=""mailto:s.ad.ja.h.o.s.sou@gmail.com"">s.ad.ja.h.o.s.sou@gmail.com</a>
<a href=""mailto:s.a.d.j.ahos.s.ou@gmail.com"">s.a.d.j.ahos.s.ou@gmail.com</a>
<a href=""mailto:s.ad.ja.h.o.ssou@gmail.com"">s.ad.ja.h.o.ssou@gmail.com</a>
<a href=""mailto:sad.ja.h.o.s.so.u@gmail.com"">sad.ja.h.o.s.so.u@gmail.com</a>
<a href=""mailto:sad.jah.o.s.so.u@gmail.com"">sad.jah.o.s.so.u@gmail.com</a>
<a href=""mailto:sadja.ho.ssou@gmail.com"">sadja.ho.ssou@gmail.com</a>
<a href=""mailto:s.a.d.jahossou@gmail.com"">s.a.d.jahossou@gmail.com</a>
<a href=""mailto:sa.d.j.a.ho.s.so.u@gmail.com"">sa.d.j.a.ho.s.so.u@gmail.com</a>
<a href=""mailto:s.adjaho.s.so.u@gmail.com"">s.adjaho.s.so.u@gmail.com</a>
<a href=""mailto:sa.dja.ho.sso.u@gmail.com"">sa.dja.ho.sso.u@gmail.com</a>
<a href=""mailto:sa.d.j.ahoss.ou@gmail.com"">sa.d.j.ahoss.ou@gmail.com</a>
<a href=""mailto:sa.djah.oss.o.u@gmail.com"">sa.djah.oss.o.u@gmail.com</a>
<a href=""mailto:s.adj.a.h.os.s.o.u@gmail.com"">s.adj.a.h.os.s.o.u@gmail.com</a>
<a href=""mailto:s.a.d.j.a.h.o.ss.o.u@gmail.com"">s.a.d.j.a.h.o.ss.o.u@gmail.com</a>
<a href=""mailto:s.a.d.j.ahossou@gmail.com"">s.a.d.j.ahossou@gmail.com</a>
<a href=""mailto:s.adja.hosso.u@gmail.com"">s.adja.hosso.u@gmail.com</a>
<a href=""mailto:s.adjaho.ss.o.u@gmail.com"">s.adjaho.ss.o.u@gmail.com</a>
<a href=""mailto:sa.d.ja.ho.sso.u@gmail.com"">sa.d.ja.ho.sso.u@gmail.com</a>
<a href=""mailto:s.a.d.jaho.sso.u@gmail.com"">s.a.d.jaho.sso.u@gmail.com</a>
<a href=""mailto:sadj.a.h.o.s.sou@gmail.com"">sadj.a.h.o.s.sou@gmail.com</a>
<a href=""mailto:sadj.ahos.s.ou@gmail.com"">sadj.ahos.s.ou@gmail.com</a>
<a href=""mailto:sad.j.aho.ss.o.u@gmail.com"">sad.j.aho.ss.o.u@gmail.com</a>
<a href=""mailto:sadj.a.h.o.s.s.ou@gmail.com"">sadj.a.h.o.s.s.ou@gmail.com</a>
<a href=""mailto:sad.j.a.h.osso.u@gmail.com"">sad.j.a.h.osso.u@gmail.com</a>
<a href=""mailto:s.a.djahoss.o.u@gmail.com"">s.a.djahoss.o.u@gmail.com</a>
<a href=""mailto:s.adj.a.h.oss.ou@gmail.com"">s.adj.a.h.oss.ou@gmail.com</a>
<a href=""mailto:s.ad.j.a.ho.s.so.u@gmail.com"">s.ad.j.a.ho.s.so.u@gmail.com</a>
<a href=""mailto:s.adjahos.so.u@gmail.com"">s.adjahos.so.u@gmail.com</a>
<a href=""mailto:sa.dja.ho.s.s.o.u@gmail.com"">sa.dja.ho.s.s.o.u@gmail.com</a>
<a href=""mailto:s.a.dja.h.o.ss.ou@gmail.com"">s.a.dja.h.o.ss.ou@gmail.com</a>
<a href=""mailto:s.a.d.ja.ho.s.sou@gmail.com"">s.a.d.ja.ho.s.sou@gmail.com</a>
<a href=""mailto:sa.d.jah.o.sso.u@gmail.com"">sa.d.jah.o.sso.u@gmail.com</a>
<a href=""mailto:sa.d.j.a.h.o.ss.o.u@gmail.com"">sa.d.j.a.h.o.ss.o.u@gmail.com</a>
<a href=""mailto:sadjaho.ssou@gmail.com"">sadjaho.ssou@gmail.com</a>
<a href=""mailto:sad.j.ah.os.s.o.u@gmail.com"">sad.j.ah.os.s.o.u@gmail.com</a>
<a href=""mailto:s.ad.jah.os.so.u@gmail.com"">s.ad.jah.os.so.u@gmail.com</a>
<a href=""mailto:s.ad.jah.ossou@gmail.com"">s.ad.jah.ossou@gmail.com</a>
<a href=""mailto:sadj.ahossou@gmail.com"">sadj.ahossou@gmail.com</a>
<a href=""mailto:s.a.d.jahos.s.o.u@gmail.com"">s.a.d.jahos.s.o.u@gmail.com</a>
<a href=""mailto:sad.j.a.hos.sou@gmail.com"">sad.j.a.hos.sou@gmail.com</a>
<a href=""mailto:s.a.dj.a.h.ossou@gmail.com"">s.a.dj.a.h.ossou@gmail.com</a>
<a href=""mailto:sadj.aho.s.s.o.u@gmail.com"">sadj.aho.s.s.o.u@gmail.com</a>
<a href=""mailto:sa.d.j.aho.s.sou@gmail.com"">sa.d.j.aho.s.sou@gmail.com</a>
<a href=""mailto:s.a.d.jahoss.o.u@gmail.com"">s.a.d.jahoss.o.u@gmail.com</a>
<a href=""mailto:sad.jah.o.ss.o.u@gmail.com"">sad.jah.o.ss.o.u@gmail.com</a>
<a href=""mailto:sadj.a.h.os.sou@gmail.com"">sadj.a.h.os.sou@gmail.com</a>
<a href=""mailto:sa.d.ja.h.o.s.s.o.u@gmail.com"">sa.d.ja.h.o.s.s.o.u@gmail.com</a>
<a href=""mailto:s.a.dj.aho.ss.o.u@gmail.com"">s.a.dj.aho.ss.o.u@gmail.com</a>
<a href=""mailto:s.ad.ja.h.oss.ou@gmail.com"">s.ad.ja.h.oss.ou@gmail.com</a>
<a href=""mailto:s.ad.j.a.h.os.sou@gmail.com"">s.ad.j.a.h.os.sou@gmail.com</a>
<a href=""mailto:sa.d.ja.hossou@gmail.com"">sa.d.ja.hossou@gmail.com</a>
<a href=""mailto:s.a.d.jah.osso.u@gmail.com"">s.a.d.jah.osso.u@gmail.com</a>
<a href=""mailto:sadj.a.h.os.s.o.u@gmail.com"">sadj.a.h.os.s.o.u@gmail.com</a>
<a href=""mailto:s.a.d.ja.ho.s.so.u@gmail.com"">s.a.d.ja.ho.s.so.u@gmail.com</a>
<a href=""mailto:s.a.djah.os.s.ou@gmail.com"">s.a.djah.os.s.ou@gmail.com</a>
<a href=""mailto:sadjah.oss.ou@gmail.com"">sadjah.oss.ou@gmail.com</a>
<a href=""mailto:s.ad.ja.hos.so.u@gmail.com"">s.ad.ja.hos.so.u@gmail.com</a>
<a href=""mailto:sa.dja.h.o.ssou@gmail.com"">sa.dja.h.o.ssou@gmail.com</a>
<a href=""mailto:sa.d.j.a.ho.ss.o.u@gmail.com"">sa.d.j.a.ho.ss.o.u@gmail.com</a>
<a href=""mailto:sad.jah.ossou@gmail.com"">sad.jah.ossou@gmail.com</a>
<a href=""mailto:s.ad.jahossou@gmail.com"">s.ad.jahossou@gmail.com</a>
<a href=""mailto:sa.dja.hoss.ou@gmail.com"">sa.dja.hoss.ou@gmail.com</a>
<a href=""mailto:s.a.djaho.sso.u@gmail.com"">s.a.djaho.sso.u@gmail.com</a>
<a href=""mailto:s.ad.j.a.h.o.sso.u@gmail.com"">s.ad.j.a.h.o.sso.u@gmail.com</a>
<a href=""mailto:sadjaho.s.s.o.u@gmail.com"">sadjaho.s.s.o.u@gmail.com</a>
<a href=""mailto:sa.d.jahos.sou@gmail.com"">sa.d.jahos.sou@gmail.com</a>
<a href=""mailto:sad.ja.hoss.o.u@gmail.com"">sad.ja.hoss.o.u@gmail.com</a>
<a href=""mailto:s.adjahoss.ou@gmail.com"">s.adjahoss.ou@gmail.com</a>
<a href=""mailto:sad.ja.h.oss.ou@gmail.com"">sad.ja.h.oss.ou@gmail.com</a>
<a href=""mailto:s.a.dj.a.h.osso.u@gmail.com"">s.a.dj.a.h.osso.u@gmail.com</a>
<a href=""mailto:s.adja.ho.s.s.o.u@gmail.com"">s.adja.ho.s.s.o.u@gmail.com</a>
<a href=""mailto:s.a.dj.ah.o.s.sou@gmail.com"">s.a.dj.ah.o.s.sou@gmail.com</a>
<a href=""mailto:sad.ja.h.o.s.s.ou@gmail.com"">sad.ja.h.o.s.s.ou@gmail.com</a>
<a href=""mailto:s.a.dj.ah.os.sou@gmail.com"">s.a.dj.ah.os.sou@gmail.com</a>
<a href=""mailto:sadj.a.h.os.s.ou@gmail.com"">sadj.a.h.os.s.ou@gmail.com</a>
<a href=""mailto:s.a.dj.ah.os.s.ou@gmail.com"">s.a.dj.ah.os.s.ou@gmail.com</a>
<a href=""mailto:s.a.d.ja.h.oss.ou@gmail.com"">s.a.d.ja.h.oss.ou@gmail.com</a>
<a href=""mailto:s.a.dja.h.os.s.ou@gmail.com"">s.a.dja.h.os.s.ou@gmail.com</a>
<a href=""mailto:s.a.dja.h.o.ss.o.u@gmail.com"">s.a.dja.h.o.ss.o.u@gmail.com</a>
<a href=""mailto:sadj.a.hoss.o.u@gmail.com"">sadj.a.hoss.o.u@gmail.com</a>
<a href=""mailto:sad.ja.hosso.u@gmail.com"">sad.ja.hosso.u@gmail.com</a>
<a href=""mailto:s.ad.j.a.ho.s.sou@gmail.com"">s.ad.j.a.ho.s.sou@gmail.com</a>
<a href=""mailto:sad.ja.ho.s.sou@gmail.com"">sad.ja.ho.s.sou@gmail.com</a>
<a href=""mailto:sa.dj.a.ho.s.s.ou@gmail.com"">sa.dj.a.ho.s.s.ou@gmail.com</a>
<a href=""mailto:s.adjaho.ssou@gmail.com"">s.adjaho.ssou@gmail.com</a>
<a href=""mailto:sa.d.j.ahoss.o.u@gmail.com"">sa.d.j.ahoss.o.u@gmail.com</a>
<a href=""mailto:s.ad.j.aho.s.so.u@gmail.com"">s.ad.j.aho.s.so.u@gmail.com</a>
<a href=""mailto:sad.j.ah.o.s.s.o.u@gmail.com"">sad.j.ah.o.s.s.o.u@gmail.com</a>
<a href=""mailto:s.a.d.j.ahosso.u@gmail.com"">s.a.d.j.ahosso.u@gmail.com</a>
<a href=""mailto:sa.dja.h.ossou@gmail.com"">sa.dja.h.ossou@gmail.com</a>
<a href=""mailto:s.adja.h.o.ss.ou@gmail.com"">s.adja.h.o.ss.ou@gmail.com</a>
<a href=""mailto:sa.dj.ah.o.ss.ou@gmail.com"">sa.dj.ah.o.ss.ou@gmail.com</a>
<a href=""mailto:sa.d.jahosso.u@gmail.com"">sa.d.jahosso.u@gmail.com</a>
<a href=""mailto:s.adj.ah.o.ssou@gmail.com"">s.adj.ah.o.ssou@gmail.com</a>
<a href=""mailto:sadja.h.o.ssou@gmail.com"">sadja.h.o.ssou@gmail.com</a>
<a href=""mailto:sadjah.o.s.s.o.u@gmail.com"">sadjah.o.s.s.o.u@gmail.com</a>
<a href=""mailto:sad.jahos.s.ou@gmail.com"">sad.jahos.s.ou@gmail.com</a>
<a href=""mailto:s.ad.j.a.h.osso.u@gmail.com"">s.ad.j.a.h.osso.u@gmail.com</a>
<a href=""mailto:s.ad.jah.os.s.o.u@gmail.com"">s.ad.jah.os.s.o.u@gmail.com</a>
<a href=""mailto:sa.d.j.ah.o.ssou@gmail.com"">sa.d.j.ah.o.ssou@gmail.com</a>
<a href=""mailto:s.ad.j.a.hossou@gmail.com"">s.ad.j.a.hossou@gmail.com</a>
<a href=""mailto:sad.j.a.h.os.s.o.u@gmail.com"">sad.j.a.h.os.s.o.u@gmail.com</a>
<a href=""mailto:sad.jahoss.o.u@gmail.com"">sad.jahoss.o.u@gmail.com</a>
<a href=""mailto:sad.j.a.ho.s.so.u@gmail.com"">sad.j.a.ho.s.so.u@gmail.com</a>
<a href=""mailto:sad.jah.o.s.s.ou@gmail.com"">sad.jah.o.s.s.ou@gmail.com</a>
<a href=""mailto:s.ad.jah.o.s.s.o.u@gmail.com"">s.ad.jah.o.s.s.o.u@gmail.com</a>
<a href=""mailto:s.adja.hos.s.o.u@gmail.com"">s.adja.hos.s.o.u@gmail.com</a>
<a href=""mailto:sad.ja.h.o.s.sou@gmail.com"">sad.ja.h.o.s.sou@gmail.com</a>
<a href=""mailto:s.adj.aho.s.s.ou@gmail.com"">s.adj.aho.s.s.ou@gmail.com</a>
<a href=""mailto:sa.dja.ho.s.sou@gmail.com"">sa.dja.ho.s.sou@gmail.com</a>
<a href=""mailto:sadjahos.so.u@gmail.com"">sadjahos.so.u@gmail.com</a>
<a href=""mailto:s.ad.jah.o.s.so.u@gmail.com"">s.ad.jah.o.s.so.u@gmail.com</a>
<a href=""mailto:s.a.dj.a.h.o.s.so.u@gmail.com"">s.a.dj.a.h.o.s.so.u@gmail.com</a>
<a href=""mailto:sadj.aho.ss.o.u@gmail.com"">sadj.aho.ss.o.u@gmail.com</a>
<a href=""mailto:s.ad.ja.hoss.o.u@gmail.com"">s.ad.ja.hoss.o.u@gmail.com</a>
<a href=""mailto:s.a.dja.ho.s.sou@gmail.com"">s.a.dja.ho.s.sou@gmail.com</a>
<a href=""mailto:sa.d.ja.ho.ssou@gmail.com"">sa.d.ja.ho.ssou@gmail.com</a>
<a href=""mailto:s.a.d.j.a.h.o.ss.ou@gmail.com"">s.a.d.j.a.h.o.ss.ou@gmail.com</a>
<a href=""mailto:s.adj.a.h.o.s.so.u@gmail.com"">s.adj.a.h.o.s.so.u@gmail.com</a>
<a href=""mailto:sadj.a.ho.ssou@gmail.com"">sadj.a.ho.ssou@gmail.com</a>
<a href=""mailto:s.ad.j.a.hosso.u@gmail.com"">s.ad.j.a.hosso.u@gmail.com</a>
<a href=""mailto:s.a.djaho.ss.ou@gmail.com"">s.a.djaho.ss.ou@gmail.com</a>
<a href=""mailto:s.ad.j.a.h.ossou@gmail.com"">s.ad.j.a.h.ossou@gmail.com</a>
<a href=""mailto:s.adj.aho.sso.u@gmail.com"">s.adj.aho.sso.u@gmail.com</a>
<a href=""mailto:sad.j.a.hos.s.ou@gmail.com"">sad.j.a.hos.s.ou@gmail.com</a>
<a href=""mailto:s.a.dja.hossou@gmail.com"">s.a.dja.hossou@gmail.com</a>
<a href=""mailto:sadjah.os.s.ou@gmail.com"">sadjah.os.s.ou@gmail.com</a>
<a href=""mailto:sa.djahoss.ou@gmail.com"">sa.djahoss.ou@gmail.com</a>
<a href=""mailto:s.ad.jah.osso.u@gmail.com"">s.ad.jah.osso.u@gmail.com</a>
<a href=""mailto:s.ad.jaho.s.so.u@gmail.com"">s.ad.jaho.s.so.u@gmail.com</a>
<a href=""mailto:s.a.d.j.a.h.o.s.so.u@gmail.com"">s.a.d.j.a.h.o.s.so.u@gmail.com</a>
<a href=""mailto:s.a.d.j.aho.ss.o.u@gmail.com"">s.a.d.j.aho.ss.o.u@gmail.com</a>
<a href=""mailto:sad.j.a.hos.so.u@gmail.com"">sad.j.a.hos.so.u@gmail.com</a>
<a href=""mailto:s.ad.jah.oss.o.u@gmail.com"">s.ad.jah.oss.o.u@gmail.com</a>
<a href=""mailto:sadj.a.h.oss.ou@gmail.com"">sadj.a.h.oss.ou@gmail.com</a>
<a href=""mailto:s.a.djaho.ssou@gmail.com"">s.a.djaho.ssou@gmail.com</a>
<a href=""mailto:s.a.d.j.a.h.o.s.s.o.u@gmail.com"">s.a.d.j.a.h.o.s.s.o.u@gmail.com</a>
<a href=""mailto:sa.dja.ho.ss.ou@gmail.com"">sa.dja.ho.ss.ou@gmail.com</a>
<a href=""mailto:sa.d.jah.os.so.u@gmail.com"">sa.d.jah.os.so.u@gmail.com</a>
<a href=""mailto:s.a.d.jah.o.sso.u@gmail.com"">s.a.d.jah.o.sso.u@gmail.com</a>
<a href=""mailto:s.a.d.ja.hos.sou@gmail.com"">s.a.d.ja.hos.sou@gmail.com</a>
<a href=""mailto:s.a.d.j.a.h.ossou@gmail.com"">s.a.d.j.a.h.ossou@gmail.com</a>
<a href=""mailto:s.adj.a.h.o.ssou@gmail.com"">s.adj.a.h.o.ssou@gmail.com</a>
<a href=""mailto:sadja.hossou@gmail.com"">sadja.hossou@gmail.com</a>
<a href=""mailto:sadjahos.s.o.u@gmail.com"">sadjahos.s.o.u@gmail.com</a>
<a href=""mailto:s.ad.j.a.ho.ss.o.u@gmail.com"">s.ad.j.a.ho.ss.o.u@gmail.com</a>
<a href=""mailto:s.a.d.j.a.h.o.s.sou@gmail.com"">s.a.d.j.a.h.o.s.sou@gmail.com</a>
<a href=""mailto:s.ad.j.aho.sso.u@gmail.com"">s.ad.j.aho.sso.u@gmail.com</a>
<a href=""mailto:s.a.djah.osso.u@gmail.com"">s.a.djah.osso.u@gmail.com</a>
<a href=""mailto:sadjahoss.o.u@gmail.com"">sadjahoss.o.u@gmail.com</a>
<a href=""mailto:s.a.dj.ahoss.ou@gmail.com"">s.a.dj.ahoss.ou@gmail.com</a>
<a href=""mailto:sa.d.ja.ho.s.s.o.u@gmail.com"">sa.d.ja.ho.s.s.o.u@gmail.com</a>
<a href=""mailto:sad.j.a.h.o.s.so.u@gmail.com"">sad.j.a.h.o.s.so.u@gmail.com</a>
<a href=""mailto:sadjahosso.u@gmail.com"">sadjahosso.u@gmail.com</a>
<a href=""mailto:sa.dja.h.os.sou@gmail.com"">sa.dja.h.os.sou@gmail.com</a>
<a href=""mailto:sa.djah.o.s.s.o.u@gmail.com"">sa.djah.o.s.s.o.u@gmail.com</a>
<a href=""mailto:sadj.ah.ossou@gmail.com"">sadj.ah.ossou@gmail.com</a>
<a href=""mailto:s.adja.h.o.s.so.u@gmail.com"">s.adja.h.o.s.so.u@gmail.com</a>
<a href=""mailto:sad.jah.osso.u@gmail.com"">sad.jah.osso.u@gmail.com</a>
<a href=""mailto:sad.j.ahos.sou@gmail.com"">sad.j.ahos.sou@gmail.com</a>
<a href=""mailto:s.ad.jah.oss.ou@gmail.com"">s.ad.jah.oss.ou@gmail.com</a>
<a href=""mailto:sa.dj.ah.oss.o.u@gmail.com"">sa.dj.ah.oss.o.u@gmail.com</a>
<a href=""mailto:s.a.djah.os.so.u@gmail.com"">s.a.djah.os.so.u@gmail.com</a>
<a href=""mailto:s.a.dj.ah.o.s.s.ou@gmail.com"">s.a.dj.ah.o.s.s.ou@gmail.com</a>
<a href=""mailto:sad.j.a.ho.ss.ou@gmail.com"">sad.j.a.ho.ss.ou@gmail.com</a>
<a href=""mailto:s.adja.h.o.s.sou@gmail.com"">s.adja.h.o.s.sou@gmail.com</a>
<a href=""mailto:sad.j.ahosso.u@gmail.com"">sad.j.ahosso.u@gmail.com</a>
<a href=""mailto:s.a.d.j.a.h.osso.u@gmail.com"">s.a.d.j.a.h.osso.u@gmail.com</a>
<a href=""mailto:sadj.ahos.s.o.u@gmail.com"">sadj.ahos.s.o.u@gmail.com</a>
<a href=""mailto:s.adj.a.hos.sou@gmail.com"">s.adj.a.hos.sou@gmail.com</a>
<a href=""mailto:sad.j.a.ho.s.s.o.u@gmail.com"">sad.j.a.ho.s.s.o.u@gmail.com</a>
<a href=""mailto:s.a.d.ja.h.o.ssou@gmail.com"">s.a.d.ja.h.o.ssou@gmail.com</a>
<a href=""mailto:s.a.dja.h.oss.ou@gmail.com"">s.a.dja.h.oss.ou@gmail.com</a>
<a href=""mailto:s.a.dj.a.ho.ssou@gmail.com"">s.a.dj.a.ho.ssou@gmail.com</a>
<a href=""mailto:s.adja.h.os.s.o.u@gmail.com"">s.adja.h.os.s.o.u@gmail.com</a>
<a href=""mailto:sad.j.ah.o.s.sou@gmail.com"">sad.j.ah.o.s.sou@gmail.com</a>
<a href=""mailto:s.a.d.jah.os.s.o.u@gmail.com"">s.a.d.jah.os.s.o.u@gmail.com</a>
<a href=""mailto:sa.d.jahossou@gmail.com"">sa.d.jahossou@gmail.com</a>
<a href=""mailto:sa.dja.hos.sou@gmail.com"">sa.dja.hos.sou@gmail.com</a>
<a href=""mailto:s.adj.ah.ossou@gmail.com"">s.adj.ah.ossou@gmail.com</a>"
H7FKjMFY,ccm - begin checkout,CCMAndrei,JavaScript,Thursday 22nd of June 2023 01:45:11 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'begin_checkout',  			// name of the event. In this case, it always must be begin_checkout
  ecommerce: {							
    items: [{                           // an array with a product                      
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      promotion_name: 'giveaway',       // insert name of current promotion if clicked from promotion
      quantity: '1'						// product quantity in the cart
    },{
      item_name: 'Product 2',
      item_id: 'product2',
      price: '12.99',
      item_brand: 'Brand B',
      item_category: 'Category B',
      item_variant: 'Yellow',
      quantity: '1'
    }]
  }
});"
sTRY8yz1,Script Para Talar En Roblox con Eventos Remote,Diamond32_Tutoriales,Lua,Thursday 22nd of June 2023 01:20:30 AM CDT,"local player = game.Players.LocalPlayer;
local mouse = player:GetMouse();
local Damage = 10;
local Usable = false;
local WaitTime = 5;
local IsEquipped = false;

local Tool = script.Parent;

Tool.Unequipped:Connect(function()
	IsEquipped = false
end)

Tool.Equipped:Connect(function()
	IsEquipped = true;

end)


mouse.Button1Down:Connect(function()
	 if IsEquipped == true then
		
		if game.Players.LocalPlayer:DistanceFromCharacter(mouse.Target.Position) < 5 and not Usable and IsEquipped then
		Usable = true;
		local EventRemote = mouse.Target.Parent:FindFirstChild(""RemoteEvent"");

	 if EventRemote ~= nil  and mouse.Target.Name == ""Tronco"" then
					EventRemote:FireServer(game.Players.LocalPlayer, Damage);
			end
		else
			print (""Por favor obten una distancia mas cerca"");
		end
		wait(WaitTime);
		Usable = false;
    end
end)"
qXszN8Se,ccm - add to wishlist,CCMAndrei,JavaScript,Thursday 22nd of June 2023 01:04:24 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'add_to_wishlist',  			// name of the event. In this case, it always must be add_to_wishlist
  ecommerce: {							
    items: [{                           // an array with a product (or multiple products) that was added to a cart                      
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
	  stock: 'in stock',				// insert if in stock or out of stock
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      promotion_name: 'giveaway',       // insert name of current promotion if clicked from promotion
      index: 1,							// if a product is added to wishlist directly from product list, add the position in the list here
      quantity: '1'						// product quantity of how many products were added to a wishlist
    }]
  }
});"
hshVMCf6,cc - view cart,CCMAndrei,JavaScript,Thursday 22nd of June 2023 01:01:39 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'view_cart',  			// name of the event. In this case, it always must be view_cart
  ecommerce: {							
    items: [{                           // an array with a product (or multiple products) that was added to a cart                      
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      promotion_name: 'giveaway',       // insert name of current promotion if clicked from promotion
      quantity: '1'						// product quantity
    },{
      item_name: 'Product 2',
      item_id: 'product2',
      price: '12.99',
      item_brand: 'Brand B',
      item_category: 'Category B',
      item_variant: 'Yellow',
      quantity: '1'
    }]
  }
});"
qUh5f8hn,ccm - remove from cart,CCMAndrei,JavaScript,Thursday 22nd of June 2023 12:57:46 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'remove_from_cart',  			// name of the event. In this case, it always must be remove_from_cart
  ecommerce: {							
    items: [{                           // an array with a product (or multiple products) that was added to a cart                      
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      promotion_name: 'giveaway',       // insert name of current promotion if clicked from promotion
      quantity: '1'						// product quantity of how many products were removed from cart
    }]
  }
});"
Qf3tCmYT,ccm - add to cart,CCMAndrei,JavaScript,Thursday 22nd of June 2023 12:53:22 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'add_to_cart',  			// name of the event. In this case, it always must be add_to_cart
  ecommerce: {	
	items: [{                           // an array with a product (or multiple products) that was added to a cart						
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      promotion_name: 'giveaway',       // insert name of current promotion if clicked from promotion
      index: 1,							// if a product is added to cart directly from product list, add the position in the list here
      quantity: '1'						// product quantity of how many products were added to a cart
    }]
  }
});"
twdChyvW,Untitled,atom0s,C++,Thursday 22nd of June 2023 12:51:00 AM CDT,"void __thiscall UTcpNetDriver::TickDispatch(UTcpNetDriver *this, float a2)
{
    int Socket; // ecx
    int Error; // eax
    int v5; // edi
    int v6; // eax
    UObject *conn; // ebp
    int v8; // edi
    int v9; // eax
    int v10; // eax
    int v11; // edi
    int v12; // eax
    const wchar_t *v13; // eax
    int v14; // edi
    int v15; // eax
    const wchar_t *v16; // eax
    UStruct *v17; // ebp
    UObject *tpkg; // eax
    FURL *furl; // eax
    void (__thiscall *InitConnection)(UObject *, UTcpNetDriver *, int, __int64 *, int, _DWORD, FURL *, _DWORD, _DWORD); // edx
    int Notify_vtbl; // eax
    int Num; // edi
    int Cur; // ecx
    int v24; // eax
    void *v25; // ecx
    UObject **v26; // eax
    int v27; // esi
    int v28; // eax
    const wchar_t *v29; // esi
    int v30; // eax
    int Socket_; // [esp+0h] [ebp-2F4h]
    int v32; // [esp+30h] [ebp-2C4h]
    int bOk; // [esp+30h] [ebp-2C4h]
    void *bAcceptingPeerConnection; // [esp+34h] [ebp-2C0h] BYREF
    int v35; // [esp+38h] [ebp-2BCh]
    int v36; // [esp+3Ch] [ebp-2B8h]
    int BytesRead; // [esp+40h] [ebp-2B4h] BYREF
    void *v38[3]; // [esp+44h] [ebp-2B0h] BYREF
    char v39[4]; // [esp+50h] [ebp-2A4h] BYREF
    char v40[64]; // [esp+54h] [ebp-2A0h] BYREF
    __int64 FromAddr[2]; // [esp+94h] [ebp-260h] BYREF
    char Data[576]; // [esp+A4h] [ebp-250h] BYREF
    int v43; // [esp+2F0h] [ebp-4h]
    int retaddr; // [esp+2F4h] [ebp+0h]

    UNetDriver::TickDispatch(this, a2);
    FromAddr[0] = 2i64;
    FromAddr[1] = 0i64;


    // while (Socket != NULL)
    if ( !*((_DWORD *)this + 107) )
        return;
    while ( 1 )
    {
        Socket = *((_DWORD *)this + 107);       // Socket
        BytesRead = 0;
        v32 = (*(int (__thiscall **)(int, char *, int, int *, __int64 *))(*(_DWORD *)Socket + 44))(// Socket->RecvFrom
                  Socket,
                  Data,
                  576,                          // sizeof(Data)
                  &BytesRead,
                  FromAddr);
        if ( !v32 )
        {
            Error = (*(int (__thiscall **)(FSocketSubsystem *))(*(_DWORD *)GSocketSubsystem + 56))(GSocketSubsystem);// GSocketSubsystem->GetLastErrorCode();
            v5 = Error;
            if ( Error == 10035 || !Error )     // SE_EWOULDBLOCK
                return;
            if ( Error != 10054 )               // SE_UDP_ERR_PORT_UNREACH
                break;
        }

        // GetServerConnection() && GetServerConnection()->RemoteAddr == FromAddr
        v6 = *((_DWORD *)this + 20);
        conn = 0;
        if ( v6 && *(_QWORD *)(v6 + 36880) == FromAddr[0] )
            conn = (UObject *)*((_DWORD *)this + 20);// Connection = GetServerConnection();

        // for( INT i=0; i<ClientConnections.Num() && !Connection; i++ )
        v8 = 0;
        while ( v8 < *((_DWORD *)this + 18) )
        {
            if ( conn )
                break;
            if ( v8 >= 0 )
            {
                v9 = *((_DWORD *)this + 18);
                if ( v8 < v9 || !v8 && !v9 )
                    continue;
            }
            appFailAssertFunc(
                ""i>=0 && (i<ArrayNum||(i==0 && ArrayNum==0))"",
                ""d:\\depot\\agbuildfarm0301_stable\\stable\\development\\src\\core\\inc\\Array.h"",
                575,
                &Src);

            // if(((UTcpipConnection*)ClientConnections(i))->RemoteAddr == FromAddr)
            if ( *(_QWORD *)(*(_DWORD *)(*((_DWORD *)this + 17) + 4 * v8) + 36880) == FromAddr[0] )
            {
                if ( v8 < 0 || (v10 = *((_DWORD *)this + 18), v8 >= v10) && (v8 || v10) )
                    appFailAssertFunc(
                        ""i>=0 && (i<ArrayNum||(i==0 && ArrayNum==0))"",
                        ""d:\\depot\\agbuildfarm0301_stable\\stable\\development\\src\\core\\inc\\Array.h"",
                        575,
                        &Src);
                conn = *(UObject **)(*((_DWORD *)this + 17) + 4 * v8);// Connection = (UTcpipConnection*)ClientConnections(i);
            }
            ++v8;
        }

        if ( v32 )
        {
            // if (!Connection)
            if ( !conn )
            {
                // const UBOOL bAcceptingPeerConnection = bIsPeer && Notify->NotifyAcceptingPeerConnection()==ACCEPTC_Accept;
                // const UBOOL bAcceptingConnection = !bIsPeer && Notify->NotifyAcceptingConnection()==ACCEPTC_Accept;
                if ( !*((_DWORD *)this + 37)
                  || (bOk = 1,
                      (*(int (__thiscall **)(_DWORD))(**((_DWORD **)this + 21) + 36))(*((_DWORD *)this + 21)) != 1) )
                {
                    bOk = 0;
                }
                if ( (*((_DWORD *)this + 37)
                   || (***((int (__thiscall ****)(_DWORD))this + 21))(*((_DWORD *)this + 21)) != 1)
                  && !bOk )
                {
                    goto LABEL_63;
                }

                // Connection = ConstructObject<UTcpipConnection>(NetConnectionClass);
                // Connection->InitConnection( this, Socket, FromAddr, USOCK_Open, FALSE, FURL() );
                v17 = (UStruct *)*((_DWORD *)this + 86);
                tpkg = (UObject *)UObject::GetTransientPackage();
                conn = UObject::StaticConstructObject(v17, tpkg, 0i64, 0i64, 0, GError, 0, 0);
                furl = FURL::FURL((FURL *)v39, 0);

                InitConnection = (void (__thiscall *)(UObject *, UTcpNetDriver *, int, __int64 *, int, _DWORD, FURL *, _DWORD, _DWORD))conn->HashNext[6].ObjectFlags;
                Socket_ = *((_DWORD *)this + 107);
                v43 = 6;
                InitConnection(conn, this, Socket_, FromAddr, 3, 0, furl, 0, 0);
                retaddr = -1;
                FURL::~FURL((FURL *)v40);

                // Notify->NotifyAcceptedPeerConnection( Connection );
                // Notify->NotifyAcceptedConnection( Connection );
                Notify_vtbl = **((_DWORD **)this + 21);
                if ( bAcceptingPeerConnection )
                    (*(void (__cdecl **)(UObject *))(Notify_vtbl + 40))(conn);
                else
                    (*(void (__cdecl **)(UObject *))(Notify_vtbl + 4))(conn);

                // ClientConnections.AddItem( Connection );
                Num = *((_DWORD *)this + 18);
                Cur = *((_DWORD *)this + 19);
                *((_DWORD *)this + 18) = Num + 1;
                if ( Num + 1 > Cur )
                {
                    v24 = DefaultCalculateSlack(Num + 1, Cur, 4u);
                    v25 = (void *)*((_DWORD *)this + 17);
                    *((_DWORD *)this + 19) = v24;
                    if ( v25 || v24 )
                        *((_DWORD *)this + 17) = appRealloc(v25, 4 * v24, 8u);
                }
                v26 = (UObject **)(*((_DWORD *)this + 17) + 4 * Num);
                if ( v26 )
                    *v26 = conn;
            }
            // Connection->ReceivedRawPacket( Data, BytesRead );
            ((void (__thiscall *)(UObject *, char *, int))conn->HashNext[6].HashOuterNext)(conn, Data, BytesRead);
        }
        else if ( conn )
        {

            // if( Connection != GetServerConnection() )
            // if ((Connection->State != USOCK_Open) || (!AllowPlayerPortUnreach))
            if ( conn != *((UObject **)this + 20) && (conn[1].NetIndex != 3 || !*((_DWORD *)this + 101)) )
            {

                // if (LogPortUnreach)
                if ( *((_DWORD *)this + 102) )
                {
                    v11 = FInternetIpAddr::ToString((int)FromAddr, (int)v38, 1);
                    v12 = *(_DWORD *)(v11 + 4);
                    v43 = 2;
                    if ( v12 )
                    {
                        if ( v12 <= 0 )
                            appFailAssertFunc(
                                ""i>=0 && (i<ArrayNum||(i==0 && ArrayNum==0))"",
                                ""d:\\depot\\agbuildfarm0301_stable\\stable\\development\\src\\core\\inc\\Array.h"",
                                581,
                                &Src);
                        v13 = *(const wchar_t **)v11;
                    }
                    else
                    {
                        v13 = &Src;
                    }
                    FOutputDevice::Logf__VA(
                        GLog,
                        L""Received ICMP port unreachable from client %s.  Disconnecting."",
                        v13);
                    v38[2] = 0;
                    v38[1] = 0;
                    v43 = -1;
                    if ( v38[0] )
                    {
                        appFree(v38[0]);
                        v38[0] = 0;
                    }
                }

                // Connection->CleanUp();
                ((void (__thiscall *)(UObject *))conn->HashNext[6].HashNext)(conn);
            }
        }
        else if ( *((_DWORD *)this + 102) )
        {
            v14 = FInternetIpAddr::ToString((int)FromAddr, (int)&bAcceptingPeerConnection, 1);
            v15 = *(_DWORD *)(v14 + 4);
            v43 = 4;
            if ( v15 )
            {
                if ( v15 <= 0 )
                    appFailAssertFunc(
                        ""i>=0 && (i<ArrayNum||(i==0 && ArrayNum==0))"",
                        ""d:\\depot\\agbuildfarm0301_stable\\stable\\development\\src\\core\\inc\\Array.h"",
                        581,
                        &Src);
                v16 = *(const wchar_t **)v14;
            }
            else
            {
                v16 = &Src;
            }
            FOutputDevice::Logf__VA(
                GLog,
                L""Received ICMP port unreachable from %s.  No matching connection found."",
                v16);
            v36 = 0;
            v35 = 0;
            v43 = -1;
            if ( bAcceptingPeerConnection )
            {
                appFree(bAcceptingPeerConnection);
                bAcceptingPeerConnection = 0;
            }
        }
LABEL_63:
        if ( !*((_DWORD *)this + 107) )
            return;
    }
    if ( PTR_STATIC_FirstError )
    {
        v27 = FInternetIpAddr::ToString((int)FromAddr, (int)&bAcceptingPeerConnection, 1);
        v28 = *(_DWORD *)(v27 + 4);
        v43 = 0;
        if ( v28 )
        {
            if ( v28 <= 0 )
                appFailAssertFunc(
                    ""i>=0 && (i<ArrayNum||(i==0 && ArrayNum==0))"",
                    ""d:\\depot\\agbuildfarm0301_stable\\stable\\development\\src\\core\\inc\\Array.h"",
                    581,
                    &Src);
            v29 = *(const wchar_t **)v27;
        }
        else
        {
            v29 = &Src;
        }
        v30 = (*(int (__thiscall **)(FSocketSubsystem *, int))(*(_DWORD *)GSocketSubsystem + 52))(GSocketSubsystem, v5);
        FOutputDevice::Logf__VA(GLog, L""UDP recvfrom error: %i (%s) from %s"", v5, v30, v29);
        v36 = 0;
        v35 = 0;
        v43 = -1;
        if ( bAcceptingPeerConnection )
            appFree(bAcceptingPeerConnection);
    }
    PTR_STATIC_FirstError = 0;
}"
xggzXvEy,ccm -  view item,CCMAndrei,JavaScript,Thursday 22nd of June 2023 12:43:51 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'view_item',  			// name of the event. In this case, it always must be view_item
  ecommerce: {	
	items: [{                           // an array with a product						
   	  item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
	  stock: 'in stock',                // insert if in stock or out of stock
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      promotion_name: 'giveaway',       // insert name of current promotion if clicked from promotion
      quantity: '1'                     // product quantity. In this case, it will usually be equal to 1
    }]
  }
});"
kgmuhSee,邀您一起看：诡异药剂师：我的病人皆为恐怖,xiaomianao666,JavaScript,Thursday 22nd of June 2023 12:04:31 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥诡异药剂师：我的病人皆为恐怖@@
dhBnKUSg,ccm - select item,CCMAndrei,JavaScript,Wednesday 21st of June 2023 11:59:27 PM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'select_item',  			// name of the event. In this case, it always must be select_item
  ecommerce: {							
    items: [{                           // an array with all products
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',          // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
	  stock: 'in stock',                // insert if in stock or out of stock
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      index: 1,                         // insert product's position in that list
      quantity: '1'                     // product quantity. In this case, it will usually be equal to 1
    }]
  }
});"
c1AnVCEH,ccm - view item list,CCMAndrei,JavaScript,Wednesday 21st of June 2023 11:46:50 PM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'view_item_list',  			// name of the event. In this case, it always must be view_item_list
  ecommerce: {							
  	items: [{                           // an array with all products
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384',        // insert an actual product name
      item_id: 'CALACATTAROYALMT6060',              // insert an actual product ID
      price: '26.00',                 // insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',         // insert an actual product top-level category
      item_variant: 'Blue',             // insert an actual product variant
      material: 'Porcelain',             // insert material here
      item_list_name: 'Search results', // insert the name of the list where the product is currently displayed
      index: 1,							// insert product's position in that list
      quantity: '1'						// product quantity. In case of view_item_list, it will usually be equal to 1
    },{
      item_name: 'Product 2',
      item_id: 'product2',
      price: '12.99',
      item_brand: 'Brand B',
      item_category: 'Category B',
      item_variant: 'Yellow',
      item_list_name: 'Search results',
      index: 2,
      quantity: '1'
    }]
  }
});"
77b1pS8B,Item Recovery acis 372,tensador125,Java,Wednesday 21st of June 2023 11:34:12 PM CDT,"### Eclipse Workspace Patch 1.0
#P aCis_gameserver
diff --git config/players.properties config/players.properties
index e52d795..25e8695 100644
--- config/players.properties
+++ config/players.properties
@@ -260,4 +260,10 @@
 MaxBuffsAmount = 20
 
 # Store buffs/debuffs on user logout. Default: True
-StoreSkillCooltime = True
\ No newline at end of file
+StoreSkillCooltime = True
+
+#==========================================================================
+#   BLACK COUPON RECOVERY 1 ITEM ENCHANT FAILED
+#==========================================================================
+
+BlackCouponId = 6392
diff --git java/Base/Data/IconTable.java java/Base/Data/IconTable.java
new file mode 100644
index 0000000..fa75062
--- /dev/null
+++ java/Base/Data/IconTable.java
@@ -0,0 +1,62 @@
+package Base.Data;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+
+public class IconTable extends XMLDocument
+{
+	private static final Map<Integer, String> itemIcons = new HashMap<>();
+	
+	public IconTable()
+	{
+		load();
+	}
+	
+	@Override
+	protected void load()
+	{
+		loadDocument(""./data/xml/icons.xml"");
+		LOG.info(""Loaded "" + itemIcons.size() + "" icons."");
+	}
+	
+	@Override
+	protected void parseDocument(Document doc, File f)
+	{
+	
+		final Node n = doc.getFirstChild();
+		
+		for (Node o = n.getFirstChild(); o != null; o = o.getNextSibling())
+		{
+			if (!""icon"".equalsIgnoreCase(o.getNodeName()))
+			{
+				continue;
+			}
+			
+			final NamedNodeMap attrs = o.getAttributes();
+			final int itemId = Integer.valueOf(attrs.getNamedItem(""Id"").getNodeValue());
+			final String value = String.valueOf(attrs.getNamedItem(""value"").getNodeValue());
+			
+			itemIcons.put(itemId, value);
+		}
+	}
+	
+	public String getIcon(int id)
+	{
+		return itemIcons.get(id) == null ? ""icon.noimage"" : itemIcons.get(id);
+	}
+	
+	public static IconTable getInstance()
+	{
+		return SingletonHolder._instance;
+	}
+	
+	private static class SingletonHolder
+	{
+		protected static final IconTable _instance = new IconTable();
+	}
+}
diff --git java/Base/Data/XMLDocument.java java/Base/Data/XMLDocument.java
new file mode 100644
index 0000000..6d491db
--- /dev/null
+++ java/Base/Data/XMLDocument.java
@@ -0,0 +1,121 @@
+package Base.Data;
+
+import java.io.File;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import net.sf.l2j.gameserver.templates.StatsSet;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+
+
+
+/**
+ * An XML document, relying on a static and single DocumentBuilderFactory.
+ */
+public abstract class XMLDocument
+{
+	protected static final Logger LOG = Logger.getLogger(XMLDocument.class.getName());
+	
+	protected Document document;
+	
+	private static final DocumentBuilderFactory BUILDER;
+	static
+	{
+		BUILDER = DocumentBuilderFactory.newInstance();
+		BUILDER.setValidating(false);
+		BUILDER.setIgnoringComments(true);
+	}
+	
+	abstract protected void load();
+	
+	abstract protected void parseDocument(Document doc, File f);
+	
+	public void loadDocument(String filePath)
+	{
+		loadDocument(new File(filePath));
+	}
+	
+	public void writeDocument(Document doc, String fileName)
+	{
+		try
+		{
+			TransformerFactory transformerFactory = TransformerFactory.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			transformer.setOutputProperty(OutputKeys.ENCODING, ""UTF-8"");
+			transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
+			transformer.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""2"");
+			
+			DOMSource source = new DOMSource(doc);
+			StreamResult result = new StreamResult(new File(fileName));
+			
+			transformer.transform(source, result);
+			LOG.info(""XML file saved to "" + fileName);
+		}
+		catch (TransformerException e)
+		{
+			LOG.warning(""Error saving XML file: "" + e.getMessage());
+		}
+	}
+	
+	/**
+	 * Parse an entire directory or file if found.
+	 * @param file
+	 */
+	public void loadDocument(File file)
+	{
+		if (!file.exists())
+		{
+			LOG.severe(""The following file or directory doesn't exist: "" + file.getName());
+			return;
+		}
+		
+		if (file.isDirectory())
+		{
+			for (File f : file.listFiles())
+			{
+				loadDocument(f);
+			}
+		}
+		else if (file.isFile())
+		{
+			try
+			{
+				parseDocument(BUILDER.newDocumentBuilder().parse(file), file);
+			}
+			catch (Exception e)
+			{
+				LOG.log(Level.SEVERE, ""Error loading XML file "" + file.getName(), e);
+			}
+		}
+	}
+	
+	public Document getDocument()
+	{
+		return document;
+	}
+	
+	/**
+	 * This method parses the content of a NamedNodeMap and feed the given StatsSet.
+	 * @param attrs : The NamedNodeMap to parse.
+	 * @param set : The StatsSet to feed.
+	 */
+	public static void parseAndFeed(NamedNodeMap attrs, StatsSet set)
+	{
+		for (int i = 0; i < attrs.getLength(); i++)
+		{
+			final Node attr = attrs.item(i);
+			set.set(attr.getNodeName(), attr.getNodeValue());
+		}
+	}
+}
diff --git java/Base/RecoverySystem/ItemRecoveryManager.java java/Base/RecoverySystem/ItemRecoveryManager.java
new file mode 100644
index 0000000..050c6cc
--- /dev/null
+++ java/Base/RecoverySystem/ItemRecoveryManager.java
@@ -0,0 +1,275 @@
+package Base.RecoverySystem;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.HashMap;
+import java.util.Map;
+
+import net.sf.l2j.Config;
+import net.sf.l2j.L2DatabaseFactory;
+import net.sf.l2j.gameserver.data.ItemTable;
+import net.sf.l2j.gameserver.model.actor.instance.Player;
+import net.sf.l2j.gameserver.model.item.instance.ItemInstance;
+import net.sf.l2j.gameserver.network.serverpackets.ItemList;
+
+
+
+public class ItemRecoveryManager
+{
+	private Map<Integer, Integer> validEnchantLevels; 
+	
+	public ItemRecoveryManager()
+	{
+		validEnchantLevels = new HashMap<>();
+		loadValidEnchantLevels(); 
+	}
+	
+	public void recoverSelectedItem(Player player, int itemId, int enchantLevel)
+	{
+
+		ItemInstance recoveryItem = player.getInventory().getItemByItemId(Config.BLACK_COUPON_ID);
+		if (recoveryItem == null || recoveryItem.getCount() < 1)
+		{
+			player.sendMessage(""No tienes suficientes items para recuperar este item."");
+			return;
+		}
+		
+		
+		if (!isValidEnchantLevel(itemId, enchantLevel, player.getObjectId()))
+		{
+			player.sendMessage(""No puedes recuperar este item con ese nivel de enchant."");
+			return;
+		}
+		
+		
+		if (!isValidRecoveryItem(itemId, player.getObjectId()))
+		{
+			player.sendMessage(""No puedes recuperar este item."");
+			return;
+		}
+		
+		
+		ItemInstance recoveredItem = ItemTable.getInstance().createItem(""RecoverItem"", itemId, 1, player, null);
+		recoveredItem.setEnchantLevel(enchantLevel);
+		
+		
+		player.getInventory().addItem(""RecoverItem"", recoveredItem, player, player);
+		
+		
+		player.getInventory().destroyItemByItemId(""RecoveryCost"", Config.BLACK_COUPON_ID, 1, player, player);
+		
+		
+		removeRecoverableItem(itemId, player.getObjectId());
+		
+	
+		player.sendPacket(new ItemList(player, true));
+		
+	
+		String itemName = recoveredItem.getItemName();
+		String message = ""Has recuperado el item "" + itemName;
+		if (enchantLevel > 0)
+		{
+			message += "" +"" + enchantLevel;
+		}
+		player.sendMessage(message);
+	}
+	
+	@SuppressWarnings(""resource"")
+	public boolean isValidRecoveryItem(int itemId, int objectId)
+	{
+		Connection con = null;
+		PreparedStatement statement = null;
+		ResultSet resultSet = null;
+		
+		try
+		{
+			con = L2DatabaseFactory.getInstance().getConnection();
+			String sql = ""SELECT item_id FROM item_recover WHERE object_id = ? AND item_id = ?"";
+			statement = con.prepareStatement(sql);
+			statement.setInt(1, objectId);
+			statement.setInt(2, itemId);
+			resultSet = statement.executeQuery();
+			
+			return resultSet.next(); 
+			
+		}
+		catch (SQLException e)
+		{
+			
+			e.printStackTrace();
+		}
+		finally
+		{
+			try
+			{
+				if (resultSet != null)
+				{
+					resultSet.close();
+				}
+				if (statement != null)
+				{
+					statement.close();
+				}
+				if (con != null)
+				{
+					con.close();
+				}
+			}
+			catch (SQLException e)
+			{
+				
+				e.printStackTrace();
+			}
+		}
+		
+		return false; 
+	}
+	
+	@SuppressWarnings(""resource"")
+	public boolean isValidEnchantLevel(int itemId, int enchantLevel, int objectId)
+	{
+		Connection con = null;
+		PreparedStatement statement = null;
+		ResultSet resultSet = null;
+		
+		try
+		{
+			con = L2DatabaseFactory.getInstance().getConnection();
+			String sql = ""SELECT enchant_level FROM item_recover WHERE object_id = ? AND item_id = ?"";
+			statement = con.prepareStatement(sql);
+			statement.setInt(1, objectId);
+			statement.setInt(2, itemId);
+			resultSet = statement.executeQuery();
+			
+			if (resultSet.next())
+			{
+				int validEnchantLevel = resultSet.getInt(""enchant_level"");
+				return enchantLevel == validEnchantLevel;
+			}
+		}
+		catch (SQLException e)
+		{
+			
+			e.printStackTrace();
+		}
+		finally
+		{
+			try
+			{
+				if (resultSet != null)
+				{
+					resultSet.close();
+				}
+				if (statement != null)
+				{
+					statement.close();
+				}
+				if (con != null)
+				{
+					con.close();
+				}
+			}
+			catch (SQLException e)
+			{
+				
+				e.printStackTrace();
+			}
+		}
+		
+		return false;
+	}
+	
+	public void removeRecoverableItem(int itemId, int objectId)
+	{
+		Connection con = null;
+		PreparedStatement statement = null;
+		
+		try
+		{
+			con = L2DatabaseFactory.getInstance().getConnection();
+			String sql = ""DELETE FROM item_recover WHERE item_id = ? AND object_id = ?"";
+			statement = con.prepareStatement(sql);
+			statement.setInt(1, itemId);
+			statement.setInt(2, objectId);
+			statement.executeUpdate();
+		}
+		catch (SQLException e)
+		{
+			
+			e.printStackTrace();
+		}
+		finally
+		{
+			try
+			{
+				if (statement != null)
+				{
+					statement.close();
+				}
+				if (con != null)
+				{
+					con.close();
+				}
+			}
+			catch (SQLException e)
+			{
+				
+				e.printStackTrace();
+			}
+		}
+	}
+	
+	private void loadValidEnchantLevels()
+	{
+		Connection con = null;
+		PreparedStatement statement = null;
+		ResultSet resultSet = null;
+		
+		try
+		{
+			con = L2DatabaseFactory.getInstance().getConnection();
+			String sql = ""SELECT item_id, enchant_level FROM item_recover"";
+			statement = con.prepareStatement(sql);
+			resultSet = statement.executeQuery();
+			
+			while (resultSet.next())
+			{
+				int itemId = resultSet.getInt(""item_id"");
+				int enchantLevel = resultSet.getInt(""enchant_level"");
+				
+				validEnchantLevels.put(itemId, enchantLevel);
+			}
+		}
+		catch (SQLException e)
+		{
+			
+			e.printStackTrace();
+		}
+		finally
+		{
+			try
+			{
+				if (resultSet != null)
+				{
+					resultSet.close();
+				}
+				if (statement != null)
+				{
+					statement.close();
+				}
+				if (con != null)
+				{
+					con.close();
+				}
+			}
+			catch (SQLException e)
+			{
+				
+				e.printStackTrace();
+			}
+		}
+	}
+	
+}
diff --git java/Base/RecoverySystem/RecoverableItem.java java/Base/RecoverySystem/RecoverableItem.java
new file mode 100644
index 0000000..a13f0e8
--- /dev/null
+++ java/Base/RecoverySystem/RecoverableItem.java
@@ -0,0 +1,113 @@
+package Base.RecoverySystem;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
+import net.sf.l2j.L2DatabaseFactory;
+import net.sf.l2j.gameserver.data.ItemTable;
+import net.sf.l2j.gameserver.model.item.kind.Item;
+
+
+
+public class RecoverableItem
+{
+	private int objectId;
+	private int itemId;
+	private String itemName;
+	private int enchantLevel;
+	private boolean selected; 
+	
+	public RecoverableItem(int objectId, int itemId, String itemName, int enchantLevel)
+	{
+		this.objectId = objectId;
+		this.itemId = itemId;
+		this.itemName = itemName;
+		this.enchantLevel = enchantLevel;
+		this.selected = false; 
+	}
+	
+	public int getObjectId()
+	{
+		return objectId;
+	}
+	
+	public int getItemId()
+	{
+		return itemId;
+	}
+	
+	public String getItemName()
+	{
+		return itemName;
+	}
+	
+	public int getEnchantLevel()
+	{
+		return enchantLevel;
+	}
+	
+	public void saveBrokenItemInfo()
+	{
+		Connection con = null;
+		PreparedStatement statement = null;
+		
+		try
+		{
+			con = L2DatabaseFactory.getInstance().getConnection();
+			String sql = ""INSERT INTO item_recover (object_id, item_id, item_name, enchant_level) VALUES (?, ?, ?, ?)"";
+			statement = con.prepareStatement(sql);
+			statement.setInt(1, objectId);
+			statement.setInt(2, itemId);
+			statement.setString(3, itemName);
+			statement.setInt(4, enchantLevel);
+			statement.execute();
+		}
+		catch (SQLException e)
+		{
+			
+			e.printStackTrace();
+		}
+		finally
+		{
+			
+			try
+			{
+				if (statement != null)
+				{
+					statement.close();
+				}
+				if (con != null)
+				{
+					con.close();
+				}
+			}
+			catch (SQLException e)
+			{
+				
+				e.printStackTrace();
+			}
+		}
+	}
+	
+	public boolean isSelected()
+	{
+		return selected;
+	}
+	
+	public void setSelected(boolean selected)
+	{
+		this.selected = selected;
+	}
+	
+	public String getIcon()
+	{
+		return getItem().getIcon();
+	}
+	
+	public Item getItem()
+	{
+		return ItemTable.getInstance().getTemplate(itemId);
+	}
+	
+}
diff --git java/net/sf/l2j/Config.java java/net/sf/l2j/Config.java
index 91fc0f1..85901f5 100644
--- java/net/sf/l2j/Config.java
+++ java/net/sf/l2j/Config.java
@@ -44,6 +44,12 @@
 	// Clans settings
 	// --------------------------------------------------
 	
+	
+	
+	
+	public static int BLACK_COUPON_ID;	
+	
+	
 	/** Clans */
 	public static int ALT_CLAN_JOIN_DAYS;
 	public static int ALT_CLAN_CREATE_DAYS;
@@ -1069,6 +1075,9 @@
 	{
 		final ExProperties players = initProperties(PLAYERS_FILE);
 		EFFECT_CANCELING = players.getProperty(""CancelLesserEffect"", true);
+		BLACK_COUPON_ID = players.getProperty(""BlackCouponId"", 6392);
+
+		
 		HP_REGEN_MULTIPLIER = players.getProperty(""HpRegenMultiplier"", 1.);
 		MP_REGEN_MULTIPLIER = players.getProperty(""MpRegenMultiplier"", 1.);
 		CP_REGEN_MULTIPLIER = players.getProperty(""CpRegenMultiplier"", 1.);
diff --git java/net/sf/l2j/gameserver/GameServer.java java/net/sf/l2j/gameserver/GameServer.java
index 65bf5ef..2f1e305 100644
--- java/net/sf/l2j/gameserver/GameServer.java
+++ java/net/sf/l2j/gameserver/GameServer.java
@@ -108,6 +108,8 @@
 import net.sf.l2j.util.DeadLockDetector;
 import net.sf.l2j.util.IPv4Filter;
 
+import Base.Data.IconTable;
+
 public class GameServer
 {
 	private static final Logger _log = Logger.getLogger(GameServer.class.getName());
@@ -285,6 +287,10 @@
 		DerbyTrackManager.getInstance();
 		LotteryManager.getInstance();
 		
+		
+		IconTable.getInstance();
+		 
+		
 		if (Config.ALLOW_WEDDING)
 			CoupleManager.getInstance();
 		
diff --git java/net/sf/l2j/gameserver/handler/ItemHandler.java java/net/sf/l2j/gameserver/handler/ItemHandler.java
index 07bb3f7..0020d2a 100644
--- java/net/sf/l2j/gameserver/handler/ItemHandler.java
+++ java/net/sf/l2j/gameserver/handler/ItemHandler.java
@@ -14,6 +14,7 @@
 import net.sf.l2j.gameserver.handler.itemhandlers.FishShots;
 import net.sf.l2j.gameserver.handler.itemhandlers.Harvester;
 import net.sf.l2j.gameserver.handler.itemhandlers.ItemSkills;
+import net.sf.l2j.gameserver.handler.itemhandlers.Item_Recover;
 import net.sf.l2j.gameserver.handler.itemhandlers.Keys;
 import net.sf.l2j.gameserver.handler.itemhandlers.Maps;
 import net.sf.l2j.gameserver.handler.itemhandlers.MercTicket;
@@ -62,6 +63,7 @@
 		registerItemHandler(new PetFood());
 		registerItemHandler(new Recipes());
 		registerItemHandler(new RollingDice());
+		registerItemHandler(new Item_Recover());
 		registerItemHandler(new ScrollOfResurrection());
 		registerItemHandler(new SeedHandler());
 		registerItemHandler(new SevenSignsRecord());
diff --git java/net/sf/l2j/gameserver/handler/itemhandlers/Item_Recover.java java/net/sf/l2j/gameserver/handler/itemhandlers/Item_Recover.java
new file mode 100644
index 0000000..47f23fe
--- /dev/null
+++ java/net/sf/l2j/gameserver/handler/itemhandlers/Item_Recover.java
@@ -0,0 +1,170 @@
+package net.sf.l2j.gameserver.handler.itemhandlers;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+
+import net.sf.l2j.L2DatabaseFactory;
+import net.sf.l2j.gameserver.handler.IItemHandler;
+import net.sf.l2j.gameserver.model.actor.Playable;
+import net.sf.l2j.gameserver.model.actor.instance.Player;
+import net.sf.l2j.gameserver.model.item.instance.ItemInstance;
+import net.sf.l2j.gameserver.network.serverpackets.ActionFailed;
+import net.sf.l2j.gameserver.network.serverpackets.NpcHtmlMessage;
+
+import Base.RecoverySystem.RecoverableItem;
+
+
+
+/**
+ * @author Terius
+ */
+public class Item_Recover implements IItemHandler
+{
+
+	
+	@Override
+	public void useItem(Playable playable, ItemInstance item, boolean forceUse)
+	{
+		if (!(playable instanceof Player))
+		{
+			return;
+		}
+		
+		Player activeChar = (Player) playable;
+		
+		
+		openRecoveryWindow(activeChar);
+	}
+	
+	private static void openRecoveryWindow(Player player)
+	{
+		
+		List<RecoverableItem> recoverableItems = getRecoverableItems(player.getObjectId());
+		
+	
+		if (recoverableItems.isEmpty())
+		{
+			
+			player.sendMessage(""No hay items recuperables disponibles."");
+			return;
+		}
+		
+		
+		NpcHtmlMessage html = new NpcHtmlMessage(1);
+		
+		
+		String content = generateRecoveryList(recoverableItems);
+		html.setHtml(content);
+		
+		
+		player.sendPacket(html);
+		player.sendPacket(ActionFailed.STATIC_PACKET);
+	}
+	
+
+	
+	private static String generateRecoveryList(List<RecoverableItem> recoverableItems)
+	{
+		
+		
+		StringBuilder sb = new StringBuilder();
+		sb.append(""<html><body><center><font color=\""LEVEL\"">Items Recuperables</font><br><br>"");
+		
+	
+		sb.append(""<font color=\""FF0000\"">Solo puedes recuperar 1 item a la vez.</font><br>"");
+		
+		
+		for (RecoverableItem item : recoverableItems)
+		{
+			sb.append(""<img src=\""L2UI.SquareGray\"" width=295 height=1>"");
+			sb.append(""<table>"");
+			
+			sb.append(""<tr>"");
+			sb.append(""<td>"");
+			sb.append(""<img src=\"""").append(item.getIcon()).append(""\"" width=32 height=32>"");
+			sb.append(""</td>"");
+			sb.append(""<td width=210><font color=\""FFFFFF\"">"").append(item.getItemName()).append(""</font>"");
+			
+			int enchantLevel = item.getEnchantLevel();
+			if (enchantLevel > 0)
+			{
+				sb.append("" <font color=\""00FF00\"">+"").append(enchantLevel).append(""</font>"");
+			}
+			
+			sb.append(""</td>"");
+			
+			int itemId = item.getItemId();
+			sb.append(""<td><button value=\""Recuperar\"" action=\""bypass -h recoverSelectedItem "").append(itemId).append("" "").append(enchantLevel).append(""\"" width=75 height=21 back=\""L2UI.DefaultButton_click\"" fore=\""L2UI.DefaultButton\""></td>"");
+			
+			sb.append(""</tr>"");
+			
+			sb.append(""</table>"");
+			sb.append(""<img src=\""L2UI.SquareGray\"" width=295 height=1>"");
+			sb.append(""<br>""); 
+		}
+		
+		sb.append(""</center></body></html>"");
+		return sb.toString();
+	}
+	
+	private static List<RecoverableItem> getRecoverableItems(int objectId)
+	{
+		List<RecoverableItem> recoverableItems = new ArrayList<>();
+		Connection con = null;
+		PreparedStatement statement = null;
+		ResultSet resultSet = null;
+		
+		try
+		{
+			con = L2DatabaseFactory.getInstance().getConnection();
+			String sql = ""SELECT item_id, item_name, enchant_level FROM item_recover WHERE object_id = ? ORDER BY id DESC LIMIT 10"";
+			statement = con.prepareStatement(sql);
+			statement.setInt(1, objectId);
+			resultSet = statement.executeQuery();
+			
+			while (resultSet.next())
+			{
+				int itemId = resultSet.getInt(""item_id"");
+				String itemName = resultSet.getString(""item_name"");
+				int enchantLevel = resultSet.getInt(""enchant_level"");
+				
+				RecoverableItem item = new RecoverableItem(objectId, itemId, itemName, enchantLevel);
+				recoverableItems.add(item);
+			}
+		}
+		catch (SQLException e)
+		{
+			
+			e.printStackTrace();
+		}
+		finally
+		{
+			try
+			{
+				if (resultSet != null)
+				{
+					resultSet.close();
+				}
+				if (statement != null)
+				{
+					statement.close();
+				}
+				if (con != null)
+				{
+					con.close();
+				}
+			}
+			catch (SQLException e)
+			{
+
+				e.printStackTrace();
+			}
+		}
+		
+		return recoverableItems;
+	}
+}
diff --git java/net/sf/l2j/gameserver/model/item/kind/Item.java java/net/sf/l2j/gameserver/model/item/kind/Item.java
index f72530e..a7d1556 100644
--- java/net/sf/l2j/gameserver/model/item/kind/Item.java
+++ java/net/sf/l2j/gameserver/model/item/kind/Item.java
@@ -28,6 +28,8 @@
 import net.sf.l2j.gameserver.skills.conditions.Condition;
 import net.sf.l2j.gameserver.templates.StatsSet;
 
+import Base.Data.IconTable;
+
 /**
  * This class contains all informations concerning the item (weapon, armor, etc). Mother class of :
  * <ul>
@@ -577,4 +579,11 @@
 	{
 		return _questEvents;
 	}
+	
+	
+	   public String getIcon()
+	   {
+	       return IconTable.getInstance().getIcon(getItemId());
+	   }
+	
 }
\ No newline at end of file
diff --git java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java
index 7e74c2b..634bace 100644
--- java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java
+++ java/net/sf/l2j/gameserver/network/clientpackets/RequestBypassToServer.java
@@ -24,6 +24,8 @@
 import net.sf.l2j.gameserver.network.serverpackets.ActionFailed;
 import net.sf.l2j.gameserver.network.serverpackets.NpcHtmlMessage;
 
+import Base.RecoverySystem.ItemRecoveryManager;
+
 public final class RequestBypassToServer extends L2GameClientPacket
 {
 	private static final Logger GMAUDIT_LOG = Logger.getLogger(""gmaudit"");
@@ -85,6 +87,20 @@
 			{
 				playerHelp(activeChar, _command.substring(12));
 			}
+			
+			else if (_command.startsWith(""recoverSelectedItem""))
+			{
+			String[] bypassParts = _command.split("" "");
+			if (bypassParts.length >= 3)
+			{
+				  int itemId = Integer.parseInt(bypassParts[1]);
+				int enchantLevel = Integer.parseInt(bypassParts[2]);
+				                   
+				 ItemRecoveryManager itemRecoveryManager = new ItemRecoveryManager();
+				   itemRecoveryManager.recoverSelectedItem(activeChar, itemId, enchantLevel);
+			 }
+			}
+			
 			else if (_command.startsWith(""npc_""))
 			{
 				if (!activeChar.validateBypass(_command))
diff --git java/net/sf/l2j/gameserver/network/clientpackets/RequestEnchantItem.java java/net/sf/l2j/gameserver/network/clientpackets/RequestEnchantItem.java
index 2a78f67..706b4f4 100644
--- java/net/sf/l2j/gameserver/network/clientpackets/RequestEnchantItem.java
+++ java/net/sf/l2j/gameserver/network/clientpackets/RequestEnchantItem.java
@@ -1,7 +1,12 @@
 package net.sf.l2j.gameserver.network.clientpackets;
 
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
 import net.sf.l2j.commons.random.Rnd;
 
+import net.sf.l2j.L2DatabaseFactory;
 import net.sf.l2j.gameserver.data.SkillTable;
 import net.sf.l2j.gameserver.data.xml.ArmorSetData;
 import net.sf.l2j.gameserver.model.L2Skill;
@@ -263,6 +268,13 @@
 					su.addAttribute(StatusUpdate.CUR_LOAD, activeChar.getCurrentLoad());
 					activeChar.sendPacket(su);
 				}
+				
+				
+				 
+				  saveBrokenItemInfo(activeChar.getObjectId(), item.getItemId(), item.getItemName(), item.getEnchantLevel());
+				 	
+				
+				
 			}
 			
 			activeChar.sendPacket(new ItemList(activeChar, false));
@@ -270,4 +282,55 @@
 			activeChar.setActiveEnchantItem(null);
 		}
 	}
+	
+	
+	   private static void saveBrokenItemInfo(int objectId, int itemId, String itemName, int enchantLevel)
+	   {
+	       Connection con = null;
+	       PreparedStatement statement = null;
+	       
+	       try
+	       {
+	           con = L2DatabaseFactory.getInstance().getConnection();
+	           String sql = ""INSERT INTO item_recover (object_id, item_id, item_name, enchant_level) VALUES (?, ?, ?, ?)"";
+	           statement = con.prepareStatement(sql);
+	           statement.setInt(1, objectId);
+	           statement.setInt(2, itemId);
+	           statement.setString(3, itemName);
+	           statement.setInt(4, enchantLevel);
+	           statement.execute();
+	       }
+	       catch (SQLException e)
+	       {
+	           
+	           e.printStackTrace();
+	       }
+	       finally
+	       {
+	          
+	           try
+	           {
+	               if (statement != null)
+	               {
+	                   statement.close();
+	               }
+	               if (con != null)
+	               {
+	                   con.close();
+	               }
+	           }
+	           catch (SQLException e)
+	           {
+	               
+	               e.printStackTrace();
+	           }
+	       }
+	   }
+	   
+	
+	
+	
+	
+	
+	
 }
\ No newline at end of file
"
QbTA52Us,Change Mode System PVE-PVP-NORMAL,tensador125,Java,Wednesday 21st of June 2023 11:14:29 PM CDT,"### Eclipse Workspace Patch 1.0
#P Orionwins
diff --git files/game/config/L2jServer/ExtraSettings.properties files/game/config/L2jServer/ExtraSettings.properties
index 2af9e38..eea7e5b 100644
--- files/game/config/L2jServer/ExtraSettings.properties
+++ files/game/config/L2jServer/ExtraSettings.properties
@@ -273,5 +273,20 @@
 RandromCraftConsumeCreate = 300000
 
 
+#==========================================================================
+#   GAME MODE SYSTEM - PVE - PVP - NORMAL - WITH BONUS 
+#==========================================================================
 
+GameModeSystemEnable = True
+
+PVPModeXpSpRate = 50
+NormalModeXpSpRate = 20
+PVPModeSpoilRate = 50
+NormalModeSpoilRate = 20
+PVPModeDropRate = 50
+NormalModeDropRate = 20
+PVPModeAdenaRate = 25
+NormalModeAdenaRate = 20
+PVPModeDropSealStonesRate = 5
+NormalDropSealStonesRate = 2
 
diff --git files/game/data/html/mods/ChangeModeSystem/ModeSystem.htm files/game/data/html/mods/ChangeModeSystem/ModeSystem.htm
new file mode 100644
index 0000000..6e94618
--- /dev/null
+++ files/game/data/html/mods/ChangeModeSystem/ModeSystem.htm
@@ -0,0 +1,57 @@
+<html>
+<head>
+    <title>L2Wins - Modos De Juego</title>
+</head>
+<body>
+
+    <center><font color=""00FF00"">Bienvenido a L2Wins.</font></center>
+    <br>
+    <center><font color=""00FF00"">Elige tu Modo de Juego.</font></center>
+<center>
+<br1>
+<font color=""00FF00"">Por Defecto Entras En Normal Mode.</font>
+<br1>
+<font color=""00FF00"">Puedes Cambiarlo Escribiendo - .pve - .pvp - .normal</font>
+<br1>
+<font color=""00FF00"">Los Modos De Juego PvP - Normal Mode.</font>
+<br1>
+<font color=""00FF00"">Tienen Un Bonus General de EXP-SP-DROP-ADENA.</font>
+<br1>
+<font color=""00FF00"">En el Modo PvE No Podran Matarte.</font>
+<br1>
+<font color=""00FF00"">Tampoco Podras Atacar A Otro Jugador.</font>
+<br1>
+<font color=""00FF00"">Solo Podras Estar En Party Con Gente.</font>
+<br1>
+<font color=""00FF00"">Que Tenga Tu Mismo Modo De Juego.</font>
+
+</center>
+
+    <br>
+
+    <table>
+        <tr>
+            <td width=""160"" align=""center""><font color=""FFFF00"">PvE Mode</font></td>
+            <td width=""160"" align=""center""><font color=""800080"">PvP Mode</font></td>
+            <td width=""160"" align=""center""><font color=""CCFFCC""><font color=""FF6600"">Normal Mode</font></font></td>
+        </tr>
+</table>
+     <table>
+        <tr>
+            <td width=""160"" align=""center""><font color=""FFFF00"">Bonus 0%</font></td>
+            <td width=""160"" align=""center""><font color=""800080"">Bonus 50%</font></td>
+            <td width=""160"" align=""center""><font color=""CCFFCC""><font color=""FF6600"">Bonus 20%</font></font></td>
+        </tr>
+</table>
+
+
+<br>
+<table>
+        <tr>
+            <td width=""160"" align=""center""><button value=""Use"" action=""bypass -h PvEMode"" width=""75"" height=""21"" back=""L2UI.DefaultButton_click"" fore=""L2UI.DefaultButton""></td>
+            <td width=""160"" align=""center""><button value=""Use"" action=""bypass -h PvPMode"" width=""75"" height=""21"" back=""L2UI.DefaultButton_click"" fore=""L2UI.DefaultButton""></td>
+            <td width=""160"" align=""center""><button value=""Use"" action=""bypass -h NormalMode"" width=""75"" height=""21"" back=""L2UI.DefaultButton_click"" fore=""L2UI.DefaultButton""></td>
+        </tr>
+    </table>
+</body>
+</html>
diff --git src/Base/ModeSystem/ChangeModeManager.java src/Base/ModeSystem/ChangeModeManager.java
new file mode 100644
index 0000000..282394f
--- /dev/null
+++ src/Base/ModeSystem/ChangeModeManager.java
@@ -0,0 +1,204 @@
+package Base.ModeSystem;
+
+import l2jwins.Config;
+import l2jwins.game.model.actor.instance.L2PcInstance;
+import l2jwins.game.model.zone.ZoneId;
+
+public class ChangeModeManager
+{
+	public static boolean verifyChangeMode(L2PcInstance activeChar)
+	{
+		if (activeChar == null)
+		{
+			return false;
+		}
+		
+		if (!Config.GAME_MODE_ENABLE)
+		{
+			activeChar.sendMessage(""El Change Mode System Esta Desactivado."");
+			return false;
+		}
+		
+		if (activeChar.isMoving())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Te Estas Moviendo"");
+			return false;
+		}
+		
+		if (activeChar.isInParty())
+		{
+			activeChar.sendMessage(""Sal De La Party Para Cambiar de Modo De Juego"");
+			return false;
+		}
+		
+		if (activeChar.isInDuel())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInArena())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInArenaEvent())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInJail())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInPartyMatchRoom())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInCraftMode())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInHideoutSiege())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_BOSS))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_CASTLE))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_DANGERAREA))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_FLAG))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_NOSUMMONFRIEND))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_JAIL))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_MONSTERTRACK))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_OLY))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_PVP))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_RAID_LIMIT))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_RANDOM))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_SIEGE))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_NORESTART))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isIn7sDungeon())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isDungeon())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas En Una Dungeon"");
+			return false;
+		}
+		
+		if (activeChar.isInOlympiadMode())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas En Olympiadas"");
+			return false;
+		}
+		
+		if (activeChar.isRegisteredInCTFEvent() || activeChar.isRegisteredInDMEvent() || activeChar.isRegisteredInFunEvent() || activeChar.isRegisteredInTVTEvent() || activeChar.isRegisteredInVIPEvent())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas Registrado En Un Evento"");
+			return false;
+		}
+		
+		if (activeChar.inObserverMode())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas en ObserverMode"");
+			return false;
+		}
+		
+		if (activeChar.isCastingNow())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas Casteando un Skill"");
+			return false;
+		}
+		
+		if (activeChar.isInCombat())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Si Estas en Combate"");
+			return false;
+		}
+		
+		if (activeChar.isAttackingNow())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas Atacando"");
+			return false;
+		}
+		
+		return true;
+	}
+}
diff --git src/l2jwins/Config.java src/l2jwins/Config.java
index 90bd833..9201857 100644
--- src/l2jwins/Config.java
+++ src/l2jwins/Config.java
@@ -287,6 +287,23 @@
 	public static int RANDOM_CRAFT_ITEM_CONSUME_REFRESH;
 	public static int RANDOM_CRAFT_ITEM_CONSUME_CREATE;
 	
+	public static boolean GAME_MODE_ENABLE;
+	
+	public static float PVP_MODE_XPSP_RATE;
+	public static float NORMAL_MODE_XPSP_RATE;
+	
+	public static float PVP_MODE_SPOIL_RATE;
+	public static float NORMAL_MODE_SPOIL_RATE;
+	
+	public static float PVP_MODE_DROP_RATE;
+	public static float NORMAL_MODE_DROP_RATE;
+	
+	public static float PVP_MODE_ADENA_RATE;
+	public static float NORMAL_MODE_ADENA_RATE;
+	
+	public static float PVP_MODE_SS_RATE;
+	public static float NORMAL_MODE_SS_RATE;
+	
 	// ===================================================================================================================================//
 	
 	public static void loadExtraSettingsConfig()
@@ -306,6 +323,23 @@
 			
 			// ===================================================================================================================================//
 			
+			GAME_MODE_ENABLE = Boolean.parseBoolean(ExtraSettings.getProperty(""GameModeSystemEnable"", ""True""));
+			
+			PVP_MODE_XPSP_RATE = Float.parseFloat(ExtraSettings.getProperty(""PVPModeXpSpRate"", ""1.5""));
+			NORMAL_MODE_XPSP_RATE = Float.parseFloat(ExtraSettings.getProperty(""NormalModeXpSpRate"", ""1.5""));
+			
+			PVP_MODE_SPOIL_RATE = Float.parseFloat(ExtraSettings.getProperty(""PVPModeSpoilRate"", ""1.5""));
+			NORMAL_MODE_SPOIL_RATE = Float.parseFloat(ExtraSettings.getProperty(""NormalSpoilRate"", ""1.5""));
+			
+			PVP_MODE_DROP_RATE = Float.parseFloat(ExtraSettings.getProperty(""PVPModeDropRate"", ""1.5""));
+			NORMAL_MODE_DROP_RATE = Float.parseFloat(ExtraSettings.getProperty(""NormalDropRate"", ""1.5""));
+			
+			PVP_MODE_ADENA_RATE = Float.parseFloat(ExtraSettings.getProperty(""PVPModeAdenaRate"", ""1.5""));
+			NORMAL_MODE_ADENA_RATE = Float.parseFloat(ExtraSettings.getProperty(""NormalAdenaRate"", ""1.5""));
+			
+			PVP_MODE_SS_RATE = Float.parseFloat(ExtraSettings.getProperty(""PVPModeDropSealStonesRate"", ""1.5""));
+			NORMAL_MODE_SS_RATE = Float.parseFloat(ExtraSettings.getProperty(""NormalDropSealStonesRate"", ""1.5""));
+			
 			SERVER_NAME = ExtraSettings.getProperty(""ServerName"", ""L2-Pain"");
 			
 			AFK_TIMER = Integer.parseInt(ExtraSettings.getProperty(""TimerAFK"", ""10""));
diff --git src/l2jwins/game/handler/VoicedCommandHandler.java src/l2jwins/game/handler/VoicedCommandHandler.java
index 901615a..5c191e9 100644
--- src/l2jwins/game/handler/VoicedCommandHandler.java
+++ src/l2jwins/game/handler/VoicedCommandHandler.java
@@ -13,6 +13,7 @@
 import l2jwins.game.handler.voice.Event_DM;
 import l2jwins.game.handler.voice.Event_TVT;
 import l2jwins.game.handler.voice.ExpireItems;
+import l2jwins.game.handler.voice.GameMode;
 import l2jwins.game.handler.voice.OfflineShop;
 import l2jwins.game.handler.voice.Online;
 import l2jwins.game.handler.voice.PartyTeleport;
@@ -97,6 +98,7 @@
 		registerVoicedCommandHandler(new BossEventCMD());
 		registerVoicedCommandHandler(new BufferAuto());
 		registerVoicedCommandHandler(new elixir());
+		registerVoicedCommandHandler(new GameMode());
 		CustomBypassHandler.getInstance().registerCustomBypassHandler(new ExpireItems());
 		
 		LOG.info(""VoicedCommandHandler: Loaded "" + _datatable.size() + "" handlers"");
diff --git src/l2jwins/game/handler/voice/GameMode.java src/l2jwins/game/handler/voice/GameMode.java
new file mode 100644
index 0000000..01766c3
--- /dev/null
+++ src/l2jwins/game/handler/voice/GameMode.java
@@ -0,0 +1,357 @@
+package l2jwins.game.handler.voice;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
+import l2jwins.Config;
+import l2jwins.game.handler.IVoicedCommandHandler;
+import l2jwins.game.model.L2World;
+import l2jwins.game.model.actor.instance.L2PcInstance;
+import l2jwins.game.model.zone.ZoneId;
+import l2jwins.game.network.serverpackets.NpcHtmlMessage;
+import l2jwins.util.database.L2DatabaseFactory;
+
+public class GameMode implements IVoicedCommandHandler
+{
+	private static final String[] VOICED_COMMANDS =
+	{
+		""pve"",
+		""pvp"",
+		""normal"",
+		""mode""
+	};
+	
+	@Override
+	public boolean useVoicedCommand(String command, L2PcInstance activeChar, String params)
+	{
+		if (activeChar == null)
+		{
+			return false;
+		}
+		
+		if (!Config.GAME_MODE_ENABLE)
+		{
+			activeChar.sendMessage(""El Change Mode System Esta Desactivado."");
+			return false;
+		}
+		
+		if (activeChar.isMoving())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Te Estas Moviendo"");
+			return false;
+		}
+		
+		if (activeChar.isInParty())
+		{
+			
+			activeChar.sendMessage(""Sal De La Party Para Cambiar de Modo De Juego"");
+			return false;
+		}
+		
+		if (activeChar.isInDuel())
+		{
+			
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInArena())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInArenaEvent())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInJail())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInPartyMatchRoom())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInCraftMode())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInHideoutSiege())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInHideoutSiege())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_BOSS))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_CASTLE))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_DANGERAREA))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_FLAG))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_NOSUMMONFRIEND))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_JAIL))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_MONSTERTRACK))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_OLY))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_PVP))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_RAID_LIMIT))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_RANDOM))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_SIEGE))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isInsideZone(ZoneId.ZONE_NORESTART))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isIn7sDungeon())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Ahora"");
+			return false;
+		}
+		
+		if (activeChar.isDungeon())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas En Una Dungeon"");
+			return false;
+		}
+		
+		if (activeChar.isInOlympiadMode())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas En Olympiadas"");
+			return false;
+		}
+		if (activeChar.isRegisteredInCTFEvent() || activeChar.isRegisteredInDMEvent() || activeChar.isRegisteredInFunEvent() || activeChar.isRegisteredInTVTEvent() || activeChar.isRegisteredInVIPEvent())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas Registrado En Un Evento"");
+			return false;
+		}
+		
+		if (activeChar.inObserverMode())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas ObserverMode"");
+			return false;
+		}
+		
+		if (activeChar.isCastingNow())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas Cast Un Skill"");
+			return false;
+		}
+		
+		if ((activeChar.isInCombat()))
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego Si Estas En Combate"");
+			return false;
+		}
+		
+		if (activeChar.isAttackingNow())
+		{
+			activeChar.sendMessage(""No Puedes Cambiar El Modo De Juego SI Estas Atacando"");
+			return false;
+		}
+		
+		if (command.equalsIgnoreCase(VOICED_COMMANDS[0]))
+		{ // PVE Mode
+			
+			if (activeChar.isPVEMode())
+			{
+				activeChar.sendMessage(""Ya estas en el modo PVE."");
+				return false;
+			}
+			
+			if (activeChar.getPvpFlag() == 0 && activeChar.getKarma() == 0)
+			{
+				activeChar.setPVEMode(true);
+				activeChar.setPVPMode(false);
+				activeChar.setNormalMode(false);
+				setActiveCharGameMode(activeChar, ""PVE MODE"");
+				activeChar.sendMessage(""Has cambiado al modo PVE. - No Podran Matarte Otros Jugadores"");
+				activeChar.sendMessage(""Tampoco Podras Atacar a Otros Jugadores - No Obtendras El Bonus"");
+				activeChar.decayMe();
+				L2World.getInstance().addPlayerToWorld(activeChar);
+				activeChar.broadcastUserInfo();
+				activeChar.spawnMe();
+				return true;
+			}
+			activeChar.sendMessage("" Estas con Flag o Tienes Karma No puedes Activar el modo PvE Con Karma o Flag"");
+			return false;
+			
+		}
+		else if (command.equalsIgnoreCase(VOICED_COMMANDS[1]))
+		{ // PVP Mode
+			
+			if (activeChar.isPVPMode())
+			{
+				activeChar.sendMessage(""Ya estas en el modo PVP."");
+				return false;
+			}
+			
+			activeChar.stopPvPFlag();
+			activeChar.setPvpFlag(1);
+			activeChar.setPVEMode(false);
+			activeChar.setPVPMode(true);
+			activeChar.setNormalMode(false);
+			setActiveCharGameMode(activeChar, ""PVP MODE"");
+			activeChar.sendMessage(""Has cambiado al modo PVP. - Obtendras un Bonus de 50%"");
+			activeChar.decayMe();
+			L2World.getInstance().addPlayerToWorld(activeChar);
+			activeChar.broadcastUserInfo();
+			activeChar.spawnMe();
+			return true;
+		}
+		else if (command.equalsIgnoreCase(VOICED_COMMANDS[2]))
+		{
+			
+			if (activeChar.isNormalMode())
+			{
+				activeChar.sendMessage(""Ya estas en el modo Normal."");
+				return false;
+			}
+			
+			if (activeChar.getPvpFlag() > 0)
+			{
+				activeChar.stopPvPFlag();
+				activeChar.updatePvPStatus();
+				activeChar.setPVEMode(false);
+				activeChar.setPVPMode(false);
+				activeChar.setNormalMode(true);
+				activeChar.sendMessage(""Has cambiado al modo Normal. - Obtendras un Bonus de 20%"");
+				
+				setActiveCharGameMode(activeChar, ""NORMAL MODE"");
+				activeChar.decayMe();
+				L2World.getInstance().addPlayerToWorld(activeChar);
+				activeChar.broadcastUserInfo();
+				activeChar.spawnMe();
+				
+			}
+			else
+			{
+				activeChar.setPvpFlag(0);
+				activeChar.setPVEMode(false);
+				activeChar.setPVPMode(false);
+				activeChar.setNormalMode(true);
+				setActiveCharGameMode(activeChar, ""NORMAL MODE"");
+				activeChar.sendMessage(""Has cambiado al modo Normal. - Obtendras un Bonus de 20%"");
+				activeChar.decayMe();
+				L2World.getInstance().addPlayerToWorld(activeChar);
+				activeChar.broadcastUserInfo();
+				activeChar.spawnMe();
+				return true;
+			}
+			
+		}
+		
+		else if (command.equalsIgnoreCase(VOICED_COMMANDS[3]))
+		{ // PVP Mode
+			showModeSystemHTML(activeChar);
+			return true;
+		}
+		
+		return false;
+	}
+	
+	private void setActiveCharGameMode(L2PcInstance activeChar, String gameMode)
+	{
+		try (Connection con = L2DatabaseFactory.getInstance().getConnection())
+		{
+			String sql = ""REPLACE INTO Character_Game_Mode (object_id, char_name, game_mode) VALUES (?, ?, ?)"";
+			try (PreparedStatement ps = con.prepareStatement(sql))
+			{
+				ps.setInt(1, activeChar.getObjectId());
+				ps.setString(2, activeChar.getName());
+				ps.setString(3, gameMode);
+				ps.execute();
+			}
+		}
+		catch (SQLException e)
+		{
+			// Manejo de excepciones
+		}
+	}
+	
+	private void showModeSystemHTML(L2PcInstance player)
+	{
+		NpcHtmlMessage html = new NpcHtmlMessage(0);
+		html.setFile(""data/html/mods/ChangeModeSystem/ModeSystem.htm"");
+		player.sendPacket(html);
+	}
+	
+	@Override
+	public String[] getVoicedCommandList()
+	{
+		return VOICED_COMMANDS;
+	}
+}
diff --git src/l2jwins/game/model/L2Attackable.java src/l2jwins/game/model/L2Attackable.java
index 0615b26..c25553d 100644
--- src/l2jwins/game/model/L2Attackable.java
+++ src/l2jwins/game/model/L2Attackable.java
@@ -651,6 +651,19 @@
 									exp = (long) (exp * Config.PREMIUM_XPSP_RATE);
 									sp = (int) (sp * Config.PREMIUM_XPSP_RATE);
 								}
+								
+								if (((L2PcInstance) attacker).isPVPMode())
+								{
+									exp = (long) (exp * Config.PVP_MODE_XPSP_RATE);
+									sp = (int) (sp * Config.PVP_MODE_XPSP_RATE);
+								}
+								
+								if (((L2PcInstance) attacker).isNormalMode())
+								{
+									exp = (long) (exp * Config.NORMAL_MODE_XPSP_RATE);
+									sp = (int) (sp * Config.NORMAL_MODE_XPSP_RATE);
+								}
+								
 							}
 							
 							// Distribute the Exp and SP between the L2PcInstance and its L2Summon
@@ -1158,6 +1171,16 @@
 					dropChance *= Config.PREMIUM_SPOIL_RATE;
 				}
 				
+				if (lastAttacker.isPVPMode())
+				{
+					dropChance *= Config.PVP_MODE_SPOIL_RATE;
+				}
+				
+				if (lastAttacker.isNormalMode())
+				{
+					dropChance *= Config.NORMAL_MODE_SPOIL_RATE;
+				}
+				
 			}
 			dropChance = (int) ((dropChance * lastAttacker.calcStat(Stats.SPOIL_RATE, 100, null, null)) / 100);
 		}
@@ -1183,6 +1206,15 @@
 				{
 					dropChance *= Config.PREMIUM_DROP_RATE;
 				}
+				
+				if (lastAttacker.isPVPMode())
+				{
+					dropChance *= Config.PVP_MODE_DROP_RATE;
+				}
+				if (lastAttacker.isNormalMode())
+				{
+					dropChance *= Config.NORMAL_MODE_DROP_RATE;
+				}
 			}
 		}
 		
@@ -1271,6 +1303,15 @@
 				{
 					itemCount *= Config.PREMIUM_ADENA_RATE;
 				}
+				
+				if (lastAttacker.isPVPMode())
+				{
+					itemCount *= Config.PVP_MODE_ADENA_RATE;
+				}
+				if (lastAttacker.isNormalMode())
+				{
+					itemCount *= Config.NORMAL_MODE_ADENA_RATE;
+				}
 			}
 		}
 		
@@ -1327,6 +1368,16 @@
 			{
 				categoryDropChance *= Config.PREMIUM_SS_RATE;
 			}
+			
+			if (lastAttacker.isPVPMode())
+			{
+				categoryDropChance *= Config.PVP_MODE_SS_RATE;
+			}
+			
+			if (lastAttacker.isNormalMode())
+			{
+				categoryDropChance *= Config.NORMAL_MODE_SS_RATE;
+			}
 		}
 		else
 		{
@@ -1394,6 +1445,15 @@
 					{
 						dropChance *= Config.PREMIUM_DROP_RATE;
 					}
+					
+					if (lastAttacker.isPVPMode())
+					{
+						dropChance *= Config.PVP_MODE_DROP_RATE;
+					}
+					if (lastAttacker.isNormalMode())
+					{
+						dropChance *= Config.NORMAL_MODE_DROP_RATE;
+					}
 				}
 			}
 			
@@ -1453,6 +1513,16 @@
 				{
 					itemCount *= Config.PREMIUM_SS_RATE;
 				}
+				if (lastAttacker.isPVPMode())
+				{
+					itemCount *= Config.PVP_MODE_SS_RATE;
+				}
+				
+				if (lastAttacker.isNormalMode())
+				{
+					itemCount *= Config.NORMAL_MODE_SS_RATE;
+				}
+				
 			}
 			
 			if (drop.getItemId() == 57)
@@ -1477,6 +1547,14 @@
 					{
 						itemCount *= Config.PREMIUM_ADENA_RATE;
 					}
+					if (lastAttacker.isPVPMode())
+					{
+						itemCount *= Config.PVP_MODE_ADENA_RATE;
+					}
+					if (lastAttacker.isNormalMode())
+					{
+						itemCount *= Config.NORMAL_MODE_ADENA_RATE;
+					}
 				}
 			}
 			

diff --git src/l2jwins/game/model/actor/instance/L2PcInstance.java src/l2jwins/game/model/actor/instance/L2PcInstance.java
index 5a34ade..93095fd 100644
--- src/l2jwins/game/model/actor/instance/L2PcInstance.java
+++ src/l2jwins/game/model/actor/instance/L2PcInstance.java
@@ -327,7 +327,12 @@
 	private String _autofarm_mode = ""None"";
 	private Location _autofarm_distance;
 	
+	private boolean isPVEMode = false;
+	private boolean isPVPMode = false;
+	private boolean isNormalMode = false;
+	
 	private boolean isTryingSkin = false;
+	
 	private boolean isTryingSkinPremium = false;
 	private List<Integer> _armorSkins = new CopyOnWriteArrayList<>();
 	private List<Integer> _weaponSkins = new CopyOnWriteArrayList<>();

@@ -11745,6 +11755,22 @@
 			return;
 		}
 		
+		// Check if target is in PVE mode
+		if (target instanceof L2PcInstance && ((L2PcInstance) target).isPVEMode())
+		{
+			sendPacket(ActionFailed.STATIC_PACKET);
+			this.sendMessage(""No Puedes Atacar a "" + target.getName() + "" Por Que Esta en PVE MODE"");
+			return;
+		}
+		
+		// Check if attacker is in PVE mode and target is a player
+		if (this.isPVEMode() && target instanceof L2PcInstance)
+		{
+			sendPacket(ActionFailed.STATIC_PACKET);
+			this.sendMessage(""Desactiva El Modo PVE"");
+			return;
+		}
+		
 		// Check if the spell consume an item
 		if (skill.getItemConsume() > 0)
 		{
@@ -11857,6 +11883,7 @@
 				sendPacket(sm);
 				return;
 			}
+			
 		}
 		
 		// Like L2OFF if you are mounted on wyvern you can't use own skills
@@ -19769,6 +19796,36 @@
 		return isTryingSkin;
 	}
 	
+	public boolean isPVEMode()
+	{
+		return isPVEMode;
+	}
+	
+	public void setPVEMode(boolean b)
+	{
+		isPVEMode = b;
+	}
+	
+	public boolean isPVPMode()
+	{
+		return isPVPMode;
+	}
+	
+	public void setPVPMode(boolean b)
+	{
+		isPVPMode = b;
+	}
+	
+	public boolean isNormalMode()
+	{
+		return isNormalMode;
+	}
+	
+	public void setNormalMode(boolean b)
+	{
+		isNormalMode = b;
+	}
+	
 	public void setIsTryingSkin(boolean b)
 	{
 		isTryingSkin = b;
@@ -20801,6 +20858,31 @@
 		}
 	}
 	
+	public String getGameMode()
+	{
+		try (Connection con = L2DatabaseFactory.getInstance().getConnection())
+		{
+			String sql = ""SELECT game_mode FROM Character_Game_Mode WHERE object_id = ?"";
+			try (PreparedStatement ps = con.prepareStatement(sql))
+			{
+				ps.setInt(1, getObjectId());
+				try (ResultSet rs = ps.executeQuery())
+				{
+					if (rs.next())
+					{
+						return rs.getString(""game_mode"");
+					}
+				}
+			}
+		}
+		catch (SQLException e)
+		{
+			// Manejo de excepciones
+		}
+		
+		return ""Desconocido"";
+	}
+	
 	public void updateLastAction()
 	{
 		_lastAction = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(Config.AFK_TIMER);
diff --git src/l2jwins/game/network/clientpackets/AttackRequest.java src/l2jwins/game/network/clientpackets/AttackRequest.java
index 291a214..5ecca8e 100644
--- src/l2jwins/game/network/clientpackets/AttackRequest.java
+++ src/l2jwins/game/network/clientpackets/AttackRequest.java
@@ -71,6 +71,22 @@
 			return;
 		}
 		
+		// Check if target is in PVE mode
+		if (target instanceof L2PcInstance && ((L2PcInstance) target).isPVEMode() && !activeChar.isGM())
+		{
+			activeChar.sendMessage(""El Usuario: "" + target.getName() + "" esta en modo PvE"");
+			activeChar.sendPacket(ActionFailed.STATIC_PACKET);
+			return;
+		}
+		
+		// Check if attacker is in PVE mode
+		if (activeChar.isPVEMode() && !activeChar.isGM())
+		{
+			activeChar.sendMessage(""Debes desactivar el modo PvE para atacar a otros jugadores"");
+			activeChar.sendPacket(ActionFailed.STATIC_PACKET);
+			return;
+		}
+		
 		// Players can't attack objects in the other instances except from multiverse
 		if (target.getInstanceId() != activeChar.getInstanceId() && activeChar.getInstanceId() != -1)
 		{
diff --git src/l2jwins/game/network/clientpackets/EnterWorld.java src/l2jwins/game/network/clientpackets/EnterWorld.java
index aeae263..89370b4 100644
--- src/l2jwins/game/network/clientpackets/EnterWorld.java
+++ src/l2jwins/game/network/clientpackets/EnterWorld.java
@@ -203,6 +202,62 @@
 			activeChar.restoreEffects();
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			
+			String gameMode = activeChar.getGameMode();
+			if (gameMode.equalsIgnoreCase(""PVE MODE""))
+			{
+				activeChar.setPVEMode(true);
+				activeChar.setPVPMode(false);
+				activeChar.setNormalMode(false);
+				activeChar.decayMe();
+				L2World.getInstance().addPlayerToWorld(activeChar);
+				activeChar.sendMessage(""Estas En PvE Mode - Los jugadores no podran atacarte"");
+				activeChar.sendMessage(""Puedes Cambiarlo Con: - .pve - .pvp - .normal"");
+				activeChar.broadcastUserInfo();
+				activeChar.spawnMe();
+			}
+			else if (gameMode.equalsIgnoreCase(""PVP MODE""))
+			{
+				activeChar.stopPvPFlag();
+				activeChar.updatePvPFlag(1);
+				activeChar.setPVEMode(false);
+				activeChar.setPVPMode(true);
+				activeChar.setNormalMode(false);
+				activeChar.sendMessage(""Estas En PVP Mode - Recibes un bonus de 50% de Exp - Sp - Drop - Adena"");
+				activeChar.sendMessage(""Puedes Cambiarlo Con: - .pve - .pvp - .normal"");
+				activeChar.decayMe();
+				L2World.getInstance().addPlayerToWorld(activeChar);
+				activeChar.broadcastUserInfo();
+				activeChar.spawnMe();
+			}
+			else if (gameMode.equalsIgnoreCase(""NORMAL MODE""))
+			{
+				activeChar.setPvpFlag(0);
+				activeChar.setPVEMode(false);
+				activeChar.setPVPMode(false);
+				activeChar.setNormalMode(true);
+				activeChar.sendMessage(""Estas En Normal Mode - Recibes un bonus de 20% de Exp - Sp - Drop - Adena"");
+				activeChar.sendMessage(""Puedes Cambiarlo Con: - .pve - .pvp - .normal"");
+				activeChar.decayMe();
+				L2World.getInstance().addPlayerToWorld(activeChar);
+				activeChar.broadcastUserInfo();
+				activeChar.spawnMe();
+			}
+			
+			if (activeChar.getFirstLog())
+			{
+				activeChar.setNormalMode(true);
+				activeChar.sendMessage(""Estas En Normal Mode - Recibes un bonus de 20% de Exp - Sp - Drop - Adena"");
+				activeChar.sendMessage(""Puedes Cambiarlo Con: - .pve - .pvp - .normal"");
+				
+				showModeSystemHTML(activeChar);
+				
+			}
+			
+		}
+		
 		// Apply augmentation bonus for equipped items
 		for (L2ItemInstance temp : activeChar.getInventory().getAugmentedItems())
 		{
@@ -1209,6 +1262,13 @@
 		
 	}
 	
+	private void showModeSystemHTML(L2PcInstance player)
+	{
+		NpcHtmlMessage html = new NpcHtmlMessage(0);
+		html.setFile(""data/html/mods/ChangeModeSystem/ModeSystem.htm"");
+		player.sendPacket(html);
+	}
+	
 	private void notifyCastleOwner(L2PcInstance activeChar)
 	{
 		L2Clan clan = activeChar.getClan();
diff --git src/l2jwins/game/network/clientpackets/RequestBypassToServer.java src/l2jwins/game/network/clientpackets/RequestBypassToServer.java
index d179afd..a5e7754 100644
--- src/l2jwins/game/network/clientpackets/RequestBypassToServer.java
+++ src/l2jwins/game/network/clientpackets/RequestBypassToServer.java
@@ -30,6 +30,7 @@
 import java.util.stream.Stream;
 
 import Base.ItemRecover.ItemRecoveryManager;
+import Base.ModeSystem.ChangeModeManager;
 import Base.WinsStats.WinsStatSystem;
 import Base.custom.Board.BoardManager;
 import javolution.text.TextBuilder;
@@ -342,6 +343,101 @@
 				activeChar.broadcastUserInfo();
 				activeChar.broadcastTitleInfo();
 			}
+			
+			else if (bp.bypass.startsWith(""PvEMode""))
+			{
+				
+				if (ChangeModeManager.verifyChangeMode(activeChar))
+				{
+					
+					if (activeChar.isPVEMode())
+					{
+						activeChar.sendMessage(""Ya estas en el modo PVE."");
+						return;
+					}
+					
+					if (activeChar.getPvpFlag() == 0 && activeChar.getKarma() == 0)
+					{
+						activeChar.setPVEMode(true);
+						activeChar.setPVPMode(false);
+						activeChar.setNormalMode(false);
+						activeChar.decayMe();
+						L2World.getInstance().addPlayerToWorld(activeChar);
+						activeChar.sendMessage(""Estas En PvE Mode - Los jugadores no podran atacarte"");
+						activeChar.sendMessage(""Puedes Cambiarlo Con: - .pve - .pvp - .normal"");
+						activeChar.broadcastUserInfo();
+						activeChar.spawnMe();
+					}
+					else
+					{
+						activeChar.sendMessage("" Estas con Flag o Tienes Karma No puedes Activar el modo PvE Con Karma o Flag"");
+					}
+				}
+				
+			}
+			
+			else if (bp.bypass.startsWith(""PvPMode""))
+			{
+				
+				if (ChangeModeManager.verifyChangeMode(activeChar))
+				{
+					if (activeChar.isPVPMode())
+					{
+						activeChar.sendMessage(""Ya estas en el modo PVP."");
+						return;
+					}
+					
+					activeChar.stopPvPFlag();
+					activeChar.setPvpFlag(1);
+					activeChar.setPVEMode(false);
+					activeChar.setPVPMode(true);
+					activeChar.setNormalMode(false);
+					activeChar.sendMessage(""Has cambiado al modo PVP. - Obtendras un Bonus de 50%"");
+					activeChar.decayMe();
+					L2World.getInstance().addPlayerToWorld(activeChar);
+					activeChar.broadcastUserInfo();
+					activeChar.spawnMe();
+				}
+				
+			}
+			
+			else if (bp.bypass.startsWith(""NormalMode""))
+			{
+				if (ChangeModeManager.verifyChangeMode(activeChar))
+				{
+					
+					if (activeChar.isNormalMode())
+					{
+						activeChar.sendMessage(""Ya estas en el modo Normal."");
+						return;
+					}
+					
+					if (activeChar.getPvpFlag() > 0)
+					{
+						activeChar.stopPvPFlag();
+						activeChar.updatePvPStatus();
+						activeChar.setPVEMode(false);
+						activeChar.setPVPMode(false);
+						activeChar.setNormalMode(true);
+						activeChar.sendMessage(""Has cambiado al modo Normal. - Obtendras un Bonus de 20%"");
+						activeChar.decayMe();
+						L2World.getInstance().addPlayerToWorld(activeChar);
+						activeChar.broadcastUserInfo();
+						activeChar.spawnMe();
+					}
+					activeChar.setPvpFlag(0);
+					activeChar.setPVEMode(false);
+					activeChar.setPVPMode(false);
+					activeChar.setNormalMode(true);
+					activeChar.sendMessage(""Has cambiado al modo Normal. - Obtendras un Bonus de 20%"");
+					activeChar.decayMe();
+					L2World.getInstance().addPlayerToWorld(activeChar);
+					activeChar.broadcastUserInfo();
+					activeChar.spawnMe();
+				}
+				
+			}
+			
 			else if (bp.bypass.startsWith(""player_help ""))
 			{
 				playerHelp(activeChar, bp.bypass.substring(12));
diff --git src/l2jwins/game/network/clientpackets/RequestDuelAnswerStart.java src/l2jwins/game/network/clientpackets/RequestDuelAnswerStart.java
index 8b957eb..416ba62 100644
--- src/l2jwins/game/network/clientpackets/RequestDuelAnswerStart.java
+++ src/l2jwins/game/network/clientpackets/RequestDuelAnswerStart.java
@@ -19,6 +19,7 @@
  */
 package l2jwins.game.network.clientpackets;
 
+import l2jwins.Config;
 import l2jwins.game.managers.DuelManager;
 import l2jwins.game.model.actor.instance.L2PcInstance;
 import l2jwins.game.network.PacketClient;
@@ -56,6 +57,15 @@
 			return;
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (requestor.isPVEMode())
+			{
+				player.sendMessage(""Estas en PVE MODE o el jugador que intentas retar a un duelo lo esta"");
+				return;
+			}
+		}
+		
 		if (_response == 1)
 		{
 			SystemMessage msg1 = null, msg2 = null;
diff --git src/l2jwins/game/network/clientpackets/RequestDuelStart.java src/l2jwins/game/network/clientpackets/RequestDuelStart.java
index d808b43..7855025 100644
--- src/l2jwins/game/network/clientpackets/RequestDuelStart.java
+++ src/l2jwins/game/network/clientpackets/RequestDuelStart.java
@@ -65,6 +65,21 @@
 			return;
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (activeChar.isPVEMode())
+			{
+				activeChar.sendMessage(""Desactiva El PVE MODE"");
+				return;
+			}
+			
+			if (targetChar.isPVEMode())
+			{
+				activeChar.sendMessage(""El Jugador: "" + targetChar.getName() + "" Esta en PvE Mode"");
+				return;
+			}
+		}
+		
 		// Check if duel is possible
 		if (!activeChar.canDuel())
 		{
diff --git src/l2jwins/game/network/clientpackets/RequestJoinParty.java src/l2jwins/game/network/clientpackets/RequestJoinParty.java
index 76a96d3..ff31b1a 100644
--- src/l2jwins/game/network/clientpackets/RequestJoinParty.java
+++ src/l2jwins/game/network/clientpackets/RequestJoinParty.java
@@ -71,6 +71,16 @@
 			return;
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			
+			if (requestor.getGameMode().equals(target.getGameMode()))
+			{
+				requestor.sendMessage(""No puedes invitar a la party a un jugador con un modo de juego diferente."");
+				return;
+			}
+		}
+		
 		if ((requestor._inEventDM && (DM.is_teleport() || DM.is_started())) || (target._inEventDM && (DM.is_teleport() || DM.is_started())))
 		{
 			requestor.sendMessage(""You can't invite that player in party!"");
diff --git src/l2jwins/game/network/clientpackets/RequestJoinSiege.java src/l2jwins/game/network/clientpackets/RequestJoinSiege.java
index 644f078..a785d0e 100644
--- src/l2jwins/game/network/clientpackets/RequestJoinSiege.java
+++ src/l2jwins/game/network/clientpackets/RequestJoinSiege.java
@@ -20,6 +20,7 @@
 
 package l2jwins.game.network.clientpackets;
 
+import l2jwins.Config;
 import l2jwins.game.managers.CHSiegeManager;
 import l2jwins.game.managers.CastleManager;
 import l2jwins.game.managers.FortManager;
@@ -62,6 +63,15 @@
 			return;
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (player.isPVEMode())
+			{
+				player.sendMessage(""Desactiva El PVE MODE"");
+				return;
+			}
+		}
+		
 		L2Clan clan = player.getClan();
 		if (clan == null)
 		{
diff --git src/l2jwins/game/network/clientpackets/RequestOlympiadMatchList.java src/l2jwins/game/network/clientpackets/RequestOlympiadMatchList.java
index 3f271ba..43803ee 100644
--- src/l2jwins/game/network/clientpackets/RequestOlympiadMatchList.java
+++ src/l2jwins/game/network/clientpackets/RequestOlympiadMatchList.java
@@ -20,6 +20,7 @@
  */
 package l2jwins.game.network.clientpackets;
 
+import l2jwins.Config;
 import l2jwins.game.model.actor.instance.L2PcInstance;
 import l2jwins.game.model.olympiad.Olympiad;
 import l2jwins.game.model.olympiad.OlympiadGameManager;
@@ -46,6 +47,15 @@
 			return;
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (activeChar.isPVEMode())
+			{
+				activeChar.sendMessage(""Desactiva El PVE MODE"");
+				return;
+			}
+		}
+		
 		int i = 0;
 		
 		final StringBuilder sb = new StringBuilder(1500);
diff --git src/l2jwins/game/network/clientpackets/RequestOlympiadObserverEnd.java src/l2jwins/game/network/clientpackets/RequestOlympiadObserverEnd.java
index 14201b7..f94a4be 100644
--- src/l2jwins/game/network/clientpackets/RequestOlympiadObserverEnd.java
+++ src/l2jwins/game/network/clientpackets/RequestOlympiadObserverEnd.java
@@ -20,6 +20,7 @@
  */
 package l2jwins.game.network.clientpackets;
 
+import l2jwins.Config;
 import l2jwins.game.model.actor.instance.L2PcInstance;
 import l2jwins.game.network.PacketClient;
 
@@ -39,6 +40,15 @@
 			return;
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (activeChar.isPVEMode())
+			{
+				activeChar.sendMessage(""Desactiva El PVE MODE"");
+				return;
+			}
+		}
+		
 		if (activeChar.inObserverMode())
 		{
 			activeChar.leaveOlympiadObserverMode();
diff --git src/l2jwins/game/network/clientpackets/RequestStartPledgeWar.java src/l2jwins/game/network/clientpackets/RequestStartPledgeWar.java
index 68b6a38..2c9642f 100644
--- src/l2jwins/game/network/clientpackets/RequestStartPledgeWar.java
+++ src/l2jwins/game/network/clientpackets/RequestStartPledgeWar.java
@@ -70,6 +70,15 @@
 			return;
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (player.isPVEMode())
+			{
+				player.sendMessage(""Desactiva El PVE MODE"");
+				return;
+			}
+		}
+		
 		final L2Clan clan = ClanTable.getInstance().getClanByName(_pledgeName);
 		if (clan == null)
 		{
diff --git src/l2jwins/game/network/clientpackets/RequestStopPledgeWar.java src/l2jwins/game/network/clientpackets/RequestStopPledgeWar.java
index 3cda6f7..2827035 100644
--- src/l2jwins/game/network/clientpackets/RequestStopPledgeWar.java
+++ src/l2jwins/game/network/clientpackets/RequestStopPledgeWar.java
@@ -19,6 +19,7 @@
  */
 package l2jwins.game.network.clientpackets;
 
+import l2jwins.Config;
 import l2jwins.game.datatables.sql.ClanTable;
 import l2jwins.game.model.L2Clan;
 import l2jwins.game.model.L2World;
@@ -61,6 +62,15 @@
 			return;
 		}
 		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (player.isPVEMode())
+			{
+				player.sendMessage(""Desactiva El PVE MODE"");
+				return;
+			}
+		}
+		
 		if (!playerClan.isAtWarWith(clan.getClanId()))
 		{
 			player.sendMessage(""You aren't at war with this clan."");
diff --git src/l2jwins/game/network/clientpackets/RequestSurrenderPledgeWar.java src/l2jwins/game/network/clientpackets/RequestSurrenderPledgeWar.java
index 70bb1c9..320e4b8 100644
--- src/l2jwins/game/network/clientpackets/RequestSurrenderPledgeWar.java
+++ src/l2jwins/game/network/clientpackets/RequestSurrenderPledgeWar.java
@@ -19,6 +19,7 @@
  */
 package l2jwins.game.network.clientpackets;
 
+import l2jwins.Config;
 import l2jwins.game.datatables.sql.ClanTable;
 import l2jwins.game.model.L2Clan;
 import l2jwins.game.model.actor.instance.L2PcInstance;
@@ -48,11 +49,24 @@
 	{
 		_activeChar = getClient().getActiveChar();
 		if (_activeChar == null)
+		{
 			return;
+		}
+		
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (_activeChar.isPVEMode())
+			{
+				_activeChar.sendMessage(""Desactiva El PVE MODE"");
+				return;
+			}
+		}
 		
 		_clan = _activeChar.getClan();
 		if (_clan == null)
+		{
 			return;
+		}
 		
 		final L2Clan clan = ClanTable.getInstance().getClanByName(_pledgeName);
 		if (clan == null)
diff --git src/l2jwins/game/network/serverpackets/CharInfo.java src/l2jwins/game/network/serverpackets/CharInfo.java
index 1b85818..dadf1f4 100644
--- src/l2jwins/game/network/serverpackets/CharInfo.java
+++ src/l2jwins/game/network/serverpackets/CharInfo.java
@@ -74,10 +74,8 @@
 		_swimWalkSpd = _flWalkSpd = _flyWalkSpd = _walkSpd;
 		_maxCp = player.getMaxCp();
 		
-		if (!hideInfo())
+		if (!GameModeInfo())
 		{
-			_name = player.getName();
-			
 			if (player.getAppearance().getInvisible())
 			{
 				_title = ""Invisible"";
@@ -87,9 +85,19 @@
 				
 				_title = _activeChar.getTitle();
 			}
+			_titleColor = player.getAppearance().getTitleColor();
+		}
+		else
+		{
+			_title = ""PVE MODE"";
+			_titleColor = 0x00FFFF;
+		}
+		
+		if (!hideInfo())
+		{
+			_name = player.getName();
 			
 			_nameColor = player.getAppearance().getNameColor();
-			_titleColor = player.getAppearance().getTitleColor();
 			_clanId = player.getClanId();
 			_clanCrestId = player.getClanCrestId();
 			_allyId = player.getAllyId();
@@ -98,9 +106,8 @@
 		else
 		{
 			_name = Config.PLAYER_FAKE_NAME;
-			_title = """";
+			
 			_nameColor = 0xFFFFFF;
-			_titleColor = 0xFFFF77;
 			_clanId = 0;
 			_clanCrestId = 0;
 			_allyId = 0;
@@ -511,6 +518,18 @@
 		return false;
 	}
 	
+	public boolean GameModeInfo()
+	{
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (_activeChar.isPVEMode())
+			{
+				return true;
+			}
+		}
+		return false;
+	}
+	
 	@Override
 	public String getType()
 	{
diff --git src/l2jwins/game/network/serverpackets/UserInfo.java src/l2jwins/game/network/serverpackets/UserInfo.java
index e0a682f..ca47b8b 100644
--- src/l2jwins/game/network/serverpackets/UserInfo.java
+++ src/l2jwins/game/network/serverpackets/UserInfo.java
@@ -29,6 +29,9 @@
 	private int _flyWalkSpd;
 	private int _relation;
 	private float _moveMultiplier;
+	private String _title;
+	
+	private int _titleColor;
 	
 	// Your own character info
 	public UserInfo(L2PcInstance character)
@@ -52,6 +55,26 @@
 		_walkSpd = (int) (_activeChar.getWalkSpeed() / _moveMultiplier);
 		_swimRunSpd = _flRunSpd = _flyRunSpd = _runSpd;
 		_swimWalkSpd = _flWalkSpd = _flyWalkSpd = _walkSpd;
+		
+		if (!GameModeInfo())
+		{
+			if (character.getAppearance().getInvisible())
+			{
+				_title = ""Invisible"";
+			}
+			else
+			{
+				
+				_title = _activeChar.getTitle();
+			}
+			_titleColor = character.getAppearance().getTitleColor();
+		}
+		else
+		{
+			_title = ""PVE MODE"";
+			_titleColor = 0x00FFFF;
+		}
+		
 	}
 	
 	@Override
@@ -379,20 +402,15 @@
 		writeD(_activeChar.getAppearance().getFace());
 		writeD(_activeChar.isGM() ? 1 : 0); // builder level
 		
-		String title = _activeChar.getTitle();
-		if (_activeChar.getAppearance().getInvisible() && _activeChar.isGM())
-		{
-			title = ""Invisible"";
-		}
 		if (_activeChar.getPoly().isMorphed())
 		{
 			final L2NpcTemplate polyObj = NpcTable.getInstance().getTemplate(_activeChar.getPoly().getPolyId());
 			if (polyObj != null)
 			{
-				title += "" - "" + polyObj.name;
+				_title += "" - "" + polyObj.name;
 			}
 		}
-		writeS(title);
+		writeS(_title);
 		
 		writeD(_activeChar.getClanId());
 		writeD(_activeChar.getClanCrestId());
@@ -461,7 +479,7 @@
 		writeD(_activeChar.getPledgeClass()); // changes the text above CP on Status Window
 		writeD(_activeChar.getPledgeType());
 		
-		writeD(_activeChar.getAppearance().getTitleColor());
+		writeD(_titleColor);
 		
 		if (_activeChar.isCursedWeaponEquiped())
 		{
@@ -515,6 +533,18 @@
 		return false;
 	}
 	
+	public boolean GameModeInfo()
+	{
+		if (Config.GAME_MODE_ENABLE)
+		{
+			if (_activeChar.isPVEMode())
+			{
+				return true;
+			}
+		}
+		return false;
+	}
+	
 	@Override
 	public String getType()
 	{
"
9fytWF0T,padudung,421271,Python,Wednesday 21st of June 2023 10:59:49 PM CDT,"# Matriks AC = B
# Mencari nilai dari masing-masing elemen dari matriks A dan B

def elemA(p, q, x, y):
    sum = 0
    for xi in x:
        sum += xi ** (p + q - 2)
    return sum


def elemB(p, q, x, y):
    sum = 0
    N = len(x)
    for i in range(N):
        sum += y[i] * x[i] ** (p + q - 2)
    return sum


def createMatrixA(M, x, y):
    mat = []
    for p in range(M + 1):
        row = []
        for q in range(M + 1):
            # Python list begin from 0, so we have to add 1 for each p and q
            apq = elemA(p + 1, q + 1, x, y)
            row.append(apq)
        mat.append(row)
    return mat


def createMatrixB(M, x, y):
    mat = []
    for p in range(M + 1):
        row = []
        # Python list begin from 0, so we have to add 1 for each p and q
        bpq = elemB(p + 1, 1, x, y)
        row.append(bpq)
        mat.append(row)
    return mat


def printMatrix(mat):
    for row in mat:
        print(row)


# Persamaan: y = 1 - 2x - 5x**2 + x**3
x = [i for i in range(0, 11)]
y = [1, -5, -15, -23, -23, -9, 25, 85, 177, 307, 481]
M = 4

A = createMatrixA(M, x, y)
B = createMatrixB(M, x, y)

import numpy as np
npA = np.array(A)
npB = np.array(B)

C = np.linalg.solve(npA, npB)
print(C)
"
0nb92jWa,(Auto)MSN SHOPPING SCRIPT BOOKMARK,RohanPhuyal,JavaScript,Wednesday 21st of June 2023 10:43:03 PM CDT,"javascript:((function(){var scroll = document.querySelector(""shopping-page-base"")?.shadowRoot.querySelector(""shopping-homepage"")?.shadowRoot.querySelector(""msft-feed-layout"")?.shadowRoot.querySelector(""msn-shopping-game-pane"");if(scroll){scroll.scrollIntoView({behavior:'smooth'});}else{alert(""Shopping game not found, reload"");return;}var selectButton=null;var selectExists=null;var iterationNumber=0;var msnShoppingGamePane2=document.querySelector(""shopping-page-base"")?.shadowRoot.querySelector(""shopping-homepage"")?.shadowRoot.querySelector(""msft-feed-layout"")?.shadowRoot.querySelector(""msn-shopping-game-pane"");var shoppingGame=document.querySelector(""shopping-page-base"")?.shadowRoot.querySelector(""shopping-homepage"")?.shadowRoot.querySelector(""msft-feed-layout"")?.shadowRoot.querySelector(""msn-shopping-game-pane"")?.shadowRoot.querySelector(""msft-stripe"");function getObjectIndexFromArray(objects,id){for(let i=0;i<objects.length;i++){if(objects[i].id===id){return i}}return-1}function getLowestPriceItemID(priceMap){var lowestPriceItemID;var currLowestPrice=Infinity;for(const[itemID,item]of Object.entries(priceMap)){let price=parseFloat(item.price.substring(1));if(currLowestPrice>price){lowestPriceItemID=itemID;currLowestPrice=price}}return lowestPriceItemID}function highlightItems(correctIndex,items){for(let i=0;i<items.length;i++){if(i==correctIndex){selectButton=shoppingGame.getElementsByClassName(""shopping-game-card-outline"")[correctIndex]?.querySelector(""fluent-card"")?.querySelector(""msn-shopping-card"").getElementsByClassName(""shopping-select-overlay-button"")[0];items[i].style.borderColor=""red""}}}function refreshGame(){var lowestPriceItemID=getLowestPriceItemID(msnShoppingGamePane2.originalPricesbyId);var itemIndex=getObjectIndexFromArray(msnShoppingGamePane2.displayedShoppingEntities,lowestPriceItemID);console.log(""Coeeect Index: ""+itemIndex);highlightItems(itemIndex,shoppingGame.getElementsByClassName(""shopping-game-card-outline""));if(selectButton!=null){console.log(""SEL Button received""+selectButton);setTimeout(selectButtonCLick,1000)}else{console.log(""Select Button Null"")}const msnShoppingGamePane=document.querySelector(""shopping-page-base"")?.shadowRoot.querySelector(""shopping-homepage"")?.shadowRoot.querySelector(""msft-feed-layout"")?.shadowRoot.querySelector(""msn-shopping-game-pane"");if(msnShoppingGamePane.getAttribute('gamestate')=='win'||msnShoppingGamePane.getAttribute('gamestate')=='idle'||msnShoppingGamePane.getAttribute('gamestate')=='lose'){msnShoppingGamePane.setAttribute('gamestate','active');msnShoppingGamePane.resetGame()}}function selectButtonCLick(){selectButton.click();iterationNumber++;if(iterationNumber===10){clearInterval(fixIntervalId)}}refreshGame();msnShoppingGamePane2.addEventListener('click',function(event){console.log(""MOUSE"");refreshGame()});var fixIntervalId;function executeFixFunction(){selectExists=document.querySelector(""shopping-page-base"")?.shadowRoot.querySelector(""shopping-homepage"")?.shadowRoot.querySelector(""msft-feed-layout"")?.shadowRoot.querySelector(""msn-shopping-game-pane"").getAttribute(""gamestate"");console.log(""Execute Fix Function: ""+selectExists);if(selectExists=='win'||selectExists=='idle'||selectExists=='active'||selectExists=='lose'){refreshGame()}}function startFixExecution(){console.log(""Start Fix Function"");fixIntervalId=setInterval(function(){executeFixFunction()},1000)}startFixExecution();})());"
YNCWi580,Find double words,nicuf,Python,Wednesday 21st of June 2023 10:26:32 PM CDT,"-----------------
EXPLANATION""

English: https://neculaifantanaru.com/en/find-all-files-that-contain-a-double-words-string-or-number.html
Romanian: https://neculaifantanaru.com/gaseste-toate-fisierele-care-contin-cuvinte-duble-string-sau-numar.html
-----------------


import os
import re

def read_text_from_file(file_path):
    """"""
    Aceasta functie returneaza continutul unui fisier.
    file_path: calea catre fisierul din care vrei sa citesti
    """"""
    with open(file_path, encoding='utf8', errors='ignore') as f:
        text = f.read()
        return text


def write_to_file(text, file_path, encoding='utf8'):
    """"""
    Aceasta functie scrie un text intr-un fisier.
    text: textul pe care vrei sa il scrii
    file_path: calea catre fisierul in care vrei sa scrii
    """"""
    with open(file_path, 'wb') as f:
        f.write(text.encode('utf-8', 'ignore'))


def get_duplicates(directory_path, results_file, tag):
    duplicates = dict()
    fisiere_care_nu_au_id = ''
    fisiere_duplicat = ''
    id_pattern = re.compile('\$item_id = (.*?);')
    for f in os.listdir(directory_path):
            if f.endswith('.html') and f != 'termeni-si-conditii.html' and f != ""parteneri.html"":
                filepath = directory_path + '//' + f
                file_text = read_text_from_file(filepath)
                number = re.findall(id_pattern, file_text)
                if len(number) != 0:
                    number = number[0]
                    number = number.strip()
                    if number in duplicates.keys():
                        duplicates[number].append(f)
                    else:
                        duplicates[number] = [f]
                else:
                    fisiere_care_nu_au_id = fisiere_care_nu_au_id + f + '\n'

    for key in duplicates.keys():
        if len(duplicates[key]) >= 2:
            for f in duplicates[key]:
                fisiere_duplicat = fisiere_duplicat + f + '\n'
            fisiere_duplicat += '\n\n'

    # i-au toate numerele din intervalul 1 - id maxim
    # modificare in numere intregi
    numere_intregi = [int(i) for i in list(duplicates.keys())]
    interval = list()
    if tag == 'ro':
        interval = [i for i in range(1, max(numere_intregi) + 1)]
    elif tag == 'en':
        interval = [i for i in range(5000, max(numere_intregi) + 1)]

    numere_care_lipsesc = list()
    for number in interval:
        if number not in numere_intregi:
            numere_care_lipsesc.append(number)
    print(""MAX: "", max(numere_intregi))
    print(""NUMERE CARE LIPSESC: "", numere_care_lipsesc)

    fisiere_care_lipsesc_id = ''
    for numar in numere_care_lipsesc:
        fisiere_care_lipsesc_id = fisiere_care_lipsesc_id + str(numar) + '\n'

    result = ""FISIERE CARE NU AU ID \n\n"" + fisiere_care_nu_au_id + '\n' + ""FISIERE DUPLICAT \n\n"" + fisiere_duplicat  + '\n' + ""NUMERE CARE LIPSESC \n\n"" + fisiere_care_lipsesc_id
    write_to_file(result, results_file)

    print(""Scriere efectuata cu succes."")

if __name__ == '__main__':
    directory_path = ""e:\\Carte\\BB\\17 - Site Leadership\\Principal\\en""   # AICI SCHIMB PATCH cu ro sau cu en
    results_file = ""e:\\Carte\\BB\\17 - Site Leadership\\Principal\\ro\\results_duplicates.txt""  # AICI APAR REZULTATELE FINALE

    get_duplicates(directory_path, results_file, ""en"") # ""ro""  # AICI SCHIMB PATCH cu ro sau cu en  (SCHIMBA SI MAI SUS )"
4q04sRXv,ecom - purchase,CCMAndrei,JavaScript,Wednesday 21st of June 2023 10:00:53 PM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'purchase',  			// name of the event. In this case, it always must be purchase
  ecommerce: {
	currency: 'AUD',
    value: 125.99,						// order total (price of all products + shipping). If you want, it can be only price of all products
    shipping: 70.00,					// shipping costs
    affiliation: 'TFO SHOP',		// affiliation (e.g. affiliate id, name of the store, etc.)
    transaction_id: '83936',			// transaction id
    coupon: 'EOFY',			// if coupon was applied to the order, include it here			
    items: [{							// an array with all products
      item_name: 'Royale Calacatta Marble Look Matt Rectified Porcelain Tile 4384', 		// insert an actual product name
      item_id: 'CALACATTAROYALMT6060',				// insert an actual product ID
      price: 26.00,					// insert an actual product price. Number or a string. Don't include currency code
      item_category: 'Porcelain Tiles',			// insert an actual product top-level category
	  item_variant: 'Blue',				// insert an actual product variant
	  material: 'Pocelain',				// insert material here
      discount: 2.00,					//the discount per item. Use price only, do not include percentage discount
      quantity: '1',					// product quantity
      promotion_name: 'giveaway',		// insert name of current promotion if clicked from promotion
      item_list_name: 'Featured Products',	// insert name of list of where product was clicked
	  item_coupon: 'SUMMER20'			// if a coupon was applied not to the entire order but to one product, use item_coupon
    },{
      item_name: 'Product 2',
      item_id: 'product2',
      price: 12.99,
      item_brand: 'Brand B',
      item_category: 'Category B',
      item_variant: 'Yellow',
      quantity: '1'
    }]
  }
});"
