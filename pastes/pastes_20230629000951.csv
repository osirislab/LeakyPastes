id,title,username,language,date,content
D8g71eq3,flexico,goldfiction,Lua,Wednesday 28th of June 2023 07:05:09 PM CDT,"-- flexico
pastebin get LEHQExFi flex.lua
pastebin get eGkHs4Kk dig.lua
pastebin get pEHirhY0 quarry.lua
pastebin get Jkd18h5j stairs.lua"
K7G7ThCs,BTC Wallet Credentials have been reset,windpspell_53,GetText,Wednesday 28th of June 2023 06:43:54 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
heimelagbf:uE6qFa on 45.9.148.244
You can connect via SSH or use an online client such as ssheasy.com.
Regards"
FDZ4ejCr,ejemplo de ingreso de datos,teslariu,Python,Wednesday 28th of June 2023 06:39:34 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Script que pide un nombre y una edad y bromea
# >> Ingrese su nombre: Carlos
# >> Ingrese su edad: 33
# >> Hola Carlos, usted tiene 33 años de edad pero parece de 66

from temp import ingresar

nombre = input(""Ingrese su nombre: "")
edad = ingresar(""edad"")"
FQ7AfzYy,codigo template while,teslariu,Python,Wednesday 28th of June 2023 06:38:12 PM CDT,"# !/usr/bin/env python
# -*- coding: utf-8 -*-
# Turing : 
# 1) funciones computables: son funciones matematicas
#    que se puede computar automaticamente --> COMPUTADORA
# 2) maquina de Turing: demostro que se podía construir una 
#     computadora
# 3) Demuestra que las funciones computables se pueden descomponer
#    como un condicional (if) un bucle indefinido (while) y un 
#    bucle definido (for)
# 4) Los lenguajes de prog que cumplen el punto 3 se llaman
#    Turing completos y son de propósito general

# script que imprime los cuadrados y cubos de los enteros del 1 # al 10

# templates o plantillas

# Script que convierte temp de ºC a ºF y viceversa
import os
import time
                            

def menu():
    return """"""
    Conversión de temperatura
    -------------------------
    1. ºC a ºF
    2. ºF a ºC
    3. Salir
    -------------------------
    """"""

def ingresar(valor):
    while True:
        try:
            temp = float(input(f""Ingresar {valor}: ""))
        except ValueError:
            print(""Error, debe ingresar un número"")
        else:
            return temp
    
    
def borrar_pantalla():
    if os.name == ""posix"":
        os.system(""clear"")
    else:
        os.system(""cls"")
        
def convertir_a_ºF():
    temp = ingresar(""temperatura"")
    return f""Temperatura: {temp * 1.8 + 32:.1f}ºF""
   
        
def convertir_a_ºC():
    temp = ingresar(""temperatura"")
    return f""Temperatura: {(temp - 32) / 1.8:.1f}ºF""
    
    
###############################################################    

if __name__ == '__main__':
    while True:
    
        borrar_pantalla()
        print(menu())
    
        opcion = input(""Ingrese su opción: "")
    
        if opcion == ""1"":
            print(convertir_a_ºF())
            time.sleep(3)
    
        
        elif opcion == ""2"":
            print(convertir_a_ºC())
            time.sleep(3)
     
        
        elif opcion == ""3"":
            print(""Gracias por utilizar este programa...."")
            break
     
        
        else:
            print(""Opción incorrecta..."")
            time.sleep(3)












"
MZefmuam,Chip8 memory gets corrupted,drakonite,C,Wednesday 28th of June 2023 05:07:38 PM CDT,"#include <assert.h>
#include <raylib.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define MEM_SIZE 4096
#define MEM_OFFSET 0x200

#define SCALE 10
#define SCREEN_WIDTH 64 * SCALE
#define SCREEN_HEIGHT 32 * SCALE

typedef struct {
    uint8_t *mem;    /* 4KB RAM */
    uint16_t pc;     /* Program counter, keeps track of where in memory it  */
    uint16_t *index; /* Points the locaiton in memory where the executation will
                        be happening */
    uint8_t deley_timer; /* Decrements 60 per sec */
    uint8_t sound_timer; /* Makes a beep sound if its bigger than 0 */
    uint8_t V[16];       /* general purpose variable from V0 to VF */
    uint16_t rom_size;
} chip8;

uint8_t font[][5] = {{0xF0, 0x90, 0x90, 0x90, 0xF0},  // 0
                     {0x20, 0x60, 0x20, 0x20, 0x70},  // 1
                     {0xF0, 0x10, 0xF0, 0x80, 0xF0},  // 2
                     {0xF0, 0x10, 0xF0, 0x10, 0xF0},  // 3
                     {0x90, 0x90, 0xF0, 0x10, 0x10},  // 4
                     {0xF0, 0x80, 0xF0, 0x10, 0xF0},  // 5
                     {0xF0, 0x80, 0xF0, 0x90, 0xF0},  // 6
                     {0xF0, 0x10, 0x20, 0x40, 0x40},  // 7
                     {0xF0, 0x90, 0xF0, 0x90, 0xF0},  // 8
                     {0xF0, 0x90, 0xF0, 0x10, 0xF0},  // 9
                     {0xF0, 0x90, 0xF0, 0x90, 0x90},  // A
                     {0xE0, 0x90, 0xE0, 0x90, 0xE0},  // B
                     {0xF0, 0x80, 0x80, 0x80, 0xF0},  // C
                     {0xE0, 0x90, 0x90, 0x90, 0xE0},  // D
                     {0xF0, 0x80, 0xF0, 0x80, 0xF0},  // E
                     {0xF0, 0x80, 0xF0, 0x80, 0x80}}; // F

typedef struct {
    // DXYN, 0XNN, 1NNN
    uint8_t head;   /* First nibble in opcode */
    uint8_t X;      /* Second nibble in opcode */
    uint8_t Y;      /* Third nibble in opcode */
    uint8_t N;      /* Fourth nibble in opcode */
    uint8_t NN;     /* Third to forth byte in opcode */
    uint16_t NNN;   /* Second to forht 12 bit in opcode */
    uint16_t bytes; /* The whole opcode */
} opcode;

void print_bytes(const void *ptr, size_t size) {
    const unsigned char *p = ptr;
    for (size_t i = 0; i < size; i++) {
        printf(""%02hhx"", p[i]);
        if ((i + 1) % 2 == 0) {
            printf("" ""); // Add extra space every 2 bytes for formatting
        }
        if ((i + 1) % 16 == 0) {
            printf(""\n""); // Start a new line every 16 bytes for formatting
        }
    }
    printf(""\n"");
}

void pirnt_opcode(opcode op) {
    printf(""Opcode: %x\n""
           ""Head: %x\n""
           ""X: %x\n""
           ""Y: %x\n""
           ""N: %x\n""
           ""NN: %x\n""
           ""NNN: %x\n"",
           op.bytes, op.head, op.X, op.Y, op.N, op.NN, op.NNN);
}

bool valid_file(char *file) {
    FILE *f = fopen(file, ""r"");
    if (f == NULL) {
        perror(""fopen"");
        fclose(f);
        return false;
    }

    fclose(f);
    return true;
}

int read_rom_file(char *file, uint8_t **dest, uint16_t *size) {
    FILE *f = fopen(file, ""rb"");
    if (!f) {
        perror(""fopen"");
        return EXIT_FAILURE;
    }

    fseek(f, 0, SEEK_END);
    *size = ftell(f);
    fseek(f, 0, SEEK_SET);

    *dest = malloc(*size);
    if (*dest == NULL) {
        perror(""malloc"");
        fclose(f);
        return EXIT_FAILURE;
    }

    // Read the file's bytes into the buffer
    size_t bytes_read = fread((*dest) + MEM_OFFSET, 1, *size, f);
    if (bytes_read != *size) {
        fprintf(stderr, ""error: %zu != %d\n"", bytes_read, *size);
        perror(""fread"");
        fclose(f);
        return EXIT_FAILURE;
    }

    fclose(f);
    return EXIT_SUCCESS;
}

void free_chip8(struct chip8 *ch8) {
    free(ch8->mem);
    free(ch8);
}

chip8 *init_chip8(char *rom_file) {
    struct chip8 *ch8 = malloc(sizeof(chip8));
    if (ch8 == NULL) {
        fprintf(stderr, ""Could not malloc sctruct chip8"");
        exit(1);
    }

    ch8->mem = malloc(MEM_SIZE);
    if (ch8->mem == NULL) {
        perror(""malloc"");
        exit(EXIT_FAILURE);
    }

    if (read_rom_file(rom_file, &ch8->mem, &ch8->rom_size) == EXIT_FAILURE) {
        free_chip8(ch8);
        exit(EXIT_FAILURE);
    }

    ch8->pc = MEM_OFFSET;
    ch8->deley_timer = 0;
    ch8->sound_timer = 0;

    return ch8;
}

opcode get_opcode(uint8_t *mem, uint16_t pc) {
    opcode op;
    op.bytes = (((uint16_t)mem[pc] << 8) | mem[pc + 1]);
    op.head = mem[pc] >> 4;
    op.X = mem[pc] & 0xf;
    op.Y = mem[pc + 1] >> 4;
    op.N = mem[pc + 1] & 0xf;
    op.NN = mem[pc + 1];
    uint16_t mask = 0x0fff;
    op.NNN = op.bytes & mask;
    return op;
}

void chip8_draw_sprite(struct chip8 *ch8) {
    assert(false && ""TODO: needs to be implemented"");
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, ""Wrong number of arugnemtns: ./main <rom.ch8>\n"");
        return 1;
    }
    char *rom_file = argv[1];

    if (!valid_file(rom_file)) {
        fprintf(stderr, ""Wrong file was given: %s\n"", rom_file);
        return 1;
    }

    chip8 *ch8 = init_chip8(rom_file);

    printf(""loading file: %s\n"", rom_file);
    print_bytes(ch8->mem + MEM_OFFSET, ch8->rom_size);

    // Start raylib
    SetTraceLogLevel(LOG_WARNING);
    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, ""CHIP 8 Emulation"");

    printf(""\nAfter calling `InitWindow()`:\n"");
    print_bytes(ch8->mem + MEM_OFFSET, ch8->rom_size);

    free_chip8(ch8);
    return 0;
}
"
XkMU8BBj,Untitled,Alex88888,Python,Wednesday 28th of June 2023 04:44:02 PM CDT,"import time
import requests
import json
import pandas as pd
 
from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator, BranchPythonOperator
from airflow.providers.postgres.operators.postgres import PostgresOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook
from airflow.providers.http.hooks.http import HttpHook
 
# инициализация подключения
http_conn_id = HttpHook.get_connection('http_conn_id')
api_key = http_conn_id.extra_dejson.get('api_key')
base_url = http_conn_id.host
 
postgres_conn_id = 'postgresql_de'
 
nickname = 'agiwago'
cohort = '15'
 
headers = {
    'X-Nickname': nickname,
    'X-Cohort': cohort,
    'X-Project': 'True',
    'X-API-KEY': api_key,
    'Content-Type': 'application/x-www-form-urlencoded'
}
 
# request generate_report
def generate_report(ti):
    print('Making request generate_report')
 
    response = requests.post(f'{base_url}/generate_report', headers=headers)
    response.raise_for_status()
    task_id = json.loads(response.content)['task_id']
    ti.xcom_push(key='task_id', value=task_id)
    print(f'Response is {response.content}')
 
 
# request get_report
def get_report(ti):
    print('Making request get_report')
    task_id = ti.xcom_pull(key='task_id')
 
    report_id = None
 
    for i in range(20):
        response = requests.get(f'{base_url}/get_report?task_id={task_id}', headers=headers)
        response.raise_for_status()
        print(f'Response is {response.content}')
        status = json.loads(response.content)['status']
        if status == 'SUCCESS':
            report_id = json.loads(response.content)['data']['report_id']
            break
        else:
            time.sleep(10)
 
    if not report_id:
        raise TimeoutError()
 
    ti.xcom_push(key='report_id', value=report_id)
    print(f'Report_id={report_id}')
 
 
# request get_increment
def get_increment(date, ti):
    print('Making request get_increment')
    report_id = ti.xcom_pull(key='report_id')
    response = requests.get(
        f'{base_url}/get_increment?report_id={report_id}&date={str(date)}T00:00:00',
        headers=headers)
    response.raise_for_status()
    print(f'Response is {response.content}')
 
    increment_id = json.loads(response.content)['data']['increment_id']
    if not increment_id:
        raise ValueError(f'Increment is empty. Most probably due to error in API call.')
 
    ti.xcom_push(key='increment_id', value=increment_id)
    print(f'increment_id={increment_id}')
 
 
# загрузка в staging
def upload_data_to_staging(filename, date, pg_table, pg_schema, ti):
    increment_id = ti.xcom_pull(key='increment_id')
    s3_filename = f'https://storage.yandexcloud.net/s3-sprint3/cohort_{cohort}/{nickname}/project/{increment_id}/{filename}'
    print(s3_filename)
    local_filename = date.replace('-', '') + '_' + filename
    print(local_filename)
    response = requests.get(s3_filename)
    response.raise_for_status()
    open(f""{local_filename}"", ""wb"").write(response.content)
    print(response.content)
 
    df = pd.read_csv(local_filename)
    df=df.drop('id', axis=1)
    df=df.drop_duplicates(subset=['uniq_id'])
 
    if 'status' not in df.columns:
        df['status'] = 'shipped'
 
    postgres_hook = PostgresHook(postgres_conn_id)
    engine = postgres_hook.get_sqlalchemy_engine()
    row_count = df.to_sql(pg_table, engine, schema=pg_schema, if_exists='append', index=False)
    print(f'{row_count} rows was inserted')
 
args = {
    ""owner"": ""student"",
    'email': ['student@example.com'],
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 0
}
 
business_dt = '{{ ds }}'
 
with DAG(
        'sales_mart',
        default_args=args,
        description='Provide default dag for sprint3',
        catchup=True,
        start_date=datetime.today() - timedelta(days=7),
        end_date=datetime.today() - timedelta(days=1),
) as dag:
    generate_report = PythonOperator(
        task_id='generate_report',
        python_callable=generate_report)
 
    get_report = PythonOperator(
        task_id='get_report',
        python_callable=get_report)
 
    get_increment = PythonOperator(
        task_id='get_increment',
        python_callable=get_increment,
        op_kwargs={'date': business_dt})
 
    upload_user_order_inc = PythonOperator(
        task_id='upload_user_order_inc',
        python_callable=upload_data_to_staging,
        op_kwargs={'date': business_dt,
                   'filename': 'user_order_log_inc.csv',
                   'pg_table': 'user_order_log',
                   'pg_schema': 'staging'})
 
    update_d_item_table = PostgresOperator(
        task_id='update_d_item',
        postgres_conn_id=postgres_conn_id,
        sql=""sql/mart.d_item.sql"")
 
    update_d_customer_table = PostgresOperator(
        task_id='update_d_customer',
        postgres_conn_id=postgres_conn_id,
        sql=""sql/mart.d_customer.sql"")
 
    update_d_city_table = PostgresOperator(
        task_id='update_d_city',
        postgres_conn_id=postgres_conn_id,
        sql=""sql/mart.d_city.sql"")
 
    update_f_sales = PostgresOperator(
        task_id='update_f_sales',
        postgres_conn_id=postgres_conn_id,
        sql=""sql/mart.f_sales.sql"",
        parameters={""date"": {business_dt}}
    )
 
    (
            generate_report
            >> get_report
            >> get_increment
            >> upload_user_order_inc
            >> [update_d_item_table, update_d_city_table, update_d_customer_table]
            >> update_f_sales
    )"
YnL3gGU3,Дамп Базы из одной базы в другую в терминале,Sadchenko,Pascal,Wednesday 28th of June 2023 04:26:18 PM CDT,"//Дамп Базы из одной базы в другую в терминале
mysqldump myshop_proriv > myshop_proriv.sql
mysql myshop_prorivtest < myshop_proriv.sql"
WRW53ftn,Railguns,ThegeekKnight16,C++,Wednesday 28th of June 2023 04:05:31 PM CDT,"#include <bits/stdc++.h>
using namespace std;
//Mudar para submeter
const int MAXN = 1e3 + 10;
const int MAXSZ = 10;
const int INF = 0x3f3f3f3f;
array<array<set<int>, MAXN>, MAXN> Chegam;
array<set<int>, MAXN> lin, col;

void updateChegam(int start, int x, int y, set<int> &resp)
{
    int limLin = *lin[x].lower_bound(start);
    int limCol = *col[y].lower_bound(start);
    for (int i = start; i <= min(limLin,limCol) && resp.size() <= MAXSZ; i++) resp.insert(i);
}

void solve()
{
    int N, M;
    cin >> N >> M;
    int R;
    cin >> R;
    for (int i = 0; i < R; i++)
    {
        int T, dir, X;
        cin >> T >> dir >> X;
        if (dir == 1) lin[X].insert(T);
        else if (dir == 2) col[X].insert(T);
    }
    for (int i = 0; i <= N; i++) lin[i].insert(INF);
    for (int i = 0; i <= M; i++) col[i].insert(INF);

    updateChegam(0, 0, 0, Chegam[0][0]);

    // cerr << ""||"" << 0 << "" "" << 0 << '\n' << ""|||"";
    // for (auto x : Chegam[0][0]) cerr << x << "" "";
    // cerr << '\n';

    for (int i = 0; i <= N; i++)
    {
        for (int j = 0; j <= M; j++)
        {
            if (i == 0 && j == 0) continue;
            auto &resp = Chegam[i][j];
            if (i != 0)
            {
                auto &cheg = Chegam[i-1][j];
                for (auto x : cheg) resp.insert(x+1);
            }
            if (j != 0)
            {
                auto &cheg = Chegam[i][j-1];
                for (auto x : cheg) resp.insert(x+1);
            }
            for (auto x : lin[i]) resp.erase(x);
            for (auto x : col[j]) resp.erase(x);
            if (!resp.empty()) updateChegam(*resp.rbegin(), i, j, resp);
            // cerr << ""||"" << i << "" "" << j << '\n' << ""||"";
            // for (auto x : resp) cerr << x << "" "";
            // cerr << '\n';
        }
    }

    if (Chegam[N][M].empty()) {cout << ""-1"" << '\n'; return;}

    cout << *Chegam[N][M].begin() << '\n';
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int T;
    cin >> T;
    while (T--) solve();
}
"
LZVPxcnS,configWebPackTailwind,FabioMurtas,JavaScript,Wednesday 28th of June 2023 04:01:27 PM CDT,"//config webPack

const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: {
    index: './src/index.js',
    registrazione: './src/registrazione.js',
    creaSegnalazione: './src/creaSegnalazione.js'
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[name].bundle.js',
    clean: true
  },
  module: {
    rules: [
      // ... altre regole ...
      {
        test: /\.css$/,
        use: [
          'style-loader',
          'css-loader',
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  require('tailwindcss'),
                  // Altri plugin PostCSS se necessario
                ],
                minimize: true // Abilita la minificazione CSS
              }
            }
          }
        ],
      },
    ],
  },
  plugins: [
    new CopyWebpackPlugin({
      patterns: [
        { from: 'src/css', to: 'css' }, // Copia tutti i file dalla cartella ""src/css"" alla cartella ""dist/css""
      ],
    }),
    new HtmlWebpackPlugin({
      template: './src/index.html',
      chunks: ['index'],
      filename: 'index.html'
    }),
    new HtmlWebpackPlugin({
        template: './src/registrazione.html',
        chunks: ['registrazione'],
        filename: 'registrazione.html'
      }),
      
    new HtmlWebpackPlugin({
      template: './src/homeSegnalatore.html',
      chunks: ['homeSegnalatore'],
      filename: 'homeSegnalatore.html'
    }),
    new HtmlWebpackPlugin({
      template: './src/creaSegnalazione.html',
      chunks: ['creaSegnalazione'],
      filename: 'creaSegnalazione.html'
    })
  ],
  devServer: {
    static: {
      directory: path.resolve(__dirname, 'dist'),
    },
    port: 3000,
    open: true,
    hot: true,
    compress: true,
    historyApiFallback: true
  },
  mode: 'development',
  devtool: 'source-map'
};


//config tailwind
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./dist/*.html'],
  theme: {
    extend: {},
  },
  plugins: [],
}


//postcss config
const tailwindcss = require('tailwindcss');
module.exports = {
  plugins: [
    require(""tailwindcss"")(""./tailwind.config.js""),
    require(""autoprefixer"")
  ],
};

//packagejson

{
  ""name"": ""sdsapp"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""build"": ""webpack --mode production"",
    ""watch"": ""webpack --mode development --watch"",
    ""start"": ""webpack serve""
  },
  ""keywords"": [],
  ""author"": """",
  ""license"": ""ISC"",
  ""devDependencies"": {
    ""@firebase/analytics"": ""^0.10.0"",
    ""@firebase/app"": ""^0.9.13"",
    ""autoprefixer"": ""^10.4.14"",
    ""copy-webpack-plugin"": ""^11.0.0"",
    ""css-loader"": ""^6.8.1"",
    ""html-webpack-plugin"": ""^5.5.3"",
    ""postcss"": ""^8.4.24"",
    ""postcss-loader"": ""^7.3.3"",
    ""style-loader"": ""^3.3.3"",
    ""tailwindcss"": ""^3.3.2"",
    ""webpack"": ""^5.88.0"",
    ""webpack-cli"": ""^5.1.4"",
    ""webpack-dev-server"": ""^4.15.1""
  },
  ""dependencies"": {
    ""body-parser"": ""^1.20.2"",
    ""express"": ""^4.18.2"",
    ""firebase"": ""^9.23.0"",
    ""mysql"": ""^2.18.1""
  }
}


// boil 
---dist
---node_modules
---src
  ---backend
  ---css
    ---style.css
  ---(...file js e html vari)
  ---input.css
---gitignore
---package-lock.json
---package.json
---postcss.config.js
---tailwind.js
---webpack.config.js
"
a83ec6wQ,to_midi.py,JakimPL,Python,Wednesday 28th of June 2023 03:58:22 PM CDT,"import numpy as np
import pandas as pd

import mido
import pretty_midi as pm
import music21 as m21

from pm2s.features.hand_part import RNNHandPartProcessor
from pm2s.features.time_signature import RNNTimeSignatureProcessor
from pm2s.features.key_signature import RNNKeySignatureProcessor
from pm2s.features.beat import RNNJointBeatProcessor
from pm2s.features.quantisation import RNNJointQuantisationProcessor
from dev.data.data_utils import get_note_sequence_from_midi

note_sequence = get_note_sequence_from_midi(midi_path)
b_pred = b_processor.process(midi_path)
q_pred = q_processor.process(midi_path)
hp_pred = hp_processor.process(midi_path)
ts_pred = ts_processor.process(midi_path)
ks_pred = ks_processor.process(midi_path)

score = m21.stream.Score()
left_hand = m21.stream.Stream()
right_hand = m21.stream.Stream()

for key_signature in ks_pred:
    offset, ks = key_signature
    position = np.argmax(offset < q_pred[0])
    ks_obj = m21.key.Key(ks)
    score.insert(position, ks_obj)
    
for ts_change in ts_pred:
    offset, ts = ts_change
    position = np.argmax(offset < q_pred[0])
    ts_obj = m21.meter.TimeSignature(ts)
    score.insert(position, ts_obj)
    print(offset, ts, position)
    
# for i in range(len(q_pred[0]) - 1):
#     diff = q_pred[0][i + 1] - q_pred[0][i]
#     print(diff)
#     metronome = m21.tempo.MetronomeMark(number=60 / diff)
#     #print(metronome)
#     score.insert(i, metronome)

for index, note in enumerate(note_sequence):
    duration = q_pred[2][index]
    offset = q_pred[1][index]
    midi_note = m21.note.Note(int(note[0]))
    midi_note.quarterLength = duration
    midi_note.volume = note[3]
    midi_note.offset = offset
    print(midi_note, q_pred[1][index], q_pred[2][index])
    if hp_pred[index]:
        left_hand.append(midi_note)
        left_hand.setElementOffset(midi_note, offset)
    else:
        right_hand.append(midi_note)
        right_hand.setElementOffset(midi_note, offset)
    
score.insert(0, left_hand)
score.insert(0, right_hand)

score.write('midi', fp='output.midi')"
p45sdx1e,ic2reactor.lua,Nikit_OS,Lua,Wednesday 28th of June 2023 03:54:15 PM CDT,"local version=""8.0""

local component = require(""component"")
local computer = require(""computer"")
local event = require(""event"")
local term = require(""term"")
local fs = require(""filesystem"")
local sides = require(""sides"")
local rs = component.redstone
local gpu = component.gpu
local beep = component.computer.beep
local reactor=component.reactor_chamber

--reactor
Heat=reactor.getMaxHeat
getHeat=reactor.getHeat 
EUOutput=reactor.getReactorEUOutput 
--reactor

--colors
local black = 0x000000
local red = 0xFF0000
local yellow = 0xFFFF00
local white = 0xffffff
--colors

local start_time = computer.uptime()

--local modem = component.modem

local w,h = gpu.getResolution()

--maxResolution() 160x50 if 3x2blocks w,h

-- place for config

--Bottom: down, negy
--Top: up, posy
--Back: north, negz
--Front: south, posz, forward
--Right: west, negx
--Left: east, posx
local side = sides.west


-------------------
-- end of config


--start_time

--timer
local tickCnt = 0
local running = true
local hours = 0
local mins = 0
--timer

local function centerF(row, msg, ...)
  local mLen = string.len(msg)
  w, h = gpu.getResolution()
  term.setCursor((w - mLen)/2,row)
  print(msg:format(...))
end

--more functions
local function status()
  if EUOutput() == 0 then 
  return ""offline"" 
  else
  return ""online ""
  end
end 

local function enable()
  return rs.setOutput(side,14)
  end
local function disable()
 return rs.setOutput(side,0)
  end

local function maxheat()
  return reactor.getMaxHeat()
  end
  
local function getheat()
  if getHeat() == 0 then
        enable()
  return ""0   ""
  else
        disable()
  return reactor.getHeat()
  end
end
  
local function getEU()
  if EUOutput() == 0 then
  return ""0   ""
  else
  return reactor.getReactorEUOutput()
  end
end
--more functions  

gpu.setForeground(0xffffff)


-----
term.clear()
term.setCursor(1,1)

centerF(5,  ""-----------------------------------------"")
centerF(6,  ""-       IC2 Reactor Controller V4       -"")
centerF(7,  ""-----------------------------------------"")
centerF(8, string.format(""- Reactor is:             %s       -"",status())) 
centerF(9, string.format(""- Reactor maxheat:        %s         -"",maxheat())) 
centerF(10, string.format(""- Reactor heat:           %s          -"",  getheat())) 
centerF(11, string.format(""- Reactor EU Output:      %s          -"",  getEU())) 
centerF(12, ""-----------------------------------------"")
centerF(13, ""-                                       -"")   
centerF(14, ""-----------------------------------------"")
  
while true do 

  
  tickCnt = tickCnt + 1
  if tickCnt == 60 then
    mins = mins + 1
    tickCnt = 0
  end
  
  if mins == 60 then
    hours = hours + 1
    mins = 0
  end

  os.sleep(1)
  
  centerF(8, string.format(""- Reactor is:             %s       -"",status())) 
  centerF(9, string.format(""- Reactor maxheat:        %s         -"",maxheat())) 
  centerF(10, string.format(""- Reactor heat:           %s          -"",  getheat())) 
  centerF(11, string.format(""- Reactor EU Output:      %s          -"",  getEU())) 
  centerF(30, ""Data updates every second: %2d"", tickCnt)
  centerF(31, ""Current up time: %2d hours %2d min"", hours, mins)
end"
LsK7AeXm,ae2-manager,STEP5,Lua,Wednesday 28th of June 2023 03:30:23 PM CDT,"--
-- Copyright 2019 KaseiFR <kaseifr@gmail.com>
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the ""Software""), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.
--

local component = require('component')
local computer = require('computer')
local coroutine = require('coroutine')
local event = require('event')
local filesystem = require('filesystem')
local serialization = require('serialization')
local thread = require('thread')
local tty = require('tty')
local unicode = require('unicode')
local GUI = require('GUI')
-- local inspect = require('inspect')

-- Config --

-- Control how many CPUs to use. 0 is unlimited, negative to keep some CPU free, between 0 and 1 to reserve a share,
-- and greater than 1 to allocate a fixed number.
local allowedCpus = 2
-- Maximum size of the crafting requests
local maxBatch = 64
-- How often to check the AE system, in second
local fullCheckInterval = 10        -- full scan
local craftingCheckInterval = 1     -- only check ongoing crafting
-- Where to save the config
local configPath = '/home/ae2-manager.cfg'

-- Global State --

-- array of recipe like { item, label, wanted, [current, crafting] }
local recipes = {}
-- various system status data
local status = {}
-- AE2 proxy
local ae2

-- Functions --

function main()
    local resetBColor, resetFColor = tty.gpu().getBackground(), tty.gpu().getForeground()

    initAe2()
    loadRecipes()
    ae2Run(true)

    local app = buildGui()
    app:draw(true)

    -- Start some background tasks
    local background = {}
    table.insert(background, event.listen(""key_up"", function (key, address, char)
        if char == string.byte('q') then
            event.push('exit')
        end
    end))
    table.insert(background, event.listen(""redraw"", function (key) app:draw() end))
    table.insert(background, event.listen(""save"", failFast(saveRecipes)))
    table.insert(background, event.timer(craftingCheckInterval, failFast(checkCrafting), math.huge))
    table.insert(background, thread.create(failFast(ae2Loop)))
    table.insert(background, thread.create(failFast(function() app:start() end)))

    -- Block until we receive the exit signal
    local _, err = event.pull(""exit"")

    -- Cleanup
    app:stop()

    for _, b in ipairs(background) do
        if type(b) == 'table' and b.kill then
            b:kill()
        else
            event.cancel(b)
        end
    end

    tty.gpu().setBackground(resetBColor)
    tty.gpu().setForeground(resetFColor)
    tty.clear()

    if err then
        io.stderr:write(err)
        os.exit(1)
    else
        os.exit(0)
    end
end

function log(...)
    -- TODO: reserve a part of the screen for logs
    for i, v in ipairs{...} do
        if i > 1 then io.stderr:write(' ') end
        io.stderr:write(tostring(v))
    end
    io.stderr:write('\n')
end

function logRam(msg)
    free, total = computer.freeMemory(), computer.totalMemory()
    log(msg, 'RAM', (total - free) * 100 / total, '%')
end

function pretty(x)
    return serialization.serialize(x, true)
end

function failFast(fn)
    return function(...)
        local res = table.pack(xpcall(fn, debug.traceback, ...))
        if not res[1] then
            event.push('exit', res[2])
        end
        return table.unpack(res, 2)
    end
end

function initAe2()
    local function test_ae2(id)
        local proxy = component.proxy(id)
        proxy.getCpus()
        return proxy
    end

    for id, type in pairs(component.list()) do
        -- print('Testing ' .. type .. ' ' .. id)
        local ok, p = pcall(test_ae2, id)
        if ok then
            print('Component ' .. type .. ' (' .. id .. ') is suitable')
            ae2 = p
        end
    end

    if ae2 == nil then
        error('No AE2 component found')
    else
        print('Using component ' .. ae2.type .. ' (' .. ae2.address .. ')')
    end
end

function loadRecipes()
    print('Loading config from '..configPath)
    local f, err = io.open(configPath, 'r')
    if not f then
        -- usually the file does not exist, on the first run
        print('Loading failed:', err)
        return
    end

    local content = serialization.unserialize(f:read('a'))

    f:close()

    recipes = content.recipes
    print('Loaded '..#recipes..' recipes')
end

function saveRecipes()
    local tmpPath = configPath..'.tmp'
    local content = { recipes={} }

    for _, recipe in ipairs(recipes) do
        table.insert(content.recipes, {
            item = recipe.item,
            label = recipe.label,
            wanted = recipe.wanted,
        })
    end

    local f = io.open(tmpPath, 'w')
    f:write(serialization.serialize(content))
    f:close()

    filesystem.remove(configPath) -- may fail

    local ok, err = os.rename(tmpPath, configPath)
    if not ok then error(err) end
end

-- Main loop --

function ae2Loop()
    while true do
        local e1, e2 = event.pull(fullCheckInterval, 'ae2_loop')
        logRam('loop')
        --log('AE2 loop in')
        ae2Run(e2 == 'reload_recipes')
        --log('AE2 loop out')
        event.push('redraw')
    end
end


function ae2Run(learnNewRecipes)
    local start = computer.uptime()
    updateRecipes(learnNewRecipes)
    logRam('recipes')
    -- logRam('recipes (post-gc)')

    local finder = coroutine.create(findRecipeWork)
    while hasFreeCpu() do
        -- Find work
        local _, recipe, needed, craft = coroutine.resume(finder)
        if recipe then
            -- Request crafting
            local amount = math.min(needed, maxBatch)
            --log('Requesting ' .. amount .. ' ' .. recipe.label)
            recipe.crafting = craft.request(amount)
            yield('yield crafting')
            checkFuture(recipe) -- might fail very quickly (missing resource, ...)
        else
            break
        end
    end

    local duration = computer.uptime() - start
    updateStatus(duration)
end

function checkCrafting()
    for _, recipe in ipairs(recipes) do
        if checkFuture(recipe) then
            --log('checkCrafting event !')
            event.push('ae2_loop')
            return
        end
    end
end

function yield(msg)
    --local gpu = tty.gpu()
    --local _, h = gpu.getViewport()
    --gpu.set(1, h, msg)
    os.sleep()
end

function updateRecipes(learnNewRecipes)
    local start = computer.uptime()

    -- Index our recipes
    local index = {}
    for _, recipe in ipairs(recipes) do
        local key = itemKey(recipe.item, recipe.item.label ~= nil)
        index[key] = { recipe=recipe, matches={} }
    end
    --log('recipe index', computer.uptime() - start)

    -- Get all items in the network
    local items, err = ae2.getItemsInNetwork()  -- takes a full tick (to sync with the main thread?)
    if err then error(err) end
    --log('ae2.getItemsInNetwork', computer.uptime() - start, 'with', #items, 'items')

    -- Match all items with our recipes
    for _, item in ipairs(items) do
        local key = itemKey(item, item.hasTag)
        local indexed = index[key]
        if indexed then
            table.insert(indexed.matches, item)
        elseif learnNewRecipes and item.isCraftable then
            local recipe = {
                item = {
                    name = item.name,
                    damage = math.floor(item.damage)
                },
                label = item.label,
                wanted = 0,
            }
            if item.hasTag then
                -- By default, OC doesn't expose items NBT, so as a workaround we use the label as
                -- an additional discriminant. This is not perfect (still some collisions, and locale-dependent)
                recipe.item.label = recipe.label
            end
            table.insert(recipes, recipe)
            index[key] = { recipe=recipe, matches={item} }
        end
    end
    --log('group items', computer.uptime() - start)

    -- Check the recipes
    for _, entry in pairs(index) do
        local recipe = entry.recipe
        local matches = filter(entry.matches, function(e) return contains(e, recipe.item) end)
        --log(recipe.label, 'found', #matches, 'matches')
        local craftable = false
        recipe.error = nil

        checkFuture(recipe)

        if #matches == 0 then
            recipe.stored = 0
        elseif #matches == 1 then
            local item = matches[1]
            recipe.stored = math.floor(item.size)
            craftable = item.isCraftable
        else
            local id = recipe.item.name .. ':' .. recipe.item.damage
            recipe.stored = 0
            recipe.error = id .. ' match ' .. #matches .. ' items'
            -- log('Recipe', recipe.label, 'matches:', pretty(matches))
        end

        if not recipe.error and recipe.wanted > 0 and not craftable then
            -- Warn the user as soon as an item is not craftable rather than wait to try
            recipe.error = 'Not craftable'
        end
    end
    --log('recipes check', computer.uptime() - start)

    if learnNewRecipes then
        event.push('save')
    end
end

function itemKey(item, withLabel)
    local key = item.name .. '$' .. math.floor(item.damage)
    if withLabel then
        --log('using label for', item.label)
        key = key .. '$' .. item.label
    end
    return key
end

function updateStatus(duration)
    status.update = {
        duration = duration
    }

    -- CPU data
    local cpus = ae2.getCpus()
    status.cpu = {
        all = #cpus,
        free = 0,
    }
    for _, cpu in ipairs(cpus) do
        status.cpu.free = status.cpu.free + (cpu.busy and 0 or 1)
    end

    -- Recipe stats
    status.recipes = {
        error = 0,
        crafting = 0,
        queue = 0,
    }
    for _, recipe in ipairs(recipes) do
        if recipe.error then
            status.recipes.error = status.recipes.error + 1
        elseif recipe.crafting then
            status.recipes.crafting = status.recipes.crafting + 1
        elseif (recipe.stored or 0) < (recipe.wanted or 0) then
            status.recipes.queue = status.recipes.queue + 1
        end
    end
end

function checkFuture(recipe)
    if not recipe.crafting then return end

    local canceled, err = recipe.crafting.isCanceled()
    if canceled or err then
        --log('Crafting of ' .. recipe.label .. ' was cancelled')
        recipe.crafting = nil
        recipe.error = err or 'canceled'
        return true
    end

    local done, err = recipe.crafting.isDone()
    if err then error('isDone ' .. err) end
    if done then
        --log('Crafting of ' .. recipe.label .. ' is done')
        recipe.crafting = nil
        return true
    end

    return false
end

function equals(t1, t2)
    if t1 == t2 then return true end
    if type(t1) ~= type(t2) or type(t1) ~= 'table' then return false end

    for k1, v1 in pairs(t1) do
        local v2 = t2[k1]
        if not equals(v1, v2) then return false end
    end

    for k2, _ in pairs(t2) do
        if t1[k2] == nil then return false end
    end

    return true
end

function filter(array, predicate)
    local res = {}
    for _, v in ipairs(array) do
        if predicate(v) then table.insert(res, v) end
    end
    return res
end

function contains(haystack, needle)
    if haystack == needle then return true end
    if type(haystack) ~= type(needle) or type(haystack) ~= 'table' then return false end

    for k, v in pairs(needle) do
        if not contains(haystack[k], v) then return false end
    end

    return true
end

function hasFreeCpu()
    local cpus = ae2.getCpus()
    local free = 0
    for i, cpu in ipairs(cpus) do
        if not cpu.busy then free = free + 1 end
    end
    local ongoing = 0
    for _, recipe in ipairs(recipes) do
        if recipe.crafting then ongoing = ongoing + 1 end
    end

    if enoughCpus(#cpus, ongoing, free) then
        return true
    else
        --log('No CPU available')
        return false
    end
end

function enoughCpus(available, ongoing, free)
    if free == 0 then return false end
    if ongoing == 0 then return true end
    if allowedCpus == 0 then return true end
    if allowedCpus > 0 and allowedCpus < 1 then
        return  (ongoing + 1) / available <= allowedCpus
    end
    if allowedCpus >= 1 then
        return ongoing < allowedCpus
    end
    if allowedCpus > -1 then
        return (free - 1) / available <= -allowedCpus
    end
    return free > -allowedCpus
end

function findRecipeWork() --> yield (recipe, needed, craft)
    for i, recipe in ipairs(recipes) do
        if recipe.error or recipe.crafting then goto continue end

        local needed = recipe.wanted - recipe.stored
        if needed <= 0 then goto continue end

        yield('yield '..i)
        local craftables, err = ae2.getCraftables(recipe.item)
        --log('get_craftable', inspect(craftables))
        if err then
            recipe.error = 'ae2.getCraftables ' .. tostring(err)
        elseif #craftables == 0 then
            recipe.error = 'No crafting pattern found'
        elseif #craftables == 1 then
            coroutine.yield(recipe, needed, craftables[1])
        else
            recipe.error = 'Multiple crafting patterns'
        end

        ::continue::
    end
end

function override(object, method, fn)
    local super = object[method] or function() end
    object[method] = function(...)
        fn(super, ...)
    end
end

function numberValidator(str)
    n = tonumber(str, 10)
    return n and math.floor(n) == n
end

-- Stay close to the 16 Minecraft colors in order to work on gold GPU/screen
local C_BACKGROUND = 0x3C3C3C
local C_STATUS_BAR = 0xC3C3C3
local C_STATUS_TEXT = 0x1E1E1E
local C_STATUS_PRESSED = 0xFFFF00
local C_BADGE = 0xD2D2D2
local C_BADGE_ERR = 0xFF4900 --0xFFB6FF
local C_BADGE_BUSY = 0x336DFF
local C_BADGE_SELECTED = 0xFFAA00
local C_BADGE_TEXT = 0x1E1E1E
local C_INPUT = 0xFFFFFF
local C_INPUT_TEXT = 0x1E1E1E
local C_SCROLLBAR = C_BADGE_SELECTED
local C_SCROLLBAR_BACKGROUND = 0xFFFFFF

function buildGui()
    local app = GUI.application()
    local statusBar = app:addChild(GUI.container(1, 1, app.width, 1))
    local window = app:addChild(GUI.container(1, 1 + statusBar.height, app.width, app.height - statusBar.height))

    window:addChild(GUI.panel(1, 1, window.width, window.height, C_BACKGROUND))
    local columns = math.floor(window.width / 60) + 1

    -- Crating queue view
    local craftingQueueView = window:addChild(GUI.layout(1, 1, window.width-1, window.height, columns, 1))
    for i = 1, columns do
        craftingQueueView:setAlignment(i, 1, GUI.ALIGNMENT_HORIZONTAL_CENTER, GUI.ALIGNMENT_VERTICAL_TOP)
        craftingQueueView:setMargin(i, 1, .5, 1)
    end

    override(craftingQueueView, 'draw', function(super, self, ...)
        self.children = {}

        local added = 0
        for _, recipe in ipairs(recipes) do
            local color =
            recipe.error and C_BADGE_ERR or
                    recipe.crafting and C_BADGE_BUSY or
                    (recipe.stored or 0) < recipe.wanted and C_BADGE

            if color then
                local badge = GUI.container(1, 1, math.floor(self.width / columns - 1), 4)
                self:setPosition(1 + added % columns, 1, self:addChild(badge))
                badge:addChild(GUI.panel(1, 1, badge.width, 4, color))
                badge:addChild(GUI.text(2, 2, C_BADGE_TEXT, recipe.label)) -- TODO: include the item icon ?
                badge:addChild(GUI.text(2, 3, C_BADGE_TEXT, string.format('%s / %s', recipe.stored or '?', recipe.wanted)))
                if recipe.error then
                    badge:addChild(GUI.text(2, 4, C_BADGE_TEXT, tostring(recipe.error)))
                    badge:moveToFront()
                end

                added = added + 1
            end
        end

        super(self, ...)
    end)

    -- Configuration view
    local SYMBOL_CONFIG_RECIPE = {}
    local configView = window:addChild(GUI.container(1, 1, window.width, window.height))
    configView:addChild(GUI.panel(1, 1, configView.width, configView.height, C_BACKGROUND))
    configView.hidden = true

    -- left panel (item select)
    local itemListSearch = configView:addChild(GUI.input(2, 2, configView.width/2-1, 3,
            C_INPUT, C_INPUT_TEXT, C_INPUT_TEXT, C_STATUS_PRESSED, C_INPUT_TEXT, '', 'Search'))

    -- TODO: add unconfigured/hidden filter

    local itemListPanel = configView:addChild(GUI.list(
            itemListSearch.x, itemListSearch.y + itemListSearch.height + 1, itemListSearch.width, configView.height-itemListSearch.height-3,
            1, 0, C_BADGE, C_BADGE_TEXT, C_STATUS_BAR, C_STATUS_TEXT, C_BADGE_SELECTED, C_BADGE_TEXT
    ))
    itemListPanel.selectedItem = -1
    --itemListPanel:setAlignment(GUI.ALIGNMENT_HORIZONTAL_LEFT, GUI.ALIGNMENT_VERTICAL_TOP)
    attachScrollbar(itemListPanel)

    override(itemListPanel, 'draw', function (super, self, ...)
        self.selectedItem = -1
        self.children = {}

        local selection = recipes
        local filter = itemListSearch.text
        if filter and filter ~= '' then
            filter = unicode.lower(filter)
            selection = {}
            for _, recipe in ipairs(recipes) do
                -- Patterns seem very limited, no case-insensitive option
                if unicode.lower(recipe.label):find(filter) then
                    table.insert(selection, recipe)
                end
            end
        end

        self.scrollBar.maximumValue = math.max(0, #selection - self.height)
        self.scrollBar.shownValueCount =  self.scrollBar.maximumValue / (self.scrollBar.maximumValue + 1)

        local offset = self.scrollBar.value
        for i = 1, math.min(self.height, #selection) do
            local recipe = selection[offset + i]
            local choice = self:addItem(recipe.label)
            --choice.colors.default.background = (recipe.error ~= nil) and C_BADGE_ERR or recipe.wanted > 0 and C_BADGE_BUSY or C_BADGE
            if recipe == configView[SYMBOL_CONFIG_RECIPE] then
                self.selectedItem = i
            end
            choice.onTouch = function(app, object)
                configView[SYMBOL_CONFIG_RECIPE] = recipe
                event.push('config_recipe_change')
            end
        end

        super(self, ...)
    end)

    -- right panel (item details)
    local reloadBtn = configView:addChild(GUI.button(configView.width/2+2, 2, configView.width/2-2, 3,
                                                     C_BADGE, C_BADGE_TEXT, C_BADGE, C_STATUS_PRESSED, ""Reload recipes""))
    reloadBtn.onTouch = function(app, self)
        event.push('ae2_loop', 'reload_recipes')
    end
    local itemConfigPanel = configView:addChild(GUI.layout(reloadBtn.x, reloadBtn.y + reloadBtn.height + 1, reloadBtn.width, configView.height-reloadBtn.height-7, 1, 1))
    configView:addChild(GUI.panel(itemConfigPanel.x, itemConfigPanel.y, itemConfigPanel.width, itemConfigPanel.height, C_BADGE)):moveBackward()
    itemConfigPanel:setAlignment(1, 1, GUI.ALIGNMENT_HORIZONTAL_CENTER, GUI.ALIGNMENT_VERTICAL_TOP)
    itemConfigPanel:setMargin(1, 1, .5, 1)

    override(itemConfigPanel, 'eventHandler', function(super, app, self, key, ...)
        if key == ""config_recipe_change"" then
            local recipe = configView[SYMBOL_CONFIG_RECIPE]

            self.children = {}
            self:addChild(GUI.text(1, 1, C_BADGE_TEXT, '[ '..recipe.label..' ]'))
            self:addChild(GUI.text(1, 1, C_BADGE_TEXT, ""Stored: ""..tostring(recipe.stored)))
            self:addChild(GUI.text(1, 1, C_BADGE_TEXT, ""Wanted""))
            local wantedInput = self:addChild(GUI.input(1, 1, 10, 3,
                    C_INPUT, C_INPUT_TEXT, 0, C_STATUS_PRESSED, C_INPUT_TEXT, tostring(recipe.wanted)))
            wantedInput.validator = numberValidator
            wantedInput.onInputFinished = function(app, object)
                recipe.wanted = tonumber(object.text) or error('cannot parse '..object.text)
                event.push('ae2_loop')
                event.push('save')
            end

            -- TODO: add remove/hide option

            -- self:draw()
            event.push('redraw') -- There is probably a more elegant way to do it ¯\_(ツ)_/¯
        end
        super(app, self, key, ...)
    end)

    local resetRecipeBtn = configView:addChild(GUI.button(itemConfigPanel.x, itemConfigPanel.y + itemConfigPanel.height + 1, itemConfigPanel.width, 3,
                                                          C_BADGE, C_BADGE_TEXT, C_BADGE, C_STATUS_PRESSED, ""Reset""))
    resetRecipeBtn.onTouch = function(app, self)
        local recipe = configView[SYMBOL_CONFIG_RECIPE]
        if not recipe then return end
        for i, candidate in ipairs(recipes) do
            if (candidate == recipe) then
                table.remove(recipes, i)
                return
            end
        end
    end

    -- Status bar
    statusBar:addChild(GUI.panel(1, 1, statusBar.width, statusBar.height, C_STATUS_BAR))
    local statusText = statusBar:addChild(GUI.text(2, 1, C_STATUS_TEXT, ''))
    statusText.eventHandler = function(app, self)
        self.text = string.format('CPU: %d free / %d total   Recipes:  %d errors  %d ongoing  %d queued   Update: %.0f ms',
            status.cpu.free, status.cpu.all, status.recipes.error, status.recipes.crafting, status.recipes.queue, status.update.duration * 1000)
    end
    statusText.eventHandler(app, statusText)
    local cfgBtn = statusBar:addChild(GUI.button(statusBar.width - 14, 1, 8, 1, C_STATUS_BAR, C_STATUS_TEXT, C_STATUS_BAR, C_STATUS_PRESSED, '[Config]'))
    cfgBtn.switchMode = true
    cfgBtn.animationDuration = .1
    cfgBtn.onTouch = function(app, object)
        configView.hidden = not object.pressed
    end
    statusBar:addChild(GUI.button(statusBar.width - 6, 1, 8, 1, C_STATUS_BAR, C_STATUS_TEXT, C_STATUS_BAR, C_STATUS_PRESSED, '[Exit]')).onTouch = function(app, object)
        event.push('exit')
    end

    return app
end

function attachScrollbar(obj)
    local width = (obj.width > 60) and 2 or 1
    obj.width = obj.width - width
    local bar = GUI.scrollBar(obj.x+obj.width, obj.y, width, obj.height, C_SCROLLBAR_BACKGROUND, C_SCROLLBAR,
            0, 1, 0, 1, 4, false)
    obj.parent:addChild(bar)
    obj.scrollBar = bar

    override(obj, 'eventHandler', function (super, app, self, key, ...)
        if key == 'scroll' then -- forward scrolls on the main object to the scrollbar
            bar.eventHandler(app, bar, key, ...)
        end
        super(app, self, key, ...)
    end)

    return bar
end

-- Start the program
main()"
Bn7Xts1j,Untitled,Bosta_adm,JSON,Wednesday 28th of June 2023 03:22:59 PM CDT,"
STK1 = {
      ""ID"" : ""1"",
      ""Username"" : ""StkMods"",
      ""Uid"" : ""Xs-982Jb982"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
STK2 = { 
      ""ID"" : ""2"",
      ""Username"" : ""StkMods1"",
      ""Uid"" : ""Xs-982882"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
STK3 = {
      ""ID"" : ""3"",
      ""Username"" : ""StkMods2"",
      ""Uid"" : ""Xs-982LHGBb982"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
STK4 = {
      ""ID"" : ""4"",
      ""Username"" : ""StkMods3"",
      ""Uid"" : ""Xs-98200082"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
STK5 = {
      ""ID"" : ""5"",
      ""Username"" : ""StkMods4"",
      ""Uid"" : ""Xs-982POURDN9982"",
      ""Password"" : ""123"",
      ""Dinheiro"" : ""100"",
      ""Estilo"" : ""R$""
}
"
dhufw68d,primitive version of my proprietary 3d format,Kitomas,Python,Wednesday 28th of June 2023 03:09:59 PM CDT,"from sys import argv
from struct import pack
from math import ceil,log
if len(argv) < 2: print(""no file name given!""); exit()
vertices,faces=[],[]; byteBuff=b''; lineNum=1; amountMax=0
fileI=open(argv[1],""r"")
for l in fileI:
    line=l[:-1].split("" "")
    if line[0] == ""v"":
        byteBuff=b''
        for v in range(1,len(line)): byteBuff+=pack(""f"", float(line[v]))
        vertices.append(byteBuff)
    elif line[0] == ""f"":
        faces.append([]); last=len(faces)-1
        for index in range(1,len(line)): faces[last].append( int(line[index].split(""/"")[0])-1 )
        if len(faces[last]) != 3: print((""line {}: face is not a triangle"").format(lineNum)); exit()
    lineNum+=1
fileI.close(); fileO=open(argv[1].split(""."")[0]+"".rtr"",""wb"")
for face in faces: amountMax=max(amountMax or 0,face[0],face[1],face[2])
bc=ceil(log(amountMax,2)/8)
fileO.write(bc.to_bytes(1,""little"")+len(vertices).to_bytes(4,""little"")+len(faces).to_bytes(4,""little""))
for vertex in vertices: fileO.write(vertex)
for face in faces: fileO.write(face[0].to_bytes(bc,""little"")+face[1].to_bytes(bc,""little"")+face[2].to_bytes(bc,""little""))
fileO.close()"
1qgFQVUt,Nastavení dopravy zdarma pro všechny dopravy od určité výše,Fany_VanDaal,PHP,Wednesday 28th of June 2023 02:38:32 PM CDT,"// Nastavení dopravy zdarma pomocí kupónu
add_filter( 'woocommerce_package_rates', 'wpsh_free_shipping_coupon', 20, 2 );
function wpsh_free_shipping_coupon( $rates, $package ) {
    $has_free_shipping = false;

    $applied_coupons = WC()->cart->get_applied_coupons();
    foreach( $applied_coupons as $coupon_code ){
        $coupon = new WC_Coupon($coupon_code);
        if($coupon->get_free_shipping()){
            $has_free_shipping = true;
            break;
        }
    }

    foreach( $rates as $rate_key => $rate ){
        if( $has_free_shipping ){
            // Pokud je povolena doprava zdarma, tak ji skryjeme
            if( $rate->method_id == 'free_shipping'){
                unset($rates[$rate_key]);
            }
            // Pro ostatní dopravy nastavíme
            else {
                // Místt cen yzobrazíme ZDARMA
                $rates[$rate_key]->label .= ' ' . __('(ZDARMA)', 'woocommerce');

                // Cena dopravy bude
                $rates[$rate_key]->cost = 0;

                // Nastavíme daň pro dopravu
                $taxes = array();
                foreach ($rates[$rate_key]->taxes as $key => $tax){
                    if( $rates[$rate_key]->taxes[$key] > 0 )
                        $taxes[$key] = 0;
                }
                $rates[$rate_key]->taxes = $taxes;
            }
        }
    }
    return $rates;
}

// Automaticky aplikujeme kupón pro dopravu zdarma
add_action( 'woocommerce_before_cart' , 'add_coupon_notice' );
add_action( 'woocommerce_before_checkout_form' , 'add_coupon_notice' );

function add_coupon_notice() {

        $cart_total = WC()->cart->get_subtotal();
        $minimum_amount = 1100; // Nastav jaká je minimální výše v košíku, kdy je doprava zdarma
        $currency_code = get_woocommerce_currency();
        wc_clear_notices();

       if ( $cart_total < $minimum_amount ) {
              WC()->cart->remove_coupon( 'doprava' ); // zadej kód pro dopravu zdarma.
              wc_print_notice( ""Získejte dopravu ZDARMA pokud nakupíte za více než $minimum_amount Kč"", 'notice' );
        } else {
              WC()->cart->apply_coupon( 'doprava' );
              wc_print_notice( 'Právě jsme Vám dali dopravu ZDARMA!', 'notice' );
        }        
          wc_clear_notices();
}"
VxL79y2w,main.php,radik098,PHP,Wednesday 28th of June 2023 01:46:41 PM CDT,"<?php
    /*
        Uk. Soft - Evolution (c)
        BotEngine
        v. 1. 0
    */
    namespace UkSoftEvolution\BotEngine;

    // Подключаем ядро
    include ""core.php"";

    // Используем зависимости
    use mysqli;
    use UkSoftEvolution\BotEngine\Core;
    use UkSoftEvolution\BotEngine\Core\BotInfo;
    use UkSoftEvolution\BotEngine\Core\Menu;
    use UkSoftEvolution\BotEngine\Core\Button;
    use UkSoftEvolution\BotEngine\Core\DB;
    use UkSoftEvolution\BotEngine\Core\DAL;
    use UkSoftEvolution\BotEngine\Core\Log;
    use UkSoftEvolution\BotEngine\Core\Telegram;
    use UkSoftEvolution\BotEngine\Core\Telegram\Model\Message;
    use UkSoftEvolution\BotEngine\Core\Telegram\Model\InlineQuery;
    use UkSoftEvolution\BotEngine\Core\Telegram\Model\PreCheckoutQuery;
    use UkSoftEvolution\BotEngine\Core\Telegram\Model\Response as TGResponse;

    /**
     * # BotEngine
     * ##### By Uk. Soft - Evolution
     * @property mysqli $DB База данных
     * @property array $DBData Данные для подключения к БД
     * @property string $BotName Имя бота
     * @property string $BotToken Токен бота
     * @property Message|null $Message Сообщение
     * @property array $MenuList Список меню
     * @property string $RootMenu Коренное меню
     * @property Telegram $Telegram Telegram API
     * @property string $Nav Навигация
     * @property int $OldMgroup ID старой медиагруппы
     * @property int $NewMgroup ID новой медиагруппы
     * @property InlineQuery|null $InlineQuery Инлайновый запрос
     * @property bool $isInline Является ли полученный хук инлайновым запосом
     * @property PreCheckoutQuery|null $PreCheckoutQuery Запрос на подтверждение оплаты
     * @property bool $isPreCheckout Являеться ли полученный хук запросом на подтверждение оплаты
     * @property Log $Log Модуль логов
     * @property callable $InlineQueryAction Экшн события обработки инлайнового запроса
	 * @property bool $AllowGroups Разрешать ли сообщения из групповых чатов
     */
    class Engine
    {
        public mysqli $DB;
        public array $DBData;
        public string $BotName;
        public string $BotToken;
        public ?Message $Message;
        public array $MenuList = [];
        public string $RootMenu;
        public Telegram $Telegram;
        public string $Nav;
        public int $OldMgroup = 0;
        public int $NewMgroup = 0;
        public ?InlineQuery $InlineQuery;
        public bool $isInline = false;
        public ?PreCheckoutQuery $PreCheckoutQuery;
        public bool $isPreCheckout;
        public Log $Log;
        public $InlineQueryAction;
        public $PreCheckoutQueryAction;
        public $Keyboard = ""Remove"";
        public string $Admin = """";
        public bool $AllowGroups = false;

        /**
         * Конструктор класса
         * @param BotInfo $info Конфиг бота
         */
        function __construct(BotInfo $info)
        {
            // Подключаемся к БД
            $this->DB = DB::Connect($info->DB);

            // В отдельную переменную заносим данные подключения к БД
            $this->DBdata = $info->DB;

            // Получаем и запоминаем основные сведения о боте
            $this->BotName = $info->Name;
            $this->BotToken = $info->Token;

            $this->Admin = $info->Admin;

            // Инициализируем класс для работы с Telegram
            $this->Telegram = new Telegram($info->Token, $info->ButtonsAutoSize);

            $this->AllowGroups = $info->AllowGroups;

            $this->InlineQuery = $this->Telegram->GetInlineQuery();
            $this->PreCheckoutQuery = $this->Telegram->GetPreCheckoutQuery();
            
            $this->isInline = $this->InlineQuery != false;
            $this->isPreCheckout = $this->PreCheckoutQuery != false;

            if(!$this->isInline && !$this->isPreCheckout) {
                $this->Message = $this->Telegram->GetUserMessage();

                // Отладка
                $this->Log = new Log($this->Message->uID, $this->DB);
    
                if($this->Message->isGroup && !$this->AllowGroups) {
                    exit();
                }
                if($this->Message->Text == ""/getid"") {
                    $this->Log->RequestSuccess();
                    $this->Send(""Your ID: "" . $this->Message->uID);
                    exit();
                }
    
                if($info->Private && !in_array($this->Message->uID, $info->PrivateAllow)) {
                    $this->Log->RequestFail(403, ""User not allowed.\nID: "" . $this->Message->uID);
                    $this->Send(""🚫 Доступ к данному боту ограничен."");
                    exit();
                }
    
                if($this->Message->MessageID == -1 && !$this->isInline) {
                    // Отображаем юзеру, что бот что-то пишет
                    $this->StatusTyping();
                }
    
                // Получаем и запоминаем последнюю медиагруппу
                $this->OldMgroup = DAL::GetLastMediaGroup($this->Message->uID, $this->DB);
                
                // Если сообщение принадлежит к медиагруппе, то сохраняем её и запоминаем в БД
                if($this->Message->isMediaGroup) {
                    $this->NewMgroup = $this->Message->mgroupID;
                    DAL::SetLastMediaGroup($this->Message->mgroupID, $this->Message->uID, $this->DB);
                }
    
                // Регистрируем Telegram юзера в БД (если он не зарегистрирован)
                DAL::RegisterUserIfNotExists($this->Message->uID, $this->Message->username, $this->Message->userFull, $this->DB);
            } else if($this->isInline) {
                 // Отладка
                 $this->Log = new Log($this->InlineQuery->uID, $this->DB);

                 $this->Message = new Telegram\Model\Message([
                     ""uID"" => $this->InlineQuery->uID
                 ]);
            } else if($this->isPreCheckout) {
                // Отладка
                $this->Log = new Log($this->PreCheckoutQuery->uID, $this->DB);

                $this->Message = new Telegram\Model\Message([
                    ""uID"" => $this->PreCheckoutQuery->uID
                ]);
            }
        }

        /**
         * Резервная функция для инициализации БД
         * @return mysqli БД
         */
        public function DB() : ?mysqli
        {
            return DB::Connect($this->DBdata);
        }

        /**
         * Функция для проверки наличия новой медиагруппы
         * @return bool Результат проверки
         */
        public function HasNewMediaGroup() : bool
        {
            return ($this->OldMgroup != $this->NewMgroup) && $this->OldMgroup != 0 && $this->NewMgroup != 0;
        }

        /**
         * Метод для создания меню
         * @param array Массив данных
         * @return string Имя меню
         */
        public function CreateMenu(array $data) : string
        {
            if(!isset($data['OnPay'])) {
                $data['OnPay'] = function(Message $Message, Engine $Engine)
                {
                    $Engine->Send(""Оплата пришла.. Но увы вы находитесь в меню в котором нет обработчика события оплаты.😢\nОбратитесь сюда за помощью - "" . $Engine->Admin);
                };
            }
            $this->MenuList[] = new Menu($data);
            return $data['Name'];
        }

        /**
         * Метод для задания корневого меню
         * @param string $menu Навигационное название меню
         */
        public function SetRootMenu(string $menu)
        {
            $this->RootMenu = $menu;
        }

        /**
         * Метод для отправки сообщения
         * @param string $Text текст сообщения
         * @param bool $RemoveLastKeyboard флаг удаления последней клавиатуры
         * @param array $MainKeyboard Массив кнопок основной клавиатуры
         * @param array $InlineKeyboard Массив кнопок инлайновой клавиатуры
         * @param string $Channel ID канала (необязательно)
         * @param string $ParseMode Метод парсинга
         * @return TGResponse Результат операции
         */
        public function Send(string $Text, bool $RemoveLastKeyboard = false, $MainKeyboard = [], $InlineKeyboard = [], string $Channel = """", string $ParseMode = ""markdown"") : TGResponse
        {
            if(empty($Channel)) {
                if(!empty($MainKeyboard)) $this->Keyboard = $MainKeyboard;

                if($RemoveLastKeyboard && empty($this->Keyboard)) {
                    $MainKeyboard = ""Remove"";
                } else {
                    $MainKeyboard = $this->Keyboard;
                }
                if(!empty($InlineKeyboard)) {
                    $MainKeyboard = [];
                }

                $Response = $this->Telegram->SendMessage($Text, $this->Message->uID, $MainKeyboard, $InlineKeyboard, $ParseMode);
            } else {
                if(empty($InlineKeyboard)) $InlineKeyboard = null;
                $Response = $this->Telegram->SendMessage($Text, $Channel, null, $InlineKeyboard, $ParseMode);
            }

            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                if(!empty($Response)) {
                    $this->Log->ResponseFail($Response->code, $Response->error);
                } else {
                    $this->Log->ResponseFail(500, ""Empty result"");
                }
                
            }
            return $Response;
        }

        /**
         * Метод для отправки фотографии
         * @param string $Photo Картинка
         * @param string $Text Текст
         * @param bool $RemoveLastKeyboard Флаг удаления последней клавиатуры
         * @param array $MainKeyboard Основная клавиатура
         * @param array $InlineKeyboard Инлайновая клавиатура
         * @return TGResponse Результат операции
         */
        public function SendPhoto(string $Photo, string $Text = """", bool $RemoveLastKeyboard = false, ?array $MainKeyboard = [], string $Channel = """", ?array $InlineKeyboard = []) : TGResponse
        {
            if(empty($Channel)) {
                if(!empty($MainKeyboard)) $this->Keyboard = $MainKeyboard;
                if($RemoveLastKeyboard && empty($this->Keyboard)) {
                    $MainKeyboard = ""Remove"";
                } else {
                    $MainKeyboard = $this->Keyboard;
                }
                if(empty($InlineKeyboard)) {
                    $Response = $this->Telegram->SendPhoto($Photo, $this->Message->uID, $Text, $MainKeyboard, []);
                } else {
                    $Response = $this->Telegram->SendPhoto($Photo, $this->Message->uID, $Text, null, $InlineKeyboard);
                }
                
            } else {
                $Response = $this->Telegram->SendPhoto($Photo, $Channel);
            }
            
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отправки видео
         * @param string $Video Видео
         * @param string $Text Текст
         * @param bool $RemoveLastKeyboard Флаг удаления последней клавиатуры
         * @param array $MainKeyboard Основная клавиатура
         * @param array $InlineKeyboard Инлайновая клавиатура
         * @return TGResponse Результат операции
         */
        public function SendVideo(string $Video, string $Text = """", bool $RemoveLastKeyboard = false, ?array $MainKeyboard = [], string $Channel = """", ?array $InlineKeyboard = []) : TGResponse
        {
            if(empty($Channel)) {
                if(!empty($MainKeyboard)) $this->Keyboard = $MainKeyboard;
                if($RemoveLastKeyboard && empty($this->Keyboard)) {
                    $MainKeyboard = ""Remove"";
                } else {
                    $MainKeyboard = $this->Keyboard;
                }
                if(empty($InlineKeyboard)) {
                    $Response = $this->Telegram->SendVideo($Video, $this->Message->uID, $Text, $MainKeyboard, []);
                } else {
                    $Response = $this->Telegram->SendVideo($Video, $this->Message->uID, $Text, null, $InlineKeyboard);
                }
                
            } else {
                $Response = $this->Telegram->SendVideo($Video, $Channel);
            }
            
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Альтернативный метод для отправки фотографии
         * @param string $Photo Картинка
         * @param string $Text Текст
         * @param bool $RemoveLastKeyboard Флаг удаления последней клавиатуры
         * @param array $MainKeyboard Основная клавиатура
         * @param array $InlineKeyboard Инлайновая клавиатура
         * @return TGResponse Результат операции
         */
        public function SendPhotoAlt(string $Photo, string $Text = """", bool $RemoveLastKeyboard = false, ?array $MainKeyboard = [], string $Channel = """", ?array $InlineKeyboard = []) : TGResponse
        {
            if(empty($Channel)) {
                if(!empty($MainKeyboard)) $this->Keyboard = $MainKeyboard;
                if($RemoveLastKeyboard && empty($this->Keyboard)) {
                    $MainKeyboard = ""Remove"";
                } else {
                    $MainKeyboard = $this->Keyboard;
                }
                if(empty($InlineKeyboard)) {
                    $Response = $this->Telegram->SendPhotoAlt($Photo, $this->Message->uID, $Text, $MainKeyboard, []);
                } else {
                    $Response = $this->Telegram->SendPhotoAlt($Photo, $this->Message->uID, $Text, null, $InlineKeyboard);
                }
                
            } else {
                $Response = $this->Telegram->SendPhotoAlt($Photo, $Channel);
            }
            
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отправки документа
         * @param string $document Документ
         * @return TGResponse Результат операции
         */
        public function SendDocument(string $document) : TGResponse
        {
            $Response = $this->Telegram->SendDocument($document, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отправки геолокации
         * @param $lat Широта
         * @param $long Долгота
         * @return TGResponse Результат операции
         */
        public function SendLocation(string $lat, string $long) : TGResponse
        {
            $Response = $this->Telegram->SendLocation($lat, $long, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для пересылки сообщения
         * @param int $MessageID ID сообщения
         * @param string $ChatID ID чата
         * @return TGResponse Результат операции
         */
        public function ForwardMessage(int $MessageID, string $ChatID) : TGResponse
        {
            $Response = $this->Telegram->ForwardMessage($ChatID, $MessageID, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для редактирования сообщения
         * @param string $MessageID ID сообщения
         * @param string $NewText Новый текст
         * @return TGResponse Результат операции
         */
        public function EditMessage(string $MessageID, string $NewText) : TGResponse
        {
            $Response = $this->Telegram->EditMessage($MessageID, $NewText, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для редактирования инлайновых кнопок сообщения
         * @param int $MessageID ID сообщения
         * @param array $InlineKeyboard Инлайновая клавиатура
         * @return TGResponse Результат операции
         */
        public function EditMessageInlineButtons(int $MessageID, array $InlineKeyboard) : TGResponse
        {
            $Response = $this->Telegram->EditMessageInlineButtons($MessageID, $InlineKeyboard, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для удаления сообщения
         * @param int $MessageID ID сообщения
         * @return TGResponse Результат операции
         */
        public function DeleteMessage(int $MessageID) : TGResponse
        {
            $Response = $this->Telegram->DeleteMessage($MessageID, $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отображения статуса бота - ""печатает...""
         * @return TGResponse Результат операции
         */
        public function StatusTyping() : TGResponse
        {
            $Response = $this->Telegram->SendAction('typing', $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отображения статуса бота - ""отправка фото""
         * @return TGResponse Результат операции
         */
        public function StatusSendPhoto() : TGResponse
        {
            $Response = $this->Telegram->SendAction('upload_photo', $this->Message->uID);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для скачивания файла с серверов Telegram
         * @param string $ID ID файла
         * @return string Имя конечного файла
         */
        public function GetFileFromID(string $ID) : string
        {
            return $this->Telegram->GetFile($this->Telegram->GetFilename($ID));
        }

        /**
         * Метод для получения пути к файлу на серверах Telegram
         * @param string $ID ID файла
         * @return string Путь к файлу на серверах Telegram
         */
        public function GetFilenameFromID(string $ID) : string
        {
            return $this->Telegram->GetFilename($ID);
        }

        /**
         * Метод для получения файла по пути с серверов Telegram
         * @param string $Path Путь к файлу
         * @return string Путь к загруженному файлу
         */
        public function GetFileFromPath(string $Path) : string
        {
            return $this->Telegram->GetFile($Path);
        }

        /**
         * Метод для получения BLOB файла с серверов Telegram
         * @param int $ID ID файла
         * @return string BLOB
         */
        public function GetBlobFromID(int $ID) : string
        {
            return $this->Telegram->GetBlob($this->Telegram->GetFilename($ID));
        }

        /**
         * Метод для отправки группы фотографий
         * @param array $Photos Фотографии
         * @param string $Caption Подпись
         * @param string $Channel ID канала
         * @param bool $isID Является ли фото ID
         * @param string $ParseMode Метод парсинга
         * @return TGResponse Результат операции
         */
        public function SendPhotoGroup(array $Photos, string $Caption = """", string $Channel = """", bool $isID = false, string $ParseMode = ""markdown"") : TGResponse
        {
            if(empty($Channel)) {
                $Channel = $this->Message->uID;
            }
            $Response = $this->Telegram->SendPhotoGroup($Photos, $Channel, $Caption, $isID, $ParseMode);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для отправки медиагруппы
         * @param array $Content Контент
         * @param string $Caption Подпись
         * @param string $Channel ID канала
         * @param string $ParseMode Метод парсинга
         * @return TGResponse Результат операции
         */
        public function SendMediaGroup(array $Content, string $Caption = """", string $Channel = """", string $ParseMode = ""markdown"") : TGResponse
        {
            if(empty($Channel)) {
                $Channel = $this->Message->uID;
            }
            $Response = $this->Telegram->SendMediaGroup($Content, $Channel, $Caption, $ParseMode);
            if($Response->ok) {
                $this->Log->ResponseSuccess();
            } else {
                $this->Log->ResponseFail($Response->code, $Response->error);
            }
            return $Response;
        }

        /**
         * Метод для получения объекта меню по имени
         * @param string $name Имя меню
         * @return Menu Меню
         */
        private function GetMenuByName(string $Name) : ?Menu
        {
            foreach($this->MenuList as $Item) if($Item->Name == $Name) return $Item;
            if(empty($Name)) {
                foreach($this->MenuList as $Item) if($Item->Name == $this->RootMenu) return $Item;
            }
            return null;
        }

        /**
         * Метод для получения действия кнопки меню по сообщению (только если кнопка затронута)
         * @param string $Text Текст сообщения
         * @param Menu $Menu Меню
         * @return callable Действие
         */
        private function GetKeyboardActionFromMessage(string $Text, Menu $Menu) : ?callable
        {
            if(is_array($Menu->Buttons)) {
                foreach($Menu->Buttons as $Row) {
                    foreach($Row as $Button) {
                        if($Button->Title == $Text) return $Button->Action;
                    }
                }
            }
            return null;
        }

        /**
         * Метод для преобразование кнопок в клавиатуру Telegram
         * @param array $Buttons Массив кнопок
         * @return array Клавиатура
         */
        private function KBFromButtons(array $Buttons) : array
        {
            $Keyboard = [];
            if(is_array($Buttons)) {
                foreach($Buttons as $Row) {
                    $RowButtons = [];
                    foreach($Row as $Button) {
                        $RowButtons[] = $Button->Title;
                    }
                    $Keyboard[] = $RowButtons;
                }
            }
            return $Keyboard;
        }

        /**
         * Метод для навигации в нужное меню
         * @param string $Nav Имя меню
         * @param bool $Silent Не выполнять ли действие OnLoad
         */
        public function NavTo(string $Nav, bool $Silent = false)
        {
            DAL::SetNav($Nav, $this->Message->uID, $this->DB);
            DAL::SetLastMediaGroup(""-1"", $this->Message->uID, $this->DB);
            if($Silent) return;
            $CurrentMenu = $this->GetMenuByName($Nav);
            $Action = $CurrentMenu->OnLoad;
            $this->Message->Text = ""/init"";
            $this->Keyboard = $this->KBFromButtons($CurrentMenu->Buttons);
            call_user_func($Action, $this->Message, $this);
            DAL::SetNav($Nav, $this->Message->uID, $this->DB);
        }

        /**
         * Метод для изменения кеша
         * @param $cache Кеш
         */
        public function SetCache($cache)
        {
            DAL::SetCache($cache, $this->Message->uID, $this->DB);
        }

        /**
         * Метод для получения кеша
         * @return mixed Кеш
         */
        public function GetCache()
        {
            return DAL::GetCache($this->Message->uID, $this->DB);
        }

        /**
         * Метод для навигации в Главное Меню
         * @param bool $Silent Не выполнять ли действие OnLoad
         */
        public function NavToRoot(bool $Silent = false)
        {
            $this->NavTo($this->RootMenu, $Silent);
        }

        /**
         * Метод для обработки ошибки
         * @param string $message Сообщение ошибки
         */
        public function OnError(string $message)
        {
            $this->Log->RequestFail(500, $message);
            $this->Send(""🐘 *Ошибка PHP:* \n\n"" . $message);
            exit();
        }
        /**
         * Метод для получения ссылки на корневую директорию бота
         * @param string Ссылка
         */
        public function GetURL() : string
        {
            $protocol = stripos($_SERVER['SERVER_PROTOCOL'],'https') === 0 ? 'https:' : 'http:';
            $dir = dirname($_SERVER['SCRIPT_NAME']);
            return $protocol . '//' . $_SERVER['HTTP_HOST'] . $dir . '/';
        }
        /**
         * Задание действия для обработки события появления инлайнового запроса
         * @param callable $Action Действие
         */
        public function OnInlineQuery($Action)
        {
            $this->InlineQueryAction = $Action;
        }
        /**
         * Задание действия для обработки события появления запроса на подтверждение оплаты
         * @param callable $Action Действие
         */
        public function OnPreCheckoutQuery($Action)
        {
            $this->PreCheckoutQueryAction = $Action;
        }
        /**
         * Метод для получения навигации
         * @return string Навигация
         */
        public function GetNav() : string
        {
            return DAL::GetNav($this->Message->uID, $this->DB);
        }
        /**
         * Метод для инициализации движка
         */
        public function Init()
        {
            if(!$this->isInline && !$this->isPreCheckout) {
                if($this->Message->Text == ""/reset"" || $this->Message->Text == ""/start"") {
                    DAL::SetNav($this->RootMenu, $this->Message->uID, $this->DB);
                }
                $Nav = DAL::GetNav($this->Message->uID, $this->DB);
                if(empty($Nav)) $Nav = $this->RootMenu;
                DAL::SetNav($Nav, $this->Message->uID, $this->DB);
                $this->Nav = $Nav;
                
                $CurrentMenu = $this->GetMenuByName($this->Nav);
                if($CurrentMenu != null) {
                    $KeyboardAction = $this->GetKeyboardActionFromMessage($this->Message->Text, $CurrentMenu);
                    
                    if($this->Message->isPay) {
                        $action = $CurrentMenu->OnPay;
                    } else {
                        if($KeyboardAction != null) {
                            $action = $KeyboardAction;
                        } else {
                            $action = $CurrentMenu->OnLoad;
                        }
                    }
                    
                    $this->Keyboard = $this->KBFromButtons($CurrentMenu->Buttons);

                    if(is_callable($action)) {
                        call_user_func($action, $this->Message, $this);
                    }
                } else {
                    $this->Send(""Меню не найдено."");
                }
            } else if($this->isInline) {
                if(is_callable($this->InlineQueryAction)) { 
                    call_user_func($this->InlineQueryAction, $this->InlineQuery, $this);       
                }
            } else if($this->isPreCheckout) {
                if(is_callable($this->PreCheckoutQueryAction)) { 
                    call_user_func($this->PreCheckoutQueryAction, $this->PreCheckoutQuery, $this);       
                }
            }
            $this->Log->RequestSuccess();
        }
    }
?>"
cBYNeEv4,draw.lua,Nikit_OS,Lua,Wednesday 28th of June 2023 01:42:22 PM CDT,"local event = require ""event""
local component = require ""component""
local reactor = component.reactor_chamber
local redstone = component.redstone
--local menet = component.proxy(component.get(""d57""))
local gpu = component.gpu
local w, h = gpu.getResolution()
local inv = component.inventory_controller
local invs = inv.getInventorySize(0)
local power = 0
local changing = false
local rods = {}
local ri=1
local lzhs = {}
local li=1
local vents = {}
local vi=1
local warn=false

function getElement(pos)
  local l="" ""
  if inv.getStackInSlot(2,pos) then
    l=inv.getStackInSlot(2,pos)
  end
  return l
end

function fillDmg(i,j,el,dmg)
  if el==""LZH"" then
    dmg=(100000-dmg)/10000
  elseif el==""Rod"" then
    dmg=(20000-dmg)/2000
  elseif el==""Vent"" then
    dmg=(1000-dmg)/100
  end
  gpu.setBackground(0xFF0000)
  gpu.fill(j+2,i+5,dmg,1,"" "")
  gpu.setBackground(0x1E1E1E)
  gpu.fill(j+2+dmg,i+5,10-dmg,1,"" "")
end

function checkDmg()
  local dmg=0
  for i=1,li-1,1 do
    if inv.getStackInSlot(2,lzhs[i][3]) then
      dmg=inv.getStackInSlot(2,lzhs[i][3]).customDamage
      fillDmg(lzhs[i][1],lzhs[i][2],""LZH"",dmg)
    else
      fillDmg(lzhs[i][1],lzhs[i][2],""LZH"",100000)
    end
  end  
  local r
  for i=1,ri-1,1 do
    r=inv.getStackInSlot(2,rods[i][3])
    if r and not string.match(r.label,""Depleted"") then
      dmg=inv.getStackInSlot(2,rods[i][3]).customDamage
      fillDmg(rods[i][1],rods[i][2],""Rod"",dmg)
    else
      fillDmg(rods[i][1],rods[i][2],""Rod"",20000)
    end
  end  
  for i=1,vi-1,1 do
    if inv.getStackInSlot(2,vents[i][3]) then
      dmg=inv.getStackInSlot(2,vents[i][3]).customDamage
      fillDmg(vents[i][1],vents[i][2],""Vent"",dmg)
    else
      fillDmg(vents[i][1],vents[i][2],""Vent"",1000)
    end
  end  
end

function fillElement(i,j,el,pos,set,elw)
  local j1=9+j
  local i1=2+i
  set=set or 0x696969
  pos=pos or 1
  elw=elw or 14
  gpu.setBackground(set)
  gpu.fill(j1,i1,elw,6,"" "")
  local l="" ""
  if el.label then
    l=el.label
  end
  if el==""X"" then
    gpu.setForeground(0x3C3C3C)
    gpu.fill(j1+1,i1,1,1,""＼"")
    gpu.fill(j1+11,i1,1,1,""／"")
    gpu.fill(j1+3,i1+1,1,1,""＼"")
    gpu.fill(j1+9,i1+1,1,1,""／"")
    gpu.fill(j1+5,i1+2,1,1,""＼"")
    gpu.fill(j1+7,i1+2,1,1,""／"")
    gpu.fill(j1+7,i1+3,1,1,""＼"")
    gpu.fill(j1+5,i1+3,1,1,""／"")
    gpu.fill(j1+9,i1+4,1,1,""＼"")
    gpu.fill(j1+3,i1+4,1,1,""／"")
    gpu.fill(j1+11,i1+5,1,1,""＼"")
    gpu.fill(j1+1,i1+5,1,1,""／"")
  elseif el==""0"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,4,""║"")
    gpu.fill(j1+7,i1+1,1,4,""║"")
  elseif el==""1"" then
    gpu.fill(j1+7,i1+1,1,4,""║"")
  elseif el==""2"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
  elseif el==""3"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
  elseif el==""4"" then
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
  elseif el==""5"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
  elseif el==""6"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
  elseif el==""7"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+7,i1+1,1,4,""║"")
  elseif el==""8"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
    gpu.fill(j1,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
  elseif el==""9"" then
    gpu.fill(j1+1,i1,6,1,""═"")
    gpu.fill(j1+1,i1+2,6,1,""═"")
    gpu.fill(j1+1,i1+5,6,1,""═"")
    gpu.fill(j1,i1+1,1,1,""║"")
    gpu.fill(j1+7,i1+3,1,2,""║"")
    gpu.fill(j1+7,i1+1,1,1,""║"")
  elseif string.match(l,""LZH"") then
    gpu.setBackground(0x0000C0)
    gpu.fill(j1+1,i1+1,12,4,"" "")
    fillDmg(i1,j1,""LZH"",el.customDamage)
    lzhs[li]={i1,j1,pos}
    li=li+1
  elseif string.match(l,""Overclocked"") then
    gpu.setBackground(0xFFFF40)
    gpu.fill(j1+1,i1+1,12,4,"" "")
    fillDmg(i1,j1,""Vent"",el.customDamage)
    vents[vi]={i1,j1,pos}
    vi=vi+1
  elseif string.match(l,""Quad"") then
    gpu.setBackground(0x006D00)
    gpu.fill(j1+1,i1+1,2,4,"" "")
    gpu.fill(j1+4,i1+1,2,4,"" "")
    gpu.fill(j1+8,i1+1,2,4,"" "")
    gpu.fill(j1+11,i1+1,2,4,"" "")
    if not string.match(l,""Depleted"") then
      fillDmg(i1,j1,""Rod"",el.customDamage)
    else
      fillDmg(i1,j1,""Rod"",20000)
    end
    rods[ri]={i1,j1,pos}
    ri=ri+1
  elseif string.match(l,""Plating"") then
    gpu.setBackground(0xB4B4B4)
    gpu.fill(j1+1,i1+1,12,4,"" "")
  end
end

function drawElement(i,j)
  local i1=i/7
  local j1=j/16+1
  local pos=i1*9+j1
  local s=(invs-4)/6
  if s<9 then
    for g=8,s,-1 do
      local m=math.fmod(pos,g+1)
      if m==0 then
        fillElement(i,j,""X"")
        return 
      end
      local d=(pos-m)/(g+1)
      pos=pos-d
    end
  end
  local el=getElement(pos)
  fillElement(i,j,el,pos)
end

function fillEU(eu)
  gpu.setBackground(0x000000)
  gpu.fill(88,44,72,6,"" "")
  gpu.setForeground(0x00B6FF)
  local l = string.len(eu)
  for i=l,1,-1 do
    fillElement(42,140-(l-i)*10,string.sub(eu,i,i),1,0x000000,10)
  end
end

function fillPower(power)
  if power>0 then
    gpu.setBackground(0x00FF00)
  else
    gpu.setBackground(0xFF0000)
  end
  gpu.fill(2,45,14,5,"" "")
end

function fillWarning(w)
  gpu.setBackground(w)
  gpu.fill(18,45,14,5,"" "")
end

function continueWork()
  if reactor.getHeat()>0 then
    power=0
    redstone.setOutput(1,power)
    --menet.setOutput(2,15)
    fillPower(power)
    fillWarning(0xFFB600)
    fillEU(0)
    warn=true
    return true
  end
  local eu = reactor.getReactorEUOutput()
  if changing then
    if   not inv.getStackInSlot(2,11) or (inv.getStackInSlot(2,11) and string.match(inv.getStackInSlot(2,11).label,""Depleted""))
      or not inv.getStackInSlot(2,12) or (inv.getStackInSlot(2,12) and string.match(inv.getStackInSlot(2,12).label,""Depleted""))
      or not inv.getStackInSlot(2,15) or (inv.getStackInSlot(2,15) and string.match(inv.getStackInSlot(2,15).label,""Depleted""))
      or not inv.getStackInSlot(2,16) or (inv.getStackInSlot(2,16) and string.match(inv.getStackInSlot(2,16).label,""Depleted""))
      or not inv.getStackInSlot(2,20) or (inv.getStackInSlot(2,20) and string.match(inv.getStackInSlot(2,20).label,""Depleted""))
      or not inv.getStackInSlot(2,21) or (inv.getStackInSlot(2,21) and string.match(inv.getStackInSlot(2,21).label,""Depleted""))
      or not inv.getStackInSlot(2,24) or (inv.getStackInSlot(2,24) and string.match(inv.getStackInSlot(2,24).label,""Depleted""))
      or not inv.getStackInSlot(2,25) or (inv.getStackInSlot(2,25) and string.match(inv.getStackInSlot(2,25).label,""Depleted""))
      or not inv.getStackInSlot(2,29) or (inv.getStackInSlot(2,29) and string.match(inv.getStackInSlot(2,29).label,""Depleted""))
      or not inv.getStackInSlot(2,30) or (inv.getStackInSlot(2,30) and string.match(inv.getStackInSlot(2,30).label,""Depleted""))
      or not inv.getStackInSlot(2,33) or (inv.getStackInSlot(2,33) and string.match(inv.getStackInSlot(2,33).label,""Depleted""))
      or not inv.getStackInSlot(2,34) or (inv.getStackInSlot(2,34) and string.match(inv.getStackInSlot(2,34).label,""Depleted""))
      or not inv.getStackInSlot(2,38) or (inv.getStackInSlot(2,38) and string.match(inv.getStackInSlot(2,38).label,""Depleted""))
      or not inv.getStackInSlot(2,39) or (inv.getStackInSlot(2,39) and string.match(inv.getStackInSlot(2,39).label,""Depleted""))
      or not inv.getStackInSlot(2,42) or (inv.getStackInSlot(2,42) and string.match(inv.getStackInSlot(2,42).label,""Depleted""))
      or not inv.getStackInSlot(2,43) or (inv.getStackInSlot(2,43) and string.match(inv.getStackInSlot(2,43).label,""Depleted""))
      or not inv.getStackInSlot(2,51) or (inv.getStackInSlot(2,51) and string.match(inv.getStackInSlot(2,51).label,""Depleted""))
      or not inv.getStackInSlot(2,52) or (inv.getStackInSlot(2,52) and string.match(inv.getStackInSlot(2,52).label,""Depleted"")) then
      return true --do nothing
    else
      changing=false
      power=15
      redstone.setOutput(1,power)
      --menet.setOutput(2,power)
      fillWarning(0x000000)
    end
  else
    if eu<2000 and power>0 then
      changing=true
      power=0
      redstone.setOutput(1,power)
      --menet.setOutput(2,power)
      fillWarning(0x006D00)
      fillEU(0)
      return true
    end
  end
  fillEU(eu)
  checkDmg()
  return true
end

local myEventHandlers = setmetatable({}, { __index = function() return continueWork end })

function myEventHandlers.key_up(adress, char, code, playerName)
  if code==57 then
    if not changing then
      if power==0 then
        --print(""Enable"")
        if warn then
          warn=false
          fillWarning(0x000000)
        end
        power=15
      else
        --print(""Shutdown"")
        power=0
      end
      fillPower(power)
      redstone.setOutput(1,power)
      --menet.setOutput(2,power)
    end
  end
  return true
end

function myEventHandlers.interrupted(...)
  gpu.setForeground(0xFFFFFF)
  gpu.setBackground(0x000000)
  gpu.fill(1, 1, w, h, "" "")
  return false
end
 
function handleEvent(eventID, ...)
  if (eventID) then 
    return myEventHandlers[eventID](...)
  end
  return continueWork()
end

gpu.setBackground(0xC3C3C3)

gpu.fill(1, 1, w, h-7, "" "")

for i=0,35,7 do
  for j=0,128,16 do
    drawElement(i,j)
  end
end

if reactor.getReactorEUOutput()>0 then
  power=15
end
fillPower(power)
while handleEvent(event.pull(1)) do
  --nothing
end"
iPAGLRPj,04. Word Filter,veronikaaa86,Java,Wednesday 28th of June 2023 01:34:52 PM CDT,"package associativeArrays;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class P04WordFilter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[] wordsArr = Arrays.stream(scanner.nextLine().split("" ""))
                .filter(w -> w.length() % 2 == 0)
                .toArray(String[]::new);


        System.out.println(String.join(System.lineSeparator(), wordsArr));


//        String[] wordsArr = scanner.nextLine().split("" "");
//
//        ArrayList<String> resultList = new ArrayList<>();
//        for (String item : wordsArr) {
//            if (item.length() % 2 == 0) {
//                resultList.add(item);
//            }
//        }
//
//        System.out.println(String.join(System.lineSeparator(), resultList));
    }
}
"
7uvvdC4b,Untitled,bgabrovsek,Python,Wednesday 28th of June 2023 01:30:50 PM CDT,"import tensorflow as tf
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.models import Sequential

# Step 1: Prepare your data
# Assume you have a list of sequences and corresponding labels

sequences = [...]  # List of input sequences
labels = [...]  # List of corresponding labels

# Step 2: Data Transformation and Augmentation
def augment_sequence(sequence):
    # Custom data augmentation function
    # Implement your own data augmentation logic here
    augmented_sequence = ...  # Perform data augmentation on the sequence
    return augmented_sequence

def preprocess_data(sequence, label):
    sequence = tf.convert_to_tensor(sequence, dtype=tf.float32)
    sequence = augment_sequence(sequence)  # Apply data augmentation
    return sequence, label

dataset = tf.data.Dataset.from_tensor_slices((sequences, labels))
dataset = dataset.map(preprocess_data)

# Step 3: Data Loading
batch_size = 32

dataset = dataset.shuffle(buffer_size=len(sequences))
dataset = dataset.batch(batch_size)
dataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)

# Step 4: Define the LSTM model
model = Sequential()
model.add(LSTM(64, input_shape=(92, 1)))
model.add(Dense(1, activation='sigmoid'))

# Step 5: Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 6: Training Loop
num_epochs = 10

for epoch in range(num_epochs):
    print(""Epoch"", epoch + 1)
    iterator = iter(dataset)

    try:
        while True:
            batch_data = next(iterator)
            X = tf.expand_dims(batch_data[0], axis=-1)
            y = batch_data[1]

            model.train_on_batch(X, y)

    except StopIteration:
        pass  # End of dataset

# Once the training is complete, you can save the model or use it for predictions.
"
NeWLifx1,03. Odd Occurrences,veronikaaa86,Java,Wednesday 28th of June 2023 01:07:42 PM CDT,"package associativeArrays;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

public class P03OddOccurrences {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[] inputArr = scanner.nextLine().split("" "");

        LinkedHashMap<String, Integer> wordsMap = new LinkedHashMap<>();

        for (String word : inputArr) {
            word = word.toLowerCase();

            wordsMap.putIfAbsent(word, 0);
            wordsMap.put(word, wordsMap.get(word) + 1);

//            -v.01-
//            if (wordsMap.containsKey(word)) {
//                wordsMap.put(word, wordsMap.get(word) + 1);
//            } else {
//                wordsMap.put(word, 1);
//            }

//            -v.01-
//            if (!wordsMap.containsKey(word)) {
//                wordsMap.put(word, 0);
//            }
//
//            wordsMap.put(word, wordsMap.get(word) + 1);
        }

        ArrayList<String> resultList = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : wordsMap.entrySet()) {
            if (entry.getValue() % 2 != 0) {
                resultList.add(entry.getKey());
            }
        }

        System.out.println(String.join("", "", resultList));

    }
}
"
Atjjm3rk,Untitled,chaoticoz,C,Wednesday 28th of June 2023 12:55:31 PM CDT,"
int drawWifiIcon(undefined4 param_1,int param_2,char param_3)

{
  short sVar1;
  undefined4 local_4c;
  undefined4 uStack_48;
  undefined4 local_44;
  undefined4 uStack_40;
  undefined4 local_3c;
  undefined4 local_38;
  undefined4 local_34;
  undefined4 uStack_30;
  undefined4 local_2c;
  undefined4 uStack_28;
  undefined4 local_24;
  undefined4 local_20;
  int local_1c;
  int *local_18;
  int local_14;
  int icon_height;
  undefined4 local_c;
  
  local_c = 0x30;
  icon_height = 0x30;
  if (DAT_00182198 != 0) {
    local_c = *(undefined4 *)(DAT_00182198 + 8);
    icon_height = *(int *)(DAT_00182198 + 0xc);
  }
  local_14 = FUN_00138c50();
  if (local_14 == 3) {
    sVar1 = (short)local_c;
    local_24 = CONCAT22((short)((0x3c - icon_height) / 2),
                        0x26c - ((sVar1 + 0x14) * (short)param_2 + sVar1));
    local_20 = CONCAT22((short)icon_height,sVar1);
    if (DAT_00182190 == 0) {
      SDL_FillRect(param_1,&local_24,0x109d);
    }
    else {
      local_2c = local_24;
      uStack_28 = local_20;
      SDL_UpperBlit(DAT_00182190,&local_2c,param_1,&local_24);
    }
    if ((DAT_001821a8 != 0) && (param_3 != '\0')) {
      local_34 = local_24;
      uStack_30 = local_20;
      SDL_UpperBlit(DAT_001821a8,&local_34,param_1,&local_24);
    }
    drawSomething(param_1,DAT_00182198,&local_24,DAT_00182200);
    param_2 = param_2 + 1;
  }
  else {
    if (((local_14 == 2) && (local_18 = (int *)FUN_0014e564(), local_18 != (int *)0x0)) &&
       (*local_18 == 4)) {
      sVar1 = (short)local_c;
      local_3c = CONCAT22((short)((0x3c - icon_height) / 2),
                          0x26c - ((sVar1 + 0x14) * (short)param_2 + sVar1));
      local_38 = CONCAT22((short)icon_height,sVar1);
      if (DAT_00182190 == 0) {
        SDL_FillRect(param_1,&local_3c,0x109d);
      }
      else {
        local_44 = local_3c;
        uStack_40 = local_38;
        SDL_UpperBlit(DAT_00182190,&local_44,param_1,&local_3c);
      }
      if ((DAT_001821a8 != 0) && (param_3 != '\0')) {
        local_4c = local_3c;
        uStack_48 = local_38;
        SDL_UpperBlit(DAT_001821a8,&local_4c,param_1,&local_3c);
      }
      local_1c = FUN_0014e118(local_18[0x18]);
      if (local_1c < 3) {
        if (local_1c < 2) {
          drawSomething(param_1,DAT_00182198,&local_3c,DAT_0018220c);
        }
        else {
          drawSomething(param_1,DAT_00182198,&local_3c,DAT_00182208);
        }
      }
      else {
        drawSomething(param_1,DAT_00182198,&local_3c,DAT_00182204);
      }
      return param_2 + 1;
    }
    param_2 = -1;
  }
  return param_2;
}

"
S2H7WvFF,02. Word Synonyms,veronikaaa86,Java,Wednesday 28th of June 2023 12:38:52 PM CDT,"package associativeArrays;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

public class P02WordSynonyms {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        LinkedHashMap<String, ArrayList<String>> wordsMap = new LinkedHashMap<>();

        for (int i = 0; i < n; i++) {
            String word = scanner.nextLine();
            String synonym = scanner.nextLine();

            if (!wordsMap.containsKey(word)) {
                wordsMap.put(word, new ArrayList<>());
            }

            wordsMap.get(word).add(synonym);
        }

        for (Map.Entry<String, ArrayList<String>> entry : wordsMap.entrySet()) {
            String keyMap = entry.getKey();
            ArrayList<String> synonymsList = entry.getValue();

            System.out.printf(""%s - %s%n"", keyMap, String.join("", "", synonymsList));
        }
    }
}
"
FgUJNj8e,Nigerian scammers [28-6-3/2023],bombaires,HTML,Wednesday 28th of June 2023 12:22:25 PM CDT,"<a href=""mailto:2029672668@qq.com"">2029672668@qq.com</a>
<a href=""mailto:mr.duncansmith001@gmail.com"">mr.duncansmith001@gmail.com</a>
<a href=""mailto:m.r..d.un.cansm.i.t.h.0.01@gmail.com"">m.r..d.un.cansm.i.t.h.0.01@gmail.com</a>
<a href=""mailto:mr...d.un.c.a.n.s.m.i.th.001@gmail.com"">mr...d.un.c.a.n.s.m.i.th.001@gmail.com</a>
<a href=""mailto:m.r.du.n.cans.m.i.t.h0.0.1@gmail.com"">m.r.du.n.cans.m.i.t.h0.0.1@gmail.com</a>
<a href=""mailto:mr.d.un.can.smi.th.0.01@gmail.com"">mr.d.un.can.smi.th.0.01@gmail.com</a>
<a href=""mailto:m.r.d.u.nc.a.n.smi.th.0.01@gmail.com"">m.r.d.u.nc.a.n.smi.th.0.01@gmail.com</a>
<a href=""mailto:mr..du.nca.n.smith00.1@gmail.com"">mr..du.nca.n.smith00.1@gmail.com</a>
<a href=""mailto:m.r..d.unc.a.ns.m.i.th001@gmail.com"">m.r..d.unc.a.ns.m.i.th001@gmail.com</a>
<a href=""mailto:mr...du.n.cans.m.it.h00.1@gmail.com"">mr...du.n.cans.m.it.h00.1@gmail.com</a>
<a href=""mailto:m.r..d.un.ca.n.s.mit.h.0.0.1@gmail.com"">m.r..d.un.ca.n.s.mit.h.0.0.1@gmail.com</a>
<a href=""mailto:m.r.d.u.n.cans.mi.t.h.0.01@gmail.com"">m.r.d.u.n.cans.mi.t.h.0.01@gmail.com</a>
<a href=""mailto:m.r...d.un.c.a.nsmit.h001@gmail.com"">m.r...d.un.c.a.nsmit.h001@gmail.com</a>
<a href=""mailto:m.r..dunc.a.ns.m.it.h.0.0.1@gmail.com"">m.r..dunc.a.ns.m.it.h.0.0.1@gmail.com</a>
<a href=""mailto:m.r..du.n.c.a.nsm.i.t.h0.0.1@gmail.com"">m.r..du.n.c.a.nsm.i.t.h0.0.1@gmail.com</a>
<a href=""mailto:m.r...d.u.nc.a.n.s.mi.t.h00.1@gmail.com"">m.r...d.u.nc.a.n.s.mi.t.h00.1@gmail.com</a>
<a href=""mailto:m.r..d.u.n.c.ansm.ith.0.0.1@gmail.com"">m.r..d.u.n.c.ansm.ith.0.0.1@gmail.com</a>
<a href=""mailto:mr..d.u.nca.ns.m.ith.0.0.1@gmail.com"">mr..d.u.nca.ns.m.ith.0.0.1@gmail.com</a>
<a href=""mailto:mr..dun.can.s.m.i.th.0.0.1@gmail.com"">mr..dun.can.s.m.i.th.0.0.1@gmail.com</a>
<a href=""mailto:m.r...dun.c.an.s.mi.t.h001@gmail.com"">m.r...dun.c.an.s.mi.t.h001@gmail.com</a>
<a href=""mailto:m.r.d.u.nc.a.n.smi.th0.01@gmail.com"">m.r.d.u.nc.a.n.smi.th0.01@gmail.com</a>
<a href=""mailto:m.r..dunc.a.n.sm.i.t.h.0.0.1@gmail.com"">m.r..dunc.a.n.sm.i.t.h.0.0.1@gmail.com</a>
<a href=""mailto:mr.d.u.nc.ansmit.h.00.1@gmail.com"">mr.d.u.nc.ansmit.h.00.1@gmail.com</a>
<a href=""mailto:m.r..dun.c.ans.mi.th.00.1@gmail.com"">m.r..dun.c.ans.mi.th.00.1@gmail.com</a>
<a href=""mailto:m.r.d.u.nc.ansmi.th0.01@gmail.com"">m.r.d.u.nc.ansmi.th0.01@gmail.com</a>
<a href=""mailto:mr..dunc.ans.mi.t.h.0.01@gmail.com"">mr..dunc.ans.mi.t.h.0.01@gmail.com</a>
<a href=""mailto:mr..du.n.c.an.smi.t.h001@gmail.com"">mr..du.n.c.an.smi.t.h001@gmail.com</a>
<a href=""mailto:m.r..d.un.c.ansm.it.h.0.01@gmail.com"">m.r..d.un.c.ansm.it.h.0.01@gmail.com</a>
<a href=""mailto:mr..d.u.n.can.s.m.ith.00.1@gmail.com"">mr..d.u.n.can.s.m.ith.00.1@gmail.com</a>
<a href=""mailto:m.r..duncans.mi.th0.01@gmail.com"">m.r..duncans.mi.th0.01@gmail.com</a>
<a href=""mailto:mr..du.n.c.an.s.mit.h.00.1@gmail.com"">mr..du.n.c.an.s.mit.h.00.1@gmail.com</a>
<a href=""mailto:mr..d.un.c.ans.mith00.1@gmail.com"">mr..d.un.c.ans.mith00.1@gmail.com</a>
<a href=""mailto:m.r...d.unca.n.smith.0.01@gmail.com"">m.r...d.unca.n.smith.0.01@gmail.com</a>
<a href=""mailto:m.r.d.unc.a.ns.mith.00.1@gmail.com"">m.r.d.unc.a.ns.mith.00.1@gmail.com</a>
<a href=""mailto:m.r..dun.c.an.smith0.01@gmail.com"">m.r..dun.c.an.smith0.01@gmail.com</a>
<a href=""mailto:m.r..du.n.c.a.nsm.i.t.h00.1@gmail.com"">m.r..du.n.c.a.nsm.i.t.h00.1@gmail.com</a>
<a href=""mailto:mr.d.un.ca.n.s.m.ith001@gmail.com"">mr.d.un.ca.n.s.m.ith001@gmail.com</a>
<a href=""mailto:mr..d.u.nca.nsmi.t.h0.0.1@gmail.com"">mr..d.u.nca.nsmi.t.h0.0.1@gmail.com</a>
<a href=""mailto:m.r.d.un.c.a.ns.mith.00.1@gmail.com"">m.r.d.un.c.a.ns.mith.00.1@gmail.com</a>
<a href=""mailto:m.r..duncans.m.i.t.h.0.0.1@gmail.com"">m.r..duncans.m.i.t.h.0.0.1@gmail.com</a>
<a href=""mailto:m.r...du.n.c.a.n.s.mith.0.01@gmail.com"">m.r...du.n.c.a.n.s.mith.0.01@gmail.com</a>
<a href=""mailto:mr..d.unca.ns.mi.th00.1@gmail.com"">mr..d.unca.ns.mi.th00.1@gmail.com</a>
<a href=""mailto:mr...dun.c.a.n.s.mith0.01@gmail.com"">mr...dun.c.a.n.s.mith0.01@gmail.com</a>
<a href=""mailto:mr..du.nca.ns.m.it.h.0.01@gmail.com"">mr..du.nca.ns.m.it.h.0.01@gmail.com</a>
<a href=""mailto:mr...d.un.c.a.ns.mi.th0.01@gmail.com"">mr...d.un.c.a.ns.mi.th0.01@gmail.com</a>
<a href=""mailto:m.r...d.un.c.an.sm.i.t.h0.0.1@gmail.com"">m.r...d.un.c.an.sm.i.t.h0.0.1@gmail.com</a>
<a href=""mailto:mr.d.u.nca.n.sm.it.h0.01@gmail.com"">mr.d.u.nca.n.sm.it.h0.01@gmail.com</a>
<a href=""mailto:m.r..d.uncan.smit.h0.0.1@gmail.com"">m.r..d.uncan.smit.h0.0.1@gmail.com</a>
<a href=""mailto:m.r.du.n.ca.ns.mi.th.00.1@gmail.com"">m.r.du.n.ca.ns.mi.th.00.1@gmail.com</a>
<a href=""mailto:mr.du.n.cansmi.th0.0.1@gmail.com"">mr.du.n.cansmi.th0.0.1@gmail.com</a>
<a href=""mailto:m.r..d.u.n.ca.nsmith001@gmail.com"">m.r..d.u.n.ca.nsmith001@gmail.com</a>
<a href=""mailto:m.r..d.u.nc.ansmi.t.h00.1@gmail.com"">m.r..d.u.nc.ansmi.t.h00.1@gmail.com</a>
<a href=""mailto:mr.du.n.ca.ns.mi.t.h.0.01@gmail.com"">mr.du.n.ca.ns.mi.t.h.0.01@gmail.com</a>
<a href=""mailto:mr..d.u.n.ca.nsm.i.th001@gmail.com"">mr..d.u.n.ca.nsm.i.th001@gmail.com</a>
<a href=""mailto:m.r..dunca.nsm.i.th.00.1@gmail.com"">m.r..dunca.nsm.i.th.00.1@gmail.com</a>
<a href=""mailto:m.r..du.n.ca.ns.mit.h.0.01@gmail.com"">m.r..du.n.ca.ns.mit.h.0.01@gmail.com</a>
<a href=""mailto:m.r.dun.cans.m.it.h.001@gmail.com"">m.r.dun.cans.m.it.h.001@gmail.com</a>
<a href=""mailto:m.r..du.n.c.a.n.smith.001@gmail.com"">m.r..du.n.c.a.n.smith.001@gmail.com</a>
<a href=""mailto:mr.dun.ca.n.smit.h00.1@gmail.com"">mr.dun.ca.n.smit.h00.1@gmail.com</a>
<a href=""mailto:m.r..d.uncan.sm.i.t.h.0.01@gmail.com"">m.r..d.uncan.sm.i.t.h.0.01@gmail.com</a>
<a href=""mailto:mr..dunc.an.sm.i.th.0.01@gmail.com"">mr..dunc.an.sm.i.th.0.01@gmail.com</a>
<a href=""mailto:m.r..d.u.nc.a.n.sm.ith00.1@gmail.com"">m.r..d.u.nc.a.n.sm.ith00.1@gmail.com</a>
<a href=""mailto:mr..d.u.nc.a.ns.mit.h.00.1@gmail.com"">mr..d.u.nc.a.ns.mit.h.00.1@gmail.com</a>
<a href=""mailto:mr.d.u.nca.n.smi.t.h.00.1@gmail.com"">mr.d.u.nca.n.smi.t.h.00.1@gmail.com</a>
<a href=""mailto:m.r...d.u.nc.a.n.sm.i.t.h.00.1@gmail.com"">m.r...d.u.nc.a.n.sm.i.t.h.00.1@gmail.com</a>
<a href=""mailto:m.r...du.ncan.sm.ith0.01@gmail.com"">m.r...du.ncan.sm.ith0.01@gmail.com</a>
<a href=""mailto:mr...d.un.ca.n.smi.th.0.01@gmail.com"">mr...d.un.ca.n.smi.th.0.01@gmail.com</a>
<a href=""mailto:m.r..du.n.ca.n.s.m.i.t.h.001@gmail.com"">m.r..du.n.ca.n.s.m.i.t.h.001@gmail.com</a>
<a href=""mailto:m.r.d.un.c.a.n.sm.i.th001@gmail.com"">m.r.d.un.c.a.n.sm.i.th001@gmail.com</a>
<a href=""mailto:mr...d.u.nc.a.nsm.i.t.h0.0.1@gmail.com"">mr...d.u.nc.a.nsm.i.t.h0.0.1@gmail.com</a>
<a href=""mailto:m.r...dun.c.an.sm.ith001@gmail.com"">m.r...dun.c.an.sm.ith001@gmail.com</a>
<a href=""mailto:mr..du.n.can.smi.t.h.001@gmail.com"">mr..du.n.can.smi.t.h.001@gmail.com</a>
<a href=""mailto:mr..d.u.nc.a.ns.m.ith.0.01@gmail.com"">mr..d.u.nc.a.ns.m.ith.0.01@gmail.com</a>
<a href=""mailto:mr..d.unca.n.s.mith001@gmail.com"">mr..d.unca.n.s.mith001@gmail.com</a>
<a href=""mailto:mr...dun.ca.nsmi.t.h.001@gmail.com"">mr...dun.ca.nsmi.t.h.001@gmail.com</a>
<a href=""mailto:mr..d.u.n.c.a.n.s.m.it.h0.0.1@gmail.com"">mr..d.u.n.c.a.n.s.m.it.h0.0.1@gmail.com</a>
<a href=""mailto:mr..duncansm.i.t.h.00.1@gmail.com"">mr..duncansm.i.t.h.00.1@gmail.com</a>
<a href=""mailto:m.r..dunc.a.nsmit.h0.01@gmail.com"">m.r..dunc.a.nsmit.h0.01@gmail.com</a>
<a href=""mailto:mr...d.u.n.cans.mith00.1@gmail.com"">mr...d.u.n.cans.mith00.1@gmail.com</a>
<a href=""mailto:m.r..du.nc.a.n.s.mith001@gmail.com"">m.r..du.nc.a.n.s.mith001@gmail.com</a>
<a href=""mailto:m.r..d.un.c.a.n.s.m.i.t.h001@gmail.com"">m.r..d.un.c.a.n.s.m.i.t.h001@gmail.com</a>
<a href=""mailto:mr..d.u.n.ca.n.smith00.1@gmail.com"">mr..d.u.n.ca.n.smith00.1@gmail.com</a>
<a href=""mailto:mr...duncan.s.m.i.th001@gmail.com"">mr...duncan.s.m.i.th001@gmail.com</a>
<a href=""mailto:m.r..du.ncan.s.mit.h00.1@gmail.com"">m.r..du.ncan.s.mit.h00.1@gmail.com</a>
<a href=""mailto:m.r..dun.c.a.n.s.mi.th.001@gmail.com"">m.r..dun.c.a.n.s.mi.th.001@gmail.com</a>
<a href=""mailto:m.r...duncan.sm.it.h.0.01@gmail.com"">m.r...duncan.sm.it.h.0.01@gmail.com</a>
<a href=""mailto:m.r.d.u.nc.a.n.s.mi.th001@gmail.com"">m.r.d.u.nc.a.n.s.mi.th001@gmail.com</a>
<a href=""mailto:m.r..duncansmi.th.0.0.1@gmail.com"">m.r..duncansmi.th.0.0.1@gmail.com</a>
<a href=""mailto:mr...d.u.nca.ns.m.i.th0.01@gmail.com"">mr...d.u.nca.ns.m.i.th0.01@gmail.com</a>
<a href=""mailto:mr..dunca.n.s.m.ith0.0.1@gmail.com"">mr..dunca.n.s.m.ith0.0.1@gmail.com</a>
<a href=""mailto:m.r..du.n.c.a.nsmi.th0.0.1@gmail.com"">m.r..du.n.c.a.nsmi.th0.0.1@gmail.com</a>
<a href=""mailto:m.r...d.u.n.c.a.n.sm.it.h00.1@gmail.com"">m.r...d.u.n.c.a.n.sm.it.h00.1@gmail.com</a>
<a href=""mailto:m.r..dunc.ansmith.00.1@gmail.com"">m.r..dunc.ansmith.00.1@gmail.com</a>
<a href=""mailto:mr..d.un.ca.n.s.mith0.0.1@gmail.com"">mr..d.un.ca.n.s.mith0.0.1@gmail.com</a>
<a href=""mailto:mr.dunc.a.nsm.it.h0.0.1@gmail.com"">mr.dunc.a.nsm.it.h0.0.1@gmail.com</a>
<a href=""mailto:m.r..dunc.an.s.mit.h0.01@gmail.com"">m.r..dunc.an.s.mit.h0.01@gmail.com</a>
<a href=""mailto:mr...d.u.n.ca.nsm.i.th.00.1@gmail.com"">mr...d.u.n.ca.nsm.i.th.00.1@gmail.com</a>
<a href=""mailto:mr..du.n.c.ans.m.it.h.0.0.1@gmail.com"">mr..du.n.c.ans.m.it.h.0.0.1@gmail.com</a>
<a href=""mailto:m.r..d.uncans.m.i.t.h.001@gmail.com"">m.r..d.uncans.m.i.t.h.001@gmail.com</a>
<a href=""mailto:m.r.d.unca.nsm.i.t.h.0.0.1@gmail.com"">m.r.d.unca.nsm.i.t.h.0.0.1@gmail.com</a>
<a href=""mailto:m.r..du.n.c.an.s.m.it.h00.1@gmail.com"">m.r..du.n.c.an.s.m.it.h00.1@gmail.com</a>
<a href=""mailto:m.r...d.u.n.c.a.ns.mi.t.h00.1@gmail.com"">m.r...d.u.n.c.a.ns.mi.t.h00.1@gmail.com</a>
<a href=""mailto:mr..d.unca.n.sm.i.t.h.0.01@gmail.com"">mr..d.unca.n.sm.i.t.h.0.01@gmail.com</a>
<a href=""mailto:m.r...d.u.n.ca.n.sm.i.t.h.0.0.1@gmail.com"">m.r...d.u.n.ca.n.sm.i.t.h.0.0.1@gmail.com</a>
<a href=""mailto:mr...dunc.an.s.m.i.th.001@gmail.com"">mr...dunc.an.s.m.i.th.001@gmail.com</a>
<a href=""mailto:m.r..du.n.can.smit.h0.01@gmail.com"">m.r..du.n.can.smit.h0.01@gmail.com</a>
<a href=""mailto:m.r...dun.cans.m.it.h0.0.1@gmail.com"">m.r...dun.cans.m.it.h0.0.1@gmail.com</a>
<a href=""mailto:mr...d.u.ncan.s.m.i.th0.0.1@gmail.com"">mr...d.u.ncan.s.m.i.th0.0.1@gmail.com</a>
<a href=""mailto:mr...dun.c.ans.m.it.h.0.0.1@gmail.com"">mr...dun.c.ans.m.it.h.0.0.1@gmail.com</a>
<a href=""mailto:m.r..d.u.nc.a.n.sm.i.t.h001@gmail.com"">m.r..d.u.nc.a.n.sm.i.t.h001@gmail.com</a>
<a href=""mailto:mr..d.u.nca.n.smith.001@gmail.com"">mr..d.u.nca.n.smith.001@gmail.com</a>
<a href=""mailto:mr...d.u.n.c.an.s.mi.t.h001@gmail.com"">mr...d.u.n.c.an.s.mi.t.h001@gmail.com</a>
<a href=""mailto:mr..d.un.ca.n.s.mit.h.001@gmail.com"">mr..d.un.ca.n.s.mit.h.001@gmail.com</a>
<a href=""mailto:m.r...dun.can.smi.t.h.0.01@gmail.com"">m.r...dun.can.smi.t.h.0.01@gmail.com</a>
<a href=""mailto:mr...d.un.cansmi.th.0.0.1@gmail.com"">mr...d.un.cansmi.th.0.0.1@gmail.com</a>
<a href=""mailto:m.r..dunc.ans.m.it.h0.0.1@gmail.com"">m.r..dunc.ans.m.it.h0.0.1@gmail.com</a>
<a href=""mailto:m.r...d.u.nc.an.sm.it.h.00.1@gmail.com"">m.r...d.u.nc.an.sm.it.h.00.1@gmail.com</a>
<a href=""mailto:mr..du.n.c.a.ns.m.i.t.h0.01@gmail.com"">mr..du.n.c.a.ns.m.i.t.h0.01@gmail.com</a>
<a href=""mailto:m.r...d.unc.a.n.smith001@gmail.com"">m.r...d.unc.a.n.smith001@gmail.com</a>
<a href=""mailto:mr..du.nc.a.n.s.m.it.h00.1@gmail.com"">mr..du.nc.a.n.s.m.it.h00.1@gmail.com</a>
<a href=""mailto:m.r...dunca.n.sm.ith0.01@gmail.com"">m.r...dunca.n.sm.ith0.01@gmail.com</a>
<a href=""mailto:mr..d.u.n.c.ansmi.t.h0.01@gmail.com"">mr..d.u.n.c.ansmi.t.h0.01@gmail.com</a>
<a href=""mailto:mr..d.unc.ansm.ith.0.0.1@gmail.com"">mr..d.unc.ansm.ith.0.0.1@gmail.com</a>
<a href=""mailto:m.r.d.unca.ns.mith00.1@gmail.com"">m.r.d.unca.ns.mith00.1@gmail.com</a>
<a href=""mailto:m.r..d.unc.a.n.s.m.i.th.00.1@gmail.com"">m.r..d.unc.a.n.s.m.i.th.00.1@gmail.com</a>
<a href=""mailto:m.r...d.u.n.c.ansmit.h.0.0.1@gmail.com"">m.r...d.u.n.c.ansmit.h.0.0.1@gmail.com</a>
<a href=""mailto:m.r..d.unca.n.s.mith00.1@gmail.com"">m.r..d.unca.n.s.mith00.1@gmail.com</a>
<a href=""mailto:m.r...d.u.nca.nsmit.h.001@gmail.com"">m.r...d.u.nca.nsmit.h.001@gmail.com</a>
<a href=""mailto:mr..du.nca.ns.mith.0.01@gmail.com"">mr..du.nca.ns.mith.0.01@gmail.com</a>
<a href=""mailto:m.r...dunc.an.s.m.i.th001@gmail.com"">m.r...dunc.an.s.m.i.th001@gmail.com</a>
<a href=""mailto:mr...du.n.cansmi.t.h00.1@gmail.com"">mr...du.n.cansmi.t.h00.1@gmail.com</a>
<a href=""mailto:m.r.d.u.nc.an.s.m.i.t.h.001@gmail.com"">m.r.d.u.nc.an.s.m.i.t.h.001@gmail.com</a>
<a href=""mailto:mr.d.unca.ns.mith.001@gmail.com"">mr.d.unca.ns.mith.001@gmail.com</a>
<a href=""mailto:m.r..dunca.nsmit.h0.0.1@gmail.com"">m.r..dunca.nsmit.h0.0.1@gmail.com</a>
<a href=""mailto:mr..dun.ca.n.s.m.i.t.h0.0.1@gmail.com"">mr..dun.ca.n.s.m.i.t.h0.0.1@gmail.com</a>
<a href=""mailto:mr..dunc.a.nsmi.th0.01@gmail.com"">mr..dunc.a.nsmi.th0.01@gmail.com</a>
<a href=""mailto:mr..dun.c.ans.m.it.h.00.1@gmail.com"">mr..dun.c.ans.m.it.h.00.1@gmail.com</a>
<a href=""mailto:m.r..du.nc.a.n.s.mi.t.h.00.1@gmail.com"">m.r..du.nc.a.n.s.mi.t.h.00.1@gmail.com</a>
<a href=""mailto:mr...dunc.ansmi.th001@gmail.com"">mr...dunc.ansmi.th001@gmail.com</a>
<a href=""mailto:mr..d.un.c.a.n.s.m.ith001@gmail.com"">mr..d.un.c.a.n.s.m.ith001@gmail.com</a>
<a href=""mailto:mr..dunc.a.n.s.mi.th.001@gmail.com"">mr..dunc.a.n.s.mi.th.001@gmail.com</a>
<a href=""mailto:mr.d.un.ca.n.s.mit.h.0.01@gmail.com"">mr.d.un.ca.n.s.mit.h.0.01@gmail.com</a>
<a href=""mailto:m.r..d.un.c.a.n.smi.t.h00.1@gmail.com"">m.r..d.un.c.a.n.smi.t.h00.1@gmail.com</a>
<a href=""mailto:mr..d.un.c.ansmith.001@gmail.com"">mr..d.un.c.ansmith.001@gmail.com</a>
<a href=""mailto:mr..d.un.c.a.nsm.i.t.h00.1@gmail.com"">mr..d.un.c.a.nsm.i.t.h00.1@gmail.com</a>
<a href=""mailto:m.r...d.u.n.can.sm.i.th0.0.1@gmail.com"">m.r...d.u.n.can.sm.i.th0.0.1@gmail.com</a>
<a href=""mailto:m.r..d.u.n.ca.n.s.m.ith.0.01@gmail.com"">m.r..d.u.n.ca.n.s.m.ith.0.01@gmail.com</a>
<a href=""mailto:m.r..d.u.nc.a.nsmit.h.0.0.1@gmail.com"">m.r..d.u.nc.a.nsmit.h.0.0.1@gmail.com</a>
<a href=""mailto:m.r..d.un.c.an.s.mit.h.0.01@gmail.com"">m.r..d.un.c.an.s.mit.h.0.01@gmail.com</a>
<a href=""mailto:mr...d.u.n.c.a.n.s.mith.0.01@gmail.com"">mr...d.u.n.c.a.n.s.mith.0.01@gmail.com</a>
<a href=""mailto:mr.d.un.c.an.s.mi.th.001@gmail.com"">mr.d.un.c.an.s.mi.th.001@gmail.com</a>
<a href=""mailto:mr..du.nc.a.nsmi.t.h001@gmail.com"">mr..du.nc.a.nsmi.t.h001@gmail.com</a>
<a href=""mailto:mr..du.n.ca.n.s.mith0.0.1@gmail.com"">mr..du.n.ca.n.s.mith0.0.1@gmail.com</a>
<a href=""mailto:m.r..d.unca.n.smith00.1@gmail.com"">m.r..d.unca.n.smith00.1@gmail.com</a>
<a href=""mailto:mr...d.u.ncansmith.00.1@gmail.com"">mr...d.u.ncansmith.00.1@gmail.com</a>
<a href=""mailto:m.r.d.unca.n.s.mith.0.0.1@gmail.com"">m.r.d.unca.n.s.mith.0.0.1@gmail.com</a>
<a href=""mailto:mr..du.n.c.a.n.s.m.i.th001@gmail.com"">mr..du.n.c.a.n.s.m.i.th001@gmail.com</a>
<a href=""mailto:mr..d.un.c.a.n.s.mith.001@gmail.com"">mr..d.un.c.a.n.s.mith.001@gmail.com</a>
<a href=""mailto:m.r...d.unc.a.nsmi.th.001@gmail.com"">m.r...d.unc.a.nsmi.th.001@gmail.com</a>
<a href=""mailto:m.r...d.u.nca.ns.m.i.t.h.0.0.1@gmail.com"">m.r...d.u.nca.ns.m.i.t.h.0.0.1@gmail.com</a>
<a href=""mailto:mr...dunc.a.nsmith001@gmail.com"">mr...dunc.a.nsmith001@gmail.com</a>
<a href=""mailto:mr...dun.c.a.n.sm.i.t.h.00.1@gmail.com"">mr...dun.c.a.n.sm.i.t.h.00.1@gmail.com</a>
<a href=""mailto:mr.du.ncan.smi.t.h00.1@gmail.com"">mr.du.ncan.smi.t.h00.1@gmail.com</a>
<a href=""mailto:m.r...d.unca.ns.mi.th.00.1@gmail.com"">m.r...d.unca.ns.mi.th.00.1@gmail.com</a>
<a href=""mailto:mr.du.ncans.m.i.th0.0.1@gmail.com"">mr.du.ncans.m.i.th0.0.1@gmail.com</a>
<a href=""mailto:mr..d.unc.a.ns.m.it.h.001@gmail.com"">mr..d.unc.a.ns.m.it.h.001@gmail.com</a>
<a href=""mailto:m.r.d.unca.ns.m.i.th00.1@gmail.com"">m.r.d.unca.ns.m.i.th00.1@gmail.com</a>
<a href=""mailto:mr..d.uncans.m.it.h.001@gmail.com"">mr..d.uncans.m.it.h.001@gmail.com</a>
<a href=""mailto:mr.d.u.ncan.sm.ith001@gmail.com"">mr.d.u.ncan.sm.ith001@gmail.com</a>
<a href=""mailto:mr..du.nca.n.s.mith.001@gmail.com"">mr..du.nca.n.s.mith.001@gmail.com</a>
<a href=""mailto:m.r.du.n.cansmith.00.1@gmail.com"">m.r.du.n.cansmith.00.1@gmail.com</a>
<a href=""mailto:mr..d.unc.a.ns.mi.t.h0.0.1@gmail.com"">mr..d.unc.a.ns.mi.t.h0.0.1@gmail.com</a>
<a href=""mailto:m.r..d.unca.n.sm.ith.001@gmail.com"">m.r..d.unca.n.sm.ith.001@gmail.com</a>
<a href=""mailto:mr..du.nc.ansm.ith0.0.1@gmail.com"">mr..du.nc.ansm.ith0.0.1@gmail.com</a>
<a href=""mailto:m.r...dunca.n.s.m.i.th00.1@gmail.com"">m.r...dunca.n.s.m.i.th00.1@gmail.com</a>
<a href=""mailto:mr...d.uncan.s.m.i.t.h001@gmail.com"">mr...d.uncan.s.m.i.t.h001@gmail.com</a>
<a href=""mailto:mr..dun.cans.m.i.th0.01@gmail.com"">mr..dun.cans.m.i.th0.01@gmail.com</a>
<a href=""mailto:m.r..d.u.n.c.ansm.i.t.h0.0.1@gmail.com"">m.r..d.u.n.c.ansm.i.t.h0.0.1@gmail.com</a>
<a href=""mailto:mr.d.u.n.ca.n.sm.i.th.001@gmail.com"">mr.d.u.n.ca.n.sm.i.th.001@gmail.com</a>
<a href=""mailto:mr...d.unc.ans.mith0.01@gmail.com"">mr...d.unc.ans.mith0.01@gmail.com</a>
<a href=""mailto:m.r..du.n.cans.m.i.t.h00.1@gmail.com"">m.r..du.n.cans.m.i.t.h00.1@gmail.com</a>
<a href=""mailto:mr.d.uncans.mi.t.h.0.01@gmail.com"">mr.d.uncans.mi.t.h.0.01@gmail.com</a>
<a href=""mailto:mr..d.u.n.ca.n.smi.t.h00.1@gmail.com"">mr..d.u.n.ca.n.smi.t.h00.1@gmail.com</a>
<a href=""mailto:m.r..du.n.c.a.ns.m.ith.0.01@gmail.com"">m.r..du.n.c.a.ns.m.ith.0.01@gmail.com</a>
<a href=""mailto:mr..d.un.c.a.nsmith0.0.1@gmail.com"">mr..d.un.c.a.nsmith0.0.1@gmail.com</a>
<a href=""mailto:m.r...du.n.ca.nsmith.00.1@gmail.com"">m.r...du.n.ca.nsmith.00.1@gmail.com</a>
<a href=""mailto:mr..d.un.c.ans.m.i.th0.0.1@gmail.com"">mr..d.un.c.ans.m.i.th0.0.1@gmail.com</a>
<a href=""mailto:mr..d.unca.nsm.i.t.h.0.01@gmail.com"">mr..d.unca.nsm.i.t.h.0.01@gmail.com</a>
<a href=""mailto:mr...d.u.nc.a.ns.mi.th.0.01@gmail.com"">mr...d.u.nc.a.ns.mi.th.0.01@gmail.com</a>
<a href=""mailto:mr..d.un.ca.n.s.m.ith001@gmail.com"">mr..d.un.ca.n.s.m.ith001@gmail.com</a>
<a href=""mailto:mr...d.u.n.c.an.s.mit.h001@gmail.com"">mr...d.u.n.c.an.s.mit.h001@gmail.com</a>
<a href=""mailto:m.r...d.unc.a.n.sm.i.th00.1@gmail.com"">m.r...d.unc.a.n.sm.i.th00.1@gmail.com</a>
<a href=""mailto:m.r..d.u.ncansm.ith0.0.1@gmail.com"">m.r..d.u.ncansm.ith0.0.1@gmail.com</a>
<a href=""mailto:mr..dun.c.a.n.s.mith.001@gmail.com"">mr..dun.c.a.n.s.mith.001@gmail.com</a>
<a href=""mailto:mr..d.unc.a.n.s.mi.th001@gmail.com"">mr..d.unc.a.n.s.mi.th001@gmail.com</a>
<a href=""mailto:m.r...d.uncans.m.i.th.0.01@gmail.com"">m.r...d.uncans.m.i.th.0.01@gmail.com</a>
<a href=""mailto:mr...du.n.can.s.mith0.0.1@gmail.com"">mr...du.n.can.s.mith0.0.1@gmail.com</a>
<a href=""mailto:mr..du.ncans.m.i.th.0.0.1@gmail.com"">mr..du.ncans.m.i.th.0.0.1@gmail.com</a>
<a href=""mailto:mr.dun.c.an.sm.ith0.01@gmail.com"">mr.dun.c.an.sm.ith0.01@gmail.com</a>
<a href=""mailto:mr.du.n.cans.mi.th001@gmail.com"">mr.du.n.cans.mi.th001@gmail.com</a>
<a href=""mailto:m.r..d.u.nca.n.s.mith00.1@gmail.com"">m.r..d.u.nca.n.s.mith00.1@gmail.com</a>
<a href=""mailto:mr.du.nc.a.ns.m.ith0.0.1@gmail.com"">mr.du.nc.a.ns.m.ith0.0.1@gmail.com</a>
<a href=""mailto:citibanklondon200@gmail.com"">citibanklondon200@gmail.com</a>
<a href=""mailto:ci.ti.b.an.k.lo.ndon2.0.0@gmail.com"">ci.ti.b.an.k.lo.ndon2.0.0@gmail.com</a>
<a href=""mailto:cit.iba.n.k.london.2.0.0@gmail.com"">cit.iba.n.k.london.2.0.0@gmail.com</a>
<a href=""mailto:c.it.ib.a.n.k.lon.d.on200@gmail.com"">c.it.ib.a.n.k.lon.d.on200@gmail.com</a>
<a href=""mailto:c.i.tib.ank.l.o.nd.o.n.200@gmail.com"">c.i.tib.ank.l.o.nd.o.n.200@gmail.com</a>
<a href=""mailto:c.it.ib.a.nk.l.on.d.o.n200@gmail.com"">c.it.ib.a.nk.l.on.d.o.n200@gmail.com</a>
<a href=""mailto:ci.t.i.b.a.nklo.n.don2.00@gmail.com"">ci.t.i.b.a.nklo.n.don2.00@gmail.com</a>
<a href=""mailto:ci.ti.ba.n.kl.on.d.on.20.0@gmail.com"">ci.ti.ba.n.kl.on.d.on.20.0@gmail.com</a>
<a href=""mailto:ci.tiban.k.l.o.nd.on.2.0.0@gmail.com"">ci.tiban.k.l.o.nd.on.2.0.0@gmail.com</a>
<a href=""mailto:ci.ti.ban.k.lon.do.n.20.0@gmail.com"">ci.ti.ban.k.lon.do.n.20.0@gmail.com</a>
<a href=""mailto:ci.t.i.b.an.klo.nd.on20.0@gmail.com"">ci.t.i.b.an.klo.nd.on20.0@gmail.com</a>
<a href=""mailto:c.it.i.bankl.on.d.on.2.0.0@gmail.com"">c.it.i.bankl.on.d.on.2.0.0@gmail.com</a>
<a href=""mailto:ci.t.i.b.anklon.d.on200@gmail.com"">ci.t.i.b.anklon.d.on200@gmail.com</a>
<a href=""mailto:c.iti.b.an.k.lon.don2.0.0@gmail.com"">c.iti.b.an.k.lon.don2.0.0@gmail.com</a>
<a href=""mailto:cit.iba.n.kl.o.ndon.200@gmail.com"">cit.iba.n.kl.o.ndon.200@gmail.com</a>
<a href=""mailto:c.i.tib.a.n.k.london.200@gmail.com"">c.i.tib.a.n.k.london.200@gmail.com</a>
<a href=""mailto:ci.t.iba.n.k.lon.d.on20.0@gmail.com"">ci.t.iba.n.k.lon.d.on20.0@gmail.com</a>
<a href=""mailto:ci.tib.ankl.o.n.d.on.200@gmail.com"">ci.tib.ankl.o.n.d.on.200@gmail.com</a>
<a href=""mailto:ci.t.i.b.a.nk.lo.ndon20.0@gmail.com"">ci.t.i.b.a.nk.lo.ndon20.0@gmail.com</a>
<a href=""mailto:c.i.t.iba.n.k.l.o.n.d.o.n.20.0@gmail.com"">c.i.t.iba.n.k.l.o.n.d.o.n.20.0@gmail.com</a>
<a href=""mailto:c.itibankl.o.nd.on200@gmail.com"">c.itibankl.o.nd.on200@gmail.com</a>
<a href=""mailto:cit.ib.ank.lo.nd.on.2.00@gmail.com"">cit.ib.ank.lo.nd.on.2.00@gmail.com</a>
<a href=""mailto:ci.t.iba.n.k.l.o.n.don.2.00@gmail.com"">ci.t.iba.n.k.l.o.n.don.2.00@gmail.com</a>
<a href=""mailto:citi.b.an.k.lo.nd.on.2.0.0@gmail.com"">citi.b.an.k.lo.nd.on.2.0.0@gmail.com</a>
<a href=""mailto:c.i.tib.ank.l.ondon.200@gmail.com"">c.i.tib.ank.l.ondon.200@gmail.com</a>
<a href=""mailto:c.iti.ban.k.l.on.d.o.n200@gmail.com"">c.iti.ban.k.l.on.d.o.n200@gmail.com</a>
<a href=""mailto:cit.iba.n.kl.o.n.d.o.n200@gmail.com"">cit.iba.n.kl.o.n.d.o.n200@gmail.com</a>
<a href=""mailto:citiba.n.kl.o.n.don2.0.0@gmail.com"">citiba.n.kl.o.n.don2.0.0@gmail.com</a>
<a href=""mailto:cit.i.b.a.n.kl.on.d.o.n200@gmail.com"">cit.i.b.a.n.kl.on.d.o.n200@gmail.com</a>
<a href=""mailto:c.i.t.ib.ank.lo.n.d.on2.00@gmail.com"">c.i.t.ib.ank.lo.n.d.on2.00@gmail.com</a>
<a href=""mailto:c.i.tibank.lon.do.n2.00@gmail.com"">c.i.tibank.lon.do.n2.00@gmail.com</a>
<a href=""mailto:ci.t.i.banklo.n.do.n.200@gmail.com"">ci.t.i.banklo.n.do.n.200@gmail.com</a>
<a href=""mailto:ci.tib.a.nkl.on.do.n2.0.0@gmail.com"">ci.tib.a.nkl.on.do.n2.0.0@gmail.com</a>
<a href=""mailto:c.i.ti.b.anklondo.n2.0.0@gmail.com"">c.i.ti.b.anklondo.n2.0.0@gmail.com</a>
<a href=""mailto:ci.ti.ban.k.lond.on200@gmail.com"">ci.ti.ban.k.lond.on200@gmail.com</a>
<a href=""mailto:c.it.i.bank.l.ondo.n200@gmail.com"">c.it.i.bank.l.ondo.n200@gmail.com</a>
<a href=""mailto:c.it.iba.n.k.l.ond.o.n20.0@gmail.com"">c.it.iba.n.k.l.ond.o.n20.0@gmail.com</a>
<a href=""mailto:c.it.iban.k.l.ond.on200@gmail.com"">c.it.iban.k.l.ond.on200@gmail.com</a>
<a href=""mailto:ci.ti.ba.n.klo.n.d.on200@gmail.com"">ci.ti.ba.n.klo.n.d.on200@gmail.com</a>
<a href=""mailto:c.iti.bank.l.o.nd.o.n.2.00@gmail.com"">c.iti.bank.l.o.nd.o.n.2.00@gmail.com</a>
<a href=""mailto:citiba.n.k.l.ond.on2.00@gmail.com"">citiba.n.k.l.ond.on2.00@gmail.com</a>
<a href=""mailto:c.it.ib.anklo.n.d.o.n.2.00@gmail.com"">c.it.ib.anklo.n.d.o.n.2.00@gmail.com</a>
<a href=""mailto:ci.t.iban.k.l.o.nd.on20.0@gmail.com"">ci.t.iban.k.l.o.nd.on20.0@gmail.com</a>
<a href=""mailto:c.i.t.ib.a.nk.londo.n.20.0@gmail.com"">c.i.t.ib.a.nk.londo.n.20.0@gmail.com</a>
<a href=""mailto:cit.i.b.anklo.nd.o.n20.0@gmail.com"">cit.i.b.anklo.nd.o.n20.0@gmail.com</a>
<a href=""mailto:citiba.n.kl.o.n.d.on200@gmail.com"">citiba.n.kl.o.n.d.on200@gmail.com</a>
<a href=""mailto:ci.ti.b.anklo.n.don20.0@gmail.com"">ci.ti.b.anklo.n.don20.0@gmail.com</a>
<a href=""mailto:c.itib.a.nk.lon.do.n2.00@gmail.com"">c.itib.a.nk.lon.do.n2.00@gmail.com</a>
<a href=""mailto:ci.t.ib.ankl.ond.o.n.20.0@gmail.com"">ci.t.ib.ankl.ond.o.n.20.0@gmail.com</a>
<a href=""mailto:ci.tib.a.n.klo.nd.on200@gmail.com"">ci.tib.a.n.klo.nd.on200@gmail.com</a>
<a href=""mailto:ci.ti.b.anklond.o.n.20.0@gmail.com"">ci.ti.b.anklond.o.n.20.0@gmail.com</a>
<a href=""mailto:cit.i.ba.n.k.lond.o.n2.00@gmail.com"">cit.i.ba.n.k.lond.o.n2.00@gmail.com</a>
<a href=""mailto:ci.tib.an.k.lond.o.n.2.00@gmail.com"">ci.tib.an.k.lond.o.n.2.00@gmail.com</a>
<a href=""mailto:ci.ti.b.ank.l.o.nd.on.20.0@gmail.com"">ci.ti.b.ank.l.o.nd.on.20.0@gmail.com</a>
<a href=""mailto:citi.b.an.kl.o.nd.on200@gmail.com"">citi.b.an.kl.o.nd.on200@gmail.com</a>
<a href=""mailto:c.i.tibanklondon200@gmail.com"">c.i.tibanklondon200@gmail.com</a>
<a href=""mailto:c.i.ti.ba.n.kl.o.ndon.200@gmail.com"">c.i.ti.ba.n.kl.o.ndon.200@gmail.com</a>
<a href=""mailto:ci.ti.b.ank.lon.do.n.2.00@gmail.com"">ci.ti.b.ank.lon.do.n.2.00@gmail.com</a>
<a href=""mailto:citiba.n.k.l.o.n.d.o.n2.00@gmail.com"">citiba.n.k.l.o.n.d.o.n2.00@gmail.com</a>
<a href=""mailto:citib.a.n.k.l.on.d.o.n.20.0@gmail.com"">citib.a.n.k.l.on.d.o.n.20.0@gmail.com</a>
<a href=""mailto:c.it.i.b.an.klo.ndo.n2.00@gmail.com"">c.it.i.b.an.klo.ndo.n2.00@gmail.com</a>
<a href=""mailto:ci.ti.b.an.k.lond.on20.0@gmail.com"">ci.ti.b.an.k.lond.on20.0@gmail.com</a>
<a href=""mailto:c.iti.ba.n.klo.n.d.on200@gmail.com"">c.iti.ba.n.klo.n.d.on200@gmail.com</a>
<a href=""mailto:c.it.i.banklon.d.on200@gmail.com"">c.it.i.banklon.d.on200@gmail.com</a>
<a href=""mailto:cit.i.ba.n.k.l.ond.on.200@gmail.com"">cit.i.ba.n.k.l.ond.on.200@gmail.com</a>
<a href=""mailto:c.iti.b.a.nkl.ond.o.n200@gmail.com"">c.iti.b.a.nkl.ond.o.n200@gmail.com</a>
<a href=""mailto:c.itiban.k.l.ond.on2.0.0@gmail.com"">c.itiban.k.l.ond.on2.0.0@gmail.com</a>
<a href=""mailto:citi.ba.nklond.o.n.2.0.0@gmail.com"">citi.ba.nklond.o.n.2.0.0@gmail.com</a>
<a href=""mailto:ci.t.ibank.lon.d.on.200@gmail.com"">ci.t.ibank.lon.d.on.200@gmail.com</a>
<a href=""mailto:citib.ank.l.o.n.d.on20.0@gmail.com"">citib.ank.l.o.n.d.on20.0@gmail.com</a>
<a href=""mailto:cit.iban.klo.ndon2.0.0@gmail.com"">cit.iban.klo.ndon2.0.0@gmail.com</a>
<a href=""mailto:c.i.t.iba.nk.l.o.n.don.2.0.0@gmail.com"">c.i.t.iba.nk.l.o.n.don.2.0.0@gmail.com</a>
<a href=""mailto:cit.ibank.lond.o.n.2.0.0@gmail.com"">cit.ibank.lond.o.n.2.0.0@gmail.com</a>
<a href=""mailto:c.itib.a.n.k.london2.00@gmail.com"">c.itib.a.n.k.london2.00@gmail.com</a>
<a href=""mailto:c.it.i.bankl.ondo.n2.00@gmail.com"">c.it.i.bankl.ondo.n2.00@gmail.com</a>
<a href=""mailto:c.i.t.i.banklo.ndo.n200@gmail.com"">c.i.t.i.banklo.ndo.n200@gmail.com</a>
<a href=""mailto:c.i.tib.anklond.on2.00@gmail.com"">c.i.tib.anklond.on2.00@gmail.com</a>
<a href=""mailto:ci.ti.banklo.nd.on.20.0@gmail.com"">ci.ti.banklo.nd.on.20.0@gmail.com</a>
<a href=""mailto:cit.i.ba.nk.lo.n.d.o.n.20.0@gmail.com"">cit.i.ba.nk.lo.n.d.o.n.20.0@gmail.com</a>
<a href=""mailto:c.i.tib.an.k.lond.o.n.2.0.0@gmail.com"">c.i.tib.an.k.lond.o.n.2.0.0@gmail.com</a>
<a href=""mailto:cit.i.b.an.klo.nd.on2.00@gmail.com"">cit.i.b.an.klo.nd.on2.00@gmail.com</a>
<a href=""mailto:c.i.t.i.ba.n.k.lon.do.n2.00@gmail.com"">c.i.t.i.ba.n.k.lon.do.n2.00@gmail.com</a>
<a href=""mailto:c.it.ib.ank.lo.nd.o.n.2.00@gmail.com"">c.it.ib.ank.lo.nd.o.n.2.00@gmail.com</a>
<a href=""mailto:c.iti.ba.n.k.lo.ndo.n200@gmail.com"">c.iti.ba.n.k.lo.ndo.n200@gmail.com</a>
<a href=""mailto:c.i.tib.a.nk.lon.d.o.n.20.0@gmail.com"">c.i.tib.a.nk.lon.d.o.n.20.0@gmail.com</a>
<a href=""mailto:ci.tib.a.nk.lond.o.n.20.0@gmail.com"">ci.tib.a.nk.lond.o.n.20.0@gmail.com</a>
<a href=""mailto:c.it.i.bank.l.o.n.d.o.n200@gmail.com"">c.it.i.bank.l.o.n.d.o.n200@gmail.com</a>
<a href=""mailto:c.i.ti.b.an.klondo.n.20.0@gmail.com"">c.i.ti.b.an.klondo.n.20.0@gmail.com</a>
<a href=""mailto:cit.ibank.lon.d.o.n2.00@gmail.com"">cit.ibank.lon.d.o.n2.00@gmail.com</a>
<a href=""mailto:cit.i.b.an.k.lon.d.o.n200@gmail.com"">cit.i.b.an.k.lon.d.o.n200@gmail.com</a>
<a href=""mailto:ci.ti.bank.lo.n.don.200@gmail.com"">ci.ti.bank.lo.n.don.200@gmail.com</a>
<a href=""mailto:c.it.i.b.a.n.klo.nd.o.n.200@gmail.com"">c.it.i.b.a.n.klo.nd.o.n.200@gmail.com</a>
<a href=""mailto:c.itib.an.klo.n.don2.00@gmail.com"">c.itib.an.klo.n.don2.00@gmail.com</a>
<a href=""mailto:cit.i.b.an.klondo.n2.00@gmail.com"">cit.i.b.an.klondo.n2.00@gmail.com</a>
<a href=""mailto:ci.t.i.b.an.klo.nd.on.200@gmail.com"">ci.t.i.b.an.klo.nd.on.200@gmail.com</a>
<a href=""mailto:c.it.i.ban.k.lo.ndo.n.2.00@gmail.com"">c.it.i.ban.k.lo.ndo.n.2.00@gmail.com</a>
<a href=""mailto:c.it.iba.nkl.ond.on.200@gmail.com"">c.it.iba.nkl.ond.on.200@gmail.com</a>
<a href=""mailto:ci.t.i.ba.n.klondo.n.2.00@gmail.com"">ci.t.i.ba.n.klondo.n.2.00@gmail.com</a>
<a href=""mailto:c.i.tiba.nk.l.o.ndo.n.200@gmail.com"">c.i.tiba.nk.l.o.ndo.n.200@gmail.com</a>
<a href=""mailto:citi.ba.n.k.lo.nd.o.n200@gmail.com"">citi.ba.n.k.lo.nd.o.n200@gmail.com</a>
<a href=""mailto:c.it.ib.an.k.lon.d.o.n2.00@gmail.com"">c.it.ib.an.k.lon.d.o.n2.00@gmail.com</a>
<a href=""mailto:c.i.ti.banklond.o.n.2.00@gmail.com"">c.i.ti.banklond.o.n.2.00@gmail.com</a>
<a href=""mailto:cit.i.b.an.k.lon.d.o.n2.00@gmail.com"">cit.i.b.an.k.lon.d.o.n2.00@gmail.com</a>
<a href=""mailto:ci.t.i.b.a.nk.lon.d.o.n200@gmail.com"">ci.t.i.b.a.nk.lon.d.o.n200@gmail.com</a>
<a href=""mailto:c.iti.ba.nkl.o.n.d.on2.00@gmail.com"">c.iti.ba.nkl.o.n.d.on2.00@gmail.com</a>
<a href=""mailto:c.i.t.ib.anklon.d.on.2.00@gmail.com"">c.i.t.ib.anklon.d.on.2.00@gmail.com</a>
<a href=""mailto:ci.ti.b.a.nk.l.o.n.d.on20.0@gmail.com"">ci.ti.b.a.nk.l.o.n.d.on20.0@gmail.com</a>
<a href=""mailto:c.itiba.nk.london.200@gmail.com"">c.itiba.nk.london.200@gmail.com</a>
<a href=""mailto:cit.i.bank.lo.n.don2.00@gmail.com"">cit.i.bank.lo.n.don2.00@gmail.com</a>
<a href=""mailto:c.i.ti.b.a.n.k.lo.n.d.on2.0.0@gmail.com"">c.i.ti.b.a.n.k.lo.n.d.on2.0.0@gmail.com</a>
<a href=""mailto:c.i.t.ib.a.nk.l.ond.on2.0.0@gmail.com"">c.i.t.ib.a.nk.l.ond.on2.0.0@gmail.com</a>
<a href=""mailto:ci.ti.b.an.k.lo.n.d.on.2.00@gmail.com"">ci.ti.b.an.k.lo.n.d.on.2.00@gmail.com</a>
<a href=""mailto:cit.i.b.a.n.k.l.on.do.n200@gmail.com"">cit.i.b.a.n.k.l.on.do.n200@gmail.com</a>
<a href=""mailto:citi.bankl.on.d.o.n.20.0@gmail.com"">citi.bankl.on.d.o.n.20.0@gmail.com</a>
<a href=""mailto:ci.t.i.b.an.kl.o.n.d.o.n.200@gmail.com"">ci.t.i.b.an.kl.o.n.d.o.n.200@gmail.com</a>
<a href=""mailto:ci.t.i.ba.nk.l.ondon20.0@gmail.com"">ci.t.i.ba.nk.l.ondon20.0@gmail.com</a>
<a href=""mailto:ci.t.iban.klo.n.d.o.n20.0@gmail.com"">ci.t.iban.klo.n.d.o.n20.0@gmail.com</a>
<a href=""mailto:ci.t.i.b.a.n.klo.n.do.n2.0.0@gmail.com"">ci.t.i.b.a.n.klo.n.do.n2.0.0@gmail.com</a>
<a href=""mailto:c.it.ib.a.nklon.d.o.n2.00@gmail.com"">c.it.ib.a.nklon.d.o.n2.00@gmail.com</a>
<a href=""mailto:c.i.t.i.b.ank.lond.on2.00@gmail.com"">c.i.t.i.b.ank.lond.on2.00@gmail.com</a>
<a href=""mailto:c.i.ti.b.ank.lo.ndon.2.00@gmail.com"">c.i.ti.b.ank.lo.ndon.2.00@gmail.com</a>
<a href=""mailto:citi.ba.n.klon.d.on20.0@gmail.com"">citi.ba.n.klon.d.on20.0@gmail.com</a>
<a href=""mailto:c.i.ti.bankl.o.ndon.2.00@gmail.com"">c.i.ti.bankl.o.ndon.2.00@gmail.com</a>
<a href=""mailto:c.i.t.ib.a.n.k.l.o.ndon.20.0@gmail.com"">c.i.t.ib.a.n.k.l.o.ndon.20.0@gmail.com</a>
<a href=""mailto:ci.t.ibanklond.on.2.00@gmail.com"">ci.t.ibanklond.on.2.00@gmail.com</a>
<a href=""mailto:ci.t.iban.k.l.on.don.2.0.0@gmail.com"">ci.t.iban.k.l.on.don.2.0.0@gmail.com</a>
<a href=""mailto:ci.tib.a.nk.l.ond.o.n2.0.0@gmail.com"">ci.tib.a.nk.l.ond.o.n2.0.0@gmail.com</a>
<a href=""mailto:ci.t.ib.an.klondon2.00@gmail.com"">ci.t.ib.an.klondon2.00@gmail.com</a>
<a href=""mailto:c.i.tiban.k.l.ondo.n.2.00@gmail.com"">c.i.tiban.k.l.ondo.n.2.00@gmail.com</a>
<a href=""mailto:cit.ib.a.nk.l.o.ndo.n2.0.0@gmail.com"">cit.ib.a.nk.l.o.ndo.n2.0.0@gmail.com</a>
<a href=""mailto:cit.ib.a.n.k.l.o.ndon2.0.0@gmail.com"">cit.ib.a.n.k.l.o.ndon2.0.0@gmail.com</a>
<a href=""mailto:c.i.ti.bank.lon.d.on2.0.0@gmail.com"">c.i.ti.bank.lon.d.on2.0.0@gmail.com</a>
<a href=""mailto:citi.b.a.nkl.o.nd.o.n2.00@gmail.com"">citi.b.a.nkl.o.nd.o.n2.00@gmail.com</a>
<a href=""mailto:citib.a.nklo.nd.on.2.0.0@gmail.com"">citib.a.nklo.nd.on.2.0.0@gmail.com</a>
<a href=""mailto:c.itib.anklo.ndo.n.2.00@gmail.com"">c.itib.anklo.ndo.n.2.00@gmail.com</a>
<a href=""mailto:c.i.t.i.b.anklo.n.d.on.2.00@gmail.com"">c.i.t.i.b.anklo.n.d.on.2.00@gmail.com</a>
<a href=""mailto:ci.tiban.k.l.o.n.do.n.20.0@gmail.com"">ci.tiban.k.l.o.n.do.n.20.0@gmail.com</a>
<a href=""mailto:ci.t.i.ba.n.klo.ndo.n20.0@gmail.com"">ci.t.i.ba.n.klo.ndo.n20.0@gmail.com</a>
<a href=""mailto:ci.t.iba.n.kl.on.don.2.00@gmail.com"">ci.t.iba.n.kl.on.don.2.00@gmail.com</a>
<a href=""mailto:c.iti.ban.k.l.o.n.d.o.n.20.0@gmail.com"">c.iti.ban.k.l.o.n.d.o.n.20.0@gmail.com</a>
<a href=""mailto:c.itibankl.ond.o.n.2.0.0@gmail.com"">c.itibankl.ond.o.n.2.0.0@gmail.com</a>
<a href=""mailto:c.it.ibank.l.o.n.don.200@gmail.com"">c.it.ibank.l.o.n.don.200@gmail.com</a>
<a href=""mailto:c.i.t.ib.a.n.k.l.o.ndon2.0.0@gmail.com"">c.i.t.ib.a.n.k.l.o.ndon2.0.0@gmail.com</a>
<a href=""mailto:citi.b.a.nk.l.ondo.n20.0@gmail.com"">citi.b.a.nk.l.ondo.n20.0@gmail.com</a>
<a href=""mailto:c.it.iba.nk.lo.nd.on.20.0@gmail.com"">c.it.iba.nk.lo.nd.on.20.0@gmail.com</a>
<a href=""mailto:citiba.n.k.lo.nd.on.20.0@gmail.com"">citiba.n.k.lo.nd.on.20.0@gmail.com</a>
<a href=""mailto:c.i.ti.b.a.nk.lon.don2.00@gmail.com"">c.i.ti.b.a.nk.lon.don2.00@gmail.com</a>
<a href=""mailto:ci.tib.anklondon20.0@gmail.com"">ci.tib.anklondon20.0@gmail.com</a>
<a href=""mailto:ci.t.i.ba.n.k.lon.d.o.n.2.0.0@gmail.com"">ci.t.i.ba.n.k.lon.d.o.n.2.0.0@gmail.com</a>
<a href=""mailto:c.it.i.ba.n.k.lo.n.d.on.20.0@gmail.com"">c.it.i.ba.n.k.lo.n.d.on.20.0@gmail.com</a>
<a href=""mailto:c.i.t.ibankl.on.do.n2.00@gmail.com"">c.i.t.ibankl.on.do.n2.00@gmail.com</a>
<a href=""mailto:ci.ti.b.a.nk.l.o.ndo.n.200@gmail.com"">ci.ti.b.a.nk.l.o.ndo.n.200@gmail.com</a>
<a href=""mailto:c.i.tib.a.n.k.lon.d.o.n.2.0.0@gmail.com"">c.i.tib.a.n.k.lon.d.o.n.2.0.0@gmail.com</a>
<a href=""mailto:citi.b.a.nk.lo.nd.on.20.0@gmail.com"">citi.b.a.nk.lo.nd.on.20.0@gmail.com</a>
<a href=""mailto:c.it.i.ba.n.k.lon.do.n2.0.0@gmail.com"">c.it.i.ba.n.k.lon.do.n2.0.0@gmail.com</a>
<a href=""mailto:citibank.lon.d.o.n20.0@gmail.com"">citibank.lon.d.o.n20.0@gmail.com</a>
<a href=""mailto:ci.tiban.k.l.on.do.n200@gmail.com"">ci.tiban.k.l.on.do.n200@gmail.com</a>
<a href=""mailto:cit.i.ban.k.l.ondon.20.0@gmail.com"">cit.i.ban.k.l.ondon.20.0@gmail.com</a>
<a href=""mailto:citiba.n.kl.ond.o.n200@gmail.com"">citiba.n.kl.ond.o.n200@gmail.com</a>
<a href=""mailto:c.i.ti.ban.kl.ond.o.n.2.00@gmail.com"">c.i.ti.ban.kl.ond.o.n.2.00@gmail.com</a>
<a href=""mailto:c.itiban.kl.ond.on.2.0.0@gmail.com"">c.itiban.kl.ond.on.2.0.0@gmail.com</a>
<a href=""mailto:citi.ba.nklo.ndon20.0@gmail.com"">citi.ba.nklo.ndon20.0@gmail.com</a>
<a href=""mailto:c.it.i.ba.n.kl.o.ndon.20.0@gmail.com"">c.it.i.ba.n.kl.o.ndon.20.0@gmail.com</a>
<a href=""mailto:ci.t.i.b.ankl.on.d.on.200@gmail.com"">ci.t.i.b.ankl.on.d.on.200@gmail.com</a>
<a href=""mailto:ci.tib.a.n.k.lon.d.o.n2.00@gmail.com"">ci.tib.a.n.k.lon.d.o.n2.00@gmail.com</a>
<a href=""mailto:ci.ti.b.an.klon.do.n200@gmail.com"">ci.ti.b.an.klon.do.n200@gmail.com</a>
<a href=""mailto:citib.a.n.k.lond.on.200@gmail.com"">citib.a.n.k.lond.on.200@gmail.com</a>
<a href=""mailto:c.i.t.iba.n.k.lo.nd.on.200@gmail.com"">c.i.t.iba.n.k.lo.nd.on.200@gmail.com</a>
<a href=""mailto:ci.t.i.ba.nklo.ndo.n2.00@gmail.com"">ci.t.i.ba.nklo.ndo.n2.00@gmail.com</a>
<a href=""mailto:c.i.tiban.k.l.ond.o.n2.00@gmail.com"">c.i.tiban.k.l.ond.o.n2.00@gmail.com</a>
<a href=""mailto:ci.t.ib.a.nklondo.n.20.0@gmail.com"">ci.t.ib.a.nklondo.n.20.0@gmail.com</a>
<a href=""mailto:c.i.tibank.lon.don200@gmail.com"">c.i.tibank.lon.don200@gmail.com</a>
<a href=""mailto:c.it.i.b.a.n.k.lo.n.d.o.n2.0.0@gmail.com"">c.it.i.b.a.n.k.lo.n.d.o.n2.0.0@gmail.com</a>
<a href=""mailto:c.i.ti.ban.kl.o.ndon20.0@gmail.com"">c.i.ti.ban.kl.o.ndon20.0@gmail.com</a>
<a href=""mailto:c.i.ti.b.an.k.l.o.n.don2.0.0@gmail.com"">c.i.ti.b.an.k.l.o.n.don2.0.0@gmail.com</a>
<a href=""mailto:c.i.ti.b.an.k.lon.do.n20.0@gmail.com"">c.i.ti.b.an.k.lon.do.n20.0@gmail.com</a>
<a href=""mailto:cit.ib.ank.l.o.ndon2.0.0@gmail.com"">cit.ib.ank.l.o.ndon2.0.0@gmail.com</a>
<a href=""mailto:c.i.tib.ank.l.o.n.d.o.n200@gmail.com"">c.i.tib.ank.l.o.n.d.o.n200@gmail.com</a>
<a href=""mailto:ci.t.i.b.anklo.nd.on2.00@gmail.com"">ci.t.i.b.anklo.nd.on2.00@gmail.com</a>
<a href=""mailto:c.itiban.k.lon.d.o.n200@gmail.com"">c.itiban.k.lon.d.o.n200@gmail.com</a>
<a href=""mailto:ci.tibankl.ondo.n2.0.0@gmail.com"">ci.tibankl.ondo.n2.0.0@gmail.com</a>
<a href=""mailto:c.iti.b.a.nklo.ndon200@gmail.com"">c.iti.b.a.nklo.ndon200@gmail.com</a>
<a href=""mailto:ci.ti.ba.n.klo.nd.on.20.0@gmail.com"">ci.ti.ba.n.klo.nd.on.20.0@gmail.com</a>
<a href=""mailto:c.i.tib.a.nk.lon.do.n2.0.0@gmail.com"">c.i.tib.a.nk.lon.do.n2.0.0@gmail.com</a>
<a href=""mailto:citi.b.a.nk.lond.o.n200@gmail.com"">citi.b.a.nk.lond.o.n200@gmail.com</a>
<a href=""mailto:cit.i.b.a.n.klo.n.don20.0@gmail.com"">cit.i.b.a.n.klo.n.don20.0@gmail.com</a>
<a href=""mailto:c.iti.ba.nkl.o.nd.o.n20.0@gmail.com"">c.iti.ba.nkl.o.nd.o.n20.0@gmail.com</a>
<a href=""mailto:cit.i.b.ank.londo.n2.00@gmail.com"">cit.i.b.ank.londo.n2.00@gmail.com</a>
<a href=""mailto:c.i.tiba.n.kl.on.d.o.n2.0.0@gmail.com"">c.i.tiba.n.kl.on.d.o.n2.0.0@gmail.com</a>
<a href=""mailto:c.it.i.ba.n.klon.don20.0@gmail.com"">c.it.i.ba.n.klon.don20.0@gmail.com</a>
<a href=""mailto:c.i.t.iba.nk.lo.ndo.n.2.0.0@gmail.com"">c.i.t.iba.nk.lo.ndo.n.2.0.0@gmail.com</a>
<a href=""mailto:citi.b.a.nklon.d.o.n2.00@gmail.com"">citi.b.a.nklon.d.o.n2.00@gmail.com</a>
<a href=""mailto:c.it.iba.n.k.lond.on.2.00@gmail.com"">c.it.iba.n.k.lond.on.2.00@gmail.com</a>
<a href=""mailto:cit.i.b.ankl.on.don.200@gmail.com"">cit.i.b.ankl.on.don.200@gmail.com</a>
<a href=""mailto:citi.bank.l.o.n.don.2.00@gmail.com"">citi.bank.l.o.n.don.2.00@gmail.com</a>
<a href=""mailto:ci.t.i.ba.n.k.lo.ndo.n.20.0@gmail.com"">ci.t.i.ba.n.k.lo.ndo.n.20.0@gmail.com</a>
<a href=""mailto:ci.t.ibanklond.on.20.0@gmail.com"">ci.t.ibanklond.on.20.0@gmail.com</a>
<a href=""mailto:cit.i.b.anklon.don2.00@gmail.com"">cit.i.b.anklon.don2.00@gmail.com</a>
<a href=""mailto:cit.ib.ank.lo.n.d.on20.0@gmail.com"">cit.ib.ank.lo.n.d.on20.0@gmail.com</a>
<a href=""mailto:cit.i.b.an.k.l.o.n.d.o.n2.0.0@gmail.com"">cit.i.b.an.k.l.o.n.d.o.n2.0.0@gmail.com</a>
<a href=""mailto:c.i.t.i.b.ank.l.o.n.d.o.n2.00@gmail.com"">c.i.t.i.b.ank.l.o.n.d.o.n2.00@gmail.com</a>
<a href=""mailto:tomukbank@gmail.com"">tomukbank@gmail.com</a>
<a href=""mailto:tomu.kba.n.k@gmail.com"">tomu.kba.n.k@gmail.com</a>
<a href=""mailto:t.om.uk.ban.k@gmail.com"">t.om.uk.ban.k@gmail.com</a>
<a href=""mailto:to.muk.ban.k@gmail.com"">to.muk.ban.k@gmail.com</a>
<a href=""mailto:t.o.m.ukba.nk@gmail.com"">t.o.m.ukba.nk@gmail.com</a>
<a href=""mailto:tomukb.a.nk@gmail.com"">tomukb.a.nk@gmail.com</a>
<a href=""mailto:t.o.mu.k.ba.nk@gmail.com"">t.o.mu.k.ba.nk@gmail.com</a>
<a href=""mailto:t.om.ukb.ank@gmail.com"">t.om.ukb.ank@gmail.com</a>
<a href=""mailto:tom.u.k.ba.nk@gmail.com"">tom.u.k.ba.nk@gmail.com</a>
<a href=""mailto:t.omuk.ba.nk@gmail.com"">t.omuk.ba.nk@gmail.com</a>
<a href=""mailto:t.o.mu.k.bank@gmail.com"">t.o.mu.k.bank@gmail.com</a>
<a href=""mailto:tomu.kb.a.nk@gmail.com"">tomu.kb.a.nk@gmail.com</a>
<a href=""mailto:t.om.ukb.a.n.k@gmail.com"">t.om.ukb.a.n.k@gmail.com</a>
<a href=""mailto:t.o.mukba.nk@gmail.com"">t.o.mukba.nk@gmail.com</a>
<a href=""mailto:tom.uk.bank@gmail.com"">tom.uk.bank@gmail.com</a>
<a href=""mailto:tom.uk.ban.k@gmail.com"">tom.uk.ban.k@gmail.com</a>
<a href=""mailto:to.mu.k.ba.nk@gmail.com"">to.mu.k.ba.nk@gmail.com</a>
<a href=""mailto:t.o.muk.b.a.nk@gmail.com"">t.o.muk.b.a.nk@gmail.com</a>
<a href=""mailto:t.omu.kb.a.n.k@gmail.com"">t.omu.kb.a.n.k@gmail.com</a>
<a href=""mailto:to.mu.k.ban.k@gmail.com"">to.mu.k.ban.k@gmail.com</a>
<a href=""mailto:tomu.k.ban.k@gmail.com"">tomu.k.ban.k@gmail.com</a>
<a href=""mailto:t.o.m.ukb.an.k@gmail.com"">t.o.m.ukb.an.k@gmail.com</a>
<a href=""mailto:tomu.kb.an.k@gmail.com"">tomu.kb.an.k@gmail.com</a>
<a href=""mailto:tomukb.ank@gmail.com"">tomukb.ank@gmail.com</a>
<a href=""mailto:t.o.mu.kba.n.k@gmail.com"">t.o.mu.kba.n.k@gmail.com</a>
<a href=""mailto:tom.u.kba.nk@gmail.com"">tom.u.kba.nk@gmail.com</a>
<a href=""mailto:t.o.mu.k.b.an.k@gmail.com"">t.o.mu.k.b.an.k@gmail.com</a>
<a href=""mailto:t.o.m.u.k.b.a.nk@gmail.com"">t.o.m.u.k.b.a.nk@gmail.com</a>
<a href=""mailto:to.m.ukb.a.n.k@gmail.com"">to.m.ukb.a.n.k@gmail.com</a>
<a href=""mailto:to.mukb.a.n.k@gmail.com"">to.mukb.a.n.k@gmail.com</a>
<a href=""mailto:t.omukba.n.k@gmail.com"">t.omukba.n.k@gmail.com</a>
<a href=""mailto:t.omu.kb.a.nk@gmail.com"">t.omu.kb.a.nk@gmail.com</a>
<a href=""mailto:tomu.kb.ank@gmail.com"">tomu.kb.ank@gmail.com</a>
<a href=""mailto:t.o.m.u.k.b.a.n.k@gmail.com"">t.o.m.u.k.b.a.n.k@gmail.com</a>
<a href=""mailto:to.mukban.k@gmail.com"">to.mukban.k@gmail.com</a>
<a href=""mailto:t.o.m.uk.bank@gmail.com"">t.o.m.uk.bank@gmail.com</a>
<a href=""mailto:t.o.m.u.k.b.an.k@gmail.com"">t.o.m.u.k.b.an.k@gmail.com</a>
<a href=""mailto:tom.ukb.a.nk@gmail.com"">tom.ukb.a.nk@gmail.com</a>
<a href=""mailto:to.mu.kb.a.n.k@gmail.com"">to.mu.kb.a.n.k@gmail.com</a>
<a href=""mailto:t.om.uk.bank@gmail.com"">t.om.uk.bank@gmail.com</a>
<a href=""mailto:t.omu.k.b.ank@gmail.com"">t.omu.k.b.ank@gmail.com</a>
<a href=""mailto:tom.ukba.n.k@gmail.com"">tom.ukba.n.k@gmail.com</a>
<a href=""mailto:tomuk.b.an.k@gmail.com"">tomuk.b.an.k@gmail.com</a>
<a href=""mailto:t.omuk.bank@gmail.com"">t.omuk.bank@gmail.com</a>
<a href=""mailto:tomuk.b.ank@gmail.com"">tomuk.b.ank@gmail.com</a>
<a href=""mailto:to.m.u.kb.a.n.k@gmail.com"">to.m.u.kb.a.n.k@gmail.com</a>
<a href=""mailto:t.o.muk.ba.n.k@gmail.com"">t.o.muk.ba.n.k@gmail.com</a>
<a href=""mailto:t.o.muk.bank@gmail.com"">t.o.muk.bank@gmail.com</a>
<a href=""mailto:t.om.uk.b.ank@gmail.com"">t.om.uk.b.ank@gmail.com</a>
<a href=""mailto:t.o.mu.k.b.a.nk@gmail.com"">t.o.mu.k.b.a.nk@gmail.com</a>
<a href=""mailto:t.o.mu.kba.nk@gmail.com"">t.o.mu.kba.nk@gmail.com</a>
<a href=""mailto:t.o.muk.ban.k@gmail.com"">t.o.muk.ban.k@gmail.com</a>
<a href=""mailto:t.o.m.uk.ba.n.k@gmail.com"">t.o.m.uk.ba.n.k@gmail.com</a>
<a href=""mailto:t.o.m.ukb.a.nk@gmail.com"">t.o.m.ukb.a.nk@gmail.com</a>
<a href=""mailto:t.omu.k.ba.n.k@gmail.com"">t.omu.k.ba.n.k@gmail.com</a>
<a href=""mailto:t.om.u.kban.k@gmail.com"">t.om.u.kban.k@gmail.com</a>
<a href=""mailto:t.omu.k.b.a.n.k@gmail.com"">t.omu.k.b.a.n.k@gmail.com</a>
<a href=""mailto:tomuk.ba.n.k@gmail.com"">tomuk.ba.n.k@gmail.com</a>
<a href=""mailto:tomukb.a.n.k@gmail.com"">tomukb.a.n.k@gmail.com</a>
<a href=""mailto:t.o.muk.b.a.n.k@gmail.com"">t.o.muk.b.a.n.k@gmail.com</a>
<a href=""mailto:tom.uk.b.a.nk@gmail.com"">tom.uk.b.a.nk@gmail.com</a>
<a href=""mailto:tom.u.k.b.an.k@gmail.com"">tom.u.k.b.an.k@gmail.com</a>
<a href=""mailto:t.omukb.an.k@gmail.com"">t.omukb.an.k@gmail.com</a>
<a href=""mailto:t.omu.k.b.a.nk@gmail.com"">t.omu.k.b.a.nk@gmail.com</a>
<a href=""mailto:t.o.muk.b.ank@gmail.com"">t.o.muk.b.ank@gmail.com</a>
<a href=""mailto:t.om.u.k.b.a.nk@gmail.com"">t.om.u.k.b.a.nk@gmail.com</a>
<a href=""mailto:t.om.u.kba.n.k@gmail.com"">t.om.u.kba.n.k@gmail.com</a>
<a href=""mailto:t.o.mu.kb.an.k@gmail.com"">t.o.mu.kb.an.k@gmail.com</a>
<a href=""mailto:t.omu.kba.n.k@gmail.com"">t.omu.kba.n.k@gmail.com</a>
<a href=""mailto:t.om.uk.b.a.nk@gmail.com"">t.om.uk.b.a.nk@gmail.com</a>
<a href=""mailto:tomukb.an.k@gmail.com"">tomukb.an.k@gmail.com</a>
<a href=""mailto:to.m.u.k.ba.n.k@gmail.com"">to.m.u.k.ba.n.k@gmail.com</a>
<a href=""mailto:to.muk.ba.nk@gmail.com"">to.muk.ba.nk@gmail.com</a>
<a href=""mailto:t.om.ukb.a.nk@gmail.com"">t.om.ukb.a.nk@gmail.com</a>
<a href=""mailto:t.omukb.a.n.k@gmail.com"">t.omukb.a.n.k@gmail.com</a>
<a href=""mailto:to.mukb.ank@gmail.com"">to.mukb.ank@gmail.com</a>
<a href=""mailto:to.m.uk.ba.nk@gmail.com"">to.m.uk.ba.nk@gmail.com</a>
<a href=""mailto:t.omuk.b.an.k@gmail.com"">t.omuk.b.an.k@gmail.com</a>
<a href=""mailto:tomukban.k@gmail.com"">tomukban.k@gmail.com</a>
<a href=""mailto:t.o.m.u.kb.an.k@gmail.com"">t.o.m.u.kb.an.k@gmail.com</a>
<a href=""mailto:tomuk.b.a.n.k@gmail.com"">tomuk.b.a.n.k@gmail.com</a>
<a href=""mailto:t.omukb.ank@gmail.com"">t.omukb.ank@gmail.com</a>
<a href=""mailto:t.omukba.nk@gmail.com"">t.omukba.nk@gmail.com</a>
<a href=""mailto:to.m.ukbank@gmail.com"">to.m.ukbank@gmail.com</a>
<a href=""mailto:to.m.uk.ba.n.k@gmail.com"">to.m.uk.ba.n.k@gmail.com</a>
<a href=""mailto:t.o.mukb.a.n.k@gmail.com"">t.o.mukb.a.n.k@gmail.com</a>
<a href=""mailto:t.o.m.uk.b.a.nk@gmail.com"">t.o.m.uk.b.a.nk@gmail.com</a>
<a href=""mailto:t.o.mu.k.b.ank@gmail.com"">t.o.mu.k.b.ank@gmail.com</a>
<a href=""mailto:to.m.ukb.a.nk@gmail.com"">to.m.ukb.a.nk@gmail.com</a>
<a href=""mailto:to.muk.bank@gmail.com"">to.muk.bank@gmail.com</a>
<a href=""mailto:tomukba.nk@gmail.com"">tomukba.nk@gmail.com</a>
<a href=""mailto:t.om.u.k.b.an.k@gmail.com"">t.om.u.k.b.an.k@gmail.com</a>
<a href=""mailto:t.omu.k.bank@gmail.com"">t.omu.k.bank@gmail.com</a>
<a href=""mailto:to.mu.kba.n.k@gmail.com"">to.mu.kba.n.k@gmail.com</a>
<a href=""mailto:to.muk.b.a.nk@gmail.com"">to.muk.b.a.nk@gmail.com</a>
<a href=""mailto:t.o.m.u.k.ba.nk@gmail.com"">t.o.m.u.k.ba.nk@gmail.com</a>
<a href=""mailto:t.o.m.uk.ban.k@gmail.com"">t.o.m.uk.ban.k@gmail.com</a>
<a href=""mailto:t.o.m.ukb.a.n.k@gmail.com"">t.o.m.ukb.a.n.k@gmail.com</a>
<a href=""mailto:t.om.uk.b.an.k@gmail.com"">t.om.uk.b.an.k@gmail.com</a>
<a href=""mailto:tom.uk.b.ank@gmail.com"">tom.uk.b.ank@gmail.com</a>
<a href=""mailto:t.o.m.u.k.bank@gmail.com"">t.o.m.u.k.bank@gmail.com</a>
<a href=""mailto:tom.u.kban.k@gmail.com"">tom.u.kban.k@gmail.com</a>
<a href=""mailto:to.mu.kb.an.k@gmail.com"">to.mu.kb.an.k@gmail.com</a>
<a href=""mailto:tomu.k.b.an.k@gmail.com"">tomu.k.b.an.k@gmail.com</a>
<a href=""mailto:tom.u.k.bank@gmail.com"">tom.u.k.bank@gmail.com</a>
<a href=""mailto:to.mu.kb.a.nk@gmail.com"">to.mu.kb.a.nk@gmail.com</a>
<a href=""mailto:tomu.k.ba.nk@gmail.com"">tomu.k.ba.nk@gmail.com</a>
<a href=""mailto:to.m.u.kb.a.nk@gmail.com"">to.m.u.kb.a.nk@gmail.com</a>
<a href=""mailto:tomu.kbank@gmail.com"">tomu.kbank@gmail.com</a>
<a href=""mailto:t.o.m.u.k.ban.k@gmail.com"">t.o.m.u.k.ban.k@gmail.com</a>
<a href=""mailto:t.om.uk.ba.n.k@gmail.com"">t.om.uk.ba.n.k@gmail.com</a>
<a href=""mailto:tom.uk.b.a.n.k@gmail.com"">tom.uk.b.a.n.k@gmail.com</a>
<a href=""mailto:t.o.m.u.kban.k@gmail.com"">t.o.m.u.kban.k@gmail.com</a>
<a href=""mailto:t.o.mu.kbank@gmail.com"">t.o.mu.kbank@gmail.com</a>
<a href=""mailto:tom.u.k.ba.n.k@gmail.com"">tom.u.k.ba.n.k@gmail.com</a>
<a href=""mailto:tom.u.k.b.a.nk@gmail.com"">tom.u.k.b.a.nk@gmail.com</a>
<a href=""mailto:t.o.m.ukba.n.k@gmail.com"">t.o.m.ukba.n.k@gmail.com</a>
<a href=""mailto:t.omukban.k@gmail.com"">t.omukban.k@gmail.com</a>
<a href=""mailto:t.om.ukb.an.k@gmail.com"">t.om.ukb.an.k@gmail.com</a>
<a href=""mailto:to.mu.kbank@gmail.com"">to.mu.kbank@gmail.com</a>
<a href=""mailto:to.mukbank@gmail.com"">to.mukbank@gmail.com</a>
<a href=""mailto:tom.u.kb.an.k@gmail.com"">tom.u.kb.an.k@gmail.com</a>
<a href=""mailto:to.mu.k.b.an.k@gmail.com"">to.mu.k.b.an.k@gmail.com</a>
<a href=""mailto:t.om.u.kbank@gmail.com"">t.om.u.kbank@gmail.com</a>
<a href=""mailto:t.o.m.u.kb.a.n.k@gmail.com"">t.o.m.u.kb.a.n.k@gmail.com</a>
<a href=""mailto:to.mukba.n.k@gmail.com"">to.mukba.n.k@gmail.com</a>
<a href=""mailto:t.om.u.kb.ank@gmail.com"">t.om.u.kb.ank@gmail.com</a>
<a href=""mailto:to.m.uk.b.an.k@gmail.com"">to.m.uk.b.an.k@gmail.com</a>
<a href=""mailto:tom.uk.ba.nk@gmail.com"">tom.uk.ba.nk@gmail.com</a>
<a href=""mailto:t.o.m.u.k.ba.n.k@gmail.com"">t.o.m.u.k.ba.n.k@gmail.com</a>
<a href=""mailto:to.m.ukba.nk@gmail.com"">to.m.ukba.nk@gmail.com</a>
<a href=""mailto:to.m.u.k.b.a.nk@gmail.com"">to.m.u.k.b.a.nk@gmail.com</a>
<a href=""mailto:tom.u.kbank@gmail.com"">tom.u.kbank@gmail.com</a>
<a href=""mailto:to.m.u.kba.nk@gmail.com"">to.m.u.kba.nk@gmail.com</a>
<a href=""mailto:to.mu.k.b.a.n.k@gmail.com"">to.mu.k.b.a.n.k@gmail.com</a>
<a href=""mailto:t.omuk.b.ank@gmail.com"">t.omuk.b.ank@gmail.com</a>
<a href=""mailto:to.m.u.kba.n.k@gmail.com"">to.m.u.kba.n.k@gmail.com</a>
<a href=""mailto:t.o.m.uk.b.an.k@gmail.com"">t.o.m.uk.b.an.k@gmail.com</a>
<a href=""mailto:t.o.mukb.an.k@gmail.com"">t.o.mukb.an.k@gmail.com</a>
<a href=""mailto:t.o.mu.k.ban.k@gmail.com"">t.o.mu.k.ban.k@gmail.com</a>
<a href=""mailto:tom.ukb.a.n.k@gmail.com"">tom.ukb.a.n.k@gmail.com</a>
<a href=""mailto:t.o.m.u.kba.nk@gmail.com"">t.o.m.u.kba.nk@gmail.com</a>
<a href=""mailto:to.muk.b.an.k@gmail.com"">to.muk.b.an.k@gmail.com</a>
<a href=""mailto:to.mu.kban.k@gmail.com"">to.mu.kban.k@gmail.com</a>
<a href=""mailto:to.m.u.kb.an.k@gmail.com"">to.m.u.kb.an.k@gmail.com</a>
<a href=""mailto:tom.ukban.k@gmail.com"">tom.ukban.k@gmail.com</a>
<a href=""mailto:t.om.u.kba.nk@gmail.com"">t.om.u.kba.nk@gmail.com</a>
<a href=""mailto:tomuk.ba.nk@gmail.com"">tomuk.ba.nk@gmail.com</a>
<a href=""mailto:t.o.mu.kb.ank@gmail.com"">t.o.mu.kb.ank@gmail.com</a>
<a href=""mailto:t.o.mukb.ank@gmail.com"">t.o.mukb.ank@gmail.com</a>
<a href=""mailto:to.muk.b.a.n.k@gmail.com"">to.muk.b.a.n.k@gmail.com</a>
<a href=""mailto:tom.ukbank@gmail.com"">tom.ukbank@gmail.com</a>
<a href=""mailto:tom.uk.b.an.k@gmail.com"">tom.uk.b.an.k@gmail.com</a>
<a href=""mailto:t.om.u.k.ba.nk@gmail.com"">t.om.u.k.ba.nk@gmail.com</a>
<a href=""mailto:tomu.k.b.a.nk@gmail.com"">tomu.k.b.a.nk@gmail.com</a>
<a href=""mailto:t.o.mukbank@gmail.com"">t.o.mukbank@gmail.com</a>
<a href=""mailto:to.muk.b.ank@gmail.com"">to.muk.b.ank@gmail.com</a>
<a href=""mailto:t.om.u.k.ba.n.k@gmail.com"">t.om.u.k.ba.n.k@gmail.com</a>
<a href=""mailto:t.omu.k.b.an.k@gmail.com"">t.omu.k.b.an.k@gmail.com</a>
<a href=""mailto:tomu.k.b.ank@gmail.com"">tomu.k.b.ank@gmail.com</a>
<a href=""mailto:to.m.ukba.n.k@gmail.com"">to.m.ukba.n.k@gmail.com</a>
<a href=""mailto:tomu.k.b.a.n.k@gmail.com"">tomu.k.b.a.n.k@gmail.com</a>
<a href=""mailto:t.om.uk.b.a.n.k@gmail.com"">t.om.uk.b.a.n.k@gmail.com</a>
<a href=""mailto:t.o.m.uk.ba.nk@gmail.com"">t.o.m.uk.ba.nk@gmail.com</a>
<a href=""mailto:tomu.kban.k@gmail.com"">tomu.kban.k@gmail.com</a>
<a href=""mailto:t.omu.k.ban.k@gmail.com"">t.omu.k.ban.k@gmail.com</a>
<a href=""mailto:to.mu.kba.nk@gmail.com"">to.mu.kba.nk@gmail.com</a>
<a href=""mailto:t.omuk.ba.n.k@gmail.com"">t.omuk.ba.n.k@gmail.com</a>
<a href=""mailto:to.m.uk.ban.k@gmail.com"">to.m.uk.ban.k@gmail.com</a>
<a href=""mailto:t.omu.k.ba.nk@gmail.com"">t.omu.k.ba.nk@gmail.com</a>
<a href=""mailto:to.m.u.k.b.ank@gmail.com"">to.m.u.k.b.ank@gmail.com</a>
<a href=""mailto:t.om.u.k.b.a.n.k@gmail.com"">t.om.u.k.b.a.n.k@gmail.com</a>
<a href=""mailto:to.m.u.k.b.an.k@gmail.com"">to.m.u.k.b.an.k@gmail.com</a>
<a href=""mailto:t.o.mu.k.b.a.n.k@gmail.com"">t.o.mu.k.b.a.n.k@gmail.com</a>
<a href=""mailto:t.omu.kbank@gmail.com"">t.omu.kbank@gmail.com</a>
<a href=""mailto:t.o.m.uk.b.a.n.k@gmail.com"">t.o.m.uk.b.a.n.k@gmail.com</a>
<a href=""mailto:tom.u.k.b.a.n.k@gmail.com"">tom.u.k.b.a.n.k@gmail.com</a>
<a href=""mailto:to.mu.k.ba.n.k@gmail.com"">to.mu.k.ba.n.k@gmail.com</a>
<a href=""mailto:tomu.k.bank@gmail.com"">tomu.k.bank@gmail.com</a>
<a href=""mailto:to.m.u.k.bank@gmail.com"">to.m.u.k.bank@gmail.com</a>
<a href=""mailto:to.m.u.kb.ank@gmail.com"">to.m.u.kb.ank@gmail.com</a>
<a href=""mailto:to.m.ukban.k@gmail.com"">to.m.ukban.k@gmail.com</a>
<a href=""mailto:tom.u.k.ban.k@gmail.com"">tom.u.k.ban.k@gmail.com</a>
<a href=""mailto:tomu.kb.a.n.k@gmail.com"">tomu.kb.a.n.k@gmail.com</a>
<a href=""mailto:t.omuk.b.a.nk@gmail.com"">t.omuk.b.a.nk@gmail.com</a>
<a href=""mailto:t.o.m.ukban.k@gmail.com"">t.o.m.ukban.k@gmail.com</a>
<a href=""mailto:to.m.uk.b.ank@gmail.com"">to.m.uk.b.ank@gmail.com</a>
<a href=""mailto:t.o.mu.kb.a.n.k@gmail.com"">t.o.mu.kb.a.n.k@gmail.com</a>
<a href=""mailto:to.m.uk.b.a.n.k@gmail.com"">to.m.uk.b.a.n.k@gmail.com</a>
<a href=""mailto:t.om.ukbank@gmail.com"">t.om.ukbank@gmail.com</a>
<a href=""mailto:to.m.ukb.ank@gmail.com"">to.m.ukb.ank@gmail.com</a>
<a href=""mailto:t.o.muk.ba.nk@gmail.com"">t.o.muk.ba.nk@gmail.com</a>
<a href=""mailto:to.muk.ba.n.k@gmail.com"">to.muk.ba.n.k@gmail.com</a>
<a href=""mailto:t.o.mukba.n.k@gmail.com"">t.o.mukba.n.k@gmail.com</a>
<a href=""mailto:t.o.muk.b.an.k@gmail.com"">t.o.muk.b.an.k@gmail.com</a>
<a href=""mailto:t.o.m.ukb.ank@gmail.com"">t.o.m.ukb.ank@gmail.com</a>
<a href=""mailto:t.o.mu.kban.k@gmail.com"">t.o.mu.kban.k@gmail.com</a>
<a href=""mailto:tomuk.b.a.nk@gmail.com"">tomuk.b.a.nk@gmail.com</a>
<a href=""mailto:t.o.mu.kb.a.nk@gmail.com"">t.o.mu.kb.a.nk@gmail.com</a>
<a href=""mailto:t.o.mu.k.ba.n.k@gmail.com"">t.o.mu.k.ba.n.k@gmail.com</a>
<a href=""mailto:tom.uk.ba.n.k@gmail.com"">tom.uk.ba.n.k@gmail.com</a>"
45n9YZYd,01. Count Real Numbers,veronikaaa86,Java,Wednesday 28th of June 2023 12:08:56 PM CDT,"package associativeArrays;

import java.util.Arrays;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class P01CountRealNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        double[] numbersArr = Arrays
                .stream(scanner.nextLine().split("" ""))
                .mapToDouble(Double::parseDouble)
                .toArray();

        TreeMap<Double, Integer> countMap = new TreeMap<>();

        for (double num : numbersArr) {
            if (!countMap.containsKey(num)) {
                countMap.put(num, 0);
            }

            countMap.put(num, countMap.get(num) + 1);
        }

        for (Map.Entry<Double, Integer> entry : countMap.entrySet()) {
            System.out.printf(""%.0f -> %d%n"", entry.getKey(), entry.getValue());
        }
    }
}
"
pykGheNq,crone_New,DAIM0N0S,PHP,Wednesday 28th of June 2023 11:53:47 AM CDT,"<?php
/*BASE 1*/
$db1=mysqli_connect('localhost','e110063_dbuser','TDef66E#xm','e110063_king');
add_some($db1);
/*END CRONE BD 1*/

/*BASE 2*/
$db2=mysqli_connect('localhost','e110063_dbuser','TDef66E#xm','e110063_king_kui');
add_some($db2);
/*END CRONE BD2*/

/*BASE 3*/
$db3=mysqli_connect('localhost','e110063_dbuser','TDef66E#xm','e110063_king_omf');
add_some($db3);
/*END CRONE BD3*/

/*BASE 4*/

$db4=mysqli_connect('localhost','e110063_dbuser','TDef66E#xm','e110063_king_kui_omf');
add_some($db4);

function add_some($mysql4){
    $mysql4->set_charset('utf8mb4');
    $mysql4->query('SET time_zone = ""+03:00"";');

    $mysql4->begin_transaction();
    $end_date = date('Y-m-d 23:59:59', strtotime('-1 day'));
    $start = date('Y-m-d 00:00:01');
    //var_dump($end_date);
    //var_dump($start);
    try {
        $query = 'select id, user_id, koo_id, location_id, star_time from duty_rosters where end_time is null;';

        foreach ($query as $row){
            $newRecordQuery = mysqli_query($db, 'insert into duty_rosters(user_id, koo_id, location_id, start_time) values(
            '.$row['user_id'].', '.$row['koo_id'].', '.$row['location_id'].', '.$row['start_time'].')');

            echo $newRecordQuery.PHP_EOL;
            $updateOldQuery = mysqli_query($db, 'update duty_rosters set end_time = '.$end_date.' where id = '.$row['id']);

            echo $updateOldQuery.PHP_EOL;
        }

//        php cron_duty.php >> cron.log

        /*$query = $mysql4->query('insert into duty_rosters(user_id, koo_id, location_id, start_time) select user_id, koo_id, location_id, ""' . $start . '"" from duty_rosters where end_time is null;');
        if (!$query) {
            printf(""Errorcode: %d\n"", $mysql4->errno);
        }

        $query = $mysql4->query('update duty_rosters set end_time = ""' . $end_date . '"" where end_time is null and start_time < ""'.$start.'"";');
        if (!$query) {
            printf(""Errorcode: %d\n"", $mysql4->errno);
        }*/
       // var_dump($mysql4->affected_rows);
        $mysql4->commit();
    }catch (\Throwable $throwable){
        $mysql4->rollback();
        die($throwable->getMessage());
    }
}


/*END CRONE BD 4*/

die();"
uX2bhS4F,Untitled,DimitarSerg,JavaScript,Wednesday 28th of June 2023 11:46:56 AM CDT,"/***/ 909:
/***/ (function(module, exports, __webpack_require__) {

""use strict"";

Object.defineProperty(exports, ""__esModule"", { value: true });
exports.parseMetaTooltip = void 0;
const parseMetaTooltip = (linksLength = 1) => {
    var _a, _b, _c;
    try {
        const selectors = {
            cover: [
                { selector: 'meta[property=""twitter:image""]', attribute: 'content' },
                { selector: 'meta[property=""og:image""]', attribute: 'content' },
                { selector: 'meta[itemprop=""image""]', attribute: 'content' },
                { selector: 'meta[itemprop=""image""]', attribute: 'content' }
            ],
            title: [
                { selector: 'meta[property=""twitter:title""]', attribute: 'content' },
                { selector: 'meta[property=""og:title""]', attribute: 'content' },
                { selector: 'meta[itemprop=""name""]', attribute: 'content' },
                { selector: 'title', content: 1 },
                { selector: 'h1', content: 1 }
            ]
        };
        const resp = Object.entries(selectors).reduce((a, [name, selectors]) => {
            const current = selectors
                .map((e) => {
                const element = document.querySelector(e.selector);
                return (element &&
                    ((e.attribute && element.getAttribute(e.attribute)) || (e.content && (element.textContent || '').trim())));
            })
                .filter((e) => e)[0];
            return { ...a, [name]: current };
        }, {});
        try {
            const YT_REGEXP = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
            if (YT_REGEXP.test(window.location.href)) {
                const id = (_a = window.location.href.match(YT_REGEXP)) === null || _a === void 0 ? void 0 : _a[1];
                resp.cover = `https://i.ytimg.com/vi/${id}/hqdefault.jpg`;
                resp.title = (_c = (_b = document.querySelector('h1')) === null || _b === void 0 ? void 0 : _b.textContent) === null || _c === void 0 ? void 0 : _c.trim();
                resp.url = `https://www.youtube.com/watch?v=${id}`;
            }
        }
        catch (e) { }
        resp.weight = 1 / linksLength;
        return resp;
    }
    catch (e) {
        console.error(e);
        return {};
    }
};
exports.parseMetaTooltip = parseMetaTooltip;"
wDffB7cb,BattleTech.AttackDirector.AttackSequence.cs,kregano,C#,Wednesday 28th of June 2023 11:34:05 AM CDT,"using System;
using System.Collections.Generic;
using BattleTech;
using BattleTech.AttackDirectorHelpers;
using fastJSON;
using HBS.Logging;
using Localize;
using UnityEngine;

// Token: 0x02000CDB RID: 3291
public class AttackSequence
{
	// Token: 0x17000D6D RID: 3437
	// (get) Token: 0x06006014 RID: 24596 RVA: 0x001A1B05 File Offset: 0x0019FD05
	// (set) Token: 0x06006015 RID: 24597 RVA: 0x001A1B0D File Offset: 0x0019FD0D
	public AttackDirector Director { get; private set; }

	// Token: 0x17000D6E RID: 3438
	// (get) Token: 0x06006016 RID: 24598 RVA: 0x001A1B16 File Offset: 0x0019FD16
	public int weaponGroupCount
	{
		get
		{
			return this.sortedWeapons.Count;
		}
	}

	// Token: 0x17000D6F RID: 3439
	// (get) Token: 0x06006017 RID: 24599 RVA: 0x001A1B23 File Offset: 0x0019FD23
	public bool HasWeapons
	{
		get
		{
			return this.allSelectedWeapons.Count > 0;
		}
	}

	// Token: 0x17000D70 RID: 3440
	// (get) Token: 0x06006018 RID: 24600 RVA: 0x001A1B33 File Offset: 0x0019FD33
	public int TotalWeaponCount
	{
		get
		{
			return this.allSelectedWeapons.Count;
		}
	}

	// Token: 0x17000D71 RID: 3441
	// (get) Token: 0x06006019 RID: 24601 RVA: 0x001A1B40 File Offset: 0x0019FD40
	// (set) Token: 0x0600601A RID: 24602 RVA: 0x001A1B48 File Offset: 0x0019FD48
	public List<string> allAffectedTargetIds { get; private set; }

	// Token: 0x17000D72 RID: 3442
	// (get) Token: 0x0600601B RID: 24603 RVA: 0x001A1B51 File Offset: 0x0019FD51
	// (set) Token: 0x0600601C RID: 24604 RVA: 0x001A1B59 File Offset: 0x0019FD59
	public bool attackCompletelyMissed { get; private set; }

	// Token: 0x17000D73 RID: 3443
	// (get) Token: 0x0600601D RID: 24605 RVA: 0x001A1B62 File Offset: 0x0019FD62
	// (set) Token: 0x0600601E RID: 24606 RVA: 0x001A1B6A File Offset: 0x0019FD6A
	public bool attackDestroyedAttackerLeg { get; private set; }

	// Token: 0x17000D74 RID: 3444
	// (get) Token: 0x0600601F RID: 24607 RVA: 0x001A1B73 File Offset: 0x0019FD73
	// (set) Token: 0x06006020 RID: 24608 RVA: 0x001A1B7B File Offset: 0x0019FD7B
	public int attackTotalShotsFired { get; private set; }

	// Token: 0x17000D75 RID: 3445
	// (get) Token: 0x06006021 RID: 24609 RVA: 0x001A1B84 File Offset: 0x0019FD84
	// (set) Token: 0x06006022 RID: 24610 RVA: 0x001A1B8C File Offset: 0x0019FD8C
	public int attackTotalShotsHit { get; private set; }

	// Token: 0x17000D76 RID: 3446
	// (get) Token: 0x06006023 RID: 24611 RVA: 0x001A1B95 File Offset: 0x0019FD95
	public float RatioSuccessfulHits
	{
		get
		{
			return (float)this.attackTotalShotsHit / (float)this.attackTotalShotsFired;
		}
	}

	// Token: 0x17000D77 RID: 3447
	// (get) Token: 0x06006024 RID: 24612 RVA: 0x001A1BA6 File Offset: 0x0019FDA6
	// (set) Token: 0x06006025 RID: 24613 RVA: 0x001A1BAE File Offset: 0x0019FDAE
	public bool CoordinatedMesssagesSuccessful { get; private set; }

	// Token: 0x06006026 RID: 24614 RVA: 0x001A1BB8 File Offset: 0x0019FDB8
	public void RecordMechDamage(string mechGUID, int originalHitLocation, WeaponHitInfo hitInfo, ArmorLocation armorLocation, Weapon weapon, float totalDamage, int hitIndex, AttackImpactQuality impactQuality)
	{
		if (this.Director == null || !this.Director.recordStats)
		{
			return;
		}
		AttackDirector.AttackSequence.MechDamage mechDamage = new AttackDirector.AttackSequence.MechDamage();
		mechDamage.mechGUID = mechGUID;
		mechDamage.index = this.recordedMechDamage.Count;
		mechDamage.originalHitLocation = originalHitLocation;
		mechDamage.weaponGroupIndex = hitInfo.attackGroupIndex;
		mechDamage.weaponIndex = hitInfo.attackWeaponIndex;
		mechDamage.hitIndex = hitIndex;
		mechDamage.weaponName = ((weapon != null) ? weapon.Name : ""null"");
		mechDamage.hitLocation = armorLocation;
		mechDamage.impactQuality = impactQuality;
		mechDamage.totalDamage = totalDamage;
		this.recordedMechDamage.Add(mechDamage);
	}

	// Token: 0x06006027 RID: 24615 RVA: 0x001A1C5C File Offset: 0x0019FE5C
	public Dictionary<string, string> GetRecordedMechDamageDictionary()
	{
		this.damageStatsGatherer.Clear();
		for (int i = 0; i < this.recordedMechDamage.Count; i++)
		{
			this.recordedMechDamage[i].AppendToStatsGatherer(this.damageStatsGatherer);
		}
		return this.damageStatsGatherer.GetDictionary();
	}

	// Token: 0x06006028 RID: 24616 RVA: 0x001A1CAC File Offset: 0x0019FEAC
	public AttackSequence(AttackDirector director, AbstractActor attacker, ICombatant target, Vector3 attackPosition, Quaternion attackRotation, int attackSequenceIdx, List<Weapon> selectedWeapons, MeleeAttackType meleeAttackType, int calledShotLocation, bool isMoraleAttack, int id, int stackItemUID)
	{
		this.Director = director;
		this.attacker = attacker;
		this.chosenTarget = target;
		this.attackPosition = attackPosition;
		this.attackRotation = attackRotation;
		this.attackSequenceIdx = attackSequenceIdx;
		this.calledShotLocation = calledShotLocation;
		this.allSelectedWeapons = selectedWeapons;
		this.isMoraleAttack = isMoraleAttack;
		this.id = id;
		this.stackItemUID = stackItemUID;
		this.currentFiringGroup = 0;
		this.cumulativeDamage = 0f;
		this.numTargets = 1;
		if (attacker.team.GUID == director.Combat.LocalPlayerTeamGuid)
		{
			this.previousTeamHealthDifference = attacker.team.CompareTeamHealthPercentages(target.team);
		}
		else
		{
			this.previousTeamHealthDifference = target.team.CompareTeamHealthPercentages(attacker.team);
		}
		this.allWeaponIds = new List<string>();
		for (int i = 0; i < selectedWeapons.Count; i++)
		{
			this.allWeaponIds.Add(selectedWeapons[i].uid);
			if (!selectedWeapons[i].WillFireAtTargetFromPosition(target, attackPosition, attackRotation))
			{
				AttackDirector.AttackSequence.logger.LogWarning(string.Format(""AttackSequence: Weapon {0} is firing at target {1}, but technically cannot fire at that target."", selectedWeapons[i].Name, target.DisplayName));
			}
		}
		this.indirectFire = attacker.HasIndirectLOFToTargetUnit(attackPosition, attackRotation, target, true);
		if (meleeAttackType != MeleeAttackType.NotSet)
		{
			this.isMelee = true;
			this.meleeAttackType = meleeAttackType;
		}
		if (target.GameRep != null)
		{
			target.GameRep.SetVFXColliderEnabled(true);
		}
		this.attackDestroyedWeapon = new Dictionary<string, bool>();
		this.attackDestroyedWeapon.Add(target.GUID, false);
		this.attackCausedAmmoExplosion = new Dictionary<string, bool>();
		this.attackCausedAmmoExplosion.Add(target.GUID, false);
		this.attackContainsDodge = new Dictionary<string, bool>();
		this.attackContainsDodge.Add(target.GUID, false);
		this.attackCrits = new Dictionary<string, int>();
		this.attackCrits.Add(target.GUID, 0);
		this.attackWeaponCrits = new Dictionary<string, List<Weapon>>();
		this.attackWeaponCrits.Add(target.GUID, new List<Weapon>());
		this.attackAmmoCrits = new Dictionary<string, List<AmmunitionBox>>();
		this.attackAmmoCrits.Add(target.GUID, new List<AmmunitionBox>());
		this.attackDidDamage = new Dictionary<string, bool>();
		this.attackDidDamage.Add(target.GUID, false);
		this.attackArmorDamage = new Dictionary<string, float>();
		this.attackArmorDamage.Add(target.GUID, 0f);
		this.lowArmorStruck = new Dictionary<string, bool>();
		this.lowArmorStruck.Add(target.GUID, false);
		this.attackStructureDamage = new Dictionary<string, float>();
		this.attackStructureDamage.Add(target.GUID, 0f);
		this.attackDestroyedLeg = new Dictionary<string, bool>();
		this.attackDestroyedLeg.Add(target.GUID, false);
		this.attackDestroyedAnyLocation = new Dictionary<string, bool>();
		this.attackDestroyedAnyLocation.Add(target.GUID, false);
		this.attackDealtHeatDamage = new Dictionary<string, bool>();
		this.attackDealtHeatDamage.Add(target.GUID, false);
		this.attackCausedKnockdown = new Dictionary<string, bool>();
		this.attackCausedKnockdown.Add(target.GUID, false);
		this.attackCompletelyMissed = true;
		this.attackDestroyedAttackerLeg = false;
		this.attackTotalShotsFired = 0;
		this.attackTotalShotsHit = 0;
		this.allAffectedTargetIds = new List<string>();
		this.AddAffectedTarget(target.GUID);
		this.Init();
	}

	// Token: 0x06006029 RID: 24617 RVA: 0x001A202C File Offset: 0x001A022C
	private void Init()
	{
		MessageCenter messageCenter = this.Director.Combat.MessageCenter;
		messageCenter.AddSubscriber(MessageCenterMessageType.OnAttackSequenceGroupBegin, new ReceiveMessageCenterMessage(this.OnAttackSequenceGroupBegin));
		messageCenter.AddSubscriber(MessageCenterMessageType.OnAttackSequenceFire, new ReceiveMessageCenterMessage(this.OnAttackSequenceFire));
		messageCenter.AddSubscriber(MessageCenterMessageType.OnAttackSequenceWeaponPreFireComplete, new ReceiveMessageCenterMessage(this.OnAttackSequenceWeaponPreFireComplete));
		messageCenter.AddSubscriber(MessageCenterMessageType.OnAttackSequenceImpact, new ReceiveMessageCenterMessage(this.OnAttackSequenceImpact));
		messageCenter.AddSubscriber(MessageCenterMessageType.OnAttackSequenceResolveDamage, new ReceiveMessageCenterMessage(this.OnAttackSequenceResolveDamage));
		messageCenter.AddSubscriber(MessageCenterMessageType.OnAttackSequenceWeaponComplete, new ReceiveMessageCenterMessage(this.OnAttackSequenceWeaponComplete));
		messageCenter.AddSubscriber(MessageCenterMessageType.OnAttackSequenceGroupEnd, new ReceiveMessageCenterMessage(this.OnAttackSequenceGroupEnd));
		this.SortSelectedWeapons();
		this.GenerateRandomCache();
		this.GenerateNumberOfShots();
		this.GenerateToHitInfo();
		this.messageCoordinator.Initialize(this, this.weaponHitInfo);
	}

	// Token: 0x0600602A RID: 24618 RVA: 0x001A20FE File Offset: 0x001A02FE
	private int[] GetMinFudgeCache(int size)
	{
		return this.GetForcedFudgeCache(size, -1);
	}

	// Token: 0x0600602B RID: 24619 RVA: 0x001A2108 File Offset: 0x001A0308
	private int[] GetMaxFudgeCache(int size)
	{
		return this.GetForcedFudgeCache(size, 1);
	}

	// Token: 0x0600602C RID: 24620 RVA: 0x001A2114 File Offset: 0x001A0314
	private int[] GetForcedFudgeCache(int size, int value)
	{
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
		{
			array[i] = value;
		}
		return array;
	}

	// Token: 0x0600602D RID: 24621 RVA: 0x001A213C File Offset: 0x001A033C
	private void GenerateRandomCache()
	{
		int count = this.sortedWeapons.Count;
		this.randomCache = new float[count][][];
		this.randomCacheValuesUsed = new int[count][];
		for (int i = 0; i < count; i++)
		{
			List<Weapon> list = this.sortedWeapons[i];
			int count2 = list.Count;
			float[][] array = new float[count2][];
			int[] array2 = new int[count2];
			for (int j = 0; j < count2; j++)
			{
				int shotsWhenFired = list[j].ShotsWhenFired;
				int num = 6 * shotsWhenFired + 2 + 5;
				array[j] = this.Director.Combat.NetworkRandom.GetRandomCache(num);
				array2[j] = 0;
			}
			this.randomCache[i] = array;
			this.randomCacheValuesUsed[i] = array2;
		}
		this.varianceCache = new int[count][][];
		this.varianceCacheValuesUsed = new int[count][];
		for (int k = 0; k < count; k++)
		{
			List<Weapon> list2 = this.sortedWeapons[k];
			int count3 = list2.Count;
			int[][] array3 = new int[count3][];
			int[] array4 = new int[count3];
			for (int l = 0; l < count3; l++)
			{
				Weapon weapon = list2[l];
				int shotsWhenFired2 = weapon.ShotsWhenFired;
				int damageVariance = weapon.DamageVariance;
				int[] array5 = new int[shotsWhenFired2];
				for (int m = 0; m < shotsWhenFired2; m++)
				{
					int[] fudgeCache = this.Director.Combat.NetworkRandom.GetFudgeCache(damageVariance);
					int num2 = 0;
					for (int n = 0; n < damageVariance; n++)
					{
						num2 += fudgeCache[n];
					}
					array5[m] = num2;
				}
				array3[l] = array5;
				array4[l] = 0;
			}
			this.varianceCache[k] = array3;
			this.varianceCacheValuesUsed[k] = array4;
		}
	}

	// Token: 0x0600602E RID: 24622 RVA: 0x001A2304 File Offset: 0x001A0504
	public float GetRandomNumber(int groupIndex, int weaponIndex)
	{
		float num = 0f;
		float[] array = this.randomCache[groupIndex][weaponIndex];
		int num2 = this.randomCacheValuesUsed[groupIndex][weaponIndex];
		if (num2 >= array.Length)
		{
			if (AttackDirector.hitLogger.IsLogEnabled)
			{
				AttackDirector.hitLogger.Log(string.Format(""???????? Random Values Used for Weapon Group: {0} // Weapon: {1}: {2} / {3} | Returning: {4}"", new object[] { groupIndex, weaponIndex, num2, array.Length, num }));
			}
			return num;
		}
		num = array[num2];
		num2++;
		this.randomCacheValuesUsed[groupIndex][weaponIndex] = num2;
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? Random Value Grabbed for Weapon Group: {0} // Weapon: {1}: [[ {2} ]] | {3} / {4} Values Used"", new object[] { groupIndex, weaponIndex, num, num2, array.Length }));
		}
		return num;
	}

	// Token: 0x0600602F RID: 24623 RVA: 0x001A23F4 File Offset: 0x001A05F4
	public float[] GetRandomNumbers(int groupIndex, int weaponIndex, int amount)
	{
		float[] array = new float[amount];
		for (int i = 0; i < amount; i++)
		{
			array[i] = this.GetRandomNumber(groupIndex, weaponIndex);
		}
		return array;
	}

	// Token: 0x06006030 RID: 24624 RVA: 0x001A2420 File Offset: 0x001A0620
	public int GetVarianceValue(int groupIndex, int weaponIndex, Weapon weapon)
	{
		int num = 0;
		int[] array = this.varianceCache[groupIndex][weaponIndex];
		int num2 = this.varianceCacheValuesUsed[groupIndex][weaponIndex];
		if (num2 >= array.Length)
		{
			if (AttackDirector.damageLogger.IsLogEnabled)
			{
				AttackDirector.damageLogger.Log(string.Format(""Variance values for weapon group {0} weapon {1} are all used! Only {2} were created. Returning {3}"", new object[] { groupIndex, weaponIndex, array.Length, num }));
			}
			return num;
		}
		num = array[num2];
		num2++;
		this.varianceCacheValuesUsed[groupIndex][weaponIndex] = num2;
		return num;
	}

	// Token: 0x06006031 RID: 24625 RVA: 0x001A24B0 File Offset: 0x001A06B0
	public int[] GetVarianceSums(int groupIndex, int weaponIndex, int amount, Weapon weapon)
	{
		if (AttackDirector.damageLogger.IsLogEnabled)
		{
			AttackDirector.damageLogger.Log(string.Format(""------------------------------------------------------------- Creating an array of {0} Variance value(s) for {1} (ID {2})"", amount, weapon.Name, weaponIndex));
		}
		int[] array = new int[amount];
		for (int i = 0; i < amount; i++)
		{
			array[i] = this.GetVarianceValue(groupIndex, weaponIndex, weapon);
		}
		if (AttackDirector.damageLogger.IsLogEnabled)
		{
			string text = ""Variance values:"";
			for (int j = 0; j < amount; j++)
			{
				text = string.Format(""{0} {1}"", text, array[j]);
			}
			AttackDirector.damageLogger.Log(text);
		}
		return array;
	}

	// Token: 0x06006032 RID: 24626 RVA: 0x001A2550 File Offset: 0x001A0750
	private void GenerateNumberOfShots()
	{
		int count = this.sortedWeapons.Count;
		this.numberOfShots = new int[count][];
		for (int i = 0; i < count; i++)
		{
			List<Weapon> list = this.sortedWeapons[i];
			int count2 = list.Count;
			int[] array = new int[count2];
			for (int j = 0; j < count2; j++)
			{
				Weapon weapon = list[j];
				array[j] = -1;
				if (weapon.WillFire)
				{
					array[j] = 0;
					int num = weapon.PreFireWeapon(this.stackItemUID);
					if (num >= 1)
					{
						array[j] = num;
					}
				}
			}
			this.numberOfShots[i] = array;
		}
	}

	// Token: 0x06006033 RID: 24627 RVA: 0x001A25F4 File Offset: 0x001A07F4
	private void GenerateToHitInfo()
	{
		int count = this.sortedWeapons.Count;
		this.weaponHitInfo = new WeaponHitInfo?[count][];
		float num = 0f;
		for (int i = 0; i < count; i++)
		{
			List<Weapon> list = this.sortedWeapons[i];
			int count2 = list.Count;
			WeaponHitInfo?[] array = new WeaponHitInfo?[count2];
			int[] array2 = this.numberOfShots[i];
			for (int j = 0; j < count2; j++)
			{
				Weapon weapon = list[j];
				array[j] = null;
				int num2 = array2[j];
				if (num2 != -1 && num2 != 0)
				{
					WeaponHitInfo weaponHitInfo = this.GenerateHitInfo(weapon, i, j, num2, this.indirectFire, num);
					this.AddAllAffectedTargets(weaponHitInfo);
					array[j] = new WeaponHitInfo?(weaponHitInfo);
				}
			}
			this.weaponHitInfo[i] = array;
		}
	}

	// Token: 0x06006034 RID: 24628 RVA: 0x001A26CC File Offset: 0x001A08CC
	public void Cleanup()
	{
		MessageCenter messageCenter = this.Director.Combat.MessageCenter;
		messageCenter.RemoveSubscriber(MessageCenterMessageType.OnAttackSequenceGroupBegin, new ReceiveMessageCenterMessage(this.OnAttackSequenceGroupBegin));
		messageCenter.RemoveSubscriber(MessageCenterMessageType.OnAttackSequenceFire, new ReceiveMessageCenterMessage(this.OnAttackSequenceFire));
		messageCenter.RemoveSubscriber(MessageCenterMessageType.OnAttackSequenceWeaponPreFireComplete, new ReceiveMessageCenterMessage(this.OnAttackSequenceWeaponPreFireComplete));
		messageCenter.RemoveSubscriber(MessageCenterMessageType.OnAttackSequenceImpact, new ReceiveMessageCenterMessage(this.OnAttackSequenceImpact));
		messageCenter.RemoveSubscriber(MessageCenterMessageType.OnAttackSequenceResolveDamage, new ReceiveMessageCenterMessage(this.OnAttackSequenceResolveDamage));
		messageCenter.RemoveSubscriber(MessageCenterMessageType.OnAttackSequenceWeaponComplete, new ReceiveMessageCenterMessage(this.OnAttackSequenceWeaponComplete));
		messageCenter.RemoveSubscriber(MessageCenterMessageType.OnAttackSequenceGroupEnd, new ReceiveMessageCenterMessage(this.OnAttackSequenceGroupEnd));
	}

	// Token: 0x06006035 RID: 24629 RVA: 0x001A2774 File Offset: 0x001A0974
	public void FlagAttackDestroyedWeapon(string id)
	{
		this.AddAffectedTarget(id);
		this.attackDestroyedWeapon[id] = true;
	}

	// Token: 0x06006036 RID: 24630 RVA: 0x001A278C File Offset: 0x001A098C
	public bool GetAttackDestroyedWeapon(string id)
	{
		bool flag = false;
		this.attackDestroyedWeapon.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x06006037 RID: 24631 RVA: 0x001A27AB File Offset: 0x001A09AB
	public void FlagAttackCausedAmmoExplosion(string id)
	{
		this.AddAffectedTarget(id);
		this.attackCausedAmmoExplosion[id] = true;
	}

	// Token: 0x06006038 RID: 24632 RVA: 0x001A27C4 File Offset: 0x001A09C4
	public bool GetAttackCausedAmmoExplosion(string id)
	{
		bool flag = false;
		this.attackCausedAmmoExplosion.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x06006039 RID: 24633 RVA: 0x001A27E3 File Offset: 0x001A09E3
	public void FlagAttackContainsDodge(string id)
	{
		this.AddAffectedTarget(id);
		this.attackContainsDodge[id] = true;
	}

	// Token: 0x0600603A RID: 24634 RVA: 0x001A27FC File Offset: 0x001A09FC
	public bool GetAttackContainsDodge(string id)
	{
		bool flag = false;
		this.attackContainsDodge.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x0600603B RID: 24635 RVA: 0x001A281B File Offset: 0x001A0A1B
	public void FlagAttackDestroyedLeg(string id)
	{
		this.AddAffectedTarget(id);
		this.attackDestroyedLeg[id] = true;
	}

	// Token: 0x0600603C RID: 24636 RVA: 0x001A2834 File Offset: 0x001A0A34
	public bool GetAttackDestroyedLeg(string id)
	{
		bool flag = false;
		this.attackDestroyedLeg.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x0600603D RID: 24637 RVA: 0x001A2853 File Offset: 0x001A0A53
	public void FlagAttackDestroyedAttackerLeg()
	{
		this.attackDestroyedAttackerLeg = true;
	}

	// Token: 0x0600603E RID: 24638 RVA: 0x001A285C File Offset: 0x001A0A5C
	public void FlagAttackDestroyedAnyLocation(string id)
	{
		this.AddAffectedTarget(id);
		this.attackDestroyedAnyLocation[id] = true;
	}

	// Token: 0x0600603F RID: 24639 RVA: 0x001A2874 File Offset: 0x001A0A74
	public bool GetAttackDestroyedAnyLocation(string id)
	{
		bool flag = false;
		this.attackDestroyedAnyLocation.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x06006040 RID: 24640 RVA: 0x001A2893 File Offset: 0x001A0A93
	public void FlagAttackDidDamage(string id)
	{
		this.AddAffectedTarget(id);
		this.attackDidDamage[id] = true;
	}

	// Token: 0x06006041 RID: 24641 RVA: 0x001A28AC File Offset: 0x001A0AAC
	public bool GetAttackDidDamage(string id)
	{
		bool flag = false;
		this.attackDidDamage.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x06006042 RID: 24642 RVA: 0x001A28CC File Offset: 0x001A0ACC
	public void FlagArmorDamage(string id, float amount)
	{
		this.AddAffectedTarget(id);
		if (!this.attackArmorDamage.ContainsKey(id))
		{
			this.attackArmorDamage.Add(id, 0f);
		}
		float num = this.attackArmorDamage[id] + amount;
		this.attackArmorDamage[id] = num;
	}

	// Token: 0x06006043 RID: 24643 RVA: 0x001A291C File Offset: 0x001A0B1C
	public float GetArmorDamageDealt(string id)
	{
		float num = 0f;
		this.attackArmorDamage.TryGetValue(id, out num);
		return num;
	}

	// Token: 0x06006044 RID: 24644 RVA: 0x001A293F File Offset: 0x001A0B3F
	public void FlagLowArmorStruck(string id)
	{
		this.AddAffectedTarget(id);
		this.lowArmorStruck[id] = true;
	}

	// Token: 0x06006045 RID: 24645 RVA: 0x001A2958 File Offset: 0x001A0B58
	public bool GetLowArmorStruck(string id)
	{
		bool flag = false;
		this.lowArmorStruck.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x06006046 RID: 24646 RVA: 0x001A2978 File Offset: 0x001A0B78
	public void FlagStructureDamage(string id, float amount)
	{
		this.AddAffectedTarget(id);
		if (!this.attackStructureDamage.ContainsKey(id))
		{
			this.attackStructureDamage.Add(id, 0f);
		}
		float num = this.attackStructureDamage[id] + amount;
		this.attackStructureDamage[id] = num;
	}

	// Token: 0x06006047 RID: 24647 RVA: 0x001A29C8 File Offset: 0x001A0BC8
	public float GetStructureDamageDealt(string id)
	{
		float num = 0f;
		this.attackStructureDamage.TryGetValue(id, out num);
		return num;
	}

	// Token: 0x06006048 RID: 24648 RVA: 0x001A29EB File Offset: 0x001A0BEB
	public void FlagAttackDidHeatDamage(string id)
	{
		this.AddAffectedTarget(id);
		this.attackDealtHeatDamage[id] = true;
	}

	// Token: 0x06006049 RID: 24649 RVA: 0x001A2A04 File Offset: 0x001A0C04
	public bool GetAttackDidHeatDamage(string id)
	{
		bool flag = false;
		this.attackDealtHeatDamage.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x0600604A RID: 24650 RVA: 0x001A2A23 File Offset: 0x001A0C23
	public void FlagAttackCausedKnockdown(string id)
	{
		this.AddAffectedTarget(id);
		this.attackCausedKnockdown[id] = true;
	}

	// Token: 0x0600604B RID: 24651 RVA: 0x001A2A3C File Offset: 0x001A0C3C
	public bool GetAttackCausedKnockdown(string id)
	{
		bool flag = false;
		this.attackCausedKnockdown.TryGetValue(id, out flag);
		return flag;
	}

	// Token: 0x0600604C RID: 24652 RVA: 0x001A2A5C File Offset: 0x001A0C5C
	public void FlagShotHit()
	{
		int num = this.attackTotalShotsFired + 1;
		this.attackTotalShotsFired = num;
		num = this.attackTotalShotsHit + 1;
		this.attackTotalShotsHit = num;
	}

	// Token: 0x0600604D RID: 24653 RVA: 0x001A2A8C File Offset: 0x001A0C8C
	public void FlagShotMissed()
	{
		int num = this.attackTotalShotsFired + 1;
		this.attackTotalShotsFired = num;
	}

	// Token: 0x0600604E RID: 24654 RVA: 0x001A2AAC File Offset: 0x001A0CAC
	public void FlagAttackScoredCrit(string id, Weapon weapon, AmmunitionBox ammoBox)
	{
		this.AddAffectedTarget(id);
		if (!this.attackCrits.ContainsKey(id))
		{
			this.attackCrits.Add(id, 0);
		}
		int num = this.attackCrits[id] + 1;
		this.attackCrits[id] = num;
		if (weapon != null)
		{
			if (!this.attackWeaponCrits.ContainsKey(id))
			{
				this.attackWeaponCrits.Add(id, new List<Weapon>());
			}
			List<Weapon> list = this.attackWeaponCrits[id];
			if (!list.Contains(weapon))
			{
				list.Add(weapon);
			}
			this.attackWeaponCrits[id] = list;
		}
		if (ammoBox != null)
		{
			if (!this.attackAmmoCrits.ContainsKey(id))
			{
				this.attackAmmoCrits.Add(id, new List<AmmunitionBox>());
			}
			List<AmmunitionBox> list2 = this.attackAmmoCrits[id];
			if (!list2.Contains(ammoBox))
			{
				list2.Add(ammoBox);
			}
			this.attackAmmoCrits[id] = list2;
		}
	}

	// Token: 0x0600604F RID: 24655 RVA: 0x001A2B90 File Offset: 0x001A0D90
	public int GetAttackCritsCount(string id)
	{
		int num = 0;
		this.attackCrits.TryGetValue(id, out num);
		return num;
	}

	// Token: 0x06006050 RID: 24656 RVA: 0x001A2BB0 File Offset: 0x001A0DB0
	public List<Weapon> GetAttackWeaponCrits(string id)
	{
		List<Weapon> list = new List<Weapon>();
		if (this.attackWeaponCrits.TryGetValue(id, out list))
		{
			return list;
		}
		return new List<Weapon>();
	}

	// Token: 0x06006051 RID: 24657 RVA: 0x001A2BDC File Offset: 0x001A0DDC
	public List<AmmunitionBox> GetAttackAmmoCrits(string id)
	{
		List<AmmunitionBox> list = new List<AmmunitionBox>();
		if (this.attackAmmoCrits.TryGetValue(id, out list))
		{
			return list;
		}
		return new List<AmmunitionBox>();
	}

	// Token: 0x06006052 RID: 24658 RVA: 0x001A2C06 File Offset: 0x001A0E06
	public void AddAffectedTarget(string id)
	{
		if (!string.IsNullOrEmpty(id) && !this.allAffectedTargetIds.Contains(id))
		{
			this.allAffectedTargetIds.Add(id);
		}
	}

	// Token: 0x06006053 RID: 24659 RVA: 0x001A2C2C File Offset: 0x001A0E2C
	public void AddAllAffectedTargets(WeaponHitInfo hitInfo)
	{
		if (hitInfo.secondaryTargetIds == null)
		{
			return;
		}
		foreach (string text in hitInfo.secondaryTargetIds)
		{
			this.AddAffectedTarget(text);
		}
	}

	// Token: 0x06006054 RID: 24660 RVA: 0x001A2C62 File Offset: 0x001A0E62
	public Weapon GetWeapon(int groupIdx, int weaponIdx)
	{
		return this.sortedWeapons[groupIdx][weaponIdx];
	}

	// Token: 0x06006055 RID: 24661 RVA: 0x001A2C78 File Offset: 0x001A0E78
	private WeaponHitInfo GenerateHitInfo(Weapon weapon, int groupIdx, int weaponIdx, int numberOfShots, bool indirectFire, float dodgedDamage)
	{
		WeaponHitInfo weaponHitInfo = default(WeaponHitInfo);
		weaponHitInfo.attackerId = this.attacker.GUID;
		weaponHitInfo.targetId = this.chosenTarget.GUID;
		weaponHitInfo.numberOfShots = numberOfShots;
		weaponHitInfo.stackItemUID = this.stackItemUID;
		weaponHitInfo.attackSequenceId = this.id;
		weaponHitInfo.attackGroupIndex = groupIdx;
		weaponHitInfo.attackWeaponIndex = weaponIdx;
		weaponHitInfo.toHitRolls = new float[numberOfShots];
		weaponHitInfo.locationRolls = new float[numberOfShots];
		weaponHitInfo.dodgeRolls = new float[numberOfShots];
		weaponHitInfo.dodgeSuccesses = new bool[numberOfShots];
		weaponHitInfo.hitLocations = new int[numberOfShots];
		weaponHitInfo.hitPositions = new Vector3[numberOfShots];
		weaponHitInfo.hitVariance = new int[numberOfShots];
		weaponHitInfo.hitQualities = new AttackImpactQuality[numberOfShots];
		weaponHitInfo.secondaryTargetIds = new string[numberOfShots];
		weaponHitInfo.secondaryHitLocations = new int[numberOfShots];
		weaponHitInfo.attackDirections = new AttackDirection[numberOfShots];
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			Vector3 vector;
			LineOfFireLevel lineOfFire = this.Director.Combat.LOS.GetLineOfFire(this.attacker, this.attackPosition, this.chosenTarget, this.chosenTarget.CurrentPosition, this.chosenTarget.CurrentRotation, out vector);
			float allModifiers = this.Director.Combat.ToHit.GetAllModifiers(this.attacker, weapon, this.chosenTarget, this.attackPosition + this.attacker.HighestLOSPosition, this.chosenTarget.TargetPosition, lineOfFire, this.isMoraleAttack);
			string allModifiersDescription = this.Director.Combat.ToHit.GetAllModifiersDescription(this.attacker, weapon, this.chosenTarget, this.attackPosition + this.attacker.HighestLOSPosition, this.chosenTarget.TargetPosition, lineOfFire, this.isMoraleAttack);
			bool pilot = this.attacker.GetPilot() != null;
			AttackDirector.hitLogger.Log(string.Format(""======================================== Unit Firing: {0} | Weapon: {1} | Shots: {2}"", this.attacker.DisplayName, weapon.Name, numberOfShots));
			AttackDirector.hitLogger.Log(string.Format(""======================================== Hit Info: GROUP {0} | ID {1}"", groupIdx, weaponIdx));
			AttackDirector.hitLogger.Log(string.Format(""======================================== MODIFIERS: {0}... FINAL: [[ {1} ]] "", allModifiersDescription, allModifiers));
			if (pilot)
			{
				AttackDirector.hitLogger.Log(this.Director.Combat.ToHit.GetBaseToHitChanceDesc(this.attacker));
			}
			else
			{
				AttackDirector.hitLogger.Log(string.Format(""======================================== Gunnery Check: NO PILOT"", Array.Empty<object>()));
			}
		}
		float num = this.Director.Combat.ToHit.GetToHitChance(this.attacker, weapon, this.chosenTarget, this.attackPosition, this.chosenTarget.CurrentPosition, this.numTargets, this.meleeAttackType, this.isMoraleAttack);
		if (Mech.TEST_KNOCKDOWN)
		{
			num = 1f;
		}
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""======================================== HIT CHANCE: [[ {0:P2} ]]"", num));
		}
		switch (weapon.Type)
		{
		case WeaponType.Autocannon:
		case WeaponType.Gauss:
		case WeaponType.Laser:
		case WeaponType.PPC:
		case WeaponType.Flamer:
		case WeaponType.Melee:
		case WeaponType.COIL:
			this.GetIndividualHits(ref weaponHitInfo, groupIdx, weaponIdx, weapon, num, dodgedDamage);
			return weaponHitInfo;
		case WeaponType.LRM:
			this.GetClusteredHits(ref weaponHitInfo, groupIdx, weaponIdx, weapon, num, dodgedDamage);
			return weaponHitInfo;
		case WeaponType.SRM:
			this.GetIndividualHits(ref weaponHitInfo, groupIdx, weaponIdx, weapon, num, dodgedDamage);
			return weaponHitInfo;
		case WeaponType.MachineGun:
			this.GetIndividualHits(ref weaponHitInfo, groupIdx, weaponIdx, weapon, num, dodgedDamage);
			return weaponHitInfo;
		}
		AttackDirector.attackLogger.LogError(string.Format(""GenerateHitInfo found invalid weapon type: {0}, using basic hit info"", weapon.Type));
		this.GetIndividualHits(ref weaponHitInfo, groupIdx, weaponIdx, weapon, num, dodgedDamage);
		return weaponHitInfo;
	}

	// Token: 0x17000D78 RID: 3448
	// (get) Token: 0x06006056 RID: 24662 RVA: 0x001A3041 File Offset: 0x001A1241
	public bool IsBreachingShot
	{
		get
		{
			return this.attacker.HasBreachingShotAbility && this.TotalWeaponCount == 1 && this.allSelectedWeapons[0].Type != WeaponType.Melee;
		}
	}

	// Token: 0x06006057 RID: 24663 RVA: 0x001A3074 File Offset: 0x001A1274
	private float GetCorrectedRoll(float roll, Team team)
	{
		float num = roll;
		if (AttackDirector.AttackSequence.UseWeightedHitNumbers)
		{
			float num2 = roll * 1.6f - 0.8f;
			num = (num2 * num2 * num2 + 0.5f) / 2f + roll / 2f;
		}
		if (AttackDirector.AttackSequence.PrintDebugInfo)
		{
			AttackDirector.attackLogger.Log(string.Format(""Roll correction: {0}/{1}"", roll, num));
		}
		if (team != null)
		{
			num -= team.StreakBreakingValue;
		}
		return num;
	}

	// Token: 0x06006058 RID: 24664 RVA: 0x001A30E8 File Offset: 0x001A12E8
	private void GetIndividualHits(ref WeaponHitInfo hitInfo, int groupIdx, int weaponIdx, Weapon weapon, float toHitChance, float prevDodgedDamage)
	{
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? RANDOM HIT ROLLS (GetIndividualHits): Weapon Group: {0} // Weapon: {1}"", groupIdx, weaponIdx));
		}
		hitInfo.toHitRolls = this.GetRandomNumbers(groupIdx, weaponIdx, hitInfo.numberOfShots);
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? RANDOM LOCATION ROLLS (GetIndividualHits): Weapon Group: {0} // Weapon: {1}"", groupIdx, weaponIdx));
		}
		hitInfo.locationRolls = this.GetRandomNumbers(groupIdx, weaponIdx, hitInfo.numberOfShots);
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? DODGE ROLLS (GetIndividualHits): Weapon Group: {0} // Weapon: {1}"", groupIdx, weaponIdx));
		}
		hitInfo.dodgeRolls = this.GetRandomNumbers(groupIdx, weaponIdx, hitInfo.numberOfShots);
		hitInfo.hitVariance = this.GetVarianceSums(groupIdx, weaponIdx, hitInfo.numberOfShots, weapon);
		AbstractActor abstractActor = this.chosenTarget as AbstractActor;
		Team team = ((weapon != null && weapon.parent != null && weapon.parent.team != null) ? weapon.parent.team : null);
		float num = this.attacker.CalledShotBonusMultiplier;
		for (int i = 0; i < hitInfo.numberOfShots; i++)
		{
			float correctedRoll = this.GetCorrectedRoll(hitInfo.toHitRolls[i], team);
			bool flag = correctedRoll <= toHitChance;
			if (team != null)
			{
				team.ProcessRandomRoll(toHitChance, flag);
			}
			bool flag2 = false;
			if (abstractActor != null)
			{
				flag2 = abstractActor.CheckDodge(this.attacker, weapon, hitInfo, i, this.IsBreachingShot);
			}
			if (flag && flag2)
			{
				hitInfo.dodgeSuccesses[i] = true;
				this.FlagAttackContainsDodge(abstractActor.GUID);
			}
			else
			{
				hitInfo.dodgeSuccesses[i] = false;
			}
			if (AttackDirector.attackLogger.IsLogEnabled)
			{
				string text = string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Roll Value: {3}"", new object[] { this.id, weaponIdx, i, correctedRoll });
				AttackDirector.attackLogger.Log(text);
			}
			if (flag && !flag2)
			{
				hitInfo.hitLocations[i] = this.chosenTarget.GetHitLocation(this.attacker, this.attackPosition, hitInfo.locationRolls[i], this.calledShotLocation, num);
				num = Mathf.Lerp(num, 1f, this.Director.Combat.Constants.HitTables.CalledShotBonusDegradeLerpFactor);
				if (AttackDirector.attackLogger.IsLogEnabled)
				{
					AttackDirector.attackLogger.Log(string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Hit! Location: {3}"", new object[]
					{
						this.id,
						weaponIdx,
						i,
						hitInfo.hitLocations[i]
					}));
				}
				if (AttackDirector.hitminLogger.IsLogEnabled)
				{
					AttackDirector.hitminLogger.Log(string.Format(""WEAPON: {0} - SHOT: {1} Hits! ////// HEX VAL {2}"", weapon.Name, i, hitInfo.hitLocations[i]));
				}
				hitInfo.hitQualities[i] = this.Director.Combat.ToHit.GetBlowQuality(this.attacker, this.attackPosition, weapon, this.chosenTarget, this.meleeAttackType, this.IsBreachingShot);
				this.FlagShotHit();
			}
			else
			{
				hitInfo.hitLocations[i] = 0;
				if (AttackDirector.attackLogger.IsLogEnabled)
				{
					AttackDirector.attackLogger.Log(string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Miss!"", this.id, weaponIdx, i));
				}
				if (AttackDirector.hitminLogger.IsLogEnabled)
				{
					AttackDirector.hitminLogger.Log(string.Format(""WEAPON: {0} - SHOT: {1} Misses!"", weapon.Name, i));
				}
				this.FlagShotMissed();
			}
			hitInfo.hitPositions[i] = this.chosenTarget.GetImpactPosition(this.attacker, this.attackPosition, weapon, ref hitInfo.hitLocations[i], ref hitInfo.attackDirections[i], ref hitInfo.secondaryTargetIds[i], ref hitInfo.secondaryHitLocations[i]);
			this.RefreshHitQualitiesForSecondaryTargets(ref hitInfo, weapon, i);
		}
	}

	// Token: 0x06006059 RID: 24665 RVA: 0x001A34F8 File Offset: 0x001A16F8
	private void GetClusteredHits(ref WeaponHitInfo hitInfo, int groupIdx, int weaponIdx, Weapon weapon, float toHitChance, float prevDodgedDamage)
	{
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? RANDOM HIT ROLLS (GetClusteredHits): Weapon Group: {0} // Weapon: {1}"", groupIdx, weaponIdx));
		}
		hitInfo.toHitRolls = this.GetRandomNumbers(groupIdx, weaponIdx, hitInfo.numberOfShots);
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? RANDOM LOCATION ROLLS (GetClusteredHits): Weapon Group: {0} // Weapon: {1}"", groupIdx, weaponIdx));
		}
		hitInfo.locationRolls = this.GetRandomNumbers(groupIdx, weaponIdx, hitInfo.numberOfShots);
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? DODGE ROLLS (GetClusteredHits): Weapon Group: {0} // Weapon: {1}"", groupIdx, weaponIdx));
		}
		hitInfo.dodgeRolls = this.GetRandomNumbers(groupIdx, weaponIdx, hitInfo.numberOfShots);
		hitInfo.hitVariance = this.GetVarianceSums(groupIdx, weaponIdx, hitInfo.numberOfShots, weapon);
		int num = 0;
		float num2 = 1f + weapon.ClusteringModifier;
		float num3 = 1f;
		AbstractActor abstractActor = this.chosenTarget as AbstractActor;
		Team team = ((weapon != null && weapon.parent != null && weapon.parent.team != null) ? weapon.parent.team : null);
		for (int i = 0; i < hitInfo.numberOfShots; i++)
		{
			bool flag = this.GetCorrectedRoll(hitInfo.toHitRolls[i], team) <= toHitChance;
			if (team != null)
			{
				team.ProcessRandomRoll(toHitChance, flag);
			}
			bool flag2 = false;
			if (abstractActor != null)
			{
				flag2 = abstractActor.CheckDodge(this.attacker, weapon, hitInfo, i, this.IsBreachingShot);
			}
			if (flag && flag2)
			{
				hitInfo.dodgeSuccesses[i] = true;
				this.FlagAttackContainsDodge(abstractActor.GUID);
			}
			else
			{
				hitInfo.dodgeSuccesses[i] = false;
			}
			if (flag && !flag2)
			{
				if (num == 0)
				{
					num = this.chosenTarget.GetHitLocation(this.attacker, this.attackPosition, hitInfo.locationRolls[i], this.calledShotLocation, this.attacker.CalledShotBonusMultiplier);
					hitInfo.hitLocations[i] = num;
					if (AttackDirector.attackLogger.IsLogEnabled)
					{
						AttackDirector.attackLogger.Log(string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Initial clustered hit! Location: {3}"", new object[]
						{
							this.id,
							weaponIdx,
							i,
							hitInfo.hitLocations[i]
						}));
					}
					if (AttackDirector.hitminLogger.IsLogEnabled)
					{
						AttackDirector.hitminLogger.Log(string.Format(""WEAPON: {0} - SHOT: {1} Hits! ////// INITIAL HIT - HEX VAL {2}"", weapon.Name, i, hitInfo.hitLocations[i]));
					}
				}
				else
				{
					hitInfo.hitLocations[i] = this.chosenTarget.GetAdjacentHitLocation(this.attackPosition, hitInfo.locationRolls[i], num, num2, num3);
					if (AttackDirector.attackLogger.IsLogEnabled)
					{
						AttackDirector.attackLogger.Log(string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Clustered hit! Location: {3}"", new object[]
						{
							this.id,
							weaponIdx,
							i,
							hitInfo.hitLocations[i]
						}));
					}
					if (AttackDirector.hitminLogger.IsLogEnabled)
					{
						AttackDirector.hitminLogger.Log(string.Format(""WEAPON: {0} - SHOT: {1} Hits! ////// CLUSTER HIT - HEX VAL {2}"", weapon.Name, i, hitInfo.hitLocations[i]));
					}
				}
				hitInfo.hitQualities[i] = this.Director.Combat.ToHit.GetBlowQuality(this.attacker, this.attackPosition, weapon, this.chosenTarget, this.meleeAttackType, this.IsBreachingShot);
				this.FlagShotHit();
			}
			else
			{
				hitInfo.hitLocations[i] = 0;
				if (AttackDirector.attackLogger.IsLogEnabled)
				{
					AttackDirector.attackLogger.Log(string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Miss!"", new object[]
					{
						this.id,
						weaponIdx,
						i,
						hitInfo.hitLocations[i]
					}));
				}
				if (AttackDirector.hitminLogger.IsLogEnabled)
				{
					AttackDirector.hitminLogger.Log(string.Format(""WEAPON: {0} - SHOT: {1} Misses!"", weapon.Name, i));
				}
				this.FlagShotMissed();
			}
			hitInfo.hitPositions[i] = this.chosenTarget.GetImpactPosition(this.attacker, this.attackPosition, weapon, ref hitInfo.hitLocations[i], ref hitInfo.attackDirections[i], ref hitInfo.secondaryTargetIds[i], ref hitInfo.secondaryHitLocations[i]);
			this.RefreshHitQualitiesForSecondaryTargets(ref hitInfo, weapon, i);
		}
	}

	// Token: 0x0600605A RID: 24666 RVA: 0x001A39A4 File Offset: 0x001A1BA4
	private void GetSingleClusteredHit(ref WeaponHitInfo hitInfo, int groupIdx, int weaponIdx, Weapon weapon, float toHitChance, float originalMultiplier = 1f, float adjacentMultiplier = 1f)
	{
		float randomNumber = this.GetRandomNumber(groupIdx, weaponIdx);
		for (int i = 0; i < hitInfo.numberOfShots; i++)
		{
			hitInfo.toHitRolls[i] = randomNumber;
		}
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? RANDOM LOCATION ROLLS (GetSingleClusteredHit): Weapon Group: {0} // Weapon: {1}"", groupIdx, weaponIdx));
		}
		hitInfo.locationRolls = this.GetRandomNumbers(groupIdx, weaponIdx, hitInfo.numberOfShots);
		if (AttackDirector.hitLogger.IsLogEnabled)
		{
			AttackDirector.hitLogger.Log(string.Format(""???????? DODGE ROLLS (GetSingleClusteredHit): Weapon Group: {0} // Weapon: {1}"", groupIdx, weaponIdx));
		}
		hitInfo.dodgeRolls = this.GetRandomNumbers(groupIdx, weaponIdx, hitInfo.numberOfShots);
		hitInfo.hitVariance = this.GetVarianceSums(groupIdx, weaponIdx, hitInfo.numberOfShots, weapon);
		int num = 0;
		AbstractActor abstractActor = this.chosenTarget as AbstractActor;
		for (int j = 0; j < hitInfo.numberOfShots; j++)
		{
			bool flag = hitInfo.toHitRolls[j] <= toHitChance;
			bool flag2 = abstractActor != null && abstractActor.CheckDodge(this.attacker, weapon, hitInfo, j, this.IsBreachingShot);
			if (flag && flag2)
			{
				hitInfo.dodgeSuccesses[j] = true;
				this.FlagAttackContainsDodge(abstractActor.GUID);
			}
			else
			{
				hitInfo.dodgeSuccesses[j] = false;
			}
			if (flag && !flag2)
			{
				if (num == 0)
				{
					num = this.chosenTarget.GetHitLocation(this.attacker, this.attackPosition, hitInfo.locationRolls[j], this.calledShotLocation, this.attacker.CalledShotBonusMultiplier);
					hitInfo.hitLocations[j] = num;
					if (AttackDirector.attackLogger.IsLogEnabled)
					{
						AttackDirector.attackLogger.Log(string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Initial single clustered hit! Location: {3}"", new object[]
						{
							this.id,
							weaponIdx,
							j,
							hitInfo.hitLocations[j]
						}));
					}
					if (AttackDirector.hitminLogger.IsLogEnabled)
					{
						AttackDirector.hitminLogger.Log(string.Format(""WEAPON: {0} - SHOT: {1} Hits! ////// INITIAL HIT - HEX VAL {2}"", weapon.Name, j, hitInfo.hitLocations[j]));
					}
				}
				else
				{
					this.chosenTarget.GetAdjacentHitLocation(this.attackPosition, hitInfo.locationRolls[j], num, originalMultiplier, adjacentMultiplier);
					if (AttackDirector.attackLogger.IsLogEnabled)
					{
						AttackDirector.attackLogger.Log(string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Single clustered hit! Location: {3}"", new object[]
						{
							this.id,
							weaponIdx,
							j,
							hitInfo.hitLocations[j]
						}));
					}
					if (AttackDirector.hitminLogger.IsLogEnabled)
					{
						AttackDirector.hitminLogger.Log(string.Format(""WEAPON: {0} - SHOT: {1} Hits! ////// CLUSTER HIT - HEX VAL {2}"", weapon.Name, j, hitInfo.hitLocations[j]));
					}
				}
				hitInfo.hitQualities[j] = this.Director.Combat.ToHit.GetBlowQuality(this.attacker, this.attackPosition, weapon, this.chosenTarget, this.meleeAttackType, this.IsBreachingShot);
				this.FlagShotHit();
			}
			else
			{
				hitInfo.hitLocations[j] = 0;
				if (AttackDirector.attackLogger.IsLogEnabled)
				{
					AttackDirector.attackLogger.Log(string.Format(""SEQ:{0}: WEAP:{1} SHOT:{2} Single clustered miss!"", this.id, weaponIdx, j));
				}
				if (AttackDirector.hitminLogger.IsLogEnabled)
				{
					AttackDirector.hitminLogger.Log(string.Format(""WEAPON: {0} - SHOT: {1} Misses!"", weapon.Name, j));
				}
				this.FlagShotMissed();
			}
			hitInfo.hitPositions[j] = this.chosenTarget.GetImpactPosition(this.attacker, this.attackPosition, weapon, ref hitInfo.hitLocations[j], ref hitInfo.attackDirections[j], ref hitInfo.secondaryTargetIds[j], ref hitInfo.secondaryHitLocations[j]);
			this.RefreshHitQualitiesForSecondaryTargets(ref hitInfo, weapon, j);
		}
	}

	// Token: 0x0600605B RID: 24667 RVA: 0x001A3DB0 File Offset: 0x001A1FB0
	private void RefreshHitQualitiesForSecondaryTargets(ref WeaponHitInfo hitInfo, Weapon weapon, int hitIdx)
	{
		if (!string.IsNullOrEmpty(hitInfo.secondaryTargetIds[hitIdx]))
		{
			ICombatant combatant = this.Director.Combat.FindCombatantByGUID(hitInfo.secondaryTargetIds[hitIdx], false);
			hitInfo.hitQualities[hitIdx] = this.Director.Combat.ToHit.GetBlowQuality(this.attacker, this.attackPosition, weapon, combatant, this.meleeAttackType, this.IsBreachingShot);
		}
	}

	// Token: 0x0600605C RID: 24668 RVA: 0x001A3E20 File Offset: 0x001A2020
	private void SortSelectedWeapons()
	{
		this.sortedWeapons = new List<List<Weapon>>();
		for (int i = 0; i < this.allSelectedWeapons.Count; i++)
		{
			if (this.allSelectedWeapons[i].HasFired)
			{
				AttackDirector.attackLogger.LogError(string.Format(""Weapon {0} has already fired! This is Very Bad(tm)"", this.allSelectedWeapons[i].Name));
			}
		}
		if (this.allSelectedWeapons.Count < 1)
		{
			return;
		}
		this.allSelectedWeapons.Sort((Weapon x, Weapon y) => x.uid.CompareTo(y.uid));
		for (int j = this.allSelectedWeapons.Count - 1; j >= 0; j--)
		{
			Weapon weapon = this.allSelectedWeapons[j];
			if (weapon.WeaponCategoryValue.IsMelee)
			{
				List<Weapon> list = new List<Weapon>();
				list.Add(weapon);
				this.sortedWeapons.Add(list);
			}
		}
		this.allSelectedWeapons.Sort((Weapon x, Weapon y) => (y.DamagePerShotAdjusted(y.parent.occupiedDesignMask) * (1f + y.HeatDamagePerShot)).CompareTo(x.DamagePerShotAdjusted(x.parent.occupiedDesignMask) * (1f + x.HeatDamagePerShot)));
		List<Weapon> list2 = new List<Weapon>();
		for (int k = 0; k < this.allSelectedWeapons.Count; k++)
		{
			if (!this.allSelectedWeapons[k].WeaponCategoryValue.IsMelee)
			{
				list2.Add(this.allSelectedWeapons[k]);
			}
		}
		if (list2.Count > 0)
		{
			this.sortedWeapons.Add(list2);
			if (AttackDirector.attackLogger.IsDebugEnabled)
			{
				AttackDirector.attackLogger.LogDebug(""sorted weapons"");
				for (int l = 0; l < list2.Count; l++)
				{
					AttackDirector.attackLogger.Log(string.Format(""Weapon {0} index {1} sort value {2}"", list2[l].Name, l, list2[l].DamagePerShotAdjusted(list2[l].parent.occupiedDesignMask)));
				}
			}
		}
	}

	// Token: 0x0600605D RID: 24669 RVA: 0x001A4018 File Offset: 0x001A2218
	private bool CheckAllWeaponsComplete(int group)
	{
		List<Weapon> list = this.sortedWeapons[group];
		for (int i = 0; i < list.Count; i++)
		{
			if (!list[i].FiringComplete)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x0600605E RID: 24670 RVA: 0x001A4054 File Offset: 0x001A2254
	private bool CheckAllGroupsComplete()
	{
		for (int i = 0; i < this.sortedWeapons.Count; i++)
		{
			if (!this.CheckAllWeaponsComplete(i))
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x0600605F RID: 24671 RVA: 0x001A4084 File Offset: 0x001A2284
	public void ResetWeapons()
	{
		for (int i = 0; i < this.allSelectedWeapons.Count; i++)
		{
			this.allSelectedWeapons[i].ResetWeapon();
		}
	}

	// Token: 0x06006060 RID: 24672 RVA: 0x001A40B8 File Offset: 0x001A22B8
	public void OnAttackSequenceGroupBegin(MessageCenterMessage message)
	{
		AttackSequenceGroupBeginMessage attackSequenceGroupBeginMessage = (AttackSequenceGroupBeginMessage)message;
		if (attackSequenceGroupBeginMessage.sequenceId != this.id)
		{
			return;
		}
		int groupIdx = attackSequenceGroupBeginMessage.groupIdx;
		this.currentFiringGroup = groupIdx;
		if (AttackDirector.AttackSequence.logger.IsLogEnabled)
		{
			AttackDirector.AttackSequence.logger.Log(string.Format(""[OnAttackSequenceGroupBegin] ID {0}, Group {1}"", this.id, groupIdx));
		}
		List<Weapon> list = this.sortedWeapons[this.currentFiringGroup];
		if (list.Count > 0)
		{
			AttackSequenceFireMessage attackSequenceFireMessage = new AttackSequenceFireMessage(this.stackItemUID, this.id, groupIdx, 0);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceFireMessage);
		}
		WeaponHitInfo? weaponHitInfo = this.weaponHitInfo[groupIdx][0];
		if (weaponHitInfo != null)
		{
			WeaponHitInfo value = weaponHitInfo.Value;
			this.AddAllAffectedTargets(value);
			List<WeaponCategoryValue> list2 = new List<WeaponCategoryValue>();
			for (int i = 0; i < list.Count; i++)
			{
				Weapon weapon = list[i];
				if (!list2.Contains(weapon.WeaponCategoryValue))
				{
					list2.Add(weapon.WeaponCategoryValue);
				}
				foreach (EffectData effectData in weapon.weaponDef.statusEffects)
				{
					if (effectData.targetingData.effectTriggerType == EffectTriggerType.OnWeaponFire)
					{
						string text = string.Format(""{0}Effect_{1}_{2}"", effectData.targetingData.effectTriggerType.ToString(), weapon.parent.GUID, value.attackSequenceId);
						foreach (ICombatant combatant in this.Director.Combat.EffectManager.GetTargetCombatantForEffect(effectData, weapon.parent, this.chosenTarget))
						{
							this.Director.Combat.EffectManager.CreateEffect(effectData, text, this.stackItemUID, weapon.parent, combatant, value, i, false);
							if (!effectData.targetingData.hideApplicationFloatie)
							{
								this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(weapon.parent.GUID, weapon.parent.GUID, effectData.Description.Name, FloatieMessage.MessageNature.Buff));
							}
							if (!effectData.targetingData.hideApplicationFloatie)
							{
								this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(weapon.parent.GUID, combatant.GUID, effectData.Description.Name, FloatieMessage.MessageNature.Buff));
							}
						}
					}
				}
			}
			List<EffectData> componentStatusEffectsForTriggerType = this.attacker.GetComponentStatusEffectsForTriggerType(EffectTriggerType.OnWeaponFire, ComponentType.Upgrade);
			for (int k = 0; k < componentStatusEffectsForTriggerType.Count; k++)
			{
				EffectData effectData2 = componentStatusEffectsForTriggerType[k];
				if (effectData2.effectType != EffectType.StatisticEffect || effectData2.statisticData.targetCollection != StatisticEffectData.TargetCollection.Weapon || list2.Contains(effectData2.statisticData.TargetWeaponCategoryValue))
				{
					string text2 = string.Format(""{0}Effect_{1}_{2}"", effectData2.targetingData.effectTriggerType.ToString(), this.attacker.GUID, value.attackSequenceId);
					foreach (ICombatant combatant2 in this.Director.Combat.EffectManager.GetTargetCombatantForEffect(effectData2, this.attacker, this.chosenTarget))
					{
						this.Director.Combat.EffectManager.CreateEffect(effectData2, text2, this.stackItemUID, this.attacker, combatant2, value, 0, false);
						if (!effectData2.targetingData.hideApplicationFloatie)
						{
							this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(this.attacker.GUID, combatant2.GUID, effectData2.Description.Name, FloatieMessage.MessageNature.Debuff));
						}
					}
				}
			}
			List<EffectData> abilityStatusEffectsForTriggerType = this.attacker.GetPilot().GetAbilityStatusEffectsForTriggerType(EffectTriggerType.OnWeaponFire);
			for (int l = 0; l < abilityStatusEffectsForTriggerType.Count; l++)
			{
				EffectData effectData3 = abilityStatusEffectsForTriggerType[l];
				if (effectData3.effectType != EffectType.StatisticEffect || effectData3.statisticData.targetCollection != StatisticEffectData.TargetCollection.Weapon || list2.Contains(effectData3.statisticData.TargetWeaponCategoryValue))
				{
					string text3 = string.Format(""{0}Effect_{1}_{2}"", effectData3.targetingData.effectTriggerType.ToString(), this.attacker.GUID, value.attackSequenceId);
					foreach (ICombatant combatant3 in this.Director.Combat.EffectManager.GetTargetCombatantForEffect(effectData3, this.attacker, this.chosenTarget))
					{
						this.Director.Combat.EffectManager.CreateEffect(effectData3, text3, this.stackItemUID, this.attacker, combatant3, value, 0, false);
						if (!effectData3.targetingData.hideApplicationFloatie)
						{
							this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(this.attacker.GUID, combatant3.GUID, effectData3.Description.Name, FloatieMessage.MessageNature.Debuff));
						}
					}
				}
			}
			return;
		}
		AttackDirector.AttackSequence.logger.LogError(""[OnAttackSequenceFire] had to generate hit info because pre-calculated hit info was not available!"");
	}

	// Token: 0x06006061 RID: 24673 RVA: 0x001A4670 File Offset: 0x001A2870
	public void OnAttackSequenceWeaponPreFireComplete(MessageCenterMessage message)
	{
		AttackSequenceWeaponPreFireCompleteMessage attackSequenceWeaponPreFireCompleteMessage = (AttackSequenceWeaponPreFireCompleteMessage)message;
		if (attackSequenceWeaponPreFireCompleteMessage.sequenceId != this.id)
		{
			return;
		}
		int groupIdx = attackSequenceWeaponPreFireCompleteMessage.groupIdx;
		int num = attackSequenceWeaponPreFireCompleteMessage.weaponIdx;
		if (AttackDirector.AttackSequence.logger.IsLogEnabled)
		{
			AttackDirector.AttackSequence.logger.Log(string.Format(""[OnAttackSequenceWeaponPreFireComplete] ID {0}, Group {1}, Weapon {2}"", this.id, groupIdx, num));
		}
		List<Weapon> list = this.sortedWeapons[groupIdx];
		num++;
		if (num < list.Count)
		{
			AttackSequenceFireMessage attackSequenceFireMessage = new AttackSequenceFireMessage(this.stackItemUID, this.id, groupIdx, num);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceFireMessage);
		}
	}

	// Token: 0x06006062 RID: 24674 RVA: 0x0000D184 File Offset: 0x0000B384
	private void PlayAttackVO()
	{
	}

	// Token: 0x06006063 RID: 24675 RVA: 0x001A4720 File Offset: 0x001A2920
	public void OnAttackSequenceFire(MessageCenterMessage message)
	{
		AttackSequenceFireMessage attackSequenceFireMessage = (AttackSequenceFireMessage)message;
		if (attackSequenceFireMessage.sequenceId != this.id)
		{
			return;
		}
		int groupIdx = attackSequenceFireMessage.groupIdx;
		int weaponIdx = attackSequenceFireMessage.weaponIdx;
		Weapon weapon = this.sortedWeapons[groupIdx][weaponIdx];
		if (AttackDirector.attackLogger.IsDebugEnabled)
		{
			AttackDirector.attackLogger.LogDebug(""MeleeType = "" + this.meleeAttackType.ToString());
		}
		if (AttackDirector.AttackSequence.logger.IsLogEnabled)
		{
			AttackDirector.AttackSequence.logger.Log(string.Format(""[OnAttackSequenceFire] ID {0}, Group {1}, Weapon {2}, Weapon Name {3}"", new object[] { this.id, groupIdx, weaponIdx, weapon.Name }));
		}
		if (AttackDirector.hitminLogger.IsLogEnabled)
		{
			AttackDirector.hitminLogger.Log(string.Format(""============================================================= STARTING NEW ATTACK SEQUENCE FOR {0} (ID {1}):"", weapon.Name, weaponIdx));
		}
		int num = this.numberOfShots[groupIdx][weaponIdx];
		if (num == -1)
		{
			if (weapon.HasPreFired)
			{
				AttackDirector.AttackSequence.logger.LogError(string.Format(""[OnAttackSequenceFire] Weapon {0} should not have prefired if it wasn't going to fire!"", weapon.Name));
			}
			AttackDirector.AttackSequence.logger.LogWarning(string.Format(""Weapon {0} can't fire, skipping"", weapon.Description.Name));
			AttackSequenceWeaponPreFireCompleteMessage attackSequenceWeaponPreFireCompleteMessage = new AttackSequenceWeaponPreFireCompleteMessage(this.stackItemUID, this.id, groupIdx, weaponIdx);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceWeaponPreFireCompleteMessage);
			AttackSequenceWeaponCompleteMessage attackSequenceWeaponCompleteMessage = new AttackSequenceWeaponCompleteMessage(this.stackItemUID, this.id, groupIdx, weaponIdx);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceWeaponCompleteMessage);
			return;
		}
		weapon.FireWeapon();
		if (num == 0)
		{
			AttackDirector.AttackSequence.logger.LogError(string.Format(""[OnAttackSequenceFire] Weapon {0} tried to fire 0 shots (this should not happen!), skipping"", weapon.Description.Name));
			AttackSequenceWeaponPreFireCompleteMessage attackSequenceWeaponPreFireCompleteMessage2 = new AttackSequenceWeaponPreFireCompleteMessage(this.stackItemUID, this.id, groupIdx, weaponIdx);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceWeaponPreFireCompleteMessage2);
			AttackSequenceWeaponCompleteMessage attackSequenceWeaponCompleteMessage2 = new AttackSequenceWeaponCompleteMessage(this.stackItemUID, this.id, groupIdx, weaponIdx);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceWeaponCompleteMessage2);
			return;
		}
		WeaponHitInfo? weaponHitInfo = this.weaponHitInfo[groupIdx][weaponIdx];
		WeaponHitInfo weaponHitInfo2;
		if (weaponHitInfo != null)
		{
			weaponHitInfo2 = weaponHitInfo.Value;
			this.AddAllAffectedTargets(weaponHitInfo2);
		}
		else
		{
			AttackDirector.AttackSequence.logger.LogError(""[OnAttackSequenceFire] had to generate hit info because pre-calculated hit info was not available!"");
			weaponHitInfo2 = this.GenerateHitInfo(weapon, groupIdx, weaponIdx, num, this.indirectFire, 0f);
			this.AddAllAffectedTargets(weaponHitInfo2);
		}
		weapon.CompleteFiring();
		foreach (EffectData effectData in weapon.weaponDef.statusEffects)
		{
			if (effectData.targetingData.effectTriggerType == EffectTriggerType.OnActivation)
			{
				string text = string.Format(""{0}Effect_{1}_{2}"", effectData.targetingData.effectTriggerType.ToString(), weapon.parent.GUID, weaponHitInfo2.attackSequenceId);
				foreach (ICombatant combatant in this.Director.Combat.EffectManager.GetTargetCombatantForEffect(effectData, weapon.parent, this.chosenTarget))
				{
					this.Director.Combat.EffectManager.CreateEffect(effectData, text, this.stackItemUID, weapon.parent, combatant, weaponHitInfo2, weaponIdx, false);
					if (!effectData.targetingData.hideApplicationFloatie)
					{
						this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(weapon.parent.GUID, weapon.parent.GUID, effectData.Description.Name, FloatieMessage.MessageNature.Buff));
					}
					if (!effectData.targetingData.hideApplicationFloatie)
					{
						this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(weapon.parent.GUID, combatant.GUID, effectData.Description.Name, FloatieMessage.MessageNature.Buff));
					}
				}
			}
		}
		bool flag = weapon.weaponRep != null && weapon.weaponRep.HasWeaponEffect;
		if (DebugBridge.TestToolsEnabled)
		{
			flag = flag && !DebugBridge.DisableWeaponEffectDrivenAttacks;
		}
		if (flag)
		{
			weapon.weaponRep.PlayWeaponEffect(weaponHitInfo2);
			return;
		}
		if (DebugBridge.TestToolsEnabled || !DebugBridge.DisableWeaponEffectDrivenAttacks)
		{
			AttackDirector.attackLogger.LogError(""NO WEAPONEFFECT for "" + weapon.Description.Name + "", skipping straight to resolving damage."");
		}
		AttackSequenceWeaponPreFireCompleteMessage attackSequenceWeaponPreFireCompleteMessage3 = new AttackSequenceWeaponPreFireCompleteMessage(this.stackItemUID, this.id, groupIdx, weaponIdx);
		this.Director.Combat.MessageCenter.PublishMessage(attackSequenceWeaponPreFireCompleteMessage3);
		for (int j = 0; j < num; j++)
		{
			float num2 = weapon.DamagePerShotAdjusted(weapon.parent.occupiedDesignMask);
			float num3 = weapon.StructureDamagePerShotAdjusted(weapon.parent.occupiedDesignMask);
			AttackSequenceImpactMessage attackSequenceImpactMessage = new AttackSequenceImpactMessage(weaponHitInfo2, j, num2, num3);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceImpactMessage);
		}
		AttackSequenceResolveDamageMessage attackSequenceResolveDamageMessage = new AttackSequenceResolveDamageMessage(weaponHitInfo2);
		this.Director.Combat.MessageCenter.PublishMessage(attackSequenceResolveDamageMessage);
		AttackSequenceWeaponCompleteMessage attackSequenceWeaponCompleteMessage3 = new AttackSequenceWeaponCompleteMessage(this.stackItemUID, this.id, groupIdx, weaponIdx);
		this.Director.Combat.MessageCenter.PublishMessage(attackSequenceWeaponCompleteMessage3);
	}

	// Token: 0x06006064 RID: 24676 RVA: 0x001A4C8C File Offset: 0x001A2E8C
	public void OnAttackSequenceImpact(MessageCenterMessage message)
	{
		AttackSequenceImpactMessage attackSequenceImpactMessage = (AttackSequenceImpactMessage)message;
		if (attackSequenceImpactMessage.hitInfo.attackSequenceId != this.id)
		{
			return;
		}
		int attackGroupIndex = attackSequenceImpactMessage.hitInfo.attackGroupIndex;
		int attackWeaponIndex = attackSequenceImpactMessage.hitInfo.attackWeaponIndex;
		int hitIndex = attackSequenceImpactMessage.hitIndex;
		Weapon weapon = this.GetWeapon(attackGroupIndex, attackWeaponIndex);
		int num = attackSequenceImpactMessage.hitInfo.ShotHitLocation(hitIndex);
		Vector3 vector = attackSequenceImpactMessage.hitInfo.hitPositions[hitIndex];
		float hitDamage = attackSequenceImpactMessage.hitDamage;
		float structureDamage = attackSequenceImpactMessage.structureDamage;
		float blowQualityMultiplier = this.Director.Combat.ToHit.GetBlowQualityMultiplier(attackSequenceImpactMessage.hitInfo.hitQualities[hitIndex]);
		float num2 = hitDamage * blowQualityMultiplier;
		float num3 = structureDamage * blowQualityMultiplier;
		bool flag = !string.IsNullOrEmpty(attackSequenceImpactMessage.hitInfo.secondaryTargetIds[hitIndex]);
		ICombatant combatant = null;
		if (flag)
		{
			combatant = this.Director.Combat.FindCombatantByGUID(attackSequenceImpactMessage.hitInfo.secondaryTargetIds[hitIndex], false);
		}
		AbstractActor abstractActor = this.chosenTarget as AbstractActor;
		if (abstractActor != null)
		{
			LineOfFireLevel lineOfFireLevel = this.attacker.VisibilityCache.VisibilityToTarget(abstractActor).LineOfFireLevel;
			num2 = abstractActor.GetAdjustedDamage(num2, weapon.WeaponCategoryValue, abstractActor.occupiedDesignMask, lineOfFireLevel, true);
			num2 = abstractActor.GetAdjustedDamageForMelee(num2, weapon.WeaponCategoryValue);
			num3 = abstractActor.GetAdjustedDamage(num3, weapon.WeaponCategoryValue, abstractActor.occupiedDesignMask, lineOfFireLevel, true);
			num3 = abstractActor.GetAdjustedDamageForMelee(num3, weapon.WeaponCategoryValue);
		}
		if (num2 <= 0f)
		{
			AttackDirector.attackLogger.LogWarning(string.Format(""OnAttackSequenceImpact is dealing <= 0 damage: base dmg: {0}, total: {1}"", hitDamage, num2));
			num2 = 0f;
		}
		if (num3 <= 0f)
		{
			num3 = 0f;
		}
		bool flag2 = this.messageCoordinator.CanProcessMessage(attackSequenceImpactMessage);
		bool flag3 = attackSequenceImpactMessage.hitInfo.DidShotHitChosenTarget(hitIndex);
		if (!attackSequenceImpactMessage.hasPlayedImpact)
		{
			if (AttackDirector.AttackSequence.logger.IsDebugEnabled)
			{
				AttackDirector.AttackSequence.logger.LogDebug(string.Format(""[OnAttackSequenceImpact] playing impact \""visuals\"" for ID {0}, Group {1}, Weapon {2}, Hit {3}. Will process during this call? {4}"", new object[] { this.id, attackGroupIndex, attackWeaponIndex, hitIndex, flag2 }));
			}
			attackSequenceImpactMessage.hasPlayedImpact = true;
			if (this.chosenTarget.GameRep != null)
			{
				if (flag3)
				{
					this.chosenTarget.GameRep.PlayImpactAnim(attackSequenceImpactMessage.hitInfo, hitIndex, weapon, this.meleeAttackType, this.cumulativeDamage);
					Vector3 vector2 = vector;
					if (this.chosenTarget.ArmorForLocation(num) < num2)
					{
						FloatieMessage floatieMessage = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, this.chosenTarget.GUID, new Text(""{0}"", new object[] { (int)Mathf.Max(1f, num2) }), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, FloatieMessage.MessageNature.StructureDamage, vector2.x, vector2.y, vector2.z);
						this.Director.Combat.MessageCenter.PublishMessage(floatieMessage);
					}
					else
					{
						FloatieMessage floatieMessage2 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, this.chosenTarget.GUID, new Text(""{0}"", new object[] { (int)Mathf.Max(1f, num2) }), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, FloatieMessage.MessageNature.ArmorDamage, vector2.x, vector2.y, vector2.z);
						this.Director.Combat.MessageCenter.PublishMessage(floatieMessage2);
					}
					if (num3 > 0f)
					{
						FloatieMessage floatieMessage3 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, this.chosenTarget.GUID, new Text(""{0}"", new object[] { (int)Mathf.Max(1f, num3) }), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, FloatieMessage.MessageNature.StructureDamage, vector2.x, vector2.y, vector2.z);
						this.Director.Combat.MessageCenter.PublishMessage(floatieMessage3);
					}
				}
				else
				{
					Vector3 vector3 = this.chosenTarget.TargetPosition + Random.insideUnitSphere * 5f;
					if (attackSequenceImpactMessage.hitInfo.dodgeSuccesses[hitIndex])
					{
						this.chosenTarget.GameRep.PlayImpactAnim(attackSequenceImpactMessage.hitInfo, hitIndex, weapon, this.meleeAttackType, this.cumulativeDamage);
						FloatieMessage floatieMessage4 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, this.chosenTarget.GUID, new Text(""EVADE"", Array.Empty<object>()), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, FloatieMessage.MessageNature.Dodge, vector3.x, vector3.y, vector3.z);
						this.Director.Combat.MessageCenter.PublishMessage(floatieMessage4);
					}
					else if (this.meleeAttackType != MeleeAttackType.NotSet)
					{
						this.chosenTarget.GameRep.PlayImpactAnim(attackSequenceImpactMessage.hitInfo, hitIndex, weapon, this.meleeAttackType, this.cumulativeDamage);
						FloatieMessage floatieMessage5 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, attackSequenceImpactMessage.hitInfo.targetId, new Text(""MISS!"", Array.Empty<object>()), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, FloatieMessage.MessageNature.MeleeMiss, vector3.x, vector3.y, vector3.z);
						this.Director.Combat.MessageCenter.PublishMessage(floatieMessage5);
					}
					else
					{
						FloatieMessage.MessageNature messageNature = ((weapon.ShotsWhenFired > 1) ? FloatieMessage.MessageNature.Miss : FloatieMessage.MessageNature.MeleeMiss);
						FloatieMessage floatieMessage6 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, attackSequenceImpactMessage.hitInfo.targetId, new Text(""MISS!"", Array.Empty<object>()), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, messageNature, vector3.x, vector3.y, vector3.z);
						this.Director.Combat.MessageCenter.PublishMessage(floatieMessage6);
					}
					if (flag)
					{
						FloatieMessage floatieMessage7 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, attackSequenceImpactMessage.hitInfo.targetId, new Text(""STRAY SHOT"", Array.Empty<object>()), this.Director.Combat.Constants.CombatUIConstants.floatieSizeLarge, FloatieMessage.MessageNature.MeleeMiss, vector.x, vector.y, vector.z);
						this.Director.Combat.MessageCenter.PublishMessage(floatieMessage7);
						if (combatant != null && combatant.GameRep != null)
						{
							combatant.GameRep.PlayImpactAnim(attackSequenceImpactMessage.hitInfo, hitIndex, weapon, this.meleeAttackType, this.cumulativeDamage);
						}
					}
				}
			}
			if (weapon.Type != WeaponType.Laser && weapon.Type != WeaponType.Flamer)
			{
				CameraControl.Instance.AddCameraShake((num2 + num3) * this.Director.Combat.Constants.CombatUIConstants.ScreenShakeRangedDamageRelativeMod + this.Director.Combat.Constants.CombatUIConstants.ScreenShakeRangedDamageAbsoluteMod, 1f, vector);
			}
		}
		if (!flag2)
		{
			this.messageCoordinator.StoreMessage(attackSequenceImpactMessage);
			return;
		}
		if (AttackDirector.AttackSequence.logger.IsLogEnabled)
		{
			AttackDirector.AttackSequence.logger.Log(string.Format(""[OnAttackSequenceImpact]  ID {0}, Group {1}, Weapon {2}, Hit {3}."", new object[] { this.id, attackGroupIndex, attackWeaponIndex, hitIndex }));
			if (AttackDirector.AttackSequence.logger.IsDebugEnabled)
			{
				AttackDirector.AttackSequence.logger.LogDebug(string.Format(""\t WeaponName {0}, MeleeType {1}, HitLocation {2}"", weapon.Name, this.meleeAttackType.ToString(), num.ToString()));
			}
		}
		if (flag3)
		{
			this.cumulativeDamage += num2;
			this.cumulativeDamage += num3;
			this.chosenTarget.TakeWeaponDamage(attackSequenceImpactMessage.hitInfo, num, weapon, num2, num3, hitIndex, DamageType.Weapon);
			this.chosenTarget.HandleDeath(this.attacker.GUID);
		}
		else if (flag && combatant != null)
		{
			num2 = hitDamage * blowQualityMultiplier;
			num3 = structureDamage * blowQualityMultiplier;
			AbstractActor abstractActor2 = combatant as AbstractActor;
			if (abstractActor2 != null)
			{
				LineOfFireLevel lineOfFireLevel2 = this.attacker.VisibilityCache.VisibilityToTarget(abstractActor2).LineOfFireLevel;
				num2 = abstractActor2.GetAdjustedDamage(num2, weapon.WeaponCategoryValue, abstractActor2.occupiedDesignMask, lineOfFireLevel2, true);
				num2 = abstractActor2.GetAdjustedDamageForMelee(num2, weapon.WeaponCategoryValue);
				num3 = abstractActor2.GetAdjustedDamage(num3, weapon.WeaponCategoryValue, abstractActor2.occupiedDesignMask, lineOfFireLevel2, true);
				num3 = abstractActor2.GetAdjustedDamageForMelee(num3, weapon.WeaponCategoryValue);
			}
			if (combatant.ArmorForLocation(num) < num2)
			{
				FloatieMessage floatieMessage8 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, combatant.GUID, new Text(""{0}"", new object[] { (int)Mathf.Max(1f, num2) }), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, FloatieMessage.MessageNature.StructureDamage, vector.x, vector.y, vector.z);
				this.Director.Combat.MessageCenter.PublishMessage(floatieMessage8);
			}
			else
			{
				FloatieMessage floatieMessage9 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, combatant.GUID, new Text(""{0}"", new object[] { (int)Mathf.Max(1f, num2) }), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, FloatieMessage.MessageNature.ArmorDamage, vector.x, vector.y, vector.z);
				this.Director.Combat.MessageCenter.PublishMessage(floatieMessage9);
			}
			if (num3 > 0f)
			{
				FloatieMessage floatieMessage10 = new FloatieMessage(attackSequenceImpactMessage.hitInfo.attackerId, combatant.GUID, new Text(""{0}"", new object[] { (int)Mathf.Max(1f, num3) }), this.Director.Combat.Constants.CombatUIConstants.floatieSizeMedium, FloatieMessage.MessageNature.StructureDamage, vector.x, vector.y, vector.z);
				this.Director.Combat.MessageCenter.PublishMessage(floatieMessage10);
			}
			combatant.TakeWeaponDamage(attackSequenceImpactMessage.hitInfo, attackSequenceImpactMessage.hitInfo.ShotHitLocation(hitIndex), weapon, num2, num3, hitIndex, DamageType.Weapon);
			combatant.HandleDeath(this.attacker.GUID);
		}
		this.messageCoordinator.MessageComplete(attackSequenceImpactMessage);
	}

	// Token: 0x06006065 RID: 24677 RVA: 0x001A577C File Offset: 0x001A397C
	public void OnAttackSequenceResolveDamage(MessageCenterMessage message)
	{
		AttackSequenceResolveDamageMessage attackSequenceResolveDamageMessage = (AttackSequenceResolveDamageMessage)message;
		WeaponHitInfo hitInfo = attackSequenceResolveDamageMessage.hitInfo;
		if (hitInfo.attackSequenceId != this.id)
		{
			return;
		}
		if (!this.messageCoordinator.CanProcessMessage(attackSequenceResolveDamageMessage))
		{
			this.messageCoordinator.StoreMessage(attackSequenceResolveDamageMessage);
			return;
		}
		if (AttackDirector.AttackSequence.logger.IsLogEnabled)
		{
			AttackDirector.AttackSequence.logger.Log(string.Format(""[OnAttackSequenceResolveDamage]  ID {0}, Group {1}, Weapon {2}, AttackerId [{3}], TargetId [{4}]"", new object[] { this.id, hitInfo.attackGroupIndex, hitInfo.attackWeaponIndex, hitInfo.attackerId, hitInfo.targetId }));
		}
		int attackGroupIndex = attackSequenceResolveDamageMessage.hitInfo.attackGroupIndex;
		int attackWeaponIndex = attackSequenceResolveDamageMessage.hitInfo.attackWeaponIndex;
		Weapon weapon = this.GetWeapon(attackGroupIndex, attackWeaponIndex);
		if (this.meleeAttackType == MeleeAttackType.DFA)
		{
			float num = Mathf.Max(0f, this.attacker.StatCollection.GetValue<float>(""DFASelfDamage""));
			this.attacker.TakeWeaponDamage(attackSequenceResolveDamageMessage.hitInfo, 64, weapon, num, 0f, 0, DamageType.DFASelf);
			this.attacker.TakeWeaponDamage(attackSequenceResolveDamageMessage.hitInfo, 128, weapon, num, 0f, 0, DamageType.DFASelf);
			if (AttackDirector.damageLogger.IsLogEnabled)
			{
				AttackDirector.damageLogger.Log(string.Format(""@@@@@@@@ {0} takes {1} damage to its legs from the DFA attack!"", this.attacker.DisplayName, num));
			}
		}
		List<ICombatant> list = new List<ICombatant>();
		this.chosenTarget.ResolveWeaponDamage(attackSequenceResolveDamageMessage.hitInfo);
		list.Add(this.chosenTarget);
		if (hitInfo.GetFirstHitLocationForTarget(this.chosenTarget.GUID) >= 0)
		{
			this.attackCompletelyMissed = false;
		}
		for (int i = 0; i < attackSequenceResolveDamageMessage.hitInfo.secondaryTargetIds.Length; i++)
		{
			ICombatant combatant = this.Director.Combat.FindCombatantByGUID(attackSequenceResolveDamageMessage.hitInfo.secondaryTargetIds[i], false);
			if (combatant != null && !list.Contains(combatant))
			{
				list.Add(combatant);
				combatant.ResolveWeaponDamage(attackSequenceResolveDamageMessage.hitInfo);
			}
		}
		AttackDirector.AttackSequence attackSequence = this.Director.GetAttackSequence(hitInfo.attackSequenceId);
		for (int j = 0; j < attackSequence.allAffectedTargetIds.Count; j++)
		{
			AbstractActor abstractActor = this.Director.Combat.FindActorByGUID(attackSequence.allAffectedTargetIds[j]);
			if (abstractActor != null)
			{
				int firstHitLocationForTarget = hitInfo.GetFirstHitLocationForTarget(abstractActor.GUID);
				if (firstHitLocationForTarget >= 0 && !abstractActor.IsDead)
				{
					foreach (EffectData effectData in weapon.weaponDef.statusEffects)
					{
						if (effectData.targetingData.effectTriggerType == EffectTriggerType.OnHit)
						{
							string text = string.Format(""{0}Effect_{1}_{2}"", effectData.targetingData.effectTriggerType.ToString(), this.attacker.GUID, attackSequenceResolveDamageMessage.hitInfo.attackSequenceId);
							foreach (ICombatant combatant2 in this.Director.Combat.EffectManager.GetTargetCombatantForEffect(effectData, this.attacker, abstractActor))
							{
								this.Director.Combat.EffectManager.CreateEffect(effectData, text, this.stackItemUID, this.attacker, combatant2, hitInfo, firstHitLocationForTarget, false);
								if (effectData.durationData.activeTrackedEffect)
								{
									weapon.AddCreatedEffectID(text);
								}
								if (!effectData.targetingData.hideApplicationFloatie)
								{
									this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(this.attacker.GUID, combatant2.GUID, effectData.Description.Name, FloatieMessage.MessageNature.Debuff));
								}
							}
						}
					}
					List<EffectData> componentStatusEffectsForTriggerType = this.attacker.GetComponentStatusEffectsForTriggerType(EffectTriggerType.OnHit, ComponentType.Upgrade);
					for (int l = 0; l < componentStatusEffectsForTriggerType.Count; l++)
					{
						EffectData effectData2 = componentStatusEffectsForTriggerType[l];
						if (effectData2.effectType != EffectType.StatisticEffect || effectData2.statisticData.targetCollection != StatisticEffectData.TargetCollection.Weapon || effectData2.statisticData.TargetWeaponCategoryValue.Equals(weapon.WeaponCategoryValue))
						{
							string text2 = string.Format(""{0}Effect_{1}_{2}"", effectData2.targetingData.effectTriggerType.ToString(), this.attacker.GUID, attackSequenceResolveDamageMessage.hitInfo.attackSequenceId);
							foreach (ICombatant combatant3 in this.Director.Combat.EffectManager.GetTargetCombatantForEffect(effectData2, this.attacker, abstractActor))
							{
								this.Director.Combat.EffectManager.CreateEffect(effectData2, text2, this.stackItemUID, this.attacker, combatant3, hitInfo, firstHitLocationForTarget, false);
								if (!effectData2.targetingData.hideApplicationFloatie)
								{
									this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(this.attacker.GUID, combatant3.GUID, effectData2.Description.Name, FloatieMessage.MessageNature.Debuff));
								}
							}
						}
					}
					List<EffectData> abilityStatusEffectsForTriggerType = this.attacker.GetPilot().GetAbilityStatusEffectsForTriggerType(EffectTriggerType.OnHit);
					for (int m = 0; m < abilityStatusEffectsForTriggerType.Count; m++)
					{
						EffectData effectData3 = abilityStatusEffectsForTriggerType[m];
						if (effectData3.effectType != EffectType.StatisticEffect || effectData3.statisticData.targetCollection != StatisticEffectData.TargetCollection.Weapon || effectData3.statisticData.TargetWeaponCategoryValue.Equals(weapon.WeaponCategoryValue))
						{
							string text3 = string.Format(""{0}Effect_{1}_{2}"", effectData3.targetingData.effectTriggerType.ToString(), this.attacker.GUID, attackSequenceResolveDamageMessage.hitInfo.attackSequenceId);
							foreach (ICombatant combatant4 in this.Director.Combat.EffectManager.GetTargetCombatantForEffect(effectData3, this.attacker, abstractActor))
							{
								this.Director.Combat.EffectManager.CreateEffect(effectData3, text3, this.stackItemUID, this.attacker, combatant4, hitInfo, firstHitLocationForTarget, false);
								if (!effectData3.targetingData.hideApplicationFloatie)
								{
									this.Director.Combat.MessageCenter.PublishMessage(new FloatieMessage(this.attacker.GUID, combatant4.GUID, effectData3.Description.Name, FloatieMessage.MessageNature.Debuff));
								}
							}
						}
					}
					List<EffectData> componentStatusEffectsForTriggerType2 = abstractActor.GetComponentStatusEffectsForTriggerType(EffectTriggerType.OnDamaged, ComponentType.NotSet);
					for (int n = 0; n < componentStatusEffectsForTriggerType2.Count; n++)
					{
						EffectData effectData4 = componentStatusEffectsForTriggerType2[n];
						foreach (ICombatant combatant5 in this.Director.Combat.EffectManager.GetTargetCombatantForEffect(effectData4, abstractActor, this.attacker))
						{
							string text4 = string.Format(""OnDamagedEffect_{0}_{1}"", abstractActor.GUID, attackSequenceResolveDamageMessage.hitInfo.attackSequenceId);
							this.Director.Combat.EffectManager.CreateEffect(effectData4, text4, this.stackItemUID, abstractActor, combatant5, hitInfo, firstHitLocationForTarget, false);
						}
					}
				}
			}
		}
		this.attacker.HandleDeath(this.attacker.GUID);
		this.messageCoordinator.MessageComplete(attackSequenceResolveDamageMessage);
	}

	// Token: 0x06006066 RID: 24678 RVA: 0x001A5F54 File Offset: 0x001A4154
	public void OnAttackSequenceWeaponComplete(MessageCenterMessage message)
	{
		AttackSequenceWeaponCompleteMessage attackSequenceWeaponCompleteMessage = (AttackSequenceWeaponCompleteMessage)message;
		if (attackSequenceWeaponCompleteMessage.sequenceId != this.id)
		{
			return;
		}
		int groupIdx = attackSequenceWeaponCompleteMessage.groupIdx;
		int weaponIdx = attackSequenceWeaponCompleteMessage.weaponIdx;
		this.sortedWeapons[groupIdx][weaponIdx].FlagAsComplete();
		if (AttackDirector.AttackSequence.logger.IsLogEnabled)
		{
			AttackDirector.AttackSequence.logger.Log(string.Format(""[OnAttackSequenceWeaponComplete]  ID {0}, Group {1}, Weapon {2}."", this.id, groupIdx, weaponIdx));
		}
		if (this.CheckAllWeaponsComplete(this.currentFiringGroup))
		{
			AttackSequenceGroupEndMessage attackSequenceGroupEndMessage = new AttackSequenceGroupEndMessage(this.stackItemUID, this.id, groupIdx);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceGroupEndMessage);
		}
	}

	// Token: 0x06006067 RID: 24679 RVA: 0x001A600C File Offset: 0x001A420C
	public void OnAttackSequenceGroupEnd(MessageCenterMessage message)
	{
		AttackSequenceGroupEndMessage attackSequenceGroupEndMessage = (AttackSequenceGroupEndMessage)message;
		if (attackSequenceGroupEndMessage.sequenceId != this.id)
		{
			return;
		}
		if (AttackDirector.AttackSequence.logger.IsLogEnabled)
		{
			int groupIdx = attackSequenceGroupEndMessage.groupIdx;
			AttackDirector.AttackSequence.logger.Log(string.Format(""[OnAttackSequenceGroupEnd]  ID {0}, Group {1}."", this.id, groupIdx));
		}
		this.currentFiringGroup++;
		if (this.currentFiringGroup < this.weaponGroupCount)
		{
			AttackSequenceGroupBeginMessage attackSequenceGroupBeginMessage = new AttackSequenceGroupBeginMessage(this.stackItemUID, this.id, this.currentFiringGroup);
			this.Director.Combat.MessageCenter.PublishMessage(attackSequenceGroupBeginMessage);
			return;
		}
		this.CoordinatedMesssagesSuccessful = this.messageCoordinator.VerifyAllMessagesComplete();
		AttackSequenceEndMessage attackSequenceEndMessage = new AttackSequenceEndMessage(this.stackItemUID, this.id);
		AttackDirector.AttackSequence attackSequence = this.Director.GetAttackSequence(this.id);
		for (int i = 0; i < attackSequence.allAffectedTargetIds.Count; i++)
		{
			ICombatant combatant = this.Director.Combat.FindCombatantByGUID(attackSequence.allAffectedTargetIds[i], false);
			if (combatant != null)
			{
				combatant.ResolveAttackSequence(attackSequence.attacker.GUID, this.id, attackSequence.stackItemUID, this.Director.Combat.HitLocation.GetAttackDirection(attackSequence.attackPosition, combatant));
			}
		}
		this.Director.Combat.MessageCenter.PublishMessage(attackSequenceEndMessage);
		this.messageCoordinator.VerifyAllMessagesComplete();
	}

	// Token: 0x04003E0A RID: 15882
	[JsonIgnore]
	[NonSerialized]
	public static readonly ILog logger = HBS.Logging.Logger.GetLogger(""CombatLog.AttackSequence"", LogLevel.Log);

	// Token: 0x04003E0C RID: 15884
	public int id;

	// Token: 0x04003E0D RID: 15885
	public int stackItemUID;

	// Token: 0x04003E0E RID: 15886
	public AbstractActor attacker;

	// Token: 0x04003E0F RID: 15887
	public ICombatant chosenTarget;

	// Token: 0x04003E10 RID: 15888
	public Vector3 attackPosition;

	// Token: 0x04003E11 RID: 15889
	public Quaternion attackRotation;

	// Token: 0x04003E12 RID: 15890
	public int attackSequenceIdx;

	// Token: 0x04003E13 RID: 15891
	public int calledShotLocation;

	// Token: 0x04003E14 RID: 15892
	public bool isMoraleAttack;

	// Token: 0x04003E15 RID: 15893
	public bool isMelee;

	// Token: 0x04003E16 RID: 15894
	public MeleeAttackType meleeAttackType;

	// Token: 0x04003E17 RID: 15895
	public bool isParentMelee;

	// Token: 0x04003E18 RID: 15896
	public bool indirectFire;

	// Token: 0x04003E19 RID: 15897
	public int numTargets;

	// Token: 0x04003E1A RID: 15898
	private List<string> allWeaponIds;

	// Token: 0x04003E1B RID: 15899
	private int[][] randomCacheValuesUsed;

	// Token: 0x04003E1C RID: 15900
	private float[][][] randomCache;

	// Token: 0x04003E1D RID: 15901
	private int[][] varianceCacheValuesUsed;

	// Token: 0x04003E1E RID: 15902
	private int[][][] varianceCache;

	// Token: 0x04003E1F RID: 15903
	private WeaponHitInfo?[][] weaponHitInfo;

	// Token: 0x04003E20 RID: 15904
	private int[][] numberOfShots;

	// Token: 0x04003E21 RID: 15905
	private MessageCoordinator messageCoordinator = new MessageCoordinator();

	// Token: 0x04003E22 RID: 15906
	public List<Weapon> allSelectedWeapons;

	// Token: 0x04003E23 RID: 15907
	private List<List<Weapon>> sortedWeapons;

	// Token: 0x04003E24 RID: 15908
	public float cumulativeDamage;

	// Token: 0x04003E25 RID: 15909
	public int currentFiringGroup;

	// Token: 0x04003E26 RID: 15910
	private Dictionary<string, bool> attackDestroyedWeapon;

	// Token: 0x04003E27 RID: 15911
	private Dictionary<string, bool> attackCausedAmmoExplosion;

	// Token: 0x04003E28 RID: 15912
	private Dictionary<string, bool> attackContainsDodge;

	// Token: 0x04003E29 RID: 15913
	private Dictionary<string, int> attackCrits;

	// Token: 0x04003E2A RID: 15914
	private Dictionary<string, List<Weapon>> attackWeaponCrits;

	// Token: 0x04003E2B RID: 15915
	private Dictionary<string, List<AmmunitionBox>> attackAmmoCrits;

	// Token: 0x04003E2C RID: 15916
	private Dictionary<string, bool> attackDidDamage;

	// Token: 0x04003E2D RID: 15917
	private Dictionary<string, float> attackArmorDamage;

	// Token: 0x04003E2E RID: 15918
	private Dictionary<string, bool> lowArmorStruck;

	// Token: 0x04003E2F RID: 15919
	private Dictionary<string, float> attackStructureDamage;

	// Token: 0x04003E30 RID: 15920
	private Dictionary<string, bool> attackDestroyedLeg;

	// Token: 0x04003E31 RID: 15921
	private Dictionary<string, bool> attackDestroyedAnyLocation;

	// Token: 0x04003E32 RID: 15922
	private Dictionary<string, bool> attackDealtHeatDamage;

	// Token: 0x04003E33 RID: 15923
	private Dictionary<string, bool> attackCausedKnockdown;

	// Token: 0x04003E3A RID: 15930
	public float previousTeamHealthDifference;

	// Token: 0x04003E3B RID: 15931
	private List<AttackDirector.AttackSequence.MechDamage> recordedMechDamage = new List<AttackDirector.AttackSequence.MechDamage>();

	// Token: 0x04003E3C RID: 15932
	private StatsGatherer damageStatsGatherer = new StatsGatherer();

	// Token: 0x04003E3D RID: 15933
	private const int RANDOM_ROLLS_PER_SHOT_PER_WEAPON = 6;

	// Token: 0x04003E3E RID: 15934
	private const int RANDOM_PILOT_ROLLS_PER_WEAPON = 2;

	// Token: 0x04003E3F RID: 15935
	private const int RANDOM_BUFFER_PER_WEAPON = 5;

	// Token: 0x04003E40 RID: 15936
	private const int WONT_FIRE_SHOT_COUNT = -1;

	// Token: 0x04003E41 RID: 15937
	private const int NO_AMMO_SHOT_COUNT = 0;

	// Token: 0x04003E42 RID: 15938
	private static bool UseWeightedHitNumbers = true;

	// Token: 0x04003E43 RID: 15939
	private static bool PrintDebugInfo = false;

	// Token: 0x02000CDC RID: 3292
	private class MechDamage
	{
		// Token: 0x06006069 RID: 24681 RVA: 0x001A61A8 File Offset: 0x001A43A8
		public void AppendToStatsGatherer(StatsGatherer statsGatherer)
		{
			this.statsGatherer = statsGatherer;
			this.Add(""Damaged GUID"", this.mechGUID);
			this.Add(""Weapon Group Index"", this.weaponGroupIndex);
			this.Add(""Weapon Index"", this.weaponIndex);
			this.Add(""Hit Index"", this.hitIndex);
			this.Add(""Weapon Name"", this.weaponName);
			this.Add(""Original Hit Location"", (ArmorLocation)this.originalHitLocation);
			this.Add(""Hit Location"", this.hitLocation);
			this.Add(""Impact Quality"", this.impactQuality);
			this.Add(""Remaining Damage"", this.totalDamage);
			this.statsGatherer = null;
		}

		// Token: 0x0600606A RID: 24682 RVA: 0x001A6280 File Offset: 0x001A4480
		private void Add(string key, object value)
		{
			string text = string.Format(""Impact {0} {1}"", this.index, key);
			this.statsGatherer.Add(text, value);
		}

		// Token: 0x04003E44 RID: 15940
		public string mechGUID;

		// Token: 0x04003E45 RID: 15941
		public int weaponGroupIndex;

		// Token: 0x04003E46 RID: 15942
		public int weaponIndex;

		// Token: 0x04003E47 RID: 15943
		public int hitIndex;

		// Token: 0x04003E48 RID: 15944
		public string weaponName;

		// Token: 0x04003E49 RID: 15945
		public int originalHitLocation;

		// Token: 0x04003E4A RID: 15946
		public ArmorLocation hitLocation;

		// Token: 0x04003E4B RID: 15947
		public AttackImpactQuality impactQuality;

		// Token: 0x04003E4C RID: 15948
		public float totalDamage;

		// Token: 0x04003E4D RID: 15949
		public int index;

		// Token: 0x04003E4E RID: 15950
		private StatsGatherer statsGatherer;
	}
}"
0yfNxVM7,UNLIMITED NO ANSWER,RohanPhuyal,JavaScript,Wednesday 28th of June 2023 11:29:38 AM CDT,"var msnShoppingGamePane = document.querySelector(""shopping-page-base"")
    ?.shadowRoot.querySelector(""shopping-homepage"")
    ?.shadowRoot.querySelector(""msft-feed-layout"")
    ?.shadowRoot.querySelector(""msn-shopping-game-pane"");
 
if(msnShoppingGamePane != null){
	msnShoppingGamePane.gameSettings.newGameCountdown = 0;
	msnShoppingGamePane.style.gridArea = ""slot2"";
    msnShoppingGamePane.getGameResult = function(e) {
        if (e === msnShoppingGamePane.selectedCardIndex){
            localStorage.removeItem(""gamesPerDay"");
			msnShoppingGamePane.dailyLimitReached = false;
            if(msnShoppingGamePane.leaderboardRecord)
                msnShoppingGamePane.leaderboardRecord.dailyGuessingGamesPlayed = 0;
            return e === -1 ? msnShoppingGamePane.setAttribute('gamestate','active') : msnShoppingGamePane.gameState === ""win"" ? ""win"" : ""lose"";
        }
    };
    msnShoppingGamePane.getGameResult(-1);
}
else alert(""Unable to locate the shopping game!"");"
xz4dQ1V1,dc14pt,neuroticfox,Lua,Wednesday 28th of June 2023 11:20:31 AM CDT,"local component = require(""component"")
local event = require(""event"")
local term = require(""term"")
local gpu = component.gpu
local unicode= require(""unicode"")
chaosMode = 0
Mode = 2
      -- Inflow PID
local proportional_field_error = 0
local inflow_I_sum = 0
local integral_field_error = 0
local derivative_field_error = 0
local inflow_D_last = 0
local inflow_correction = 0
 
    -- Outflow PID
local proportional_temp_error = 0
local outflow_I_sum = 0
local integral_temp_error = 0
local derivative_temp_error = 0
local outflow_D_last = 0
local outflow_correction = 0

 -- Safety Checks

if not component.isAvailable(""draconic_reactor"") then
  print(""Reactor not connected. Please connect computer to reactor with an Adapter block."")
  os.exit()
end
reactor = component.draconic_reactor
local fluxGates = {}
for x,y in pairs(component.list(""flux_gate"")) do
  fluxGates[#fluxGates+1] = x
end
if #fluxGates < 2 then
  print(""Not enough flux gates connected; please connect inflow and outflow flux gates with Adapter blocks."")
  os.exit()
end
input_flux = component.proxy(fluxGates[1])
output_flux = component.proxy(fluxGates[2])
if not input_flux or not output_flux then
  print(""Not enough flux gates connected; please connect inflow and outflow flux gates with Adapter blocks."")
  os.exit()
end

  local info = reactor.getReactorInfo()

 -- AutoSet Gates
		reactor.chargeReactor()
		satOne = info.energySaturation
		fieldOne = info.fieldStrength
		input_flux.setFlowOverride(1.0)
		os.sleep(0.5)
		satTwo = info.energySaturation
		fieldTwo = info.fieldStrength
		input_flux.setFlowOverride(0.0)
		reactor.stopReactor()
	if satTwo == satOne or fieldTwo == fieldOne then
	local oldAddr = input_flux.address
      input_flux = component.proxy(output_flux.address)
      output_flux = component.proxy(oldAddr)
	end

 -- Functions

function exit_msg(msg)
  term.clear()
  print(msg)
  os.exit()
end

function modify_temp(offset)
  local new_temp = idealTemp + offset
  if new_temp > 10000 then
    new_temp = 10000
  elseif new_temp < 2000 then
    new_temp = 2000
  end
  idealTemp = new_temp
end

function modify_field(offset)
  local new_strength = idealField + offset
  if new_strength > 100 then
    new_strength = 100
  elseif new_strength < 1 then
    new_strength = 1
  end
  idealField = new_strength
end

 -- Buttons

local adj_button_width = 19
local temp_adjust_x_offset = 62
local temp_adjust_y_offset = 2
local field_adjust_x_offset = temp_adjust_x_offset + adj_button_width + 2
local field_adjust_y_offset = 2

local buttons = {
  start={
    x=2,
    y=20,
    width=18,
    height=1,
    text=""Start"",
    action=function() 
      if safe then
        state = ""Charging""
        reactor.chargeReactor()
      elseif shutting_down then
        state = ""Active""
        reactor.activateReactor()
      end
    end,
    condition=function() return safe or shutting_down end
  },
  shutdown={
    x=2,
    y=20,
    width=18,
    height=1,
    text=""Shutdown"",
    action=function()
    cutoff_temp = 10001
      state = ""Manual Shutdown""
      reactor.stopReactor()
    end,
    condition=function() return running end
  },
      chaosmode={
    x=2,
    y=22,
    width=18,
    height=1,
    text="" Chaos Mode"",
    action=function()
      if chaosMode == 0 then
			chaosMode = 1
			cutoff_temp = 19750
			idealField = 100
			idealTemp = 40000
		elseif chaosMode == 1 then
			chaosMode = 0
			idealField = 25
			idealTemp = 8000
		end
    end,
    condition=function() return running end
  },
  switch_gates={
    x=2,
    y=22,
    width=18,
    height=1,
    text=""Swap Flux Gates"",
    action=function()
      cutoff_temp = 10001
      oldAddr = input_flux.address
      input_flux = component.proxy(output_flux.address)
      output_flux = component.proxy(oldAddr)
    end,
    condition=function() return safe end
  },
  exit={
    x=158,
    y=1,
    width=3,
    height=1,
    text=""X"",
    action=function()
      event_loop = false
	  os.execute(""cls"")
    end,
  },
  temp_up_max={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset,
    width=adj_button_width,
    height=1,
    text=""Maximum"",
    action=function() modify_temp(20000) end
  },
  temp_up_thousand={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+2,
    width=adj_button_width,
    height=1,
    text=""+1000"",
    action=function() modify_temp(1000) end
  },
  temp_up_hundred={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+4,
    width=adj_button_width,
    height=1,
    text=""+100"",
    action=function() modify_temp(100) end
  },
  temp_up_ten={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+6,
    width=adj_button_width,
    height=1,
    text=""+10"",
    action=function() modify_temp(10) end
  },
  temp_up_one={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+8,
    width=adj_button_width,
    height=1,
    text=""+1"",
    action=function() modify_temp(1) end
  },
  temp_down_thousand={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+18,
    width=adj_button_width,
    height=1,
    text=""-1000"",
    action=function() modify_temp(-1000) end
  },
    temp_down_max={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+20,
    width=adj_button_width,
    height=1,
    text=""Minimum"",
    action=function() modify_temp(-20000) end
  },
  temp_down_hundred={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+16,
    width=adj_button_width,
    height=1,
    text=""-100"",
    action=function() modify_temp(-100) end
  },
  temp_down_ten={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+14,
    width=adj_button_width,
    height=1,
    text=""-10"",
    action=function() modify_temp(-10) end
  },
  temp_down_one={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+12,
    width=adj_button_width,
    height=1,
    text=""-1"",
    action=function() modify_temp(-1) end
  },
  field_up_ten={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+3,
    width=adj_button_width,
    height=1,
    text=""+10"",
    action=function() modify_field(10) end
  },
    field_up_one={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+5,
    width=adj_button_width,
    height=1,
    text=""+1"",
    action=function() modify_field(1) end
  },
  field_up_tenth={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+7,
    width=adj_button_width,
    height=1,
    text=""+0.1"",
    action=function() modify_field(0.1) end
  },
  field_down_ten={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+17,
    width=adj_button_width,
    height=1,
    text=""-10"",
    action=function() modify_field(-10) end
  },
    field_down_one={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+15,
    width=adj_button_width,
    height=1,
    text=""-1"",
    action=function() modify_field(-1) end
  },
  field_down_tenth={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+13,
    width=adj_button_width,
    height=1,
    text=""-0.1"",
    action=function() modify_field(-0.1) end
  }
}

 -- main code

input_flux.setFlowOverride(0.0)
output_flux.setFlowOverride(0.0)
input_flux.setOverrideEnabled(true)
output_flux.setOverrideEnabled(true)

local condition = reactor.getReactorInfo()
if not condition then
  print(""Reactor not initialized, please ensure the stabilizers are properly laid out."")
  os.exit()
end

idealField = 15

idealTemp = 8000
cutoff_temp = 10001

 -- tweakable pid gains

inflow_P_gain = 1
inflow_I_gain = 0.04
inflow_D_gain = 0.1
 
outflow_P_gain = 500
outflow_I_gain = 0.5
outflow_II_gain = 0.0000003
outflow_D_gain = 60000

 -- initialize main loop

inflow_I_sum = 0
inflow_D_last = 0

outflow_I_sum = 0
outflow_II_sum = 0
outflow_D_last = 0

state = ""Standby""
shutting_down = false

if condition.temperature > 25 then
  state = ""Cooling""
end
if condition.temperature > 2000 then
  state = ""Active""
end

 -- Possible states:
  --Standby
  --Charging
  --Active
  --Manual Shutdown
  --Emergency Shutdown
  --Cooling

event_loop = true
while event_loop do
--gpu.setBackground(0x000000)
--gpu.setForeground(0xFF0000)
local info = reactor.getReactorInfo()

  if not component.isAvailable(""draconic_reactor"") then
    exit_msg(""Reactor disconnected, exiting"")
  end

  if not component.isAvailable(""flux_gate"") then
    exit_msg(""Flux gates disconnected, exiting"")
  end

  local inflow = 0.0
  local outflow = 0.0

  shutting_down = state == ""Manual Shutdown"" or state == ""Emergency Shutdown""
  running = state == ""Charging"" or state == ""Active""
  safe = state == ""Standby"" or state == ""Cooling""

  if state == ""Charging"" then
    inflow = 200000.0

    if info.temperature > 2000 then
      reactor.activateReactor()
      state = ""Active""
    end
  elseif state == ""Cooling"" then
    if info.temperature < 25 then
      state = ""Standby""
    end
    inflow = 10.0
    outflow = 20.0
  elseif state == ""Standby"" then
    inflow = 10.0
    outflow = 20.0
  else
    -- adjust inflow rate based on field strength
   
    local field_error = (info.maxFieldStrength * (idealField / 100)) - info.fieldStrength
    local proportional_field_error = field_error * inflow_P_gain
    inflow_I_sum = inflow_I_sum + field_error
    local integral_field_error = inflow_I_sum * inflow_I_gain
    local derivative_field_error = (field_error - inflow_D_last) * inflow_D_gain
    inflow_D_last = field_error
    local inflow_correction = proportional_field_error + integral_field_error + derivative_field_error
    if inflow_correction < 0 then
      inflow_I_sum = inflow_I_sum - field_error
    end
    inflow = inflow_correction

    if not shutting_down then

      -- adjust outflow rate based on core temperature

      local temp_error = idealTemp - info.temperature
      local proportional_temp_error = temp_error * outflow_P_gain
      outflow_I_sum = outflow_I_sum + temp_error
      local integral_temp_error = outflow_I_sum * outflow_I_gain
      if math.abs(temp_error) < 100 then
        outflow_II_sum = outflow_II_sum + integral_temp_error
      else
        outflow_II_sum = 0
      end
      local second_integral_temp_error = outflow_II_sum * outflow_II_gain
      local derivative_temp_error = (temp_error - outflow_D_last) * outflow_D_gain
      outflow_D_last = temp_error
      local outflow_correction = proportional_temp_error + integral_temp_error + second_integral_temp_error + derivative_temp_error
      if outflow_correction < 0 then
        outflow_I_sum = outflow_I_sum - temp_error
      end
      outflow = outflow_correction

		if info.temperature > idealTemp then
		  state = ""Manual Shutdown""
		  reactor.stopReactor()
		  os.sleep(0.10)
		  state = ""Active""
          reactor.activateReactor()
		end

      -- cut off reactor in case of emergency

      if info.temperature > cutoff_temp then
        print(""Reactor Too Hot, shutting down"")
        outflow = 0.0
        new_strength = 50
        cutoff_temp = 10001
        state = ""Emergency Shutdown""
        reactor.stopReactor()
      end
      if ((info.fieldStrength / info.maxFieldStrength) * 100) < 0.75 then
        print(""Reactor Field Has Failed, Failsafe Activated, Shutting Down"")
        outflow = 0.0
        new_strength = 50
        cutoff_temp = 10001
        state = ""Emergency Shutdown""
        reactor.stopReactor()
      end
      if ((1 - info.fuelConversion / info.maxFuelConversion) * 100) < 12 then
        print(""Reactor Fuel Low, Shutting Down"")
        outflow = 0.0
        new_strength = 1
        cutoff_temp = 10001
        state = ""Emergency Shutdown""
        reactor.stopReactor()
      end
    else
      if info.temperature < 2000 then
        state = ""Cooling""
      end
    end
  end

  if state ~= ""Active"" and not shutting_down then
    inflow_I_sum = 0
    inflow_D_last = 0
    outflow_I_sum = 0
    outflow_II_sum = 0
    outflow_D_last = 0
  end

  if inflow < 0 then
    inflow = 0.0
  end
  if outflow < 0 then
    outflow = 0.0
  end


  input_flux.setFlowOverride(inflow)
  output_flux.setFlowOverride(outflow)
 -- displayVariables 
	local deviation = idealField - ((info.fieldStrength / info.maxFieldStrength) * 100)
	local secondsToExpire = (info.maxFuelConversion - info.fuelConversion) / math.max(info.fuelConversionRate*0.00002, 0.00001)
	if info.fuelConversionRate > 249999 then
		fuelConversionRate = ((info.fuelConversionRate / (info.maxFuelConversion * 1000000)) * 2000)
		fuelMeasure = ""  %%/s""
	elseif info.fuelConversionRate > 999 then
		fuelConversionRate = (info.fuelConversionRate / 1000)
		fuelMeasure = "" ""..(unicode.char(956))..""b/t""
	elseif info.fuelConversionRate > 999999 then
		fuelConversionRate = (info.fuelConversionRate / 1000000)
		fuelMeasure = "" mb/t""
	else
		fuelConversionRate = info.fuelConversionRate
		fuelMeasure = "" nb/t""
	end
	
  -- Draw screen

if term.isAvailable() then
		function modify_eff(offset)
			local eff = ((output_flux / input_flux) * 100)
			if eff > 100000 then
			eff = 1
		end
	end
    local left_margin = 2
    local spacing = 1
    local values = {
			    ""Draconic Control™  [v14-xPID | KiSBN88r]"",
                "" "",
                ""                   Reactor Statistics"",
                ""┌───────────────────────────┬────────────────────────────┐"",
string.format(""│Time Until Refuel:         │  %5.0fd, %2.0fh, %2.0fm, %2.0fs     │"", secondsToExpire/86400, secondsToExpire	/3600 % 24, secondsToExpire/60 % 60, secondsToExpire % 60),
string.format(""│Ideal Field:               │           %7.3f%%         │"", idealField),
string.format(""│Current Field:             │           %7.3f%%         │"", ((info.fieldStrength / info.maxFieldStrength) * 100)),
                ""├───────────────────────────┼────────────────────────────┤"",
string.format(""│Fuel Remaining:            │           %7.3f%%         │"", ((1 - info.fuelConversion / info.maxFuelConversion) * 100)),
string.format(""│Fuel Use Rate:             │           %7.3f"" .. fuelMeasure .. ""     │"", fuelConversionRate),
                ""├───────────────────────────┼────────────────────────────┤"",
string.format(""│Temperature                │   %7.1f°c [%8.1f°f]   │"", info.temperature, ((info.temperature * 1.8) + 32)),
string.format(""│Ideal Temperature:         │   %7.1f°c [%8.1f°f]   │"", idealTemp, ((idealTemp * 1.8) + 32)),
                ""├───────────────────────────┼────────────────────────────┤"",
string.format(""│Energy Input:              │   %12.1f RF/t        │"", inflow),
string.format(""│Energy Output:             │   %12.1f RF/t        │"", outflow),
                ""└───────────────────────────┴────────────────────────────┘"",
                "" "",
                "" ""
}
	local values2 = {
"" "",
"" "",
"" "",
""                                                                                                                          [Reference Table]"",
""                                                                                                             ┌─────────────┬─────────────┬─────────────┐"",
""                                                                                                             │ Temperature │  Remaining  │ Consumption │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    14000    │    93.27    │    91.90    │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    15000    │    59.00    │    123.5    │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    16000    │    36.45    │     161     │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    17000    │    21.40    │     204     │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    18000    │    11.80    │     251     │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    19000    │    03.89    │     303     │"",
""                                                                                                             └─────────────┴─────────────┴─────────────┘"",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
string.format(""Energy Saturation:       %4.3f"", info.energySaturation),
string.format(""Max Fuel [nb]:           %4.3f"", (info.maxFuelConversion * 1000000)),
string.format(""Fuel Remaining [nb]:     %4.3f"", ((info.maxFuelConversion - info.fuelConversion) * 1000000)),
string.format(""Current field drain is   %g RF/t"", info.fieldDrainRate),
string.format(""Field Deviation: "" .. unicode.char(8776) .. deviation .. ""%%""),
string.format(""Input Flux Gate:  ["" .. input_flux.address .. ""] Set To: "" .. inflow),
string.format(""Output Flux Gate: ["" .. output_flux.address .. ""] Set To: "" .. outflow),
"" "",
                ""                                         PID Values"",
                "" "",
string.format(""I: P%12.1f, IS%12.1f, I%12.1f, D%12.1f, DL%12.1f, C%12.1f"", proportional_field_error, inflow_I_sum, integral_field_error, derivative_field_error, inflow_D_last, inflow_correction),
string.format(""O: P%12.1f, IS%12.1f, I%12.1f, D%12.1f, DL%12.1f, C%12.1f"", proportional_temp_error, outflow_I_sum, integral_temp_error, derivative_temp_error, outflow_D_last, outflow_correction),
}
term.clear()
    if Mode == 2 and Mode ~= 3 then
	for i, v in ipairs(values2) do
		term.setCursor(left_margin, i * spacing)
		term.write(v)
		end
	end
	if Mode ~= 3 then
	for i, v in ipairs(values) do
		term.setCursor(left_margin, i * spacing)
		term.write(v)
		end
	end
    -- Draw button values

    term.setCursor(temp_adjust_x_offset, temp_adjust_y_offset+10)
    term.write(""Reactor Temperature"")
    term.setCursor(field_adjust_x_offset+1, field_adjust_y_offset+10)
    term.write(""Field Strength"")

    -- Draw Buttons

    gpu.setForeground(0x000000)

    for bname, button in pairs(buttons) do
      if button.depressed then

        button.depressed = button.depressed - 1
        if button.depressed == 0 then
          button.depressed = nil
        end
      end
      if button.condition == nil or button.condition() then
        local center_color = 0xBBBBBB
        local highlight_color = 0xCCCCCC
        local lowlight_color = 0x808080
        if button.depressed then
          center_color = 0xAAAAAA
          highlight_color = 0x707070
          lowlight_color = 0xBBBBBB
        end
        gpu.setBackground(center_color)
        gpu.fill(button.x, button.y, button.width, button.height, "" "")
        if button.width > 1 and button.height > 1 then
          gpu.setBackground(lowlight_color)
          gpu.fill(button.x+1, button.y+button.height-1, button.width-1, 1, "" "")
          gpu.fill(button.x+button.width-1, button.y, 1, button.height, "" "")
          gpu.setBackground(highlight_color)
          gpu.fill(button.x, button.y, 1, button.height, "" "")
          gpu.fill(button.x, button.y, button.width, 1, "" "")
        end
        gpu.setBackground(center_color)
        term.setCursor(button.x + math.floor(button.width / 2 - #button.text / 2), button.y + math.floor(button.height / 2))
        term.write(button.text)
      end
    end

	gpu.setBackground(0x000000)
    gpu.setForeground(0xFFFFFF)
  end  

  -- Wait for next tick, or manual shutdown

  local event, id, op1, op2 = event.pull(0.05)
  if event == ""interrupted"" then
    if safe then
      break
    end
  elseif event == ""touch"" then
    
    -- Handle Button Presses

    local x = op1
    local y = op2

    for bname, button in pairs(buttons) do
      if (button.condition == nil or button.condition()) and x >= button.x and x <= button.x + button.width and y >= button.y and y <= button.y + button.height then
        button.action()
        button.depressed = 3
      end
    end
  end
end

term.clear()"
hre4rgH7,startup,jig487,Lua,Wednesday 28th of June 2023 11:08:10 AM CDT,"local inv = require(""inventoryFunctions"")

local menuList = {
    { name = ""Search Inventory"" },
    { name = ""Item Dump"" },
}

local outChest = peripheral.wrap(""minecraft:chest_23"")
--local garbage = peripheral.wrap()

--inv.getItemMenu(outChest)

while true do
    --Present a list of possible pages to pick from
    local cursor, _ = inv.handleMenu(menuList)
    --Option results:
    if cursor == 1 then
        inv.getItemMenu(outChest)
    elseif cursor == 2 then
        inv.dump(outChest)
    end
end"
gGWeBREX,inventoryFunctions,jig487,Lua,Wednesday 28th of June 2023 11:07:35 AM CDT,"local debug = false

--captures any amount of arguments and returns them in a table
local function capArgs(...)
    return arg
end

--returns a table of connected inventory wrap tables and names
local function getStorageChests(exclude)
    if not exclude then exclude = """" end

    local chestWraps = {}

    local peripheralNames = peripheral.getNames()

    --Remove dump chest and extra peripherals from storage list and add valid chests to chestWraps
    for key,val in pairs(peripheralNames) do
        if val == exclude or val == ""top"" or val == ""left"" or val == ""bottom"" or val == ""right"" or val == ""back"" then
            table.remove(peripheralNames, key)
        else
            --Load chestWraps list for valid inventories
            local tempList = capArgs(peripheral.getType(val))
            for i = 1, #tempList do
                if tempList[i] == ""inventory"" then
                    local num = #chestWraps+1
                    chestWraps[num] = {}
                    chestWraps[num].wrap = peripheral.wrap(val)
                    chestWraps[num].name = val
                    break
                end
            end
        end
    end

    return chestWraps
end

--takes a peripheral wraps from getStorageChests() and returns a table of every item in the connected inventories 
local function getInventoryList(chestWraps)
    local inventory = {}
    for i = 1, #chestWraps do
        local temp = chestWraps[i].wrap.list()
        for key,val in pairs(temp) do
            local num = #inventory+1
            inventory[num] = val
            inventory[num].slot = key
            inventory[num].chest = i
            inventory[num].index = num
            inventory[num].count = val.count
            inventory[num].name = string.lower(string.gsub(val.name, "".+%:"", """"))
        end
    end
    return inventory
end

--Returns a table of matching items from item list
--And returns a total count of items found
--[[
foundInChestList = {
    [1] = {
        chestID = 'number'
        { name = """", slot = """", count = """" }
        ...
    }
    ...
}
]]
local function search(search,itemList)

    search = string.lower(search)
    local foundItems = {}
    local totalCount = 0

    --Look through each item
    for i = 1, #itemList do
        --Check to see if current item matches item we are searching for
        if string.find( itemList[i].name, search ) then
            --found an item that matches search. Add it to foundItems table and update total found item count
            local num = #foundItems+1
            foundItems[num] = itemList[i]
            totalCount = totalCount + itemList[i].count
        end
    end

    return foundItems,totalCount
end

--Displays a arrow key controlled menu using a provided menuPage
local function handleMenu(menuOptions, cursor)
    if not cursor then cursor = 1 end

    local _,pageLength = term.getSize()
    pageLength = pageLength - 3
    local maxPage = math.ceil(#menuOptions/(pageLength))
    local page = math.min( math.ceil( cursor / pageLength ) ,maxPage)

    term.clear()
    while true do
        local displayStartIndex = math.max( pageLength*(page-1)+1, 1 )
        local displayEndIndex = math.min( pageLength*(page), #menuOptions )
        local col = term.getTextColor()

        cursor = math.min(cursor,displayEndIndex)
        cursor = math.max(cursor,1)

        if debug then
            term.setTextColor(colors.white)
            local hor = 25
            term.setCursorPos(hor,1)
            print(""cursor :"",cursor..""  "")
            term.setCursorPos(hor,2)
            print(""page :"",page..""  "")
            term.setCursorPos(hor,3)
            print(""pageLen :"",pageLength..""  "")
            term.setCursorPos(hor,4)
            print(""maxPg. :"",maxPage..""  "")
            term.setCursorPos(hor,5)
            print(""disp. Start :"",displayStartIndex..""  "")
            term.setCursorPos(hor,6)
            print(""disp. End :"",displayEndIndex..""  "")

        end
        
        local menuColor = colors.green
        term.setTextColor(menuColor)
        term.setCursorPos(1,1)
        --Display item options
        for index = displayStartIndex, displayEndIndex do

            local displayStr = """"
            if menuOptions[index] then
                displayStr = menuOptions[index].name
            

            if menuOptions[index].count then
                if menuOptions[index].count ~= 1 then
                    displayStr = displayStr.."" x""..menuOptions[index].count
                end
            end
            end

            if index == cursor then
                term.setTextColor(colors.orange)
                print("">""..(displayStr)..""<"")
                term.setTextColor(menuColor)
            else
                print(""[""..(displayStr)..""]"")
            end
        end
        term.setTextColor(col)
        print(""Page ""..page.."" / ""..maxPage)
        local _, key = os.pullEvent(""key"")
        if key == keys.up then
            --Move cursor up if it's not at first option
            if cursor > displayStartIndex then
                cursor = cursor - 1
            end
        elseif key == keys.down then
            --move cursor down if it's not at last option
            if cursor < displayEndIndex then
                cursor = cursor + 1
            end
        elseif key == keys.left then
            --move to previous page if not at first page
            if page > 1 then
                page = page - 1
                cursor = cursor - pageLength
                term.clear()
            end
        elseif key == keys.right then
            --move to next page if not at last page
            if page < maxPage then
                page = page + 1
                cursor = cursor + pageLength
                term.clear()
            end
        elseif key == keys.enter then
            --return the menu choice
            return cursor,""select""
        elseif key == keys.backspace then
            --exit the menu
            return cursor,""exit""
        else
            --player wants to search for a string
            return cursor,""search""
        end
    end
end

local function updateIndex(itemList)
    for key,val in pairs(itemList) do
        itemList[key].index = key
    end
    return itemList
end

--Moves 'count' number of items from foundItemList to the outChest
local function getItemMenu(outChest)

    local outChestName = peripheral.getName(outChest)
    local wrapList = getStorageChests(outChestName)
    local inventoryList = getInventoryList(wrapList)
    local activeInventory = inventoryList

    local searchKey = """"
    local cursor = 1
    local strKey

    while true do

        cursor,strKey = handleMenu(activeInventory,cursor)

        if strKey == ""exit"" then
            --If player wants to go back
            if searchKey == """" then
                break
            else
                searchKey = """"
                activeInventory = inventoryList
            end
        elseif strKey == ""search"" then
            term.clear()
            term.setCursorPos(1,1)
            print(""Enter search target:"")
            searchKey = read()
            activeInventory = search(searchKey,inventoryList)
        else
            if activeInventory[cursor] then
                --move highlighted item to output chest
                local itemSlot = activeInventory[cursor].slot
                local wrapID = wrapList[ activeInventory[cursor].chest ].wrap

                local count = activeInventory[cursor].count
                if wrapID.pushItems(outChestName, itemSlot, 64) ~= 0 then
                    --remove it from the list if stack is <= 64, then update lists
                    if count <= 64 then
                        local removeIndex = activeInventory[cursor].index

                        table.remove(inventoryList, removeIndex)
                        inventoryList = updateIndex(inventoryList)

                        table.remove(activeInventory, cursor)
                        activeInventory = updateIndex(activeInventory)
                    else
                        activeInventory[cursor].count = count - 64
                    end
                end
            end
        end
    end
end

--Takes everything in a specific chest and tries to push it into other peripheral inventories
--Takes an inventory peripheral wrap table
local function dump(dumpChest)
    local inventoryWraps = getStorageChests(dumpChest)
    local storageSize = #inventoryWraps

    local totalItemCount = 0
    local movedItems = 0

    for chestNum = 1, storageSize do

        local dumpList = dumpChest.list()

        local chestWrap = inventoryWraps[chestNum]

        for slot,_ in pairs(dumpList) do
            totalItemCount = totalItemCount + 1

            if dumpChest.pushItems(chestWrap.name, slot) ~= 0 then
                movedItems = movedItems + 1
            end
        end

        if movedItems == totalItemCount then return end
    end
end

return {
    getItemMenu = getItemMenu,
    handleMenu = handleMenu,
    dump = dump
}"
gFwFecKQ,NearestObjectExecutor interface,lastway,Python,Wednesday 28th of June 2023 10:59:01 AM CDT,"from typing import Protocol, Sequence

from geopandas import GeoDataFrame


class Point(Protocol):
    x: float
    y: float


class GnssInfoDto(Protocol):
    point: Point
    heading: float
    velocity: float


class NearestObjectDto(Protocol):
    id: int
    point: Point
    tag: str
    description: str
    direct: float
    curved: float


class NearestObjectExecutor:
    def __init__(self, df: GeoDataFrame) -> None:
        ...

    @classmethod
    def build(cls, df_path: str, info: GnssInfoDto) -> ""NearestObjectExecutor"":
        ...

    def execute(self, info: GnssInfoDto, count: int) -> Sequence[NearestObject]:
        ...
"
ey82FF2W,Compute,gatunes,Lua,Wednesday 28th of June 2023 10:48:12 AM CDT,"dotsWidth = 128
dotsHeight = 256
numDots = dotsWidth * dotsHeight
imageWidth = 512
imageHeight = 512
zoom = imageHeight + 64

framebuffers = { Framebuffer(), Framebuffer() }
image = Image(""https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.redd.it%2Fk7lix3j42cp11.jpg&f=1&nofb=1&ipt=1dc7853148c4f2f961116f0de0d1fa3b900a4c192a387eb71c17bb3e5250dbb6&ipo=images"")
function generate()
  if not image:isReady() then
    return
  end
  local framebuffer = Framebuffer()
  local sobelShader = Shader(
  [[
  out vec2 vUV;
  void main() {
    vUV = uv;
    gl_Position = vec4(position, 1.0);
  }
  ]],
  [[
  in vec2 vUV;
  uniform sampler2D image;
  uniform vec2 size;
  float sobelSample(in sampler2D tex, in vec2 uv, in vec3 offset) {
    vec3 pixelCenter = texture(tex, uv).rgb;
    vec3 pixelLeft   = texture(tex, uv - offset.xz).rgb;
    vec3 pixelRight  = texture(tex, uv + offset.xz).rgb;
    vec3 pixelUp     = texture(tex, uv + offset.zy).rgb;
    vec3 pixelDown   = texture(tex, uv - offset.zy).rgb;
    float center = (pixelCenter.r + pixelCenter.g + pixelCenter.b) / 3.0;
    return (
      abs((pixelLeft.r + pixelLeft.g + pixelLeft.b) / 3.0  - center)
      + abs((pixelRight.r + pixelRight.g + pixelRight.b) / 3.0 - center)
      + abs((pixelUp.r + pixelUp.g + pixelUp.b) / 3.0    - center)
      + abs((pixelDown.r + pixelDown.g + pixelDown.b) / 3.0  - center)
    );
  }
  void main() {
    vec2 outOffset = vec2(0, 0);
    vec2 outSize = resolution;
    if (size.x / size.y > 1.0) {
      outSize.x *= size.y / size.x;
      outOffset.x = resolution.x * 0.5 - outSize.x * 0.5;
    } else {
      outSize.y *= size.x / size.y;
      outOffset.y = resolution.y * 0.5 - outSize.y * 0.5;
    }
    outSize /= resolution;
    outOffset /= resolution;
    vec2 uv = vUV * outSize + outOffset;
    vec3 offset = vec3((1.0 / resolution.x), (1.0 / resolution.y), 0.0);
    float sobel = sobelSample(image, uv, offset) * 4.0;
    gl_FragColor = vec4(vec3(clamp(sobel, 0.0, 1.0)), 1.0);
  }
  ]]
  )
  framebuffer:bind(imageWidth, imageHeight)
  sobelShader:uniformVec2(""resolution"", imageWidth, imageHeight)
  sobelShader:uniformVec2(""size"", image:getSize())
  sobelShader:uniformTexture(""image"", image)
  sobelShader:render()
  framebuffer:unbind()
  compute:uniformTexture(""dataTextureB"", framebuffer)
  -- debugshader:uniformTexture(""image"", framebuffer)
  image = nil
  framebuffer = nil
  sobelShader = nil
  collectgarbage()

  for i=1,#framebuffers do
    framebuffers[i]:bind(dotsWidth, dotsHeight)
    framebuffers[i]:unbind()
  end

  local data = {}
  local i=1
  for y=0,dotsHeight-1 do
    for x=0,dotsWidth-1 do
      data[i] = x / (dotsWidth - 1)
      data[i + 1] = y / (dotsHeight - 1)
      data[i + 2] = 0.0
      data[i + 3] = 1.0
      i = i + 4;
    end
  end
  framebuffers[1]:setTextureData(0, table.unpack(data))
  i = 1
  for y=0,dotsHeight-1 do
    for x=0,dotsWidth-1 do
      local r, g, b = math.hsv(math.random(), math.random(), math.random())
      data[i] = r
      data[i + 1] = g
      data[i + 2] = b
      data[i + 3] = 1.0
      i = i + 4;
    end
  end
  framebuffer = Framebuffer()
  framebuffer:bind(dotsWidth, dotsHeight)
  framebuffer:unbind()
  framebuffer:setTextureData(0, table.unpack(data))
  shader:uniformTexture(""dataTextureB"", framebuffer)
end

compute = Shader(
[[
void main() {
  gl_Position = vec4(position, 1.0);
}
]],
[[
uniform sampler2D dataTextureA;
uniform sampler2D dataTextureB;
uniform float delta;
void main() {
  vec4 dataA = texelFetch(dataTextureA, ivec2(gl_FragCoord.xy), 0);
  vec4 dataB = texture(dataTextureB, dataA.xy);

  dataA.w = mix(dataA.w, max(1.1 - dataB.x, 0), 1.0 - exp(-30 * delta));
  dataA.x += dataA.w * 0.1 * delta;
  if (dataA.x > 1.0) {
    dataA.x -= 1.0;
    dataA.w = 1.0;
  }

  fragOutput0 = dataA;
}
]]
)

shader = Shader(
[[
out vec3 vColor;
out vec2 vUV;
uniform sampler2D dataTextureA;
uniform sampler2D dataTextureB;
uniform int stride;
uniform vec2 size;
uniform float zoom;
void main() {
  vec4 dataA = texelFetch(dataTextureA, ivec2(gl_InstanceID % stride, gl_InstanceID / stride), 0);
  vec4 dataB = texelFetch(dataTextureB, ivec2(gl_InstanceID % stride, gl_InstanceID / stride), 0);
  vColor = dataB.xyz * (1.0 - pow(dataA.w, 2.0) * 0.8);
  vUV = (uv - 0.5) * 2.0;
  gl_Position = vec4(
    (
      (position + vec3(dataA.xy * size - size * 0.5, 0))
      / vec3(vec2(resolution.x / resolution.y, 1.0) * zoom, 1.0)
    ),
    1.0
  );
}
]],
[[
in vec3 vColor;
in vec2 vUV;
void main() {
  float d = min(length(vUV), 1.0);
  float l = 0.5 + fract(gl_FragCoord.y / 2.0) * 0.5;
  gl_FragColor = vec4(vColor * (1.0 - d) * l, smoothstep(1.0, 0.8, d));
}
]]
)
shader:setBlend(true)
shader:setDepthTest(false)
shader:uniformInt(""stride"", dotsWidth)
shader:uniformVec2(""size"", imageWidth, imageHeight)
shader:uniformFloat(""zoom"", zoom * 0.5)

current = 1
function step()
  local next = 1 + (current % 2)

  framebuffers[next]:bind(dotsWidth, dotsHeight)
  compute:uniformTexture(""dataTextureA"", framebuffers[current])
  compute:uniformFloat(""delta"", delta)
  compute:render()
  framebuffers[next]:unbind()

  current = next
end

camera.setPosition(0, 0, 2)

log([[
## #013 Compute
Press *CTRL+E* to edit source
]])

-- debugshader = Shader(
-- [[
-- out vec2 vUV;
-- uniform vec2 size;
-- uniform float zoom;
-- void main() {
--   vUV = uv;
--   gl_Position = vec4(
--     (
--       (position * vec3(size * 0.5, 1.0))
--       / vec3(vec2(resolution.x / resolution.y, 1.0) * zoom, 1.0)
--     ),
--     1.0
--   );
-- }
-- ]],
-- [[
-- in vec2 vUV;
-- uniform sampler2D image;
-- void main() {
--   gl_FragColor = sRGB(texture(image, vUV));
-- }
-- ]]
-- )
-- debugshader:uniformFloat(""zoom"", zoom * 0.5)
-- debugshader:uniformVec2(""size"", imageWidth, imageHeight)

function loop()
  if image then
    generate()
  else
    -- debugshader:render()
    step()
    shader:uniformTexture(""dataTextureA"", framebuffers[current])
    shader:render(numDots)
  end
end
"
dxbSp60C,M5 Stack Echo,MiAutomations,YAML,Wednesday 28th of June 2023 10:03:01 AM CDT,"substitutions:
  name: m5stack-atom-echo-80b530
  friendly_name: M5Stack Atom Echo 80b530
packages:
  m5stack.atom-echo: github://esphome/media-players/m5stack-atom-echo.yaml@main
esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
api:
  encryption:
    key: /pWDtG74pPrg2HvgYNYKjNW/pND67y5sI6j5ihuShEw=


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
"
4qZRGsnZ,mixins,raya_petkova,Python,Wednesday 28th of June 2023 09:41:13 AM CDT,"class Sport:
    pass

class PlayingWithBall:
    def play_ball(self):
        pass

class Swimming(Sport):
    pass

class TableTennis(Sport, PlayingWithBall):
    pass

class CourtTennis(Sport, PlayingWithBall):
    pass"
YhQXXMmP,rc.lua,SuperBoby,Lua,Wednesday 28th of June 2023 09:26:32 AM CDT,"if viewportAPI then os.unloadAPI(""viewportAPI"") end
os.loadAPI(""/disk/dev/touchscreen-api/viewportAPI"")
if buttonAPI then os.unloadAPI(""buttonAPI"") end
os.loadAPI(""/disk/dev/touchscreen-api/buttonAPI"")
if eventDispatcherAPI then os.unloadAPI(""eventDispatcherAPI"") end
os.loadAPI(""/disk/dev/touchscreen-api/eventDispatcherAPI"")

destinations = {
    ""House"",
    ""NetherMeteor"",
    ""DesertJungle"",
    ""VolcanoVillage"",
    ""Creek""
}
buttons = {}
buttonHeight = 1
destinationPrefix = ""Current destination: ""

viewport = viewportAPI.new({term = term})

buttonHandler = function(element, x, y)
    statusbtn.text = destinationPrefix..element.text

    return true -- requests redraw of current viewport
end

quit = function(element, x, y)
    term.setBackgroundColor(colors.black)
    term.clear()
    error()
end

statusbtn = buttonAPI.new({
    text = ""Current destination: ""..destinations[1],
    x = buttonAPI.anchorLeft,
    y = buttonAPI.anchorBottom,
    height = buttonHeight,
    width = buttonAPI.maxWidth,
    isSticky = true,
    backgroundColor = colors.green
})
viewport:addElement(statusbtn)

for key, value in ipairs(destinations) do
    table.insert(
        buttons,
        buttonAPI.new({
            text = value,
            x = buttonAPI.anchorLeft,
            y = key * 2 * buttonHeight,
            height = buttonHeight,
            width = buttonAPI.maxWidth,
            isSticky = true,
            backgroundColor = colors.blue
        })
    )

    buttons[key].callback = buttonHandler

    viewport:addElement(buttons[key])
end


viewport:redraw()


eventDispatcherAPI.addHandler(""mouse_click"", function(event, side, xPos, yPos)
    viewport:handleClick(xPos, yPos)
end)

eventDispatcherAPI.runDispatchLoop()"
ZwVuY4QF,142,parthnaik,JSON,Wednesday 28th of June 2023 09:20:24 AM CDT,"{
    ""resourceIdentifier"": ""142"",
    ""resourceName"": ""Reforestation of degraded grasslands in Uchindile & Mapanda, Tanzania"",
    ""description"": ""The FSC certified UFP & MFP plant trees on grasslands in the poverty stricken south-west region.  The total area covers 18,379 ha with 10,800 ha plantable. The area has been degraded grassland due to frequent anthropogenic-led wildfires that have plagued the area resulting over time in the trees dying leaving only grassland.  Objectives are to: 1) establish a sustainable source of timber and wood taking the pressure off natural forests 2) sequester CO2 generating high-quality emission reductions 3) promote environmental conservation: soil, water and bio-diversity  through the management of indigenous habitats(CCBA)  4. support development in communities through employment, health, education and infra-structure 5) generate income through carbon revenues as 10% goes to communities and the remainder is reinvested in Tanzania 6) provide seedlings for the villages to establish woodlots There are 104 permanent employees and appr. 500 casual workers, employed 200 days per year"",
    ""location"": {
        ""latitude"": -8.659444,
        ""longitude"": 35.391111
    },
    ""inPublicCommentPeriod"": false,
    ""lastPublicCommentPeriod"": null,
    ""attributes"": [
        {
            ""code"": ""PROJECT_ID"",
            ""values"": [
                {
                    ""type"": ""string"",
                    ""value"": ""142""
                }
            ]
        },
        {
            ""code"": ""STATE_PROVINCE"",
            ""values"": [
                {
                    ""type"": ""string"",
                    ""value"": ""Morogoro and Iringa Regions""
                }
            ]
        }
    ],
    ""participationSummaries"": [
        {
            ""programCode"": ""VCS"",
            ""attributes"": [
                {
                    ""code"": ""PROPONENT_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Green Resources Tanzania Ltd (GRL)""
                        },
                        {
                            ""type"": ""string"",
                            ""value"": ""Karnataka, India""
                        },
                        {
                            ""type"": ""string"",
                            ""value"": ""info@kms-group.com""
                        }
                    ]
                },
                {
                    ""code"": ""PROJECT_STATUS"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Registered""
                        },
                        {
                            ""type"": ""assetSearchLink"",
                            ""value"": null,
                            ""targetId"": ""142""
                        },
                        {
                            ""type"": ""bufferSearchLink"",
                            ""value"": null,
                            ""targetId"": ""142""
                        }
                    ]
                },
                {
                    ""code"": ""EST_ANNUAL_EMISSION_REDCT"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""25000""
                        }
                    ]
                },
                {
                    ""code"": ""TOTAL_BUFFER_POOL_CREDITS"",
                    ""values"": [
                        {
                            ""type"": ""integer"",
                            ""value"": 158668
                        }
                    ]
                },
                {
                    ""code"": ""PRIMARY_PROJECT_CATEGORY_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Agriculture Forestry and Other Land Use""
                        }
                    ]
                },
                {
                    ""code"": ""PROJECT_SUBCATERGORY_NAMES"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""ARR""
                        }
                    ]
                },
                {
                    ""code"": ""PROTOCOL_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""AR-AM0005""
                        }
                    ]
                },
                {
                    ""code"": ""PROJECT_ACREAGE"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""5625 Hectares""
                        }
                    ]
                },
                {
                    ""code"": ""VALIDATOR_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Tuev Sued Industrie Service GmbH (Tuev Sued)""
                        }
                    ]
                },
                {
                    ""code"": ""PROJECT_REGISTRATION_DATE"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""06/04/2020""
                        }
                    ]
                },
                {
                    ""code"": ""CREDIT_PERIOD_INFO"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""1st, 01/01/2002 - 31/12/2100""
                        }
                    ]
                }
            ]
        },
        {
            ""programCode"": ""CCB"",
            ""attributes"": [
                {
                    ""code"": ""PROPONENT_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Green Resources Tanzania Ltd (GRL)""
                        },
                        {
                            ""type"": ""string"",
                            ""value"": ""Karnataka, India""
                        },
                        {
                            ""type"": ""string"",
                            ""value"": ""info@kms-group.com""
                        }
                    ]
                },
                {
                    ""code"": ""PROJECT_STATUS"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Verification approved""
                        }
                    ]
                },
                {
                    ""code"": ""EST_ANNUAL_EMISSION_REDCT"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""25000""
                        }
                    ]
                },
                {
                    ""code"": ""PRIMARY_PROJECT_CATEGORY_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Afforestation, Reforestation and Revegetation""
                        }
                    ]
                },
                {
                    ""code"": ""PROJECT_ACREAGE"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""5625 Hectares""
                        }
                    ]
                },
                {
                    ""code"": ""VALIDATOR_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Tuev Sued Industrie Service GmbH (Tuev Sued)""
                        }
                    ]
                },
                {
                    ""code"": ""CCB_STANDARD_EDITION_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""CCB Second Edition""
                        }
                    ]
                },
                {
                    ""code"": ""AUDITOR_SITE_VISIT_FROM_TO_DT"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""22-Sep-2014 to 25-Sep-2014""
                        }
                    ]
                },
                {
                    ""code"": ""FIRST_VERIFICATION_VER_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Tuev Sued Industrie Service GmbH (Tuev Sued)""
                        }
                    ]
                },
                {
                    ""code"": ""SECOND_VERIFICATION_VER_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Tuev Sued Industrie Service GmbH (Tuev Sued)""
                        }
                    ]
                },
                {
                    ""code"": ""THIRD_VERIFICATION_VER_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""SCS Global Services""
                        }
                    ]
                },
                {
                    ""code"": ""FOURTH_VERIFICATION_VER_NAME"",
                    ""values"": [
                        {
                            ""type"": ""string"",
                            ""value"": ""Tuev Nord Cert GmbH (Tuev Nord)""
                        }
                    ]
                }
            ]
        }
    ],
    ""documentGroups"": [
        {
            ""code"": ""VCS_PIPELINE_DOCUMENTS"",
            ""description"": ""VCS Pipeline Documents"",
            ""documents"": []
        },
        {
            ""code"": ""VCS_REGISTRATION_DOCUMENTS"",
            ""description"": ""VCS Registration Documents"",
            ""documents"": [
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=2986&IDKEY=akjalskjf098234kj28098sfkjlf098098kl32lasjdflkj909j4117694"",
                    ""documentType"": ""Project Description"",
                    ""documentName"": ""PROJ DESC 142 07JUL2009.pdf"",
                    ""uploadDate"": ""2010-09-01T15:33:33.147Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=916&IDKEY=80e98hfalksuf098fnsdalfkjfoijmn4309JLKJFjlaksjfla991263164"",
                    ""documentType"": ""Registration Representation"",
                    ""documentName"": ""vcsregrep230909.pdf"",
                    ""uploadDate"": ""2009-09-24T14:53:56.543Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=912&IDKEY=998klasmf8jflkasf8098afnasfkj98f0a9sfsakjflsakjf8d81257648"",
                    ""documentType"": ""Validation Report"",
                    ""documentName"": ""VCS_Validation-Report_Tanzania_UFP-MFP.pdf"",
                    ""uploadDate"": ""2009-09-22T12:05:02.213Z""
                }
            ]
        },
        {
            ""code"": ""VCS_ISSUANCE_DOCUMENTS"",
            ""description"": ""VCS Issuance Documents"",
            ""documents"": [
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=2889&IDKEY=9097809fdslkjf09rndasfufd098asodfjlkduf09nm23mrn87n3983931"",
                    ""documentType"": ""Issuance Representation"",
                    ""documentName"": ""GRL Issuance Deed.pdf"",
                    ""uploadDate"": ""2010-08-16T15:32:31.103Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=10574&IDKEY=9kjalskjf098234kj28098sfkjlf098098kl32lasjdflkj909a14581546"",
                    ""documentType"": ""Issuance Representation"",
                    ""documentName"": ""UMFP Issuance Deed 2013.pdf"",
                    ""uploadDate"": ""2013-06-06T11:44:10.653Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=14041&IDKEY=f0e98hfalksuf098fnsdalfkjfoijmn4309JLKJFjlaksjfla9i19362539"",
                    ""documentType"": ""Issuance Representation"",
                    ""documentName"": ""UMFP Issuance Deed 2014.PDF"",
                    ""uploadDate"": ""2014-05-19T11:10:47.973Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=31802&IDKEY=qiofj09234rm9oq4jndsma80vcalksdjf98cxkjaf90823nmq3i43854958"",
                    ""documentType"": ""Issuance Representation"",
                    ""documentName"": ""PP_ISS_REP_142_01JAN2002_30NOV2008.pdf"",
                    ""uploadDate"": ""2011-07-22T14:57:17Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=52374&IDKEY=mq934lkmsad39asjdkfj90qlkalsdkngaf98ulkandDfdvDdfhD72223746"",
                    ""documentType"": ""Issuance Representation"",
                    ""documentName"": ""VCS-Issuance-Representatin GRL.pdf"",
                    ""uploadDate"": ""2021-04-29T12:52:54.793Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=3023&IDKEY=80e98hfalksuf098fnsdalfkjfoijmn4309JLKJFjlaksjfla994168717"",
                    ""documentType"": ""Monitoring Report"",
                    ""documentName"": ""Monitoring Report UFP MFP Version 8 2_9_10.pdf"",
                    ""uploadDate"": ""2010-09-17T19:23:48.653Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=10571&IDKEY=oiofj09234rm9oq4jndsma80vcalksdjf98cxkjaf90823nmq3x14577409"",
                    ""documentType"": ""Monitoring Report"",
                    ""documentName"": ""UMFP MR after audit 130501.pdf"",
                    ""uploadDate"": ""2013-06-06T10:42:03.233Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=14229&IDKEY=flksjoiuwqowrnoiuomnckjashoufifmln902309ksdflku098n19621791"",
                    ""documentType"": ""Monitoring Report"",
                    ""documentName"": ""UMFP MR  VCSv3.3 140611.pdf"",
                    ""uploadDate"": ""2014-06-16T16:26:49.483Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=31800&IDKEY=88723kjnf7kjandsaslmdv09887vaksmrmnwqkjoiuanfnfuq0q43852200"",
                    ""documentType"": ""Monitoring Report"",
                    ""documentName"": ""MONIT_REP_142_01JAN2002_30NOV2008.pdf"",
                    ""uploadDate"": ""2011-07-22T14:57:17Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=52372&IDKEY=s097809fdslkjf09rndasfufd098asodfjlkduf09nm23mrn87972220988"",
                    ""documentType"": ""Monitoring Report"",
                    ""documentName"": ""MR_v2.1_VCS_GR.pdf"",
                    ""uploadDate"": ""2021-04-29T12:10:28.63Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=2895&IDKEY=k98klasmf8jflkasf8098afnasfkj98f0a9sfsakjflsakjf8dl3992205"",
                    ""documentType"": ""Validation Representation"",
                    ""documentName"": ""VCS-Deed_Validation_UFP-MFP.pdf"",
                    ""uploadDate"": ""2010-08-17T08:18:08.97Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=2843&IDKEY=8097809fdslkjf09rndasfufd098asodfjlkduf09nm23mrn8703920497"",
                    ""documentType"": ""Verification Report"",
                    ""documentName"": ""VCS_Verification-Report_Tanzania_04Aug10.pdf"",
                    ""uploadDate"": ""2010-08-05T14:25:59.077Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=11089&IDKEY=l097809fdslkjf09rndasfufd098asodfjlkduf09nm23mrn87915291731"",
                    ""documentType"": ""Verification Report"",
                    ""documentName"": ""130722_VCS Verification-Rep_GRL_MFP-UFP.pdf"",
                    ""uploadDate"": ""2013-07-23T14:42:05.327Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=14036&IDKEY=liofj09234rm9oq4jndsma80vcalksdjf98cxkjaf90823nmq3819355644"",
                    ""documentType"": ""Verification Report"",
                    ""documentName"": ""VCS_GR-UMFP_VerificationReport_051614-2.pdf"",
                    ""uploadDate"": ""2014-05-16T16:37:21.673Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=52373&IDKEY=l0e98hfalksuf098fnsdalfkjfoijmn4309JLKJFjlaksjfla9l72222367"",
                    ""documentType"": ""Verification Report"",
                    ""documentName"": ""2021-04-23_FVR_UchindileMapanda.pdf"",
                    ""uploadDate"": ""2021-04-29T12:15:37.627Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=2896&IDKEY=lkjalskjf098234kj28098sfkjlf098098kl32lasjdflkj909s3993584"",
                    ""documentType"": ""Verification Representation"",
                    ""documentName"": ""VCS-Deed_Verification_UFP-MFP.pdf"",
                    ""uploadDate"": ""2010-08-17T08:18:30.5Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=11156&IDKEY=jiofj09234rm9oq4jndsma80vcalksdjf98cxkjaf90823nmq3915384124"",
                    ""documentType"": ""Verification Representation"",
                    ""documentName"": ""TUV-SUD_VCS-Deed_UMFP-600501037_22July13.pdf"",
                    ""uploadDate"": ""2013-07-29T13:01:32.217Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=14037&IDKEY=k903q4jsafkasjfu90amnmasdfkaidflnmdf9348r09dmfasdfs19357023"",
                    ""documentType"": ""Verification Representation"",
                    ""documentName"": ""VCS_GR-UMFP_VerificationRepresentation_051614.pdf"",
                    ""uploadDate"": ""2014-05-16T16:38:09.97Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=52375&IDKEY=j8723kjnf7kjandsaslmdv09887vaksmrmnwqkjoiuanfnfuq0n72225125"",
                    ""documentType"": ""Verification Representation"",
                    ""documentName"": ""VCS-Verification-Representation-v4.1.pdf"",
                    ""uploadDate"": ""2021-04-29T12:54:08.79Z""
                }
            ]
        },
        {
            ""code"": ""VCS_OTHER_DOCUMENTS"",
            ""description"": ""VCS Other Documents"",
            ""documents"": [
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=3022&IDKEY=r097809fdslkjf09rndasfufd098asodfjlkduf09nm23mrn87j4167338"",
                    ""documentType"": ""AFOLU Project Element"",
                    ""documentName"": ""UFP-MFP Tanzania VCS 2nd risk assessment.pdf"",
                    ""uploadDate"": ""2010-09-17T18:48:43.063Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=14065&IDKEY=f98klasmf8jflkasf8098afnasfkj98f0a9sfsakjflsakjf8d819395635"",
                    ""documentType"": ""AFOLU Project Element"",
                    ""documentName"": ""Non_Perm_Risk.pdf"",
                    ""uploadDate"": ""2014-05-23T11:45:14.337Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=11032&IDKEY=dkjalskjf098234kj28098sfkjlf098098kl32lasjdflkj909j15213128"",
                    ""documentType"": ""KML File"",
                    ""documentName"": ""MFP and UFP bnd.kml"",
                    ""uploadDate"": ""2013-07-17T19:51:20.293Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=7512&IDKEY=kkjalskjf098234kj28098sfkjlf098098kl32lasjdflkj909k10359048"",
                    ""documentType"": ""Loss Event Report"",
                    ""documentName"": ""VCS Loss Event Report_UMFP 111020.pdf"",
                    ""uploadDate"": ""2012-06-11T20:50:00.48Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=6750&IDKEY=f0e98hfalksuf098fnsdalfkjfoijmn4309JLKJFjlaksjfla9K9308250"",
                    ""documentType"": ""Loss Event Representation"",
                    ""documentName"": ""Loss Event of representation_UMFP 120228.pdf"",
                    ""uploadDate"": ""2012-02-28T20:18:25.23Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=2194&IDKEY=wlksjoiuwqowrnoiuomnckjashoufifmln902309ksdflku09803025526"",
                    ""documentType"": ""Other"",
                    ""documentName"": ""CCBA PDD ufp mfp 17 aug 09-jh.doc.pdf"",
                    ""uploadDate"": ""2010-04-21T12:11:12.763Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=31799&IDKEY=9097809fdslkjf09rndasfufd098asodfjlkduf09nm23mrn87n43850821"",
                    ""documentType"": ""Other"",
                    ""documentName"": ""VERIF_REP_142_01JAN2002_30NOV2008.pdf"",
                    ""uploadDate"": ""2011-07-22T14:57:17Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=14230&IDKEY=m0e98hfalksuf098fnsdalfkjfoijmn4309JLKJFjlaksjfla9a19623170"",
                    ""documentType"": ""Registration and Issuance Review Report"",
                    ""documentName"": ""Project 142 Review Report 16 June 2014 CLOSED.pdf"",
                    ""uploadDate"": ""2014-06-16T16:28:07.96Z""
                }
            ]
        },
        {
            ""code"": ""CCB_VALIDATION_DOCUMENTS"",
            ""description"": ""CCB Validation Documents"",
            ""documents"": [
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=912&IDKEY=998klasmf8jflkasf8098afnasfkj98f0a9sfsakjflsakjf8d81257648"",
                    ""documentType"": ""Validation Report"",
                    ""documentName"": ""VCS_Validation-Report_Tanzania_UFP-MFP.pdf"",
                    ""uploadDate"": ""2009-09-22T12:05:02.213Z""
                }
            ]
        },
        {
            ""code"": ""CCB_VERIFICATION_DOCUMENTS"",
            ""description"": ""CCB Verification Documents"",
            ""documents"": [
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=31801&IDKEY=fiquwesdfmnk0iei23nnm435oiojnc909dsflk9809adlkmlkf43853579"",
                    ""documentType"": ""CCB Verification Statement"",
                    ""documentName"": ""VERIF_STA_142_01JAN2002_30NOV2008.pdf"",
                    ""uploadDate"": ""2011-07-22T14:57:17Z""
                }
            ]
        },
        {
            ""code"": ""CCB_OTHER_DOCUMENTS"",
            ""description"": ""CCB Other Documents"",
            ""documents"": [
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=11032&IDKEY=dkjalskjf098234kj28098sfkjlf098098kl32lasjdflkj909j15213128"",
                    ""documentType"": ""KML File"",
                    ""documentName"": ""MFP and UFP bnd.kml"",
                    ""uploadDate"": ""2013-07-17T19:51:20.293Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=2194&IDKEY=wlksjoiuwqowrnoiuomnckjashoufifmln902309ksdflku09803025526"",
                    ""documentType"": ""Other"",
                    ""documentName"": ""CCBA PDD ufp mfp 17 aug 09-jh.doc.pdf"",
                    ""uploadDate"": ""2010-04-21T12:11:12.763Z""
                },
                {
                    ""uri"": ""https://registry.verra.org/mymodule/ProjectDoc/Project_ViewFile.asp?FileID=31799&IDKEY=9097809fdslkjf09rndasfufd098asodfjlkduf09nm23mrn87n43850821"",
                    ""documentType"": ""Other"",
                    ""documentName"": ""VERIF_REP_142_01JAN2002_30NOV2008.pdf"",
                    ""uploadDate"": ""2011-07-22T14:57:17Z""
                }
            ]
        }
    ],
    ""childResources"": []
}"
xFaSHueZ,CALCULATOR,MAMKIN_POC,C++,Wednesday 28th of June 2023 09:13:10 AM CDT,"//18.05.2023
#include <iostream>
#include <string>
#include <vector>
using namespace std;

template <typename Type>

void deleteVectorElement(vector <Type>& _vector, const int index)
{
	auto iter = _vector.begin();
	_vector.erase(iter + index);
}

double string_to_double(const string _num)
{
	bool isNegative = _num[0] == '-';

	string integer;
	string fractional;

	int i = 0;
	while (_num[i] != '.' && _num[i] != ',' && i < _num.size())
	{
		integer += _num[i];
		i++;
	}
	i++;
	while (i < _num.size())
	{
		fractional += _num[i];
		i++;
	}

	double num = atoi(&integer[0]);
	double tmp = atoi(&fractional[0]);
	for (int i = 0; i < fractional.size(); i++) tmp /= 10;
	num += tmp;

	return num;
}

bool isSygn(const char symbol) { return symbol == '+' || symbol == '-' || symbol == '/' || symbol == '*'; }

bool isNumber(const char symbol) { return (symbol >= '0' && symbol <= '9') || symbol == ',' || symbol == '.'; }

string openingBrackets(const string exercise, const int index = 0);

double solveExercise(const string exercise)
{
	vector <double> numbers;
	vector <char> signs;

	string copyExercise = openingBrackets(exercise);
	
	for (int i = 0; i < copyExercise.size();)
	{
		bool isNegativeNumber = (i == 0 && copyExercise[i] == '-');
		if (i > 0) isNegativeNumber = (isSygn(copyExercise[i - 1]) && copyExercise[i] == '-');

		if (isNumber(copyExercise[i]) || isNegativeNumber)
		{
			string strNumber;
			while (isNumber(copyExercise[i]) || isNegativeNumber && i < copyExercise.size())
			{
				strNumber += copyExercise[i];
				i++;
				isNegativeNumber = false;
			}
			double number = string_to_double(strNumber);
			numbers.push_back(number);
		}

 		if(isSygn(copyExercise[i]) && !isNegativeNumber)
		{
			signs.push_back(copyExercise[i]);
		}
		i++;
	}

	double result = 0;
	for (int i = 0; i < signs.size(); i++)
	{
		char sign = signs[i];
		if (sign == '*')
		{
			result = numbers[i] * numbers[i + 1];
			deleteVectorElement(numbers, i + 1);
			numbers[i] = result;
			deleteVectorElement(signs, i);
			i--;
		}
		else if (sign == '/')
		{
			result = numbers[i] / numbers[i + 1];
			deleteVectorElement(numbers, i + 1);
			numbers[i] = result;
			deleteVectorElement(signs, i);
			i--;
		}
	}
	for (int i = 0; i < signs.size(); i++)
	{
		char sign = signs[i];
		if (sign == '+')
		{
			result = numbers[i] + numbers[i + 1];
			deleteVectorElement(numbers, i + 1);
			numbers[i] = result;
			deleteVectorElement(signs, i);
			i--;
		}
		else if (sign == '-')
		{
			result = numbers[i] - numbers[i + 1];
			deleteVectorElement(numbers, i + 1);
			numbers[i] = result;
			deleteVectorElement(signs, i);
			i--;
		}
	}
	return result;
}

string openingBrackets(const string exercise, const int index)
{
	string copyExercise = exercise;

	int i = index;
	while (copyExercise[i] != '\0')
	{
		if (copyExercise[i] == '(')
		{
			string miniExercise;
			i++;
			int j = i;
			while (copyExercise[j] != ')')
			{
				if (copyExercise[j] == '(')
				{
					copyExercise = openingBrackets(copyExercise, j);
					j--;
				}
				else
				{
					miniExercise += copyExercise[j];
				}
				j++;
			}

			double num = solveExercise(miniExercise);
			string result;
			if (num == static_cast<int>(num)) 
			{
				result = to_string(static_cast<int>(num));
			}
			else
			{
				result = to_string(num);
			}

			i--;

			auto iter = copyExercise.begin();
			while (copyExercise[i] != ')')
			{
				copyExercise.erase(iter + i);
			}
			copyExercise.erase(iter + i);
			int k = 0;
			for (; k < result.size(); k++)
			{
				copyExercise.insert(iter + i + k, result[k]);
			}
			i += k - 1;
		}
		i++;
	}
	return copyExercise;
}

int main()
{
	setlocale(LC_ALL, ""rus"");

	string exercise;
	cout << ""Введите пример: "" << endl;
	getline(cin, exercise);

	double result = solveExercise(exercise);
	cout << exercise << "" = "" << result << endl;

	system(""pause"");
	return 0;
}"
KiSBN88r,Draconic Control v14.0 [xPID] [Lua 5.3 / 5.2],neuroticfox,Lua,Wednesday 28th of June 2023 09:04:22 AM CDT,"local component = require(""component"")
local event = require(""event"")
local term = require(""term"")
local gpu = component.gpu
local unicode= require(""unicode"")
chaosMode = 0
Mode = 2
      -- Inflow PID
local proportional_field_error = 0
local inflow_I_sum = 0
local integral_field_error = 0
local derivative_field_error = 0
local inflow_D_last = 0
local inflow_correction = 0
 
    -- Outflow PID
local proportional_temp_error = 0
local outflow_I_sum = 0
local integral_temp_error = 0
local derivative_temp_error = 0
local outflow_D_last = 0
local outflow_correction = 0

 -- Safety Checks

if not component.isAvailable(""draconic_reactor"") then
  print(""Reactor not connected. Please connect computer to reactor with an Adapter block."")
  os.exit()
end
reactor = component.draconic_reactor
local fluxGates = {}
for x,y in pairs(component.list(""flux_gate"")) do
  fluxGates[#fluxGates+1] = x
end
if #fluxGates < 2 then
  print(""Not enough flux gates connected; please connect inflow and outflow flux gates with Adapter blocks."")
  os.exit()
end
input_flux = component.proxy(fluxGates[1])
output_flux = component.proxy(fluxGates[2])
if not input_flux or not output_flux then
  print(""Not enough flux gates connected; please connect inflow and outflow flux gates with Adapter blocks."")
  os.exit()
end

  local info = reactor.getReactorInfo()

 -- AutoSet Gates
		reactor.chargeReactor()
		satOne = info.energySaturation
		fieldOne = info.fieldStrength
		input_flux.setFlowOverride(1.0)
		os.sleep(0.5)
		satTwo = info.energySaturation
		fieldTwo = info.fieldStrength
		input_flux.setFlowOverride(0.0)
		reactor.stopReactor()
	if satTwo == satOne or fieldTwo == fieldOne then
	local oldAddr = input_flux.address
      input_flux = component.proxy(output_flux.address)
      output_flux = component.proxy(oldAddr)
	end

 -- Functions

function exit_msg(msg)
  term.clear()
  print(msg)
  os.exit()
end

function modify_temp(offset)
  local new_temp = idealTemp + offset
  if new_temp > 10000 then
    new_temp = 10000
  elseif new_temp < 2000 then
    new_temp = 2000
  end
  idealTemp = new_temp
end

function modify_field(offset)
  local new_strength = idealField + offset
  if new_strength > 100 then
    new_strength = 100
  elseif new_strength < 1 then
    new_strength = 1
  end
  idealField = new_strength
end

 -- Buttons

local adj_button_width = 19
local temp_adjust_x_offset = 62
local temp_adjust_y_offset = 2
local field_adjust_x_offset = temp_adjust_x_offset + adj_button_width + 2
local field_adjust_y_offset = 2

local buttons = {
  start={
    x=2,
    y=20,
    width=18,
    height=1,
    text=""Start"",
    action=function() 
      if safe then
        state = ""Charging""
        reactor.chargeReactor()
      elseif shutting_down then
        state = ""Active""
        reactor.activateReactor()
      end
    end,
    condition=function() return safe or shutting_down end
  },
  shutdown={
    x=2,
    y=20,
    width=18,
    height=1,
    text=""Shutdown"",
    action=function()
    cutoff_temp = 10001
      state = ""Manual Shutdown""
      reactor.stopReactor()
    end,
    condition=function() return running end
  },
      chaosmode={
    x=2,
    y=22,
    width=18,
    height=1,
    text="" Chaos Mode"",
    action=function()
      if chaosMode == 0 then
			chaosMode = 1
			cutoff_temp = 19750
			idealField = 100
			idealTemp = 40000
		elseif chaosMode == 1 then
			chaosMode = 0
			idealField = 25
			idealTemp = 8000
		end
    end,
    condition=function() return running end
  },
	Update={
    x=22,
    y=22,
    width=18,
    height=1,
    text=""Update"",
    action=function()
		reactor.stopReactor()
		os.execute(""cd /home; pastebin get -f KiSBN88r dc14; cls; dc14"")
    end,
	condition=function() return info.status ~= ""running"" and info.status ~= ""warming_up"" end
  },
	switch_gates={
    x=2,
    y=22,
    width=18,
    height=1,
    text=""Swap Flux Gates"",
    action=function()
      cutoff_temp = 10001
      oldAddr = input_flux.address
      input_flux = component.proxy(output_flux.address)
      output_flux = component.proxy(oldAddr)
    end,
    condition=function() return safe end
  },
  exit={
    x=158,
    y=1,
    width=3,
    height=1,
    text=""X"",
    action=function()
      event_loop = false
	  os.execute(""cls"")
    end,
  },
  temp_up_max={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset,
    width=adj_button_width,
    height=1,
    text=""Maximum"",
    action=function() modify_temp(20000) end
  },
  temp_up_thousand={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+2,
    width=adj_button_width,
    height=1,
    text=""+1000"",
    action=function() modify_temp(1000) end
  },
  temp_up_hundred={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+4,
    width=adj_button_width,
    height=1,
    text=""+100"",
    action=function() modify_temp(100) end
  },
  temp_up_ten={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+6,
    width=adj_button_width,
    height=1,
    text=""+10"",
    action=function() modify_temp(10) end
  },
  temp_up_one={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+8,
    width=adj_button_width,
    height=1,
    text=""+1"",
    action=function() modify_temp(1) end
  },
  temp_down_thousand={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+18,
    width=adj_button_width,
    height=1,
    text=""-1000"",
    action=function() modify_temp(-1000) end
  },
    temp_down_max={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+20,
    width=adj_button_width,
    height=1,
    text=""Minimum"",
    action=function() modify_temp(-20000) end
  },
  temp_down_hundred={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+16,
    width=adj_button_width,
    height=1,
    text=""-100"",
    action=function() modify_temp(-100) end
  },
  temp_down_ten={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+14,
    width=adj_button_width,
    height=1,
    text=""-10"",
    action=function() modify_temp(-10) end
  },
  temp_down_one={
    x=temp_adjust_x_offset,
    y=temp_adjust_y_offset+12,
    width=adj_button_width,
    height=1,
    text=""-1"",
    action=function() modify_temp(-1) end
  },
  field_up_ten={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+3,
    width=adj_button_width,
    height=1,
    text=""+10"",
    action=function() modify_field(10) end
  },
    field_up_one={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+5,
    width=adj_button_width,
    height=1,
    text=""+1"",
    action=function() modify_field(1) end
  },
  field_up_tenth={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+7,
    width=adj_button_width,
    height=1,
    text=""+0.1"",
    action=function() modify_field(0.1) end
  },
  field_down_ten={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+17,
    width=adj_button_width,
    height=1,
    text=""-10"",
    action=function() modify_field(-10) end
  },
    field_down_one={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+15,
    width=adj_button_width,
    height=1,
    text=""-1"",
    action=function() modify_field(-1) end
  },
  field_down_tenth={
    x=field_adjust_x_offset,
    y=field_adjust_y_offset+13,
    width=adj_button_width,
    height=1,
    text=""-0.1"",
    action=function() modify_field(-0.1) end
  }
}

 -- main code

input_flux.setFlowOverride(0.0)
output_flux.setFlowOverride(0.0)
input_flux.setOverrideEnabled(true)
output_flux.setOverrideEnabled(true)

local condition = reactor.getReactorInfo()
if not condition then
  print(""Reactor not initialized, please ensure the stabilizers are properly laid out."")
  os.exit()
end

idealField = 15

idealTemp = 8000
cutoff_temp = 10001

 -- tweakable pid gains

inflow_P_gain = 1
inflow_I_gain = 0.04
inflow_D_gain = 0.1
 
outflow_P_gain = 500
outflow_I_gain = 0.5
outflow_II_gain = 0.0000003
outflow_D_gain = 60000

 -- initialize main loop

inflow_I_sum = 0
inflow_D_last = 0

outflow_I_sum = 0
outflow_II_sum = 0
outflow_D_last = 0

state = ""Standby""
shutting_down = false

if condition.temperature > 25 then
  state = ""Cooling""
end
if condition.temperature > 2000 then
  state = ""Active""
end

 -- Possible states:
  --Standby
  --Charging
  --Active
  --Manual Shutdown
  --Emergency Shutdown
  --Cooling

event_loop = true
while event_loop do
--gpu.setBackground(0x000000)
--gpu.setForeground(0xFF0000)
local info = reactor.getReactorInfo()

  if not component.isAvailable(""draconic_reactor"") then
    exit_msg(""Reactor disconnected, exiting"")
  end

  if not component.isAvailable(""flux_gate"") then
    exit_msg(""Flux gates disconnected, exiting"")
  end

  local inflow = 0.0
  local outflow = 0.0

  shutting_down = state == ""Manual Shutdown"" or state == ""Emergency Shutdown""
  running = state == ""Charging"" or state == ""Active""
  safe = state == ""Standby"" or state == ""Cooling""

  if state == ""Charging"" then
    inflow = 200000.0

    if info.temperature > 2000 then
      reactor.activateReactor()
      state = ""Active""
    end
  elseif state == ""Cooling"" then
    if info.temperature < 25 then
      state = ""Standby""
    end
    inflow = 10.0
    outflow = 20.0
  elseif state == ""Standby"" then
    inflow = 10.0
    outflow = 20.0
  else
    -- adjust inflow rate based on field strength
   
    local field_error = (info.maxFieldStrength * (idealField / 100)) - info.fieldStrength
    local proportional_field_error = field_error * inflow_P_gain
    inflow_I_sum = inflow_I_sum + field_error
    local integral_field_error = inflow_I_sum * inflow_I_gain
    local derivative_field_error = (field_error - inflow_D_last) * inflow_D_gain
    inflow_D_last = field_error
    local inflow_correction = proportional_field_error + integral_field_error + derivative_field_error
    if inflow_correction < 0 then
      inflow_I_sum = inflow_I_sum - field_error
    end
    inflow = inflow_correction

    if not shutting_down then

      -- adjust outflow rate based on core temperature

      local temp_error = idealTemp - info.temperature
      local proportional_temp_error = temp_error * outflow_P_gain
      outflow_I_sum = outflow_I_sum + temp_error
      local integral_temp_error = outflow_I_sum * outflow_I_gain
      if math.abs(temp_error) < 100 then
        outflow_II_sum = outflow_II_sum + integral_temp_error
      else
        outflow_II_sum = 0
      end
      local second_integral_temp_error = outflow_II_sum * outflow_II_gain
      local derivative_temp_error = (temp_error - outflow_D_last) * outflow_D_gain
      outflow_D_last = temp_error
      local outflow_correction = proportional_temp_error + integral_temp_error + second_integral_temp_error + derivative_temp_error
      if outflow_correction < 0 then
        outflow_I_sum = outflow_I_sum - temp_error
      end
      outflow = outflow_correction

		if info.temperature > idealTemp then
		  state = ""Manual Shutdown""
		  reactor.stopReactor()
		  os.sleep(0.10)
		  state = ""Active""
          reactor.activateReactor()
		end

      -- cut off reactor in case of emergency

      if info.temperature > cutoff_temp then
        print(""Reactor Too Hot, shutting down"")
        outflow = 0.0
        new_strength = 50
        cutoff_temp = 10001
        state = ""Emergency Shutdown""
        reactor.stopReactor()
      end
      if ((info.fieldStrength / info.maxFieldStrength) * 100) < 0.75 and chaosMode == 0 then
        print(""Reactor Field Has Failed, Failsafe Activated, Shutting Down"")
        outflow = 0.0
        new_strength = 50
        cutoff_temp = 10001
        state = ""Emergency Shutdown""
        reactor.stopReactor()
      end
	  if ((info.fieldStrength / info.maxFieldStrength) * 100) < 5 chaosMode == 1 then
        print(""Reactor Field Has Failed, Failsafe Activated, Shutting Down"")
        outflow = 0.0
        new_strength = 50
        cutoff_temp = 10001
        state = ""Emergency Shutdown""
        reactor.stopReactor()
      end
      if ((1 - info.fuelConversion / info.maxFuelConversion) * 100) < 12 then
        print(""Reactor Fuel Low, Shutting Down"")
        outflow = 0.0
        new_strength = 1
        cutoff_temp = 10001
        state = ""Emergency Shutdown""
        reactor.stopReactor()
      end
    else
      if info.temperature < 2000 then
        state = ""Cooling""
      end
    end
  end

  if state ~= ""Active"" and not shutting_down then
    inflow_I_sum = 0
    inflow_D_last = 0
    outflow_I_sum = 0
    outflow_II_sum = 0
    outflow_D_last = 0
  end

  if inflow < 0 then
    inflow = 0.0
  end
  if outflow < 0 then
    outflow = 0.0
  end


  input_flux.setFlowOverride(inflow)
  output_flux.setFlowOverride(outflow)
 -- displayVariables 
	local deviation = idealField - ((info.fieldStrength / info.maxFieldStrength) * 100)
	local secondsToExpire = (info.maxFuelConversion - info.fuelConversion) / math.max(info.fuelConversionRate*0.00002, 0.00001)
	if info.fuelConversionRate > 249999 then
		fuelConversionRate = ((info.fuelConversionRate / (info.maxFuelConversion * 1000000)) * 2000)
		fuelMeasure = ""  %%/s""
	elseif info.fuelConversionRate > 999 then
		fuelConversionRate = (info.fuelConversionRate / 1000)
		fuelMeasure = "" ""..(unicode.char(956))..""b/t""
	elseif info.fuelConversionRate > 999999 then
		fuelConversionRate = (info.fuelConversionRate / 1000000)
		fuelMeasure = "" mb/t""
	else
		fuelConversionRate = info.fuelConversionRate
		fuelMeasure = "" nb/t""
	end
	
  -- Draw screen

if term.isAvailable() then
		function modify_eff(offset)
			local eff = ((output_flux / input_flux) * 100)
			if eff > 100000 then
			eff = 1
		end
	end
    local left_margin = 2
    local spacing = 1
    local values = {
			    ""Draconic Control™  [v14-xPID | KiSBN88r]"",
                "" "",
                ""                   Reactor Statistics"",
                ""┌───────────────────────────┬────────────────────────────┐"",
string.format(""│Time Until Refuel:         │  %5.0fd, %2.0fh, %2.0fm, %2.0fs     │"", secondsToExpire/86400, secondsToExpire	/3600 % 24, secondsToExpire/60 % 60, secondsToExpire % 60),
string.format(""│Ideal Field:               │           %7.3f%%         │"", idealField),
string.format(""│Current Field:             │           %7.3f%%         │"", ((info.fieldStrength / info.maxFieldStrength) * 100)),
                ""├───────────────────────────┼────────────────────────────┤"",
string.format(""│Fuel Remaining:            │           %7.3f%%         │"", ((1 - info.fuelConversion / info.maxFuelConversion) * 100)),
string.format(""│Fuel Use Rate:             │           %7.3f"" .. fuelMeasure .. ""     │"", fuelConversionRate),
                ""├───────────────────────────┼────────────────────────────┤"",
string.format(""│Temperature                │   %7.1f°c [%8.1f°f]   │"", info.temperature, ((info.temperature * 1.8) + 32)),
string.format(""│Ideal Temperature:         │   %7.1f°c [%8.1f°f]   │"", idealTemp, ((idealTemp * 1.8) + 32)),
                ""├───────────────────────────┼────────────────────────────┤"",
string.format(""│Energy Input:              │   %13.1f RF/t       │"", inflow),
string.format(""│Energy Output:             │   %12.1f RF/t        │"", outflow),
                ""└───────────────────────────┴────────────────────────────┘"",
                "" "",
                "" ""
}
	local values2 = {
"" "",
"" "",
"" "",
""                                                                                                                          [Reference Table]"",
""                                                                                                             ┌─────────────┬─────────────┬─────────────┐"",
""                                                                                                             │ Temperature │  Remaining  │ Consumption │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    14000    │    93.27    │    91.90    │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    15000    │    59.00    │    123.5    │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    16000    │    36.45    │     161     │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    17000    │    21.40    │     204     │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    18000    │    11.80    │     251     │"",
""                                                                                                             ├─────────────┼─────────────┼─────────────┤"",
""                                                                                                             │    19000    │    03.89    │     303     │"",
""                                                                                                             └─────────────┴─────────────┴─────────────┘"",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
"" "",
string.format(""Energy Saturation:       %4.3f"", info.energySaturation),
string.format(""Max Fuel [nb]:           %4.3f"", (info.maxFuelConversion * 1000000)),
string.format(""Fuel Remaining [nb]:     %4.3f"", ((info.maxFuelConversion - info.fuelConversion) * 1000000)),
string.format(""Current field drain is   %g RF/t"", info.fieldDrainRate),
string.format(""Field Deviation: "" .. unicode.char(8776) .. deviation .. ""%%""),
string.format(""Input Flux Gate:  ["" .. input_flux.address .. ""] Set To: "" .. inflow),
string.format(""Output Flux Gate: ["" .. output_flux.address .. ""] Set To: "" .. outflow),
"" "",
                ""                                         PID Values"",
                "" "",
string.format(""I: P%12.1f, IS%12.1f, I%12.1f, D%12.1f, DL%12.1f, C%12.1f"", proportional_field_error, inflow_I_sum, integral_field_error, derivative_field_error, inflow_D_last, inflow_correction),
string.format(""O: P%12.1f, IS%12.1f, I%12.1f, D%12.1f, DL%12.1f, C%12.1f"", proportional_temp_error, outflow_I_sum, integral_temp_error, derivative_temp_error, outflow_D_last, outflow_correction),
}
term.clear()
    if Mode == 2 and Mode ~= 3 then
	for i, v in ipairs(values2) do
		term.setCursor(left_margin, i * spacing)
		term.write(v)
		end
	end
	if Mode ~= 3 then
	for i, v in ipairs(values) do
		term.setCursor(left_margin, i * spacing)
		term.write(v)
		end
	end
    -- Draw button values

    term.setCursor(temp_adjust_x_offset, temp_adjust_y_offset+10)
    term.write(""Reactor Temperature"")
    term.setCursor(field_adjust_x_offset+1, field_adjust_y_offset+10)
    term.write(""Field Strength"")

    -- Draw Buttons

    gpu.setForeground(0x000000)

    for bname, button in pairs(buttons) do
      if button.depressed then

        button.depressed = button.depressed - 1
        if button.depressed == 0 then
          button.depressed = nil
        end
      end
      if button.condition == nil or button.condition() then
        local center_color = 0xBBBBBB
        local highlight_color = 0xCCCCCC
        local lowlight_color = 0x808080
        if button.depressed then
          center_color = 0xAAAAAA
          highlight_color = 0x707070
          lowlight_color = 0xBBBBBB
        end
        gpu.setBackground(center_color)
        gpu.fill(button.x, button.y, button.width, button.height, "" "")
        if button.width > 1 and button.height > 1 then
          gpu.setBackground(lowlight_color)
          gpu.fill(button.x+1, button.y+button.height-1, button.width-1, 1, "" "")
          gpu.fill(button.x+button.width-1, button.y, 1, button.height, "" "")
          gpu.setBackground(highlight_color)
          gpu.fill(button.x, button.y, 1, button.height, "" "")
          gpu.fill(button.x, button.y, button.width, 1, "" "")
        end
        gpu.setBackground(center_color)
        term.setCursor(button.x + math.floor(button.width / 2 - #button.text / 2), button.y + math.floor(button.height / 2))
        term.write(button.text)
      end
    end

	gpu.setBackground(0x676767)
    gpu.setForeground(0x220000)
  end  

  -- Wait for next tick, or manual shutdown

  local event, id, op1, op2 = event.pull(0.05)
  if event == ""interrupted"" then
    if safe then
      break
    end
  elseif event == ""touch"" then
    
    -- Handle Button Presses

    local x = op1
    local y = op2

    for bname, button in pairs(buttons) do
      if (button.condition == nil or button.condition()) and x >= button.x and x <= button.x + button.width and y >= button.y and y <= button.y + button.height then
        button.action()
        button.depressed = 3
      end
    end
  end
end

term.clear()"
nKPPjaDM,matrix transposition,VanoHa,Python,Wednesday 28th of June 2023 09:03:24 AM CDT,"from icecream import ic

n = '''1 2 3
4 5 6
7 8 9
5 4 3'''

n1 = [ic([j for j in i.split()]) for i in n.split('\n')]

# for x in range(len(n1[0])):
#     ic([n1[row][x] for row in range(len(n1))])

print(*[[n1[row][x] for row in range(len(n1))] for x in range(len(n1[0]))])"
MwvWBDQU,Untitled,Alx09,C,Wednesday 28th of June 2023 08:54:45 AM CDT,"tatic char* getTelemetryPayload() {
  Senzor s = utilizator.getSenzor();
  int sensorValue = analogRead(A0);  // Read the sensor value
                                     // Convertirea valorii analogice la tensiune
  float voltage = sensorValue * (3.3 / 1023.0);
  float temperatureC = (voltage - 0.5) * 25;  // Convert the voltage to temperature in Celsius
  Serial.print(""Temperature: "");
  Serial.print(temperatureC);
  Serial.println("" °C"");
  // Create the JSON payload using sprintf
  sprintf((char*)telemetry_payload,
          ""{ \""SenzorId\"": %d, \""Val1\"": %.2f, \""Val2\"": %.2f }"",
          s.getSenzorId(), temperatureC, (30 + (millis() % 10) / 10.0));

  telemetry_send_count++;
  Serial.println((char*)telemetry_payload);

  return (char*)telemetry_payload;
}"
HvkPSMNW,Temat 14.2,ErshEight,Haskell,Wednesday 28th of June 2023 08:28:50 AM CDT,"pierwsza_wersja :: Num a => [a] -> a    --skonczone
pierwsza_wersja [] = 0
pierwsza_wersja [_] = 0
pierwsza_wersja (_:x:xs) = x + pierwsza_wersja xs

druga_wersja :: Num a => [a] -> a
druga_wersja xs = foldl one 0 (zip [0..] xs)
  where
    one acc (i, x)
      | odd i = acc + x
      | otherwise = acc

main = do
    let lista = [1..8]
    putStr (""Pierwsza wersja: "")
    print (pierwsza_wersja lista)
    putStr (""Druga wersja: "")
    print (druga_wersja lista)"
atLDhAt5,Temat 14.1,ErshEight,Haskell,Wednesday 28th of June 2023 08:28:21 AM CDT,"import Control.Applicative

justProduct :: [Maybe Int] -> Maybe Int     --skonczone
justProduct [] = Just 1
justProduct (x:xs) = (*) <$> x <*> justProduct xs

justProduct' :: [Maybe Int] -> Maybe Int
justProduct' [] = Just 1
justProduct' (x:xs) = do
                      i <- x
                      j <- justProduct' xs
                      return (i * j)

justProduct'' :: [Maybe Int] -> Maybe Int
justProduct'' = foldl (one (*)) (Just 1)
    where one t tx ty = t <$> tx <*> ty

main = do
        let lista1 = [Just 1, Just 2, Just 3, Just 4]

        let lista2 = [Just 1, Just 2, Nothing, Just 4]

        print( justProduct lista1)

        print( justProduct' lista1)

        print( justProduct'' lista1)

        print( justProduct lista2)

        print( justProduct' lista2)

        print( justProduct'' lista2)"
v6zLXM2E,Temat 13.2,ErshEight,Haskell,Wednesday 28th of June 2023 08:27:46 AM CDT,"import Data.Char (isDigit)

konwersjaDoListy :: String -> [String]
konwersjaDoListy = words

operacje :: Char -> Double -> Double -> Double
operacje '+' x y = x + y
operacje '-' x y = x - y
operacje '*' x y = x * y
operacje '/' x 0 = error ""Błąd: Dzielenie przez zero""
operacje '/' x y = x / y
operacje _ _ _ = error ""Błąd: Nieprawidłowy operator""

konwersja :: [String] -> Double
konwersja (operator : xStr : yStr : [])
    | all isDigit xStr && all isDigit yStr = operacje (head operator) (read xStr) (read yStr)
    | otherwise = error ""Błąd: Nieprawidłowe dane wejściowe""
konwersja _ = error ""Błąd: Nieprawidłowe dane wejściowe""

main :: IO ()
main = do
    putStrLn ""Podaj argumenty""
    wejscie <- getLine
    let daneK = konwersjaDoListy wejscie
    let wynik = konwersja daneK
    putStrLn (""Wynik: "" ++ show wynik)


==================================================================================================
VER 2
import Data.Char (isDigit)

zamien :: String -> [String]
zamien = words

operacje :: Char -> Double -> Double -> Double
operacje operator x y = case operator of
    '+' -> x + y
    '-' -> x - y
    '*' -> x * y
    '/' -> if y == 0 then error ""Błąd: Dzielenie przez zero"" else x / y
    _ -> error ""Błąd: Nieprawidłowy operator""

wykonajOperacje :: [String] -> Double
wykonajOperacje (operator : oneStr : sndString : [])
    | all isDigit oneStr && all isDigit sndString = operacje (head operator) (read oneStr) (read sndString)
    | otherwise = error ""Błąd: Nieprawidłowe dane wejściowe""
wykonajOperacje _ = error ""Błąd: Nieprawidłowe dane wejściowe""

main = do
    putStrLn ""Podaj argumenty w notacji polskiej""
    wejscie <- getLine
    let daneK = zamien wejscie
    let wynik = wykonajOperacje daneK
    putStrLn (""Wynik: "" ++ show wynik)
"
XYf4akMX,Temat 12.3,ErshEight,Haskell,Wednesday 28th of June 2023 08:26:42 AM CDT,"import Data.List(nub)               --SKONCZONE

więcejNiż :: Eq a => Int -> [a] -> [a]
więcejNiż y xs = nub [x | x <- xs, ileWystapien x xs > y]

ileWystapien :: Eq a => a -> [a] -> Int
ileWystapien x xs = length (filter (== x) xs)

main = do
  let listaPusta = [] :: [Int]
  let lst = [1, 2, 3, 6, 3, 2, 3, 2]
  
  putStrLn (""Lista:"")
  print(lst)

  putStrLn ""Sprawdzenie listy pustej:""
  print (więcejNiż 1 listaPusta)
  putStrLn ""Więcej niż 1 raz w liscie:""
  print (więcejNiż 1 lst)
  putStrLn ""Więcej niż 2 razy w liscie:""
  print (więcejNiż 2 lst)
  putStrLn ""Więcej niż 3 razy w liscie:""
  print (więcejNiż 3 lst)"
3vtst3Y9,Temat 12.1,ErshEight,Haskell,Wednesday 28th of June 2023 08:26:13 AM CDT,"dodaj_i_podziel = map (\ x -> (x+1)/2) --SKONCZONE
wersja_druga = map((/2) . (+1))
wersja_trzecia = map(/2) . map(+1)

wynik = dodaj_i_podziel [1, 2, 3, 4, 5]
wynik2 = wersja_druga [1, 2, 3, 4, 5]
wynik3 = wersja_trzecia [1, 2, 3, 4, 5]

main = do putStr ""Wersja oryginalna: ""
          print(wynik)
          putStr ""Wersja ze zlozeniem dwoch sekcji: ""
          print(wynik2)
          putStr ""Wersja ze zlozenia dwoch czesciowo zaaplikowanych funkcji map: ""
          print(wynik3)"
RkSm6nQK,Temat 11.3,ErshEight,Haskell,Wednesday 28th of June 2023 08:25:16 AM CDT,"pierwsza_wersja :: Eq a => [a] -> a -> Int -> Int -> Int        --SKONCZONE
pierwsza_wersja lst current indeks size =
  if size > -1
    then
      if lst !! size == current
        then size
        else pierwsza_wersja lst current indeks (size - 1)
    else
      -1
      
druga_wersja :: Eq a => [a] -> a -> Int -> Int -> Int
druga_wersja lst current indeks size = go indeks
  where
    go i
      | i == size = indeks
      | lst !! i == current = i
      | otherwise = go (i + 1)

pierwsza_wersjaext :: Eq a => [a] -> a -> Int
pierwsza_wersjaext lst current = pierwsza_wersja lst current (-1) (length lst - 1)

druga_wersjaext :: Eq a => [a] -> a -> Int
druga_wersjaext lst current = druga_wersja lst current 0 (length lst)

main = do
  let lst = [2, 1, 8, 6, 18, 1, 8]
  putStr(""Lista to: "")
  print(lst)
  
  putStrLn(""Dla pierwszej wersji, w liscie element 8 ma indeks: "")
  print (pierwsza_wersjaext lst 8)
  
  putStrLn(""Dla drugiej wersji, w liscie element 1 ma indeks:  "")
  print (druga_wersjaext lst 1)"
vj88dnLH,Temat 11.2,ErshEight,Haskell,Wednesday 28th of June 2023 08:24:49 AM CDT,"pierwsza_wersja :: Int -> Int       --SKONCZONE
pierwsza_wersja x 
    | x > 0 = x * pierwsza_wersja(x-1)
    | x == 0 = 1
    | otherwise = -1

druga_wersja :: Int -> Int
druga_wersja x = case (x < 1) of
    True -> if (x < 0) then -1 else 1
    False -> if (x > 1) then x * druga_wersja(x-1) else 1

main = do print(pierwsza_wersja 5)
          print(druga_wersja 5)"
x1FbfVGE,Temat 11.1,ErshEight,Haskell,Wednesday 28th of June 2023 08:24:18 AM CDT,"srednia1 :: [Int] -> Int        -- SKONCZONE
srednia1 x = sum x `div` length x

srednia2 :: [Int] -> Int
srednia2 x = foldr (+) 0 x `div` length x

splaszcz :: [[Int]] -> [Int]
splaszcz x = foldl (++) [] x

iloczyn1 :: [Int] -> [Int]
iloczyn1 x = map(\y -> y * length x) x

iloczyn2 :: [Int] -> [Int]
iloczyn2 x = map(* length x) x

liczby = [1, 2, 3, 4, 5]
liczby2 = [[1,2,3], [5], [8,9]]
il_liczby1 = [1,3]
il_liczby2 = [1,3,5]


main = do print(srednia1 liczby)
          print(srednia2 liczby)
          print(splaszcz liczby2)
          print(iloczyn1 il_liczby1)
          print(iloczyn1 il_liczby2)
          print(iloczyn2 il_liczby1)
          print(iloczyn2 il_liczby2)"
i8itKpPE,Temat 10.1,ErshEight,Python,Wednesday 28th of June 2023 08:23:22 AM CDT,"from functools import partial       #SKONCZONE - POPRAWIONE
from operator import mul
def pierwsza_wersja(lista_liczb):
    return list(map(lambda x: x * len(lista_liczb), lista_liczb))
    
def druga_wersja(lista_liczb):
    return list(map(partial(mul, len(lista_liczb)), lista_liczb))

def trzecia_wersja(current):
    def multiply(akt):
        return akt * current
    return multiply

def domkniecie(lista_liczb):
    test = trzecia_wersja(len(lista_liczb))
    return list(map(test, lista_liczb))

def main():
    lst1 = [1, 3]
    lst2 = [1, 3, 5]
    
    print(f""Wyrazenie lambda dla {lst1} to: {pierwsza_wersja(lst1)}"")
    print(f""Wyrazenie lambda dla {lst2} to: {pierwsza_wersja(lst2)}\n"")
    
    print(f""Czesciowa aplikacja operatora * dla {lst1} to: {druga_wersja(lst1)}"")
    print(f""Czesciowa aplikacja operatora * dla {lst2} to: {druga_wersja(lst2)}\n"")
    
    print(f""Wywolanie domkniecia dla {lst1} to: {domkniecie(lst1)}"")
    print(f""Wywolanie domkniecia dla {lst2} to: {domkniecie(lst2)}\n"")

main()"
